3 :	"import"
		- NEIGH  = { import , asyncio , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { import , BaseEventLoop , }

3 :	"asyncio"
		- NEIGH  = { import , asyncio , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { import , BaseEventLoop , }

4 :	"import"
		- NEIGH  = { import , BaseEventLoop , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , asyncio , }
		- SUCC   = { import , Executor , ProcessPoolExecutor , }

4 :	"BaseEventLoop"
		- NEIGH  = { import , BaseEventLoop , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , asyncio , }
		- SUCC   = { import , Executor , ProcessPoolExecutor , }

5 :	"import"
		- NEIGH  = { import , Executor , ProcessPoolExecutor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , BaseEventLoop , }
		- SUCC   = { import , partial , }

5 :	"Executor"
		- NEIGH  = { import , Executor , ProcessPoolExecutor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , BaseEventLoop , }
		- SUCC   = { import , partial , }

5 :	"ProcessPoolExecutor"
		- NEIGH  = { import , Executor , ProcessPoolExecutor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , BaseEventLoop , }
		- SUCC   = { import , partial , }

6 :	"import"
		- NEIGH  = { import , partial , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Executor , ProcessPoolExecutor , }
		- SUCC   = { import , keyword , }

6 :	"partial"
		- NEIGH  = { import , partial , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Executor , ProcessPoolExecutor , }
		- SUCC   = { import , keyword , }

7 :	"import"
		- NEIGH  = { import , keyword , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , partial , }
		- SUCC   = { import , os , }

7 :	"keyword"
		- NEIGH  = { import , keyword , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , partial , }
		- SUCC   = { import , os , }

8 :	"import"
		- NEIGH  = { import , os , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , keyword , }
		- SUCC   = { import , Path , }

8 :	"os"
		- NEIGH  = { import , os , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , keyword , }
		- SUCC   = { import , Path , }

9 :	"import"
		- NEIGH  = { import , Path , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , os , }
		- SUCC   = { import , tokenize , }

9 :	"Path"
		- NEIGH  = { import , Path , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , os , }
		- SUCC   = { import , tokenize , }

10 :	"import"
		- NEIGH  = { import , tokenize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Path , }
		- SUCC   = { import , sys , }

10 :	"tokenize"
		- NEIGH  = { import , tokenize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Path , }
		- SUCC   = { import , sys , }

11 :	"import"
		- NEIGH  = { import , sys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tokenize , }
		- SUCC   = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }

11 :	"sys"
		- NEIGH  = { import , sys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tokenize , }
		- SUCC   = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }

12 :	"import"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Dict"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Generic"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Iterable"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Iterator"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"List"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Optional"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Set"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Tuple"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"TypeVar"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

13 :	"Union"
		- NEIGH  = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { import , dataclass , Factory , }

16 :	"import"
		- NEIGH  = { import , dataclass , Factory , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- SUCC   = { import , click , }

16 :	"dataclass"
		- NEIGH  = { import , dataclass , Factory , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- SUCC   = { import , click , }

16 :	"Factory"
		- NEIGH  = { import , dataclass , Factory , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Dict , Generic , Iterable , Iterator , List , Optional , Set , Tuple , TypeVar , Union , }
		- SUCC   = { import , click , }

17 :	"import"
		- NEIGH  = { import , click , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , dataclass , Factory , }
		- SUCC   = { import , Node , Leaf , type_repr , }

17 :	"click"
		- NEIGH  = { import , click , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , dataclass , Factory , }
		- SUCC   = { import , Node , Leaf , type_repr , }

20 :	"import"
		- NEIGH  = { import , Node , Leaf , type_repr , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , click , }
		- SUCC   = { import , pygram , pytree , }

20 :	"Node"
		- NEIGH  = { import , Node , Leaf , type_repr , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , click , }
		- SUCC   = { import , pygram , pytree , }

20 :	"Leaf"
		- NEIGH  = { import , Node , Leaf , type_repr , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , click , }
		- SUCC   = { import , pygram , pytree , }

20 :	"type_repr"
		- NEIGH  = { import , Node , Leaf , type_repr , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , click , }
		- SUCC   = { import , pygram , pytree , }

21 :	"import"
		- NEIGH  = { import , pygram , pytree , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Node , Leaf , type_repr , }
		- SUCC   = { import , driver , token , }

21 :	"pygram"
		- NEIGH  = { import , pygram , pytree , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Node , Leaf , type_repr , }
		- SUCC   = { import , driver , token , }

21 :	"pytree"
		- NEIGH  = { import , pygram , pytree , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , Node , Leaf , type_repr , }
		- SUCC   = { import , driver , token , }

22 :	"import"
		- NEIGH  = { import , driver , token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , pygram , pytree , }
		- SUCC   = { import , ParseError , }

22 :	"driver"
		- NEIGH  = { import , driver , token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , pygram , pytree , }
		- SUCC   = { import , ParseError , }

22 :	"token"
		- NEIGH  = { import , driver , token , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , pygram , pytree , }
		- SUCC   = { import , ParseError , }

23 :	"import"
		- NEIGH  = { import , ParseError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , driver , token , }
		- SUCC   = { __version__ , }

23 :	"ParseError"
		- NEIGH  = { import , ParseError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , driver , token , }
		- SUCC   = { __version__ , }

25 :	"__version__"
		- NEIGH  = { __version__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , ParseError , }
		- SUCC   = { DEFAULT_LINE_LENGTH , }

26 :	"DEFAULT_LINE_LENGTH"
		- NEIGH  = { DEFAULT_LINE_LENGTH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __version__ , }
		- SUCC   = { syms , pygram , python_symbols , }

28 :	"syms"
		- NEIGH  = { syms , pygram , python_symbols , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DEFAULT_LINE_LENGTH , }
		- SUCC   = { FileContent , str , }

28 :	"pygram"
		- NEIGH  = { syms , pygram , python_symbols , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DEFAULT_LINE_LENGTH , }
		- SUCC   = { FileContent , str , }

28 :	"python_symbols"
		- NEIGH  = { syms , pygram , python_symbols , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DEFAULT_LINE_LENGTH , }
		- SUCC   = { FileContent , str , }

29 :	"FileContent"
		- NEIGH  = { FileContent , str , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { syms , pygram , python_symbols , }
		- SUCC   = { Encoding , str , }

29 :	"str"
		- NEIGH  = { FileContent , str , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { syms , pygram , python_symbols , }
		- SUCC   = { Encoding , str , }

30 :	"Encoding"
		- NEIGH  = { Encoding , str , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FileContent , str , }
		- SUCC   = { Depth , int , }

30 :	"str"
		- NEIGH  = { Encoding , str , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FileContent , str , }
		- SUCC   = { Depth , int , }

31 :	"Depth"
		- NEIGH  = { Depth , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Encoding , str , }
		- SUCC   = { NodeType , int , }

31 :	"int"
		- NEIGH  = { Depth , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Encoding , str , }
		- SUCC   = { NodeType , int , }

32 :	"NodeType"
		- NEIGH  = { NodeType , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Depth , int , }
		- SUCC   = { LeafID , int , }

32 :	"int"
		- NEIGH  = { NodeType , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Depth , int , }
		- SUCC   = { LeafID , int , }

33 :	"LeafID"
		- NEIGH  = { LeafID , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NodeType , int , }
		- SUCC   = { Priority , int , }

33 :	"int"
		- NEIGH  = { LeafID , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NodeType , int , }
		- SUCC   = { Priority , int , }

34 :	"Priority"
		- NEIGH  = { Priority , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LeafID , int , }
		- SUCC   = { LN , Union , tuple , Leaf , Node , }

34 :	"int"
		- NEIGH  = { Priority , int , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LeafID , int , }
		- SUCC   = { LN , Union , tuple , Leaf , Node , }

35 :	"LN"
		- NEIGH  = { LN , Union , tuple , Leaf , Node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Priority , int , }
		- SUCC   = { out , partial , click , secho , bold , err , }

35 :	"Union"
		- NEIGH  = { LN , Union , tuple , Leaf , Node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Priority , int , }
		- SUCC   = { out , partial , click , secho , bold , err , }

35 :	"tuple"
		- NEIGH  = { LN , Union , tuple , Leaf , Node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Priority , int , }
		- SUCC   = { out , partial , click , secho , bold , err , }

35 :	"Leaf"
		- NEIGH  = { LN , Union , tuple , Leaf , Node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Priority , int , }
		- SUCC   = { out , partial , click , secho , bold , err , }

35 :	"Node"
		- NEIGH  = { LN , Union , tuple , Leaf , Node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Priority , int , }
		- SUCC   = { out , partial , click , secho , bold , err , }

36 :	"out"
		- NEIGH  = { out , partial , click , secho , bold , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LN , Union , tuple , Leaf , Node , }
		- SUCC   = { err , partial , click , secho , fg , err , }

36 :	"partial"
		- NEIGH  = { out , partial , click , secho , bold , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LN , Union , tuple , Leaf , Node , }
		- SUCC   = { err , partial , click , secho , fg , err , }

36 :	"click"
		- NEIGH  = { out , partial , click , secho , bold , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LN , Union , tuple , Leaf , Node , }
		- SUCC   = { err , partial , click , secho , fg , err , }

36 :	"secho"
		- NEIGH  = { out , partial , click , secho , bold , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LN , Union , tuple , Leaf , Node , }
		- SUCC   = { err , partial , click , secho , fg , err , }

36 :	"bold"
		- NEIGH  = { out , partial , click , secho , bold , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LN , Union , tuple , Leaf , Node , }
		- SUCC   = { err , partial , click , secho , fg , err , }

36 :	"err"
		- NEIGH  = { out , partial , click , secho , bold , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LN , Union , tuple , Leaf , Node , }
		- SUCC   = { err , partial , click , secho , fg , err , }

37 :	"err"
		- NEIGH  = { err , partial , click , secho , fg , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , partial , click , secho , bold , err , }
		- SUCC   = { NothingChanged , }

37 :	"partial"
		- NEIGH  = { err , partial , click , secho , fg , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , partial , click , secho , bold , err , }
		- SUCC   = { NothingChanged , }

37 :	"click"
		- NEIGH  = { err , partial , click , secho , fg , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , partial , click , secho , bold , err , }
		- SUCC   = { NothingChanged , }

37 :	"secho"
		- NEIGH  = { err , partial , click , secho , fg , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , partial , click , secho , bold , err , }
		- SUCC   = { NothingChanged , }

37 :	"fg"
		- NEIGH  = { err , partial , click , secho , fg , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , partial , click , secho , bold , err , }
		- SUCC   = { NothingChanged , }

37 :	"err"
		- NEIGH  = { err , partial , click , secho , fg , err , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , partial , click , secho , bold , err , }
		- SUCC   = { NothingChanged , }

40 :	"NothingChanged"
		- NEIGH  = { NothingChanged , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , partial , click , secho , fg , err , }
		- SUCC   = { CannotSplit , }

44 :	"CannotSplit"
		- NEIGH  = { CannotSplit , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NothingChanged , }
		- SUCC   = { click , command , }

51 :	"click"
		- NEIGH  = { click , command , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CannotSplit , }
		- SUCC   = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }

51 :	"command"
		- NEIGH  = { click , command , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CannotSplit , }
		- SUCC   = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }

52 :	"click"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

52 :	"option"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

55 :	"type"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

55 :	"int"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

56 :	"default"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

56 :	"DEFAULT_LINE_LENGTH"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

57 :	"help"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

58 :	"show_default"
		- NEIGH  = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , command , }
		- SUCC   = { click , option , is_flag , help , }

60 :	"click"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- SUCC   = { click , option , is_flag , help , }

60 :	"option"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- SUCC   = { click , option , is_flag , help , }

62 :	"is_flag"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- SUCC   = { click , option , is_flag , help , }

63 :	"help"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , type , int , default , DEFAULT_LINE_LENGTH , help , show_default , }
		- SUCC   = { click , option , is_flag , help , }

69 :	"click"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , version_option , version , __version__ , }

69 :	"option"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , version_option , version , __version__ , }

71 :	"is_flag"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , version_option , version , __version__ , }

72 :	"help"
		- NEIGH  = { click , option , is_flag , help , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , version_option , version , __version__ , }

74 :	"click"
		- NEIGH  = { click , version_option , version , __version__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }

74 :	"version_option"
		- NEIGH  = { click , version_option , version , __version__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }

74 :	"version"
		- NEIGH  = { click , version_option , version , __version__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }

74 :	"__version__"
		- NEIGH  = { click , version_option , version , __version__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , option , is_flag , help , }
		- SUCC   = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }

75 :	"click"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

75 :	"argument"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

77 :	"nargs"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

78 :	"type"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

78 :	"click"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

78 :	"Path"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

79 :	"exists"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

79 :	"file_okay"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

79 :	"dir_okay"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

79 :	"readable"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

79 :	"allow_dash"
		- NEIGH  = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , version_option , version , __version__ , }
		- SUCC   = { click , pass_context , }

82 :	"click"
		- NEIGH  = { click , pass_context , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- SUCC   = { main , ctx , line_length , check , fast , src , }

82 :	"pass_context"
		- NEIGH  = { click , pass_context , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , argument , nargs , type , click , Path , exists , file_okay , dir_okay , readable , allow_dash , }
		- SUCC   = { main , ctx , line_length , check , fast , src , }

83 :	"main"
		- NEIGH  = { main , ctx , line_length , check , fast , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , pass_context , }
		- SUCC   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }

84 :	"ctx"
		- NEIGH  = { main , ctx , line_length , check , fast , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , pass_context , }
		- SUCC   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }

84 :	"line_length"
		- NEIGH  = { main , ctx , line_length , check , fast , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , pass_context , }
		- SUCC   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }

84 :	"check"
		- NEIGH  = { main , ctx , line_length , check , fast , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , pass_context , }
		- SUCC   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }

84 :	"fast"
		- NEIGH  = { main , ctx , line_length , check , fast , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , pass_context , }
		- SUCC   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }

84 :	"src"
		- NEIGH  = { main , ctx , line_length , check , fast , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , pass_context , }
		- SUCC   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }

87 :	"sources"
		- NEIGH  = { sources , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , s , src , }

87 :	"list"
		- NEIGH  = { sources , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , s , src , }

88 :	"for"
		- NEIGH  = { for , s , src , }
		- PARENT = { }
		- CHILD  = { p , Path , s , if , p , is_dir , }
		- PRED   = { sources , list , }
		- SUCC   = { if , len , sources , == , }

88 :	"s"
		- NEIGH  = { for , s , src , }
		- PARENT = { }
		- CHILD  = { p , Path , s , if , p , is_dir , }
		- PRED   = { sources , list , }
		- SUCC   = { if , len , sources , == , }

88 :	"src"
		- NEIGH  = { for , s , src , }
		- PARENT = { }
		- CHILD  = { p , Path , s , if , p , is_dir , }
		- PRED   = { sources , list , }
		- SUCC   = { if , len , sources , == , }

89 :	"p"
		- NEIGH  = { p , Path , s , }
		- PARENT = { for , s , src , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_dir , }

89 :	"Path"
		- NEIGH  = { p , Path , s , }
		- PARENT = { for , s , src , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_dir , }

89 :	"s"
		- NEIGH  = { p , Path , s , }
		- PARENT = { for , s , src , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_dir , }

90 :	"if"
		- NEIGH  = { if , p , is_dir , }
		- PARENT = { for , s , src , }
		- CHILD  = { sources , extend , gen_python_files_in_dir , p , if , p , is_file , }
		- PRED   = { p , Path , s , }
		- SUCC   = { }

90 :	"p"
		- NEIGH  = { if , p , is_dir , }
		- PARENT = { for , s , src , }
		- CHILD  = { sources , extend , gen_python_files_in_dir , p , if , p , is_file , }
		- PRED   = { p , Path , s , }
		- SUCC   = { }

90 :	"is_dir"
		- NEIGH  = { if , p , is_dir , }
		- PARENT = { for , s , src , }
		- CHILD  = { sources , extend , gen_python_files_in_dir , p , if , p , is_file , }
		- PRED   = { p , Path , s , }
		- SUCC   = { }

91 :	"sources"
		- NEIGH  = { sources , extend , gen_python_files_in_dir , p , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_file , }

91 :	"extend"
		- NEIGH  = { sources , extend , gen_python_files_in_dir , p , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_file , }

91 :	"gen_python_files_in_dir"
		- NEIGH  = { sources , extend , gen_python_files_in_dir , p , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_file , }

91 :	"p"
		- NEIGH  = { sources , extend , gen_python_files_in_dir , p , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , is_file , }

92 :	"if"
		- NEIGH  = { if , p , is_file , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { sources , append , p , if , s , == , }
		- PRED   = { sources , extend , gen_python_files_in_dir , p , }
		- SUCC   = { }

92 :	"p"
		- NEIGH  = { if , p , is_file , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { sources , append , p , if , s , == , }
		- PRED   = { sources , extend , gen_python_files_in_dir , p , }
		- SUCC   = { }

92 :	"is_file"
		- NEIGH  = { if , p , is_file , }
		- PARENT = { if , p , is_dir , }
		- CHILD  = { sources , append , p , if , s , == , }
		- PRED   = { sources , extend , gen_python_files_in_dir , p , }
		- SUCC   = { }

94 :	"sources"
		- NEIGH  = { sources , append , p , }
		- PARENT = { if , p , is_file , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , s , == , }

94 :	"append"
		- NEIGH  = { sources , append , p , }
		- PARENT = { if , p , is_file , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , s , == , }

94 :	"p"
		- NEIGH  = { sources , append , p , }
		- PARENT = { if , p , is_file , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , s , == , }

95 :	"if"
		- NEIGH  = { if , s , == , }
		- PARENT = { if , p , is_file , }
		- CHILD  = { sources , append , Path , err , s , }
		- PRED   = { sources , append , p , }
		- SUCC   = { }

95 :	"s"
		- NEIGH  = { if , s , == , }
		- PARENT = { if , p , is_file , }
		- CHILD  = { sources , append , Path , err , s , }
		- PRED   = { sources , append , p , }
		- SUCC   = { }

95 :	"=="
		- NEIGH  = { if , s , == , }
		- PARENT = { if , p , is_file , }
		- CHILD  = { sources , append , Path , err , s , }
		- PRED   = { sources , append , p , }
		- SUCC   = { }

96 :	"sources"
		- NEIGH  = { sources , append , Path , }
		- PARENT = { if , s , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , s , }

96 :	"append"
		- NEIGH  = { sources , append , Path , }
		- PARENT = { if , s , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , s , }

96 :	"Path"
		- NEIGH  = { sources , append , Path , }
		- PARENT = { if , s , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { err , s , }

98 :	"err"
		- NEIGH  = { err , s , }
		- PARENT = { if , s , == , }
		- CHILD  = { }
		- PRED   = { sources , append , Path , }
		- SUCC   = { }

98 :	"s"
		- NEIGH  = { err , s , }
		- PARENT = { if , s , == , }
		- CHILD  = { }
		- PRED   = { sources , append , Path , }
		- SUCC   = { }

99 :	"if"
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { }
		- CHILD  = { ctx , exit , if , len , sources , == , }
		- PRED   = { for , s , src , }
		- SUCC   = { }

99 :	"len"
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { }
		- CHILD  = { ctx , exit , if , len , sources , == , }
		- PRED   = { for , s , src , }
		- SUCC   = { }

99 :	"sources"
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { }
		- CHILD  = { ctx , exit , if , len , sources , == , }
		- PRED   = { for , s , src , }
		- SUCC   = { }

99 :	"=="
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { }
		- CHILD  = { ctx , exit , if , len , sources , == , }
		- PRED   = { for , s , src , }
		- SUCC   = { }

100 :	"ctx"
		- NEIGH  = { ctx , exit , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , sources , == , }

100 :	"exit"
		- NEIGH  = { ctx , exit , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , sources , == , }

101 :	"if"
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { p , sources , report , Report , check , check , try , if , p , is_file , or , str , p , == , report , done , p , changed , except , Exception , exc , ctx , exit , report , return_code , loop , asyncio , get_event_loop , executor , ProcessPoolExecutor , max_workers , os , cpu_count , return_code , try , return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , loop , close , ctx , exit , return_code , }
		- PRED   = { ctx , exit , }
		- SUCC   = { }

101 :	"len"
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { p , sources , report , Report , check , check , try , if , p , is_file , or , str , p , == , report , done , p , changed , except , Exception , exc , ctx , exit , report , return_code , loop , asyncio , get_event_loop , executor , ProcessPoolExecutor , max_workers , os , cpu_count , return_code , try , return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , loop , close , ctx , exit , return_code , }
		- PRED   = { ctx , exit , }
		- SUCC   = { }

101 :	"sources"
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { p , sources , report , Report , check , check , try , if , p , is_file , or , str , p , == , report , done , p , changed , except , Exception , exc , ctx , exit , report , return_code , loop , asyncio , get_event_loop , executor , ProcessPoolExecutor , max_workers , os , cpu_count , return_code , try , return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , loop , close , ctx , exit , return_code , }
		- PRED   = { ctx , exit , }
		- SUCC   = { }

101 :	"=="
		- NEIGH  = { if , len , sources , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { p , sources , report , Report , check , check , try , if , p , is_file , or , str , p , == , report , done , p , changed , except , Exception , exc , ctx , exit , report , return_code , loop , asyncio , get_event_loop , executor , ProcessPoolExecutor , max_workers , os , cpu_count , return_code , try , return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , loop , close , ctx , exit , return_code , }
		- PRED   = { ctx , exit , }
		- SUCC   = { }

102 :	"p"
		- NEIGH  = { p , sources , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , Report , check , check , }

102 :	"sources"
		- NEIGH  = { p , sources , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , Report , check , check , }

103 :	"report"
		- NEIGH  = { report , Report , check , check , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { p , sources , }
		- SUCC   = { try , }

103 :	"Report"
		- NEIGH  = { report , Report , check , check , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { p , sources , }
		- SUCC   = { try , }

103 :	"check"
		- NEIGH  = { report , Report , check , check , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { p , sources , }
		- SUCC   = { try , }

103 :	"check"
		- NEIGH  = { report , Report , check , check , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { p , sources , }
		- SUCC   = { try , }

104 :	"try"
		- NEIGH  = { try , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { report , Report , check , check , }
		- SUCC   = { if , p , is_file , or , str , p , == , }

105 :	"if"
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

105 :	"p"
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

105 :	"is_file"
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

105 :	"or"
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

105 :	"str"
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

105 :	"p"
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

105 :	"=="
		- NEIGH  = { if , p , is_file , or , str , p , == , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PRED   = { try , }
		- SUCC   = { report , done , p , changed , }

106 :	"changed"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

106 :	"format_stdin_to_stdout"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

107 :	"line_length"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

107 :	"line_length"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

107 :	"fast"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

107 :	"fast"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

107 :	"write_back"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

107 :	"check"
		- NEIGH  = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }

110 :	"changed"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

110 :	"format_file_in_place"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"p"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"line_length"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"line_length"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"fast"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"fast"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"write_back"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

111 :	"check"
		- NEIGH  = { changed , format_file_in_place , p , line_length , line_length , fast , fast , write_back , check , }
		- PARENT = { if , p , is_file , or , str , p , == , }
		- CHILD  = { }
		- PRED   = { changed , format_stdin_to_stdout , line_length , line_length , fast , fast , write_back , check , }
		- SUCC   = { }

113 :	"report"
		- NEIGH  = { report , done , p , changed , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { if , p , is_file , or , str , p , == , }
		- SUCC   = { except , Exception , exc , }

113 :	"done"
		- NEIGH  = { report , done , p , changed , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { if , p , is_file , or , str , p , == , }
		- SUCC   = { except , Exception , exc , }

113 :	"p"
		- NEIGH  = { report , done , p , changed , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { if , p , is_file , or , str , p , == , }
		- SUCC   = { except , Exception , exc , }

113 :	"changed"
		- NEIGH  = { report , done , p , changed , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { if , p , is_file , or , str , p , == , }
		- SUCC   = { except , Exception , exc , }

114 :	"except"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { report , failed , p , str , exc , }
		- PRED   = { report , done , p , changed , }
		- SUCC   = { ctx , exit , report , return_code , }

114 :	"Exception"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { report , failed , p , str , exc , }
		- PRED   = { report , done , p , changed , }
		- SUCC   = { ctx , exit , report , return_code , }

114 :	"exc"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { report , failed , p , str , exc , }
		- PRED   = { report , done , p , changed , }
		- SUCC   = { ctx , exit , report , return_code , }

115 :	"report"
		- NEIGH  = { report , failed , p , str , exc , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"failed"
		- NEIGH  = { report , failed , p , str , exc , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"p"
		- NEIGH  = { report , failed , p , str , exc , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"str"
		- NEIGH  = { report , failed , p , str , exc , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

115 :	"exc"
		- NEIGH  = { report , failed , p , str , exc , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

116 :	"ctx"
		- NEIGH  = { ctx , exit , report , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { loop , asyncio , get_event_loop , }

116 :	"exit"
		- NEIGH  = { ctx , exit , report , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { loop , asyncio , get_event_loop , }

116 :	"report"
		- NEIGH  = { ctx , exit , report , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { loop , asyncio , get_event_loop , }

116 :	"return_code"
		- NEIGH  = { ctx , exit , report , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { loop , asyncio , get_event_loop , }

118 :	"loop"
		- NEIGH  = { loop , asyncio , get_event_loop , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { ctx , exit , report , return_code , }
		- SUCC   = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }

118 :	"asyncio"
		- NEIGH  = { loop , asyncio , get_event_loop , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { ctx , exit , report , return_code , }
		- SUCC   = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }

118 :	"get_event_loop"
		- NEIGH  = { loop , asyncio , get_event_loop , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { ctx , exit , report , return_code , }
		- SUCC   = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }

119 :	"executor"
		- NEIGH  = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , asyncio , get_event_loop , }
		- SUCC   = { return_code , }

119 :	"ProcessPoolExecutor"
		- NEIGH  = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , asyncio , get_event_loop , }
		- SUCC   = { return_code , }

119 :	"max_workers"
		- NEIGH  = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , asyncio , get_event_loop , }
		- SUCC   = { return_code , }

119 :	"os"
		- NEIGH  = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , asyncio , get_event_loop , }
		- SUCC   = { return_code , }

119 :	"cpu_count"
		- NEIGH  = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , asyncio , get_event_loop , }
		- SUCC   = { return_code , }

120 :	"return_code"
		- NEIGH  = { return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { executor , ProcessPoolExecutor , max_workers , os , cpu_count , }
		- SUCC   = { try , }

121 :	"try"
		- NEIGH  = { try , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { return_code , }
		- SUCC   = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }

122 :	"return_code"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

122 :	"loop"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

122 :	"run_until_complete"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

123 :	"schedule_formatting"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

124 :	"sources"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

124 :	"line_length"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

124 :	"check"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

124 :	"fast"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

124 :	"loop"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

124 :	"executor"
		- NEIGH  = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { loop , close , }

128 :	"loop"
		- NEIGH  = { loop , close , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- SUCC   = { ctx , exit , return_code , }

128 :	"close"
		- NEIGH  = { loop , close , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { return_code , loop , run_until_complete , schedule_formatting , sources , line_length , check , fast , loop , executor , }
		- SUCC   = { ctx , exit , return_code , }

129 :	"ctx"
		- NEIGH  = { ctx , exit , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , close , }
		- SUCC   = { }

129 :	"exit"
		- NEIGH  = { ctx , exit , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , close , }
		- SUCC   = { }

129 :	"return_code"
		- NEIGH  = { ctx , exit , return_code , }
		- PARENT = { if , len , sources , == , }
		- CHILD  = { }
		- PRED   = { loop , close , }
		- SUCC   = { }

132 :	"async"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

132 :	"schedule_formatting"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

133 :	"sources"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

134 :	"line_length"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

135 :	"write_back"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

136 :	"fast"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

137 :	"loop"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

138 :	"executor"
		- NEIGH  = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { main , ctx , line_length , check , fast , src , }
		- SUCC   = { format_file_in_place , src , line_length , fast , write_back , }

140 :	"tasks"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

140 :	"dict-comp"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

141 :	"src"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

141 :	"loop"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

141 :	"run_in_executor"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

142 :	"executor"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

142 :	"format_file_in_place"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

142 :	"src"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

142 :	"line_length"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

142 :	"fast"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

142 :	"write_back"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

143 :	"for-comp"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

144 :	"src"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

144 :	"sources"
		- NEIGH  = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { await , asyncio , wait , tasks , values , }

146 :	"await"
		- NEIGH  = { await , asyncio , wait , tasks , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- SUCC   = { cancelled , list , }

146 :	"asyncio"
		- NEIGH  = { await , asyncio , wait , tasks , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- SUCC   = { cancelled , list , }

146 :	"wait"
		- NEIGH  = { await , asyncio , wait , tasks , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- SUCC   = { cancelled , list , }

146 :	"tasks"
		- NEIGH  = { await , asyncio , wait , tasks , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- SUCC   = { cancelled , list , }

146 :	"values"
		- NEIGH  = { await , asyncio , wait , tasks , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tasks , dict-comp , src , loop , run_in_executor , executor , format_file_in_place , src , line_length , fast , write_back , for-comp , src , sources , }
		- SUCC   = { cancelled , list , }

147 :	"cancelled"
		- NEIGH  = { cancelled , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { await , asyncio , wait , tasks , values , }
		- SUCC   = { report , Report , }

147 :	"list"
		- NEIGH  = { cancelled , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { await , asyncio , wait , tasks , values , }
		- SUCC   = { report , Report , }

148 :	"report"
		- NEIGH  = { report , Report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cancelled , list , }
		- SUCC   = { for , tuple , src , task , tasks , items , }

148 :	"Report"
		- NEIGH  = { report , Report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { cancelled , list , }
		- SUCC   = { for , tuple , src , task , tasks , items , }

149 :	"for"
		- NEIGH  = { for , tuple , src , task , tasks , items , }
		- PARENT = { }
		- CHILD  = { if , task , done , }
		- PRED   = { report , Report , }
		- SUCC   = { if , cancelled , }

149 :	"tuple"
		- NEIGH  = { for , tuple , src , task , tasks , items , }
		- PARENT = { }
		- CHILD  = { if , task , done , }
		- PRED   = { report , Report , }
		- SUCC   = { if , cancelled , }

149 :	"src"
		- NEIGH  = { for , tuple , src , task , tasks , items , }
		- PARENT = { }
		- CHILD  = { if , task , done , }
		- PRED   = { report , Report , }
		- SUCC   = { if , cancelled , }

149 :	"task"
		- NEIGH  = { for , tuple , src , task , tasks , items , }
		- PARENT = { }
		- CHILD  = { if , task , done , }
		- PRED   = { report , Report , }
		- SUCC   = { if , cancelled , }

149 :	"tasks"
		- NEIGH  = { for , tuple , src , task , tasks , items , }
		- PARENT = { }
		- CHILD  = { if , task , done , }
		- PRED   = { report , Report , }
		- SUCC   = { if , cancelled , }

149 :	"items"
		- NEIGH  = { for , tuple , src , task , tasks , items , }
		- PARENT = { }
		- CHILD  = { if , task , done , }
		- PRED   = { report , Report , }
		- SUCC   = { if , cancelled , }

150 :	"if"
		- NEIGH  = { if , task , done , }
		- PARENT = { for , tuple , src , task , tasks , items , }
		- CHILD  = { report , failed , src , task , cancel , cancelled , append , task , if , task , exception , }
		- PRED   = { }
		- SUCC   = { }

150 :	"task"
		- NEIGH  = { if , task , done , }
		- PARENT = { for , tuple , src , task , tasks , items , }
		- CHILD  = { report , failed , src , task , cancel , cancelled , append , task , if , task , exception , }
		- PRED   = { }
		- SUCC   = { }

150 :	"done"
		- NEIGH  = { if , task , done , }
		- PARENT = { for , tuple , src , task , tasks , items , }
		- CHILD  = { report , failed , src , task , cancel , cancelled , append , task , if , task , exception , }
		- PRED   = { }
		- SUCC   = { }

151 :	"report"
		- NEIGH  = { report , failed , src , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { task , cancel , }

151 :	"failed"
		- NEIGH  = { report , failed , src , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { task , cancel , }

151 :	"src"
		- NEIGH  = { report , failed , src , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { task , cancel , }

152 :	"task"
		- NEIGH  = { task , cancel , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { report , failed , src , }
		- SUCC   = { cancelled , append , task , }

152 :	"cancel"
		- NEIGH  = { task , cancel , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { report , failed , src , }
		- SUCC   = { cancelled , append , task , }

153 :	"cancelled"
		- NEIGH  = { cancelled , append , task , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { task , cancel , }
		- SUCC   = { if , task , exception , }

153 :	"append"
		- NEIGH  = { cancelled , append , task , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { task , cancel , }
		- SUCC   = { if , task , exception , }

153 :	"task"
		- NEIGH  = { cancelled , append , task , }
		- PARENT = { if , task , done , }
		- CHILD  = { }
		- PRED   = { task , cancel , }
		- SUCC   = { if , task , exception , }

154 :	"if"
		- NEIGH  = { if , task , exception , }
		- PARENT = { if , task , done , }
		- CHILD  = { report , failed , src , str , task , exception , report , done , src , task , result , }
		- PRED   = { cancelled , append , task , }
		- SUCC   = { }

154 :	"task"
		- NEIGH  = { if , task , exception , }
		- PARENT = { if , task , done , }
		- CHILD  = { report , failed , src , str , task , exception , report , done , src , task , result , }
		- PRED   = { cancelled , append , task , }
		- SUCC   = { }

154 :	"exception"
		- NEIGH  = { if , task , exception , }
		- PARENT = { if , task , done , }
		- CHILD  = { report , failed , src , str , task , exception , report , done , src , task , result , }
		- PRED   = { cancelled , append , task , }
		- SUCC   = { }

155 :	"report"
		- NEIGH  = { report , failed , src , str , task , exception , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , done , src , task , result , }

155 :	"failed"
		- NEIGH  = { report , failed , src , str , task , exception , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , done , src , task , result , }

155 :	"src"
		- NEIGH  = { report , failed , src , str , task , exception , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , done , src , task , result , }

155 :	"str"
		- NEIGH  = { report , failed , src , str , task , exception , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , done , src , task , result , }

155 :	"task"
		- NEIGH  = { report , failed , src , str , task , exception , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , done , src , task , result , }

155 :	"exception"
		- NEIGH  = { report , failed , src , str , task , exception , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , done , src , task , result , }

157 :	"report"
		- NEIGH  = { report , done , src , task , result , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { report , failed , src , str , task , exception , }
		- SUCC   = { }

157 :	"done"
		- NEIGH  = { report , done , src , task , result , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { report , failed , src , str , task , exception , }
		- SUCC   = { }

157 :	"src"
		- NEIGH  = { report , done , src , task , result , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { report , failed , src , str , task , exception , }
		- SUCC   = { }

157 :	"task"
		- NEIGH  = { report , done , src , task , result , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { report , failed , src , str , task , exception , }
		- SUCC   = { }

157 :	"result"
		- NEIGH  = { report , done , src , task , result , }
		- PARENT = { if , task , exception , }
		- CHILD  = { }
		- PRED   = { report , failed , src , str , task , exception , }
		- SUCC   = { }

158 :	"if"
		- NEIGH  = { if , cancelled , }
		- PARENT = { }
		- CHILD  = { await , asyncio , wait , cancelled , timeout , }
		- PRED   = { for , tuple , src , task , tasks , items , }
		- SUCC   = { out , }

158 :	"cancelled"
		- NEIGH  = { if , cancelled , }
		- PARENT = { }
		- CHILD  = { await , asyncio , wait , cancelled , timeout , }
		- PRED   = { for , tuple , src , task , tasks , items , }
		- SUCC   = { out , }

159 :	"await"
		- NEIGH  = { await , asyncio , wait , cancelled , timeout , }
		- PARENT = { if , cancelled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"asyncio"
		- NEIGH  = { await , asyncio , wait , cancelled , timeout , }
		- PARENT = { if , cancelled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"wait"
		- NEIGH  = { await , asyncio , wait , cancelled , timeout , }
		- PARENT = { if , cancelled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"cancelled"
		- NEIGH  = { await , asyncio , wait , cancelled , timeout , }
		- PARENT = { if , cancelled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

159 :	"timeout"
		- NEIGH  = { await , asyncio , wait , cancelled , timeout , }
		- PARENT = { if , cancelled , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

160 :	"out"
		- NEIGH  = { out , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , cancelled , }
		- SUCC   = { click , echo , str , report , }

161 :	"click"
		- NEIGH  = { click , echo , str , report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , }
		- SUCC   = { return , report , return_code , }

161 :	"echo"
		- NEIGH  = { click , echo , str , report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , }
		- SUCC   = { return , report , return_code , }

161 :	"str"
		- NEIGH  = { click , echo , str , report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , }
		- SUCC   = { return , report , return_code , }

161 :	"report"
		- NEIGH  = { click , echo , str , report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { out , }
		- SUCC   = { return , report , return_code , }

162 :	"return"
		- NEIGH  = { return , report , return_code , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , echo , str , report , }
		- SUCC   = { }

162 :	"report"
		- NEIGH  = { return , report , return_code , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , echo , str , report , }
		- SUCC   = { }

162 :	"return_code"
		- NEIGH  = { return , report , return_code , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { click , echo , str , report , }
		- SUCC   = { }

165 :	"format_file_in_place"
		- NEIGH  = { format_file_in_place , src , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- SUCC   = { format_stdin_to_stdout , line_length , fast , write_back , }

166 :	"src"
		- NEIGH  = { format_file_in_place , src , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- SUCC   = { format_stdin_to_stdout , line_length , fast , write_back , }

166 :	"line_length"
		- NEIGH  = { format_file_in_place , src , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- SUCC   = { format_stdin_to_stdout , line_length , fast , write_back , }

166 :	"fast"
		- NEIGH  = { format_file_in_place , src , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- SUCC   = { format_stdin_to_stdout , line_length , fast , write_back , }

166 :	"write_back"
		- NEIGH  = { format_file_in_place , src , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { async , schedule_formatting , sources , line_length , write_back , fast , loop , executor , }
		- SUCC   = { format_stdin_to_stdout , line_length , fast , write_back , }

169 :	"with"
		- NEIGH  = { with , tokenize , open , src , src_buffer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_contents , src_buffer , read , }

169 :	"tokenize"
		- NEIGH  = { with , tokenize , open , src , src_buffer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_contents , src_buffer , read , }

169 :	"open"
		- NEIGH  = { with , tokenize , open , src , src_buffer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_contents , src_buffer , read , }

169 :	"src"
		- NEIGH  = { with , tokenize , open , src , src_buffer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_contents , src_buffer , read , }

169 :	"src_buffer"
		- NEIGH  = { with , tokenize , open , src , src_buffer , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_contents , src_buffer , read , }

170 :	"src_contents"
		- NEIGH  = { src_contents , src_buffer , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { with , tokenize , open , src , src_buffer , }
		- SUCC   = { try , }

170 :	"src_buffer"
		- NEIGH  = { src_contents , src_buffer , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { with , tokenize , open , src , src_buffer , }
		- SUCC   = { try , }

170 :	"read"
		- NEIGH  = { src_contents , src_buffer , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { with , tokenize , open , src , src_buffer , }
		- SUCC   = { try , }

171 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { src_contents , src_buffer , read , }
		- SUCC   = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }

172 :	"contents"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

172 :	"format_file_contents"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

173 :	"src_contents"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

173 :	"line_length"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

173 :	"line_length"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

173 :	"fast"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

173 :	"fast"
		- NEIGH  = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , NothingChanged , }

175 :	"except"
		- NEIGH  = { except , NothingChanged , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- SUCC   = { if , write_back , }

175 :	"NothingChanged"
		- NEIGH  = { except , NothingChanged , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { contents , format_file_contents , src_contents , line_length , line_length , fast , fast , }
		- SUCC   = { if , write_back , }

176 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , NothingChanged , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

178 :	"if"
		- NEIGH  = { if , write_back , }
		- PARENT = { }
		- CHILD  = { with , open , src , encoding , src_buffer , encoding , f , f , write , contents , }
		- PRED   = { except , NothingChanged , }
		- SUCC   = { return , }

178 :	"write_back"
		- NEIGH  = { if , write_back , }
		- PARENT = { }
		- CHILD  = { with , open , src , encoding , src_buffer , encoding , f , f , write , contents , }
		- PRED   = { except , NothingChanged , }
		- SUCC   = { return , }

179 :	"with"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

179 :	"open"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

179 :	"src"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

179 :	"encoding"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

179 :	"src_buffer"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

179 :	"encoding"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

179 :	"f"
		- NEIGH  = { with , open , src , encoding , src_buffer , encoding , f , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , contents , }

180 :	"f"
		- NEIGH  = { f , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { with , open , src , encoding , src_buffer , encoding , f , }
		- SUCC   = { }

180 :	"write"
		- NEIGH  = { f , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { with , open , src , encoding , src_buffer , encoding , f , }
		- SUCC   = { }

180 :	"contents"
		- NEIGH  = { f , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { with , open , src , encoding , src_buffer , encoding , f , }
		- SUCC   = { }

181 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , write_back , }
		- SUCC   = { }

184 :	"format_stdin_to_stdout"
		- NEIGH  = { format_stdin_to_stdout , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_in_place , src , line_length , fast , write_back , }
		- SUCC   = { format_file_contents , src_contents , line_length , fast , }

185 :	"line_length"
		- NEIGH  = { format_stdin_to_stdout , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_in_place , src , line_length , fast , write_back , }
		- SUCC   = { format_file_contents , src_contents , line_length , fast , }

185 :	"fast"
		- NEIGH  = { format_stdin_to_stdout , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_in_place , src , line_length , fast , write_back , }
		- SUCC   = { format_file_contents , src_contents , line_length , fast , }

185 :	"write_back"
		- NEIGH  = { format_stdin_to_stdout , line_length , fast , write_back , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_in_place , src , line_length , fast , write_back , }
		- SUCC   = { format_file_contents , src_contents , line_length , fast , }

188 :	"contents"
		- NEIGH  = { contents , sys , stdin , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { try , }

188 :	"sys"
		- NEIGH  = { contents , sys , stdin , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { try , }

188 :	"stdin"
		- NEIGH  = { contents , sys , stdin , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { try , }

188 :	"read"
		- NEIGH  = { contents , sys , stdin , read , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { try , }

189 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { contents , sys , stdin , read , }
		- SUCC   = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }

190 :	"contents"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

190 :	"format_file_contents"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

190 :	"contents"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

190 :	"line_length"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

190 :	"line_length"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

190 :	"fast"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

190 :	"fast"
		- NEIGH  = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { return , }

191 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { contents , format_file_contents , contents , line_length , line_length , fast , fast , }
		- SUCC   = { except , NothingChanged , }

193 :	"except"
		- NEIGH  = { except , NothingChanged , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { if , write_back , }

193 :	"NothingChanged"
		- NEIGH  = { except , NothingChanged , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { if , write_back , }

194 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , NothingChanged , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

197 :	"if"
		- NEIGH  = { if , write_back , }
		- PARENT = { }
		- CHILD  = { sys , stdout , write , contents , }
		- PRED   = { except , NothingChanged , }
		- SUCC   = { }

197 :	"write_back"
		- NEIGH  = { if , write_back , }
		- PARENT = { }
		- CHILD  = { sys , stdout , write , contents , }
		- PRED   = { except , NothingChanged , }
		- SUCC   = { }

198 :	"sys"
		- NEIGH  = { sys , stdout , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"stdout"
		- NEIGH  = { sys , stdout , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"write"
		- NEIGH  = { sys , stdout , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

198 :	"contents"
		- NEIGH  = { sys , stdout , write , contents , }
		- PARENT = { if , write_back , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"format_file_contents"
		- NEIGH  = { format_file_contents , src_contents , line_length , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_stdin_to_stdout , line_length , fast , write_back , }
		- SUCC   = { format_str , src_contents , line_length , }

202 :	"src_contents"
		- NEIGH  = { format_file_contents , src_contents , line_length , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_stdin_to_stdout , line_length , fast , write_back , }
		- SUCC   = { format_str , src_contents , line_length , }

202 :	"line_length"
		- NEIGH  = { format_file_contents , src_contents , line_length , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_stdin_to_stdout , line_length , fast , write_back , }
		- SUCC   = { format_str , src_contents , line_length , }

202 :	"fast"
		- NEIGH  = { format_file_contents , src_contents , line_length , fast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_stdin_to_stdout , line_length , fast , write_back , }
		- SUCC   = { format_str , src_contents , line_length , }

205 :	"if"
		- NEIGH  = { if , src_contents , strip , == , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { }
		- SUCC   = { dst_contents , format_str , src_contents , line_length , line_length , }

205 :	"src_contents"
		- NEIGH  = { if , src_contents , strip , == , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { }
		- SUCC   = { dst_contents , format_str , src_contents , line_length , line_length , }

205 :	"strip"
		- NEIGH  = { if , src_contents , strip , == , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { }
		- SUCC   = { dst_contents , format_str , src_contents , line_length , line_length , }

205 :	"=="
		- NEIGH  = { if , src_contents , strip , == , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { }
		- SUCC   = { dst_contents , format_str , src_contents , line_length , line_length , }

206 :	"raise"
		- NEIGH  = { raise , NothingChanged , }
		- PARENT = { if , src_contents , strip , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

206 :	"NothingChanged"
		- NEIGH  = { raise , NothingChanged , }
		- PARENT = { if , src_contents , strip , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

208 :	"dst_contents"
		- NEIGH  = { dst_contents , format_str , src_contents , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , src_contents , strip , == , }
		- SUCC   = { if , src_contents , == , dst_contents , }

208 :	"format_str"
		- NEIGH  = { dst_contents , format_str , src_contents , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , src_contents , strip , == , }
		- SUCC   = { if , src_contents , == , dst_contents , }

208 :	"src_contents"
		- NEIGH  = { dst_contents , format_str , src_contents , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , src_contents , strip , == , }
		- SUCC   = { if , src_contents , == , dst_contents , }

208 :	"line_length"
		- NEIGH  = { dst_contents , format_str , src_contents , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , src_contents , strip , == , }
		- SUCC   = { if , src_contents , == , dst_contents , }

208 :	"line_length"
		- NEIGH  = { dst_contents , format_str , src_contents , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , src_contents , strip , == , }
		- SUCC   = { if , src_contents , == , dst_contents , }

209 :	"if"
		- NEIGH  = { if , src_contents , == , dst_contents , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { dst_contents , format_str , src_contents , line_length , line_length , }
		- SUCC   = { if , fast , }

209 :	"src_contents"
		- NEIGH  = { if , src_contents , == , dst_contents , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { dst_contents , format_str , src_contents , line_length , line_length , }
		- SUCC   = { if , fast , }

209 :	"=="
		- NEIGH  = { if , src_contents , == , dst_contents , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { dst_contents , format_str , src_contents , line_length , line_length , }
		- SUCC   = { if , fast , }

209 :	"dst_contents"
		- NEIGH  = { if , src_contents , == , dst_contents , }
		- PARENT = { }
		- CHILD  = { raise , NothingChanged , }
		- PRED   = { dst_contents , format_str , src_contents , line_length , line_length , }
		- SUCC   = { if , fast , }

210 :	"raise"
		- NEIGH  = { raise , NothingChanged , }
		- PARENT = { if , src_contents , == , dst_contents , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

210 :	"NothingChanged"
		- NEIGH  = { raise , NothingChanged , }
		- PARENT = { if , src_contents , == , dst_contents , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

212 :	"if"
		- NEIGH  = { if , fast , }
		- PARENT = { }
		- CHILD  = { assert_equivalent , src_contents , dst_contents , assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PRED   = { if , src_contents , == , dst_contents , }
		- SUCC   = { return , dst_contents , }

212 :	"fast"
		- NEIGH  = { if , fast , }
		- PARENT = { }
		- CHILD  = { assert_equivalent , src_contents , dst_contents , assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PRED   = { if , src_contents , == , dst_contents , }
		- SUCC   = { return , dst_contents , }

213 :	"assert_equivalent"
		- NEIGH  = { assert_equivalent , src_contents , dst_contents , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert_stable , src_contents , dst_contents , line_length , line_length , }

213 :	"src_contents"
		- NEIGH  = { assert_equivalent , src_contents , dst_contents , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert_stable , src_contents , dst_contents , line_length , line_length , }

213 :	"dst_contents"
		- NEIGH  = { assert_equivalent , src_contents , dst_contents , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert_stable , src_contents , dst_contents , line_length , line_length , }

214 :	"assert_stable"
		- NEIGH  = { assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src_contents , dst_contents , }
		- SUCC   = { }

214 :	"src_contents"
		- NEIGH  = { assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src_contents , dst_contents , }
		- SUCC   = { }

214 :	"dst_contents"
		- NEIGH  = { assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src_contents , dst_contents , }
		- SUCC   = { }

214 :	"line_length"
		- NEIGH  = { assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src_contents , dst_contents , }
		- SUCC   = { }

214 :	"line_length"
		- NEIGH  = { assert_stable , src_contents , dst_contents , line_length , line_length , }
		- PARENT = { if , fast , }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src_contents , dst_contents , }
		- SUCC   = { }

215 :	"return"
		- NEIGH  = { return , dst_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , fast , }
		- SUCC   = { }

215 :	"dst_contents"
		- NEIGH  = { return , dst_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , fast , }
		- SUCC   = { }

218 :	"format_str"
		- NEIGH  = { format_str , src_contents , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_contents , src_contents , line_length , fast , }
		- SUCC   = { lib2to3_parse , src_txt , }

218 :	"src_contents"
		- NEIGH  = { format_str , src_contents , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_contents , src_contents , line_length , fast , }
		- SUCC   = { lib2to3_parse , src_txt , }

218 :	"line_length"
		- NEIGH  = { format_str , src_contents , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_file_contents , src_contents , line_length , fast , }
		- SUCC   = { lib2to3_parse , src_txt , }

220 :	"src_node"
		- NEIGH  = { src_node , lib2to3_parse , src_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dst_contents , }

220 :	"lib2to3_parse"
		- NEIGH  = { src_node , lib2to3_parse , src_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dst_contents , }

220 :	"src_contents"
		- NEIGH  = { src_node , lib2to3_parse , src_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { dst_contents , }

221 :	"dst_contents"
		- NEIGH  = { dst_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { src_node , lib2to3_parse , src_contents , }
		- SUCC   = { lines , LineGenerator , }

222 :	"lines"
		- NEIGH  = { lines , LineGenerator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dst_contents , }
		- SUCC   = { elt , EmptyLineTracker , }

222 :	"LineGenerator"
		- NEIGH  = { lines , LineGenerator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dst_contents , }
		- SUCC   = { elt , EmptyLineTracker , }

223 :	"elt"
		- NEIGH  = { elt , EmptyLineTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lines , LineGenerator , }
		- SUCC   = { py36 , is_python36 , src_node , }

223 :	"EmptyLineTracker"
		- NEIGH  = { elt , EmptyLineTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lines , LineGenerator , }
		- SUCC   = { py36 , is_python36 , src_node , }

224 :	"py36"
		- NEIGH  = { py36 , is_python36 , src_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { elt , EmptyLineTracker , }
		- SUCC   = { empty_line , Line , }

224 :	"is_python36"
		- NEIGH  = { py36 , is_python36 , src_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { elt , EmptyLineTracker , }
		- SUCC   = { empty_line , Line , }

224 :	"src_node"
		- NEIGH  = { py36 , is_python36 , src_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { elt , EmptyLineTracker , }
		- SUCC   = { empty_line , Line , }

225 :	"empty_line"
		- NEIGH  = { empty_line , Line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { py36 , is_python36 , src_node , }
		- SUCC   = { after , }

225 :	"Line"
		- NEIGH  = { empty_line , Line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { py36 , is_python36 , src_node , }
		- SUCC   = { after , }

226 :	"after"
		- NEIGH  = { after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { empty_line , Line , }
		- SUCC   = { for , current_line , lines , visit , src_node , }

227 :	"for"
		- NEIGH  = { for , current_line , lines , visit , src_node , }
		- PARENT = { }
		- CHILD  = { for , _ , range , after , tuple , before , after , elt , maybe_empty_lines , current_line , for , _ , range , before , for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PRED   = { after , }
		- SUCC   = { return , dst_contents , }

227 :	"current_line"
		- NEIGH  = { for , current_line , lines , visit , src_node , }
		- PARENT = { }
		- CHILD  = { for , _ , range , after , tuple , before , after , elt , maybe_empty_lines , current_line , for , _ , range , before , for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PRED   = { after , }
		- SUCC   = { return , dst_contents , }

227 :	"lines"
		- NEIGH  = { for , current_line , lines , visit , src_node , }
		- PARENT = { }
		- CHILD  = { for , _ , range , after , tuple , before , after , elt , maybe_empty_lines , current_line , for , _ , range , before , for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PRED   = { after , }
		- SUCC   = { return , dst_contents , }

227 :	"visit"
		- NEIGH  = { for , current_line , lines , visit , src_node , }
		- PARENT = { }
		- CHILD  = { for , _ , range , after , tuple , before , after , elt , maybe_empty_lines , current_line , for , _ , range , before , for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PRED   = { after , }
		- SUCC   = { return , dst_contents , }

227 :	"src_node"
		- NEIGH  = { for , current_line , lines , visit , src_node , }
		- PARENT = { }
		- CHILD  = { for , _ , range , after , tuple , before , after , elt , maybe_empty_lines , current_line , for , _ , range , before , for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PRED   = { after , }
		- SUCC   = { return , dst_contents , }

228 :	"for"
		- NEIGH  = { for , _ , range , after , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { }
		- SUCC   = { tuple , before , after , elt , maybe_empty_lines , current_line , }

228 :	"_"
		- NEIGH  = { for , _ , range , after , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { }
		- SUCC   = { tuple , before , after , elt , maybe_empty_lines , current_line , }

228 :	"range"
		- NEIGH  = { for , _ , range , after , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { }
		- SUCC   = { tuple , before , after , elt , maybe_empty_lines , current_line , }

228 :	"after"
		- NEIGH  = { for , _ , range , after , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { }
		- SUCC   = { tuple , before , after , elt , maybe_empty_lines , current_line , }

229 :	"dst_contents"
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"+="
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"str"
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

229 :	"empty_line"
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"tuple"
		- NEIGH  = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { }
		- PRED   = { for , _ , range , after , }
		- SUCC   = { for , _ , range , before , }

230 :	"before"
		- NEIGH  = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { }
		- PRED   = { for , _ , range , after , }
		- SUCC   = { for , _ , range , before , }

230 :	"after"
		- NEIGH  = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { }
		- PRED   = { for , _ , range , after , }
		- SUCC   = { for , _ , range , before , }

230 :	"elt"
		- NEIGH  = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { }
		- PRED   = { for , _ , range , after , }
		- SUCC   = { for , _ , range , before , }

230 :	"maybe_empty_lines"
		- NEIGH  = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { }
		- PRED   = { for , _ , range , after , }
		- SUCC   = { for , _ , range , before , }

230 :	"current_line"
		- NEIGH  = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { }
		- PRED   = { for , _ , range , after , }
		- SUCC   = { for , _ , range , before , }

231 :	"for"
		- NEIGH  = { for , _ , range , before , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- SUCC   = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }

231 :	"_"
		- NEIGH  = { for , _ , range , before , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- SUCC   = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }

231 :	"range"
		- NEIGH  = { for , _ , range , before , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- SUCC   = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }

231 :	"before"
		- NEIGH  = { for , _ , range , before , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , empty_line , }
		- PRED   = { tuple , before , after , elt , maybe_empty_lines , current_line , }
		- SUCC   = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }

232 :	"dst_contents"
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , before , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

232 :	"+="
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , before , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

232 :	"str"
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , before , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

232 :	"empty_line"
		- NEIGH  = { dst_contents , += , str , empty_line , }
		- PARENT = { for , _ , range , before , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

233 :	"for"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"line"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"split_line"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"current_line"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"line_length"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"line_length"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"py36"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

233 :	"py36"
		- NEIGH  = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- PARENT = { for , current_line , lines , visit , src_node , }
		- CHILD  = { dst_contents , += , str , line , }
		- PRED   = { for , _ , range , before , }
		- SUCC   = { }

234 :	"dst_contents"
		- NEIGH  = { dst_contents , += , str , line , }
		- PARENT = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"+="
		- NEIGH  = { dst_contents , += , str , line , }
		- PARENT = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"str"
		- NEIGH  = { dst_contents , += , str , line , }
		- PARENT = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

234 :	"line"
		- NEIGH  = { dst_contents , += , str , line , }
		- PARENT = { for , line , split_line , current_line , line_length , line_length , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

235 :	"return"
		- NEIGH  = { return , dst_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , current_line , lines , visit , src_node , }
		- SUCC   = { }

235 :	"dst_contents"
		- NEIGH  = { return , dst_contents , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , current_line , lines , visit , src_node , }
		- SUCC   = { }

238 :	"lib2to3_parse"
		- NEIGH  = { lib2to3_parse , src_txt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_str , src_contents , line_length , }
		- SUCC   = { lib2to3_unparse , node , }

238 :	"src_txt"
		- NEIGH  = { lib2to3_parse , src_txt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { format_str , src_contents , line_length , }
		- SUCC   = { lib2to3_unparse , node , }

240 :	"grammar"
		- NEIGH  = { grammar , pygram , python_grammar_no_print_statement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { drv , driver , Driver , grammar , pytree , convert , }

240 :	"pygram"
		- NEIGH  = { grammar , pygram , python_grammar_no_print_statement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { drv , driver , Driver , grammar , pytree , convert , }

240 :	"python_grammar_no_print_statement"
		- NEIGH  = { grammar , pygram , python_grammar_no_print_statement , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { drv , driver , Driver , grammar , pytree , convert , }

241 :	"drv"
		- NEIGH  = { drv , driver , Driver , grammar , pytree , convert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { grammar , pygram , python_grammar_no_print_statement , }
		- SUCC   = { if , src_txt , != , }

241 :	"driver"
		- NEIGH  = { drv , driver , Driver , grammar , pytree , convert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { grammar , pygram , python_grammar_no_print_statement , }
		- SUCC   = { if , src_txt , != , }

241 :	"Driver"
		- NEIGH  = { drv , driver , Driver , grammar , pytree , convert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { grammar , pygram , python_grammar_no_print_statement , }
		- SUCC   = { if , src_txt , != , }

241 :	"grammar"
		- NEIGH  = { drv , driver , Driver , grammar , pytree , convert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { grammar , pygram , python_grammar_no_print_statement , }
		- SUCC   = { if , src_txt , != , }

241 :	"pytree"
		- NEIGH  = { drv , driver , Driver , grammar , pytree , convert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { grammar , pygram , python_grammar_no_print_statement , }
		- SUCC   = { if , src_txt , != , }

241 :	"convert"
		- NEIGH  = { drv , driver , Driver , grammar , pytree , convert , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { grammar , pygram , python_grammar_no_print_statement , }
		- SUCC   = { if , src_txt , != , }

242 :	"if"
		- NEIGH  = { if , src_txt , != , }
		- PARENT = { }
		- CHILD  = { nl , if-exp , in , src_txt , else-exp , src_txt , += , nl , }
		- PRED   = { drv , driver , Driver , grammar , pytree , convert , }
		- SUCC   = { try , }

242 :	"src_txt"
		- NEIGH  = { if , src_txt , != , }
		- PARENT = { }
		- CHILD  = { nl , if-exp , in , src_txt , else-exp , src_txt , += , nl , }
		- PRED   = { drv , driver , Driver , grammar , pytree , convert , }
		- SUCC   = { try , }

242 :	"!="
		- NEIGH  = { if , src_txt , != , }
		- PARENT = { }
		- CHILD  = { nl , if-exp , in , src_txt , else-exp , src_txt , += , nl , }
		- PRED   = { drv , driver , Driver , grammar , pytree , convert , }
		- SUCC   = { try , }

243 :	"nl"
		- NEIGH  = { nl , if-exp , in , src_txt , else-exp , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_txt , += , nl , }

243 :	"if-exp"
		- NEIGH  = { nl , if-exp , in , src_txt , else-exp , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_txt , += , nl , }

243 :	"in"
		- NEIGH  = { nl , if-exp , in , src_txt , else-exp , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_txt , += , nl , }

243 :	"src_txt"
		- NEIGH  = { nl , if-exp , in , src_txt , else-exp , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_txt , += , nl , }

243 :	"else-exp"
		- NEIGH  = { nl , if-exp , in , src_txt , else-exp , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { src_txt , += , nl , }

244 :	"src_txt"
		- NEIGH  = { src_txt , += , nl , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { nl , if-exp , in , src_txt , else-exp , }
		- SUCC   = { }

244 :	"+="
		- NEIGH  = { src_txt , += , nl , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { nl , if-exp , in , src_txt , else-exp , }
		- SUCC   = { }

244 :	"nl"
		- NEIGH  = { src_txt , += , nl , }
		- PARENT = { if , src_txt , != , }
		- CHILD  = { }
		- PRED   = { nl , if-exp , in , src_txt , else-exp , }
		- SUCC   = { }

245 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , src_txt , != , }
		- SUCC   = { result , drv , parse_string , src_txt , }

246 :	"result"
		- NEIGH  = { result , drv , parse_string , src_txt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ParseError , pe , }

246 :	"drv"
		- NEIGH  = { result , drv , parse_string , src_txt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ParseError , pe , }

246 :	"parse_string"
		- NEIGH  = { result , drv , parse_string , src_txt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ParseError , pe , }

246 :	"src_txt"
		- NEIGH  = { result , drv , parse_string , src_txt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ParseError , pe , }

247 :	"except"
		- NEIGH  = { except , ParseError , pe , }
		- PARENT = { }
		- CHILD  = { tuple , lineno , column , pe , context , lines , src_txt , splitlines , try , faulty_line , lines , lineno , - , except , IndexError , raise , ValueError , lineno , column , faulty_line , from , }
		- PRED   = { result , drv , parse_string , src_txt , }
		- SUCC   = { if , isinstance , result , Leaf , }

247 :	"ParseError"
		- NEIGH  = { except , ParseError , pe , }
		- PARENT = { }
		- CHILD  = { tuple , lineno , column , pe , context , lines , src_txt , splitlines , try , faulty_line , lines , lineno , - , except , IndexError , raise , ValueError , lineno , column , faulty_line , from , }
		- PRED   = { result , drv , parse_string , src_txt , }
		- SUCC   = { if , isinstance , result , Leaf , }

247 :	"pe"
		- NEIGH  = { except , ParseError , pe , }
		- PARENT = { }
		- CHILD  = { tuple , lineno , column , pe , context , lines , src_txt , splitlines , try , faulty_line , lines , lineno , - , except , IndexError , raise , ValueError , lineno , column , faulty_line , from , }
		- PRED   = { result , drv , parse_string , src_txt , }
		- SUCC   = { if , isinstance , result , Leaf , }

248 :	"tuple"
		- NEIGH  = { tuple , lineno , column , pe , context , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lines , src_txt , splitlines , }

248 :	"lineno"
		- NEIGH  = { tuple , lineno , column , pe , context , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lines , src_txt , splitlines , }

248 :	"column"
		- NEIGH  = { tuple , lineno , column , pe , context , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lines , src_txt , splitlines , }

248 :	"pe"
		- NEIGH  = { tuple , lineno , column , pe , context , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lines , src_txt , splitlines , }

248 :	"context"
		- NEIGH  = { tuple , lineno , column , pe , context , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lines , src_txt , splitlines , }

249 :	"lines"
		- NEIGH  = { lines , src_txt , splitlines , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { tuple , lineno , column , pe , context , }
		- SUCC   = { try , }

249 :	"src_txt"
		- NEIGH  = { lines , src_txt , splitlines , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { tuple , lineno , column , pe , context , }
		- SUCC   = { try , }

249 :	"splitlines"
		- NEIGH  = { lines , src_txt , splitlines , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { tuple , lineno , column , pe , context , }
		- SUCC   = { try , }

250 :	"try"
		- NEIGH  = { try , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { lines , src_txt , splitlines , }
		- SUCC   = { faulty_line , lines , lineno , - , }

251 :	"faulty_line"
		- NEIGH  = { faulty_line , lines , lineno , - , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

251 :	"lines"
		- NEIGH  = { faulty_line , lines , lineno , - , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

251 :	"lineno"
		- NEIGH  = { faulty_line , lines , lineno , - , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

251 :	"-"
		- NEIGH  = { faulty_line , lines , lineno , - , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

252 :	"except"
		- NEIGH  = { except , IndexError , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { faulty_line , }
		- PRED   = { faulty_line , lines , lineno , - , }
		- SUCC   = { raise , ValueError , lineno , column , faulty_line , from , }

252 :	"IndexError"
		- NEIGH  = { except , IndexError , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { faulty_line , }
		- PRED   = { faulty_line , lines , lineno , - , }
		- SUCC   = { raise , ValueError , lineno , column , faulty_line , from , }

253 :	"faulty_line"
		- NEIGH  = { faulty_line , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

254 :	"raise"
		- NEIGH  = { raise , ValueError , lineno , column , faulty_line , from , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

254 :	"ValueError"
		- NEIGH  = { raise , ValueError , lineno , column , faulty_line , from , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

254 :	"lineno"
		- NEIGH  = { raise , ValueError , lineno , column , faulty_line , from , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

254 :	"column"
		- NEIGH  = { raise , ValueError , lineno , column , faulty_line , from , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

254 :	"faulty_line"
		- NEIGH  = { raise , ValueError , lineno , column , faulty_line , from , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

254 :	"from"
		- NEIGH  = { raise , ValueError , lineno , column , faulty_line , from , }
		- PARENT = { except , ParseError , pe , }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

256 :	"if"
		- NEIGH  = { if , isinstance , result , Leaf , }
		- PARENT = { }
		- CHILD  = { result , Node , syms , file_input , list , result , }
		- PRED   = { except , ParseError , pe , }
		- SUCC   = { return , result , }

256 :	"isinstance"
		- NEIGH  = { if , isinstance , result , Leaf , }
		- PARENT = { }
		- CHILD  = { result , Node , syms , file_input , list , result , }
		- PRED   = { except , ParseError , pe , }
		- SUCC   = { return , result , }

256 :	"result"
		- NEIGH  = { if , isinstance , result , Leaf , }
		- PARENT = { }
		- CHILD  = { result , Node , syms , file_input , list , result , }
		- PRED   = { except , ParseError , pe , }
		- SUCC   = { return , result , }

256 :	"Leaf"
		- NEIGH  = { if , isinstance , result , Leaf , }
		- PARENT = { }
		- CHILD  = { result , Node , syms , file_input , list , result , }
		- PRED   = { except , ParseError , pe , }
		- SUCC   = { return , result , }

257 :	"result"
		- NEIGH  = { result , Node , syms , file_input , list , result , }
		- PARENT = { if , isinstance , result , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"Node"
		- NEIGH  = { result , Node , syms , file_input , list , result , }
		- PARENT = { if , isinstance , result , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"syms"
		- NEIGH  = { result , Node , syms , file_input , list , result , }
		- PARENT = { if , isinstance , result , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"file_input"
		- NEIGH  = { result , Node , syms , file_input , list , result , }
		- PARENT = { if , isinstance , result , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"list"
		- NEIGH  = { result , Node , syms , file_input , list , result , }
		- PARENT = { if , isinstance , result , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"result"
		- NEIGH  = { result , Node , syms , file_input , list , result , }
		- PARENT = { if , isinstance , result , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

258 :	"return"
		- NEIGH  = { return , result , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , result , Leaf , }
		- SUCC   = { }

258 :	"result"
		- NEIGH  = { return , result , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , result , Leaf , }
		- SUCC   = { }

261 :	"lib2to3_unparse"
		- NEIGH  = { lib2to3_unparse , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lib2to3_parse , src_txt , }
		- SUCC   = { T , TypeVar , }

261 :	"node"
		- NEIGH  = { lib2to3_unparse , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lib2to3_parse , src_txt , }
		- SUCC   = { T , TypeVar , }

263 :	"code"
		- NEIGH  = { code , str , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , code , }

263 :	"str"
		- NEIGH  = { code , str , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , code , }

263 :	"node"
		- NEIGH  = { code , str , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , code , }

264 :	"return"
		- NEIGH  = { return , code , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { code , str , node , }
		- SUCC   = { }

264 :	"code"
		- NEIGH  = { return , code , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { code , str , node , }
		- SUCC   = { }

267 :	"T"
		- NEIGH  = { T , TypeVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lib2to3_unparse , node , }
		- SUCC   = { Visitor , }

267 :	"TypeVar"
		- NEIGH  = { T , TypeVar , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lib2to3_unparse , node , }
		- SUCC   = { Visitor , }

270 :	"Visitor"
		- NEIGH  = { Visitor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { T , TypeVar , }
		- SUCC   = { DebugVisitor , }

273 :	"visit"
		- NEIGH  = { visit , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { visit_default , self , node , }

273 :	"self"
		- NEIGH  = { visit , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { visit_default , self , node , }

273 :	"node"
		- NEIGH  = { visit , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { visit_default , self , node , }

274 :	"if"
		- NEIGH  = { if , node , type , < , }
		- PARENT = { }
		- CHILD  = { name , token , tok_name , node , type , name , type_repr , node , type , }
		- PRED   = { }
		- SUCC   = { yield , from , getattr , self , name , self , visit_default , node , }

274 :	"node"
		- NEIGH  = { if , node , type , < , }
		- PARENT = { }
		- CHILD  = { name , token , tok_name , node , type , name , type_repr , node , type , }
		- PRED   = { }
		- SUCC   = { yield , from , getattr , self , name , self , visit_default , node , }

274 :	"type"
		- NEIGH  = { if , node , type , < , }
		- PARENT = { }
		- CHILD  = { name , token , tok_name , node , type , name , type_repr , node , type , }
		- PRED   = { }
		- SUCC   = { yield , from , getattr , self , name , self , visit_default , node , }

274 :	"<"
		- NEIGH  = { if , node , type , < , }
		- PARENT = { }
		- CHILD  = { name , token , tok_name , node , type , name , type_repr , node , type , }
		- PRED   = { }
		- SUCC   = { yield , from , getattr , self , name , self , visit_default , node , }

275 :	"name"
		- NEIGH  = { name , token , tok_name , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { name , type_repr , node , type , }

275 :	"token"
		- NEIGH  = { name , token , tok_name , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { name , type_repr , node , type , }

275 :	"tok_name"
		- NEIGH  = { name , token , tok_name , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { name , type_repr , node , type , }

275 :	"node"
		- NEIGH  = { name , token , tok_name , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { name , type_repr , node , type , }

275 :	"type"
		- NEIGH  = { name , token , tok_name , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { name , type_repr , node , type , }

277 :	"name"
		- NEIGH  = { name , type_repr , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { name , token , tok_name , node , type , }
		- SUCC   = { }

277 :	"type_repr"
		- NEIGH  = { name , type_repr , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { name , token , tok_name , node , type , }
		- SUCC   = { }

277 :	"node"
		- NEIGH  = { name , type_repr , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { name , token , tok_name , node , type , }
		- SUCC   = { }

277 :	"type"
		- NEIGH  = { name , type_repr , node , type , }
		- PARENT = { if , node , type , < , }
		- CHILD  = { }
		- PRED   = { name , token , tok_name , node , type , }
		- SUCC   = { }

278 :	"yield"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"from"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"getattr"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"self"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"name"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"self"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"visit_default"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

278 :	"node"
		- NEIGH  = { yield , from , getattr , self , name , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , node , type , < , }
		- SUCC   = { }

280 :	"visit_default"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit , self , node , }
		- SUCC   = { }

280 :	"self"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit , self , node , }
		- SUCC   = { }

280 :	"node"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit , self , node , }
		- SUCC   = { }

281 :	"if"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { for , child , node , children , }
		- PRED   = { }
		- SUCC   = { }

281 :	"isinstance"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { for , child , node , children , }
		- PRED   = { }
		- SUCC   = { }

281 :	"node"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { for , child , node , children , }
		- PRED   = { }
		- SUCC   = { }

281 :	"Node"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { for , child , node , children , }
		- PRED   = { }
		- SUCC   = { }

282 :	"for"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

282 :	"child"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

282 :	"node"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

282 :	"children"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

283 :	"yield"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

283 :	"from"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

283 :	"self"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

283 :	"visit"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

283 :	"child"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

287 :	"DebugVisitor"
		- NEIGH  = { DebugVisitor , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Visitor , }
		- SUCC   = { KEYWORDS , set , keyword , kwlist , }

288 :	"tree_depth"
		- NEIGH  = { tree_depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { visit_default , self , node , }

290 :	"visit_default"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tree_depth , }
		- SUCC   = { }

290 :	"self"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tree_depth , }
		- SUCC   = { }

290 :	"node"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tree_depth , }
		- SUCC   = { }

291 :	"indent"
		- NEIGH  = { indent , * , * , self , tree_depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , node , Node , }

291 :	"*"
		- NEIGH  = { indent , * , * , self , tree_depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , node , Node , }

291 :	"*"
		- NEIGH  = { indent , * , * , self , tree_depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , node , Node , }

291 :	"self"
		- NEIGH  = { indent , * , * , self , tree_depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , node , Node , }

291 :	"tree_depth"
		- NEIGH  = { indent , * , * , self , tree_depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , node , Node , }

292 :	"if"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { _type , type_repr , node , type , out , indent , _type , fg , self , tree_depth , += , for , child , node , children , self , tree_depth , -= , out , indent , _type , fg , bold , _type , token , tok_name , get , node , type , str , node , type , out , indent , _type , fg , nl , if , node , prefix , out , node , value , fg , bold , }
		- PRED   = { indent , * , * , self , tree_depth , }
		- SUCC   = { }

292 :	"isinstance"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { _type , type_repr , node , type , out , indent , _type , fg , self , tree_depth , += , for , child , node , children , self , tree_depth , -= , out , indent , _type , fg , bold , _type , token , tok_name , get , node , type , str , node , type , out , indent , _type , fg , nl , if , node , prefix , out , node , value , fg , bold , }
		- PRED   = { indent , * , * , self , tree_depth , }
		- SUCC   = { }

292 :	"node"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { _type , type_repr , node , type , out , indent , _type , fg , self , tree_depth , += , for , child , node , children , self , tree_depth , -= , out , indent , _type , fg , bold , _type , token , tok_name , get , node , type , str , node , type , out , indent , _type , fg , nl , if , node , prefix , out , node , value , fg , bold , }
		- PRED   = { indent , * , * , self , tree_depth , }
		- SUCC   = { }

292 :	"Node"
		- NEIGH  = { if , isinstance , node , Node , }
		- PARENT = { }
		- CHILD  = { _type , type_repr , node , type , out , indent , _type , fg , self , tree_depth , += , for , child , node , children , self , tree_depth , -= , out , indent , _type , fg , bold , _type , token , tok_name , get , node , type , str , node , type , out , indent , _type , fg , nl , if , node , prefix , out , node , value , fg , bold , }
		- PRED   = { indent , * , * , self , tree_depth , }
		- SUCC   = { }

293 :	"_type"
		- NEIGH  = { _type , type_repr , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , indent , _type , fg , }

293 :	"type_repr"
		- NEIGH  = { _type , type_repr , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , indent , _type , fg , }

293 :	"node"
		- NEIGH  = { _type , type_repr , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , indent , _type , fg , }

293 :	"type"
		- NEIGH  = { _type , type_repr , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , indent , _type , fg , }

294 :	"out"
		- NEIGH  = { out , indent , _type , fg , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , type_repr , node , type , }
		- SUCC   = { self , tree_depth , += , }

294 :	"indent"
		- NEIGH  = { out , indent , _type , fg , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , type_repr , node , type , }
		- SUCC   = { self , tree_depth , += , }

294 :	"_type"
		- NEIGH  = { out , indent , _type , fg , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , type_repr , node , type , }
		- SUCC   = { self , tree_depth , += , }

294 :	"fg"
		- NEIGH  = { out , indent , _type , fg , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , type_repr , node , type , }
		- SUCC   = { self , tree_depth , += , }

295 :	"self"
		- NEIGH  = { self , tree_depth , += , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , }
		- SUCC   = { for , child , node , children , }

295 :	"tree_depth"
		- NEIGH  = { self , tree_depth , += , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , }
		- SUCC   = { for , child , node , children , }

295 :	"+="
		- NEIGH  = { self , tree_depth , += , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , }
		- SUCC   = { for , child , node , children , }

296 :	"for"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { self , tree_depth , += , }
		- SUCC   = { self , tree_depth , -= , }

296 :	"child"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { self , tree_depth , += , }
		- SUCC   = { self , tree_depth , -= , }

296 :	"node"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { self , tree_depth , += , }
		- SUCC   = { self , tree_depth , -= , }

296 :	"children"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { self , tree_depth , += , }
		- SUCC   = { self , tree_depth , -= , }

297 :	"yield"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

297 :	"from"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

297 :	"self"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

297 :	"visit"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

297 :	"child"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

299 :	"self"
		- NEIGH  = { self , tree_depth , -= , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { for , child , node , children , }
		- SUCC   = { out , indent , _type , fg , bold , }

299 :	"tree_depth"
		- NEIGH  = { self , tree_depth , -= , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { for , child , node , children , }
		- SUCC   = { out , indent , _type , fg , bold , }

299 :	"-="
		- NEIGH  = { self , tree_depth , -= , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { for , child , node , children , }
		- SUCC   = { out , indent , _type , fg , bold , }

300 :	"out"
		- NEIGH  = { out , indent , _type , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { self , tree_depth , -= , }
		- SUCC   = { _type , token , tok_name , get , node , type , str , node , type , }

300 :	"indent"
		- NEIGH  = { out , indent , _type , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { self , tree_depth , -= , }
		- SUCC   = { _type , token , tok_name , get , node , type , str , node , type , }

300 :	"_type"
		- NEIGH  = { out , indent , _type , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { self , tree_depth , -= , }
		- SUCC   = { _type , token , tok_name , get , node , type , str , node , type , }

300 :	"fg"
		- NEIGH  = { out , indent , _type , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { self , tree_depth , -= , }
		- SUCC   = { _type , token , tok_name , get , node , type , str , node , type , }

300 :	"bold"
		- NEIGH  = { out , indent , _type , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { self , tree_depth , -= , }
		- SUCC   = { _type , token , tok_name , get , node , type , str , node , type , }

302 :	"_type"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"token"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"tok_name"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"get"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"node"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"type"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"str"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"node"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

302 :	"type"
		- NEIGH  = { _type , token , tok_name , get , node , type , str , node , type , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { out , indent , _type , fg , bold , }
		- SUCC   = { out , indent , _type , fg , nl , }

303 :	"out"
		- NEIGH  = { out , indent , _type , fg , nl , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , token , tok_name , get , node , type , str , node , type , }
		- SUCC   = { if , node , prefix , }

303 :	"indent"
		- NEIGH  = { out , indent , _type , fg , nl , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , token , tok_name , get , node , type , str , node , type , }
		- SUCC   = { if , node , prefix , }

303 :	"_type"
		- NEIGH  = { out , indent , _type , fg , nl , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , token , tok_name , get , node , type , str , node , type , }
		- SUCC   = { if , node , prefix , }

303 :	"fg"
		- NEIGH  = { out , indent , _type , fg , nl , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , token , tok_name , get , node , type , str , node , type , }
		- SUCC   = { if , node , prefix , }

303 :	"nl"
		- NEIGH  = { out , indent , _type , fg , nl , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { _type , token , tok_name , get , node , type , str , node , type , }
		- SUCC   = { if , node , prefix , }

304 :	"if"
		- NEIGH  = { if , node , prefix , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { out , node , prefix , fg , bold , nl , }
		- PRED   = { out , indent , _type , fg , nl , }
		- SUCC   = { out , node , value , fg , bold , }

304 :	"node"
		- NEIGH  = { if , node , prefix , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { out , node , prefix , fg , bold , nl , }
		- PRED   = { out , indent , _type , fg , nl , }
		- SUCC   = { out , node , value , fg , bold , }

304 :	"prefix"
		- NEIGH  = { if , node , prefix , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { out , node , prefix , fg , bold , nl , }
		- PRED   = { out , indent , _type , fg , nl , }
		- SUCC   = { out , node , value , fg , bold , }

307 :	"out"
		- NEIGH  = { out , node , prefix , fg , bold , nl , }
		- PARENT = { if , node , prefix , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

307 :	"node"
		- NEIGH  = { out , node , prefix , fg , bold , nl , }
		- PARENT = { if , node , prefix , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

307 :	"prefix"
		- NEIGH  = { out , node , prefix , fg , bold , nl , }
		- PARENT = { if , node , prefix , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

307 :	"fg"
		- NEIGH  = { out , node , prefix , fg , bold , nl , }
		- PARENT = { if , node , prefix , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

307 :	"bold"
		- NEIGH  = { out , node , prefix , fg , bold , nl , }
		- PARENT = { if , node , prefix , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

307 :	"nl"
		- NEIGH  = { out , node , prefix , fg , bold , nl , }
		- PARENT = { if , node , prefix , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

308 :	"out"
		- NEIGH  = { out , node , value , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { if , node , prefix , }
		- SUCC   = { }

308 :	"node"
		- NEIGH  = { out , node , value , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { if , node , prefix , }
		- SUCC   = { }

308 :	"value"
		- NEIGH  = { out , node , value , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { if , node , prefix , }
		- SUCC   = { }

308 :	"fg"
		- NEIGH  = { out , node , value , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { if , node , prefix , }
		- SUCC   = { }

308 :	"bold"
		- NEIGH  = { out , node , value , fg , bold , }
		- PARENT = { if , isinstance , node , Node , }
		- CHILD  = { }
		- PRED   = { if , node , prefix , }
		- SUCC   = { }

311 :	"KEYWORDS"
		- NEIGH  = { KEYWORDS , set , keyword , kwlist , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DebugVisitor , }
		- SUCC   = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }

311 :	"set"
		- NEIGH  = { KEYWORDS , set , keyword , kwlist , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DebugVisitor , }
		- SUCC   = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }

311 :	"keyword"
		- NEIGH  = { KEYWORDS , set , keyword , kwlist , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DebugVisitor , }
		- SUCC   = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }

311 :	"kwlist"
		- NEIGH  = { KEYWORDS , set , keyword , kwlist , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DebugVisitor , }
		- SUCC   = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }

312 :	"WHITESPACE"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"set"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"token"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"DEDENT"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"token"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"INDENT"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"token"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

312 :	"NEWLINE"
		- NEIGH  = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { KEYWORDS , set , keyword , kwlist , }
		- SUCC   = { FLOW_CONTROL , set , }

313 :	"FLOW_CONTROL"
		- NEIGH  = { FLOW_CONTROL , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- SUCC   = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }

313 :	"set"
		- NEIGH  = { FLOW_CONTROL , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WHITESPACE , set , token , DEDENT , token , INDENT , token , NEWLINE , }
		- SUCC   = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }

314 :	"STATEMENT"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

314 :	"set"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

315 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

315 :	"if_stmt"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

316 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

316 :	"while_stmt"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

317 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

317 :	"for_stmt"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

318 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

318 :	"try_stmt"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

319 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

319 :	"except_clause"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

320 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

320 :	"with_stmt"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

321 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

321 :	"funcdef"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

322 :	"syms"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

322 :	"classdef"
		- NEIGH  = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { FLOW_CONTROL , set , }
		- SUCC   = { STANDALONE_COMMENT , }

324 :	"STANDALONE_COMMENT"
		- NEIGH  = { STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STATEMENT , set , syms , if_stmt , syms , while_stmt , syms , for_stmt , syms , try_stmt , syms , except_clause , syms , with_stmt , syms , funcdef , syms , classdef , }
		- SUCC   = { LOGIC_OPERATORS , set , }

325 :	"LOGIC_OPERATORS"
		- NEIGH  = { LOGIC_OPERATORS , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STANDALONE_COMMENT , }
		- SUCC   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }

325 :	"set"
		- NEIGH  = { LOGIC_OPERATORS , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STANDALONE_COMMENT , }
		- SUCC   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }

326 :	"COMPARATORS"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

326 :	"set"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

327 :	"token"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

327 :	"LESS"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

328 :	"token"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

328 :	"GREATER"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

329 :	"token"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

329 :	"EQEQUAL"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

330 :	"token"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

330 :	"NOTEQUAL"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

331 :	"token"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

331 :	"LESSEQUAL"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

332 :	"token"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

332 :	"GREATEREQUAL"
		- NEIGH  = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_OPERATORS , set , }
		- SUCC   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }

334 :	"MATH_OPERATORS"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

334 :	"set"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

335 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

335 :	"PLUS"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

336 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

336 :	"MINUS"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

337 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

337 :	"STAR"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

338 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

338 :	"SLASH"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

339 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

339 :	"VBAR"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

340 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

340 :	"AMPER"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

341 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

341 :	"PERCENT"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

342 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

342 :	"CIRCUMFLEX"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

343 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

343 :	"TILDE"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

344 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

344 :	"LEFTSHIFT"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

345 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

345 :	"RIGHTSHIFT"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

346 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

346 :	"DOUBLESTAR"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

347 :	"token"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

347 :	"DOUBLESLASH"
		- NEIGH  = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATORS , set , token , LESS , token , GREATER , token , EQEQUAL , token , NOTEQUAL , token , LESSEQUAL , token , GREATEREQUAL , }
		- SUCC   = { COMPREHENSION_PRIORITY , }

349 :	"COMPREHENSION_PRIORITY"
		- NEIGH  = { COMPREHENSION_PRIORITY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MATH_OPERATORS , set , token , PLUS , token , MINUS , token , STAR , token , SLASH , token , VBAR , token , AMPER , token , PERCENT , token , CIRCUMFLEX , token , TILDE , token , LEFTSHIFT , token , RIGHTSHIFT , token , DOUBLESTAR , token , DOUBLESLASH , }
		- SUCC   = { COMMA_PRIORITY , }

350 :	"COMMA_PRIORITY"
		- NEIGH  = { COMMA_PRIORITY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPREHENSION_PRIORITY , }
		- SUCC   = { LOGIC_PRIORITY , }

351 :	"LOGIC_PRIORITY"
		- NEIGH  = { LOGIC_PRIORITY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMMA_PRIORITY , }
		- SUCC   = { STRING_PRIORITY , }

352 :	"STRING_PRIORITY"
		- NEIGH  = { STRING_PRIORITY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LOGIC_PRIORITY , }
		- SUCC   = { COMPARATOR_PRIORITY , }

353 :	"COMPARATOR_PRIORITY"
		- NEIGH  = { COMPARATOR_PRIORITY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { STRING_PRIORITY , }
		- SUCC   = { MATH_PRIORITY , }

354 :	"MATH_PRIORITY"
		- NEIGH  = { MATH_PRIORITY , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { COMPARATOR_PRIORITY , }
		- SUCC   = { BracketTracker , }

358 :	"BracketTracker"
		- NEIGH  = { BracketTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { MATH_PRIORITY , }
		- SUCC   = { Line , }

359 :	"depth"
		- NEIGH  = { depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { bracket_match , Factory , dict , }

360 :	"bracket_match"
		- NEIGH  = { bracket_match , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , }
		- SUCC   = { delimiters , Factory , dict , }

360 :	"Factory"
		- NEIGH  = { bracket_match , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , }
		- SUCC   = { delimiters , Factory , dict , }

360 :	"dict"
		- NEIGH  = { bracket_match , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , }
		- SUCC   = { delimiters , Factory , dict , }

361 :	"delimiters"
		- NEIGH  = { delimiters , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { bracket_match , Factory , dict , }
		- SUCC   = { previous , }

361 :	"Factory"
		- NEIGH  = { delimiters , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { bracket_match , Factory , dict , }
		- SUCC   = { previous , }

361 :	"dict"
		- NEIGH  = { delimiters , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { bracket_match , Factory , dict , }
		- SUCC   = { previous , }

362 :	"previous"
		- NEIGH  = { previous , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { delimiters , Factory , dict , }
		- SUCC   = { mark , self , leaf , }

364 :	"mark"
		- NEIGH  = { mark , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous , }
		- SUCC   = { any_open_brackets , self , }

364 :	"self"
		- NEIGH  = { mark , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous , }
		- SUCC   = { any_open_brackets , self , }

364 :	"leaf"
		- NEIGH  = { mark , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous , }
		- SUCC   = { any_open_brackets , self , }

365 :	"if"
		- NEIGH  = { if , leaf , type , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , CLOSING_BRACKETS , }

365 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , CLOSING_BRACKETS , }

365 :	"type"
		- NEIGH  = { if , leaf , type , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , CLOSING_BRACKETS , }

365 :	"=="
		- NEIGH  = { if , leaf , type , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , CLOSING_BRACKETS , }

365 :	"token"
		- NEIGH  = { if , leaf , type , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , CLOSING_BRACKETS , }

365 :	"COMMENT"
		- NEIGH  = { if , leaf , type , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , CLOSING_BRACKETS , }

366 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , leaf , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

368 :	"if"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , depth , -= , opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , leaf , opening_bracket , opening_bracket , }
		- PRED   = { if , leaf , type , == , token , COMMENT , }
		- SUCC   = { leaf , bracket_depth , self , depth , }

368 :	"leaf"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , depth , -= , opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , leaf , opening_bracket , opening_bracket , }
		- PRED   = { if , leaf , type , == , token , COMMENT , }
		- SUCC   = { leaf , bracket_depth , self , depth , }

368 :	"type"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , depth , -= , opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , leaf , opening_bracket , opening_bracket , }
		- PRED   = { if , leaf , type , == , token , COMMENT , }
		- SUCC   = { leaf , bracket_depth , self , depth , }

368 :	"in"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , depth , -= , opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , leaf , opening_bracket , opening_bracket , }
		- PRED   = { if , leaf , type , == , token , COMMENT , }
		- SUCC   = { leaf , bracket_depth , self , depth , }

368 :	"CLOSING_BRACKETS"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , depth , -= , opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , leaf , opening_bracket , opening_bracket , }
		- PRED   = { if , leaf , type , == , token , COMMENT , }
		- SUCC   = { leaf , bracket_depth , self , depth , }

369 :	"self"
		- NEIGH  = { self , depth , -= , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }

369 :	"depth"
		- NEIGH  = { self , depth , -= , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }

369 :	"-="
		- NEIGH  = { self , depth , -= , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }

370 :	"opening_bracket"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"self"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"bracket_match"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"pop"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"tuple"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"self"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"depth"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"leaf"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

370 :	"type"
		- NEIGH  = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , depth , -= , }
		- SUCC   = { leaf , opening_bracket , opening_bracket , }

371 :	"leaf"
		- NEIGH  = { leaf , opening_bracket , opening_bracket , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- SUCC   = { }

371 :	"opening_bracket"
		- NEIGH  = { leaf , opening_bracket , opening_bracket , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- SUCC   = { }

371 :	"opening_bracket"
		- NEIGH  = { leaf , opening_bracket , opening_bracket , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { opening_bracket , self , bracket_match , pop , tuple , self , depth , leaf , type , }
		- SUCC   = { }

372 :	"leaf"
		- NEIGH  = { leaf , bracket_depth , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , self , depth , == , }

372 :	"bracket_depth"
		- NEIGH  = { leaf , bracket_depth , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , self , depth , == , }

372 :	"self"
		- NEIGH  = { leaf , bracket_depth , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , self , depth , == , }

372 :	"depth"
		- NEIGH  = { leaf , bracket_depth , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , self , depth , == , }

373 :	"if"
		- NEIGH  = { if , self , depth , == , }
		- PARENT = { }
		- CHILD  = { delim , is_delimiter , leaf , if , delim , }
		- PRED   = { leaf , bracket_depth , self , depth , }
		- SUCC   = { if , leaf , type , in , OPENING_BRACKETS , }

373 :	"self"
		- NEIGH  = { if , self , depth , == , }
		- PARENT = { }
		- CHILD  = { delim , is_delimiter , leaf , if , delim , }
		- PRED   = { leaf , bracket_depth , self , depth , }
		- SUCC   = { if , leaf , type , in , OPENING_BRACKETS , }

373 :	"depth"
		- NEIGH  = { if , self , depth , == , }
		- PARENT = { }
		- CHILD  = { delim , is_delimiter , leaf , if , delim , }
		- PRED   = { leaf , bracket_depth , self , depth , }
		- SUCC   = { if , leaf , type , in , OPENING_BRACKETS , }

373 :	"=="
		- NEIGH  = { if , self , depth , == , }
		- PARENT = { }
		- CHILD  = { delim , is_delimiter , leaf , if , delim , }
		- PRED   = { leaf , bracket_depth , self , depth , }
		- SUCC   = { if , leaf , type , in , OPENING_BRACKETS , }

374 :	"delim"
		- NEIGH  = { delim , is_delimiter , leaf , }
		- PARENT = { if , self , depth , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , delim , }

374 :	"is_delimiter"
		- NEIGH  = { delim , is_delimiter , leaf , }
		- PARENT = { if , self , depth , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , delim , }

374 :	"leaf"
		- NEIGH  = { delim , is_delimiter , leaf , }
		- PARENT = { if , self , depth , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , delim , }

375 :	"if"
		- NEIGH  = { if , delim , }
		- PARENT = { if , self , depth , == , }
		- CHILD  = { self , delimiters , id , leaf , delim , if , self , previous , is , not , }
		- PRED   = { delim , is_delimiter , leaf , }
		- SUCC   = { }

375 :	"delim"
		- NEIGH  = { if , delim , }
		- PARENT = { if , self , depth , == , }
		- CHILD  = { self , delimiters , id , leaf , delim , if , self , previous , is , not , }
		- PRED   = { delim , is_delimiter , leaf , }
		- SUCC   = { }

376 :	"self"
		- NEIGH  = { self , delimiters , id , leaf , delim , }
		- PARENT = { if , delim , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , previous , is , not , }

376 :	"delimiters"
		- NEIGH  = { self , delimiters , id , leaf , delim , }
		- PARENT = { if , delim , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , previous , is , not , }

376 :	"id"
		- NEIGH  = { self , delimiters , id , leaf , delim , }
		- PARENT = { if , delim , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , previous , is , not , }

376 :	"leaf"
		- NEIGH  = { self , delimiters , id , leaf , delim , }
		- PARENT = { if , delim , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , previous , is , not , }

376 :	"delim"
		- NEIGH  = { self , delimiters , id , leaf , delim , }
		- PARENT = { if , delim , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , previous , is , not , }

377 :	"if"
		- NEIGH  = { if , self , previous , is , not , }
		- PARENT = { if , delim , }
		- CHILD  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PRED   = { self , delimiters , id , leaf , delim , }
		- SUCC   = { }

377 :	"self"
		- NEIGH  = { if , self , previous , is , not , }
		- PARENT = { if , delim , }
		- CHILD  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PRED   = { self , delimiters , id , leaf , delim , }
		- SUCC   = { }

377 :	"previous"
		- NEIGH  = { if , self , previous , is , not , }
		- PARENT = { if , delim , }
		- CHILD  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PRED   = { self , delimiters , id , leaf , delim , }
		- SUCC   = { }

377 :	"is"
		- NEIGH  = { if , self , previous , is , not , }
		- PARENT = { if , delim , }
		- CHILD  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PRED   = { self , delimiters , id , leaf , delim , }
		- SUCC   = { }

377 :	"not"
		- NEIGH  = { if , self , previous , is , not , }
		- PARENT = { if , delim , }
		- CHILD  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PRED   = { self , delimiters , id , leaf , delim , }
		- SUCC   = { }

378 :	"if"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"type"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"=="
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"token"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"STRING"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"or"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"self"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"previous"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"type"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"=="
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"token"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

378 :	"STRING"
		- NEIGH  = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- PARENT = { if , self , previous , is , not , }
		- CHILD  = { self , delimiters , id , self , previous , STRING_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PRED   = { }
		- SUCC   = { }

379 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }

379 :	"delimiters"
		- NEIGH  = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }

379 :	"id"
		- NEIGH  = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }

379 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }

379 :	"previous"
		- NEIGH  = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }

379 :	"STRING_PRIORITY"
		- NEIGH  = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }

380 :	"if"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

381 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

381 :	"type"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

381 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

381 :	"token"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

381 :	"NAME"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

382 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

382 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

382 :	"value"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

382 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

383 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

383 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

383 :	"parent"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"parent"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"type"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"in"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"set"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"syms"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"comp_for"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"syms"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

384 :	"old_comp_for"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- PARENT = { if , leaf , type , == , token , STRING , or , self , previous , type , == , token , STRING , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PRED   = { self , delimiters , id , self , previous , STRING_PRIORITY , }
		- SUCC   = { }

386 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }

386 :	"delimiters"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }

386 :	"id"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }

386 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }

386 :	"previous"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }

386 :	"COMPREHENSION_PRIORITY"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }

387 :	"if"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

388 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

388 :	"type"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

388 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

388 :	"token"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

388 :	"NAME"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

389 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

389 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

389 :	"value"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

389 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

390 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

390 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

390 :	"parent"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"parent"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"type"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"in"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"set"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"syms"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"comp_if"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"syms"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

391 :	"old_comp_if"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_for , syms , old_comp_for , }
		- CHILD  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

393 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }

393 :	"delimiters"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }

393 :	"id"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }

393 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }

393 :	"previous"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }

393 :	"COMPREHENSION_PRIORITY"
		- NEIGH  = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }

394 :	"if"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

395 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

395 :	"type"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

395 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

395 :	"token"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

395 :	"NAME"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

396 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

396 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

396 :	"value"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

396 :	"in"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

396 :	"LOGIC_OPERATORS"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

397 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

397 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

397 :	"parent"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , or , leaf , parent , or , leaf , parent , type , in , set , syms , comp_if , syms , old_comp_if , }
		- CHILD  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PRED   = { self , delimiters , id , self , previous , COMPREHENSION_PRIORITY , }
		- SUCC   = { }

399 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"delimiters"
		- NEIGH  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"id"
		- NEIGH  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"self"
		- NEIGH  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"previous"
		- NEIGH  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

399 :	"LOGIC_PRIORITY"
		- NEIGH  = { self , delimiters , id , self , previous , LOGIC_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , in , LOGIC_OPERATORS , or , leaf , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

400 :	"if"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , self , depth , += , }
		- PRED   = { if , self , depth , == , }
		- SUCC   = { self , previous , leaf , }

400 :	"leaf"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , self , depth , += , }
		- PRED   = { if , self , depth , == , }
		- SUCC   = { self , previous , leaf , }

400 :	"type"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , self , depth , += , }
		- PRED   = { if , self , depth , == , }
		- SUCC   = { self , previous , leaf , }

400 :	"in"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , self , depth , += , }
		- PRED   = { if , self , depth , == , }
		- SUCC   = { self , previous , leaf , }

400 :	"OPENING_BRACKETS"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , self , depth , += , }
		- PRED   = { if , self , depth , == , }
		- SUCC   = { self , previous , leaf , }

401 :	"self"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"bracket_match"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"tuple"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"self"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"depth"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"BRACKET"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"leaf"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"type"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

401 :	"leaf"
		- NEIGH  = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , depth , += , }

402 :	"self"
		- NEIGH  = { self , depth , += , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- SUCC   = { }

402 :	"depth"
		- NEIGH  = { self , depth , += , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- SUCC   = { }

402 :	"+="
		- NEIGH  = { self , depth , += , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { self , bracket_match , tuple , self , depth , BRACKET , leaf , type , leaf , }
		- SUCC   = { }

403 :	"self"
		- NEIGH  = { self , previous , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , OPENING_BRACKETS , }
		- SUCC   = { }

403 :	"previous"
		- NEIGH  = { self , previous , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , OPENING_BRACKETS , }
		- SUCC   = { }

403 :	"leaf"
		- NEIGH  = { self , previous , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , OPENING_BRACKETS , }
		- SUCC   = { }

405 :	"any_open_brackets"
		- NEIGH  = { any_open_brackets , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mark , self , leaf , }
		- SUCC   = { max_priority , self , exclude , }

405 :	"self"
		- NEIGH  = { any_open_brackets , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { mark , self , leaf , }
		- SUCC   = { max_priority , self , exclude , }

407 :	"return"
		- NEIGH  = { return , bool , self , bracket_match , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"bool"
		- NEIGH  = { return , bool , self , bracket_match , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"self"
		- NEIGH  = { return , bool , self , bracket_match , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

407 :	"bracket_match"
		- NEIGH  = { return , bool , self , bracket_match , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"max_priority"
		- NEIGH  = { max_priority , self , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { any_open_brackets , self , }
		- SUCC   = { }

409 :	"self"
		- NEIGH  = { max_priority , self , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { any_open_brackets , self , }
		- SUCC   = { }

409 :	"exclude"
		- NEIGH  = { max_priority , self , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { any_open_brackets , self , }
		- SUCC   = { }

414 :	"return"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"max"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"v"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"for-comp"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"tuple"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"k"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"v"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"self"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"delimiters"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"items"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"if-comp"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"k"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"not"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"in"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

414 :	"exclude"
		- NEIGH  = { return , max , v , for-comp , tuple , k , v , self , delimiters , items , if-comp , k , not , in , exclude , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

418 :	"Line"
		- NEIGH  = { Line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BracketTracker , }
		- SUCC   = { EmptyLineTracker , }

419 :	"depth"
		- NEIGH  = { depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { leaves , Factory , list , }

420 :	"leaves"
		- NEIGH  = { leaves , Factory , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , }
		- SUCC   = { comments , Factory , dict , }

420 :	"Factory"
		- NEIGH  = { leaves , Factory , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , }
		- SUCC   = { comments , Factory , dict , }

420 :	"list"
		- NEIGH  = { leaves , Factory , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , }
		- SUCC   = { comments , Factory , dict , }

421 :	"comments"
		- NEIGH  = { comments , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , Factory , list , }
		- SUCC   = { bracket_tracker , Factory , BracketTracker , }

421 :	"Factory"
		- NEIGH  = { comments , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , Factory , list , }
		- SUCC   = { bracket_tracker , Factory , BracketTracker , }

421 :	"dict"
		- NEIGH  = { comments , Factory , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , Factory , list , }
		- SUCC   = { bracket_tracker , Factory , BracketTracker , }

422 :	"bracket_tracker"
		- NEIGH  = { bracket_tracker , Factory , BracketTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comments , Factory , dict , }
		- SUCC   = { inside_brackets , }

422 :	"Factory"
		- NEIGH  = { bracket_tracker , Factory , BracketTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comments , Factory , dict , }
		- SUCC   = { inside_brackets , }

422 :	"BracketTracker"
		- NEIGH  = { bracket_tracker , Factory , BracketTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comments , Factory , dict , }
		- SUCC   = { inside_brackets , }

423 :	"inside_brackets"
		- NEIGH  = { inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { bracket_tracker , Factory , BracketTracker , }
		- SUCC   = { has_for , }

424 :	"has_for"
		- NEIGH  = { has_for , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { inside_brackets , }
		- SUCC   = { _for_loop_variable , }

425 :	"_for_loop_variable"
		- NEIGH  = { _for_loop_variable , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { has_for , }
		- SUCC   = { append , self , leaf , preformatted , }

427 :	"append"
		- NEIGH  = { append , self , leaf , preformatted , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _for_loop_variable , }
		- SUCC   = { property , }

427 :	"self"
		- NEIGH  = { append , self , leaf , preformatted , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _for_loop_variable , }
		- SUCC   = { property , }

427 :	"leaf"
		- NEIGH  = { append , self , leaf , preformatted , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _for_loop_variable , }
		- SUCC   = { property , }

427 :	"preformatted"
		- NEIGH  = { append , self , leaf , preformatted , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _for_loop_variable , }
		- SUCC   = { property , }

428 :	"has_value"
		- NEIGH  = { has_value , leaf , value , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , has_value , }

428 :	"leaf"
		- NEIGH  = { has_value , leaf , value , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , has_value , }

428 :	"value"
		- NEIGH  = { has_value , leaf , value , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , has_value , }

428 :	"strip"
		- NEIGH  = { has_value , leaf , value , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , has_value , }

429 :	"if"
		- NEIGH  = { if , has_value , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { has_value , leaf , value , strip , }
		- SUCC   = { if , self , leaves , or , preformatted , }

429 :	"has_value"
		- NEIGH  = { if , has_value , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { has_value , leaf , value , strip , }
		- SUCC   = { if , self , leaves , or , preformatted , }

430 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , has_value , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

432 :	"if"
		- NEIGH  = { if , self , leaves , or , preformatted , }
		- PARENT = { }
		- CHILD  = { leaf , prefix , += , whitespace , leaf , }
		- PRED   = { if , has_value , }
		- SUCC   = { if , self , inside_brackets , or , preformatted , }

432 :	"self"
		- NEIGH  = { if , self , leaves , or , preformatted , }
		- PARENT = { }
		- CHILD  = { leaf , prefix , += , whitespace , leaf , }
		- PRED   = { if , has_value , }
		- SUCC   = { if , self , inside_brackets , or , preformatted , }

432 :	"leaves"
		- NEIGH  = { if , self , leaves , or , preformatted , }
		- PARENT = { }
		- CHILD  = { leaf , prefix , += , whitespace , leaf , }
		- PRED   = { if , has_value , }
		- SUCC   = { if , self , inside_brackets , or , preformatted , }

432 :	"or"
		- NEIGH  = { if , self , leaves , or , preformatted , }
		- PARENT = { }
		- CHILD  = { leaf , prefix , += , whitespace , leaf , }
		- PRED   = { if , has_value , }
		- SUCC   = { if , self , inside_brackets , or , preformatted , }

432 :	"preformatted"
		- NEIGH  = { if , self , leaves , or , preformatted , }
		- PARENT = { }
		- CHILD  = { leaf , prefix , += , whitespace , leaf , }
		- PRED   = { if , has_value , }
		- SUCC   = { if , self , inside_brackets , or , preformatted , }

435 :	"leaf"
		- NEIGH  = { leaf , prefix , += , whitespace , leaf , }
		- PARENT = { if , self , leaves , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

435 :	"prefix"
		- NEIGH  = { leaf , prefix , += , whitespace , leaf , }
		- PARENT = { if , self , leaves , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

435 :	"+="
		- NEIGH  = { leaf , prefix , += , whitespace , leaf , }
		- PARENT = { if , self , leaves , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

435 :	"whitespace"
		- NEIGH  = { leaf , prefix , += , whitespace , leaf , }
		- PARENT = { if , self , leaves , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

435 :	"leaf"
		- NEIGH  = { leaf , prefix , += , whitespace , leaf , }
		- PARENT = { if , self , leaves , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

436 :	"if"
		- NEIGH  = { if , self , inside_brackets , or , preformatted , }
		- PARENT = { }
		- CHILD  = { self , maybe_decrement_after_for_loop_variable , leaf , self , bracket_tracker , mark , leaf , self , maybe_remove_trailing_comma , leaf , self , maybe_increment_for_loop_variable , leaf , if , self , maybe_adapt_standalone_comment , leaf , }
		- PRED   = { if , self , leaves , or , preformatted , }
		- SUCC   = { if , self , append_comment , leaf , }

436 :	"self"
		- NEIGH  = { if , self , inside_brackets , or , preformatted , }
		- PARENT = { }
		- CHILD  = { self , maybe_decrement_after_for_loop_variable , leaf , self , bracket_tracker , mark , leaf , self , maybe_remove_trailing_comma , leaf , self , maybe_increment_for_loop_variable , leaf , if , self , maybe_adapt_standalone_comment , leaf , }
		- PRED   = { if , self , leaves , or , preformatted , }
		- SUCC   = { if , self , append_comment , leaf , }

436 :	"inside_brackets"
		- NEIGH  = { if , self , inside_brackets , or , preformatted , }
		- PARENT = { }
		- CHILD  = { self , maybe_decrement_after_for_loop_variable , leaf , self , bracket_tracker , mark , leaf , self , maybe_remove_trailing_comma , leaf , self , maybe_increment_for_loop_variable , leaf , if , self , maybe_adapt_standalone_comment , leaf , }
		- PRED   = { if , self , leaves , or , preformatted , }
		- SUCC   = { if , self , append_comment , leaf , }

436 :	"or"
		- NEIGH  = { if , self , inside_brackets , or , preformatted , }
		- PARENT = { }
		- CHILD  = { self , maybe_decrement_after_for_loop_variable , leaf , self , bracket_tracker , mark , leaf , self , maybe_remove_trailing_comma , leaf , self , maybe_increment_for_loop_variable , leaf , if , self , maybe_adapt_standalone_comment , leaf , }
		- PRED   = { if , self , leaves , or , preformatted , }
		- SUCC   = { if , self , append_comment , leaf , }

436 :	"preformatted"
		- NEIGH  = { if , self , inside_brackets , or , preformatted , }
		- PARENT = { }
		- CHILD  = { self , maybe_decrement_after_for_loop_variable , leaf , self , bracket_tracker , mark , leaf , self , maybe_remove_trailing_comma , leaf , self , maybe_increment_for_loop_variable , leaf , if , self , maybe_adapt_standalone_comment , leaf , }
		- PRED   = { if , self , leaves , or , preformatted , }
		- SUCC   = { if , self , append_comment , leaf , }

437 :	"self"
		- NEIGH  = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , bracket_tracker , mark , leaf , }

437 :	"maybe_decrement_after_for_loop_variable"
		- NEIGH  = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , bracket_tracker , mark , leaf , }

437 :	"leaf"
		- NEIGH  = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , bracket_tracker , mark , leaf , }

438 :	"self"
		- NEIGH  = { self , bracket_tracker , mark , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- SUCC   = { self , maybe_remove_trailing_comma , leaf , }

438 :	"bracket_tracker"
		- NEIGH  = { self , bracket_tracker , mark , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- SUCC   = { self , maybe_remove_trailing_comma , leaf , }

438 :	"mark"
		- NEIGH  = { self , bracket_tracker , mark , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- SUCC   = { self , maybe_remove_trailing_comma , leaf , }

438 :	"leaf"
		- NEIGH  = { self , bracket_tracker , mark , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_decrement_after_for_loop_variable , leaf , }
		- SUCC   = { self , maybe_remove_trailing_comma , leaf , }

439 :	"self"
		- NEIGH  = { self , maybe_remove_trailing_comma , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , mark , leaf , }
		- SUCC   = { self , maybe_increment_for_loop_variable , leaf , }

439 :	"maybe_remove_trailing_comma"
		- NEIGH  = { self , maybe_remove_trailing_comma , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , mark , leaf , }
		- SUCC   = { self , maybe_increment_for_loop_variable , leaf , }

439 :	"leaf"
		- NEIGH  = { self , maybe_remove_trailing_comma , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , mark , leaf , }
		- SUCC   = { self , maybe_increment_for_loop_variable , leaf , }

440 :	"self"
		- NEIGH  = { self , maybe_increment_for_loop_variable , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_remove_trailing_comma , leaf , }
		- SUCC   = { if , self , maybe_adapt_standalone_comment , leaf , }

440 :	"maybe_increment_for_loop_variable"
		- NEIGH  = { self , maybe_increment_for_loop_variable , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_remove_trailing_comma , leaf , }
		- SUCC   = { if , self , maybe_adapt_standalone_comment , leaf , }

440 :	"leaf"
		- NEIGH  = { self , maybe_increment_for_loop_variable , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { }
		- PRED   = { self , maybe_remove_trailing_comma , leaf , }
		- SUCC   = { if , self , maybe_adapt_standalone_comment , leaf , }

441 :	"if"
		- NEIGH  = { if , self , maybe_adapt_standalone_comment , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { return , }
		- PRED   = { self , maybe_increment_for_loop_variable , leaf , }
		- SUCC   = { }

441 :	"self"
		- NEIGH  = { if , self , maybe_adapt_standalone_comment , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { return , }
		- PRED   = { self , maybe_increment_for_loop_variable , leaf , }
		- SUCC   = { }

441 :	"maybe_adapt_standalone_comment"
		- NEIGH  = { if , self , maybe_adapt_standalone_comment , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { return , }
		- PRED   = { self , maybe_increment_for_loop_variable , leaf , }
		- SUCC   = { }

441 :	"leaf"
		- NEIGH  = { if , self , maybe_adapt_standalone_comment , leaf , }
		- PARENT = { if , self , inside_brackets , or , preformatted , }
		- CHILD  = { return , }
		- PRED   = { self , maybe_increment_for_loop_variable , leaf , }
		- SUCC   = { }

442 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , maybe_adapt_standalone_comment , leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

444 :	"if"
		- NEIGH  = { if , self , append_comment , leaf , }
		- PARENT = { }
		- CHILD  = { self , leaves , append , leaf , }
		- PRED   = { if , self , inside_brackets , or , preformatted , }
		- SUCC   = { }

444 :	"self"
		- NEIGH  = { if , self , append_comment , leaf , }
		- PARENT = { }
		- CHILD  = { self , leaves , append , leaf , }
		- PRED   = { if , self , inside_brackets , or , preformatted , }
		- SUCC   = { }

444 :	"append_comment"
		- NEIGH  = { if , self , append_comment , leaf , }
		- PARENT = { }
		- CHILD  = { self , leaves , append , leaf , }
		- PRED   = { if , self , inside_brackets , or , preformatted , }
		- SUCC   = { }

444 :	"leaf"
		- NEIGH  = { if , self , append_comment , leaf , }
		- PARENT = { }
		- CHILD  = { self , leaves , append , leaf , }
		- PRED   = { if , self , inside_brackets , or , preformatted , }
		- SUCC   = { }

445 :	"self"
		- NEIGH  = { self , leaves , append , leaf , }
		- PARENT = { if , self , append_comment , leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

445 :	"leaves"
		- NEIGH  = { self , leaves , append , leaf , }
		- PARENT = { if , self , append_comment , leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

445 :	"append"
		- NEIGH  = { self , leaves , append , leaf , }
		- PARENT = { if , self , append_comment , leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

445 :	"leaf"
		- NEIGH  = { self , leaves , append , leaf , }
		- PARENT = { if , self , append_comment , leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

447 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { append , self , leaf , preformatted , }
		- SUCC   = { is_comment , self , }

448 :	"is_comment"
		- NEIGH  = { is_comment , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

448 :	"self"
		- NEIGH  = { is_comment , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

449 :	"return"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"bool"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"type"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

449 :	"STANDALONE_COMMENT"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

451 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_comment , self , }
		- SUCC   = { is_decorator , self , }

452 :	"is_decorator"
		- NEIGH  = { is_decorator , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

452 :	"self"
		- NEIGH  = { is_decorator , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

453 :	"return"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"bool"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"type"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"token"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"AT"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , AT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_decorator , self , }
		- SUCC   = { is_import , self , }

456 :	"is_import"
		- NEIGH  = { is_import , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

456 :	"self"
		- NEIGH  = { is_import , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

457 :	"return"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

457 :	"bool"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

457 :	"self"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

457 :	"or"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

457 :	"is_import"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

457 :	"self"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

457 :	"leaves"
		- NEIGH  = { return , bool , self , or , is_import , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

459 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_import , self , }
		- SUCC   = { is_class , self , }

460 :	"is_class"
		- NEIGH  = { is_class , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

460 :	"self"
		- NEIGH  = { is_class , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

461 :	"return"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

462 :	"bool"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

462 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"type"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"token"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

463 :	"NAME"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"value"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

464 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

467 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_class , self , }
		- SUCC   = { is_def , self , }

468 :	"is_def"
		- NEIGH  = { is_def , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

468 :	"self"
		- NEIGH  = { is_def , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

470 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { first_leaf , self , leaves , }

471 :	"first_leaf"
		- NEIGH  = { first_leaf , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

471 :	"self"
		- NEIGH  = { first_leaf , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

471 :	"leaves"
		- NEIGH  = { first_leaf , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

472 :	"except"
		- NEIGH  = { except , IndexError , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { first_leaf , self , leaves , }
		- SUCC   = { try , }

472 :	"IndexError"
		- NEIGH  = { except , IndexError , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { first_leaf , self , leaves , }
		- SUCC   = { try , }

473 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

475 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { second_leaf , self , leaves , }

476 :	"second_leaf"
		- NEIGH  = { second_leaf , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

476 :	"self"
		- NEIGH  = { second_leaf , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

476 :	"leaves"
		- NEIGH  = { second_leaf , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

477 :	"except"
		- NEIGH  = { except , IndexError , }
		- PARENT = { }
		- CHILD  = { second_leaf , }
		- PRED   = { second_leaf , self , leaves , }
		- SUCC   = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }

477 :	"IndexError"
		- NEIGH  = { except , IndexError , }
		- PARENT = { }
		- CHILD  = { second_leaf , }
		- PRED   = { second_leaf , self , leaves , }
		- SUCC   = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }

478 :	"second_leaf"
		- NEIGH  = { second_leaf , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

479 :	"return"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"first_leaf"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"type"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"=="
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"token"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"NAME"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"or"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"first_leaf"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"value"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

480 :	"=="
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

482 :	"or"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

482 :	"first_leaf"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

482 :	"type"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

482 :	"=="
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

482 :	"token"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

482 :	"ASYNC"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

483 :	"or"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

483 :	"second_leaf"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

483 :	"is"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

483 :	"not"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

484 :	"or"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

484 :	"second_leaf"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

484 :	"type"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

484 :	"=="
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

484 :	"token"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

484 :	"NAME"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

485 :	"or"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

485 :	"second_leaf"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

485 :	"value"
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

485 :	"=="
		- NEIGH  = { return , first_leaf , type , == , token , NAME , or , first_leaf , value , == , or , first_leaf , type , == , token , ASYNC , or , second_leaf , is , not , or , second_leaf , type , == , token , NAME , or , second_leaf , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { }

489 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_def , self , }
		- SUCC   = { is_flow_control , self , }

490 :	"is_flow_control"
		- NEIGH  = { is_flow_control , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

490 :	"self"
		- NEIGH  = { is_flow_control , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

491 :	"return"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

492 :	"bool"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

492 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"type"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"token"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

493 :	"NAME"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

494 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

494 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

494 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

494 :	"value"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

494 :	"in"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

494 :	"FLOW_CONTROL"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , in , FLOW_CONTROL , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

497 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_flow_control , self , }
		- SUCC   = { is_yield , self , }

498 :	"is_yield"
		- NEIGH  = { is_yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { maybe_remove_trailing_comma , self , closing , }

498 :	"self"
		- NEIGH  = { is_yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { maybe_remove_trailing_comma , self , closing , }

499 :	"return"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

500 :	"bool"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

500 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"type"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"token"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"NAME"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

502 :	"or"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

502 :	"self"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

502 :	"leaves"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

502 :	"value"
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

502 :	"=="
		- NEIGH  = { return , bool , self , or , self , leaves , type , == , token , NAME , or , self , leaves , value , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

505 :	"maybe_remove_trailing_comma"
		- NEIGH  = { maybe_remove_trailing_comma , self , closing , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_yield , self , }
		- SUCC   = { maybe_increment_for_loop_variable , self , leaf , }

505 :	"self"
		- NEIGH  = { maybe_remove_trailing_comma , self , closing , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_yield , self , }
		- SUCC   = { maybe_increment_for_loop_variable , self , leaf , }

505 :	"closing"
		- NEIGH  = { maybe_remove_trailing_comma , self , closing , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_yield , self , }
		- SUCC   = { maybe_increment_for_loop_variable , self , leaf , }

506 :	"if"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

507 :	"self"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

507 :	"leaves"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"or"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"self"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"leaves"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"type"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"=="
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"token"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

508 :	"COMMA"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

509 :	"or"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

509 :	"closing"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

509 :	"type"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

509 :	"in"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

509 :	"CLOSING_BRACKETS"
		- NEIGH  = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , closing , type , == , token , RBRACE , }

511 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

513 :	"if"
		- NEIGH  = { if , closing , type , == , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , closing , type , == , token , RSQB , }

513 :	"closing"
		- NEIGH  = { if , closing , type , == , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , closing , type , == , token , RSQB , }

513 :	"type"
		- NEIGH  = { if , closing , type , == , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , closing , type , == , token , RSQB , }

513 :	"=="
		- NEIGH  = { if , closing , type , == , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , closing , type , == , token , RSQB , }

513 :	"token"
		- NEIGH  = { if , closing , type , == , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , closing , type , == , token , RSQB , }

513 :	"RBRACE"
		- NEIGH  = { if , closing , type , == , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { if , self , leaves , or , self , leaves , type , == , token , COMMA , or , closing , type , in , CLOSING_BRACKETS , }
		- SUCC   = { if , closing , type , == , token , RSQB , }

514 :	"self"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , closing , type , == , token , RBRACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

514 :	"leaves"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , closing , type , == , token , RBRACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

514 :	"pop"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , closing , type , == , token , RBRACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

515 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , closing , type , == , token , RBRACE , }
		- CHILD  = { }
		- PRED   = { self , leaves , pop , }
		- SUCC   = { }

517 :	"if"
		- NEIGH  = { if , closing , type , == , token , RSQB , }
		- PARENT = { }
		- CHILD  = { comma , self , leaves , if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PRED   = { if , closing , type , == , token , RBRACE , }
		- SUCC   = { depth , closing , bracket_depth , + , }

517 :	"closing"
		- NEIGH  = { if , closing , type , == , token , RSQB , }
		- PARENT = { }
		- CHILD  = { comma , self , leaves , if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PRED   = { if , closing , type , == , token , RBRACE , }
		- SUCC   = { depth , closing , bracket_depth , + , }

517 :	"type"
		- NEIGH  = { if , closing , type , == , token , RSQB , }
		- PARENT = { }
		- CHILD  = { comma , self , leaves , if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PRED   = { if , closing , type , == , token , RBRACE , }
		- SUCC   = { depth , closing , bracket_depth , + , }

517 :	"=="
		- NEIGH  = { if , closing , type , == , token , RSQB , }
		- PARENT = { }
		- CHILD  = { comma , self , leaves , if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PRED   = { if , closing , type , == , token , RBRACE , }
		- SUCC   = { depth , closing , bracket_depth , + , }

517 :	"token"
		- NEIGH  = { if , closing , type , == , token , RSQB , }
		- PARENT = { }
		- CHILD  = { comma , self , leaves , if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PRED   = { if , closing , type , == , token , RBRACE , }
		- SUCC   = { depth , closing , bracket_depth , + , }

517 :	"RSQB"
		- NEIGH  = { if , closing , type , == , token , RSQB , }
		- PARENT = { }
		- CHILD  = { comma , self , leaves , if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PRED   = { if , closing , type , == , token , RBRACE , }
		- SUCC   = { depth , closing , bracket_depth , + , }

518 :	"comma"
		- NEIGH  = { comma , self , leaves , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }

518 :	"self"
		- NEIGH  = { comma , self , leaves , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }

518 :	"leaves"
		- NEIGH  = { comma , self , leaves , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }

519 :	"if"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"comma"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"parent"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"or"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"comma"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"parent"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"type"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"=="
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"syms"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

519 :	"listmaker"
		- NEIGH  = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- PARENT = { if , closing , type , == , token , RSQB , }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { comma , self , leaves , }
		- SUCC   = { }

520 :	"self"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

520 :	"leaves"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

520 :	"pop"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

521 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , comma , parent , or , comma , parent , type , == , syms , listmaker , }
		- CHILD  = { }
		- PRED   = { self , leaves , pop , }
		- SUCC   = { }

526 :	"depth"
		- NEIGH  = { depth , closing , bracket_depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , closing , type , == , token , RSQB , }
		- SUCC   = { commas , }

526 :	"closing"
		- NEIGH  = { depth , closing , bracket_depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , closing , type , == , token , RSQB , }
		- SUCC   = { commas , }

526 :	"bracket_depth"
		- NEIGH  = { depth , closing , bracket_depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , closing , type , == , token , RSQB , }
		- SUCC   = { commas , }

526 :	"+"
		- NEIGH  = { depth , closing , bracket_depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , closing , type , == , token , RSQB , }
		- SUCC   = { commas , }

527 :	"commas"
		- NEIGH  = { commas , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , closing , bracket_depth , + , }
		- SUCC   = { opening , closing , opening_bracket , }

528 :	"opening"
		- NEIGH  = { opening , closing , opening_bracket , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { commas , }
		- SUCC   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }

528 :	"closing"
		- NEIGH  = { opening , closing , opening_bracket , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { commas , }
		- SUCC   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }

528 :	"opening_bracket"
		- NEIGH  = { opening , closing , opening_bracket , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { commas , }
		- SUCC   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }

529 :	"for"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

529 :	"tuple"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

529 :	"_opening_index"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

529 :	"leaf"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

529 :	"enumerate"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

529 :	"self"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

529 :	"leaves"
		- NEIGH  = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , opening , return , }
		- PRED   = { opening , closing , opening_bracket , }
		- SUCC   = { for , leaf , self , leaves , _opening_index , + , }

530 :	"if"
		- NEIGH  = { if , leaf , is , opening , }
		- PARENT = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { return , }

530 :	"leaf"
		- NEIGH  = { if , leaf , is , opening , }
		- PARENT = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { return , }

530 :	"is"
		- NEIGH  = { if , leaf , is , opening , }
		- PARENT = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { return , }

530 :	"opening"
		- NEIGH  = { if , leaf , is , opening , }
		- PARENT = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { return , }

531 :	"break"
		- NEIGH  = { break , }
		- PARENT = { if , leaf , is , opening , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

534 :	"return"
		- NEIGH  = { return , }
		- PARENT = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- CHILD  = { }
		- PRED   = { if , leaf , is , opening , }
		- SUCC   = { }

536 :	"for"
		- NEIGH  = { for , leaf , self , leaves , _opening_index , + , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , closing , bracket_depth , leaf , bracket_depth , if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PRED   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- SUCC   = { if , commas , > , }

536 :	"leaf"
		- NEIGH  = { for , leaf , self , leaves , _opening_index , + , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , closing , bracket_depth , leaf , bracket_depth , if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PRED   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- SUCC   = { if , commas , > , }

536 :	"self"
		- NEIGH  = { for , leaf , self , leaves , _opening_index , + , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , closing , bracket_depth , leaf , bracket_depth , if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PRED   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- SUCC   = { if , commas , > , }

536 :	"leaves"
		- NEIGH  = { for , leaf , self , leaves , _opening_index , + , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , closing , bracket_depth , leaf , bracket_depth , if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PRED   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- SUCC   = { if , commas , > , }

536 :	"_opening_index"
		- NEIGH  = { for , leaf , self , leaves , _opening_index , + , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , closing , bracket_depth , leaf , bracket_depth , if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PRED   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- SUCC   = { if , commas , > , }

536 :	"+"
		- NEIGH  = { for , leaf , self , leaves , _opening_index , + , }
		- PARENT = { }
		- CHILD  = { if , leaf , is , closing , bracket_depth , leaf , bracket_depth , if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PRED   = { for , tuple , _opening_index , leaf , enumerate , self , leaves , }
		- SUCC   = { if , commas , > , }

537 :	"if"
		- NEIGH  = { if , leaf , is , closing , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { bracket_depth , leaf , bracket_depth , }

537 :	"leaf"
		- NEIGH  = { if , leaf , is , closing , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { bracket_depth , leaf , bracket_depth , }

537 :	"is"
		- NEIGH  = { if , leaf , is , closing , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { bracket_depth , leaf , bracket_depth , }

537 :	"closing"
		- NEIGH  = { if , leaf , is , closing , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { break , }
		- PRED   = { }
		- SUCC   = { bracket_depth , leaf , bracket_depth , }

538 :	"break"
		- NEIGH  = { break , }
		- PARENT = { if , leaf , is , closing , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

540 :	"bracket_depth"
		- NEIGH  = { bracket_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { }
		- PRED   = { if , leaf , is , closing , }
		- SUCC   = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }

540 :	"leaf"
		- NEIGH  = { bracket_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { }
		- PRED   = { if , leaf , is , closing , }
		- SUCC   = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }

540 :	"bracket_depth"
		- NEIGH  = { bracket_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { }
		- PRED   = { if , leaf , is , closing , }
		- SUCC   = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }

541 :	"if"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"bracket_depth"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"=="
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"depth"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"or"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"leaf"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"type"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"=="
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"token"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

541 :	"COMMA"
		- NEIGH  = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- PARENT = { for , leaf , self , leaves , _opening_index , + , }
		- CHILD  = { commas , += , if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PRED   = { bracket_depth , leaf , bracket_depth , }
		- SUCC   = { }

542 :	"commas"
		- NEIGH  = { commas , += , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }

542 :	"+="
		- NEIGH  = { commas , += , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }

543 :	"if"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"leaf"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"parent"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"or"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"leaf"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"parent"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"type"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"=="
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"syms"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

543 :	"arglist"
		- NEIGH  = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- PARENT = { if , bracket_depth , == , depth , or , leaf , type , == , token , COMMA , }
		- CHILD  = { commas , += , break , }
		- PRED   = { commas , += , }
		- SUCC   = { }

544 :	"commas"
		- NEIGH  = { commas , += , }
		- PARENT = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

544 :	"+="
		- NEIGH  = { commas , += , }
		- PARENT = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { break , }

545 :	"break"
		- NEIGH  = { break , }
		- PARENT = { if , leaf , parent , or , leaf , parent , type , == , syms , arglist , }
		- CHILD  = { }
		- PRED   = { commas , += , }
		- SUCC   = { }

547 :	"if"
		- NEIGH  = { if , commas , > , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { for , leaf , self , leaves , _opening_index , + , }
		- SUCC   = { return , }

547 :	"commas"
		- NEIGH  = { if , commas , > , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { for , leaf , self , leaves , _opening_index , + , }
		- SUCC   = { return , }

547 :	">"
		- NEIGH  = { if , commas , > , }
		- PARENT = { }
		- CHILD  = { self , leaves , pop , return , }
		- PRED   = { for , leaf , self , leaves , _opening_index , + , }
		- SUCC   = { return , }

548 :	"self"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , commas , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

548 :	"leaves"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , commas , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

548 :	"pop"
		- NEIGH  = { self , leaves , pop , }
		- PARENT = { if , commas , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

549 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , commas , > , }
		- CHILD  = { }
		- PRED   = { self , leaves , pop , }
		- SUCC   = { }

551 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , commas , > , }
		- SUCC   = { }

553 :	"maybe_increment_for_loop_variable"
		- NEIGH  = { maybe_increment_for_loop_variable , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_remove_trailing_comma , self , closing , }
		- SUCC   = { maybe_decrement_after_for_loop_variable , self , leaf , }

553 :	"self"
		- NEIGH  = { maybe_increment_for_loop_variable , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_remove_trailing_comma , self , closing , }
		- SUCC   = { maybe_decrement_after_for_loop_variable , self , leaf , }

553 :	"leaf"
		- NEIGH  = { maybe_increment_for_loop_variable , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_remove_trailing_comma , self , closing , }
		- SUCC   = { maybe_decrement_after_for_loop_variable , self , leaf , }

559 :	"if"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"type"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"token"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"NAME"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"or"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"value"
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

559 :	"=="
		- NEIGH  = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , has_for , self , bracket_tracker , depth , += , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

560 :	"self"
		- NEIGH  = { self , has_for , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , bracket_tracker , depth , += , }

560 :	"has_for"
		- NEIGH  = { self , has_for , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , bracket_tracker , depth , += , }

561 :	"self"
		- NEIGH  = { self , bracket_tracker , depth , += , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , has_for , }
		- SUCC   = { self , _for_loop_variable , }

561 :	"bracket_tracker"
		- NEIGH  = { self , bracket_tracker , depth , += , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , has_for , }
		- SUCC   = { self , _for_loop_variable , }

561 :	"depth"
		- NEIGH  = { self , bracket_tracker , depth , += , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , has_for , }
		- SUCC   = { self , _for_loop_variable , }

561 :	"+="
		- NEIGH  = { self , bracket_tracker , depth , += , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , has_for , }
		- SUCC   = { self , _for_loop_variable , }

562 :	"self"
		- NEIGH  = { self , _for_loop_variable , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , depth , += , }
		- SUCC   = { return , }

562 :	"_for_loop_variable"
		- NEIGH  = { self , _for_loop_variable , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , depth , += , }
		- SUCC   = { return , }

563 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , _for_loop_variable , }
		- SUCC   = { }

565 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , == , token , NAME , or , leaf , value , == , }
		- SUCC   = { }

567 :	"maybe_decrement_after_for_loop_variable"
		- NEIGH  = { maybe_decrement_after_for_loop_variable , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_increment_for_loop_variable , self , leaf , }
		- SUCC   = { maybe_adapt_standalone_comment , self , comment , }

567 :	"self"
		- NEIGH  = { maybe_decrement_after_for_loop_variable , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_increment_for_loop_variable , self , leaf , }
		- SUCC   = { maybe_adapt_standalone_comment , self , comment , }

567 :	"leaf"
		- NEIGH  = { maybe_decrement_after_for_loop_variable , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_increment_for_loop_variable , self , leaf , }
		- SUCC   = { maybe_adapt_standalone_comment , self , comment , }

569 :	"if"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"self"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"_for_loop_variable"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"or"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"leaf"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"type"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"=="
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"token"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"NAME"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"or"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"leaf"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"value"
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

569 :	"=="
		- NEIGH  = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- PARENT = { }
		- CHILD  = { self , bracket_tracker , depth , -= , self , _for_loop_variable , return , }
		- PRED   = { }
		- SUCC   = { return , }

570 :	"self"
		- NEIGH  = { self , bracket_tracker , depth , -= , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , _for_loop_variable , }

570 :	"bracket_tracker"
		- NEIGH  = { self , bracket_tracker , depth , -= , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , _for_loop_variable , }

570 :	"depth"
		- NEIGH  = { self , bracket_tracker , depth , -= , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , _for_loop_variable , }

570 :	"-="
		- NEIGH  = { self , bracket_tracker , depth , -= , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , _for_loop_variable , }

571 :	"self"
		- NEIGH  = { self , _for_loop_variable , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , depth , -= , }
		- SUCC   = { return , }

571 :	"_for_loop_variable"
		- NEIGH  = { self , _for_loop_variable , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , bracket_tracker , depth , -= , }
		- SUCC   = { return , }

572 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- CHILD  = { }
		- PRED   = { self , _for_loop_variable , }
		- SUCC   = { }

574 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , _for_loop_variable , or , leaf , type , == , token , NAME , or , leaf , value , == , }
		- SUCC   = { }

576 :	"maybe_adapt_standalone_comment"
		- NEIGH  = { maybe_adapt_standalone_comment , self , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_decrement_after_for_loop_variable , self , leaf , }
		- SUCC   = { append_comment , self , comment , }

576 :	"self"
		- NEIGH  = { maybe_adapt_standalone_comment , self , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_decrement_after_for_loop_variable , self , leaf , }
		- SUCC   = { append_comment , self , comment , }

576 :	"comment"
		- NEIGH  = { maybe_adapt_standalone_comment , self , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_decrement_after_for_loop_variable , self , leaf , }
		- SUCC   = { append_comment , self , comment , }

585 :	"if"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

586 :	"comment"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

586 :	"type"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

586 :	"=="
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

586 :	"STANDALONE_COMMENT"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

587 :	"or"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

587 :	"self"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

587 :	"bracket_tracker"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

587 :	"any_open_brackets"
		- NEIGH  = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { comment , type , token , COMMENT , }

589 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

591 :	"comment"
		- NEIGH  = { comment , type , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- SUCC   = { comment , prefix , + , * , self , depth , + , }

591 :	"type"
		- NEIGH  = { comment , type , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- SUCC   = { comment , prefix , + , * , self , depth , + , }

591 :	"token"
		- NEIGH  = { comment , type , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- SUCC   = { comment , prefix , + , * , self , depth , + , }

591 :	"COMMENT"
		- NEIGH  = { comment , type , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , comment , type , == , STANDALONE_COMMENT , or , self , bracket_tracker , any_open_brackets , }
		- SUCC   = { comment , prefix , + , * , self , depth , + , }

592 :	"comment"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

592 :	"prefix"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

592 :	"+"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

592 :	"*"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

592 :	"self"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

592 :	"depth"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

592 :	"+"
		- NEIGH  = { comment , prefix , + , * , self , depth , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , type , token , COMMENT , }
		- SUCC   = { return , self , append_comment , comment , }

593 :	"return"
		- NEIGH  = { return , self , append_comment , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , prefix , + , * , self , depth , + , }
		- SUCC   = { }

593 :	"self"
		- NEIGH  = { return , self , append_comment , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , prefix , + , * , self , depth , + , }
		- SUCC   = { }

593 :	"append_comment"
		- NEIGH  = { return , self , append_comment , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , prefix , + , * , self , depth , + , }
		- SUCC   = { }

593 :	"comment"
		- NEIGH  = { return , self , append_comment , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { comment , prefix , + , * , self , depth , + , }
		- SUCC   = { }

595 :	"append_comment"
		- NEIGH  = { append_comment , self , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_adapt_standalone_comment , self , comment , }
		- SUCC   = { last_non_delimiter , self , }

595 :	"self"
		- NEIGH  = { append_comment , self , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_adapt_standalone_comment , self , comment , }
		- SUCC   = { last_non_delimiter , self , }

595 :	"comment"
		- NEIGH  = { append_comment , self , comment , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_adapt_standalone_comment , self , comment , }
		- SUCC   = { last_non_delimiter , self , }

596 :	"if"
		- NEIGH  = { if , comment , type , != , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { try , }

596 :	"comment"
		- NEIGH  = { if , comment , type , != , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { try , }

596 :	"type"
		- NEIGH  = { if , comment , type , != , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { try , }

596 :	"!="
		- NEIGH  = { if , comment , type , != , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { try , }

596 :	"token"
		- NEIGH  = { if , comment , type , != , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { try , }

596 :	"COMMENT"
		- NEIGH  = { if , comment , type , != , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { try , }

597 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , comment , type , != , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

599 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , comment , type , != , token , COMMENT , }
		- SUCC   = { after , id , self , last_non_delimiter , }

600 :	"after"
		- NEIGH  = { after , id , self , last_non_delimiter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , LookupError , }

600 :	"id"
		- NEIGH  = { after , id , self , last_non_delimiter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , LookupError , }

600 :	"self"
		- NEIGH  = { after , id , self , last_non_delimiter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , LookupError , }

600 :	"last_non_delimiter"
		- NEIGH  = { after , id , self , last_non_delimiter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , LookupError , }

601 :	"except"
		- NEIGH  = { except , LookupError , }
		- PARENT = { }
		- CHILD  = { comment , type , STANDALONE_COMMENT , comment , prefix , return , if , after , in , self , comments , return , }
		- PRED   = { after , id , self , last_non_delimiter , }
		- SUCC   = { }

601 :	"LookupError"
		- NEIGH  = { except , LookupError , }
		- PARENT = { }
		- CHILD  = { comment , type , STANDALONE_COMMENT , comment , prefix , return , if , after , in , self , comments , return , }
		- PRED   = { after , id , self , last_non_delimiter , }
		- SUCC   = { }

602 :	"comment"
		- NEIGH  = { comment , type , STANDALONE_COMMENT , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment , prefix , }

602 :	"type"
		- NEIGH  = { comment , type , STANDALONE_COMMENT , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment , prefix , }

602 :	"STANDALONE_COMMENT"
		- NEIGH  = { comment , type , STANDALONE_COMMENT , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment , prefix , }

603 :	"comment"
		- NEIGH  = { comment , prefix , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { comment , type , STANDALONE_COMMENT , }
		- SUCC   = { return , }

603 :	"prefix"
		- NEIGH  = { comment , prefix , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { comment , type , STANDALONE_COMMENT , }
		- SUCC   = { return , }

604 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { comment , prefix , }
		- SUCC   = { if , after , in , self , comments , }

607 :	"if"
		- NEIGH  = { if , after , in , self , comments , }
		- PARENT = { except , LookupError , }
		- CHILD  = { self , comments , after , value , += , str , comment , self , comments , after , comment , }
		- PRED   = { return , }
		- SUCC   = { return , }

607 :	"after"
		- NEIGH  = { if , after , in , self , comments , }
		- PARENT = { except , LookupError , }
		- CHILD  = { self , comments , after , value , += , str , comment , self , comments , after , comment , }
		- PRED   = { return , }
		- SUCC   = { return , }

607 :	"in"
		- NEIGH  = { if , after , in , self , comments , }
		- PARENT = { except , LookupError , }
		- CHILD  = { self , comments , after , value , += , str , comment , self , comments , after , comment , }
		- PRED   = { return , }
		- SUCC   = { return , }

607 :	"self"
		- NEIGH  = { if , after , in , self , comments , }
		- PARENT = { except , LookupError , }
		- CHILD  = { self , comments , after , value , += , str , comment , self , comments , after , comment , }
		- PRED   = { return , }
		- SUCC   = { return , }

607 :	"comments"
		- NEIGH  = { if , after , in , self , comments , }
		- PARENT = { except , LookupError , }
		- CHILD  = { self , comments , after , value , += , str , comment , self , comments , after , comment , }
		- PRED   = { return , }
		- SUCC   = { return , }

608 :	"self"
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

608 :	"comments"
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

608 :	"after"
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

608 :	"value"
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

608 :	"+="
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

608 :	"str"
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

608 :	"comment"
		- NEIGH  = { self , comments , after , value , += , str , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , comments , after , comment , }

610 :	"self"
		- NEIGH  = { self , comments , after , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { self , comments , after , value , += , str , comment , }
		- SUCC   = { }

610 :	"comments"
		- NEIGH  = { self , comments , after , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { self , comments , after , value , += , str , comment , }
		- SUCC   = { }

610 :	"after"
		- NEIGH  = { self , comments , after , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { self , comments , after , value , += , str , comment , }
		- SUCC   = { }

610 :	"comment"
		- NEIGH  = { self , comments , after , comment , }
		- PARENT = { if , after , in , self , comments , }
		- CHILD  = { }
		- PRED   = { self , comments , after , value , += , str , comment , }
		- SUCC   = { }

611 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , LookupError , }
		- CHILD  = { }
		- PRED   = { if , after , in , self , comments , }
		- SUCC   = { }

613 :	"last_non_delimiter"
		- NEIGH  = { last_non_delimiter , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { append_comment , self , comment , }
		- SUCC   = { __str__ , self , }

613 :	"self"
		- NEIGH  = { last_non_delimiter , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { append_comment , self , comment , }
		- SUCC   = { __str__ , self , }

614 :	"for"
		- NEIGH  = { for , i , range , len , self , leaves , }
		- PARENT = { }
		- CHILD  = { last , self , leaves , i , - , if , is_delimiter , last , }
		- PRED   = { }
		- SUCC   = { raise , LookupError , }

614 :	"i"
		- NEIGH  = { for , i , range , len , self , leaves , }
		- PARENT = { }
		- CHILD  = { last , self , leaves , i , - , if , is_delimiter , last , }
		- PRED   = { }
		- SUCC   = { raise , LookupError , }

614 :	"range"
		- NEIGH  = { for , i , range , len , self , leaves , }
		- PARENT = { }
		- CHILD  = { last , self , leaves , i , - , if , is_delimiter , last , }
		- PRED   = { }
		- SUCC   = { raise , LookupError , }

614 :	"len"
		- NEIGH  = { for , i , range , len , self , leaves , }
		- PARENT = { }
		- CHILD  = { last , self , leaves , i , - , if , is_delimiter , last , }
		- PRED   = { }
		- SUCC   = { raise , LookupError , }

614 :	"self"
		- NEIGH  = { for , i , range , len , self , leaves , }
		- PARENT = { }
		- CHILD  = { last , self , leaves , i , - , if , is_delimiter , last , }
		- PRED   = { }
		- SUCC   = { raise , LookupError , }

614 :	"leaves"
		- NEIGH  = { for , i , range , len , self , leaves , }
		- PARENT = { }
		- CHILD  = { last , self , leaves , i , - , if , is_delimiter , last , }
		- PRED   = { }
		- SUCC   = { raise , LookupError , }

615 :	"last"
		- NEIGH  = { last , self , leaves , i , - , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_delimiter , last , }

615 :	"self"
		- NEIGH  = { last , self , leaves , i , - , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_delimiter , last , }

615 :	"leaves"
		- NEIGH  = { last , self , leaves , i , - , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_delimiter , last , }

615 :	"i"
		- NEIGH  = { last , self , leaves , i , - , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_delimiter , last , }

615 :	"-"
		- NEIGH  = { last , self , leaves , i , - , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_delimiter , last , }

616 :	"if"
		- NEIGH  = { if , is_delimiter , last , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { return , last , }
		- PRED   = { last , self , leaves , i , - , }
		- SUCC   = { }

616 :	"is_delimiter"
		- NEIGH  = { if , is_delimiter , last , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { return , last , }
		- PRED   = { last , self , leaves , i , - , }
		- SUCC   = { }

616 :	"last"
		- NEIGH  = { if , is_delimiter , last , }
		- PARENT = { for , i , range , len , self , leaves , }
		- CHILD  = { return , last , }
		- PRED   = { last , self , leaves , i , - , }
		- SUCC   = { }

617 :	"return"
		- NEIGH  = { return , last , }
		- PARENT = { if , is_delimiter , last , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

617 :	"last"
		- NEIGH  = { return , last , }
		- PARENT = { if , is_delimiter , last , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

619 :	"raise"
		- NEIGH  = { raise , LookupError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , i , range , len , self , leaves , }
		- SUCC   = { }

619 :	"LookupError"
		- NEIGH  = { raise , LookupError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , i , range , len , self , leaves , }
		- SUCC   = { }

621 :	"__str__"
		- NEIGH  = { __str__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { last_non_delimiter , self , }
		- SUCC   = { __bool__ , self , }

621 :	"self"
		- NEIGH  = { __str__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { last_non_delimiter , self , }
		- SUCC   = { __bool__ , self , }

622 :	"if"
		- NEIGH  = { if , self , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { indent , * , self , depth , }

622 :	"self"
		- NEIGH  = { if , self , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { indent , * , self , depth , }

623 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

625 :	"indent"
		- NEIGH  = { indent , * , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , }
		- SUCC   = { leaves , iter , self , leaves , }

625 :	"*"
		- NEIGH  = { indent , * , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , }
		- SUCC   = { leaves , iter , self , leaves , }

625 :	"self"
		- NEIGH  = { indent , * , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , }
		- SUCC   = { leaves , iter , self , leaves , }

625 :	"depth"
		- NEIGH  = { indent , * , self , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , }
		- SUCC   = { leaves , iter , self , leaves , }

626 :	"leaves"
		- NEIGH  = { leaves , iter , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { indent , * , self , depth , }
		- SUCC   = { first , next , leaves , }

626 :	"iter"
		- NEIGH  = { leaves , iter , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { indent , * , self , depth , }
		- SUCC   = { first , next , leaves , }

626 :	"self"
		- NEIGH  = { leaves , iter , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { indent , * , self , depth , }
		- SUCC   = { first , next , leaves , }

626 :	"leaves"
		- NEIGH  = { leaves , iter , self , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { indent , * , self , depth , }
		- SUCC   = { first , next , leaves , }

627 :	"first"
		- NEIGH  = { first , next , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , iter , self , leaves , }
		- SUCC   = { res , first , prefix , indent , first , value , }

627 :	"next"
		- NEIGH  = { first , next , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , iter , self , leaves , }
		- SUCC   = { res , first , prefix , indent , first , value , }

627 :	"leaves"
		- NEIGH  = { first , next , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , iter , self , leaves , }
		- SUCC   = { res , first , prefix , indent , first , value , }

628 :	"res"
		- NEIGH  = { res , first , prefix , indent , first , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { first , next , leaves , }
		- SUCC   = { for , leaf , leaves , }

628 :	"first"
		- NEIGH  = { res , first , prefix , indent , first , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { first , next , leaves , }
		- SUCC   = { for , leaf , leaves , }

628 :	"prefix"
		- NEIGH  = { res , first , prefix , indent , first , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { first , next , leaves , }
		- SUCC   = { for , leaf , leaves , }

628 :	"indent"
		- NEIGH  = { res , first , prefix , indent , first , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { first , next , leaves , }
		- SUCC   = { for , leaf , leaves , }

628 :	"first"
		- NEIGH  = { res , first , prefix , indent , first , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { first , next , leaves , }
		- SUCC   = { for , leaf , leaves , }

628 :	"value"
		- NEIGH  = { res , first , prefix , indent , first , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { first , next , leaves , }
		- SUCC   = { for , leaf , leaves , }

629 :	"for"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { }
		- CHILD  = { res , += , str , leaf , }
		- PRED   = { res , first , prefix , indent , first , value , }
		- SUCC   = { for , comment , self , comments , values , }

629 :	"leaf"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { }
		- CHILD  = { res , += , str , leaf , }
		- PRED   = { res , first , prefix , indent , first , value , }
		- SUCC   = { for , comment , self , comments , values , }

629 :	"leaves"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { }
		- CHILD  = { res , += , str , leaf , }
		- PRED   = { res , first , prefix , indent , first , value , }
		- SUCC   = { for , comment , self , comments , values , }

630 :	"res"
		- NEIGH  = { res , += , str , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

630 :	"+="
		- NEIGH  = { res , += , str , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

630 :	"str"
		- NEIGH  = { res , += , str , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

630 :	"leaf"
		- NEIGH  = { res , += , str , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

631 :	"for"
		- NEIGH  = { for , comment , self , comments , values , }
		- PARENT = { }
		- CHILD  = { res , += , str , comment , }
		- PRED   = { for , leaf , leaves , }
		- SUCC   = { return , res , + , }

631 :	"comment"
		- NEIGH  = { for , comment , self , comments , values , }
		- PARENT = { }
		- CHILD  = { res , += , str , comment , }
		- PRED   = { for , leaf , leaves , }
		- SUCC   = { return , res , + , }

631 :	"self"
		- NEIGH  = { for , comment , self , comments , values , }
		- PARENT = { }
		- CHILD  = { res , += , str , comment , }
		- PRED   = { for , leaf , leaves , }
		- SUCC   = { return , res , + , }

631 :	"comments"
		- NEIGH  = { for , comment , self , comments , values , }
		- PARENT = { }
		- CHILD  = { res , += , str , comment , }
		- PRED   = { for , leaf , leaves , }
		- SUCC   = { return , res , + , }

631 :	"values"
		- NEIGH  = { for , comment , self , comments , values , }
		- PARENT = { }
		- CHILD  = { res , += , str , comment , }
		- PRED   = { for , leaf , leaves , }
		- SUCC   = { return , res , + , }

632 :	"res"
		- NEIGH  = { res , += , str , comment , }
		- PARENT = { for , comment , self , comments , values , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

632 :	"+="
		- NEIGH  = { res , += , str , comment , }
		- PARENT = { for , comment , self , comments , values , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

632 :	"str"
		- NEIGH  = { res , += , str , comment , }
		- PARENT = { for , comment , self , comments , values , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

632 :	"comment"
		- NEIGH  = { res , += , str , comment , }
		- PARENT = { for , comment , self , comments , values , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

633 :	"return"
		- NEIGH  = { return , res , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , comment , self , comments , values , }
		- SUCC   = { }

633 :	"res"
		- NEIGH  = { return , res , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , comment , self , comments , values , }
		- SUCC   = { }

633 :	"+"
		- NEIGH  = { return , res , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , comment , self , comments , values , }
		- SUCC   = { }

635 :	"__bool__"
		- NEIGH  = { __bool__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __str__ , self , }
		- SUCC   = { }

635 :	"self"
		- NEIGH  = { __bool__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __str__ , self , }
		- SUCC   = { }

636 :	"return"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

636 :	"bool"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

636 :	"self"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

636 :	"leaves"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

636 :	"or"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

636 :	"self"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

636 :	"comments"
		- NEIGH  = { return , bool , self , leaves , or , self , comments , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

640 :	"EmptyLineTracker"
		- NEIGH  = { EmptyLineTracker , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Line , }
		- SUCC   = { LineGenerator , }

648 :	"previous_line"
		- NEIGH  = { previous_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { previous_after , }

649 :	"previous_after"
		- NEIGH  = { previous_after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_line , }
		- SUCC   = { previous_defs , Factory , list , }

650 :	"previous_defs"
		- NEIGH  = { previous_defs , Factory , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_after , }
		- SUCC   = { maybe_empty_lines , self , current_line , }

650 :	"Factory"
		- NEIGH  = { previous_defs , Factory , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_after , }
		- SUCC   = { maybe_empty_lines , self , current_line , }

650 :	"list"
		- NEIGH  = { previous_defs , Factory , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_after , }
		- SUCC   = { maybe_empty_lines , self , current_line , }

652 :	"maybe_empty_lines"
		- NEIGH  = { maybe_empty_lines , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_defs , Factory , list , }
		- SUCC   = { _maybe_empty_lines , self , current_line , }

652 :	"self"
		- NEIGH  = { maybe_empty_lines , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_defs , Factory , list , }
		- SUCC   = { _maybe_empty_lines , self , current_line , }

652 :	"current_line"
		- NEIGH  = { maybe_empty_lines , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { previous_defs , Factory , list , }
		- SUCC   = { _maybe_empty_lines , self , current_line , }

659 :	"tuple"
		- NEIGH  = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , -= , self , previous_after , }

659 :	"before"
		- NEIGH  = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , -= , self , previous_after , }

659 :	"after"
		- NEIGH  = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , -= , self , previous_after , }

659 :	"self"
		- NEIGH  = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , -= , self , previous_after , }

659 :	"_maybe_empty_lines"
		- NEIGH  = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , -= , self , previous_after , }

659 :	"current_line"
		- NEIGH  = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , -= , self , previous_after , }

660 :	"before"
		- NEIGH  = { before , -= , self , previous_after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- SUCC   = { self , previous_after , after , }

660 :	"-="
		- NEIGH  = { before , -= , self , previous_after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- SUCC   = { self , previous_after , after , }

660 :	"self"
		- NEIGH  = { before , -= , self , previous_after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- SUCC   = { self , previous_after , after , }

660 :	"previous_after"
		- NEIGH  = { before , -= , self , previous_after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tuple , before , after , self , _maybe_empty_lines , current_line , }
		- SUCC   = { self , previous_after , after , }

661 :	"self"
		- NEIGH  = { self , previous_after , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { before , -= , self , previous_after , }
		- SUCC   = { self , previous_line , current_line , }

661 :	"previous_after"
		- NEIGH  = { self , previous_after , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { before , -= , self , previous_after , }
		- SUCC   = { self , previous_line , current_line , }

661 :	"after"
		- NEIGH  = { self , previous_after , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { before , -= , self , previous_after , }
		- SUCC   = { self , previous_line , current_line , }

662 :	"self"
		- NEIGH  = { self , previous_line , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_after , after , }
		- SUCC   = { return , tuple , before , after , }

662 :	"previous_line"
		- NEIGH  = { self , previous_line , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_after , after , }
		- SUCC   = { return , tuple , before , after , }

662 :	"current_line"
		- NEIGH  = { self , previous_line , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_after , after , }
		- SUCC   = { return , tuple , before , after , }

663 :	"return"
		- NEIGH  = { return , tuple , before , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_line , current_line , }
		- SUCC   = { }

663 :	"tuple"
		- NEIGH  = { return , tuple , before , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_line , current_line , }
		- SUCC   = { }

663 :	"before"
		- NEIGH  = { return , tuple , before , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_line , current_line , }
		- SUCC   = { }

663 :	"after"
		- NEIGH  = { return , tuple , before , after , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , previous_line , current_line , }
		- SUCC   = { }

665 :	"_maybe_empty_lines"
		- NEIGH  = { _maybe_empty_lines , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_empty_lines , self , current_line , }
		- SUCC   = { }

665 :	"self"
		- NEIGH  = { _maybe_empty_lines , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_empty_lines , self , current_line , }
		- SUCC   = { }

665 :	"current_line"
		- NEIGH  = { _maybe_empty_lines , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { maybe_empty_lines , self , current_line , }
		- SUCC   = { }

666 :	"max_allowed"
		- NEIGH  = { max_allowed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , current_line , is_comment , or , current_line , depth , == , }

667 :	"if"
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

667 :	"current_line"
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

667 :	"is_comment"
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

667 :	"or"
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

667 :	"current_line"
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

667 :	"depth"
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

667 :	"=="
		- NEIGH  = { if , current_line , is_comment , or , current_line , depth , == , }
		- PARENT = { }
		- CHILD  = { max_allowed , }
		- PRED   = { max_allowed , }
		- SUCC   = { if , current_line , leaves , }

668 :	"max_allowed"
		- NEIGH  = { max_allowed , }
		- PARENT = { if , current_line , is_comment , or , current_line , depth , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

669 :	"if"
		- NEIGH  = { if , current_line , leaves , }
		- PARENT = { }
		- CHILD  = { first_leaf , current_line , leaves , before , first_leaf , prefix , count , before , min , before , max , before , max_allowed , first_leaf , prefix , before , }
		- PRED   = { if , current_line , is_comment , or , current_line , depth , == , }
		- SUCC   = { depth , current_line , depth , }

669 :	"current_line"
		- NEIGH  = { if , current_line , leaves , }
		- PARENT = { }
		- CHILD  = { first_leaf , current_line , leaves , before , first_leaf , prefix , count , before , min , before , max , before , max_allowed , first_leaf , prefix , before , }
		- PRED   = { if , current_line , is_comment , or , current_line , depth , == , }
		- SUCC   = { depth , current_line , depth , }

669 :	"leaves"
		- NEIGH  = { if , current_line , leaves , }
		- PARENT = { }
		- CHILD  = { first_leaf , current_line , leaves , before , first_leaf , prefix , count , before , min , before , max , before , max_allowed , first_leaf , prefix , before , }
		- PRED   = { if , current_line , is_comment , or , current_line , depth , == , }
		- SUCC   = { depth , current_line , depth , }

671 :	"first_leaf"
		- NEIGH  = { first_leaf , current_line , leaves , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , first_leaf , prefix , count , }

671 :	"current_line"
		- NEIGH  = { first_leaf , current_line , leaves , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , first_leaf , prefix , count , }

671 :	"leaves"
		- NEIGH  = { first_leaf , current_line , leaves , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , first_leaf , prefix , count , }

672 :	"before"
		- NEIGH  = { before , first_leaf , prefix , count , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { first_leaf , current_line , leaves , }
		- SUCC   = { before , min , before , max , before , max_allowed , }

672 :	"first_leaf"
		- NEIGH  = { before , first_leaf , prefix , count , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { first_leaf , current_line , leaves , }
		- SUCC   = { before , min , before , max , before , max_allowed , }

672 :	"prefix"
		- NEIGH  = { before , first_leaf , prefix , count , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { first_leaf , current_line , leaves , }
		- SUCC   = { before , min , before , max , before , max_allowed , }

672 :	"count"
		- NEIGH  = { before , first_leaf , prefix , count , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { first_leaf , current_line , leaves , }
		- SUCC   = { before , min , before , max , before , max_allowed , }

673 :	"before"
		- NEIGH  = { before , min , before , max , before , max_allowed , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , first_leaf , prefix , count , }
		- SUCC   = { first_leaf , prefix , }

673 :	"min"
		- NEIGH  = { before , min , before , max , before , max_allowed , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , first_leaf , prefix , count , }
		- SUCC   = { first_leaf , prefix , }

673 :	"before"
		- NEIGH  = { before , min , before , max , before , max_allowed , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , first_leaf , prefix , count , }
		- SUCC   = { first_leaf , prefix , }

673 :	"max"
		- NEIGH  = { before , min , before , max , before , max_allowed , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , first_leaf , prefix , count , }
		- SUCC   = { first_leaf , prefix , }

673 :	"before"
		- NEIGH  = { before , min , before , max , before , max_allowed , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , first_leaf , prefix , count , }
		- SUCC   = { first_leaf , prefix , }

673 :	"max_allowed"
		- NEIGH  = { before , min , before , max , before , max_allowed , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , first_leaf , prefix , count , }
		- SUCC   = { first_leaf , prefix , }

674 :	"first_leaf"
		- NEIGH  = { first_leaf , prefix , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , min , before , max , before , max_allowed , }
		- SUCC   = { before , }

674 :	"prefix"
		- NEIGH  = { first_leaf , prefix , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { before , min , before , max , before , max_allowed , }
		- SUCC   = { before , }

676 :	"before"
		- NEIGH  = { before , }
		- PARENT = { if , current_line , leaves , }
		- CHILD  = { }
		- PRED   = { first_leaf , prefix , }
		- SUCC   = { }

677 :	"depth"
		- NEIGH  = { depth , current_line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , current_line , leaves , }
		- SUCC   = { while , self , previous_defs , or , self , previous_defs , >= , depth , }

677 :	"current_line"
		- NEIGH  = { depth , current_line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , current_line , leaves , }
		- SUCC   = { while , self , previous_defs , or , self , previous_defs , >= , depth , }

677 :	"depth"
		- NEIGH  = { depth , current_line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , current_line , leaves , }
		- SUCC   = { while , self , previous_defs , or , self , previous_defs , >= , depth , }

678 :	"while"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	"self"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	"previous_defs"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	"or"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	"self"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	"previous_defs"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	">="
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

678 :	"depth"
		- NEIGH  = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- PARENT = { }
		- CHILD  = { self , previous_defs , pop , before , if-exp , depth , else-exp , }
		- PRED   = { depth , current_line , depth , }
		- SUCC   = { is_decorator , current_line , is_decorator , }

679 :	"self"
		- NEIGH  = { self , previous_defs , pop , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , if-exp , depth , else-exp , }

679 :	"previous_defs"
		- NEIGH  = { self , previous_defs , pop , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , if-exp , depth , else-exp , }

679 :	"pop"
		- NEIGH  = { self , previous_defs , pop , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { before , if-exp , depth , else-exp , }

680 :	"before"
		- NEIGH  = { before , if-exp , depth , else-exp , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { self , previous_defs , pop , }
		- SUCC   = { }

680 :	"if-exp"
		- NEIGH  = { before , if-exp , depth , else-exp , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { self , previous_defs , pop , }
		- SUCC   = { }

680 :	"depth"
		- NEIGH  = { before , if-exp , depth , else-exp , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { self , previous_defs , pop , }
		- SUCC   = { }

680 :	"else-exp"
		- NEIGH  = { before , if-exp , depth , else-exp , }
		- PARENT = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- CHILD  = { }
		- PRED   = { self , previous_defs , pop , }
		- SUCC   = { }

681 :	"is_decorator"
		- NEIGH  = { is_decorator , current_line , is_decorator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- SUCC   = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }

681 :	"current_line"
		- NEIGH  = { is_decorator , current_line , is_decorator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- SUCC   = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }

681 :	"is_decorator"
		- NEIGH  = { is_decorator , current_line , is_decorator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , self , previous_defs , or , self , previous_defs , >= , depth , }
		- SUCC   = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }

682 :	"if"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"is_decorator"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"or"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"current_line"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"is_def"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"or"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"current_line"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

682 :	"is_class"
		- NEIGH  = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- PARENT = { }
		- CHILD  = { if , is_decorator , if , self , previous_line , is , if , self , previous_line , or , self , previous_line , is_decorator , newlines , if , current_line , depth , return , tuple , newlines , }
		- PRED   = { is_decorator , current_line , is_decorator , }
		- SUCC   = { if , current_line , is_flow_control , }

683 :	"if"
		- NEIGH  = { if , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { self , previous_defs , append , depth , }
		- PRED   = { }
		- SUCC   = { if , self , previous_line , is , }

683 :	"is_decorator"
		- NEIGH  = { if , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { self , previous_defs , append , depth , }
		- PRED   = { }
		- SUCC   = { if , self , previous_line , is , }

684 :	"self"
		- NEIGH  = { self , previous_defs , append , depth , }
		- PARENT = { if , is_decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

684 :	"previous_defs"
		- NEIGH  = { self , previous_defs , append , depth , }
		- PARENT = { if , is_decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

684 :	"append"
		- NEIGH  = { self , previous_defs , append , depth , }
		- PARENT = { if , is_decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

684 :	"depth"
		- NEIGH  = { self , previous_defs , append , depth , }
		- PARENT = { if , is_decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

685 :	"if"
		- NEIGH  = { if , self , previous_line , is , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , is_decorator , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_decorator , }

685 :	"self"
		- NEIGH  = { if , self , previous_line , is , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , is_decorator , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_decorator , }

685 :	"previous_line"
		- NEIGH  = { if , self , previous_line , is , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , is_decorator , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_decorator , }

685 :	"is"
		- NEIGH  = { if , self , previous_line , is , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , is_decorator , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_decorator , }

687 :	"return"
		- NEIGH  = { return , tuple , }
		- PARENT = { if , self , previous_line , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

687 :	"tuple"
		- NEIGH  = { return , tuple , }
		- PARENT = { if , self , previous_line , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

689 :	"if"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

689 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

689 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

689 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

689 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

689 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

689 :	"is_decorator"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { return , tuple , }
		- PRED   = { if , self , previous_line , is , }
		- SUCC   = { newlines , }

691 :	"return"
		- NEIGH  = { return , tuple , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

691 :	"tuple"
		- NEIGH  = { return , tuple , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

693 :	"newlines"
		- NEIGH  = { newlines , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_decorator , }
		- SUCC   = { if , current_line , depth , }

694 :	"if"
		- NEIGH  = { if , current_line , depth , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { newlines , -= , }
		- PRED   = { newlines , }
		- SUCC   = { return , tuple , newlines , }

694 :	"current_line"
		- NEIGH  = { if , current_line , depth , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { newlines , -= , }
		- PRED   = { newlines , }
		- SUCC   = { return , tuple , newlines , }

694 :	"depth"
		- NEIGH  = { if , current_line , depth , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { newlines , -= , }
		- PRED   = { newlines , }
		- SUCC   = { return , tuple , newlines , }

695 :	"newlines"
		- NEIGH  = { newlines , -= , }
		- PARENT = { if , current_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

695 :	"-="
		- NEIGH  = { newlines , -= , }
		- PARENT = { if , current_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

696 :	"return"
		- NEIGH  = { return , tuple , newlines , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { }
		- PRED   = { if , current_line , depth , }
		- SUCC   = { }

696 :	"tuple"
		- NEIGH  = { return , tuple , newlines , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { }
		- PRED   = { if , current_line , depth , }
		- SUCC   = { }

696 :	"newlines"
		- NEIGH  = { return , tuple , newlines , }
		- PARENT = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- CHILD  = { }
		- PRED   = { if , current_line , depth , }
		- SUCC   = { }

698 :	"if"
		- NEIGH  = { if , current_line , is_flow_control , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , }
		- PRED   = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }

698 :	"current_line"
		- NEIGH  = { if , current_line , is_flow_control , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , }
		- PRED   = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }

698 :	"is_flow_control"
		- NEIGH  = { if , current_line , is_flow_control , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , }
		- PRED   = { if , is_decorator , or , current_line , is_def , or , current_line , is_class , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }

699 :	"return"
		- NEIGH  = { return , tuple , before , }
		- PARENT = { if , current_line , is_flow_control , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

699 :	"tuple"
		- NEIGH  = { return , tuple , before , }
		- PARENT = { if , current_line , is_flow_control , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

699 :	"before"
		- NEIGH  = { return , tuple , before , }
		- PARENT = { if , current_line , is_flow_control , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

701 :	"if"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

702 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

702 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

703 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

703 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

703 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

703 :	"is_import"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

704 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

704 :	"current_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

704 :	"is_import"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

705 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

705 :	"depth"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

705 :	"=="
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

705 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

705 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

705 :	"depth"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , current_line , is_flow_control , }
		- SUCC   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }

707 :	"return"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

707 :	"tuple"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

707 :	"before"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

707 :	"or"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

709 :	"if"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

710 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

710 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

711 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

711 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

711 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

711 :	"is_yield"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"current_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"is_yield"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"or"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"depth"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"!="
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"self"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"previous_line"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

712 :	"depth"
		- NEIGH  = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- PARENT = { }
		- CHILD  = { return , tuple , before , or , }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_import , or , current_line , is_import , or , depth , == , self , previous_line , depth , }
		- SUCC   = { return , tuple , before , }

714 :	"return"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

714 :	"tuple"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

714 :	"before"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

714 :	"or"
		- NEIGH  = { return , tuple , before , or , }
		- PARENT = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

716 :	"return"
		- NEIGH  = { return , tuple , before , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- SUCC   = { }

716 :	"tuple"
		- NEIGH  = { return , tuple , before , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- SUCC   = { }

716 :	"before"
		- NEIGH  = { return , tuple , before , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , previous_line , or , self , previous_line , is_yield , or , current_line , is_yield , or , depth , != , self , previous_line , depth , }
		- SUCC   = { }

720 :	"LineGenerator"
		- NEIGH  = { LineGenerator , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { EmptyLineTracker , }
		- SUCC   = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }

726 :	"current_line"
		- NEIGH  = { current_line , Factory , Line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , self , indent , }

726 :	"Factory"
		- NEIGH  = { current_line , Factory , Line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , self , indent , }

726 :	"Line"
		- NEIGH  = { current_line , Factory , Line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { line , self , indent , }

728 :	"line"
		- NEIGH  = { line , self , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_line , Factory , Line , }
		- SUCC   = { visit_default , self , node , }

728 :	"self"
		- NEIGH  = { line , self , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_line , Factory , Line , }
		- SUCC   = { visit_default , self , node , }

728 :	"indent"
		- NEIGH  = { line , self , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_line , Factory , Line , }
		- SUCC   = { visit_default , self , node , }

736 :	"if"
		- NEIGH  = { if , self , current_line , }
		- PARENT = { }
		- CHILD  = { self , current_line , depth , += , indent , return , }
		- PRED   = { }
		- SUCC   = { complete_line , self , current_line , }

736 :	"self"
		- NEIGH  = { if , self , current_line , }
		- PARENT = { }
		- CHILD  = { self , current_line , depth , += , indent , return , }
		- PRED   = { }
		- SUCC   = { complete_line , self , current_line , }

736 :	"current_line"
		- NEIGH  = { if , self , current_line , }
		- PARENT = { }
		- CHILD  = { self , current_line , depth , += , indent , return , }
		- PRED   = { }
		- SUCC   = { complete_line , self , current_line , }

737 :	"self"
		- NEIGH  = { self , current_line , depth , += , indent , }
		- PARENT = { if , self , current_line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

737 :	"current_line"
		- NEIGH  = { self , current_line , depth , += , indent , }
		- PARENT = { if , self , current_line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

737 :	"depth"
		- NEIGH  = { self , current_line , depth , += , indent , }
		- PARENT = { if , self , current_line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

737 :	"+="
		- NEIGH  = { self , current_line , depth , += , indent , }
		- PARENT = { if , self , current_line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

737 :	"indent"
		- NEIGH  = { self , current_line , depth , += , indent , }
		- PARENT = { if , self , current_line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

738 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , current_line , }
		- CHILD  = { }
		- PRED   = { self , current_line , depth , += , indent , }
		- SUCC   = { }

740 :	"complete_line"
		- NEIGH  = { complete_line , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , current_line , }
		- SUCC   = { self , current_line , Line , depth , complete_line , depth , + , indent , }

740 :	"self"
		- NEIGH  = { complete_line , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , current_line , }
		- SUCC   = { self , current_line , Line , depth , complete_line , depth , + , indent , }

740 :	"current_line"
		- NEIGH  = { complete_line , self , current_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , current_line , }
		- SUCC   = { self , current_line , Line , depth , complete_line , depth , + , indent , }

741 :	"self"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"current_line"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"Line"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"depth"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"complete_line"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"depth"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"+"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

741 :	"indent"
		- NEIGH  = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { complete_line , self , current_line , }
		- SUCC   = { yield , complete_line , }

742 :	"yield"
		- NEIGH  = { yield , complete_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- SUCC   = { }

742 :	"complete_line"
		- NEIGH  = { yield , complete_line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , current_line , Line , depth , complete_line , depth , + , indent , }
		- SUCC   = { }

744 :	"visit_default"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { line , self , indent , }
		- SUCC   = { visit_INDENT , self , node , }

744 :	"self"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { line , self , indent , }
		- SUCC   = { visit_INDENT , self , node , }

744 :	"node"
		- NEIGH  = { visit_default , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { line , self , indent , }
		- SUCC   = { visit_INDENT , self , node , }

745 :	"if"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , for , comment , generate_comments , node , normalize_prefix , node , inside_brackets , any_open_brackets , if , node , type , not , in , WHITESPACE , }
		- PRED   = { }
		- SUCC   = { yield , from , super , visit_default , node , }

745 :	"isinstance"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , for , comment , generate_comments , node , normalize_prefix , node , inside_brackets , any_open_brackets , if , node , type , not , in , WHITESPACE , }
		- PRED   = { }
		- SUCC   = { yield , from , super , visit_default , node , }

745 :	"node"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , for , comment , generate_comments , node , normalize_prefix , node , inside_brackets , any_open_brackets , if , node , type , not , in , WHITESPACE , }
		- PRED   = { }
		- SUCC   = { yield , from , super , visit_default , node , }

745 :	"Leaf"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , for , comment , generate_comments , node , normalize_prefix , node , inside_brackets , any_open_brackets , if , node , type , not , in , WHITESPACE , }
		- PRED   = { }
		- SUCC   = { yield , from , super , visit_default , node , }

746 :	"any_open_brackets"
		- NEIGH  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , comment , generate_comments , node , }

746 :	"self"
		- NEIGH  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , comment , generate_comments , node , }

746 :	"current_line"
		- NEIGH  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , comment , generate_comments , node , }

746 :	"bracket_tracker"
		- NEIGH  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , comment , generate_comments , node , }

746 :	"any_open_brackets"
		- NEIGH  = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , comment , generate_comments , node , }

747 :	"for"
		- NEIGH  = { for , comment , generate_comments , node , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { if , any_open_brackets , }
		- PRED   = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- SUCC   = { normalize_prefix , node , inside_brackets , any_open_brackets , }

747 :	"comment"
		- NEIGH  = { for , comment , generate_comments , node , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { if , any_open_brackets , }
		- PRED   = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- SUCC   = { normalize_prefix , node , inside_brackets , any_open_brackets , }

747 :	"generate_comments"
		- NEIGH  = { for , comment , generate_comments , node , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { if , any_open_brackets , }
		- PRED   = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- SUCC   = { normalize_prefix , node , inside_brackets , any_open_brackets , }

747 :	"node"
		- NEIGH  = { for , comment , generate_comments , node , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { if , any_open_brackets , }
		- PRED   = { any_open_brackets , self , current_line , bracket_tracker , any_open_brackets , }
		- SUCC   = { normalize_prefix , node , inside_brackets , any_open_brackets , }

748 :	"if"
		- NEIGH  = { if , any_open_brackets , }
		- PARENT = { for , comment , generate_comments , node , }
		- CHILD  = { self , current_line , append , comment , if , comment , type , == , token , COMMENT , }
		- PRED   = { }
		- SUCC   = { }

748 :	"any_open_brackets"
		- NEIGH  = { if , any_open_brackets , }
		- PARENT = { for , comment , generate_comments , node , }
		- CHILD  = { self , current_line , append , comment , if , comment , type , == , token , COMMENT , }
		- PRED   = { }
		- SUCC   = { }

750 :	"self"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comment , type , == , token , COMMENT , }

750 :	"current_line"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comment , type , == , token , COMMENT , }

750 :	"append"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comment , type , == , token , COMMENT , }

750 :	"comment"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , comment , type , == , token , COMMENT , }

751 :	"if"
		- NEIGH  = { if , comment , type , == , token , COMMENT , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { self , current_line , append , comment , yield , from , self , line , yield , from , self , line , self , current_line , append , comment , yield , from , self , line , }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

751 :	"comment"
		- NEIGH  = { if , comment , type , == , token , COMMENT , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { self , current_line , append , comment , yield , from , self , line , yield , from , self , line , self , current_line , append , comment , yield , from , self , line , }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

751 :	"type"
		- NEIGH  = { if , comment , type , == , token , COMMENT , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { self , current_line , append , comment , yield , from , self , line , yield , from , self , line , self , current_line , append , comment , yield , from , self , line , }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

751 :	"=="
		- NEIGH  = { if , comment , type , == , token , COMMENT , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { self , current_line , append , comment , yield , from , self , line , yield , from , self , line , self , current_line , append , comment , yield , from , self , line , }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

751 :	"token"
		- NEIGH  = { if , comment , type , == , token , COMMENT , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { self , current_line , append , comment , yield , from , self , line , yield , from , self , line , self , current_line , append , comment , yield , from , self , line , }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

751 :	"COMMENT"
		- NEIGH  = { if , comment , type , == , token , COMMENT , }
		- PARENT = { if , any_open_brackets , }
		- CHILD  = { self , current_line , append , comment , yield , from , self , line , yield , from , self , line , self , current_line , append , comment , yield , from , self , line , }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

753 :	"self"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

753 :	"current_line"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

753 :	"append"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

753 :	"comment"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

754 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { yield , from , self , line , }

754 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { yield , from , self , line , }

754 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { yield , from , self , line , }

754 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { yield , from , self , line , }

758 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { self , current_line , append , comment , }

758 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { self , current_line , append , comment , }

758 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { self , current_line , append , comment , }

758 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { self , current_line , append , comment , }

760 :	"self"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

760 :	"current_line"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

760 :	"append"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

760 :	"comment"
		- NEIGH  = { self , current_line , append , comment , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

761 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

761 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

761 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

761 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , comment , type , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { self , current_line , append , comment , }
		- SUCC   = { }

763 :	"normalize_prefix"
		- NEIGH  = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { for , comment , generate_comments , node , }
		- SUCC   = { if , node , type , not , in , WHITESPACE , }

763 :	"node"
		- NEIGH  = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { for , comment , generate_comments , node , }
		- SUCC   = { if , node , type , not , in , WHITESPACE , }

763 :	"inside_brackets"
		- NEIGH  = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { for , comment , generate_comments , node , }
		- SUCC   = { if , node , type , not , in , WHITESPACE , }

763 :	"any_open_brackets"
		- NEIGH  = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { for , comment , generate_comments , node , }
		- SUCC   = { if , node , type , not , in , WHITESPACE , }

764 :	"if"
		- NEIGH  = { if , node , type , not , in , WHITESPACE , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { self , current_line , append , node , }
		- PRED   = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- SUCC   = { }

764 :	"node"
		- NEIGH  = { if , node , type , not , in , WHITESPACE , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { self , current_line , append , node , }
		- PRED   = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- SUCC   = { }

764 :	"type"
		- NEIGH  = { if , node , type , not , in , WHITESPACE , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { self , current_line , append , node , }
		- PRED   = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- SUCC   = { }

764 :	"not"
		- NEIGH  = { if , node , type , not , in , WHITESPACE , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { self , current_line , append , node , }
		- PRED   = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- SUCC   = { }

764 :	"in"
		- NEIGH  = { if , node , type , not , in , WHITESPACE , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { self , current_line , append , node , }
		- PRED   = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- SUCC   = { }

764 :	"WHITESPACE"
		- NEIGH  = { if , node , type , not , in , WHITESPACE , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { self , current_line , append , node , }
		- PRED   = { normalize_prefix , node , inside_brackets , any_open_brackets , }
		- SUCC   = { }

765 :	"self"
		- NEIGH  = { self , current_line , append , node , }
		- PARENT = { if , node , type , not , in , WHITESPACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

765 :	"current_line"
		- NEIGH  = { self , current_line , append , node , }
		- PARENT = { if , node , type , not , in , WHITESPACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

765 :	"append"
		- NEIGH  = { self , current_line , append , node , }
		- PARENT = { if , node , type , not , in , WHITESPACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

765 :	"node"
		- NEIGH  = { self , current_line , append , node , }
		- PARENT = { if , node , type , not , in , WHITESPACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

766 :	"yield"
		- NEIGH  = { yield , from , super , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

766 :	"from"
		- NEIGH  = { yield , from , super , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

766 :	"super"
		- NEIGH  = { yield , from , super , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

766 :	"visit_default"
		- NEIGH  = { yield , from , super , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

766 :	"node"
		- NEIGH  = { yield , from , super , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

768 :	"visit_INDENT"
		- NEIGH  = { visit_INDENT , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_default , self , node , }
		- SUCC   = { visit_DEDENT , self , node , }

768 :	"self"
		- NEIGH  = { visit_INDENT , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_default , self , node , }
		- SUCC   = { visit_DEDENT , self , node , }

768 :	"node"
		- NEIGH  = { visit_INDENT , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_default , self , node , }
		- SUCC   = { visit_DEDENT , self , node , }

769 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

769 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

769 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

769 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

770 :	"yield"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

770 :	"from"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

770 :	"self"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

770 :	"visit_default"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

770 :	"node"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

772 :	"visit_DEDENT"
		- NEIGH  = { visit_DEDENT , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_INDENT , self , node , }
		- SUCC   = { visit_stmt , self , node , keywords , }

772 :	"self"
		- NEIGH  = { visit_DEDENT , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_INDENT , self , node , }
		- SUCC   = { visit_stmt , self , node , keywords , }

772 :	"node"
		- NEIGH  = { visit_DEDENT , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_INDENT , self , node , }
		- SUCC   = { visit_stmt , self , node , keywords , }

773 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

773 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

773 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

773 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

775 :	"visit_stmt"
		- NEIGH  = { visit_stmt , self , node , keywords , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_DEDENT , self , node , }
		- SUCC   = { visit_simple_stmt , self , node , }

775 :	"self"
		- NEIGH  = { visit_stmt , self , node , keywords , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_DEDENT , self , node , }
		- SUCC   = { visit_simple_stmt , self , node , }

775 :	"node"
		- NEIGH  = { visit_stmt , self , node , keywords , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_DEDENT , self , node , }
		- SUCC   = { visit_simple_stmt , self , node , }

775 :	"keywords"
		- NEIGH  = { visit_stmt , self , node , keywords , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_DEDENT , self , node , }
		- SUCC   = { visit_simple_stmt , self , node , }

781 :	"for"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { if , child , type , == , token , NAME , or , child , value , in , keywords , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

781 :	"child"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { if , child , type , == , token , NAME , or , child , value , in , keywords , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

781 :	"node"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { if , child , type , == , token , NAME , or , child , value , in , keywords , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

781 :	"children"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { if , child , type , == , token , NAME , or , child , value , in , keywords , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

782 :	"if"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"child"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"type"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"=="
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"token"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"NAME"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"or"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"child"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"value"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"in"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

782 :	"keywords"
		- NEIGH  = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { yield , from , self , line , }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

783 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

783 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

783 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

783 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

785 :	"yield"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- SUCC   = { }

785 :	"from"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- SUCC   = { }

785 :	"self"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- SUCC   = { }

785 :	"visit"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- SUCC   = { }

785 :	"child"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { if , child , type , == , token , NAME , or , child , value , in , keywords , }
		- SUCC   = { }

787 :	"visit_simple_stmt"
		- NEIGH  = { visit_simple_stmt , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_stmt , self , node , keywords , }
		- SUCC   = { visit_async_stmt , self , node , }

787 :	"self"
		- NEIGH  = { visit_simple_stmt , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_stmt , self , node , keywords , }
		- SUCC   = { visit_async_stmt , self , node , }

787 :	"node"
		- NEIGH  = { visit_simple_stmt , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_stmt , self , node , keywords , }
		- SUCC   = { visit_async_stmt , self , node , }

789 :	"is_suite_like"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"node"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"parent"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"or"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"node"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"parent"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"type"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"in"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

789 :	"STATEMENT"
		- NEIGH  = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , is_suite_like , }

790 :	"if"
		- NEIGH  = { if , is_suite_like , }
		- PARENT = { }
		- CHILD  = { yield , from , self , line , yield , from , self , visit_default , node , yield , from , self , line , yield , from , self , line , yield , from , self , visit_default , node , }
		- PRED   = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- SUCC   = { }

790 :	"is_suite_like"
		- NEIGH  = { if , is_suite_like , }
		- PARENT = { }
		- CHILD  = { yield , from , self , line , yield , from , self , visit_default , node , yield , from , self , line , yield , from , self , line , yield , from , self , visit_default , node , }
		- PRED   = { is_suite_like , node , parent , or , node , parent , type , in , STATEMENT , }
		- SUCC   = { }

791 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

791 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

791 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

791 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit_default , node , }

792 :	"yield"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

792 :	"from"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

792 :	"self"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

792 :	"visit_default"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

792 :	"node"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , line , }

793 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , node , }
		- SUCC   = { yield , from , self , line , }

793 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , node , }
		- SUCC   = { yield , from , self , line , }

793 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , node , }
		- SUCC   = { yield , from , self , line , }

793 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , node , }
		- SUCC   = { yield , from , self , line , }

796 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , visit_default , node , }

796 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , visit_default , node , }

796 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , visit_default , node , }

796 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { yield , from , self , visit_default , node , }

797 :	"yield"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

797 :	"from"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

797 :	"self"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

797 :	"visit_default"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

797 :	"node"
		- NEIGH  = { yield , from , self , visit_default , node , }
		- PARENT = { if , is_suite_like , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

799 :	"visit_async_stmt"
		- NEIGH  = { visit_async_stmt , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_simple_stmt , self , node , }
		- SUCC   = { visit_decorators , self , node , }

799 :	"self"
		- NEIGH  = { visit_async_stmt , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_simple_stmt , self , node , }
		- SUCC   = { visit_decorators , self , node , }

799 :	"node"
		- NEIGH  = { visit_async_stmt , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_simple_stmt , self , node , }
		- SUCC   = { visit_decorators , self , node , }

800 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { children , iter , node , children , }

800 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { children , iter , node , children , }

800 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { children , iter , node , children , }

800 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { children , iter , node , children , }

802 :	"children"
		- NEIGH  = { children , iter , node , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { for , child , children , }

802 :	"iter"
		- NEIGH  = { children , iter , node , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { for , child , children , }

802 :	"node"
		- NEIGH  = { children , iter , node , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { for , child , children , }

802 :	"children"
		- NEIGH  = { children , iter , node , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { for , child , children , }

803 :	"for"
		- NEIGH  = { for , child , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , if , child , type , == , token , ASYNC , }
		- PRED   = { children , iter , node , children , }
		- SUCC   = { internal_stmt , next , children , }

803 :	"child"
		- NEIGH  = { for , child , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , if , child , type , == , token , ASYNC , }
		- PRED   = { children , iter , node , children , }
		- SUCC   = { internal_stmt , next , children , }

803 :	"children"
		- NEIGH  = { for , child , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , if , child , type , == , token , ASYNC , }
		- PRED   = { children , iter , node , children , }
		- SUCC   = { internal_stmt , next , children , }

804 :	"yield"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , child , type , == , token , ASYNC , }

804 :	"from"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , child , type , == , token , ASYNC , }

804 :	"self"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , child , type , == , token , ASYNC , }

804 :	"visit"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , child , type , == , token , ASYNC , }

804 :	"child"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , child , type , == , token , ASYNC , }

806 :	"if"
		- NEIGH  = { if , child , type , == , token , ASYNC , }
		- PARENT = { for , child , children , }
		- CHILD  = { break , }
		- PRED   = { yield , from , self , visit , child , }
		- SUCC   = { }

806 :	"child"
		- NEIGH  = { if , child , type , == , token , ASYNC , }
		- PARENT = { for , child , children , }
		- CHILD  = { break , }
		- PRED   = { yield , from , self , visit , child , }
		- SUCC   = { }

806 :	"type"
		- NEIGH  = { if , child , type , == , token , ASYNC , }
		- PARENT = { for , child , children , }
		- CHILD  = { break , }
		- PRED   = { yield , from , self , visit , child , }
		- SUCC   = { }

806 :	"=="
		- NEIGH  = { if , child , type , == , token , ASYNC , }
		- PARENT = { for , child , children , }
		- CHILD  = { break , }
		- PRED   = { yield , from , self , visit , child , }
		- SUCC   = { }

806 :	"token"
		- NEIGH  = { if , child , type , == , token , ASYNC , }
		- PARENT = { for , child , children , }
		- CHILD  = { break , }
		- PRED   = { yield , from , self , visit , child , }
		- SUCC   = { }

806 :	"ASYNC"
		- NEIGH  = { if , child , type , == , token , ASYNC , }
		- PARENT = { for , child , children , }
		- CHILD  = { break , }
		- PRED   = { yield , from , self , visit , child , }
		- SUCC   = { }

807 :	"break"
		- NEIGH  = { break , }
		- PARENT = { if , child , type , == , token , ASYNC , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

809 :	"internal_stmt"
		- NEIGH  = { internal_stmt , next , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , child , children , }
		- SUCC   = { for , child , internal_stmt , children , }

809 :	"next"
		- NEIGH  = { internal_stmt , next , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , child , children , }
		- SUCC   = { for , child , internal_stmt , children , }

809 :	"children"
		- NEIGH  = { internal_stmt , next , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , child , children , }
		- SUCC   = { for , child , internal_stmt , children , }

810 :	"for"
		- NEIGH  = { for , child , internal_stmt , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { internal_stmt , next , children , }
		- SUCC   = { }

810 :	"child"
		- NEIGH  = { for , child , internal_stmt , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { internal_stmt , next , children , }
		- SUCC   = { }

810 :	"internal_stmt"
		- NEIGH  = { for , child , internal_stmt , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { internal_stmt , next , children , }
		- SUCC   = { }

810 :	"children"
		- NEIGH  = { for , child , internal_stmt , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , visit , child , }
		- PRED   = { internal_stmt , next , children , }
		- SUCC   = { }

811 :	"yield"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , internal_stmt , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

811 :	"from"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , internal_stmt , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

811 :	"self"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , internal_stmt , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

811 :	"visit"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , internal_stmt , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

811 :	"child"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , internal_stmt , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

813 :	"visit_decorators"
		- NEIGH  = { visit_decorators , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_async_stmt , self , node , }
		- SUCC   = { visit_SEMI , self , leaf , }

813 :	"self"
		- NEIGH  = { visit_decorators , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_async_stmt , self , node , }
		- SUCC   = { visit_SEMI , self , leaf , }

813 :	"node"
		- NEIGH  = { visit_decorators , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_async_stmt , self , node , }
		- SUCC   = { visit_SEMI , self , leaf , }

814 :	"for"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , line , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

814 :	"child"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , line , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

814 :	"node"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , line , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

814 :	"children"
		- NEIGH  = { for , child , node , children , }
		- PARENT = { }
		- CHILD  = { yield , from , self , line , yield , from , self , visit , child , }
		- PRED   = { }
		- SUCC   = { }

815 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

815 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

815 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

815 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , visit , child , }

816 :	"yield"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

816 :	"from"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

816 :	"self"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

816 :	"visit"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

816 :	"child"
		- NEIGH  = { yield , from , self , visit , child , }
		- PARENT = { for , child , node , children , }
		- CHILD  = { }
		- PRED   = { yield , from , self , line , }
		- SUCC   = { }

818 :	"visit_SEMI"
		- NEIGH  = { visit_SEMI , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_decorators , self , node , }
		- SUCC   = { visit_ENDMARKER , self , leaf , }

818 :	"self"
		- NEIGH  = { visit_SEMI , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_decorators , self , node , }
		- SUCC   = { visit_ENDMARKER , self , leaf , }

818 :	"leaf"
		- NEIGH  = { visit_SEMI , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_decorators , self , node , }
		- SUCC   = { visit_ENDMARKER , self , leaf , }

819 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

819 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

819 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

819 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

821 :	"visit_ENDMARKER"
		- NEIGH  = { visit_ENDMARKER , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_SEMI , self , leaf , }
		- SUCC   = { __attrs_post_init__ , self , }

821 :	"self"
		- NEIGH  = { visit_ENDMARKER , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_SEMI , self , leaf , }
		- SUCC   = { __attrs_post_init__ , self , }

821 :	"leaf"
		- NEIGH  = { visit_ENDMARKER , self , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_SEMI , self , leaf , }
		- SUCC   = { __attrs_post_init__ , self , }

822 :	"yield"
		- NEIGH  = { yield , from , self , visit_default , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

822 :	"from"
		- NEIGH  = { yield , from , self , visit_default , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

822 :	"self"
		- NEIGH  = { yield , from , self , visit_default , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

822 :	"visit_default"
		- NEIGH  = { yield , from , self , visit_default , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

822 :	"leaf"
		- NEIGH  = { yield , from , self , visit_default , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , self , line , }

823 :	"yield"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , leaf , }
		- SUCC   = { }

823 :	"from"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , leaf , }
		- SUCC   = { }

823 :	"self"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , leaf , }
		- SUCC   = { }

823 :	"line"
		- NEIGH  = { yield , from , self , line , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { yield , from , self , visit_default , leaf , }
		- SUCC   = { }

825 :	"__attrs_post_init__"
		- NEIGH  = { __attrs_post_init__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_ENDMARKER , self , leaf , }
		- SUCC   = { }

825 :	"self"
		- NEIGH  = { __attrs_post_init__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { visit_ENDMARKER , self , leaf , }
		- SUCC   = { }

827 :	"v"
		- NEIGH  = { v , self , visit_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , visit_if_stmt , partial , v , keywords , set , }

827 :	"self"
		- NEIGH  = { v , self , visit_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , visit_if_stmt , partial , v , keywords , set , }

827 :	"visit_stmt"
		- NEIGH  = { v , self , visit_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , visit_if_stmt , partial , v , keywords , set , }

828 :	"self"
		- NEIGH  = { self , visit_if_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , self , visit_stmt , }
		- SUCC   = { self , visit_while_stmt , partial , v , keywords , set , }

828 :	"visit_if_stmt"
		- NEIGH  = { self , visit_if_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , self , visit_stmt , }
		- SUCC   = { self , visit_while_stmt , partial , v , keywords , set , }

828 :	"partial"
		- NEIGH  = { self , visit_if_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , self , visit_stmt , }
		- SUCC   = { self , visit_while_stmt , partial , v , keywords , set , }

828 :	"v"
		- NEIGH  = { self , visit_if_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , self , visit_stmt , }
		- SUCC   = { self , visit_while_stmt , partial , v , keywords , set , }

828 :	"keywords"
		- NEIGH  = { self , visit_if_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , self , visit_stmt , }
		- SUCC   = { self , visit_while_stmt , partial , v , keywords , set , }

828 :	"set"
		- NEIGH  = { self , visit_if_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , self , visit_stmt , }
		- SUCC   = { self , visit_while_stmt , partial , v , keywords , set , }

829 :	"self"
		- NEIGH  = { self , visit_while_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_if_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_for_stmt , partial , v , keywords , set , }

829 :	"visit_while_stmt"
		- NEIGH  = { self , visit_while_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_if_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_for_stmt , partial , v , keywords , set , }

829 :	"partial"
		- NEIGH  = { self , visit_while_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_if_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_for_stmt , partial , v , keywords , set , }

829 :	"v"
		- NEIGH  = { self , visit_while_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_if_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_for_stmt , partial , v , keywords , set , }

829 :	"keywords"
		- NEIGH  = { self , visit_while_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_if_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_for_stmt , partial , v , keywords , set , }

829 :	"set"
		- NEIGH  = { self , visit_while_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_if_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_for_stmt , partial , v , keywords , set , }

830 :	"self"
		- NEIGH  = { self , visit_for_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_while_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_try_stmt , partial , v , keywords , set , }

830 :	"visit_for_stmt"
		- NEIGH  = { self , visit_for_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_while_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_try_stmt , partial , v , keywords , set , }

830 :	"partial"
		- NEIGH  = { self , visit_for_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_while_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_try_stmt , partial , v , keywords , set , }

830 :	"v"
		- NEIGH  = { self , visit_for_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_while_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_try_stmt , partial , v , keywords , set , }

830 :	"keywords"
		- NEIGH  = { self , visit_for_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_while_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_try_stmt , partial , v , keywords , set , }

830 :	"set"
		- NEIGH  = { self , visit_for_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_while_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_try_stmt , partial , v , keywords , set , }

831 :	"self"
		- NEIGH  = { self , visit_try_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_for_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_except_clause , partial , v , keywords , set , }

831 :	"visit_try_stmt"
		- NEIGH  = { self , visit_try_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_for_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_except_clause , partial , v , keywords , set , }

831 :	"partial"
		- NEIGH  = { self , visit_try_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_for_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_except_clause , partial , v , keywords , set , }

831 :	"v"
		- NEIGH  = { self , visit_try_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_for_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_except_clause , partial , v , keywords , set , }

831 :	"keywords"
		- NEIGH  = { self , visit_try_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_for_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_except_clause , partial , v , keywords , set , }

831 :	"set"
		- NEIGH  = { self , visit_try_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_for_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_except_clause , partial , v , keywords , set , }

832 :	"self"
		- NEIGH  = { self , visit_except_clause , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_try_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_funcdef , partial , v , keywords , set , }

832 :	"visit_except_clause"
		- NEIGH  = { self , visit_except_clause , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_try_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_funcdef , partial , v , keywords , set , }

832 :	"partial"
		- NEIGH  = { self , visit_except_clause , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_try_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_funcdef , partial , v , keywords , set , }

832 :	"v"
		- NEIGH  = { self , visit_except_clause , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_try_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_funcdef , partial , v , keywords , set , }

832 :	"keywords"
		- NEIGH  = { self , visit_except_clause , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_try_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_funcdef , partial , v , keywords , set , }

832 :	"set"
		- NEIGH  = { self , visit_except_clause , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_try_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_funcdef , partial , v , keywords , set , }

833 :	"self"
		- NEIGH  = { self , visit_funcdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_except_clause , partial , v , keywords , set , }
		- SUCC   = { self , visit_with_stmt , partial , v , keywords , set , }

833 :	"visit_funcdef"
		- NEIGH  = { self , visit_funcdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_except_clause , partial , v , keywords , set , }
		- SUCC   = { self , visit_with_stmt , partial , v , keywords , set , }

833 :	"partial"
		- NEIGH  = { self , visit_funcdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_except_clause , partial , v , keywords , set , }
		- SUCC   = { self , visit_with_stmt , partial , v , keywords , set , }

833 :	"v"
		- NEIGH  = { self , visit_funcdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_except_clause , partial , v , keywords , set , }
		- SUCC   = { self , visit_with_stmt , partial , v , keywords , set , }

833 :	"keywords"
		- NEIGH  = { self , visit_funcdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_except_clause , partial , v , keywords , set , }
		- SUCC   = { self , visit_with_stmt , partial , v , keywords , set , }

833 :	"set"
		- NEIGH  = { self , visit_funcdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_except_clause , partial , v , keywords , set , }
		- SUCC   = { self , visit_with_stmt , partial , v , keywords , set , }

834 :	"self"
		- NEIGH  = { self , visit_with_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_funcdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_classdef , partial , v , keywords , set , }

834 :	"visit_with_stmt"
		- NEIGH  = { self , visit_with_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_funcdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_classdef , partial , v , keywords , set , }

834 :	"partial"
		- NEIGH  = { self , visit_with_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_funcdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_classdef , partial , v , keywords , set , }

834 :	"v"
		- NEIGH  = { self , visit_with_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_funcdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_classdef , partial , v , keywords , set , }

834 :	"keywords"
		- NEIGH  = { self , visit_with_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_funcdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_classdef , partial , v , keywords , set , }

834 :	"set"
		- NEIGH  = { self , visit_with_stmt , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_funcdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_classdef , partial , v , keywords , set , }

835 :	"self"
		- NEIGH  = { self , visit_classdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_with_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_async_funcdef , self , visit_async_stmt , }

835 :	"visit_classdef"
		- NEIGH  = { self , visit_classdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_with_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_async_funcdef , self , visit_async_stmt , }

835 :	"partial"
		- NEIGH  = { self , visit_classdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_with_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_async_funcdef , self , visit_async_stmt , }

835 :	"v"
		- NEIGH  = { self , visit_classdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_with_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_async_funcdef , self , visit_async_stmt , }

835 :	"keywords"
		- NEIGH  = { self , visit_classdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_with_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_async_funcdef , self , visit_async_stmt , }

835 :	"set"
		- NEIGH  = { self , visit_classdef , partial , v , keywords , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_with_stmt , partial , v , keywords , set , }
		- SUCC   = { self , visit_async_funcdef , self , visit_async_stmt , }

836 :	"self"
		- NEIGH  = { self , visit_async_funcdef , self , visit_async_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_classdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_decorated , self , visit_decorators , }

836 :	"visit_async_funcdef"
		- NEIGH  = { self , visit_async_funcdef , self , visit_async_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_classdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_decorated , self , visit_decorators , }

836 :	"self"
		- NEIGH  = { self , visit_async_funcdef , self , visit_async_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_classdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_decorated , self , visit_decorators , }

836 :	"visit_async_stmt"
		- NEIGH  = { self , visit_async_funcdef , self , visit_async_stmt , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_classdef , partial , v , keywords , set , }
		- SUCC   = { self , visit_decorated , self , visit_decorators , }

837 :	"self"
		- NEIGH  = { self , visit_decorated , self , visit_decorators , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_async_funcdef , self , visit_async_stmt , }
		- SUCC   = { }

837 :	"visit_decorated"
		- NEIGH  = { self , visit_decorated , self , visit_decorators , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_async_funcdef , self , visit_async_stmt , }
		- SUCC   = { }

837 :	"self"
		- NEIGH  = { self , visit_decorated , self , visit_decorators , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_async_funcdef , self , visit_async_stmt , }
		- SUCC   = { }

837 :	"visit_decorators"
		- NEIGH  = { self , visit_decorated , self , visit_decorators , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , visit_async_funcdef , self , visit_async_stmt , }
		- SUCC   = { }

840 :	"BRACKET"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"dict"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"token"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"LPAR"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"token"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"RPAR"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"token"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"LSQB"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"token"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"RSQB"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"token"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"LBRACE"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"token"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

840 :	"RBRACE"
		- NEIGH  = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LineGenerator , }
		- SUCC   = { OPENING_BRACKETS , set , BRACKET , keys , }

841 :	"OPENING_BRACKETS"
		- NEIGH  = { OPENING_BRACKETS , set , BRACKET , keys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- SUCC   = { CLOSING_BRACKETS , set , BRACKET , values , }

841 :	"set"
		- NEIGH  = { OPENING_BRACKETS , set , BRACKET , keys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- SUCC   = { CLOSING_BRACKETS , set , BRACKET , values , }

841 :	"BRACKET"
		- NEIGH  = { OPENING_BRACKETS , set , BRACKET , keys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- SUCC   = { CLOSING_BRACKETS , set , BRACKET , values , }

841 :	"keys"
		- NEIGH  = { OPENING_BRACKETS , set , BRACKET , keys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKET , dict , token , LPAR , token , RPAR , token , LSQB , token , RSQB , token , LBRACE , token , RBRACE , }
		- SUCC   = { CLOSING_BRACKETS , set , BRACKET , values , }

842 :	"CLOSING_BRACKETS"
		- NEIGH  = { CLOSING_BRACKETS , set , BRACKET , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { OPENING_BRACKETS , set , BRACKET , keys , }
		- SUCC   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }

842 :	"set"
		- NEIGH  = { CLOSING_BRACKETS , set , BRACKET , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { OPENING_BRACKETS , set , BRACKET , keys , }
		- SUCC   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }

842 :	"BRACKET"
		- NEIGH  = { CLOSING_BRACKETS , set , BRACKET , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { OPENING_BRACKETS , set , BRACKET , keys , }
		- SUCC   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }

842 :	"values"
		- NEIGH  = { CLOSING_BRACKETS , set , BRACKET , values , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { OPENING_BRACKETS , set , BRACKET , keys , }
		- SUCC   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }

843 :	"BRACKETS"
		- NEIGH  = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CLOSING_BRACKETS , set , BRACKET , values , }
		- SUCC   = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }

843 :	"OPENING_BRACKETS"
		- NEIGH  = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CLOSING_BRACKETS , set , BRACKET , values , }
		- SUCC   = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }

843 :	"|"
		- NEIGH  = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CLOSING_BRACKETS , set , BRACKET , values , }
		- SUCC   = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }

843 :	"CLOSING_BRACKETS"
		- NEIGH  = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { CLOSING_BRACKETS , set , BRACKET , values , }
		- SUCC   = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }

844 :	"ALWAYS_NO_SPACE"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

844 :	"CLOSING_BRACKETS"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

844 :	"|"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

844 :	"set"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

844 :	"token"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

844 :	"COMMA"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

844 :	"STANDALONE_COMMENT"
		- NEIGH  = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BRACKETS , OPENING_BRACKETS , | , CLOSING_BRACKETS , }
		- SUCC   = { whitespace , leaf , }

847 :	"whitespace"
		- NEIGH  = { whitespace , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- SUCC   = { preceding_leaf , node , }

847 :	"leaf"
		- NEIGH  = { whitespace , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { ALWAYS_NO_SPACE , CLOSING_BRACKETS , | , set , token , COMMA , STANDALONE_COMMENT , }
		- SUCC   = { preceding_leaf , node , }

849 :	"NO"
		- NEIGH  = { NO , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { SPACE , }

850 :	"SPACE"
		- NEIGH  = { SPACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NO , }
		- SUCC   = { DOUBLESPACE , }

851 :	"DOUBLESPACE"
		- NEIGH  = { DOUBLESPACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { SPACE , }
		- SUCC   = { t , leaf , type , }

852 :	"t"
		- NEIGH  = { t , leaf , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DOUBLESPACE , }
		- SUCC   = { p , leaf , parent , }

852 :	"leaf"
		- NEIGH  = { t , leaf , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DOUBLESPACE , }
		- SUCC   = { p , leaf , parent , }

852 :	"type"
		- NEIGH  = { t , leaf , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { DOUBLESPACE , }
		- SUCC   = { p , leaf , parent , }

853 :	"p"
		- NEIGH  = { p , leaf , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , leaf , type , }
		- SUCC   = { v , leaf , value , }

853 :	"leaf"
		- NEIGH  = { p , leaf , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , leaf , type , }
		- SUCC   = { v , leaf , value , }

853 :	"parent"
		- NEIGH  = { p , leaf , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , leaf , type , }
		- SUCC   = { v , leaf , value , }

854 :	"v"
		- NEIGH  = { v , leaf , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p , leaf , parent , }
		- SUCC   = { if , t , in , ALWAYS_NO_SPACE , }

854 :	"leaf"
		- NEIGH  = { v , leaf , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p , leaf , parent , }
		- SUCC   = { if , t , in , ALWAYS_NO_SPACE , }

854 :	"value"
		- NEIGH  = { v , leaf , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p , leaf , parent , }
		- SUCC   = { if , t , in , ALWAYS_NO_SPACE , }

855 :	"if"
		- NEIGH  = { if , t , in , ALWAYS_NO_SPACE , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { v , leaf , value , }
		- SUCC   = { if , t , == , token , COMMENT , }

855 :	"t"
		- NEIGH  = { if , t , in , ALWAYS_NO_SPACE , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { v , leaf , value , }
		- SUCC   = { if , t , == , token , COMMENT , }

855 :	"in"
		- NEIGH  = { if , t , in , ALWAYS_NO_SPACE , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { v , leaf , value , }
		- SUCC   = { if , t , == , token , COMMENT , }

855 :	"ALWAYS_NO_SPACE"
		- NEIGH  = { if , t , in , ALWAYS_NO_SPACE , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { v , leaf , value , }
		- SUCC   = { if , t , == , token , COMMENT , }

856 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , in , ALWAYS_NO_SPACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

856 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , in , ALWAYS_NO_SPACE , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

858 :	"if"
		- NEIGH  = { if , t , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , DOUBLESPACE , }
		- PRED   = { if , t , in , ALWAYS_NO_SPACE , }
		- SUCC   = { assert , p , is , not , leaf , }

858 :	"t"
		- NEIGH  = { if , t , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , DOUBLESPACE , }
		- PRED   = { if , t , in , ALWAYS_NO_SPACE , }
		- SUCC   = { assert , p , is , not , leaf , }

858 :	"=="
		- NEIGH  = { if , t , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , DOUBLESPACE , }
		- PRED   = { if , t , in , ALWAYS_NO_SPACE , }
		- SUCC   = { assert , p , is , not , leaf , }

858 :	"token"
		- NEIGH  = { if , t , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , DOUBLESPACE , }
		- PRED   = { if , t , in , ALWAYS_NO_SPACE , }
		- SUCC   = { assert , p , is , not , leaf , }

858 :	"COMMENT"
		- NEIGH  = { if , t , == , token , COMMENT , }
		- PARENT = { }
		- CHILD  = { return , DOUBLESPACE , }
		- PRED   = { if , t , in , ALWAYS_NO_SPACE , }
		- SUCC   = { assert , p , is , not , leaf , }

859 :	"return"
		- NEIGH  = { return , DOUBLESPACE , }
		- PARENT = { if , t , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

859 :	"DOUBLESPACE"
		- NEIGH  = { return , DOUBLESPACE , }
		- PARENT = { if , t , == , token , COMMENT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

861 :	"assert"
		- NEIGH  = { assert , p , is , not , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COMMENT , }
		- SUCC   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }

861 :	"p"
		- NEIGH  = { assert , p , is , not , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COMMENT , }
		- SUCC   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }

861 :	"is"
		- NEIGH  = { assert , p , is , not , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COMMENT , }
		- SUCC   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }

861 :	"not"
		- NEIGH  = { assert , p , is , not , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COMMENT , }
		- SUCC   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }

861 :	"leaf"
		- NEIGH  = { assert , p , is , not , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COMMENT , }
		- SUCC   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }

862 :	"if"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"t"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"=="
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"token"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"COLON"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"or"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"p"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"type"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"not"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"in"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"set"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"syms"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"subscript"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"syms"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

862 :	"subscriptlist"
		- NEIGH  = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- PARENT = { }
		- CHILD  = { return , NO , }
		- PRED   = { assert , p , is , not , leaf , }
		- SUCC   = { prev , leaf , prev_sibling , }

863 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

863 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

865 :	"prev"
		- NEIGH  = { prev , leaf , prev_sibling , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- SUCC   = { if , prev , }

865 :	"leaf"
		- NEIGH  = { prev , leaf , prev_sibling , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- SUCC   = { if , prev , }

865 :	"prev_sibling"
		- NEIGH  = { prev , leaf , prev_sibling , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , t , == , token , COLON , or , p , type , not , in , set , syms , subscript , syms , subscriptlist , }
		- SUCC   = { if , prev , }

866 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , in , OPENING_BRACKETS , if , t , == , token , COLON , if , prevp , type , == , token , EQUAL , if , prev , type , in , OPENING_BRACKETS , }
		- PRED   = { prev , leaf , prev_sibling , }
		- SUCC   = { if , p , type , in , set , syms , parameters , syms , arglist , }

866 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , in , OPENING_BRACKETS , if , t , == , token , COLON , if , prevp , type , == , token , EQUAL , if , prev , type , in , OPENING_BRACKETS , }
		- PRED   = { prev , leaf , prev_sibling , }
		- SUCC   = { if , p , type , in , set , syms , parameters , syms , arglist , }

867 :	"prevp"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }

867 :	"preceding_leaf"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }

867 :	"p"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }

868 :	"if"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

868 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

868 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

868 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

868 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

868 :	"in"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

868 :	"OPENING_BRACKETS"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , COLON , }

869 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

869 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

871 :	"if"
		- NEIGH  = { if , t , == , token , COLON , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { if , prevp , type , == , token , EQUAL , }

871 :	"t"
		- NEIGH  = { if , t , == , token , COLON , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { if , prevp , type , == , token , EQUAL , }

871 :	"=="
		- NEIGH  = { if , t , == , token , COLON , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { if , prevp , type , == , token , EQUAL , }

871 :	"token"
		- NEIGH  = { if , t , == , token , COLON , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { if , prevp , type , == , token , EQUAL , }

871 :	"COLON"
		- NEIGH  = { if , t , == , token , COLON , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { if , prevp , type , == , token , EQUAL , }

872 :	"return"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"SPACE"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"if-exp"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"prevp"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"type"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"=="
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"token"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"COMMA"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"else-exp"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

872 :	"NO"
		- NEIGH  = { return , SPACE , if-exp , prevp , type , == , token , COMMA , else-exp , NO , }
		- PARENT = { if , t , == , token , COLON , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

874 :	"if"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , }
		- PARENT = { if , prev , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , COLON , }
		- SUCC   = { if , prev , type , in , OPENING_BRACKETS , }

874 :	"prevp"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , }
		- PARENT = { if , prev , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , COLON , }
		- SUCC   = { if , prev , type , in , OPENING_BRACKETS , }

874 :	"type"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , }
		- PARENT = { if , prev , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , COLON , }
		- SUCC   = { if , prev , type , in , OPENING_BRACKETS , }

874 :	"=="
		- NEIGH  = { if , prevp , type , == , token , EQUAL , }
		- PARENT = { if , prev , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , COLON , }
		- SUCC   = { if , prev , type , in , OPENING_BRACKETS , }

874 :	"token"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , }
		- PARENT = { if , prev , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , COLON , }
		- SUCC   = { if , prev , type , in , OPENING_BRACKETS , }

874 :	"EQUAL"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , }
		- PARENT = { if , prev , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , COLON , }
		- SUCC   = { if , prev , type , in , OPENING_BRACKETS , }

875 :	"if"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"or"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"type"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"in"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

875 :	"set"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

876 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

876 :	"arglist"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

877 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

877 :	"argument"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

878 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

878 :	"parameters"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

879 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

879 :	"typedargslist"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

880 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

880 :	"varargslist"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , DOUBLESTAR , }

882 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

882 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

884 :	"if"
		- NEIGH  = { if , prevp , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , COLON , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

884 :	"prevp"
		- NEIGH  = { if , prevp , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , COLON , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

884 :	"type"
		- NEIGH  = { if , prevp , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , COLON , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

884 :	"=="
		- NEIGH  = { if , prevp , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , COLON , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

884 :	"token"
		- NEIGH  = { if , prevp , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , COLON , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

884 :	"DOUBLESTAR"
		- NEIGH  = { if , prevp , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prevp , type , == , token , EQUAL , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , if , prevp , type , == , token , COLON , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

885 :	"if"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"or"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"type"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"in"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

885 :	"set"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

886 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

886 :	"arglist"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

887 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

887 :	"argument"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

888 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

888 :	"dictsetmaker"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

889 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

889 :	"parameters"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

890 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

890 :	"typedargslist"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

891 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

891 :	"varargslist"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , COLON , }

893 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

893 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

895 :	"if"
		- NEIGH  = { if , prevp , type , == , token , COLON , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

895 :	"prevp"
		- NEIGH  = { if , prevp , type , == , token , COLON , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

895 :	"type"
		- NEIGH  = { if , prevp , type , == , token , COLON , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

895 :	"=="
		- NEIGH  = { if , prevp , type , == , token , COLON , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

895 :	"token"
		- NEIGH  = { if , prevp , type , == , token , COLON , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

895 :	"COLON"
		- NEIGH  = { if , prevp , type , == , token , COLON , }
		- PARENT = { if , prevp , type , == , token , DOUBLESTAR , }
		- CHILD  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , arglist , syms , argument , syms , dictsetmaker , syms , parameters , syms , typedargslist , syms , varargslist , }
		- SUCC   = { }

896 :	"if"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"or"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"type"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"in"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"set"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"subscript"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

896 :	"sliceop"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }

897 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

897 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

899 :	"if"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

900 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

900 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"or"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"parent"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"type"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"in"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"set"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"factor"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"syms"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

901 :	"star_expr"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

902 :	"or"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

902 :	"prevp"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

902 :	"type"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

902 :	"in"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

902 :	"MATH_OPERATORS"
		- NEIGH  = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- PARENT = { if , prevp , type , == , token , COLON , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , parent , or , prevp , parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

904 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

904 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , parent , or , prevp , parent , type , in , set , syms , factor , syms , star_expr , or , prevp , type , in , MATH_OPERATORS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

906 :	"if"
		- NEIGH  = { if , prev , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , EQUAL , }
		- SUCC   = { }

906 :	"prev"
		- NEIGH  = { if , prev , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , EQUAL , }
		- SUCC   = { }

906 :	"type"
		- NEIGH  = { if , prev , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , EQUAL , }
		- SUCC   = { }

906 :	"in"
		- NEIGH  = { if , prev , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , EQUAL , }
		- SUCC   = { }

906 :	"OPENING_BRACKETS"
		- NEIGH  = { if , prev , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , EQUAL , }
		- SUCC   = { }

907 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

907 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

909 :	"if"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"p"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"type"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"in"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"set"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"syms"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"parameters"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"syms"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

909 :	"arglist"
		- NEIGH  = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , varargslist , }

911 :	"if"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

911 :	"t"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

911 :	"=="
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

911 :	"token"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

911 :	"RPAR"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

912 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , RPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

912 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , RPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

914 :	"if"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"or"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"type"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"!="
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"token"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

914 :	"COMMA"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { }

915 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

915 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

917 :	"if"
		- NEIGH  = { if , p , type , == , syms , varargslist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , if , p , type , == , syms , typedargslist , }
		- PRED   = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- SUCC   = { return , SPACE , }

917 :	"p"
		- NEIGH  = { if , p , type , == , syms , varargslist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , if , p , type , == , syms , typedargslist , }
		- PRED   = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- SUCC   = { return , SPACE , }

917 :	"type"
		- NEIGH  = { if , p , type , == , syms , varargslist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , if , p , type , == , syms , typedargslist , }
		- PRED   = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- SUCC   = { return , SPACE , }

917 :	"=="
		- NEIGH  = { if , p , type , == , syms , varargslist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , if , p , type , == , syms , typedargslist , }
		- PRED   = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- SUCC   = { return , SPACE , }

917 :	"syms"
		- NEIGH  = { if , p , type , == , syms , varargslist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , if , p , type , == , syms , typedargslist , }
		- PRED   = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- SUCC   = { return , SPACE , }

917 :	"varargslist"
		- NEIGH  = { if , p , type , == , syms , varargslist , }
		- PARENT = { }
		- CHILD  = { if , t , == , token , RPAR , if , prev , or , prev , type , != , token , COMMA , if , p , type , == , syms , typedargslist , }
		- PRED   = { if , p , type , in , set , syms , parameters , syms , arglist , }
		- SUCC   = { return , SPACE , }

919 :	"if"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

919 :	"t"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

919 :	"=="
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

919 :	"token"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

919 :	"RPAR"
		- NEIGH  = { if , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , != , token , COMMA , }

920 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , RPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

920 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , RPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

922 :	"if"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"or"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"type"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"!="
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"token"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

922 :	"COMMA"
		- NEIGH  = { if , prev , or , prev , type , != , token , COMMA , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , typedargslist , }

923 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

923 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

925 :	"if"
		- NEIGH  = { if , p , type , == , syms , typedargslist , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { if , prev , if , t , == , token , EQUAL , if , p , type , == , syms , tname , }
		- PRED   = { if , prev , or , prev , type , != , token , COMMA , }
		- SUCC   = { }

925 :	"p"
		- NEIGH  = { if , p , type , == , syms , typedargslist , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { if , prev , if , t , == , token , EQUAL , if , p , type , == , syms , tname , }
		- PRED   = { if , prev , or , prev , type , != , token , COMMA , }
		- SUCC   = { }

925 :	"type"
		- NEIGH  = { if , p , type , == , syms , typedargslist , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { if , prev , if , t , == , token , EQUAL , if , p , type , == , syms , tname , }
		- PRED   = { if , prev , or , prev , type , != , token , COMMA , }
		- SUCC   = { }

925 :	"=="
		- NEIGH  = { if , p , type , == , syms , typedargslist , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { if , prev , if , t , == , token , EQUAL , if , p , type , == , syms , tname , }
		- PRED   = { if , prev , or , prev , type , != , token , COMMA , }
		- SUCC   = { }

925 :	"syms"
		- NEIGH  = { if , p , type , == , syms , typedargslist , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { if , prev , if , t , == , token , EQUAL , if , p , type , == , syms , tname , }
		- PRED   = { if , prev , or , prev , type , != , token , COMMA , }
		- SUCC   = { }

925 :	"typedargslist"
		- NEIGH  = { if , p , type , == , syms , typedargslist , }
		- PARENT = { if , p , type , == , syms , varargslist , }
		- CHILD  = { if , prev , if , t , == , token , EQUAL , if , p , type , == , syms , tname , }
		- PRED   = { if , prev , or , prev , type , != , token , COMMA , }
		- SUCC   = { }

927 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , EQUAL , }

927 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , EQUAL , }

928 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

928 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

930 :	"if"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , type , != , syms , tname , if , prev , type , == , token , EQUAL , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , tname , }

930 :	"t"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , type , != , syms , tname , if , prev , type , == , token , EQUAL , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , tname , }

930 :	"=="
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , type , != , syms , tname , if , prev , type , == , token , EQUAL , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , tname , }

930 :	"token"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , type , != , syms , tname , if , prev , type , == , token , EQUAL , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , tname , }

930 :	"EQUAL"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , type , != , syms , tname , if , prev , type , == , token , EQUAL , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , == , syms , tname , }

931 :	"if"
		- NEIGH  = { if , prev , type , != , syms , tname , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , EQUAL , }

931 :	"prev"
		- NEIGH  = { if , prev , type , != , syms , tname , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , EQUAL , }

931 :	"type"
		- NEIGH  = { if , prev , type , != , syms , tname , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , EQUAL , }

931 :	"!="
		- NEIGH  = { if , prev , type , != , syms , tname , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , EQUAL , }

931 :	"syms"
		- NEIGH  = { if , prev , type , != , syms , tname , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , EQUAL , }

931 :	"tname"
		- NEIGH  = { if , prev , type , != , syms , tname , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , EQUAL , }

932 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , != , syms , tname , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

932 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , != , syms , tname , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

934 :	"if"
		- NEIGH  = { if , prev , type , == , token , EQUAL , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , prev , prefix , if , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , type , != , syms , tname , }
		- SUCC   = { }

934 :	"prev"
		- NEIGH  = { if , prev , type , == , token , EQUAL , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , prev , prefix , if , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , type , != , syms , tname , }
		- SUCC   = { }

934 :	"type"
		- NEIGH  = { if , prev , type , == , token , EQUAL , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , prev , prefix , if , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , type , != , syms , tname , }
		- SUCC   = { }

934 :	"=="
		- NEIGH  = { if , prev , type , == , token , EQUAL , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , prev , prefix , if , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , type , != , syms , tname , }
		- SUCC   = { }

934 :	"token"
		- NEIGH  = { if , prev , type , == , token , EQUAL , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , prev , prefix , if , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , type , != , syms , tname , }
		- SUCC   = { }

934 :	"EQUAL"
		- NEIGH  = { if , prev , type , == , token , EQUAL , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { return , prev , prefix , if , prev , type , != , token , COMMA , }
		- PRED   = { if , prev , type , != , syms , tname , }
		- SUCC   = { }

937 :	"return"
		- NEIGH  = { return , prev , prefix , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

937 :	"prev"
		- NEIGH  = { return , prev , prefix , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

937 :	"prefix"
		- NEIGH  = { return , prev , prefix , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

939 :	"if"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { return , prev , prefix , }
		- SUCC   = { }

939 :	"prev"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { return , prev , prefix , }
		- SUCC   = { }

939 :	"type"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { return , prev , prefix , }
		- SUCC   = { }

939 :	"!="
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { return , prev , prefix , }
		- SUCC   = { }

939 :	"token"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { return , prev , prefix , }
		- SUCC   = { }

939 :	"COMMA"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , type , == , token , EQUAL , }
		- CHILD  = { return , NO , }
		- PRED   = { return , prev , prefix , }
		- SUCC   = { }

940 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

940 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

942 :	"if"
		- NEIGH  = { if , p , type , == , syms , tname , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , if , p , type , == , syms , trailer , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { }

942 :	"p"
		- NEIGH  = { if , p , type , == , syms , tname , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , if , p , type , == , syms , trailer , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { }

942 :	"type"
		- NEIGH  = { if , p , type , == , syms , tname , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , if , p , type , == , syms , trailer , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { }

942 :	"=="
		- NEIGH  = { if , p , type , == , syms , tname , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , if , p , type , == , syms , trailer , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { }

942 :	"syms"
		- NEIGH  = { if , p , type , == , syms , tname , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , if , p , type , == , syms , trailer , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { }

942 :	"tname"
		- NEIGH  = { if , p , type , == , syms , tname , }
		- PARENT = { if , p , type , == , syms , typedargslist , }
		- CHILD  = { if , prev , if , p , type , == , syms , trailer , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { }

944 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , COMMA , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , trailer , }

944 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , COMMA , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , trailer , }

945 :	"prevp"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , != , token , COMMA , }

945 :	"preceding_leaf"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , != , token , COMMA , }

945 :	"p"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , != , token , COMMA , }

946 :	"if"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"!="
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"token"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

946 :	"COMMA"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { }

947 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

947 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

949 :	"if"
		- NEIGH  = { if , p , type , == , syms , trailer , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { if , t , == , token , LPAR , or , t , == , token , RPAR , if , prev , if , p , type , == , syms , argument , }
		- PRED   = { if , prev , }
		- SUCC   = { }

949 :	"p"
		- NEIGH  = { if , p , type , == , syms , trailer , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { if , t , == , token , LPAR , or , t , == , token , RPAR , if , prev , if , p , type , == , syms , argument , }
		- PRED   = { if , prev , }
		- SUCC   = { }

949 :	"type"
		- NEIGH  = { if , p , type , == , syms , trailer , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { if , t , == , token , LPAR , or , t , == , token , RPAR , if , prev , if , p , type , == , syms , argument , }
		- PRED   = { if , prev , }
		- SUCC   = { }

949 :	"=="
		- NEIGH  = { if , p , type , == , syms , trailer , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { if , t , == , token , LPAR , or , t , == , token , RPAR , if , prev , if , p , type , == , syms , argument , }
		- PRED   = { if , prev , }
		- SUCC   = { }

949 :	"syms"
		- NEIGH  = { if , p , type , == , syms , trailer , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { if , t , == , token , LPAR , or , t , == , token , RPAR , if , prev , if , p , type , == , syms , argument , }
		- PRED   = { if , prev , }
		- SUCC   = { }

949 :	"trailer"
		- NEIGH  = { if , p , type , == , syms , trailer , }
		- PARENT = { if , p , type , == , syms , tname , }
		- CHILD  = { if , t , == , token , LPAR , or , t , == , token , RPAR , if , prev , if , p , type , == , syms , argument , }
		- PRED   = { if , prev , }
		- SUCC   = { }

951 :	"if"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"t"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"=="
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"token"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"LPAR"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"or"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"t"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"=="
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"token"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

951 :	"RPAR"
		- NEIGH  = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

952 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

952 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

954 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , DOT , if , prev , type , != , token , COMMA , }
		- PRED   = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , argument , }

954 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , DOT , if , prev , type , != , token , COMMA , }
		- PRED   = { if , t , == , token , LPAR , or , t , == , token , RPAR , }
		- SUCC   = { if , p , type , == , syms , argument , }

955 :	"if"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , prev , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , NUMBER , if , t , == , token , LSQB , }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

955 :	"t"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , prev , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , NUMBER , if , t , == , token , LSQB , }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

955 :	"=="
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , prev , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , NUMBER , if , t , == , token , LSQB , }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

955 :	"token"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , prev , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , NUMBER , if , t , == , token , LSQB , }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

955 :	"DOT"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , prev , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , != , token , NUMBER , if , t , == , token , LSQB , }
		- PRED   = { }
		- SUCC   = { if , prev , type , != , token , COMMA , }

956 :	"prevp"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , != , token , NUMBER , }

956 :	"preceding_leaf"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , != , token , NUMBER , }

956 :	"p"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , != , token , NUMBER , }

957 :	"if"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"!="
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"token"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

957 :	"NUMBER"
		- NEIGH  = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , t , == , token , LSQB , }

958 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

958 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

960 :	"if"
		- NEIGH  = { if , t , == , token , LSQB , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- SUCC   = { }

960 :	"t"
		- NEIGH  = { if , t , == , token , LSQB , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- SUCC   = { }

960 :	"=="
		- NEIGH  = { if , t , == , token , LSQB , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- SUCC   = { }

960 :	"token"
		- NEIGH  = { if , t , == , token , LSQB , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- SUCC   = { }

960 :	"LSQB"
		- NEIGH  = { if , t , == , token , LSQB , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , != , token , NUMBER , }
		- SUCC   = { }

961 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , LSQB , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

961 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , LSQB , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

963 :	"if"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

963 :	"prev"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

963 :	"type"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

963 :	"!="
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

963 :	"token"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

963 :	"COMMA"
		- NEIGH  = { if , prev , type , != , token , COMMA , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

964 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

964 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , != , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

966 :	"if"
		- NEIGH  = { if , p , type , == , syms , argument , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , EQUAL , if , prev , if , p , type , == , syms , decorator , }
		- PRED   = { if , prev , }
		- SUCC   = { }

966 :	"p"
		- NEIGH  = { if , p , type , == , syms , argument , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , EQUAL , if , prev , if , p , type , == , syms , decorator , }
		- PRED   = { if , prev , }
		- SUCC   = { }

966 :	"type"
		- NEIGH  = { if , p , type , == , syms , argument , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , EQUAL , if , prev , if , p , type , == , syms , decorator , }
		- PRED   = { if , prev , }
		- SUCC   = { }

966 :	"=="
		- NEIGH  = { if , p , type , == , syms , argument , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , EQUAL , if , prev , if , p , type , == , syms , decorator , }
		- PRED   = { if , prev , }
		- SUCC   = { }

966 :	"syms"
		- NEIGH  = { if , p , type , == , syms , argument , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , EQUAL , if , prev , if , p , type , == , syms , decorator , }
		- PRED   = { if , prev , }
		- SUCC   = { }

966 :	"argument"
		- NEIGH  = { if , p , type , == , syms , argument , }
		- PARENT = { if , p , type , == , syms , trailer , }
		- CHILD  = { if , t , == , token , EQUAL , if , prev , if , p , type , == , syms , decorator , }
		- PRED   = { if , prev , }
		- SUCC   = { }

968 :	"if"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

968 :	"t"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

968 :	"=="
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

968 :	"token"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

968 :	"EQUAL"
		- NEIGH  = { if , t , == , token , EQUAL , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , }

969 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

969 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , EQUAL , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

971 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , LPAR , if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { if , p , type , == , syms , decorator , }

971 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , LPAR , if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PRED   = { if , t , == , token , EQUAL , }
		- SUCC   = { if , p , type , == , syms , decorator , }

972 :	"prevp"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , == , token , LPAR , }

972 :	"preceding_leaf"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , == , token , LPAR , }

972 :	"p"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , == , token , LPAR , }

973 :	"if"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"=="
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"token"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

973 :	"LPAR"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , LPAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }

974 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , == , token , LPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

974 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , == , token , LPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

976 :	"if"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"prev"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"type"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"=="
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"token"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"EQUAL"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"or"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"prev"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"type"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"=="
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"token"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

976 :	"DOUBLESTAR"
		- NEIGH  = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , or , prevp , type , == , token , LPAR , }
		- SUCC   = { }

977 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

977 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , == , token , EQUAL , or , prev , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

979 :	"if"
		- NEIGH  = { if , p , type , == , syms , decorator , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , if , p , type , == , syms , dotted_name , }
		- PRED   = { if , prev , }
		- SUCC   = { }

979 :	"p"
		- NEIGH  = { if , p , type , == , syms , decorator , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , if , p , type , == , syms , dotted_name , }
		- PRED   = { if , prev , }
		- SUCC   = { }

979 :	"type"
		- NEIGH  = { if , p , type , == , syms , decorator , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , if , p , type , == , syms , dotted_name , }
		- PRED   = { if , prev , }
		- SUCC   = { }

979 :	"=="
		- NEIGH  = { if , p , type , == , syms , decorator , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , if , p , type , == , syms , dotted_name , }
		- PRED   = { if , prev , }
		- SUCC   = { }

979 :	"syms"
		- NEIGH  = { if , p , type , == , syms , decorator , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , if , p , type , == , syms , dotted_name , }
		- PRED   = { if , prev , }
		- SUCC   = { }

979 :	"decorator"
		- NEIGH  = { if , p , type , == , syms , decorator , }
		- PARENT = { if , p , type , == , syms , argument , }
		- CHILD  = { return , NO , if , p , type , == , syms , dotted_name , }
		- PRED   = { if , prev , }
		- SUCC   = { }

981 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , dotted_name , }

981 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , dotted_name , }

983 :	"if"
		- NEIGH  = { if , p , type , == , syms , dotted_name , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { if , prev , prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , if , p , type , == , syms , classdef , }
		- PRED   = { return , NO , }
		- SUCC   = { }

983 :	"p"
		- NEIGH  = { if , p , type , == , syms , dotted_name , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { if , prev , prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , if , p , type , == , syms , classdef , }
		- PRED   = { return , NO , }
		- SUCC   = { }

983 :	"type"
		- NEIGH  = { if , p , type , == , syms , dotted_name , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { if , prev , prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , if , p , type , == , syms , classdef , }
		- PRED   = { return , NO , }
		- SUCC   = { }

983 :	"=="
		- NEIGH  = { if , p , type , == , syms , dotted_name , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { if , prev , prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , if , p , type , == , syms , classdef , }
		- PRED   = { return , NO , }
		- SUCC   = { }

983 :	"syms"
		- NEIGH  = { if , p , type , == , syms , dotted_name , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { if , prev , prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , if , p , type , == , syms , classdef , }
		- PRED   = { return , NO , }
		- SUCC   = { }

983 :	"dotted_name"
		- NEIGH  = { if , p , type , == , syms , dotted_name , }
		- PARENT = { if , p , type , == , syms , decorator , }
		- CHILD  = { if , prev , prevp , preceding_leaf , p , if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , if , p , type , == , syms , classdef , }
		- PRED   = { return , NO , }
		- SUCC   = { }

984 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { prevp , preceding_leaf , p , }

984 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { prevp , preceding_leaf , p , }

985 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

985 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

987 :	"prevp"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { }
		- PRED   = { if , prev , }
		- SUCC   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }

987 :	"preceding_leaf"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { }
		- PRED   = { if , prev , }
		- SUCC   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }

987 :	"p"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { }
		- PRED   = { if , prev , }
		- SUCC   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }

988 :	"if"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"=="
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"token"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"AT"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"=="
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"token"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

988 :	"DOT"
		- NEIGH  = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { if , p , type , == , syms , classdef , }

989 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

989 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

991 :	"if"
		- NEIGH  = { if , p , type , == , syms , classdef , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { if , t , == , token , LPAR , if , prev , or , prev , type , == , token , LPAR , if , p , type , == , syms , subscript , }
		- PRED   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- SUCC   = { }

991 :	"p"
		- NEIGH  = { if , p , type , == , syms , classdef , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { if , t , == , token , LPAR , if , prev , or , prev , type , == , token , LPAR , if , p , type , == , syms , subscript , }
		- PRED   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- SUCC   = { }

991 :	"type"
		- NEIGH  = { if , p , type , == , syms , classdef , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { if , t , == , token , LPAR , if , prev , or , prev , type , == , token , LPAR , if , p , type , == , syms , subscript , }
		- PRED   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- SUCC   = { }

991 :	"=="
		- NEIGH  = { if , p , type , == , syms , classdef , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { if , t , == , token , LPAR , if , prev , or , prev , type , == , token , LPAR , if , p , type , == , syms , subscript , }
		- PRED   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- SUCC   = { }

991 :	"syms"
		- NEIGH  = { if , p , type , == , syms , classdef , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { if , t , == , token , LPAR , if , prev , or , prev , type , == , token , LPAR , if , p , type , == , syms , subscript , }
		- PRED   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- SUCC   = { }

991 :	"classdef"
		- NEIGH  = { if , p , type , == , syms , classdef , }
		- PARENT = { if , p , type , == , syms , dotted_name , }
		- CHILD  = { if , t , == , token , LPAR , if , prev , or , prev , type , == , token , LPAR , if , p , type , == , syms , subscript , }
		- PRED   = { if , prevp , or , prevp , type , == , token , AT , or , prevp , type , == , token , DOT , }
		- SUCC   = { }

992 :	"if"
		- NEIGH  = { if , t , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , LPAR , }

992 :	"t"
		- NEIGH  = { if , t , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , LPAR , }

992 :	"=="
		- NEIGH  = { if , t , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , LPAR , }

992 :	"token"
		- NEIGH  = { if , t , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , LPAR , }

992 :	"LPAR"
		- NEIGH  = { if , t , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , LPAR , }

993 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , LPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

993 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , LPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

995 :	"if"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"or"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"type"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"=="
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"token"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

995 :	"LPAR"
		- NEIGH  = { if , prev , or , prev , type , == , token , LPAR , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , LPAR , }
		- SUCC   = { if , p , type , == , syms , subscript , }

996 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , == , token , LPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

996 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , == , token , LPAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

998 :	"if"
		- NEIGH  = { if , p , type , == , syms , subscript , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { if , prev , if , p , type , == , syms , atom , }
		- PRED   = { if , prev , or , prev , type , == , token , LPAR , }
		- SUCC   = { }

998 :	"p"
		- NEIGH  = { if , p , type , == , syms , subscript , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { if , prev , if , p , type , == , syms , atom , }
		- PRED   = { if , prev , or , prev , type , == , token , LPAR , }
		- SUCC   = { }

998 :	"type"
		- NEIGH  = { if , p , type , == , syms , subscript , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { if , prev , if , p , type , == , syms , atom , }
		- PRED   = { if , prev , or , prev , type , == , token , LPAR , }
		- SUCC   = { }

998 :	"=="
		- NEIGH  = { if , p , type , == , syms , subscript , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { if , prev , if , p , type , == , syms , atom , }
		- PRED   = { if , prev , or , prev , type , == , token , LPAR , }
		- SUCC   = { }

998 :	"syms"
		- NEIGH  = { if , p , type , == , syms , subscript , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { if , prev , if , p , type , == , syms , atom , }
		- PRED   = { if , prev , or , prev , type , == , token , LPAR , }
		- SUCC   = { }

998 :	"subscript"
		- NEIGH  = { if , p , type , == , syms , subscript , }
		- PARENT = { if , p , type , == , syms , classdef , }
		- CHILD  = { if , prev , if , p , type , == , syms , atom , }
		- PRED   = { if , prev , or , prev , type , == , token , LPAR , }
		- SUCC   = { }

1000 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { assert , p , parent , is , not , if , p , parent , type , == , syms , subscriptlist , return , NO , return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , atom , }

1000 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { assert , p , parent , is , not , if , p , parent , type , == , syms , subscriptlist , return , NO , return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , atom , }

1001 :	"assert"
		- NEIGH  = { assert , p , parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , parent , type , == , syms , subscriptlist , }

1001 :	"p"
		- NEIGH  = { assert , p , parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , parent , type , == , syms , subscriptlist , }

1001 :	"parent"
		- NEIGH  = { assert , p , parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , parent , type , == , syms , subscriptlist , }

1001 :	"is"
		- NEIGH  = { assert , p , parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , parent , type , == , syms , subscriptlist , }

1001 :	"not"
		- NEIGH  = { assert , p , parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , parent , type , == , syms , subscriptlist , }

1002 :	"if"
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1002 :	"p"
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1002 :	"parent"
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1002 :	"type"
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1002 :	"=="
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1002 :	"syms"
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1002 :	"subscriptlist"
		- NEIGH  = { if , p , parent , type , == , syms , subscriptlist , }
		- PARENT = { if , prev , }
		- CHILD  = { return , SPACE , }
		- PRED   = { assert , p , parent , is , not , }
		- SUCC   = { return , NO , }

1003 :	"return"
		- NEIGH  = { return , SPACE , }
		- PARENT = { if , p , parent , type , == , syms , subscriptlist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1003 :	"SPACE"
		- NEIGH  = { return , SPACE , }
		- PARENT = { if , p , parent , type , == , syms , subscriptlist , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1005 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { if , p , parent , type , == , syms , subscriptlist , }
		- SUCC   = { return , NO , }

1005 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { if , p , parent , type , == , syms , subscriptlist , }
		- SUCC   = { return , NO , }

1008 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { return , NO , }
		- SUCC   = { }

1008 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { return , NO , }
		- SUCC   = { }

1010 :	"if"
		- NEIGH  = { if , p , type , == , syms , atom , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { if , prev , or , t , == , token , DOT , if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1010 :	"p"
		- NEIGH  = { if , p , type , == , syms , atom , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { if , prev , or , t , == , token , DOT , if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1010 :	"type"
		- NEIGH  = { if , p , type , == , syms , atom , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { if , prev , or , t , == , token , DOT , if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1010 :	"=="
		- NEIGH  = { if , p , type , == , syms , atom , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { if , prev , or , t , == , token , DOT , if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1010 :	"syms"
		- NEIGH  = { if , p , type , == , syms , atom , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { if , prev , or , t , == , token , DOT , if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1010 :	"atom"
		- NEIGH  = { if , p , type , == , syms , atom , }
		- PARENT = { if , p , type , == , syms , subscript , }
		- CHILD  = { if , prev , or , t , == , token , DOT , if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1011 :	"if"
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1011 :	"prev"
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1011 :	"or"
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1011 :	"t"
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1011 :	"=="
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1011 :	"token"
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1011 :	"DOT"
		- NEIGH  = { if , prev , or , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }

1013 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , t , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1013 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , t , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1015 :	"if"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1016 :	"p"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1016 :	"type"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1016 :	"=="
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1016 :	"syms"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1016 :	"listmaker"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1017 :	"or"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1017 :	"p"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1017 :	"type"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1017 :	"=="
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1017 :	"syms"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1017 :	"testlist_gexp"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1018 :	"or"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1018 :	"p"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1018 :	"type"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1018 :	"=="
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1018 :	"syms"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1018 :	"subscriptlist"
		- NEIGH  = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- PARENT = { if , p , type , == , syms , atom , }
		- CHILD  = { if , prev , if , p , type , == , syms , dictsetmaker , }
		- PRED   = { if , prev , or , t , == , token , DOT , }
		- SUCC   = { }

1021 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , dictsetmaker , }

1021 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , dictsetmaker , }

1022 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1022 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1024 :	"if"
		- NEIGH  = { if , p , type , == , syms , dictsetmaker , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { if , prev , if , prev , type , == , token , DOUBLESTAR , if , p , type , in , set , syms , factor , syms , star_expr , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1024 :	"p"
		- NEIGH  = { if , p , type , == , syms , dictsetmaker , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { if , prev , if , prev , type , == , token , DOUBLESTAR , if , p , type , in , set , syms , factor , syms , star_expr , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1024 :	"type"
		- NEIGH  = { if , p , type , == , syms , dictsetmaker , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { if , prev , if , prev , type , == , token , DOUBLESTAR , if , p , type , in , set , syms , factor , syms , star_expr , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1024 :	"=="
		- NEIGH  = { if , p , type , == , syms , dictsetmaker , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { if , prev , if , prev , type , == , token , DOUBLESTAR , if , p , type , in , set , syms , factor , syms , star_expr , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1024 :	"syms"
		- NEIGH  = { if , p , type , == , syms , dictsetmaker , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { if , prev , if , prev , type , == , token , DOUBLESTAR , if , p , type , in , set , syms , factor , syms , star_expr , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1024 :	"dictsetmaker"
		- NEIGH  = { if , p , type , == , syms , dictsetmaker , }
		- PARENT = { if , p , type , == , syms , listmaker , or , p , type , == , syms , testlist_gexp , or , p , type , == , syms , subscriptlist , }
		- CHILD  = { if , prev , if , prev , type , == , token , DOUBLESTAR , if , p , type , in , set , syms , factor , syms , star_expr , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1026 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , DOUBLESTAR , }

1026 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , prev , type , == , token , DOUBLESTAR , }

1027 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1027 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1029 :	"if"
		- NEIGH  = { if , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , in , set , syms , factor , syms , star_expr , }

1029 :	"prev"
		- NEIGH  = { if , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , in , set , syms , factor , syms , star_expr , }

1029 :	"type"
		- NEIGH  = { if , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , in , set , syms , factor , syms , star_expr , }

1029 :	"=="
		- NEIGH  = { if , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , in , set , syms , factor , syms , star_expr , }

1029 :	"token"
		- NEIGH  = { if , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , in , set , syms , factor , syms , star_expr , }

1029 :	"DOUBLESTAR"
		- NEIGH  = { if , prev , type , == , token , DOUBLESTAR , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prev , }
		- SUCC   = { if , p , type , in , set , syms , factor , syms , star_expr , }

1030 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1030 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1032 :	"if"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"p"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"type"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"in"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"set"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"syms"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"factor"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"syms"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1032 :	"star_expr"
		- NEIGH  = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- PARENT = { if , p , type , == , syms , dictsetmaker , }
		- CHILD  = { if , prev , if , p , type , == , syms , import_from , }
		- PRED   = { if , prev , type , == , token , DOUBLESTAR , }
		- SUCC   = { }

1034 :	"if"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , in , OPENING_BRACKETS , prevp_parent , prevp , parent , assert , prevp_parent , is , not , if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , import_from , }

1034 :	"prev"
		- NEIGH  = { if , prev , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { prevp , preceding_leaf , p , if , prevp , or , prevp , type , in , OPENING_BRACKETS , prevp_parent , prevp , parent , assert , prevp_parent , is , not , if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , import_from , }

1035 :	"prevp"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }

1035 :	"preceding_leaf"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }

1035 :	"p"
		- NEIGH  = { prevp , preceding_leaf , p , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }

1036 :	"if"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1036 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1036 :	"or"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1036 :	"prevp"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1036 :	"type"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1036 :	"in"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1036 :	"OPENING_BRACKETS"
		- NEIGH  = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { prevp , preceding_leaf , p , }
		- SUCC   = { prevp_parent , prevp , parent , }

1037 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1037 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1039 :	"prevp_parent"
		- NEIGH  = { prevp_parent , prevp , parent , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { assert , prevp_parent , is , not , }

1039 :	"prevp"
		- NEIGH  = { prevp_parent , prevp , parent , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { assert , prevp_parent , is , not , }

1039 :	"parent"
		- NEIGH  = { prevp_parent , prevp , parent , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { if , prevp , or , prevp , type , in , OPENING_BRACKETS , }
		- SUCC   = { assert , prevp_parent , is , not , }

1040 :	"assert"
		- NEIGH  = { assert , prevp_parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { prevp_parent , prevp , parent , }
		- SUCC   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }

1040 :	"prevp_parent"
		- NEIGH  = { assert , prevp_parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { prevp_parent , prevp , parent , }
		- SUCC   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }

1040 :	"is"
		- NEIGH  = { assert , prevp_parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { prevp_parent , prevp , parent , }
		- SUCC   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }

1040 :	"not"
		- NEIGH  = { assert , prevp_parent , is , not , }
		- PARENT = { if , prev , }
		- CHILD  = { }
		- PRED   = { prevp_parent , prevp , parent , }
		- SUCC   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }

1041 :	"if"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"prevp"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"type"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"=="
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"token"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"COLON"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"or"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"prevp_parent"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"type"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"in"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1041 :	"set"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1042 :	"syms"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1042 :	"subscript"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1042 :	"syms"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1042 :	"sliceop"
		- NEIGH  = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PRED   = { assert , prevp_parent , is , not , }
		- SUCC   = { if , t , == , token , NAME , or , t , == , token , NUMBER , }

1044 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }

1044 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }

1046 :	"if"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"prevp"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"type"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"=="
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"token"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"EQUAL"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"or"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"prevp_parent"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"type"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"=="
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"syms"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1046 :	"argument"
		- NEIGH  = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- PARENT = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- CHILD  = { return , NO , }
		- PRED   = { return , NO , }
		- SUCC   = { }

1047 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1047 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prevp , type , == , token , EQUAL , or , prevp_parent , type , == , syms , argument , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1049 :	"if"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"t"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"=="
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"token"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"NAME"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"or"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"t"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"=="
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"token"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1049 :	"NUMBER"
		- NEIGH  = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- PARENT = { if , prev , }
		- CHILD  = { return , NO , }
		- PRED   = { if , prevp , type , == , token , COLON , or , prevp_parent , type , in , set , syms , subscript , syms , sliceop , }
		- SUCC   = { }

1050 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1050 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , t , == , token , NAME , or , t , == , token , NUMBER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1052 :	"if"
		- NEIGH  = { if , p , type , == , syms , import_from , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { if , t , == , token , DOT , if , p , type , == , syms , sliceop , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1052 :	"p"
		- NEIGH  = { if , p , type , == , syms , import_from , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { if , t , == , token , DOT , if , p , type , == , syms , sliceop , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1052 :	"type"
		- NEIGH  = { if , p , type , == , syms , import_from , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { if , t , == , token , DOT , if , p , type , == , syms , sliceop , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1052 :	"=="
		- NEIGH  = { if , p , type , == , syms , import_from , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { if , t , == , token , DOT , if , p , type , == , syms , sliceop , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1052 :	"syms"
		- NEIGH  = { if , p , type , == , syms , import_from , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { if , t , == , token , DOT , if , p , type , == , syms , sliceop , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1052 :	"import_from"
		- NEIGH  = { if , p , type , == , syms , import_from , }
		- PARENT = { if , p , type , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { if , t , == , token , DOT , if , p , type , == , syms , sliceop , }
		- PRED   = { if , prev , }
		- SUCC   = { }

1053 :	"if"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { if , prev , or , prev , type , == , token , DOT , if , t , == , token , NAME , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , sliceop , }

1053 :	"t"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { if , prev , or , prev , type , == , token , DOT , if , t , == , token , NAME , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , sliceop , }

1053 :	"=="
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { if , prev , or , prev , type , == , token , DOT , if , t , == , token , NAME , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , sliceop , }

1053 :	"token"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { if , prev , or , prev , type , == , token , DOT , if , t , == , token , NAME , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , sliceop , }

1053 :	"DOT"
		- NEIGH  = { if , t , == , token , DOT , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { if , prev , or , prev , type , == , token , DOT , if , t , == , token , NAME , }
		- PRED   = { }
		- SUCC   = { if , p , type , == , syms , sliceop , }

1054 :	"if"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"or"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"type"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"=="
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"token"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1054 :	"DOT"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { return , NO , }
		- PRED   = { }
		- SUCC   = { if , t , == , token , NAME , }

1055 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1055 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1057 :	"if"
		- NEIGH  = { if , t , == , token , NAME , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { if , v , == , if , prev , or , prev , type , == , token , DOT , }
		- PRED   = { if , prev , or , prev , type , == , token , DOT , }
		- SUCC   = { }

1057 :	"t"
		- NEIGH  = { if , t , == , token , NAME , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { if , v , == , if , prev , or , prev , type , == , token , DOT , }
		- PRED   = { if , prev , or , prev , type , == , token , DOT , }
		- SUCC   = { }

1057 :	"=="
		- NEIGH  = { if , t , == , token , NAME , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { if , v , == , if , prev , or , prev , type , == , token , DOT , }
		- PRED   = { if , prev , or , prev , type , == , token , DOT , }
		- SUCC   = { }

1057 :	"token"
		- NEIGH  = { if , t , == , token , NAME , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { if , v , == , if , prev , or , prev , type , == , token , DOT , }
		- PRED   = { if , prev , or , prev , type , == , token , DOT , }
		- SUCC   = { }

1057 :	"NAME"
		- NEIGH  = { if , t , == , token , NAME , }
		- PARENT = { if , t , == , token , DOT , }
		- CHILD  = { if , v , == , if , prev , or , prev , type , == , token , DOT , }
		- PRED   = { if , prev , or , prev , type , == , token , DOT , }
		- SUCC   = { }

1058 :	"if"
		- NEIGH  = { if , v , == , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , SPACE , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , DOT , }

1058 :	"v"
		- NEIGH  = { if , v , == , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , SPACE , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , DOT , }

1058 :	"=="
		- NEIGH  = { if , v , == , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , SPACE , }
		- PRED   = { }
		- SUCC   = { if , prev , or , prev , type , == , token , DOT , }

1059 :	"return"
		- NEIGH  = { return , SPACE , }
		- PARENT = { if , v , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1059 :	"SPACE"
		- NEIGH  = { return , SPACE , }
		- PARENT = { if , v , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1061 :	"if"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"or"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"prev"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"type"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"=="
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"token"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1061 :	"DOT"
		- NEIGH  = { if , prev , or , prev , type , == , token , DOT , }
		- PARENT = { if , t , == , token , NAME , }
		- CHILD  = { return , NO , }
		- PRED   = { if , v , == , }
		- SUCC   = { }

1062 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1062 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , prev , or , prev , type , == , token , DOT , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1064 :	"if"
		- NEIGH  = { if , p , type , == , syms , sliceop , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

1064 :	"p"
		- NEIGH  = { if , p , type , == , syms , sliceop , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

1064 :	"type"
		- NEIGH  = { if , p , type , == , syms , sliceop , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

1064 :	"=="
		- NEIGH  = { if , p , type , == , syms , sliceop , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

1064 :	"syms"
		- NEIGH  = { if , p , type , == , syms , sliceop , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

1064 :	"sliceop"
		- NEIGH  = { if , p , type , == , syms , sliceop , }
		- PARENT = { if , p , type , == , syms , import_from , }
		- CHILD  = { return , NO , }
		- PRED   = { if , t , == , token , DOT , }
		- SUCC   = { }

1065 :	"return"
		- NEIGH  = { return , NO , }
		- PARENT = { if , p , type , == , syms , sliceop , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1065 :	"NO"
		- NEIGH  = { return , NO , }
		- PARENT = { if , p , type , == , syms , sliceop , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1067 :	"return"
		- NEIGH  = { return , SPACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , p , type , == , syms , varargslist , }
		- SUCC   = { }

1067 :	"SPACE"
		- NEIGH  = { return , SPACE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , p , type , == , syms , varargslist , }
		- SUCC   = { }

1070 :	"preceding_leaf"
		- NEIGH  = { preceding_leaf , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { whitespace , leaf , }
		- SUCC   = { is_delimiter , leaf , }

1070 :	"node"
		- NEIGH  = { preceding_leaf , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { whitespace , leaf , }
		- SUCC   = { is_delimiter , leaf , }

1072 :	"while"
		- NEIGH  = { while , node , }
		- PARENT = { }
		- CHILD  = { res , node , prev_sibling , if , res , node , node , parent , }
		- PRED   = { }
		- SUCC   = { return , }

1072 :	"node"
		- NEIGH  = { while , node , }
		- PARENT = { }
		- CHILD  = { res , node , prev_sibling , if , res , node , node , parent , }
		- PRED   = { }
		- SUCC   = { return , }

1073 :	"res"
		- NEIGH  = { res , node , prev_sibling , }
		- PARENT = { while , node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , res , }

1073 :	"node"
		- NEIGH  = { res , node , prev_sibling , }
		- PARENT = { while , node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , res , }

1073 :	"prev_sibling"
		- NEIGH  = { res , node , prev_sibling , }
		- PARENT = { while , node , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , res , }

1074 :	"if"
		- NEIGH  = { if , res , }
		- PARENT = { while , node , }
		- CHILD  = { if , isinstance , res , Leaf , try , return , list , res , leaves , except , IndexError , }
		- PRED   = { res , node , prev_sibling , }
		- SUCC   = { node , node , parent , }

1074 :	"res"
		- NEIGH  = { if , res , }
		- PARENT = { while , node , }
		- CHILD  = { if , isinstance , res , Leaf , try , return , list , res , leaves , except , IndexError , }
		- PRED   = { res , node , prev_sibling , }
		- SUCC   = { node , node , parent , }

1075 :	"if"
		- NEIGH  = { if , isinstance , res , Leaf , }
		- PARENT = { if , res , }
		- CHILD  = { return , res , }
		- PRED   = { }
		- SUCC   = { try , }

1075 :	"isinstance"
		- NEIGH  = { if , isinstance , res , Leaf , }
		- PARENT = { if , res , }
		- CHILD  = { return , res , }
		- PRED   = { }
		- SUCC   = { try , }

1075 :	"res"
		- NEIGH  = { if , isinstance , res , Leaf , }
		- PARENT = { if , res , }
		- CHILD  = { return , res , }
		- PRED   = { }
		- SUCC   = { try , }

1075 :	"Leaf"
		- NEIGH  = { if , isinstance , res , Leaf , }
		- PARENT = { if , res , }
		- CHILD  = { return , res , }
		- PRED   = { }
		- SUCC   = { try , }

1076 :	"return"
		- NEIGH  = { return , res , }
		- PARENT = { if , isinstance , res , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1076 :	"res"
		- NEIGH  = { return , res , }
		- PARENT = { if , isinstance , res , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1078 :	"try"
		- NEIGH  = { try , }
		- PARENT = { if , res , }
		- CHILD  = { }
		- PRED   = { if , isinstance , res , Leaf , }
		- SUCC   = { return , list , res , leaves , }

1079 :	"return"
		- NEIGH  = { return , list , res , leaves , }
		- PARENT = { if , res , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1079 :	"list"
		- NEIGH  = { return , list , res , leaves , }
		- PARENT = { if , res , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1079 :	"res"
		- NEIGH  = { return , list , res , leaves , }
		- PARENT = { if , res , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1079 :	"leaves"
		- NEIGH  = { return , list , res , leaves , }
		- PARENT = { if , res , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1081 :	"except"
		- NEIGH  = { except , IndexError , }
		- PARENT = { if , res , }
		- CHILD  = { return , }
		- PRED   = { return , list , res , leaves , }
		- SUCC   = { }

1081 :	"IndexError"
		- NEIGH  = { except , IndexError , }
		- PARENT = { if , res , }
		- CHILD  = { return , }
		- PRED   = { return , list , res , leaves , }
		- SUCC   = { }

1082 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1084 :	"node"
		- NEIGH  = { node , node , parent , }
		- PARENT = { while , node , }
		- CHILD  = { }
		- PRED   = { if , res , }
		- SUCC   = { }

1084 :	"node"
		- NEIGH  = { node , node , parent , }
		- PARENT = { while , node , }
		- CHILD  = { }
		- PRED   = { if , res , }
		- SUCC   = { }

1084 :	"parent"
		- NEIGH  = { node , node , parent , }
		- PARENT = { while , node , }
		- CHILD  = { }
		- PRED   = { if , res , }
		- SUCC   = { }

1085 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , node , }
		- SUCC   = { }

1088 :	"is_delimiter"
		- NEIGH  = { is_delimiter , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { preceding_leaf , node , }
		- SUCC   = { generate_comments , leaf , }

1088 :	"leaf"
		- NEIGH  = { is_delimiter , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { preceding_leaf , node , }
		- SUCC   = { generate_comments , leaf , }

1093 :	"if"
		- NEIGH  = { if , leaf , type , == , token , COMMA , }
		- PARENT = { }
		- CHILD  = { return , COMMA_PRIORITY , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , COMPARATORS , }

1093 :	"leaf"
		- NEIGH  = { if , leaf , type , == , token , COMMA , }
		- PARENT = { }
		- CHILD  = { return , COMMA_PRIORITY , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , COMPARATORS , }

1093 :	"type"
		- NEIGH  = { if , leaf , type , == , token , COMMA , }
		- PARENT = { }
		- CHILD  = { return , COMMA_PRIORITY , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , COMPARATORS , }

1093 :	"=="
		- NEIGH  = { if , leaf , type , == , token , COMMA , }
		- PARENT = { }
		- CHILD  = { return , COMMA_PRIORITY , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , COMPARATORS , }

1093 :	"token"
		- NEIGH  = { if , leaf , type , == , token , COMMA , }
		- PARENT = { }
		- CHILD  = { return , COMMA_PRIORITY , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , COMPARATORS , }

1093 :	"COMMA"
		- NEIGH  = { if , leaf , type , == , token , COMMA , }
		- PARENT = { }
		- CHILD  = { return , COMMA_PRIORITY , }
		- PRED   = { }
		- SUCC   = { if , leaf , type , in , COMPARATORS , }

1094 :	"return"
		- NEIGH  = { return , COMMA_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1094 :	"COMMA_PRIORITY"
		- NEIGH  = { return , COMMA_PRIORITY , }
		- PARENT = { if , leaf , type , == , token , COMMA , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1096 :	"if"
		- NEIGH  = { if , leaf , type , in , COMPARATORS , }
		- PARENT = { }
		- CHILD  = { return , COMPARATOR_PRIORITY , }
		- PRED   = { if , leaf , type , == , token , COMMA , }
		- SUCC   = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }

1096 :	"leaf"
		- NEIGH  = { if , leaf , type , in , COMPARATORS , }
		- PARENT = { }
		- CHILD  = { return , COMPARATOR_PRIORITY , }
		- PRED   = { if , leaf , type , == , token , COMMA , }
		- SUCC   = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }

1096 :	"type"
		- NEIGH  = { if , leaf , type , in , COMPARATORS , }
		- PARENT = { }
		- CHILD  = { return , COMPARATOR_PRIORITY , }
		- PRED   = { if , leaf , type , == , token , COMMA , }
		- SUCC   = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }

1096 :	"in"
		- NEIGH  = { if , leaf , type , in , COMPARATORS , }
		- PARENT = { }
		- CHILD  = { return , COMPARATOR_PRIORITY , }
		- PRED   = { if , leaf , type , == , token , COMMA , }
		- SUCC   = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }

1096 :	"COMPARATORS"
		- NEIGH  = { if , leaf , type , in , COMPARATORS , }
		- PARENT = { }
		- CHILD  = { return , COMPARATOR_PRIORITY , }
		- PRED   = { if , leaf , type , == , token , COMMA , }
		- SUCC   = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }

1097 :	"return"
		- NEIGH  = { return , COMPARATOR_PRIORITY , }
		- PARENT = { if , leaf , type , in , COMPARATORS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1097 :	"COMPARATOR_PRIORITY"
		- NEIGH  = { return , COMPARATOR_PRIORITY , }
		- PARENT = { if , leaf , type , in , COMPARATORS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1099 :	"if"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1100 :	"leaf"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1100 :	"type"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1100 :	"in"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1100 :	"MATH_OPERATORS"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1101 :	"or"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1101 :	"leaf"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1101 :	"parent"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"or"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"leaf"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"parent"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"type"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"not"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"in"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"set"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"syms"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"factor"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"syms"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1102 :	"star_expr"
		- NEIGH  = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- PARENT = { }
		- CHILD  = { return , MATH_PRIORITY , }
		- PRED   = { if , leaf , type , in , COMPARATORS , }
		- SUCC   = { return , }

1104 :	"return"
		- NEIGH  = { return , MATH_PRIORITY , }
		- PARENT = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1104 :	"MATH_PRIORITY"
		- NEIGH  = { return , MATH_PRIORITY , }
		- PARENT = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1106 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , leaf , type , in , MATH_OPERATORS , or , leaf , parent , or , leaf , parent , type , not , in , set , syms , factor , syms , star_expr , }
		- SUCC   = { }

1109 :	"generate_comments"
		- NEIGH  = { generate_comments , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_delimiter , leaf , }
		- SUCC   = { make_comment , content , }

1109 :	"leaf"
		- NEIGH  = { generate_comments , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_delimiter , leaf , }
		- SUCC   = { make_comment , content , }

1128 :	"p"
		- NEIGH  = { p , leaf , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , }

1128 :	"leaf"
		- NEIGH  = { p , leaf , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , }

1128 :	"prefix"
		- NEIGH  = { p , leaf , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , p , }

1129 :	"if"
		- NEIGH  = { if , p , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { p , leaf , prefix , }
		- SUCC   = { if , not , in , p , }

1129 :	"p"
		- NEIGH  = { if , p , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { p , leaf , prefix , }
		- SUCC   = { if , not , in , p , }

1130 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , p , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1132 :	"if"
		- NEIGH  = { if , not , in , p , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , p , }
		- SUCC   = { nlines , }

1132 :	"not"
		- NEIGH  = { if , not , in , p , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , p , }
		- SUCC   = { nlines , }

1132 :	"in"
		- NEIGH  = { if , not , in , p , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , p , }
		- SUCC   = { nlines , }

1132 :	"p"
		- NEIGH  = { if , not , in , p , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , p , }
		- SUCC   = { nlines , }

1133 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , not , in , p , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1135 :	"nlines"
		- NEIGH  = { nlines , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , not , in , p , }
		- SUCC   = { for , tuple , index , line , enumerate , p , split , }

1136 :	"for"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1136 :	"tuple"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1136 :	"index"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1136 :	"line"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1136 :	"enumerate"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1136 :	"p"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1136 :	"split"
		- NEIGH  = { for , tuple , index , line , enumerate , p , split , }
		- PARENT = { }
		- CHILD  = { line , line , lstrip , if , line , if , line , startswith , if , index , == , or , leaf , type , != , token , ENDMARKER , yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , nlines , }
		- PRED   = { nlines , }
		- SUCC   = { }

1137 :	"line"
		- NEIGH  = { line , line , lstrip , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , line , }

1137 :	"line"
		- NEIGH  = { line , line , lstrip , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , line , }

1137 :	"lstrip"
		- NEIGH  = { line , line , lstrip , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , line , }

1138 :	"if"
		- NEIGH  = { if , line , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { nlines , += , }
		- PRED   = { line , line , lstrip , }
		- SUCC   = { if , line , startswith , }

1138 :	"line"
		- NEIGH  = { if , line , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { nlines , += , }
		- PRED   = { line , line , lstrip , }
		- SUCC   = { if , line , startswith , }

1139 :	"nlines"
		- NEIGH  = { nlines , += , }
		- PARENT = { if , line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1139 :	"+="
		- NEIGH  = { nlines , += , }
		- PARENT = { if , line , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1140 :	"if"
		- NEIGH  = { if , line , startswith , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { continue , }
		- PRED   = { if , line , }
		- SUCC   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }

1140 :	"line"
		- NEIGH  = { if , line , startswith , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { continue , }
		- PRED   = { if , line , }
		- SUCC   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }

1140 :	"startswith"
		- NEIGH  = { if , line , startswith , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { continue , }
		- PRED   = { if , line , }
		- SUCC   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }

1141 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { if , line , startswith , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1143 :	"if"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"index"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"=="
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"or"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"leaf"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"type"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"!="
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"token"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1143 :	"ENDMARKER"
		- NEIGH  = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { comment_type , token , COMMENT , comment_type , STANDALONE_COMMENT , }
		- PRED   = { if , line , startswith , }
		- SUCC   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }

1144 :	"comment_type"
		- NEIGH  = { comment_type , token , COMMENT , }
		- PARENT = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_type , STANDALONE_COMMENT , }

1144 :	"token"
		- NEIGH  = { comment_type , token , COMMENT , }
		- PARENT = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_type , STANDALONE_COMMENT , }

1144 :	"COMMENT"
		- NEIGH  = { comment_type , token , COMMENT , }
		- PARENT = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_type , STANDALONE_COMMENT , }

1146 :	"comment_type"
		- NEIGH  = { comment_type , STANDALONE_COMMENT , }
		- PARENT = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- CHILD  = { }
		- PRED   = { comment_type , token , COMMENT , }
		- SUCC   = { }

1146 :	"STANDALONE_COMMENT"
		- NEIGH  = { comment_type , STANDALONE_COMMENT , }
		- PARENT = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- CHILD  = { }
		- PRED   = { comment_type , token , COMMENT , }
		- SUCC   = { }

1147 :	"yield"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"Leaf"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"comment_type"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"make_comment"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"line"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"prefix"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"*"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1147 :	"nlines"
		- NEIGH  = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { if , index , == , or , leaf , type , != , token , ENDMARKER , }
		- SUCC   = { nlines , }

1149 :	"nlines"
		- NEIGH  = { nlines , }
		- PARENT = { for , tuple , index , line , enumerate , p , split , }
		- CHILD  = { }
		- PRED   = { yield , Leaf , comment_type , make_comment , line , prefix , * , nlines , }
		- SUCC   = { }

1152 :	"make_comment"
		- NEIGH  = { make_comment , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { generate_comments , leaf , }
		- SUCC   = { split_line , line , line_length , inner , py36 , }

1152 :	"content"
		- NEIGH  = { make_comment , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { generate_comments , leaf , }
		- SUCC   = { split_line , line , line_length , inner , py36 , }

1153 :	"content"
		- NEIGH  = { content , content , rstrip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , }

1153 :	"content"
		- NEIGH  = { content , content , rstrip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , }

1153 :	"rstrip"
		- NEIGH  = { content , content , rstrip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , }

1154 :	"if"
		- NEIGH  = { if , content , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { content , content , rstrip , }
		- SUCC   = { if , content , == , }

1154 :	"content"
		- NEIGH  = { if , content , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { content , content , rstrip , }
		- SUCC   = { if , content , == , }

1155 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1157 :	"if"
		- NEIGH  = { if , content , == , }
		- PARENT = { }
		- CHILD  = { content , content , }
		- PRED   = { if , content , }
		- SUCC   = { if , content , or , content , not , in , set , }

1157 :	"content"
		- NEIGH  = { if , content , == , }
		- PARENT = { }
		- CHILD  = { content , content , }
		- PRED   = { if , content , }
		- SUCC   = { if , content , or , content , not , in , set , }

1157 :	"=="
		- NEIGH  = { if , content , == , }
		- PARENT = { }
		- CHILD  = { content , content , }
		- PRED   = { if , content , }
		- SUCC   = { if , content , or , content , not , in , set , }

1158 :	"content"
		- NEIGH  = { content , content , }
		- PARENT = { if , content , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1158 :	"content"
		- NEIGH  = { content , content , }
		- PARENT = { if , content , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1159 :	"if"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1159 :	"content"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1159 :	"or"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1159 :	"content"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1159 :	"not"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1159 :	"in"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1159 :	"set"
		- NEIGH  = { if , content , or , content , not , in , set , }
		- PARENT = { }
		- CHILD  = { content , + , content , }
		- PRED   = { if , content , == , }
		- SUCC   = { return , + , content , }

1160 :	"content"
		- NEIGH  = { content , + , content , }
		- PARENT = { if , content , or , content , not , in , set , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1160 :	"+"
		- NEIGH  = { content , + , content , }
		- PARENT = { if , content , or , content , not , in , set , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1160 :	"content"
		- NEIGH  = { content , + , content , }
		- PARENT = { if , content , or , content , not , in , set , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1161 :	"return"
		- NEIGH  = { return , + , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , or , content , not , in , set , }
		- SUCC   = { }

1161 :	"+"
		- NEIGH  = { return , + , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , or , content , not , in , set , }
		- SUCC   = { }

1161 :	"content"
		- NEIGH  = { return , + , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , or , content , not , in , set , }
		- SUCC   = { }

1164 :	"split_line"
		- NEIGH  = { split_line , line , line_length , inner , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { make_comment , content , }
		- SUCC   = { left_hand_split , line , py36 , }

1165 :	"line"
		- NEIGH  = { split_line , line , line_length , inner , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { make_comment , content , }
		- SUCC   = { left_hand_split , line , py36 , }

1165 :	"line_length"
		- NEIGH  = { split_line , line , line_length , inner , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { make_comment , content , }
		- SUCC   = { left_hand_split , line , py36 , }

1165 :	"inner"
		- NEIGH  = { split_line , line , line_length , inner , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { make_comment , content , }
		- SUCC   = { left_hand_split , line , py36 , }

1165 :	"py36"
		- NEIGH  = { split_line , line , line_length , inner , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { make_comment , content , }
		- SUCC   = { left_hand_split , line , py36 , }

1177 :	"line_str"
		- NEIGH  = { line_str , str , line , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , line_str , <= , line_length , or , not , in , line_str , }

1177 :	"str"
		- NEIGH  = { line_str , str , line , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , line_str , <= , line_length , or , not , in , line_str , }

1177 :	"line"
		- NEIGH  = { line_str , str , line , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , line_str , <= , line_length , or , not , in , line_str , }

1177 :	"strip"
		- NEIGH  = { line_str , str , line , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , line_str , <= , line_length , or , not , in , line_str , }

1178 :	"if"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"len"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"line_str"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"<="
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"line_length"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"or"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"not"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"in"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1178 :	"line_str"
		- NEIGH  = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- PARENT = { }
		- CHILD  = { yield , line , return , }
		- PRED   = { line_str , str , line , strip , }
		- SUCC   = { if , line , is_def , }

1179 :	"yield"
		- NEIGH  = { yield , line , }
		- PARENT = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

1179 :	"line"
		- NEIGH  = { yield , line , }
		- PARENT = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , }

1180 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- CHILD  = { }
		- PRED   = { yield , line , }
		- SUCC   = { }

1182 :	"if"
		- NEIGH  = { if , line , is_def , }
		- PARENT = { }
		- CHILD  = { split_funcs , list , left_hand_split , if , line , inside_brackets , }
		- PRED   = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- SUCC   = { for , split_func , split_funcs , }

1182 :	"line"
		- NEIGH  = { if , line , is_def , }
		- PARENT = { }
		- CHILD  = { split_funcs , list , left_hand_split , if , line , inside_brackets , }
		- PRED   = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- SUCC   = { for , split_func , split_funcs , }

1182 :	"is_def"
		- NEIGH  = { if , line , is_def , }
		- PARENT = { }
		- CHILD  = { split_funcs , list , left_hand_split , if , line , inside_brackets , }
		- PRED   = { if , len , line_str , <= , line_length , or , not , in , line_str , }
		- SUCC   = { for , split_func , split_funcs , }

1183 :	"split_funcs"
		- NEIGH  = { split_funcs , list , left_hand_split , }
		- PARENT = { if , line , is_def , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , line , inside_brackets , }

1183 :	"list"
		- NEIGH  = { split_funcs , list , left_hand_split , }
		- PARENT = { if , line , is_def , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , line , inside_brackets , }

1183 :	"left_hand_split"
		- NEIGH  = { split_funcs , list , left_hand_split , }
		- PARENT = { if , line , is_def , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , line , inside_brackets , }

1184 :	"if"
		- NEIGH  = { if , line , inside_brackets , }
		- PARENT = { if , line , is_def , }
		- CHILD  = { split_funcs , list , delimiter_split , if , not , in , line_str , split_funcs , list , right_hand_split , }
		- PRED   = { split_funcs , list , left_hand_split , }
		- SUCC   = { }

1184 :	"line"
		- NEIGH  = { if , line , inside_brackets , }
		- PARENT = { if , line , is_def , }
		- CHILD  = { split_funcs , list , delimiter_split , if , not , in , line_str , split_funcs , list , right_hand_split , }
		- PRED   = { split_funcs , list , left_hand_split , }
		- SUCC   = { }

1184 :	"inside_brackets"
		- NEIGH  = { if , line , inside_brackets , }
		- PARENT = { if , line , is_def , }
		- CHILD  = { split_funcs , list , delimiter_split , if , not , in , line_str , split_funcs , list , right_hand_split , }
		- PRED   = { split_funcs , list , left_hand_split , }
		- SUCC   = { }

1185 :	"split_funcs"
		- NEIGH  = { split_funcs , list , delimiter_split , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , line_str , }

1185 :	"list"
		- NEIGH  = { split_funcs , list , delimiter_split , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , line_str , }

1185 :	"delimiter_split"
		- NEIGH  = { split_funcs , list , delimiter_split , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , line_str , }

1186 :	"if"
		- NEIGH  = { if , not , in , line_str , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { split_funcs , append , right_hand_split , }
		- PRED   = { split_funcs , list , delimiter_split , }
		- SUCC   = { split_funcs , list , right_hand_split , }

1186 :	"not"
		- NEIGH  = { if , not , in , line_str , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { split_funcs , append , right_hand_split , }
		- PRED   = { split_funcs , list , delimiter_split , }
		- SUCC   = { split_funcs , list , right_hand_split , }

1186 :	"in"
		- NEIGH  = { if , not , in , line_str , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { split_funcs , append , right_hand_split , }
		- PRED   = { split_funcs , list , delimiter_split , }
		- SUCC   = { split_funcs , list , right_hand_split , }

1186 :	"line_str"
		- NEIGH  = { if , not , in , line_str , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { split_funcs , append , right_hand_split , }
		- PRED   = { split_funcs , list , delimiter_split , }
		- SUCC   = { split_funcs , list , right_hand_split , }

1189 :	"split_funcs"
		- NEIGH  = { split_funcs , append , right_hand_split , }
		- PARENT = { if , not , in , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1189 :	"append"
		- NEIGH  = { split_funcs , append , right_hand_split , }
		- PARENT = { if , not , in , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1189 :	"right_hand_split"
		- NEIGH  = { split_funcs , append , right_hand_split , }
		- PARENT = { if , not , in , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1191 :	"split_funcs"
		- NEIGH  = { split_funcs , list , right_hand_split , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { }
		- PRED   = { if , not , in , line_str , }
		- SUCC   = { }

1191 :	"list"
		- NEIGH  = { split_funcs , list , right_hand_split , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { }
		- PRED   = { if , not , in , line_str , }
		- SUCC   = { }

1191 :	"right_hand_split"
		- NEIGH  = { split_funcs , list , right_hand_split , }
		- PARENT = { if , line , inside_brackets , }
		- CHILD  = { }
		- PRED   = { if , not , in , line_str , }
		- SUCC   = { }

1192 :	"for"
		- NEIGH  = { for , split_func , split_funcs , }
		- PARENT = { }
		- CHILD  = { result , list , try , for , l , split_func , line , py36 , py36 , except , CannotSplit , cs , yield , line , }
		- PRED   = { if , line , is_def , }
		- SUCC   = { }

1192 :	"split_func"
		- NEIGH  = { for , split_func , split_funcs , }
		- PARENT = { }
		- CHILD  = { result , list , try , for , l , split_func , line , py36 , py36 , except , CannotSplit , cs , yield , line , }
		- PRED   = { if , line , is_def , }
		- SUCC   = { }

1192 :	"split_funcs"
		- NEIGH  = { for , split_func , split_funcs , }
		- PARENT = { }
		- CHILD  = { result , list , try , for , l , split_func , line , py36 , py36 , except , CannotSplit , cs , yield , line , }
		- PRED   = { if , line , is_def , }
		- SUCC   = { }

1196 :	"result"
		- NEIGH  = { result , list , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { try , }

1196 :	"list"
		- NEIGH  = { result , list , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { try , }

1197 :	"try"
		- NEIGH  = { try , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { }
		- PRED   = { result , list , }
		- SUCC   = { for , l , split_func , line , py36 , py36 , }

1198 :	"for"
		- NEIGH  = { for , l , split_func , line , py36 , py36 , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { if , str , l , strip , == , line_str , result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PRED   = { try , }
		- SUCC   = { except , CannotSplit , cs , }

1198 :	"l"
		- NEIGH  = { for , l , split_func , line , py36 , py36 , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { if , str , l , strip , == , line_str , result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PRED   = { try , }
		- SUCC   = { except , CannotSplit , cs , }

1198 :	"split_func"
		- NEIGH  = { for , l , split_func , line , py36 , py36 , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { if , str , l , strip , == , line_str , result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PRED   = { try , }
		- SUCC   = { except , CannotSplit , cs , }

1198 :	"line"
		- NEIGH  = { for , l , split_func , line , py36 , py36 , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { if , str , l , strip , == , line_str , result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PRED   = { try , }
		- SUCC   = { except , CannotSplit , cs , }

1198 :	"py36"
		- NEIGH  = { for , l , split_func , line , py36 , py36 , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { if , str , l , strip , == , line_str , result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PRED   = { try , }
		- SUCC   = { except , CannotSplit , cs , }

1198 :	"py36"
		- NEIGH  = { for , l , split_func , line , py36 , py36 , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { if , str , l , strip , == , line_str , result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PRED   = { try , }
		- SUCC   = { except , CannotSplit , cs , }

1199 :	"if"
		- NEIGH  = { if , str , l , strip , == , line_str , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { }
		- SUCC   = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }

1199 :	"str"
		- NEIGH  = { if , str , l , strip , == , line_str , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { }
		- SUCC   = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }

1199 :	"l"
		- NEIGH  = { if , str , l , strip , == , line_str , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { }
		- SUCC   = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }

1199 :	"strip"
		- NEIGH  = { if , str , l , strip , == , line_str , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { }
		- SUCC   = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }

1199 :	"=="
		- NEIGH  = { if , str , l , strip , == , line_str , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { }
		- SUCC   = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }

1199 :	"line_str"
		- NEIGH  = { if , str , l , strip , == , line_str , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { }
		- SUCC   = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }

1200 :	"raise"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { if , str , l , strip , == , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1200 :	"CannotSplit"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { if , str , l , strip , == , line_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1202 :	"result"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1202 :	"extend"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"split_line"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"l"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"line_length"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"line_length"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"inner"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"py36"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1203 :	"py36"
		- NEIGH  = { result , extend , split_line , l , line_length , line_length , inner , py36 , py36 , }
		- PARENT = { for , l , split_func , line , py36 , py36 , }
		- CHILD  = { }
		- PRED   = { if , str , l , strip , == , line_str , }
		- SUCC   = { }

1205 :	"except"
		- NEIGH  = { except , CannotSplit , cs , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { continue , yield , from , result , break , }
		- PRED   = { for , l , split_func , line , py36 , py36 , }
		- SUCC   = { yield , line , }

1205 :	"CannotSplit"
		- NEIGH  = { except , CannotSplit , cs , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { continue , yield , from , result , break , }
		- PRED   = { for , l , split_func , line , py36 , py36 , }
		- SUCC   = { yield , line , }

1205 :	"cs"
		- NEIGH  = { except , CannotSplit , cs , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { continue , yield , from , result , break , }
		- PRED   = { for , l , split_func , line , py36 , py36 , }
		- SUCC   = { yield , line , }

1206 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { except , CannotSplit , cs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , from , result , }

1209 :	"yield"
		- NEIGH  = { yield , from , result , }
		- PARENT = { except , CannotSplit , cs , }
		- CHILD  = { }
		- PRED   = { continue , }
		- SUCC   = { break , }

1209 :	"from"
		- NEIGH  = { yield , from , result , }
		- PARENT = { except , CannotSplit , cs , }
		- CHILD  = { }
		- PRED   = { continue , }
		- SUCC   = { break , }

1209 :	"result"
		- NEIGH  = { yield , from , result , }
		- PARENT = { except , CannotSplit , cs , }
		- CHILD  = { }
		- PRED   = { continue , }
		- SUCC   = { break , }

1210 :	"break"
		- NEIGH  = { break , }
		- PARENT = { except , CannotSplit , cs , }
		- CHILD  = { }
		- PRED   = { yield , from , result , }
		- SUCC   = { }

1213 :	"yield"
		- NEIGH  = { yield , line , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { }
		- PRED   = { except , CannotSplit , cs , }
		- SUCC   = { }

1213 :	"line"
		- NEIGH  = { yield , line , }
		- PARENT = { for , split_func , split_funcs , }
		- CHILD  = { }
		- PRED   = { except , CannotSplit , cs , }
		- SUCC   = { }

1216 :	"left_hand_split"
		- NEIGH  = { left_hand_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { split_line , line , line_length , inner , py36 , }
		- SUCC   = { right_hand_split , line , py36 , }

1216 :	"line"
		- NEIGH  = { left_hand_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { split_line , line , line_length , inner , py36 , }
		- SUCC   = { right_hand_split , line , py36 , }

1216 :	"py36"
		- NEIGH  = { left_hand_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { split_line , line , line_length , inner , py36 , }
		- SUCC   = { right_hand_split , line , py36 , }

1222 :	"head"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1222 :	"Line"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1222 :	"depth"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1222 :	"line"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1222 :	"depth"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1223 :	"body"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1223 :	"Line"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1223 :	"depth"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1223 :	"line"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1223 :	"depth"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1223 :	"+"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1223 :	"inside_brackets"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1224 :	"tail"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1224 :	"Line"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1224 :	"depth"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1224 :	"line"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1224 :	"depth"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1225 :	"tail_leaves"
		- NEIGH  = { tail_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail , Line , depth , line , depth , }
		- SUCC   = { body_leaves , list , }

1225 :	"list"
		- NEIGH  = { tail_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail , Line , depth , line , depth , }
		- SUCC   = { body_leaves , list , }

1226 :	"body_leaves"
		- NEIGH  = { body_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail_leaves , list , }
		- SUCC   = { head_leaves , list , }

1226 :	"list"
		- NEIGH  = { body_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail_leaves , list , }
		- SUCC   = { head_leaves , list , }

1227 :	"head_leaves"
		- NEIGH  = { head_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body_leaves , list , }
		- SUCC   = { current_leaves , head_leaves , }

1227 :	"list"
		- NEIGH  = { head_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body_leaves , list , }
		- SUCC   = { current_leaves , head_leaves , }

1228 :	"current_leaves"
		- NEIGH  = { current_leaves , head_leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head_leaves , list , }
		- SUCC   = { matching_bracket , }

1228 :	"head_leaves"
		- NEIGH  = { current_leaves , head_leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head_leaves , list , }
		- SUCC   = { matching_bracket , }

1229 :	"matching_bracket"
		- NEIGH  = { matching_bracket , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_leaves , head_leaves , }
		- SUCC   = { for , leaf , line , leaves , }

1230 :	"for"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , current_leaves , append , leaf , if , current_leaves , is , head_leaves , }
		- PRED   = { matching_bracket , }
		- SUCC   = { if , body_leaves , }

1230 :	"leaf"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , current_leaves , append , leaf , if , current_leaves , is , head_leaves , }
		- PRED   = { matching_bracket , }
		- SUCC   = { if , body_leaves , }

1230 :	"line"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , current_leaves , append , leaf , if , current_leaves , is , head_leaves , }
		- PRED   = { matching_bracket , }
		- SUCC   = { if , body_leaves , }

1230 :	"leaves"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , current_leaves , append , leaf , if , current_leaves , is , head_leaves , }
		- PRED   = { matching_bracket , }
		- SUCC   = { if , body_leaves , }

1231 :	"if"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1232 :	"current_leaves"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1232 :	"is"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1232 :	"body_leaves"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1233 :	"or"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1233 :	"leaf"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1233 :	"type"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1233 :	"in"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1233 :	"CLOSING_BRACKETS"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1234 :	"or"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1234 :	"leaf"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1234 :	"opening_bracket"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1234 :	"is"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1234 :	"matching_bracket"
		- NEIGH  = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1236 :	"current_leaves"
		- NEIGH  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PARENT = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1236 :	"tail_leaves"
		- NEIGH  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PARENT = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1236 :	"if-exp"
		- NEIGH  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PARENT = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1236 :	"body_leaves"
		- NEIGH  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PARENT = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1236 :	"else-exp"
		- NEIGH  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PARENT = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1236 :	"head_leaves"
		- NEIGH  = { current_leaves , tail_leaves , if-exp , body_leaves , else-exp , head_leaves , }
		- PARENT = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1237 :	"current_leaves"
		- NEIGH  = { current_leaves , append , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- SUCC   = { if , current_leaves , is , head_leaves , }

1237 :	"append"
		- NEIGH  = { current_leaves , append , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- SUCC   = { if , current_leaves , is , head_leaves , }

1237 :	"leaf"
		- NEIGH  = { current_leaves , append , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , current_leaves , is , body_leaves , or , leaf , type , in , CLOSING_BRACKETS , or , leaf , opening_bracket , is , matching_bracket , }
		- SUCC   = { if , current_leaves , is , head_leaves , }

1238 :	"if"
		- NEIGH  = { if , current_leaves , is , head_leaves , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1238 :	"current_leaves"
		- NEIGH  = { if , current_leaves , is , head_leaves , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1238 :	"is"
		- NEIGH  = { if , current_leaves , is , head_leaves , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1238 :	"head_leaves"
		- NEIGH  = { if , current_leaves , is , head_leaves , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1239 :	"if"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { if , current_leaves , is , head_leaves , }
		- CHILD  = { matching_bracket , leaf , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1239 :	"leaf"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { if , current_leaves , is , head_leaves , }
		- CHILD  = { matching_bracket , leaf , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1239 :	"type"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { if , current_leaves , is , head_leaves , }
		- CHILD  = { matching_bracket , leaf , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1239 :	"in"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { if , current_leaves , is , head_leaves , }
		- CHILD  = { matching_bracket , leaf , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1239 :	"OPENING_BRACKETS"
		- NEIGH  = { if , leaf , type , in , OPENING_BRACKETS , }
		- PARENT = { if , current_leaves , is , head_leaves , }
		- CHILD  = { matching_bracket , leaf , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1240 :	"matching_bracket"
		- NEIGH  = { matching_bracket , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { current_leaves , body_leaves , }

1240 :	"leaf"
		- NEIGH  = { matching_bracket , leaf , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { current_leaves , body_leaves , }

1241 :	"current_leaves"
		- NEIGH  = { current_leaves , body_leaves , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { matching_bracket , leaf , }
		- SUCC   = { }

1241 :	"body_leaves"
		- NEIGH  = { current_leaves , body_leaves , }
		- PARENT = { if , leaf , type , in , OPENING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { matching_bracket , leaf , }
		- SUCC   = { }

1243 :	"if"
		- NEIGH  = { if , body_leaves , }
		- PARENT = { }
		- CHILD  = { normalize_prefix , body_leaves , inside_brackets , }
		- PRED   = { for , leaf , line , leaves , }
		- SUCC   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }

1243 :	"body_leaves"
		- NEIGH  = { if , body_leaves , }
		- PARENT = { }
		- CHILD  = { normalize_prefix , body_leaves , inside_brackets , }
		- PRED   = { for , leaf , line , leaves , }
		- SUCC   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }

1244 :	"normalize_prefix"
		- NEIGH  = { normalize_prefix , body_leaves , inside_brackets , }
		- PARENT = { if , body_leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1244 :	"body_leaves"
		- NEIGH  = { normalize_prefix , body_leaves , inside_brackets , }
		- PARENT = { if , body_leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1244 :	"inside_brackets"
		- NEIGH  = { normalize_prefix , body_leaves , inside_brackets , }
		- PARENT = { if , body_leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1246 :	"for"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1246 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1246 :	"result"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1246 :	"leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1246 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"head"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"head_leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"body"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"body_leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"tail"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1247 :	"tail_leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1249 :	"for"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- CHILD  = { result , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , }
		- PRED   = { }
		- SUCC   = { }

1249 :	"leaf"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- CHILD  = { result , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , }
		- PRED   = { }
		- SUCC   = { }

1249 :	"leaves"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- CHILD  = { result , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , }
		- PRED   = { }
		- SUCC   = { }

1250 :	"result"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1250 :	"append"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1250 :	"leaf"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1250 :	"preformatted"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1251 :	"comment_after"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1251 :	"line"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1251 :	"comments"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1251 :	"get"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1251 :	"id"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1251 :	"leaf"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1252 :	"if"
		- NEIGH  = { if , comment_after , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { result , append , comment_after , preformatted , }
		- PRED   = { comment_after , line , comments , get , id , leaf , }
		- SUCC   = { }

1252 :	"comment_after"
		- NEIGH  = { if , comment_after , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { result , append , comment_after , preformatted , }
		- PRED   = { comment_after , line , comments , get , id , leaf , }
		- SUCC   = { }

1253 :	"result"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1253 :	"append"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1253 :	"comment_after"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1253 :	"preformatted"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1254 :	"split_succeeded_or_raise"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1254 :	"head"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1254 :	"body"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1254 :	"tail"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1255 :	"for"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1255 :	"result"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1255 :	"tuple"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1255 :	"head"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1255 :	"body"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1255 :	"tail"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1256 :	"if"
		- NEIGH  = { if , result , }
		- PARENT = { for , result , tuple , head , body , tail , }
		- CHILD  = { yield , result , }
		- PRED   = { }
		- SUCC   = { }

1256 :	"result"
		- NEIGH  = { if , result , }
		- PARENT = { for , result , tuple , head , body , tail , }
		- CHILD  = { yield , result , }
		- PRED   = { }
		- SUCC   = { }

1257 :	"yield"
		- NEIGH  = { yield , result , }
		- PARENT = { if , result , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1257 :	"result"
		- NEIGH  = { yield , result , }
		- PARENT = { if , result , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1260 :	"right_hand_split"
		- NEIGH  = { right_hand_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { left_hand_split , line , py36 , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1260 :	"line"
		- NEIGH  = { right_hand_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { left_hand_split , line , py36 , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1260 :	"py36"
		- NEIGH  = { right_hand_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { left_hand_split , line , py36 , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1262 :	"head"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1262 :	"Line"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1262 :	"depth"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1262 :	"line"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1262 :	"depth"
		- NEIGH  = { head , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { body , Line , depth , line , depth , + , inside_brackets , }

1263 :	"body"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1263 :	"Line"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1263 :	"depth"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1263 :	"line"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1263 :	"depth"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1263 :	"+"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1263 :	"inside_brackets"
		- NEIGH  = { body , Line , depth , line , depth , + , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head , Line , depth , line , depth , }
		- SUCC   = { tail , Line , depth , line , depth , }

1264 :	"tail"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1264 :	"Line"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1264 :	"depth"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1264 :	"line"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1264 :	"depth"
		- NEIGH  = { tail , Line , depth , line , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body , Line , depth , line , depth , + , inside_brackets , }
		- SUCC   = { tail_leaves , list , }

1265 :	"tail_leaves"
		- NEIGH  = { tail_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail , Line , depth , line , depth , }
		- SUCC   = { body_leaves , list , }

1265 :	"list"
		- NEIGH  = { tail_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail , Line , depth , line , depth , }
		- SUCC   = { body_leaves , list , }

1266 :	"body_leaves"
		- NEIGH  = { body_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail_leaves , list , }
		- SUCC   = { head_leaves , list , }

1266 :	"list"
		- NEIGH  = { body_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail_leaves , list , }
		- SUCC   = { head_leaves , list , }

1267 :	"head_leaves"
		- NEIGH  = { head_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body_leaves , list , }
		- SUCC   = { current_leaves , tail_leaves , }

1267 :	"list"
		- NEIGH  = { head_leaves , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body_leaves , list , }
		- SUCC   = { current_leaves , tail_leaves , }

1268 :	"current_leaves"
		- NEIGH  = { current_leaves , tail_leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head_leaves , list , }
		- SUCC   = { opening_bracket , }

1268 :	"tail_leaves"
		- NEIGH  = { current_leaves , tail_leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { head_leaves , list , }
		- SUCC   = { opening_bracket , }

1269 :	"opening_bracket"
		- NEIGH  = { opening_bracket , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_leaves , tail_leaves , }
		- SUCC   = { for , leaf , reversed , line , leaves , }

1270 :	"for"
		- NEIGH  = { for , leaf , reversed , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , current_leaves , append , leaf , if , current_leaves , is , tail_leaves , }
		- PRED   = { opening_bracket , }
		- SUCC   = { tail_leaves , reverse , }

1270 :	"leaf"
		- NEIGH  = { for , leaf , reversed , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , current_leaves , append , leaf , if , current_leaves , is , tail_leaves , }
		- PRED   = { opening_bracket , }
		- SUCC   = { tail_leaves , reverse , }

1270 :	"reversed"
		- NEIGH  = { for , leaf , reversed , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , current_leaves , append , leaf , if , current_leaves , is , tail_leaves , }
		- PRED   = { opening_bracket , }
		- SUCC   = { tail_leaves , reverse , }

1270 :	"line"
		- NEIGH  = { for , leaf , reversed , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , current_leaves , append , leaf , if , current_leaves , is , tail_leaves , }
		- PRED   = { opening_bracket , }
		- SUCC   = { tail_leaves , reverse , }

1270 :	"leaves"
		- NEIGH  = { for , leaf , reversed , line , leaves , }
		- PARENT = { }
		- CHILD  = { if , current_leaves , is , body_leaves , current_leaves , append , leaf , if , current_leaves , is , tail_leaves , }
		- PRED   = { opening_bracket , }
		- SUCC   = { tail_leaves , reverse , }

1271 :	"if"
		- NEIGH  = { if , current_leaves , is , body_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , is , opening_bracket , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1271 :	"current_leaves"
		- NEIGH  = { if , current_leaves , is , body_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , is , opening_bracket , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1271 :	"is"
		- NEIGH  = { if , current_leaves , is , body_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , is , opening_bracket , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1271 :	"body_leaves"
		- NEIGH  = { if , current_leaves , is , body_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , is , opening_bracket , }
		- PRED   = { }
		- SUCC   = { current_leaves , append , leaf , }

1272 :	"if"
		- NEIGH  = { if , leaf , is , opening_bracket , }
		- PARENT = { if , current_leaves , is , body_leaves , }
		- CHILD  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PRED   = { }
		- SUCC   = { }

1272 :	"leaf"
		- NEIGH  = { if , leaf , is , opening_bracket , }
		- PARENT = { if , current_leaves , is , body_leaves , }
		- CHILD  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PRED   = { }
		- SUCC   = { }

1272 :	"is"
		- NEIGH  = { if , leaf , is , opening_bracket , }
		- PARENT = { if , current_leaves , is , body_leaves , }
		- CHILD  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PRED   = { }
		- SUCC   = { }

1272 :	"opening_bracket"
		- NEIGH  = { if , leaf , is , opening_bracket , }
		- PARENT = { if , current_leaves , is , body_leaves , }
		- CHILD  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PRED   = { }
		- SUCC   = { }

1273 :	"current_leaves"
		- NEIGH  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PARENT = { if , leaf , is , opening_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1273 :	"head_leaves"
		- NEIGH  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PARENT = { if , leaf , is , opening_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1273 :	"if-exp"
		- NEIGH  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PARENT = { if , leaf , is , opening_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1273 :	"body_leaves"
		- NEIGH  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PARENT = { if , leaf , is , opening_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1273 :	"else-exp"
		- NEIGH  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PARENT = { if , leaf , is , opening_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1273 :	"tail_leaves"
		- NEIGH  = { current_leaves , head_leaves , if-exp , body_leaves , else-exp , tail_leaves , }
		- PARENT = { if , leaf , is , opening_bracket , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1274 :	"current_leaves"
		- NEIGH  = { current_leaves , append , leaf , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , current_leaves , is , body_leaves , }
		- SUCC   = { if , current_leaves , is , tail_leaves , }

1274 :	"append"
		- NEIGH  = { current_leaves , append , leaf , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , current_leaves , is , body_leaves , }
		- SUCC   = { if , current_leaves , is , tail_leaves , }

1274 :	"leaf"
		- NEIGH  = { current_leaves , append , leaf , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , current_leaves , is , body_leaves , }
		- SUCC   = { if , current_leaves , is , tail_leaves , }

1275 :	"if"
		- NEIGH  = { if , current_leaves , is , tail_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1275 :	"current_leaves"
		- NEIGH  = { if , current_leaves , is , tail_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1275 :	"is"
		- NEIGH  = { if , current_leaves , is , tail_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1275 :	"tail_leaves"
		- NEIGH  = { if , current_leaves , is , tail_leaves , }
		- PARENT = { for , leaf , reversed , line , leaves , }
		- CHILD  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PRED   = { current_leaves , append , leaf , }
		- SUCC   = { }

1276 :	"if"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { if , current_leaves , is , tail_leaves , }
		- CHILD  = { opening_bracket , leaf , opening_bracket , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1276 :	"leaf"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { if , current_leaves , is , tail_leaves , }
		- CHILD  = { opening_bracket , leaf , opening_bracket , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1276 :	"type"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { if , current_leaves , is , tail_leaves , }
		- CHILD  = { opening_bracket , leaf , opening_bracket , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1276 :	"in"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { if , current_leaves , is , tail_leaves , }
		- CHILD  = { opening_bracket , leaf , opening_bracket , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1276 :	"CLOSING_BRACKETS"
		- NEIGH  = { if , leaf , type , in , CLOSING_BRACKETS , }
		- PARENT = { if , current_leaves , is , tail_leaves , }
		- CHILD  = { opening_bracket , leaf , opening_bracket , current_leaves , body_leaves , }
		- PRED   = { }
		- SUCC   = { }

1277 :	"opening_bracket"
		- NEIGH  = { opening_bracket , leaf , opening_bracket , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { current_leaves , body_leaves , }

1277 :	"leaf"
		- NEIGH  = { opening_bracket , leaf , opening_bracket , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { current_leaves , body_leaves , }

1277 :	"opening_bracket"
		- NEIGH  = { opening_bracket , leaf , opening_bracket , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { current_leaves , body_leaves , }

1278 :	"current_leaves"
		- NEIGH  = { current_leaves , body_leaves , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { opening_bracket , leaf , opening_bracket , }
		- SUCC   = { }

1278 :	"body_leaves"
		- NEIGH  = { current_leaves , body_leaves , }
		- PARENT = { if , leaf , type , in , CLOSING_BRACKETS , }
		- CHILD  = { }
		- PRED   = { opening_bracket , leaf , opening_bracket , }
		- SUCC   = { }

1279 :	"tail_leaves"
		- NEIGH  = { tail_leaves , reverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , leaf , reversed , line , leaves , }
		- SUCC   = { body_leaves , reverse , }

1279 :	"reverse"
		- NEIGH  = { tail_leaves , reverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , leaf , reversed , line , leaves , }
		- SUCC   = { body_leaves , reverse , }

1280 :	"body_leaves"
		- NEIGH  = { body_leaves , reverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail_leaves , reverse , }
		- SUCC   = { head_leaves , reverse , }

1280 :	"reverse"
		- NEIGH  = { body_leaves , reverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { tail_leaves , reverse , }
		- SUCC   = { head_leaves , reverse , }

1281 :	"head_leaves"
		- NEIGH  = { head_leaves , reverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body_leaves , reverse , }
		- SUCC   = { if , body_leaves , }

1281 :	"reverse"
		- NEIGH  = { head_leaves , reverse , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { body_leaves , reverse , }
		- SUCC   = { if , body_leaves , }

1283 :	"if"
		- NEIGH  = { if , body_leaves , }
		- PARENT = { }
		- CHILD  = { normalize_prefix , body_leaves , inside_brackets , }
		- PRED   = { head_leaves , reverse , }
		- SUCC   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }

1283 :	"body_leaves"
		- NEIGH  = { if , body_leaves , }
		- PARENT = { }
		- CHILD  = { normalize_prefix , body_leaves , inside_brackets , }
		- PRED   = { head_leaves , reverse , }
		- SUCC   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }

1284 :	"normalize_prefix"
		- NEIGH  = { normalize_prefix , body_leaves , inside_brackets , }
		- PARENT = { if , body_leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1284 :	"body_leaves"
		- NEIGH  = { normalize_prefix , body_leaves , inside_brackets , }
		- PARENT = { if , body_leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1284 :	"inside_brackets"
		- NEIGH  = { normalize_prefix , body_leaves , inside_brackets , }
		- PARENT = { if , body_leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1286 :	"for"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1286 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1286 :	"result"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1286 :	"leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1286 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"head"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"head_leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"body"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"body_leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"tuple"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"tail"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1287 :	"tail_leaves"
		- NEIGH  = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- PARENT = { }
		- CHILD  = { for , leaf , leaves , }
		- PRED   = { if , body_leaves , }
		- SUCC   = { split_succeeded_or_raise , head , body , tail , }

1289 :	"for"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- CHILD  = { result , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , }
		- PRED   = { }
		- SUCC   = { }

1289 :	"leaf"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- CHILD  = { result , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , }
		- PRED   = { }
		- SUCC   = { }

1289 :	"leaves"
		- NEIGH  = { for , leaf , leaves , }
		- PARENT = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- CHILD  = { result , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , }
		- PRED   = { }
		- SUCC   = { }

1290 :	"result"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1290 :	"append"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1290 :	"leaf"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1290 :	"preformatted"
		- NEIGH  = { result , append , leaf , preformatted , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1291 :	"comment_after"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1291 :	"line"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1291 :	"comments"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1291 :	"get"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1291 :	"id"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1291 :	"leaf"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { }
		- PRED   = { result , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1292 :	"if"
		- NEIGH  = { if , comment_after , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { result , append , comment_after , preformatted , }
		- PRED   = { comment_after , line , comments , get , id , leaf , }
		- SUCC   = { }

1292 :	"comment_after"
		- NEIGH  = { if , comment_after , }
		- PARENT = { for , leaf , leaves , }
		- CHILD  = { result , append , comment_after , preformatted , }
		- PRED   = { comment_after , line , comments , get , id , leaf , }
		- SUCC   = { }

1293 :	"result"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1293 :	"append"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1293 :	"comment_after"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1293 :	"preformatted"
		- NEIGH  = { result , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1294 :	"split_succeeded_or_raise"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1294 :	"head"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1294 :	"body"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1294 :	"tail"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , result , leaves , tuple , tuple , head , head_leaves , tuple , body , body_leaves , tuple , tail , tail_leaves , }
		- SUCC   = { for , result , tuple , head , body , tail , }

1295 :	"for"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1295 :	"result"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1295 :	"tuple"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1295 :	"head"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1295 :	"body"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1295 :	"tail"
		- NEIGH  = { for , result , tuple , head , body , tail , }
		- PARENT = { }
		- CHILD  = { if , result , }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { }

1296 :	"if"
		- NEIGH  = { if , result , }
		- PARENT = { for , result , tuple , head , body , tail , }
		- CHILD  = { yield , result , }
		- PRED   = { }
		- SUCC   = { }

1296 :	"result"
		- NEIGH  = { if , result , }
		- PARENT = { for , result , tuple , head , body , tail , }
		- CHILD  = { yield , result , }
		- PRED   = { }
		- SUCC   = { }

1297 :	"yield"
		- NEIGH  = { yield , result , }
		- PARENT = { if , result , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1297 :	"result"
		- NEIGH  = { yield , result , }
		- PARENT = { if , result , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1300 :	"split_succeeded_or_raise"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { right_hand_split , line , py36 , }
		- SUCC   = { delimiter_split , line , py36 , }

1300 :	"head"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { right_hand_split , line , py36 , }
		- SUCC   = { delimiter_split , line , py36 , }

1300 :	"body"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { right_hand_split , line , py36 , }
		- SUCC   = { delimiter_split , line , py36 , }

1300 :	"tail"
		- NEIGH  = { split_succeeded_or_raise , head , body , tail , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { right_hand_split , line , py36 , }
		- SUCC   = { delimiter_split , line , py36 , }

1301 :	"tail_len"
		- NEIGH  = { tail_len , len , str , tail , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , body , }

1301 :	"len"
		- NEIGH  = { tail_len , len , str , tail , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , body , }

1301 :	"str"
		- NEIGH  = { tail_len , len , str , tail , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , body , }

1301 :	"tail"
		- NEIGH  = { tail_len , len , str , tail , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , body , }

1301 :	"strip"
		- NEIGH  = { tail_len , len , str , tail , strip , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , body , }

1302 :	"if"
		- NEIGH  = { if , body , }
		- PARENT = { }
		- CHILD  = { if , tail_len , == , }
		- PRED   = { tail_len , len , str , tail , strip , }
		- SUCC   = { }

1302 :	"body"
		- NEIGH  = { if , body , }
		- PARENT = { }
		- CHILD  = { if , tail_len , == , }
		- PRED   = { tail_len , len , str , tail , strip , }
		- SUCC   = { }

1303 :	"if"
		- NEIGH  = { if , tail_len , == , }
		- PARENT = { if , body , }
		- CHILD  = { raise , CannotSplit , if , tail_len , < , }
		- PRED   = { }
		- SUCC   = { }

1303 :	"tail_len"
		- NEIGH  = { if , tail_len , == , }
		- PARENT = { if , body , }
		- CHILD  = { raise , CannotSplit , if , tail_len , < , }
		- PRED   = { }
		- SUCC   = { }

1303 :	"=="
		- NEIGH  = { if , tail_len , == , }
		- PARENT = { if , body , }
		- CHILD  = { raise , CannotSplit , if , tail_len , < , }
		- PRED   = { }
		- SUCC   = { }

1304 :	"raise"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { if , tail_len , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , tail_len , < , }

1304 :	"CannotSplit"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { if , tail_len , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , tail_len , < , }

1306 :	"if"
		- NEIGH  = { if , tail_len , < , }
		- PARENT = { if , tail_len , == , }
		- CHILD  = { raise , CannotSplit , tail_len , }
		- PRED   = { raise , CannotSplit , }
		- SUCC   = { }

1306 :	"tail_len"
		- NEIGH  = { if , tail_len , < , }
		- PARENT = { if , tail_len , == , }
		- CHILD  = { raise , CannotSplit , tail_len , }
		- PRED   = { raise , CannotSplit , }
		- SUCC   = { }

1306 :	"<"
		- NEIGH  = { if , tail_len , < , }
		- PARENT = { if , tail_len , == , }
		- CHILD  = { raise , CannotSplit , tail_len , }
		- PRED   = { raise , CannotSplit , }
		- SUCC   = { }

1307 :	"raise"
		- NEIGH  = { raise , CannotSplit , tail_len , }
		- PARENT = { if , tail_len , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1307 :	"CannotSplit"
		- NEIGH  = { raise , CannotSplit , tail_len , }
		- PARENT = { if , tail_len , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1309 :	"tail_len"
		- NEIGH  = { raise , CannotSplit , tail_len , }
		- PARENT = { if , tail_len , < , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1313 :	"delimiter_split"
		- NEIGH  = { delimiter_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { is_import , leaf , }

1313 :	"line"
		- NEIGH  = { delimiter_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { is_import , leaf , }

1313 :	"py36"
		- NEIGH  = { delimiter_split , line , py36 , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { split_succeeded_or_raise , head , body , tail , }
		- SUCC   = { is_import , leaf , }

1320 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { last_leaf , line , leaves , }

1321 :	"last_leaf"
		- NEIGH  = { last_leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1321 :	"line"
		- NEIGH  = { last_leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1321 :	"leaves"
		- NEIGH  = { last_leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

1322 :	"except"
		- NEIGH  = { except , IndexError , }
		- PARENT = { }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { last_leaf , line , leaves , }
		- SUCC   = { delimiters , line , bracket_tracker , delimiters , }

1322 :	"IndexError"
		- NEIGH  = { except , IndexError , }
		- PARENT = { }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { last_leaf , line , leaves , }
		- SUCC   = { delimiters , line , bracket_tracker , delimiters , }

1323 :	"raise"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1323 :	"CannotSplit"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1325 :	"delimiters"
		- NEIGH  = { delimiters , line , bracket_tracker , delimiters , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { try , }

1325 :	"line"
		- NEIGH  = { delimiters , line , bracket_tracker , delimiters , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { try , }

1325 :	"bracket_tracker"
		- NEIGH  = { delimiters , line , bracket_tracker , delimiters , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { try , }

1325 :	"delimiters"
		- NEIGH  = { delimiters , line , bracket_tracker , delimiters , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , IndexError , }
		- SUCC   = { try , }

1326 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { delimiters , line , bracket_tracker , delimiters , }
		- SUCC   = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }

1327 :	"delimiter_priority"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"line"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"bracket_tracker"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"max_priority"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"exclude"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"set"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"id"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1327 :	"last_leaf"
		- NEIGH  = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , ValueError , }

1328 :	"except"
		- NEIGH  = { except , ValueError , }
		- PARENT = { }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- SUCC   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }

1328 :	"ValueError"
		- NEIGH  = { except , ValueError , }
		- PARENT = { }
		- CHILD  = { raise , CannotSplit , }
		- PRED   = { delimiter_priority , line , bracket_tracker , max_priority , exclude , set , id , last_leaf , }
		- SUCC   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }

1329 :	"raise"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { except , ValueError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1329 :	"CannotSplit"
		- NEIGH  = { raise , CannotSplit , }
		- PARENT = { except , ValueError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1331 :	"current_line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"Line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"depth"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"depth"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"inside_brackets"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1331 :	"inside_brackets"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , ValueError , }
		- SUCC   = { lowest_depth , sys , maxsize , }

1332 :	"lowest_depth"
		- NEIGH  = { lowest_depth , sys , maxsize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- SUCC   = { trailing_comma_safe , }

1332 :	"sys"
		- NEIGH  = { lowest_depth , sys , maxsize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- SUCC   = { trailing_comma_safe , }

1332 :	"maxsize"
		- NEIGH  = { lowest_depth , sys , maxsize , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- SUCC   = { trailing_comma_safe , }

1333 :	"trailing_comma_safe"
		- NEIGH  = { trailing_comma_safe , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lowest_depth , sys , maxsize , }
		- SUCC   = { for , leaf , line , leaves , }

1334 :	"for"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { current_line , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , lowest_depth , min , lowest_depth , leaf , bracket_depth , if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , leaf_priority , delimiters , get , id , leaf , if , leaf_priority , == , delimiter_priority , }
		- PRED   = { trailing_comma_safe , }
		- SUCC   = { if , current_line , }

1334 :	"leaf"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { current_line , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , lowest_depth , min , lowest_depth , leaf , bracket_depth , if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , leaf_priority , delimiters , get , id , leaf , if , leaf_priority , == , delimiter_priority , }
		- PRED   = { trailing_comma_safe , }
		- SUCC   = { if , current_line , }

1334 :	"line"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { current_line , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , lowest_depth , min , lowest_depth , leaf , bracket_depth , if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , leaf_priority , delimiters , get , id , leaf , if , leaf_priority , == , delimiter_priority , }
		- PRED   = { trailing_comma_safe , }
		- SUCC   = { if , current_line , }

1334 :	"leaves"
		- NEIGH  = { for , leaf , line , leaves , }
		- PARENT = { }
		- CHILD  = { current_line , append , leaf , preformatted , comment_after , line , comments , get , id , leaf , if , comment_after , lowest_depth , min , lowest_depth , leaf , bracket_depth , if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , leaf_priority , delimiters , get , id , leaf , if , leaf_priority , == , delimiter_priority , }
		- PRED   = { trailing_comma_safe , }
		- SUCC   = { if , current_line , }

1335 :	"current_line"
		- NEIGH  = { current_line , append , leaf , preformatted , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1335 :	"append"
		- NEIGH  = { current_line , append , leaf , preformatted , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1335 :	"leaf"
		- NEIGH  = { current_line , append , leaf , preformatted , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1335 :	"preformatted"
		- NEIGH  = { current_line , append , leaf , preformatted , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { comment_after , line , comments , get , id , leaf , }

1336 :	"comment_after"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { current_line , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1336 :	"line"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { current_line , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1336 :	"comments"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { current_line , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1336 :	"get"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { current_line , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1336 :	"id"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { current_line , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1336 :	"leaf"
		- NEIGH  = { comment_after , line , comments , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { current_line , append , leaf , preformatted , }
		- SUCC   = { if , comment_after , }

1337 :	"if"
		- NEIGH  = { if , comment_after , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_line , append , comment_after , preformatted , }
		- PRED   = { comment_after , line , comments , get , id , leaf , }
		- SUCC   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }

1337 :	"comment_after"
		- NEIGH  = { if , comment_after , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { current_line , append , comment_after , preformatted , }
		- PRED   = { comment_after , line , comments , get , id , leaf , }
		- SUCC   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }

1338 :	"current_line"
		- NEIGH  = { current_line , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1338 :	"append"
		- NEIGH  = { current_line , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1338 :	"comment_after"
		- NEIGH  = { current_line , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1338 :	"preformatted"
		- NEIGH  = { current_line , append , comment_after , preformatted , }
		- PARENT = { if , comment_after , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1339 :	"lowest_depth"
		- NEIGH  = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , comment_after , }
		- SUCC   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }

1339 :	"min"
		- NEIGH  = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , comment_after , }
		- SUCC   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }

1339 :	"lowest_depth"
		- NEIGH  = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , comment_after , }
		- SUCC   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }

1339 :	"leaf"
		- NEIGH  = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , comment_after , }
		- SUCC   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }

1339 :	"bracket_depth"
		- NEIGH  = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , comment_after , }
		- SUCC   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }

1340 :	"if"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1341 :	"leaf"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1341 :	"bracket_depth"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1341 :	"=="
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1341 :	"lowest_depth"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1342 :	"or"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1342 :	"leaf"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1342 :	"type"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1342 :	"=="
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1342 :	"token"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1342 :	"STAR"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1343 :	"or"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1343 :	"leaf"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1343 :	"type"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1343 :	"=="
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1343 :	"token"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1343 :	"DOUBLESTAR"
		- NEIGH  = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PRED   = { lowest_depth , min , lowest_depth , leaf , bracket_depth , }
		- SUCC   = { leaf_priority , delimiters , get , id , leaf , }

1345 :	"trailing_comma_safe"
		- NEIGH  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PARENT = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1345 :	"trailing_comma_safe"
		- NEIGH  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PARENT = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1345 :	"or"
		- NEIGH  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PARENT = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1345 :	"py36"
		- NEIGH  = { trailing_comma_safe , trailing_comma_safe , or , py36 , }
		- PARENT = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1346 :	"leaf_priority"
		- NEIGH  = { leaf_priority , delimiters , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- SUCC   = { if , leaf_priority , == , delimiter_priority , }

1346 :	"delimiters"
		- NEIGH  = { leaf_priority , delimiters , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- SUCC   = { if , leaf_priority , == , delimiter_priority , }

1346 :	"get"
		- NEIGH  = { leaf_priority , delimiters , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- SUCC   = { if , leaf_priority , == , delimiter_priority , }

1346 :	"id"
		- NEIGH  = { leaf_priority , delimiters , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- SUCC   = { if , leaf_priority , == , delimiter_priority , }

1346 :	"leaf"
		- NEIGH  = { leaf_priority , delimiters , get , id , leaf , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { }
		- PRED   = { if , leaf , bracket_depth , == , lowest_depth , or , leaf , type , == , token , STAR , or , leaf , type , == , token , DOUBLESTAR , }
		- SUCC   = { if , leaf_priority , == , delimiter_priority , }

1347 :	"if"
		- NEIGH  = { if , leaf_priority , == , delimiter_priority , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { normalize_prefix , current_line , leaves , inside_brackets , yield , current_line , current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PRED   = { leaf_priority , delimiters , get , id , leaf , }
		- SUCC   = { }

1347 :	"leaf_priority"
		- NEIGH  = { if , leaf_priority , == , delimiter_priority , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { normalize_prefix , current_line , leaves , inside_brackets , yield , current_line , current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PRED   = { leaf_priority , delimiters , get , id , leaf , }
		- SUCC   = { }

1347 :	"=="
		- NEIGH  = { if , leaf_priority , == , delimiter_priority , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { normalize_prefix , current_line , leaves , inside_brackets , yield , current_line , current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PRED   = { leaf_priority , delimiters , get , id , leaf , }
		- SUCC   = { }

1347 :	"delimiter_priority"
		- NEIGH  = { if , leaf_priority , == , delimiter_priority , }
		- PARENT = { for , leaf , line , leaves , }
		- CHILD  = { normalize_prefix , current_line , leaves , inside_brackets , yield , current_line , current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PRED   = { leaf_priority , delimiters , get , id , leaf , }
		- SUCC   = { }

1348 :	"normalize_prefix"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , current_line , }

1348 :	"current_line"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , current_line , }

1348 :	"leaves"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , current_line , }

1348 :	"inside_brackets"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , current_line , }

1349 :	"yield"
		- NEIGH  = { yield , current_line , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { normalize_prefix , current_line , leaves , inside_brackets , }
		- SUCC   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }

1349 :	"current_line"
		- NEIGH  = { yield , current_line , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { normalize_prefix , current_line , leaves , inside_brackets , }
		- SUCC   = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }

1351 :	"current_line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"Line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"depth"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"depth"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"inside_brackets"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"line"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1351 :	"inside_brackets"
		- NEIGH  = { current_line , Line , depth , line , depth , inside_brackets , line , inside_brackets , }
		- PARENT = { if , leaf_priority , == , delimiter_priority , }
		- CHILD  = { }
		- PRED   = { yield , current_line , }
		- SUCC   = { }

1352 :	"if"
		- NEIGH  = { if , current_line , }
		- PARENT = { }
		- CHILD  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , normalize_prefix , current_line , leaves , inside_brackets , yield , current_line , }
		- PRED   = { for , leaf , line , leaves , }
		- SUCC   = { }

1352 :	"current_line"
		- NEIGH  = { if , current_line , }
		- PARENT = { }
		- CHILD  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , normalize_prefix , current_line , leaves , inside_brackets , yield , current_line , }
		- PRED   = { for , leaf , line , leaves , }
		- SUCC   = { }

1353 :	"if"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1354 :	"delimiter_priority"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1354 :	"=="
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1354 :	"COMMA_PRIORITY"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"or"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"current_line"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"leaves"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"type"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"!="
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"token"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1355 :	"COMMA"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1356 :	"or"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1356 :	"trailing_comma_safe"
		- NEIGH  = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- PARENT = { if , current_line , }
		- CHILD  = { current_line , append , Leaf , token , COMMA , }
		- PRED   = { }
		- SUCC   = { normalize_prefix , current_line , leaves , inside_brackets , }

1358 :	"current_line"
		- NEIGH  = { current_line , append , Leaf , token , COMMA , }
		- PARENT = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1358 :	"append"
		- NEIGH  = { current_line , append , Leaf , token , COMMA , }
		- PARENT = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1358 :	"Leaf"
		- NEIGH  = { current_line , append , Leaf , token , COMMA , }
		- PARENT = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1358 :	"token"
		- NEIGH  = { current_line , append , Leaf , token , COMMA , }
		- PARENT = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1358 :	"COMMA"
		- NEIGH  = { current_line , append , Leaf , token , COMMA , }
		- PARENT = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1359 :	"normalize_prefix"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , current_line , }
		- CHILD  = { }
		- PRED   = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- SUCC   = { yield , current_line , }

1359 :	"current_line"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , current_line , }
		- CHILD  = { }
		- PRED   = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- SUCC   = { yield , current_line , }

1359 :	"leaves"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , current_line , }
		- CHILD  = { }
		- PRED   = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- SUCC   = { yield , current_line , }

1359 :	"inside_brackets"
		- NEIGH  = { normalize_prefix , current_line , leaves , inside_brackets , }
		- PARENT = { if , current_line , }
		- CHILD  = { }
		- PRED   = { if , delimiter_priority , == , COMMA_PRIORITY , or , current_line , leaves , type , != , token , COMMA , or , trailing_comma_safe , }
		- SUCC   = { yield , current_line , }

1360 :	"yield"
		- NEIGH  = { yield , current_line , }
		- PARENT = { if , current_line , }
		- CHILD  = { }
		- PRED   = { normalize_prefix , current_line , leaves , inside_brackets , }
		- SUCC   = { }

1360 :	"current_line"
		- NEIGH  = { yield , current_line , }
		- PARENT = { if , current_line , }
		- CHILD  = { }
		- PRED   = { normalize_prefix , current_line , leaves , inside_brackets , }
		- SUCC   = { }

1363 :	"is_import"
		- NEIGH  = { is_import , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { delimiter_split , line , py36 , }
		- SUCC   = { normalize_prefix , leaf , inside_brackets , }

1363 :	"leaf"
		- NEIGH  = { is_import , leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { delimiter_split , line , py36 , }
		- SUCC   = { normalize_prefix , leaf , inside_brackets , }

1365 :	"p"
		- NEIGH  = { p , leaf , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { t , leaf , type , }

1365 :	"leaf"
		- NEIGH  = { p , leaf , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { t , leaf , type , }

1365 :	"parent"
		- NEIGH  = { p , leaf , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { t , leaf , type , }

1366 :	"t"
		- NEIGH  = { t , leaf , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p , leaf , parent , }
		- SUCC   = { v , leaf , value , }

1366 :	"leaf"
		- NEIGH  = { t , leaf , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p , leaf , parent , }
		- SUCC   = { v , leaf , value , }

1366 :	"type"
		- NEIGH  = { t , leaf , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { p , leaf , parent , }
		- SUCC   = { v , leaf , value , }

1367 :	"v"
		- NEIGH  = { v , leaf , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , leaf , type , }
		- SUCC   = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }

1367 :	"leaf"
		- NEIGH  = { v , leaf , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , leaf , type , }
		- SUCC   = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }

1367 :	"value"
		- NEIGH  = { v , leaf , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { t , leaf , type , }
		- SUCC   = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }

1368 :	"return"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1368 :	"bool"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1369 :	"t"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1369 :	"=="
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1369 :	"token"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1369 :	"NAME"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"or"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"v"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"=="
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"or"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"p"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"or"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"p"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"type"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"=="
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"syms"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1371 :	"import_name"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"or"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"v"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"=="
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"or"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"p"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"or"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"p"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"type"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"=="
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"syms"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1372 :	"import_from"
		- NEIGH  = { return , bool , t , == , token , NAME , or , v , == , or , p , or , p , type , == , syms , import_name , or , v , == , or , p , or , p , type , == , syms , import_from , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { v , leaf , value , }
		- SUCC   = { }

1377 :	"normalize_prefix"
		- NEIGH  = { normalize_prefix , leaf , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_import , leaf , }
		- SUCC   = { is_python36 , node , }

1377 :	"leaf"
		- NEIGH  = { normalize_prefix , leaf , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_import , leaf , }
		- SUCC   = { is_python36 , node , }

1377 :	"inside_brackets"
		- NEIGH  = { normalize_prefix , leaf , inside_brackets , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_import , leaf , }
		- SUCC   = { is_python36 , node , }

1383 :	"if"
		- NEIGH  = { if , inside_brackets , }
		- PARENT = { }
		- CHILD  = { spl , leaf , prefix , split , if , not , in , spl , }
		- PRED   = { }
		- SUCC   = { leaf , prefix , }

1383 :	"inside_brackets"
		- NEIGH  = { if , inside_brackets , }
		- PARENT = { }
		- CHILD  = { spl , leaf , prefix , split , if , not , in , spl , }
		- PRED   = { }
		- SUCC   = { leaf , prefix , }

1384 :	"spl"
		- NEIGH  = { spl , leaf , prefix , split , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , spl , }

1384 :	"leaf"
		- NEIGH  = { spl , leaf , prefix , split , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , spl , }

1384 :	"prefix"
		- NEIGH  = { spl , leaf , prefix , split , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , spl , }

1384 :	"split"
		- NEIGH  = { spl , leaf , prefix , split , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , not , in , spl , }

1385 :	"if"
		- NEIGH  = { if , not , in , spl , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { nl_count , spl , count , if , len , spl , > , leaf , prefix , * , nl_count , return , }
		- PRED   = { spl , leaf , prefix , split , }
		- SUCC   = { }

1385 :	"not"
		- NEIGH  = { if , not , in , spl , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { nl_count , spl , count , if , len , spl , > , leaf , prefix , * , nl_count , return , }
		- PRED   = { spl , leaf , prefix , split , }
		- SUCC   = { }

1385 :	"in"
		- NEIGH  = { if , not , in , spl , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { nl_count , spl , count , if , len , spl , > , leaf , prefix , * , nl_count , return , }
		- PRED   = { spl , leaf , prefix , split , }
		- SUCC   = { }

1385 :	"spl"
		- NEIGH  = { if , not , in , spl , }
		- PARENT = { if , inside_brackets , }
		- CHILD  = { nl_count , spl , count , if , len , spl , > , leaf , prefix , * , nl_count , return , }
		- PRED   = { spl , leaf , prefix , split , }
		- SUCC   = { }

1386 :	"nl_count"
		- NEIGH  = { nl_count , spl , count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , spl , > , }

1386 :	"spl"
		- NEIGH  = { nl_count , spl , count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , spl , > , }

1386 :	"count"
		- NEIGH  = { nl_count , spl , count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , len , spl , > , }

1387 :	"if"
		- NEIGH  = { if , len , spl , > , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { nl_count , -= , }
		- PRED   = { nl_count , spl , count , }
		- SUCC   = { leaf , prefix , * , nl_count , }

1387 :	"len"
		- NEIGH  = { if , len , spl , > , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { nl_count , -= , }
		- PRED   = { nl_count , spl , count , }
		- SUCC   = { leaf , prefix , * , nl_count , }

1387 :	"spl"
		- NEIGH  = { if , len , spl , > , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { nl_count , -= , }
		- PRED   = { nl_count , spl , count , }
		- SUCC   = { leaf , prefix , * , nl_count , }

1387 :	">"
		- NEIGH  = { if , len , spl , > , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { nl_count , -= , }
		- PRED   = { nl_count , spl , count , }
		- SUCC   = { leaf , prefix , * , nl_count , }

1388 :	"nl_count"
		- NEIGH  = { nl_count , -= , }
		- PARENT = { if , len , spl , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1388 :	"-="
		- NEIGH  = { nl_count , -= , }
		- PARENT = { if , len , spl , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1389 :	"leaf"
		- NEIGH  = { leaf , prefix , * , nl_count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { if , len , spl , > , }
		- SUCC   = { return , }

1389 :	"prefix"
		- NEIGH  = { leaf , prefix , * , nl_count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { if , len , spl , > , }
		- SUCC   = { return , }

1389 :	"*"
		- NEIGH  = { leaf , prefix , * , nl_count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { if , len , spl , > , }
		- SUCC   = { return , }

1389 :	"nl_count"
		- NEIGH  = { leaf , prefix , * , nl_count , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { if , len , spl , > , }
		- SUCC   = { return , }

1390 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , not , in , spl , }
		- CHILD  = { }
		- PRED   = { leaf , prefix , * , nl_count , }
		- SUCC   = { }

1392 :	"leaf"
		- NEIGH  = { leaf , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , inside_brackets , }
		- SUCC   = { }

1392 :	"prefix"
		- NEIGH  = { leaf , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , inside_brackets , }
		- SUCC   = { }

1395 :	"is_python36"
		- NEIGH  = { is_python36 , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { normalize_prefix , leaf , inside_brackets , }
		- SUCC   = { PYTHON_EXTENSIONS , set , }

1395 :	"node"
		- NEIGH  = { is_python36 , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { normalize_prefix , leaf , inside_brackets , }
		- SUCC   = { PYTHON_EXTENSIONS , set , }

1402 :	"for"
		- NEIGH  = { for , n , node , pre_order , }
		- PARENT = { }
		- CHILD  = { if , n , type , == , token , STRING , }
		- PRED   = { }
		- SUCC   = { return , }

1402 :	"n"
		- NEIGH  = { for , n , node , pre_order , }
		- PARENT = { }
		- CHILD  = { if , n , type , == , token , STRING , }
		- PRED   = { }
		- SUCC   = { return , }

1402 :	"node"
		- NEIGH  = { for , n , node , pre_order , }
		- PARENT = { }
		- CHILD  = { if , n , type , == , token , STRING , }
		- PRED   = { }
		- SUCC   = { return , }

1402 :	"pre_order"
		- NEIGH  = { for , n , node , pre_order , }
		- PARENT = { }
		- CHILD  = { if , n , type , == , token , STRING , }
		- PRED   = { }
		- SUCC   = { return , }

1403 :	"if"
		- NEIGH  = { if , n , type , == , token , STRING , }
		- PARENT = { for , n , node , pre_order , }
		- CHILD  = { value_head , n , value , if , value_head , in , set , if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PRED   = { }
		- SUCC   = { }

1403 :	"n"
		- NEIGH  = { if , n , type , == , token , STRING , }
		- PARENT = { for , n , node , pre_order , }
		- CHILD  = { value_head , n , value , if , value_head , in , set , if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PRED   = { }
		- SUCC   = { }

1403 :	"type"
		- NEIGH  = { if , n , type , == , token , STRING , }
		- PARENT = { for , n , node , pre_order , }
		- CHILD  = { value_head , n , value , if , value_head , in , set , if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PRED   = { }
		- SUCC   = { }

1403 :	"=="
		- NEIGH  = { if , n , type , == , token , STRING , }
		- PARENT = { for , n , node , pre_order , }
		- CHILD  = { value_head , n , value , if , value_head , in , set , if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PRED   = { }
		- SUCC   = { }

1403 :	"token"
		- NEIGH  = { if , n , type , == , token , STRING , }
		- PARENT = { for , n , node , pre_order , }
		- CHILD  = { value_head , n , value , if , value_head , in , set , if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PRED   = { }
		- SUCC   = { }

1403 :	"STRING"
		- NEIGH  = { if , n , type , == , token , STRING , }
		- PARENT = { for , n , node , pre_order , }
		- CHILD  = { value_head , n , value , if , value_head , in , set , if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PRED   = { }
		- SUCC   = { }

1404 :	"value_head"
		- NEIGH  = { value_head , n , value , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , value_head , in , set , }

1404 :	"n"
		- NEIGH  = { value_head , n , value , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , value_head , in , set , }

1404 :	"value"
		- NEIGH  = { value_head , n , value , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , value_head , in , set , }

1405 :	"if"
		- NEIGH  = { if , value_head , in , set , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { return , }
		- PRED   = { value_head , n , value , }
		- SUCC   = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }

1405 :	"value_head"
		- NEIGH  = { if , value_head , in , set , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { return , }
		- PRED   = { value_head , n , value , }
		- SUCC   = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }

1405 :	"in"
		- NEIGH  = { if , value_head , in , set , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { return , }
		- PRED   = { value_head , n , value , }
		- SUCC   = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }

1405 :	"set"
		- NEIGH  = { if , value_head , in , set , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { return , }
		- PRED   = { value_head , n , value , }
		- SUCC   = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }

1406 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , value_head , in , set , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1408 :	"if"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1409 :	"n"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1409 :	"type"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1409 :	"=="
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1409 :	"syms"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1409 :	"typedargslist"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1410 :	"or"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1410 :	"n"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1410 :	"children"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"or"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"n"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"children"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"type"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"=="
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"token"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1411 :	"COMMA"
		- NEIGH  = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- PARENT = { if , n , type , == , token , STRING , }
		- CHILD  = { for , ch , n , children , }
		- PRED   = { if , value_head , in , set , }
		- SUCC   = { }

1413 :	"for"
		- NEIGH  = { for , ch , n , children , }
		- PARENT = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- CHILD  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PRED   = { }
		- SUCC   = { }

1413 :	"ch"
		- NEIGH  = { for , ch , n , children , }
		- PARENT = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- CHILD  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PRED   = { }
		- SUCC   = { }

1413 :	"n"
		- NEIGH  = { for , ch , n , children , }
		- PARENT = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- CHILD  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PRED   = { }
		- SUCC   = { }

1413 :	"children"
		- NEIGH  = { for , ch , n , children , }
		- PARENT = { if , n , type , == , syms , typedargslist , or , n , children , or , n , children , type , == , token , COMMA , }
		- CHILD  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"if"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"ch"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"type"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"=="
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"token"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"STAR"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"or"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"ch"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"type"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"=="
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"token"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1414 :	"DOUBLESTAR"
		- NEIGH  = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- PARENT = { for , ch , n , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

1415 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , ch , type , == , token , STAR , or , ch , type , == , token , DOUBLESTAR , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1417 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , n , node , pre_order , }
		- SUCC   = { }

1420 :	"PYTHON_EXTENSIONS"
		- NEIGH  = { PYTHON_EXTENSIONS , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_python36 , node , }
		- SUCC   = { BLACKLISTED_DIRECTORIES , set , }

1420 :	"set"
		- NEIGH  = { PYTHON_EXTENSIONS , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { is_python36 , node , }
		- SUCC   = { BLACKLISTED_DIRECTORIES , set , }

1421 :	"BLACKLISTED_DIRECTORIES"
		- NEIGH  = { BLACKLISTED_DIRECTORIES , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PYTHON_EXTENSIONS , set , }
		- SUCC   = { gen_python_files_in_dir , path , }

1421 :	"set"
		- NEIGH  = { BLACKLISTED_DIRECTORIES , set , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { PYTHON_EXTENSIONS , set , }
		- SUCC   = { gen_python_files_in_dir , path , }

1426 :	"gen_python_files_in_dir"
		- NEIGH  = { gen_python_files_in_dir , path , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BLACKLISTED_DIRECTORIES , set , }
		- SUCC   = { Report , }

1426 :	"path"
		- NEIGH  = { gen_python_files_in_dir , path , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BLACKLISTED_DIRECTORIES , set , }
		- SUCC   = { Report , }

1427 :	"for"
		- NEIGH  = { for , child , path , iterdir , }
		- PARENT = { }
		- CHILD  = { if , child , is_dir , }
		- PRED   = { }
		- SUCC   = { }

1427 :	"child"
		- NEIGH  = { for , child , path , iterdir , }
		- PARENT = { }
		- CHILD  = { if , child , is_dir , }
		- PRED   = { }
		- SUCC   = { }

1427 :	"path"
		- NEIGH  = { for , child , path , iterdir , }
		- PARENT = { }
		- CHILD  = { if , child , is_dir , }
		- PRED   = { }
		- SUCC   = { }

1427 :	"iterdir"
		- NEIGH  = { for , child , path , iterdir , }
		- PARENT = { }
		- CHILD  = { if , child , is_dir , }
		- PRED   = { }
		- SUCC   = { }

1428 :	"if"
		- NEIGH  = { if , child , is_dir , }
		- PARENT = { for , child , path , iterdir , }
		- CHILD  = { if , child , name , in , BLACKLISTED_DIRECTORIES , yield , from , gen_python_files_in_dir , child , if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PRED   = { }
		- SUCC   = { }

1428 :	"child"
		- NEIGH  = { if , child , is_dir , }
		- PARENT = { for , child , path , iterdir , }
		- CHILD  = { if , child , name , in , BLACKLISTED_DIRECTORIES , yield , from , gen_python_files_in_dir , child , if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PRED   = { }
		- SUCC   = { }

1428 :	"is_dir"
		- NEIGH  = { if , child , is_dir , }
		- PARENT = { for , child , path , iterdir , }
		- CHILD  = { if , child , name , in , BLACKLISTED_DIRECTORIES , yield , from , gen_python_files_in_dir , child , if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PRED   = { }
		- SUCC   = { }

1429 :	"if"
		- NEIGH  = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { yield , from , gen_python_files_in_dir , child , }

1429 :	"child"
		- NEIGH  = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { yield , from , gen_python_files_in_dir , child , }

1429 :	"name"
		- NEIGH  = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { yield , from , gen_python_files_in_dir , child , }

1429 :	"in"
		- NEIGH  = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { yield , from , gen_python_files_in_dir , child , }

1429 :	"BLACKLISTED_DIRECTORIES"
		- NEIGH  = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { continue , }
		- PRED   = { }
		- SUCC   = { yield , from , gen_python_files_in_dir , child , }

1430 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1432 :	"yield"
		- NEIGH  = { yield , from , gen_python_files_in_dir , child , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { }
		- PRED   = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- SUCC   = { if , child , suffix , in , PYTHON_EXTENSIONS , }

1432 :	"from"
		- NEIGH  = { yield , from , gen_python_files_in_dir , child , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { }
		- PRED   = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- SUCC   = { if , child , suffix , in , PYTHON_EXTENSIONS , }

1432 :	"gen_python_files_in_dir"
		- NEIGH  = { yield , from , gen_python_files_in_dir , child , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { }
		- PRED   = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- SUCC   = { if , child , suffix , in , PYTHON_EXTENSIONS , }

1432 :	"child"
		- NEIGH  = { yield , from , gen_python_files_in_dir , child , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { }
		- PRED   = { if , child , name , in , BLACKLISTED_DIRECTORIES , }
		- SUCC   = { if , child , suffix , in , PYTHON_EXTENSIONS , }

1434 :	"if"
		- NEIGH  = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { yield , child , }
		- PRED   = { yield , from , gen_python_files_in_dir , child , }
		- SUCC   = { }

1434 :	"child"
		- NEIGH  = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { yield , child , }
		- PRED   = { yield , from , gen_python_files_in_dir , child , }
		- SUCC   = { }

1434 :	"suffix"
		- NEIGH  = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { yield , child , }
		- PRED   = { yield , from , gen_python_files_in_dir , child , }
		- SUCC   = { }

1434 :	"in"
		- NEIGH  = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { yield , child , }
		- PRED   = { yield , from , gen_python_files_in_dir , child , }
		- SUCC   = { }

1434 :	"PYTHON_EXTENSIONS"
		- NEIGH  = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- PARENT = { if , child , is_dir , }
		- CHILD  = { yield , child , }
		- PRED   = { yield , from , gen_python_files_in_dir , child , }
		- SUCC   = { }

1435 :	"yield"
		- NEIGH  = { yield , child , }
		- PARENT = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1435 :	"child"
		- NEIGH  = { yield , child , }
		- PARENT = { if , child , suffix , in , PYTHON_EXTENSIONS , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1439 :	"Report"
		- NEIGH  = { Report , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { gen_python_files_in_dir , path , }
		- SUCC   = { assert_equivalent , src , dst , }

1441 :	"check"
		- NEIGH  = { check , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { change_count , }

1442 :	"change_count"
		- NEIGH  = { change_count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { check , }
		- SUCC   = { same_count , }

1443 :	"same_count"
		- NEIGH  = { same_count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { change_count , }
		- SUCC   = { failure_count , }

1444 :	"failure_count"
		- NEIGH  = { failure_count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { same_count , }
		- SUCC   = { done , self , src , changed , }

1446 :	"done"
		- NEIGH  = { done , self , src , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { failure_count , }
		- SUCC   = { failed , self , src , message , }

1446 :	"self"
		- NEIGH  = { done , self , src , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { failure_count , }
		- SUCC   = { failed , self , src , message , }

1446 :	"src"
		- NEIGH  = { done , self , src , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { failure_count , }
		- SUCC   = { failed , self , src , message , }

1446 :	"changed"
		- NEIGH  = { done , self , src , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { failure_count , }
		- SUCC   = { failed , self , src , message , }

1448 :	"if"
		- NEIGH  = { if , changed , }
		- PARENT = { }
		- CHILD  = { reformatted , if-exp , self , check , else-exp , out , reformatted , src , self , change_count , += , out , src , bold , self , same_count , += , }
		- PRED   = { }
		- SUCC   = { }

1448 :	"changed"
		- NEIGH  = { if , changed , }
		- PARENT = { }
		- CHILD  = { reformatted , if-exp , self , check , else-exp , out , reformatted , src , self , change_count , += , out , src , bold , self , same_count , += , }
		- PRED   = { }
		- SUCC   = { }

1449 :	"reformatted"
		- NEIGH  = { reformatted , if-exp , self , check , else-exp , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , reformatted , src , }

1449 :	"if-exp"
		- NEIGH  = { reformatted , if-exp , self , check , else-exp , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , reformatted , src , }

1449 :	"self"
		- NEIGH  = { reformatted , if-exp , self , check , else-exp , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , reformatted , src , }

1449 :	"check"
		- NEIGH  = { reformatted , if-exp , self , check , else-exp , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , reformatted , src , }

1449 :	"else-exp"
		- NEIGH  = { reformatted , if-exp , self , check , else-exp , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { out , reformatted , src , }

1450 :	"out"
		- NEIGH  = { out , reformatted , src , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { reformatted , if-exp , self , check , else-exp , }
		- SUCC   = { self , change_count , += , }

1450 :	"reformatted"
		- NEIGH  = { out , reformatted , src , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { reformatted , if-exp , self , check , else-exp , }
		- SUCC   = { self , change_count , += , }

1450 :	"src"
		- NEIGH  = { out , reformatted , src , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { reformatted , if-exp , self , check , else-exp , }
		- SUCC   = { self , change_count , += , }

1451 :	"self"
		- NEIGH  = { self , change_count , += , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { out , reformatted , src , }
		- SUCC   = { out , src , bold , }

1451 :	"change_count"
		- NEIGH  = { self , change_count , += , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { out , reformatted , src , }
		- SUCC   = { out , src , bold , }

1451 :	"+="
		- NEIGH  = { self , change_count , += , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { out , reformatted , src , }
		- SUCC   = { out , src , bold , }

1453 :	"out"
		- NEIGH  = { out , src , bold , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { self , change_count , += , }
		- SUCC   = { self , same_count , += , }

1453 :	"src"
		- NEIGH  = { out , src , bold , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { self , change_count , += , }
		- SUCC   = { self , same_count , += , }

1453 :	"bold"
		- NEIGH  = { out , src , bold , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { self , change_count , += , }
		- SUCC   = { self , same_count , += , }

1454 :	"self"
		- NEIGH  = { self , same_count , += , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { out , src , bold , }
		- SUCC   = { }

1454 :	"same_count"
		- NEIGH  = { self , same_count , += , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { out , src , bold , }
		- SUCC   = { }

1454 :	"+="
		- NEIGH  = { self , same_count , += , }
		- PARENT = { if , changed , }
		- CHILD  = { }
		- PRED   = { out , src , bold , }
		- SUCC   = { }

1456 :	"failed"
		- NEIGH  = { failed , self , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , self , src , changed , }
		- SUCC   = { property , }

1456 :	"self"
		- NEIGH  = { failed , self , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , self , src , changed , }
		- SUCC   = { property , }

1456 :	"src"
		- NEIGH  = { failed , self , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , self , src , changed , }
		- SUCC   = { property , }

1456 :	"message"
		- NEIGH  = { failed , self , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , self , src , changed , }
		- SUCC   = { property , }

1458 :	"err"
		- NEIGH  = { err , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , failure_count , += , }

1458 :	"src"
		- NEIGH  = { err , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , failure_count , += , }

1458 :	"message"
		- NEIGH  = { err , src , message , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , failure_count , += , }

1459 :	"self"
		- NEIGH  = { self , failure_count , += , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , src , message , }
		- SUCC   = { }

1459 :	"failure_count"
		- NEIGH  = { self , failure_count , += , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , src , message , }
		- SUCC   = { }

1459 :	"+="
		- NEIGH  = { self , failure_count , += , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { err , src , message , }
		- SUCC   = { }

1461 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { failed , self , src , message , }
		- SUCC   = { return_code , self , }

1462 :	"return_code"
		- NEIGH  = { return_code , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { __str__ , self , }

1462 :	"self"
		- NEIGH  = { return_code , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { __str__ , self , }

1466 :	"if"
		- NEIGH  = { if , self , failure_count , }
		- PARENT = { }
		- CHILD  = { return , if , self , change_count , or , self , check , }
		- PRED   = { }
		- SUCC   = { return , }

1466 :	"self"
		- NEIGH  = { if , self , failure_count , }
		- PARENT = { }
		- CHILD  = { return , if , self , change_count , or , self , check , }
		- PRED   = { }
		- SUCC   = { return , }

1466 :	"failure_count"
		- NEIGH  = { if , self , failure_count , }
		- PARENT = { }
		- CHILD  = { return , if , self , change_count , or , self , check , }
		- PRED   = { }
		- SUCC   = { return , }

1467 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , change_count , or , self , check , }

1469 :	"if"
		- NEIGH  = { if , self , change_count , or , self , check , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { }

1469 :	"self"
		- NEIGH  = { if , self , change_count , or , self , check , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { }

1469 :	"change_count"
		- NEIGH  = { if , self , change_count , or , self , check , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { }

1469 :	"or"
		- NEIGH  = { if , self , change_count , or , self , check , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { }

1469 :	"self"
		- NEIGH  = { if , self , change_count , or , self , check , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { }

1469 :	"check"
		- NEIGH  = { if , self , change_count , or , self , check , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { return , }
		- PRED   = { return , }
		- SUCC   = { }

1470 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , change_count , or , self , check , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1472 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , failure_count , }
		- SUCC   = { }

1474 :	"__str__"
		- NEIGH  = { __str__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { return_code , self , }
		- SUCC   = { }

1474 :	"self"
		- NEIGH  = { __str__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { return_code , self , }
		- SUCC   = { }

1479 :	"if"
		- NEIGH  = { if , self , check , }
		- PARENT = { }
		- CHILD  = { reformatted , unchanged , failed , reformatted , unchanged , failed , }
		- PRED   = { }
		- SUCC   = { report , list , }

1479 :	"self"
		- NEIGH  = { if , self , check , }
		- PARENT = { }
		- CHILD  = { reformatted , unchanged , failed , reformatted , unchanged , failed , }
		- PRED   = { }
		- SUCC   = { report , list , }

1479 :	"check"
		- NEIGH  = { if , self , check , }
		- PARENT = { }
		- CHILD  = { reformatted , unchanged , failed , reformatted , unchanged , failed , }
		- PRED   = { }
		- SUCC   = { report , list , }

1480 :	"reformatted"
		- NEIGH  = { reformatted , }
		- PARENT = { if , self , check , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { unchanged , }

1481 :	"unchanged"
		- NEIGH  = { unchanged , }
		- PARENT = { if , self , check , }
		- CHILD  = { }
		- PRED   = { reformatted , }
		- SUCC   = { failed , }

1482 :	"failed"
		- NEIGH  = { failed , }
		- PARENT = { if , self , check , }
		- CHILD  = { }
		- PRED   = { unchanged , }
		- SUCC   = { reformatted , }

1484 :	"reformatted"
		- NEIGH  = { reformatted , }
		- PARENT = { if , self , check , }
		- CHILD  = { }
		- PRED   = { failed , }
		- SUCC   = { unchanged , }

1485 :	"unchanged"
		- NEIGH  = { unchanged , }
		- PARENT = { if , self , check , }
		- CHILD  = { }
		- PRED   = { reformatted , }
		- SUCC   = { failed , }

1486 :	"failed"
		- NEIGH  = { failed , }
		- PARENT = { if , self , check , }
		- CHILD  = { }
		- PRED   = { unchanged , }
		- SUCC   = { }

1487 :	"report"
		- NEIGH  = { report , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , check , }
		- SUCC   = { if , self , change_count , }

1487 :	"list"
		- NEIGH  = { report , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , check , }
		- SUCC   = { if , self , change_count , }

1488 :	"if"
		- NEIGH  = { if , self , change_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , change_count , > , else-exp , report , append , click , style , self , change_count , s , reformatted , bold , }
		- PRED   = { report , list , }
		- SUCC   = { if , self , same_count , }

1488 :	"self"
		- NEIGH  = { if , self , change_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , change_count , > , else-exp , report , append , click , style , self , change_count , s , reformatted , bold , }
		- PRED   = { report , list , }
		- SUCC   = { if , self , same_count , }

1488 :	"change_count"
		- NEIGH  = { if , self , change_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , change_count , > , else-exp , report , append , click , style , self , change_count , s , reformatted , bold , }
		- PRED   = { report , list , }
		- SUCC   = { if , self , same_count , }

1489 :	"s"
		- NEIGH  = { s , if-exp , self , change_count , > , else-exp , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , change_count , s , reformatted , bold , }

1489 :	"if-exp"
		- NEIGH  = { s , if-exp , self , change_count , > , else-exp , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , change_count , s , reformatted , bold , }

1489 :	"self"
		- NEIGH  = { s , if-exp , self , change_count , > , else-exp , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , change_count , s , reformatted , bold , }

1489 :	"change_count"
		- NEIGH  = { s , if-exp , self , change_count , > , else-exp , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , change_count , s , reformatted , bold , }

1489 :	">"
		- NEIGH  = { s , if-exp , self , change_count , > , else-exp , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , change_count , s , reformatted , bold , }

1489 :	"else-exp"
		- NEIGH  = { s , if-exp , self , change_count , > , else-exp , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , change_count , s , reformatted , bold , }

1490 :	"report"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1490 :	"append"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"click"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"style"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"self"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"change_count"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"s"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"reformatted"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1491 :	"bold"
		- NEIGH  = { report , append , click , style , self , change_count , s , reformatted , bold , }
		- PARENT = { if , self , change_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , change_count , > , else-exp , }
		- SUCC   = { }

1493 :	"if"
		- NEIGH  = { if , self , same_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , same_count , > , else-exp , report , append , self , same_count , s , unchanged , }
		- PRED   = { if , self , change_count , }
		- SUCC   = { if , self , failure_count , }

1493 :	"self"
		- NEIGH  = { if , self , same_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , same_count , > , else-exp , report , append , self , same_count , s , unchanged , }
		- PRED   = { if , self , change_count , }
		- SUCC   = { if , self , failure_count , }

1493 :	"same_count"
		- NEIGH  = { if , self , same_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , same_count , > , else-exp , report , append , self , same_count , s , unchanged , }
		- PRED   = { if , self , change_count , }
		- SUCC   = { if , self , failure_count , }

1494 :	"s"
		- NEIGH  = { s , if-exp , self , same_count , > , else-exp , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , self , same_count , s , unchanged , }

1494 :	"if-exp"
		- NEIGH  = { s , if-exp , self , same_count , > , else-exp , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , self , same_count , s , unchanged , }

1494 :	"self"
		- NEIGH  = { s , if-exp , self , same_count , > , else-exp , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , self , same_count , s , unchanged , }

1494 :	"same_count"
		- NEIGH  = { s , if-exp , self , same_count , > , else-exp , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , self , same_count , s , unchanged , }

1494 :	">"
		- NEIGH  = { s , if-exp , self , same_count , > , else-exp , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , self , same_count , s , unchanged , }

1494 :	"else-exp"
		- NEIGH  = { s , if-exp , self , same_count , > , else-exp , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , self , same_count , s , unchanged , }

1495 :	"report"
		- NEIGH  = { report , append , self , same_count , s , unchanged , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , same_count , > , else-exp , }
		- SUCC   = { }

1495 :	"append"
		- NEIGH  = { report , append , self , same_count , s , unchanged , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , same_count , > , else-exp , }
		- SUCC   = { }

1495 :	"self"
		- NEIGH  = { report , append , self , same_count , s , unchanged , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , same_count , > , else-exp , }
		- SUCC   = { }

1495 :	"same_count"
		- NEIGH  = { report , append , self , same_count , s , unchanged , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , same_count , > , else-exp , }
		- SUCC   = { }

1495 :	"s"
		- NEIGH  = { report , append , self , same_count , s , unchanged , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , same_count , > , else-exp , }
		- SUCC   = { }

1495 :	"unchanged"
		- NEIGH  = { report , append , self , same_count , s , unchanged , }
		- PARENT = { if , self , same_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , same_count , > , else-exp , }
		- SUCC   = { }

1496 :	"if"
		- NEIGH  = { if , self , failure_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , failure_count , > , else-exp , report , append , click , style , self , failure_count , s , failed , fg , }
		- PRED   = { if , self , same_count , }
		- SUCC   = { return , join , report , + , }

1496 :	"self"
		- NEIGH  = { if , self , failure_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , failure_count , > , else-exp , report , append , click , style , self , failure_count , s , failed , fg , }
		- PRED   = { if , self , same_count , }
		- SUCC   = { return , join , report , + , }

1496 :	"failure_count"
		- NEIGH  = { if , self , failure_count , }
		- PARENT = { }
		- CHILD  = { s , if-exp , self , failure_count , > , else-exp , report , append , click , style , self , failure_count , s , failed , fg , }
		- PRED   = { if , self , same_count , }
		- SUCC   = { return , join , report , + , }

1497 :	"s"
		- NEIGH  = { s , if-exp , self , failure_count , > , else-exp , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , failure_count , s , failed , fg , }

1497 :	"if-exp"
		- NEIGH  = { s , if-exp , self , failure_count , > , else-exp , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , failure_count , s , failed , fg , }

1497 :	"self"
		- NEIGH  = { s , if-exp , self , failure_count , > , else-exp , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , failure_count , s , failed , fg , }

1497 :	"failure_count"
		- NEIGH  = { s , if-exp , self , failure_count , > , else-exp , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , failure_count , s , failed , fg , }

1497 :	">"
		- NEIGH  = { s , if-exp , self , failure_count , > , else-exp , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , failure_count , s , failed , fg , }

1497 :	"else-exp"
		- NEIGH  = { s , if-exp , self , failure_count , > , else-exp , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { report , append , click , style , self , failure_count , s , failed , fg , }

1498 :	"report"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1498 :	"append"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"click"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"style"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"self"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"failure_count"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"s"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"failed"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1499 :	"fg"
		- NEIGH  = { report , append , click , style , self , failure_count , s , failed , fg , }
		- PARENT = { if , self , failure_count , }
		- CHILD  = { }
		- PRED   = { s , if-exp , self , failure_count , > , else-exp , }
		- SUCC   = { }

1501 :	"return"
		- NEIGH  = { return , join , report , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , failure_count , }
		- SUCC   = { }

1501 :	"join"
		- NEIGH  = { return , join , report , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , failure_count , }
		- SUCC   = { }

1501 :	"report"
		- NEIGH  = { return , join , report , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , failure_count , }
		- SUCC   = { }

1501 :	"+"
		- NEIGH  = { return , join , report , + , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , failure_count , }
		- SUCC   = { }

1504 :	"assert_equivalent"
		- NEIGH  = { assert_equivalent , src , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Report , }
		- SUCC   = { assert_stable , src , dst , line_length , }

1504 :	"src"
		- NEIGH  = { assert_equivalent , src , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Report , }
		- SUCC   = { assert_stable , src , dst , line_length , }

1504 :	"dst"
		- NEIGH  = { assert_equivalent , src , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Report , }
		- SUCC   = { assert_stable , src , dst , line_length , }

1510 :	"import"
		- NEIGH  = { import , ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { import , traceback , }

1510 :	"ast"
		- NEIGH  = { import , ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { import , traceback , }

1511 :	"import"
		- NEIGH  = { import , traceback , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , ast , }
		- SUCC   = { _v , node , depth , }

1511 :	"traceback"
		- NEIGH  = { import , traceback , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , ast , }
		- SUCC   = { _v , node , depth , }

1513 :	"_v"
		- NEIGH  = { _v , node , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , traceback , }
		- SUCC   = { try , }

1513 :	"node"
		- NEIGH  = { _v , node , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , traceback , }
		- SUCC   = { try , }

1513 :	"depth"
		- NEIGH  = { _v , node , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , traceback , }
		- SUCC   = { try , }

1515 :	"yield"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , field , sorted , node , _fields , }

1515 :	"*"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , field , sorted , node , _fields , }

1515 :	"depth"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , field , sorted , node , _fields , }

1515 :	"node"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , field , sorted , node , _fields , }

1515 :	"__class__"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , field , sorted , node , _fields , }

1515 :	"__name__"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , field , sorted , node , _fields , }

1517 :	"for"
		- NEIGH  = { for , field , sorted , node , _fields , }
		- PARENT = { }
		- CHILD  = { try , value , getattr , node , field , except , AttributeError , yield , * , depth , + , field , if , isinstance , value , list , }
		- PRED   = { yield , * , depth , node , __class__ , __name__ , }
		- SUCC   = { yield , * , depth , node , __class__ , __name__ , }

1517 :	"field"
		- NEIGH  = { for , field , sorted , node , _fields , }
		- PARENT = { }
		- CHILD  = { try , value , getattr , node , field , except , AttributeError , yield , * , depth , + , field , if , isinstance , value , list , }
		- PRED   = { yield , * , depth , node , __class__ , __name__ , }
		- SUCC   = { yield , * , depth , node , __class__ , __name__ , }

1517 :	"sorted"
		- NEIGH  = { for , field , sorted , node , _fields , }
		- PARENT = { }
		- CHILD  = { try , value , getattr , node , field , except , AttributeError , yield , * , depth , + , field , if , isinstance , value , list , }
		- PRED   = { yield , * , depth , node , __class__ , __name__ , }
		- SUCC   = { yield , * , depth , node , __class__ , __name__ , }

1517 :	"node"
		- NEIGH  = { for , field , sorted , node , _fields , }
		- PARENT = { }
		- CHILD  = { try , value , getattr , node , field , except , AttributeError , yield , * , depth , + , field , if , isinstance , value , list , }
		- PRED   = { yield , * , depth , node , __class__ , __name__ , }
		- SUCC   = { yield , * , depth , node , __class__ , __name__ , }

1517 :	"_fields"
		- NEIGH  = { for , field , sorted , node , _fields , }
		- PARENT = { }
		- CHILD  = { try , value , getattr , node , field , except , AttributeError , yield , * , depth , + , field , if , isinstance , value , list , }
		- PRED   = { yield , * , depth , node , __class__ , __name__ , }
		- SUCC   = { yield , * , depth , node , __class__ , __name__ , }

1518 :	"try"
		- NEIGH  = { try , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { value , getattr , node , field , }

1519 :	"value"
		- NEIGH  = { value , getattr , node , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , AttributeError , }

1519 :	"getattr"
		- NEIGH  = { value , getattr , node , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , AttributeError , }

1519 :	"node"
		- NEIGH  = { value , getattr , node , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , AttributeError , }

1519 :	"field"
		- NEIGH  = { value , getattr , node , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , AttributeError , }

1520 :	"except"
		- NEIGH  = { except , AttributeError , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { continue , }
		- PRED   = { value , getattr , node , field , }
		- SUCC   = { yield , * , depth , + , field , }

1520 :	"AttributeError"
		- NEIGH  = { except , AttributeError , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { continue , }
		- PRED   = { value , getattr , node , field , }
		- SUCC   = { yield , * , depth , + , field , }

1521 :	"continue"
		- NEIGH  = { continue , }
		- PARENT = { except , AttributeError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1523 :	"yield"
		- NEIGH  = { yield , * , depth , + , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { except , AttributeError , }
		- SUCC   = { if , isinstance , value , list , }

1523 :	"*"
		- NEIGH  = { yield , * , depth , + , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { except , AttributeError , }
		- SUCC   = { if , isinstance , value , list , }

1523 :	"depth"
		- NEIGH  = { yield , * , depth , + , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { except , AttributeError , }
		- SUCC   = { if , isinstance , value , list , }

1523 :	"+"
		- NEIGH  = { yield , * , depth , + , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { except , AttributeError , }
		- SUCC   = { if , isinstance , value , list , }

1523 :	"field"
		- NEIGH  = { yield , * , depth , + , field , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { }
		- PRED   = { except , AttributeError , }
		- SUCC   = { if , isinstance , value , list , }

1525 :	"if"
		- NEIGH  = { if , isinstance , value , list , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { for , item , value , if , isinstance , value , ast , AST , }
		- PRED   = { yield , * , depth , + , field , }
		- SUCC   = { }

1525 :	"isinstance"
		- NEIGH  = { if , isinstance , value , list , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { for , item , value , if , isinstance , value , ast , AST , }
		- PRED   = { yield , * , depth , + , field , }
		- SUCC   = { }

1525 :	"value"
		- NEIGH  = { if , isinstance , value , list , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { for , item , value , if , isinstance , value , ast , AST , }
		- PRED   = { yield , * , depth , + , field , }
		- SUCC   = { }

1525 :	"list"
		- NEIGH  = { if , isinstance , value , list , }
		- PARENT = { for , field , sorted , node , _fields , }
		- CHILD  = { for , item , value , if , isinstance , value , ast , AST , }
		- PRED   = { yield , * , depth , + , field , }
		- SUCC   = { }

1526 :	"for"
		- NEIGH  = { for , item , value , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { if , isinstance , item , ast , AST , }
		- PRED   = { }
		- SUCC   = { if , isinstance , value , ast , AST , }

1526 :	"item"
		- NEIGH  = { for , item , value , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { if , isinstance , item , ast , AST , }
		- PRED   = { }
		- SUCC   = { if , isinstance , value , ast , AST , }

1526 :	"value"
		- NEIGH  = { for , item , value , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { if , isinstance , item , ast , AST , }
		- PRED   = { }
		- SUCC   = { if , isinstance , value , ast , AST , }

1527 :	"if"
		- NEIGH  = { if , isinstance , item , ast , AST , }
		- PARENT = { for , item , value , }
		- CHILD  = { yield , from , _v , item , depth , + , }
		- PRED   = { }
		- SUCC   = { }

1527 :	"isinstance"
		- NEIGH  = { if , isinstance , item , ast , AST , }
		- PARENT = { for , item , value , }
		- CHILD  = { yield , from , _v , item , depth , + , }
		- PRED   = { }
		- SUCC   = { }

1527 :	"item"
		- NEIGH  = { if , isinstance , item , ast , AST , }
		- PARENT = { for , item , value , }
		- CHILD  = { yield , from , _v , item , depth , + , }
		- PRED   = { }
		- SUCC   = { }

1527 :	"ast"
		- NEIGH  = { if , isinstance , item , ast , AST , }
		- PARENT = { for , item , value , }
		- CHILD  = { yield , from , _v , item , depth , + , }
		- PRED   = { }
		- SUCC   = { }

1527 :	"AST"
		- NEIGH  = { if , isinstance , item , ast , AST , }
		- PARENT = { for , item , value , }
		- CHILD  = { yield , from , _v , item , depth , + , }
		- PRED   = { }
		- SUCC   = { }

1528 :	"yield"
		- NEIGH  = { yield , from , _v , item , depth , + , }
		- PARENT = { if , isinstance , item , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1528 :	"from"
		- NEIGH  = { yield , from , _v , item , depth , + , }
		- PARENT = { if , isinstance , item , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1528 :	"_v"
		- NEIGH  = { yield , from , _v , item , depth , + , }
		- PARENT = { if , isinstance , item , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1528 :	"item"
		- NEIGH  = { yield , from , _v , item , depth , + , }
		- PARENT = { if , isinstance , item , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1528 :	"depth"
		- NEIGH  = { yield , from , _v , item , depth , + , }
		- PARENT = { if , isinstance , item , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1528 :	"+"
		- NEIGH  = { yield , from , _v , item , depth , + , }
		- PARENT = { if , isinstance , item , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1530 :	"if"
		- NEIGH  = { if , isinstance , value , ast , AST , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { yield , from , _v , value , depth , + , yield , * , depth , + , value , value , __class__ , __name__ , }
		- PRED   = { for , item , value , }
		- SUCC   = { }

1530 :	"isinstance"
		- NEIGH  = { if , isinstance , value , ast , AST , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { yield , from , _v , value , depth , + , yield , * , depth , + , value , value , __class__ , __name__ , }
		- PRED   = { for , item , value , }
		- SUCC   = { }

1530 :	"value"
		- NEIGH  = { if , isinstance , value , ast , AST , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { yield , from , _v , value , depth , + , yield , * , depth , + , value , value , __class__ , __name__ , }
		- PRED   = { for , item , value , }
		- SUCC   = { }

1530 :	"ast"
		- NEIGH  = { if , isinstance , value , ast , AST , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { yield , from , _v , value , depth , + , yield , * , depth , + , value , value , __class__ , __name__ , }
		- PRED   = { for , item , value , }
		- SUCC   = { }

1530 :	"AST"
		- NEIGH  = { if , isinstance , value , ast , AST , }
		- PARENT = { if , isinstance , value , list , }
		- CHILD  = { yield , from , _v , value , depth , + , yield , * , depth , + , value , value , __class__ , __name__ , }
		- PRED   = { for , item , value , }
		- SUCC   = { }

1531 :	"yield"
		- NEIGH  = { yield , from , _v , value , depth , + , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , * , depth , + , value , value , __class__ , __name__ , }

1531 :	"from"
		- NEIGH  = { yield , from , _v , value , depth , + , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , * , depth , + , value , value , __class__ , __name__ , }

1531 :	"_v"
		- NEIGH  = { yield , from , _v , value , depth , + , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , * , depth , + , value , value , __class__ , __name__ , }

1531 :	"value"
		- NEIGH  = { yield , from , _v , value , depth , + , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , * , depth , + , value , value , __class__ , __name__ , }

1531 :	"depth"
		- NEIGH  = { yield , from , _v , value , depth , + , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , * , depth , + , value , value , __class__ , __name__ , }

1531 :	"+"
		- NEIGH  = { yield , from , _v , value , depth , + , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { yield , * , depth , + , value , value , __class__ , __name__ , }

1534 :	"yield"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"*"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"depth"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"+"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"value"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"value"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"__class__"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1534 :	"__name__"
		- NEIGH  = { yield , * , depth , + , value , value , __class__ , __name__ , }
		- PARENT = { if , isinstance , value , ast , AST , }
		- CHILD  = { }
		- PRED   = { yield , from , _v , value , depth , + , }
		- SUCC   = { }

1536 :	"yield"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , field , sorted , node , _fields , }
		- SUCC   = { }

1536 :	"*"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , field , sorted , node , _fields , }
		- SUCC   = { }

1536 :	"depth"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , field , sorted , node , _fields , }
		- SUCC   = { }

1536 :	"node"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , field , sorted , node , _fields , }
		- SUCC   = { }

1536 :	"__class__"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , field , sorted , node , _fields , }
		- SUCC   = { }

1536 :	"__name__"
		- NEIGH  = { yield , * , depth , node , __class__ , __name__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , field , sorted , node , _fields , }
		- SUCC   = { }

1538 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _v , node , depth , }
		- SUCC   = { src_ast , ast , parse , src , }

1539 :	"src_ast"
		- NEIGH  = { src_ast , ast , parse , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1539 :	"ast"
		- NEIGH  = { src_ast , ast , parse , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1539 :	"parse"
		- NEIGH  = { src_ast , ast , parse , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1539 :	"src"
		- NEIGH  = { src_ast , ast , parse , src , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1540 :	"except"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { }
		- CHILD  = { raise , AssertionError , exc , from , }
		- PRED   = { src_ast , ast , parse , src , }
		- SUCC   = { try , }

1540 :	"Exception"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { }
		- CHILD  = { raise , AssertionError , exc , from , }
		- PRED   = { src_ast , ast , parse , src , }
		- SUCC   = { try , }

1540 :	"exc"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { }
		- CHILD  = { raise , AssertionError , exc , from , }
		- PRED   = { src_ast , ast , parse , src , }
		- SUCC   = { try , }

1541 :	"raise"
		- NEIGH  = { raise , AssertionError , exc , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1541 :	"AssertionError"
		- NEIGH  = { raise , AssertionError , exc , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1541 :	"exc"
		- NEIGH  = { raise , AssertionError , exc , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1541 :	"from"
		- NEIGH  = { raise , AssertionError , exc , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

1543 :	"try"
		- NEIGH  = { try , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { dst_ast , ast , parse , dst , }

1544 :	"dst_ast"
		- NEIGH  = { dst_ast , ast , parse , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1544 :	"ast"
		- NEIGH  = { dst_ast , ast , parse , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1544 :	"parse"
		- NEIGH  = { dst_ast , ast , parse , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1544 :	"dst"
		- NEIGH  = { dst_ast , ast , parse , dst , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , Exception , exc , }

1545 :	"except"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , raise , AssertionError , exc , log , from , }
		- PRED   = { dst_ast , ast , parse , dst , }
		- SUCC   = { src_ast_str , join , _v , src_ast , }

1545 :	"Exception"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , raise , AssertionError , exc , log , from , }
		- PRED   = { dst_ast , ast , parse , dst , }
		- SUCC   = { src_ast_str , join , _v , src_ast , }

1545 :	"exc"
		- NEIGH  = { except , Exception , exc , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , raise , AssertionError , exc , log , from , }
		- PRED   = { dst_ast , ast , parse , dst , }
		- SUCC   = { src_ast_str , join , _v , src_ast , }

1546 :	"log"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"dump_to_file"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"join"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"traceback"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"format_tb"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"exc"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"__traceback__"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1546 :	"dst"
		- NEIGH  = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , exc , log , from , }

1547 :	"raise"
		- NEIGH  = { raise , AssertionError , exc , log , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- SUCC   = { }

1547 :	"AssertionError"
		- NEIGH  = { raise , AssertionError , exc , log , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- SUCC   = { }

1548 :	"exc"
		- NEIGH  = { raise , AssertionError , exc , log , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- SUCC   = { }

1550 :	"log"
		- NEIGH  = { raise , AssertionError , exc , log , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- SUCC   = { }

1551 :	"from"
		- NEIGH  = { raise , AssertionError , exc , log , from , }
		- PARENT = { except , Exception , exc , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , join , traceback , format_tb , exc , __traceback__ , dst , }
		- SUCC   = { }

1553 :	"src_ast_str"
		- NEIGH  = { src_ast_str , join , _v , src_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { dst_ast_str , join , _v , dst_ast , }

1553 :	"join"
		- NEIGH  = { src_ast_str , join , _v , src_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { dst_ast_str , join , _v , dst_ast , }

1553 :	"_v"
		- NEIGH  = { src_ast_str , join , _v , src_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { dst_ast_str , join , _v , dst_ast , }

1553 :	"src_ast"
		- NEIGH  = { src_ast_str , join , _v , src_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { except , Exception , exc , }
		- SUCC   = { dst_ast_str , join , _v , dst_ast , }

1554 :	"dst_ast_str"
		- NEIGH  = { dst_ast_str , join , _v , dst_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { src_ast_str , join , _v , src_ast , }
		- SUCC   = { if , src_ast_str , != , dst_ast_str , }

1554 :	"join"
		- NEIGH  = { dst_ast_str , join , _v , dst_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { src_ast_str , join , _v , src_ast , }
		- SUCC   = { if , src_ast_str , != , dst_ast_str , }

1554 :	"_v"
		- NEIGH  = { dst_ast_str , join , _v , dst_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { src_ast_str , join , _v , src_ast , }
		- SUCC   = { if , src_ast_str , != , dst_ast_str , }

1554 :	"dst_ast"
		- NEIGH  = { dst_ast_str , join , _v , dst_ast , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { src_ast_str , join , _v , src_ast , }
		- SUCC   = { if , src_ast_str , != , dst_ast_str , }

1555 :	"if"
		- NEIGH  = { if , src_ast_str , != , dst_ast_str , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , raise , AssertionError , log , from , }
		- PRED   = { dst_ast_str , join , _v , dst_ast , }
		- SUCC   = { }

1555 :	"src_ast_str"
		- NEIGH  = { if , src_ast_str , != , dst_ast_str , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , raise , AssertionError , log , from , }
		- PRED   = { dst_ast_str , join , _v , dst_ast , }
		- SUCC   = { }

1555 :	"!="
		- NEIGH  = { if , src_ast_str , != , dst_ast_str , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , raise , AssertionError , log , from , }
		- PRED   = { dst_ast_str , join , _v , dst_ast , }
		- SUCC   = { }

1555 :	"dst_ast_str"
		- NEIGH  = { if , src_ast_str , != , dst_ast_str , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , raise , AssertionError , log , from , }
		- PRED   = { dst_ast_str , join , _v , dst_ast , }
		- SUCC   = { }

1556 :	"log"
		- NEIGH  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1556 :	"dump_to_file"
		- NEIGH  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1556 :	"diff"
		- NEIGH  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1556 :	"src_ast_str"
		- NEIGH  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1556 :	"dst_ast_str"
		- NEIGH  = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1557 :	"raise"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- SUCC   = { }

1557 :	"AssertionError"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- SUCC   = { }

1561 :	"log"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- SUCC   = { }

1562 :	"from"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , src_ast_str , != , dst_ast_str , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src_ast_str , dst_ast_str , }
		- SUCC   = { }

1565 :	"assert_stable"
		- NEIGH  = { assert_stable , src , dst , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src , dst , }
		- SUCC   = { dump_to_file , output , }

1565 :	"src"
		- NEIGH  = { assert_stable , src , dst , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src , dst , }
		- SUCC   = { dump_to_file , output , }

1565 :	"dst"
		- NEIGH  = { assert_stable , src , dst , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src , dst , }
		- SUCC   = { dump_to_file , output , }

1565 :	"line_length"
		- NEIGH  = { assert_stable , src , dst , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert_equivalent , src , dst , }
		- SUCC   = { dump_to_file , output , }

1570 :	"newdst"
		- NEIGH  = { newdst , format_str , dst , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , dst , != , newdst , }

1570 :	"format_str"
		- NEIGH  = { newdst , format_str , dst , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , dst , != , newdst , }

1570 :	"dst"
		- NEIGH  = { newdst , format_str , dst , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , dst , != , newdst , }

1570 :	"line_length"
		- NEIGH  = { newdst , format_str , dst , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , dst , != , newdst , }

1570 :	"line_length"
		- NEIGH  = { newdst , format_str , dst , line_length , line_length , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , dst , != , newdst , }

1571 :	"if"
		- NEIGH  = { if , dst , != , newdst , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , raise , AssertionError , log , from , }
		- PRED   = { newdst , format_str , dst , line_length , line_length , }
		- SUCC   = { }

1571 :	"dst"
		- NEIGH  = { if , dst , != , newdst , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , raise , AssertionError , log , from , }
		- PRED   = { newdst , format_str , dst , line_length , line_length , }
		- SUCC   = { }

1571 :	"!="
		- NEIGH  = { if , dst , != , newdst , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , raise , AssertionError , log , from , }
		- PRED   = { newdst , format_str , dst , line_length , line_length , }
		- SUCC   = { }

1571 :	"newdst"
		- NEIGH  = { if , dst , != , newdst , }
		- PARENT = { }
		- CHILD  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , raise , AssertionError , log , from , }
		- PRED   = { newdst , format_str , dst , line_length , line_length , }
		- SUCC   = { }

1572 :	"log"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1572 :	"dump_to_file"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1573 :	"diff"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1573 :	"src"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1573 :	"dst"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1574 :	"diff"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1574 :	"dst"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1574 :	"newdst"
		- NEIGH  = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { raise , AssertionError , log , from , }

1576 :	"raise"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- SUCC   = { }

1576 :	"AssertionError"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- SUCC   = { }

1580 :	"log"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- SUCC   = { }

1581 :	"from"
		- NEIGH  = { raise , AssertionError , log , from , }
		- PARENT = { if , dst , != , newdst , }
		- CHILD  = { }
		- PRED   = { log , dump_to_file , diff , src , dst , diff , dst , newdst , }
		- SUCC   = { }

1584 :	"dump_to_file"
		- NEIGH  = { dump_to_file , output , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert_stable , src , dst , line_length , }
		- SUCC   = { diff , a , b , a_name , b_name , }

1584 :	"output"
		- NEIGH  = { dump_to_file , output , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert_stable , src , dst , line_length , }
		- SUCC   = { diff , a , b , a_name , b_name , }

1586 :	"import"
		- NEIGH  = { import , tempfile , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }

1586 :	"tempfile"
		- NEIGH  = { import , tempfile , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }

1588 :	"with"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1588 :	"tempfile"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1588 :	"NamedTemporaryFile"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1589 :	"mode"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1589 :	"prefix"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1589 :	"suffix"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1589 :	"delete"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1590 :	"f"
		- NEIGH  = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tempfile , }
		- SUCC   = { for , lines , output , }

1591 :	"for"
		- NEIGH  = { for , lines , output , }
		- PARENT = { }
		- CHILD  = { f , write , lines , f , write , }
		- PRED   = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- SUCC   = { return , f , name , }

1591 :	"lines"
		- NEIGH  = { for , lines , output , }
		- PARENT = { }
		- CHILD  = { f , write , lines , f , write , }
		- PRED   = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- SUCC   = { return , f , name , }

1591 :	"output"
		- NEIGH  = { for , lines , output , }
		- PARENT = { }
		- CHILD  = { f , write , lines , f , write , }
		- PRED   = { with , tempfile , NamedTemporaryFile , mode , prefix , suffix , delete , f , }
		- SUCC   = { return , f , name , }

1592 :	"f"
		- NEIGH  = { f , write , lines , }
		- PARENT = { for , lines , output , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , }

1592 :	"write"
		- NEIGH  = { f , write , lines , }
		- PARENT = { for , lines , output , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , }

1592 :	"lines"
		- NEIGH  = { f , write , lines , }
		- PARENT = { for , lines , output , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { f , write , }

1593 :	"f"
		- NEIGH  = { f , write , }
		- PARENT = { for , lines , output , }
		- CHILD  = { }
		- PRED   = { f , write , lines , }
		- SUCC   = { }

1593 :	"write"
		- NEIGH  = { f , write , }
		- PARENT = { for , lines , output , }
		- CHILD  = { }
		- PRED   = { f , write , lines , }
		- SUCC   = { }

1594 :	"return"
		- NEIGH  = { return , f , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , lines , output , }
		- SUCC   = { }

1594 :	"f"
		- NEIGH  = { return , f , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , lines , output , }
		- SUCC   = { }

1594 :	"name"
		- NEIGH  = { return , f , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , lines , output , }
		- SUCC   = { }

1597 :	"diff"
		- NEIGH  = { diff , a , b , a_name , b_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dump_to_file , output , }
		- SUCC   = { if , __name__ , == , }

1597 :	"a"
		- NEIGH  = { diff , a , b , a_name , b_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dump_to_file , output , }
		- SUCC   = { if , __name__ , == , }

1597 :	"b"
		- NEIGH  = { diff , a , b , a_name , b_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dump_to_file , output , }
		- SUCC   = { if , __name__ , == , }

1597 :	"a_name"
		- NEIGH  = { diff , a , b , a_name , b_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dump_to_file , output , }
		- SUCC   = { if , __name__ , == , }

1597 :	"b_name"
		- NEIGH  = { diff , a , b , a_name , b_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { dump_to_file , output , }
		- SUCC   = { if , __name__ , == , }

1599 :	"import"
		- NEIGH  = { import , difflib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { a_lines , list-comp , line , + , for-comp , line , a , split , }

1599 :	"difflib"
		- NEIGH  = { import , difflib , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { a_lines , list-comp , line , + , for-comp , line , a , split , }

1601 :	"a_lines"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"list-comp"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"line"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"+"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"for-comp"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"line"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"a"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1601 :	"split"
		- NEIGH  = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , difflib , }
		- SUCC   = { b_lines , list-comp , line , + , for-comp , line , b , split , }

1602 :	"b_lines"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"list-comp"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"line"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"+"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"for-comp"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"line"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"b"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1602 :	"split"
		- NEIGH  = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { a_lines , list-comp , line , + , for-comp , line , a , split , }
		- SUCC   = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }

1603 :	"return"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1603 :	"join"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"difflib"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"unified_diff"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"a_lines"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"b_lines"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"fromfile"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"a_name"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"tofile"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"b_name"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1604 :	"n"
		- NEIGH  = { return , join , difflib , unified_diff , a_lines , b_lines , fromfile , a_name , tofile , b_name , n , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { b_lines , list-comp , line , + , for-comp , line , b , split , }
		- SUCC   = { }

1608 :	"if"
		- NEIGH  = { if , __name__ , == , }
		- PARENT = { }
		- CHILD  = { main , }
		- PRED   = { diff , a , b , a_name , b_name , }
		- SUCC   = { }

1608 :	"__name__"
		- NEIGH  = { if , __name__ , == , }
		- PARENT = { }
		- CHILD  = { main , }
		- PRED   = { diff , a , b , a_name , b_name , }
		- SUCC   = { }

1608 :	"=="
		- NEIGH  = { if , __name__ , == , }
		- PARENT = { }
		- CHILD  = { main , }
		- PRED   = { diff , a , b , a_name , b_name , }
		- SUCC   = { }

1609 :	"main"
		- NEIGH  = { main , }
		- PARENT = { if , __name__ , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

