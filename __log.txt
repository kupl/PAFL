13 :	"__author__"
		- NEIGH  = { __author__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { import , sys , }

15 :	"import"
		- NEIGH  = { import , sys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __author__ , }
		- SUCC   = { import , StringIO , }

15 :	"sys"
		- NEIGH  = { import , sys , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __author__ , }
		- SUCC   = { import , StringIO , }

16 :	"import"
		- NEIGH  = { import , StringIO , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { HUGE , }

16 :	"StringIO"
		- NEIGH  = { import , StringIO , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , sys , }
		- SUCC   = { HUGE , }

18 :	"HUGE"
		- NEIGH  = { HUGE , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , StringIO , }
		- SUCC   = { _type_reprs , dict , }

20 :	"_type_reprs"
		- NEIGH  = { _type_reprs , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE , }
		- SUCC   = { type_repr , type_num , }

20 :	"dict"
		- NEIGH  = { _type_reprs , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { HUGE , }
		- SUCC   = { type_repr , type_num , }

21 :	"type_repr"
		- NEIGH  = { type_repr , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _type_reprs , dict , }
		- SUCC   = { Base , }

21 :	"type_num"
		- NEIGH  = { type_repr , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _type_reprs , dict , }
		- SUCC   = { Base , }

22 :	"global"
		- NEIGH  = { global , _type_reprs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , _type_reprs , }

22 :	"_type_reprs"
		- NEIGH  = { global , _type_reprs , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , _type_reprs , }

23 :	"if"
		- NEIGH  = { if , _type_reprs , }
		- PARENT = { }
		- CHILD  = { import , python_symbols , for , tuple , name , val , python_symbols , __dict__ , items , }
		- PRED   = { global , _type_reprs , }
		- SUCC   = { return , _type_reprs , setdefault , type_num , type_num , }

23 :	"_type_reprs"
		- NEIGH  = { if , _type_reprs , }
		- PARENT = { }
		- CHILD  = { import , python_symbols , for , tuple , name , val , python_symbols , __dict__ , items , }
		- PRED   = { global , _type_reprs , }
		- SUCC   = { return , _type_reprs , setdefault , type_num , type_num , }

24 :	"import"
		- NEIGH  = { import , python_symbols , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , name , val , python_symbols , __dict__ , items , }

24 :	"python_symbols"
		- NEIGH  = { import , python_symbols , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , name , val , python_symbols , __dict__ , items , }

27 :	"for"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

27 :	"tuple"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

27 :	"name"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

27 :	"val"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

27 :	"python_symbols"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

27 :	"__dict__"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

27 :	"items"
		- NEIGH  = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- PARENT = { if , _type_reprs , }
		- CHILD  = { if , type , val , == , int , }
		- PRED   = { import , python_symbols , }
		- SUCC   = { }

28 :	"if"
		- NEIGH  = { if , type , val , == , int , }
		- PARENT = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- CHILD  = { _type_reprs , val , name , }
		- PRED   = { }
		- SUCC   = { }

28 :	"type"
		- NEIGH  = { if , type , val , == , int , }
		- PARENT = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- CHILD  = { _type_reprs , val , name , }
		- PRED   = { }
		- SUCC   = { }

28 :	"val"
		- NEIGH  = { if , type , val , == , int , }
		- PARENT = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- CHILD  = { _type_reprs , val , name , }
		- PRED   = { }
		- SUCC   = { }

28 :	"=="
		- NEIGH  = { if , type , val , == , int , }
		- PARENT = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- CHILD  = { _type_reprs , val , name , }
		- PRED   = { }
		- SUCC   = { }

28 :	"int"
		- NEIGH  = { if , type , val , == , int , }
		- PARENT = { for , tuple , name , val , python_symbols , __dict__ , items , }
		- CHILD  = { _type_reprs , val , name , }
		- PRED   = { }
		- SUCC   = { }

28 :	"_type_reprs"
		- NEIGH  = { _type_reprs , val , name , }
		- PARENT = { if , type , val , == , int , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"val"
		- NEIGH  = { _type_reprs , val , name , }
		- PARENT = { if , type , val , == , int , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

28 :	"name"
		- NEIGH  = { _type_reprs , val , name , }
		- PARENT = { if , type , val , == , int , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

29 :	"return"
		- NEIGH  = { return , _type_reprs , setdefault , type_num , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , _type_reprs , }
		- SUCC   = { }

29 :	"_type_reprs"
		- NEIGH  = { return , _type_reprs , setdefault , type_num , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , _type_reprs , }
		- SUCC   = { }

29 :	"setdefault"
		- NEIGH  = { return , _type_reprs , setdefault , type_num , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , _type_reprs , }
		- SUCC   = { }

29 :	"type_num"
		- NEIGH  = { return , _type_reprs , setdefault , type_num , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , _type_reprs , }
		- SUCC   = { }

29 :	"type_num"
		- NEIGH  = { return , _type_reprs , setdefault , type_num , type_num , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , _type_reprs , }
		- SUCC   = { }

31 :	"Base"
		- NEIGH  = { Base , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type_repr , type_num , }
		- SUCC   = { Node , }

43 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { parent , }

44 :	"parent"
		- NEIGH  = { parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , }
		- SUCC   = { children , tuple , }

45 :	"children"
		- NEIGH  = { children , tuple , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { parent , }
		- SUCC   = { was_changed , }

45 :	"tuple"
		- NEIGH  = { children , tuple , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { parent , }
		- SUCC   = { was_changed , }

46 :	"was_changed"
		- NEIGH  = { was_changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { children , tuple , }
		- SUCC   = { was_checked , }

47 :	"was_checked"
		- NEIGH  = { was_checked , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { was_changed , }
		- SUCC   = { __new__ , cls , args , kwds , }

49 :	"__new__"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { was_checked , }
		- SUCC   = { __eq__ , self , other , }

49 :	"cls"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { was_checked , }
		- SUCC   = { __eq__ , self , other , }

49 :	"args"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { was_checked , }
		- SUCC   = { __eq__ , self , other , }

49 :	"kwds"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { was_checked , }
		- SUCC   = { __eq__ , self , other , }

51 :	"assert"
		- NEIGH  = { assert , cls , is , not , Base , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

51 :	"cls"
		- NEIGH  = { assert , cls , is , not , Base , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

51 :	"is"
		- NEIGH  = { assert , cls , is , not , Base , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

51 :	"not"
		- NEIGH  = { assert , cls , is , not , Base , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

51 :	"Base"
		- NEIGH  = { assert , cls , is , not , Base , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

52 :	"return"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , Base , }
		- SUCC   = { }

52 :	"object"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , Base , }
		- SUCC   = { }

52 :	"__new__"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , Base , }
		- SUCC   = { }

52 :	"cls"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , Base , }
		- SUCC   = { }

54 :	"__eq__"
		- NEIGH  = { __eq__ , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __new__ , cls , args , kwds , }
		- SUCC   = { __hash__ , }

54 :	"self"
		- NEIGH  = { __eq__ , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __new__ , cls , args , kwds , }
		- SUCC   = { __hash__ , }

54 :	"other"
		- NEIGH  = { __eq__ , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __new__ , cls , args , kwds , }
		- SUCC   = { __hash__ , }

60 :	"if"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

60 :	"self"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

60 :	"__class__"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

60 :	"is"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

60 :	"not"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

60 :	"other"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

60 :	"__class__"
		- NEIGH  = { if , self , __class__ , is , not , other , __class__ , }
		- PARENT = { }
		- CHILD  = { return , NotImplemented , }
		- PRED   = { }
		- SUCC   = { return , self , _eq , other , }

61 :	"return"
		- NEIGH  = { return , NotImplemented , }
		- PARENT = { if , self , __class__ , is , not , other , __class__ , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

61 :	"NotImplemented"
		- NEIGH  = { return , NotImplemented , }
		- PARENT = { if , self , __class__ , is , not , other , __class__ , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

62 :	"return"
		- NEIGH  = { return , self , _eq , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , __class__ , is , not , other , __class__ , }
		- SUCC   = { }

62 :	"self"
		- NEIGH  = { return , self , _eq , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , __class__ , is , not , other , __class__ , }
		- SUCC   = { }

62 :	"_eq"
		- NEIGH  = { return , self , _eq , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , __class__ , is , not , other , __class__ , }
		- SUCC   = { }

62 :	"other"
		- NEIGH  = { return , self , _eq , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , __class__ , is , not , other , __class__ , }
		- SUCC   = { }

64 :	"__hash__"
		- NEIGH  = { __hash__ , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __eq__ , self , other , }
		- SUCC   = { _eq , self , other , }

66 :	"_eq"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __hash__ , }
		- SUCC   = { clone , self , }

66 :	"self"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __hash__ , }
		- SUCC   = { clone , self , }

66 :	"other"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __hash__ , }
		- SUCC   = { clone , self , }

75 :	"raise"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

75 :	"NotImplementedError"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

77 :	"clone"
		- NEIGH  = { clone , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _eq , self , other , }
		- SUCC   = { post_order , self , }

77 :	"self"
		- NEIGH  = { clone , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _eq , self , other , }
		- SUCC   = { post_order , self , }

83 :	"raise"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

83 :	"NotImplementedError"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

85 :	"post_order"
		- NEIGH  = { post_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { clone , self , }
		- SUCC   = { pre_order , self , }

85 :	"self"
		- NEIGH  = { post_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { clone , self , }
		- SUCC   = { pre_order , self , }

91 :	"raise"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

91 :	"NotImplementedError"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

93 :	"pre_order"
		- NEIGH  = { pre_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { post_order , self , }
		- SUCC   = { replace , self , new , }

93 :	"self"
		- NEIGH  = { pre_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { post_order , self , }
		- SUCC   = { replace , self , new , }

99 :	"raise"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

99 :	"NotImplementedError"
		- NEIGH  = { raise , NotImplementedError , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

101 :	"replace"
		- NEIGH  = { replace , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { pre_order , self , }
		- SUCC   = { get_lineno , self , }

101 :	"self"
		- NEIGH  = { replace , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { pre_order , self , }
		- SUCC   = { get_lineno , self , }

101 :	"new"
		- NEIGH  = { replace , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { pre_order , self , }
		- SUCC   = { get_lineno , self , }

103 :	"assert"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

103 :	"self"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

103 :	"parent"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

103 :	"is"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

103 :	"not"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

103 :	"str"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

103 :	"self"
		- NEIGH  = { assert , self , parent , is , not , str , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , new , is , not , }

104 :	"assert"
		- NEIGH  = { assert , new , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , self , parent , is , not , str , self , }
		- SUCC   = { if , isinstance , new , list , }

104 :	"new"
		- NEIGH  = { assert , new , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , self , parent , is , not , str , self , }
		- SUCC   = { if , isinstance , new , list , }

104 :	"is"
		- NEIGH  = { assert , new , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , self , parent , is , not , str , self , }
		- SUCC   = { if , isinstance , new , list , }

104 :	"not"
		- NEIGH  = { assert , new , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , self , parent , is , not , str , self , }
		- SUCC   = { if , isinstance , new , list , }

105 :	"if"
		- NEIGH  = { if , isinstance , new , list , }
		- PARENT = { }
		- CHILD  = { new , list , new , }
		- PRED   = { assert , new , is , not , }
		- SUCC   = { l_children , list , }

105 :	"isinstance"
		- NEIGH  = { if , isinstance , new , list , }
		- PARENT = { }
		- CHILD  = { new , list , new , }
		- PRED   = { assert , new , is , not , }
		- SUCC   = { l_children , list , }

105 :	"new"
		- NEIGH  = { if , isinstance , new , list , }
		- PARENT = { }
		- CHILD  = { new , list , new , }
		- PRED   = { assert , new , is , not , }
		- SUCC   = { l_children , list , }

105 :	"list"
		- NEIGH  = { if , isinstance , new , list , }
		- PARENT = { }
		- CHILD  = { new , list , new , }
		- PRED   = { assert , new , is , not , }
		- SUCC   = { l_children , list , }

106 :	"new"
		- NEIGH  = { new , list , new , }
		- PARENT = { if , isinstance , new , list , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

106 :	"list"
		- NEIGH  = { new , list , new , }
		- PARENT = { if , isinstance , new , list , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

106 :	"new"
		- NEIGH  = { new , list , new , }
		- PARENT = { if , isinstance , new , list , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

107 :	"l_children"
		- NEIGH  = { l_children , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , new , list , }
		- SUCC   = { found , }

107 :	"list"
		- NEIGH  = { l_children , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , new , list , }
		- SUCC   = { found , }

108 :	"found"
		- NEIGH  = { found , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { l_children , list , }
		- SUCC   = { for , ch , self , parent , children , }

109 :	"for"
		- NEIGH  = { for , ch , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , ch , is , self , }
		- PRED   = { found , }
		- SUCC   = { assert , found , tuple , self , children , self , new , }

109 :	"ch"
		- NEIGH  = { for , ch , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , ch , is , self , }
		- PRED   = { found , }
		- SUCC   = { assert , found , tuple , self , children , self , new , }

109 :	"self"
		- NEIGH  = { for , ch , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , ch , is , self , }
		- PRED   = { found , }
		- SUCC   = { assert , found , tuple , self , children , self , new , }

109 :	"parent"
		- NEIGH  = { for , ch , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , ch , is , self , }
		- PRED   = { found , }
		- SUCC   = { assert , found , tuple , self , children , self , new , }

109 :	"children"
		- NEIGH  = { for , ch , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , ch , is , self , }
		- PRED   = { found , }
		- SUCC   = { assert , found , tuple , self , children , self , new , }

110 :	"if"
		- NEIGH  = { if , ch , is , self , }
		- PARENT = { for , ch , self , parent , children , }
		- CHILD  = { assert , found , tuple , self , parent , children , self , new , if , new , is , not , found , l_children , append , ch , }
		- PRED   = { }
		- SUCC   = { }

110 :	"ch"
		- NEIGH  = { if , ch , is , self , }
		- PARENT = { for , ch , self , parent , children , }
		- CHILD  = { assert , found , tuple , self , parent , children , self , new , if , new , is , not , found , l_children , append , ch , }
		- PRED   = { }
		- SUCC   = { }

110 :	"is"
		- NEIGH  = { if , ch , is , self , }
		- PARENT = { for , ch , self , parent , children , }
		- CHILD  = { assert , found , tuple , self , parent , children , self , new , if , new , is , not , found , l_children , append , ch , }
		- PRED   = { }
		- SUCC   = { }

110 :	"self"
		- NEIGH  = { if , ch , is , self , }
		- PARENT = { for , ch , self , parent , children , }
		- CHILD  = { assert , found , tuple , self , parent , children , self , new , if , new , is , not , found , l_children , append , ch , }
		- PRED   = { }
		- SUCC   = { }

111 :	"assert"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"found"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"tuple"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"self"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"parent"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"children"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"self"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

111 :	"new"
		- NEIGH  = { assert , found , tuple , self , parent , children , self , new , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , new , is , not , }

112 :	"if"
		- NEIGH  = { if , new , is , not , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { l_children , extend , new , }
		- PRED   = { assert , found , tuple , self , parent , children , self , new , }
		- SUCC   = { found , }

112 :	"new"
		- NEIGH  = { if , new , is , not , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { l_children , extend , new , }
		- PRED   = { assert , found , tuple , self , parent , children , self , new , }
		- SUCC   = { found , }

112 :	"is"
		- NEIGH  = { if , new , is , not , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { l_children , extend , new , }
		- PRED   = { assert , found , tuple , self , parent , children , self , new , }
		- SUCC   = { found , }

112 :	"not"
		- NEIGH  = { if , new , is , not , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { l_children , extend , new , }
		- PRED   = { assert , found , tuple , self , parent , children , self , new , }
		- SUCC   = { found , }

113 :	"l_children"
		- NEIGH  = { l_children , extend , new , }
		- PARENT = { if , new , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

113 :	"extend"
		- NEIGH  = { l_children , extend , new , }
		- PARENT = { if , new , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

113 :	"new"
		- NEIGH  = { l_children , extend , new , }
		- PARENT = { if , new , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

114 :	"found"
		- NEIGH  = { found , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { if , new , is , not , }
		- SUCC   = { l_children , append , ch , }

116 :	"l_children"
		- NEIGH  = { l_children , append , ch , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { found , }
		- SUCC   = { }

116 :	"append"
		- NEIGH  = { l_children , append , ch , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { found , }
		- SUCC   = { }

116 :	"ch"
		- NEIGH  = { l_children , append , ch , }
		- PARENT = { if , ch , is , self , }
		- CHILD  = { }
		- PRED   = { found , }
		- SUCC   = { }

117 :	"assert"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

117 :	"found"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

117 :	"tuple"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

117 :	"self"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

117 :	"children"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

117 :	"self"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

117 :	"new"
		- NEIGH  = { assert , found , tuple , self , children , self , new , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , ch , self , parent , children , }
		- SUCC   = { self , parent , changed , }

118 :	"self"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , found , tuple , self , children , self , new , }
		- SUCC   = { self , parent , children , l_children , }

118 :	"parent"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , found , tuple , self , children , self , new , }
		- SUCC   = { self , parent , children , l_children , }

118 :	"changed"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , found , tuple , self , children , self , new , }
		- SUCC   = { self , parent , children , l_children , }

119 :	"self"
		- NEIGH  = { self , parent , children , l_children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { for , x , new , }

119 :	"parent"
		- NEIGH  = { self , parent , children , l_children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { for , x , new , }

119 :	"children"
		- NEIGH  = { self , parent , children , l_children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { for , x , new , }

119 :	"l_children"
		- NEIGH  = { self , parent , children , l_children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { for , x , new , }

120 :	"for"
		- NEIGH  = { for , x , new , }
		- PARENT = { }
		- CHILD  = { x , parent , self , parent , }
		- PRED   = { self , parent , children , l_children , }
		- SUCC   = { self , parent , }

120 :	"x"
		- NEIGH  = { for , x , new , }
		- PARENT = { }
		- CHILD  = { x , parent , self , parent , }
		- PRED   = { self , parent , children , l_children , }
		- SUCC   = { self , parent , }

120 :	"new"
		- NEIGH  = { for , x , new , }
		- PARENT = { }
		- CHILD  = { x , parent , self , parent , }
		- PRED   = { self , parent , children , l_children , }
		- SUCC   = { self , parent , }

121 :	"x"
		- NEIGH  = { x , parent , self , parent , }
		- PARENT = { for , x , new , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"parent"
		- NEIGH  = { x , parent , self , parent , }
		- PARENT = { for , x , new , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"self"
		- NEIGH  = { x , parent , self , parent , }
		- PARENT = { for , x , new , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

121 :	"parent"
		- NEIGH  = { x , parent , self , parent , }
		- PARENT = { for , x , new , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

122 :	"self"
		- NEIGH  = { self , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , x , new , }
		- SUCC   = { }

122 :	"parent"
		- NEIGH  = { self , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , x , new , }
		- SUCC   = { }

124 :	"get_lineno"
		- NEIGH  = { get_lineno , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { replace , self , new , }
		- SUCC   = { changed , self , }

124 :	"self"
		- NEIGH  = { get_lineno , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { replace , self , new , }
		- SUCC   = { changed , self , }

126 :	"node"
		- NEIGH  = { node , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , isinstance , node , Leaf , }

126 :	"self"
		- NEIGH  = { node , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , isinstance , node , Leaf , }

127 :	"while"
		- NEIGH  = { while , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { if , node , children , node , node , children , }
		- PRED   = { node , self , }
		- SUCC   = { return , node , lineno , }

127 :	"isinstance"
		- NEIGH  = { while , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { if , node , children , node , node , children , }
		- PRED   = { node , self , }
		- SUCC   = { return , node , lineno , }

127 :	"node"
		- NEIGH  = { while , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { if , node , children , node , node , children , }
		- PRED   = { node , self , }
		- SUCC   = { return , node , lineno , }

127 :	"Leaf"
		- NEIGH  = { while , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { if , node , children , node , node , children , }
		- PRED   = { node , self , }
		- SUCC   = { return , node , lineno , }

128 :	"if"
		- NEIGH  = { if , node , children , }
		- PARENT = { while , isinstance , node , Leaf , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { node , node , children , }

128 :	"node"
		- NEIGH  = { if , node , children , }
		- PARENT = { while , isinstance , node , Leaf , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { node , node , children , }

128 :	"children"
		- NEIGH  = { if , node , children , }
		- PARENT = { while , isinstance , node , Leaf , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { node , node , children , }

129 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

130 :	"node"
		- NEIGH  = { node , node , children , }
		- PARENT = { while , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { if , node , children , }
		- SUCC   = { }

130 :	"node"
		- NEIGH  = { node , node , children , }
		- PARENT = { while , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { if , node , children , }
		- SUCC   = { }

130 :	"children"
		- NEIGH  = { node , node , children , }
		- PARENT = { while , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { if , node , children , }
		- SUCC   = { }

131 :	"return"
		- NEIGH  = { return , node , lineno , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , isinstance , node , Leaf , }
		- SUCC   = { }

131 :	"node"
		- NEIGH  = { return , node , lineno , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , isinstance , node , Leaf , }
		- SUCC   = { }

131 :	"lineno"
		- NEIGH  = { return , node , lineno , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , isinstance , node , Leaf , }
		- SUCC   = { }

133 :	"changed"
		- NEIGH  = { changed , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { get_lineno , self , }
		- SUCC   = { remove , self , }

133 :	"self"
		- NEIGH  = { changed , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { get_lineno , self , }
		- SUCC   = { remove , self , }

134 :	"if"
		- NEIGH  = { if , self , parent , }
		- PARENT = { }
		- CHILD  = { self , parent , changed , }
		- PRED   = { }
		- SUCC   = { self , was_changed , }

134 :	"self"
		- NEIGH  = { if , self , parent , }
		- PARENT = { }
		- CHILD  = { self , parent , changed , }
		- PRED   = { }
		- SUCC   = { self , was_changed , }

134 :	"parent"
		- NEIGH  = { if , self , parent , }
		- PARENT = { }
		- CHILD  = { self , parent , changed , }
		- PRED   = { }
		- SUCC   = { self , was_changed , }

135 :	"self"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { if , self , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"parent"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { if , self , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

135 :	"changed"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { if , self , parent , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

136 :	"self"
		- NEIGH  = { self , was_changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , }
		- SUCC   = { }

136 :	"was_changed"
		- NEIGH  = { self , was_changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , }
		- SUCC   = { }

138 :	"remove"
		- NEIGH  = { remove , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { changed , self , }
		- SUCC   = { property , }

138 :	"self"
		- NEIGH  = { remove , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { changed , self , }
		- SUCC   = { property , }

143 :	"if"
		- NEIGH  = { if , self , parent , }
		- PARENT = { }
		- CHILD  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PRED   = { }
		- SUCC   = { }

143 :	"self"
		- NEIGH  = { if , self , parent , }
		- PARENT = { }
		- CHILD  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PRED   = { }
		- SUCC   = { }

143 :	"parent"
		- NEIGH  = { if , self , parent , }
		- PARENT = { }
		- CHILD  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PRED   = { }
		- SUCC   = { }

144 :	"for"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"tuple"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"i"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"node"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"enumerate"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"self"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"parent"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

144 :	"children"
		- NEIGH  = { for , tuple , i , node , enumerate , self , parent , children , }
		- PARENT = { if , self , parent , }
		- CHILD  = { if , node , is , self , }
		- PRED   = { }
		- SUCC   = { }

145 :	"if"
		- NEIGH  = { if , node , is , self , }
		- PARENT = { for , tuple , i , node , enumerate , self , parent , children , }
		- CHILD  = { self , parent , changed , del , self , parent , children , i , self , parent , return , i , }
		- PRED   = { }
		- SUCC   = { }

145 :	"node"
		- NEIGH  = { if , node , is , self , }
		- PARENT = { for , tuple , i , node , enumerate , self , parent , children , }
		- CHILD  = { self , parent , changed , del , self , parent , children , i , self , parent , return , i , }
		- PRED   = { }
		- SUCC   = { }

145 :	"is"
		- NEIGH  = { if , node , is , self , }
		- PARENT = { for , tuple , i , node , enumerate , self , parent , children , }
		- CHILD  = { self , parent , changed , del , self , parent , children , i , self , parent , return , i , }
		- PRED   = { }
		- SUCC   = { }

145 :	"self"
		- NEIGH  = { if , node , is , self , }
		- PARENT = { for , tuple , i , node , enumerate , self , parent , children , }
		- CHILD  = { self , parent , changed , del , self , parent , children , i , self , parent , return , i , }
		- PRED   = { }
		- SUCC   = { }

146 :	"self"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { del , self , parent , children , i , }

146 :	"parent"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { del , self , parent , children , i , }

146 :	"changed"
		- NEIGH  = { self , parent , changed , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { del , self , parent , children , i , }

147 :	"del"
		- NEIGH  = { del , self , parent , children , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { self , parent , }

147 :	"self"
		- NEIGH  = { del , self , parent , children , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { self , parent , }

147 :	"parent"
		- NEIGH  = { del , self , parent , children , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { self , parent , }

147 :	"children"
		- NEIGH  = { del , self , parent , children , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { self , parent , }

147 :	"i"
		- NEIGH  = { del , self , parent , children , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , changed , }
		- SUCC   = { self , parent , }

148 :	"self"
		- NEIGH  = { self , parent , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { del , self , parent , children , i , }
		- SUCC   = { return , i , }

148 :	"parent"
		- NEIGH  = { self , parent , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { del , self , parent , children , i , }
		- SUCC   = { return , i , }

149 :	"return"
		- NEIGH  = { return , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , }
		- SUCC   = { }

149 :	"i"
		- NEIGH  = { return , i , }
		- PARENT = { if , node , is , self , }
		- CHILD  = { }
		- PRED   = { self , parent , }
		- SUCC   = { }

151 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { remove , self , }
		- SUCC   = { next_sibling , self , }

152 :	"next_sibling"
		- NEIGH  = { next_sibling , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

152 :	"self"
		- NEIGH  = { next_sibling , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { property , }

157 :	"if"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

157 :	"self"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

157 :	"parent"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

157 :	"is"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

158 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , parent , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

161 :	"for"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"tuple"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"i"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"child"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"enumerate"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"self"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"parent"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

161 :	"children"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

162 :	"if"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { try , return , self , parent , children , i , + , except , IndexError , }
		- PRED   = { }
		- SUCC   = { }

162 :	"child"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { try , return , self , parent , children , i , + , except , IndexError , }
		- PRED   = { }
		- SUCC   = { }

162 :	"is"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { try , return , self , parent , children , i , + , except , IndexError , }
		- PRED   = { }
		- SUCC   = { }

162 :	"self"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { try , return , self , parent , children , i , + , except , IndexError , }
		- PRED   = { }
		- SUCC   = { }

163 :	"try"
		- NEIGH  = { try , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , self , parent , children , i , + , }

164 :	"return"
		- NEIGH  = { return , self , parent , children , i , + , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

164 :	"self"
		- NEIGH  = { return , self , parent , children , i , + , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

164 :	"parent"
		- NEIGH  = { return , self , parent , children , i , + , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

164 :	"children"
		- NEIGH  = { return , self , parent , children , i , + , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

164 :	"i"
		- NEIGH  = { return , self , parent , children , i , + , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

164 :	"+"
		- NEIGH  = { return , self , parent , children , i , + , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { try , }
		- SUCC   = { except , IndexError , }

165 :	"except"
		- NEIGH  = { except , IndexError , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { return , }
		- PRED   = { return , self , parent , children , i , + , }
		- SUCC   = { }

165 :	"IndexError"
		- NEIGH  = { except , IndexError , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { return , }
		- PRED   = { return , self , parent , children , i , + , }
		- SUCC   = { }

166 :	"return"
		- NEIGH  = { return , }
		- PARENT = { except , IndexError , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

168 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { next_sibling , self , }
		- SUCC   = { prev_sibling , self , }

169 :	"prev_sibling"
		- NEIGH  = { prev_sibling , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { leaves , self , }

169 :	"self"
		- NEIGH  = { prev_sibling , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { leaves , self , }

174 :	"if"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

174 :	"self"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

174 :	"parent"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

174 :	"is"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { for , tuple , i , child , enumerate , self , parent , children , }

175 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , parent , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

178 :	"for"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"tuple"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"i"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"child"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"enumerate"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"self"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"parent"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

178 :	"children"
		- NEIGH  = { for , tuple , i , child , enumerate , self , parent , children , }
		- PARENT = { }
		- CHILD  = { if , child , is , self , }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

179 :	"if"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { if , i , == , return , self , parent , children , i , - , }
		- PRED   = { }
		- SUCC   = { }

179 :	"child"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { if , i , == , return , self , parent , children , i , - , }
		- PRED   = { }
		- SUCC   = { }

179 :	"is"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { if , i , == , return , self , parent , children , i , - , }
		- PRED   = { }
		- SUCC   = { }

179 :	"self"
		- NEIGH  = { if , child , is , self , }
		- PARENT = { for , tuple , i , child , enumerate , self , parent , children , }
		- CHILD  = { if , i , == , return , self , parent , children , i , - , }
		- PRED   = { }
		- SUCC   = { }

180 :	"if"
		- NEIGH  = { if , i , == , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , parent , children , i , - , }

180 :	"i"
		- NEIGH  = { if , i , == , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , parent , children , i , - , }

180 :	"=="
		- NEIGH  = { if , i , == , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , parent , children , i , - , }

181 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , i , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

182 :	"return"
		- NEIGH  = { return , self , parent , children , i , - , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { if , i , == , }
		- SUCC   = { }

182 :	"self"
		- NEIGH  = { return , self , parent , children , i , - , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { if , i , == , }
		- SUCC   = { }

182 :	"parent"
		- NEIGH  = { return , self , parent , children , i , - , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { if , i , == , }
		- SUCC   = { }

182 :	"children"
		- NEIGH  = { return , self , parent , children , i , - , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { if , i , == , }
		- SUCC   = { }

182 :	"i"
		- NEIGH  = { return , self , parent , children , i , - , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { if , i , == , }
		- SUCC   = { }

182 :	"-"
		- NEIGH  = { return , self , parent , children , i , - , }
		- PARENT = { if , child , is , self , }
		- CHILD  = { }
		- PRED   = { if , i , == , }
		- SUCC   = { }

184 :	"leaves"
		- NEIGH  = { leaves , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prev_sibling , self , }
		- SUCC   = { depth , self , }

184 :	"self"
		- NEIGH  = { leaves , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prev_sibling , self , }
		- SUCC   = { depth , self , }

185 :	"for"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , leaves , }
		- PRED   = { }
		- SUCC   = { }

185 :	"child"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , leaves , }
		- PRED   = { }
		- SUCC   = { }

185 :	"self"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , leaves , }
		- PRED   = { }
		- SUCC   = { }

185 :	"children"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , leaves , }
		- PRED   = { }
		- SUCC   = { }

186 :	"yield"
		- NEIGH  = { yield , from , child , leaves , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

186 :	"from"
		- NEIGH  = { yield , from , child , leaves , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

186 :	"child"
		- NEIGH  = { yield , from , child , leaves , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

186 :	"leaves"
		- NEIGH  = { yield , from , child , leaves , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

188 :	"depth"
		- NEIGH  = { depth , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , self , }
		- SUCC   = { get_suffix , self , }

188 :	"self"
		- NEIGH  = { depth , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , self , }
		- SUCC   = { get_suffix , self , }

189 :	"if"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , + , self , parent , depth , }

189 :	"self"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , + , self , parent , depth , }

189 :	"parent"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , + , self , parent , depth , }

189 :	"is"
		- NEIGH  = { if , self , parent , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , + , self , parent , depth , }

190 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , parent , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

191 :	"return"
		- NEIGH  = { return , + , self , parent , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

191 :	"+"
		- NEIGH  = { return , + , self , parent , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

191 :	"self"
		- NEIGH  = { return , + , self , parent , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

191 :	"parent"
		- NEIGH  = { return , + , self , parent , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

191 :	"depth"
		- NEIGH  = { return , + , self , parent , depth , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , parent , is , }
		- SUCC   = { }

193 :	"get_suffix"
		- NEIGH  = { get_suffix , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , self , }
		- SUCC   = { if , sys , version_info , < , tuple , }

193 :	"self"
		- NEIGH  = { get_suffix , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { depth , self , }
		- SUCC   = { if , sys , version_info , < , tuple , }

198 :	"next_sib"
		- NEIGH  = { next_sib , self , next_sibling , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , next_sib , is , }

198 :	"self"
		- NEIGH  = { next_sib , self , next_sibling , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , next_sib , is , }

198 :	"next_sibling"
		- NEIGH  = { next_sib , self , next_sibling , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , next_sib , is , }

199 :	"if"
		- NEIGH  = { if , next_sib , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { next_sib , self , next_sibling , }
		- SUCC   = { return , next_sib , prefix , }

199 :	"next_sib"
		- NEIGH  = { if , next_sib , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { next_sib , self , next_sibling , }
		- SUCC   = { return , next_sib , prefix , }

199 :	"is"
		- NEIGH  = { if , next_sib , is , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { next_sib , self , next_sibling , }
		- SUCC   = { return , next_sib , prefix , }

200 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , next_sib , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

201 :	"return"
		- NEIGH  = { return , next_sib , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , next_sib , is , }
		- SUCC   = { }

201 :	"next_sib"
		- NEIGH  = { return , next_sib , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , next_sib , is , }
		- SUCC   = { }

201 :	"prefix"
		- NEIGH  = { return , next_sib , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , next_sib , is , }
		- SUCC   = { }

203 :	"if"
		- NEIGH  = { if , sys , version_info , < , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , self , }
		- PRED   = { get_suffix , self , }
		- SUCC   = { }

203 :	"sys"
		- NEIGH  = { if , sys , version_info , < , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , self , }
		- PRED   = { get_suffix , self , }
		- SUCC   = { }

203 :	"version_info"
		- NEIGH  = { if , sys , version_info , < , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , self , }
		- PRED   = { get_suffix , self , }
		- SUCC   = { }

203 :	"<"
		- NEIGH  = { if , sys , version_info , < , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , self , }
		- PRED   = { get_suffix , self , }
		- SUCC   = { }

203 :	"tuple"
		- NEIGH  = { if , sys , version_info , < , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , self , }
		- PRED   = { get_suffix , self , }
		- SUCC   = { }

204 :	"__str__"
		- NEIGH  = { __str__ , self , }
		- PARENT = { if , sys , version_info , < , tuple , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

204 :	"self"
		- NEIGH  = { __str__ , self , }
		- PARENT = { if , sys , version_info , < , tuple , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"return"
		- NEIGH  = { return , str , self , encode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"str"
		- NEIGH  = { return , str , self , encode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"self"
		- NEIGH  = { return , str , self , encode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

205 :	"encode"
		- NEIGH  = { return , str , self , encode , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

207 :	"Node"
		- NEIGH  = { Node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Base , }
		- SUCC   = { Leaf , }

211 :	"__init__"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

211 :	"self"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

211 :	"type"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

211 :	"children"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

212 :	"context"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

213 :	"prefix"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

214 :	"fixers_applied"
		- NEIGH  = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __repr__ , self , }

223 :	"assert"
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , type , type , }

223 :	"type"
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , type , type , }

223 :	">="
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , type , type , }

223 :	"type"
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , type , type , }

224 :	"self"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , type , >= , type , }
		- SUCC   = { self , children , list , children , }

224 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , type , >= , type , }
		- SUCC   = { self , children , list , children , }

224 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , type , >= , type , }
		- SUCC   = { self , children , list , children , }

225 :	"self"
		- NEIGH  = { self , children , list , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { for , ch , self , children , }

225 :	"children"
		- NEIGH  = { self , children , list , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { for , ch , self , children , }

225 :	"list"
		- NEIGH  = { self , children , list , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { for , ch , self , children , }

225 :	"children"
		- NEIGH  = { self , children , list , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { for , ch , self , children , }

226 :	"for"
		- NEIGH  = { for , ch , self , children , }
		- PARENT = { }
		- CHILD  = { assert , ch , parent , is , repr , ch , ch , parent , self , }
		- PRED   = { self , children , list , children , }
		- SUCC   = { if , prefix , is , not , }

226 :	"ch"
		- NEIGH  = { for , ch , self , children , }
		- PARENT = { }
		- CHILD  = { assert , ch , parent , is , repr , ch , ch , parent , self , }
		- PRED   = { self , children , list , children , }
		- SUCC   = { if , prefix , is , not , }

226 :	"self"
		- NEIGH  = { for , ch , self , children , }
		- PARENT = { }
		- CHILD  = { assert , ch , parent , is , repr , ch , ch , parent , self , }
		- PRED   = { self , children , list , children , }
		- SUCC   = { if , prefix , is , not , }

226 :	"children"
		- NEIGH  = { for , ch , self , children , }
		- PARENT = { }
		- CHILD  = { assert , ch , parent , is , repr , ch , ch , parent , self , }
		- PRED   = { self , children , list , children , }
		- SUCC   = { if , prefix , is , not , }

227 :	"assert"
		- NEIGH  = { assert , ch , parent , is , repr , ch , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ch , parent , self , }

227 :	"ch"
		- NEIGH  = { assert , ch , parent , is , repr , ch , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ch , parent , self , }

227 :	"parent"
		- NEIGH  = { assert , ch , parent , is , repr , ch , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ch , parent , self , }

227 :	"is"
		- NEIGH  = { assert , ch , parent , is , repr , ch , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ch , parent , self , }

227 :	"repr"
		- NEIGH  = { assert , ch , parent , is , repr , ch , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ch , parent , self , }

227 :	"ch"
		- NEIGH  = { assert , ch , parent , is , repr , ch , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { ch , parent , self , }

228 :	"ch"
		- NEIGH  = { ch , parent , self , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { assert , ch , parent , is , repr , ch , }
		- SUCC   = { }

228 :	"parent"
		- NEIGH  = { ch , parent , self , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { assert , ch , parent , is , repr , ch , }
		- SUCC   = { }

228 :	"self"
		- NEIGH  = { ch , parent , self , }
		- PARENT = { for , ch , self , children , }
		- CHILD  = { }
		- PRED   = { assert , ch , parent , is , repr , ch , }
		- SUCC   = { }

229 :	"if"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , prefix , prefix , }
		- PRED   = { for , ch , self , children , }
		- SUCC   = { if , fixers_applied , }

229 :	"prefix"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , prefix , prefix , }
		- PRED   = { for , ch , self , children , }
		- SUCC   = { if , fixers_applied , }

229 :	"is"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , prefix , prefix , }
		- PRED   = { for , ch , self , children , }
		- SUCC   = { if , fixers_applied , }

229 :	"not"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , prefix , prefix , }
		- PRED   = { for , ch , self , children , }
		- SUCC   = { if , fixers_applied , }

230 :	"self"
		- NEIGH  = { self , prefix , prefix , }
		- PARENT = { if , prefix , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"prefix"
		- NEIGH  = { self , prefix , prefix , }
		- PARENT = { if , prefix , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

230 :	"prefix"
		- NEIGH  = { self , prefix , prefix , }
		- PARENT = { if , prefix , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

231 :	"if"
		- NEIGH  = { if , fixers_applied , }
		- PARENT = { }
		- CHILD  = { self , fixers_applied , fixers_applied , self , fixers_applied , }
		- PRED   = { if , prefix , is , not , }
		- SUCC   = { }

231 :	"fixers_applied"
		- NEIGH  = { if , fixers_applied , }
		- PARENT = { }
		- CHILD  = { self , fixers_applied , fixers_applied , self , fixers_applied , }
		- PRED   = { if , prefix , is , not , }
		- SUCC   = { }

232 :	"self"
		- NEIGH  = { self , fixers_applied , fixers_applied , }
		- PARENT = { if , fixers_applied , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , fixers_applied , }

232 :	"fixers_applied"
		- NEIGH  = { self , fixers_applied , fixers_applied , }
		- PARENT = { if , fixers_applied , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , fixers_applied , }

232 :	"fixers_applied"
		- NEIGH  = { self , fixers_applied , fixers_applied , }
		- PARENT = { if , fixers_applied , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , fixers_applied , }

234 :	"self"
		- NEIGH  = { self , fixers_applied , }
		- PARENT = { if , fixers_applied , }
		- CHILD  = { }
		- PRED   = { self , fixers_applied , fixers_applied , }
		- SUCC   = { }

234 :	"fixers_applied"
		- NEIGH  = { self , fixers_applied , }
		- PARENT = { if , fixers_applied , }
		- CHILD  = { }
		- PRED   = { self , fixers_applied , fixers_applied , }
		- SUCC   = { }

236 :	"__repr__"
		- NEIGH  = { __repr__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- SUCC   = { __unicode__ , self , }

236 :	"self"
		- NEIGH  = { __repr__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , children , context , prefix , fixers_applied , }
		- SUCC   = { __unicode__ , self , }

238 :	"return"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"%"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"tuple"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"__class__"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

238 :	"__name__"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

239 :	"type_repr"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

239 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

239 :	"type"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

240 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

240 :	"children"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , type_repr , self , type , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

242 :	"__unicode__"
		- NEIGH  = { __unicode__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __repr__ , self , }
		- SUCC   = { if , sys , version_info , > , tuple , }

242 :	"self"
		- NEIGH  = { __unicode__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __repr__ , self , }
		- SUCC   = { if , sys , version_info , > , tuple , }

248 :	"return"
		- NEIGH  = { return , join , map , str , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

248 :	"join"
		- NEIGH  = { return , join , map , str , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

248 :	"map"
		- NEIGH  = { return , join , map , str , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

248 :	"str"
		- NEIGH  = { return , join , map , str , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

248 :	"self"
		- NEIGH  = { return , join , map , str , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

248 :	"children"
		- NEIGH  = { return , join , map , str , self , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

250 :	"if"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

250 :	"sys"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

250 :	"version_info"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

250 :	">"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

250 :	"tuple"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

251 :	"__str__"
		- NEIGH  = { __str__ , __unicode__ , }
		- PARENT = { if , sys , version_info , > , tuple , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

251 :	"__unicode__"
		- NEIGH  = { __str__ , __unicode__ , }
		- PARENT = { if , sys , version_info , > , tuple , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

253 :	"_eq"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , sys , version_info , > , tuple , }
		- SUCC   = { clone , self , }

253 :	"self"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , sys , version_info , > , tuple , }
		- SUCC   = { clone , self , }

253 :	"other"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , sys , version_info , > , tuple , }
		- SUCC   = { clone , self , }

255 :	"return"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"tuple"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"self"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"type"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"self"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"children"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"=="
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"tuple"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"other"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"type"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"other"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

255 :	"children"
		- NEIGH  = { return , tuple , self , type , self , children , == , tuple , other , type , other , children , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

257 :	"clone"
		- NEIGH  = { clone , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _eq , self , other , }
		- SUCC   = { post_order , self , }

257 :	"self"
		- NEIGH  = { clone , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _eq , self , other , }
		- SUCC   = { post_order , self , }

259 :	"return"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"Node"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"self"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"type"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"list-comp"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"ch"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"clone"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"for-comp"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"ch"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"self"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

259 :	"children"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"fixers_applied"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"self"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

260 :	"fixers_applied"
		- NEIGH  = { return , Node , self , type , list-comp , ch , clone , for-comp , ch , self , children , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

262 :	"post_order"
		- NEIGH  = { post_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { clone , self , }
		- SUCC   = { pre_order , self , }

262 :	"self"
		- NEIGH  = { post_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { clone , self , }
		- SUCC   = { pre_order , self , }

264 :	"for"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , post_order , }
		- PRED   = { }
		- SUCC   = { yield , self , }

264 :	"child"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , post_order , }
		- PRED   = { }
		- SUCC   = { yield , self , }

264 :	"self"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , post_order , }
		- PRED   = { }
		- SUCC   = { yield , self , }

264 :	"children"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , post_order , }
		- PRED   = { }
		- SUCC   = { yield , self , }

265 :	"yield"
		- NEIGH  = { yield , from , child , post_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

265 :	"from"
		- NEIGH  = { yield , from , child , post_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

265 :	"child"
		- NEIGH  = { yield , from , child , post_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

265 :	"post_order"
		- NEIGH  = { yield , from , child , post_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

266 :	"yield"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , child , self , children , }
		- SUCC   = { }

266 :	"self"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , child , self , children , }
		- SUCC   = { }

268 :	"pre_order"
		- NEIGH  = { pre_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { post_order , self , }
		- SUCC   = { property , }

268 :	"self"
		- NEIGH  = { pre_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { post_order , self , }
		- SUCC   = { property , }

270 :	"yield"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , child , self , children , }

270 :	"self"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , child , self , children , }

271 :	"for"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , pre_order , }
		- PRED   = { yield , self , }
		- SUCC   = { }

271 :	"child"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , pre_order , }
		- PRED   = { yield , self , }
		- SUCC   = { }

271 :	"self"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , pre_order , }
		- PRED   = { yield , self , }
		- SUCC   = { }

271 :	"children"
		- NEIGH  = { for , child , self , children , }
		- PARENT = { }
		- CHILD  = { yield , from , child , pre_order , }
		- PRED   = { yield , self , }
		- SUCC   = { }

272 :	"yield"
		- NEIGH  = { yield , from , child , pre_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"from"
		- NEIGH  = { yield , from , child , pre_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"child"
		- NEIGH  = { yield , from , child , pre_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

272 :	"pre_order"
		- NEIGH  = { yield , from , child , pre_order , }
		- PARENT = { for , child , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

274 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { pre_order , self , }
		- SUCC   = { prefix , self , }

275 :	"prefix"
		- NEIGH  = { prefix , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { prefix , setter , }

275 :	"self"
		- NEIGH  = { prefix , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { prefix , setter , }

279 :	"if"
		- NEIGH  = { if , self , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , children , prefix , }

279 :	"self"
		- NEIGH  = { if , self , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , children , prefix , }

279 :	"children"
		- NEIGH  = { if , self , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , children , prefix , }

280 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

281 :	"return"
		- NEIGH  = { return , self , children , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , children , }
		- SUCC   = { }

281 :	"self"
		- NEIGH  = { return , self , children , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , children , }
		- SUCC   = { }

281 :	"children"
		- NEIGH  = { return , self , children , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , children , }
		- SUCC   = { }

281 :	"prefix"
		- NEIGH  = { return , self , children , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , children , }
		- SUCC   = { }

283 :	"prefix"
		- NEIGH  = { prefix , setter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , }
		- SUCC   = { prefix , self , prefix , }

283 :	"setter"
		- NEIGH  = { prefix , setter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , }
		- SUCC   = { prefix , self , prefix , }

284 :	"prefix"
		- NEIGH  = { prefix , self , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , setter , }
		- SUCC   = { set_child , self , i , child , }

284 :	"self"
		- NEIGH  = { prefix , self , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , setter , }
		- SUCC   = { set_child , self , i , child , }

284 :	"prefix"
		- NEIGH  = { prefix , self , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , setter , }
		- SUCC   = { set_child , self , i , child , }

285 :	"if"
		- NEIGH  = { if , self , children , }
		- PARENT = { }
		- CHILD  = { self , children , prefix , prefix , }
		- PRED   = { }
		- SUCC   = { }

285 :	"self"
		- NEIGH  = { if , self , children , }
		- PARENT = { }
		- CHILD  = { self , children , prefix , prefix , }
		- PRED   = { }
		- SUCC   = { }

285 :	"children"
		- NEIGH  = { if , self , children , }
		- PARENT = { }
		- CHILD  = { self , children , prefix , prefix , }
		- PRED   = { }
		- SUCC   = { }

286 :	"self"
		- NEIGH  = { self , children , prefix , prefix , }
		- PARENT = { if , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

286 :	"children"
		- NEIGH  = { self , children , prefix , prefix , }
		- PARENT = { if , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

286 :	"prefix"
		- NEIGH  = { self , children , prefix , prefix , }
		- PARENT = { if , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

286 :	"prefix"
		- NEIGH  = { self , children , prefix , prefix , }
		- PARENT = { if , self , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

288 :	"set_child"
		- NEIGH  = { set_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , prefix , }
		- SUCC   = { insert_child , self , i , child , }

288 :	"self"
		- NEIGH  = { set_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , prefix , }
		- SUCC   = { insert_child , self , i , child , }

288 :	"i"
		- NEIGH  = { set_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , prefix , }
		- SUCC   = { insert_child , self , i , child , }

288 :	"child"
		- NEIGH  = { set_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , prefix , }
		- SUCC   = { insert_child , self , i , child , }

293 :	"child"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , i , parent , }

293 :	"parent"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , i , parent , }

293 :	"self"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , i , parent , }

294 :	"self"
		- NEIGH  = { self , children , i , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , children , i , child , }

294 :	"children"
		- NEIGH  = { self , children , i , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , children , i , child , }

294 :	"i"
		- NEIGH  = { self , children , i , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , children , i , child , }

294 :	"parent"
		- NEIGH  = { self , children , i , parent , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , children , i , child , }

295 :	"self"
		- NEIGH  = { self , children , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , i , parent , }
		- SUCC   = { self , changed , }

295 :	"children"
		- NEIGH  = { self , children , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , i , parent , }
		- SUCC   = { self , changed , }

295 :	"i"
		- NEIGH  = { self , children , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , i , parent , }
		- SUCC   = { self , changed , }

295 :	"child"
		- NEIGH  = { self , children , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , i , parent , }
		- SUCC   = { self , changed , }

296 :	"self"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , i , child , }
		- SUCC   = { }

296 :	"changed"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , i , child , }
		- SUCC   = { }

298 :	"insert_child"
		- NEIGH  = { insert_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { set_child , self , i , child , }
		- SUCC   = { append_child , self , child , }

298 :	"self"
		- NEIGH  = { insert_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { set_child , self , i , child , }
		- SUCC   = { append_child , self , child , }

298 :	"i"
		- NEIGH  = { insert_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { set_child , self , i , child , }
		- SUCC   = { append_child , self , child , }

298 :	"child"
		- NEIGH  = { insert_child , self , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { set_child , self , i , child , }
		- SUCC   = { append_child , self , child , }

303 :	"child"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , insert , i , child , }

303 :	"parent"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , insert , i , child , }

303 :	"self"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , insert , i , child , }

304 :	"self"
		- NEIGH  = { self , children , insert , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

304 :	"children"
		- NEIGH  = { self , children , insert , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

304 :	"insert"
		- NEIGH  = { self , children , insert , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

304 :	"i"
		- NEIGH  = { self , children , insert , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

304 :	"child"
		- NEIGH  = { self , children , insert , i , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

305 :	"self"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , insert , i , child , }
		- SUCC   = { }

305 :	"changed"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , insert , i , child , }
		- SUCC   = { }

307 :	"append_child"
		- NEIGH  = { append_child , self , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { insert_child , self , i , child , }
		- SUCC   = { }

307 :	"self"
		- NEIGH  = { append_child , self , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { insert_child , self , i , child , }
		- SUCC   = { }

307 :	"child"
		- NEIGH  = { append_child , self , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { insert_child , self , i , child , }
		- SUCC   = { }

312 :	"child"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , append , child , }

312 :	"parent"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , append , child , }

312 :	"self"
		- NEIGH  = { child , parent , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , children , append , child , }

313 :	"self"
		- NEIGH  = { self , children , append , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

313 :	"children"
		- NEIGH  = { self , children , append , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

313 :	"append"
		- NEIGH  = { self , children , append , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

313 :	"child"
		- NEIGH  = { self , children , append , child , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { child , parent , self , }
		- SUCC   = { self , changed , }

314 :	"self"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , append , child , }
		- SUCC   = { }

314 :	"changed"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , children , append , child , }
		- SUCC   = { }

317 :	"Leaf"
		- NEIGH  = { Leaf , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Node , }
		- SUCC   = { convert , gr , raw_node , }

322 :	"_prefix"
		- NEIGH  = { _prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { lineno , }

323 :	"lineno"
		- NEIGH  = { lineno , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _prefix , }
		- SUCC   = { column , }

324 :	"column"
		- NEIGH  = { column , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { lineno , }
		- SUCC   = { __init__ , self , type , value , context , prefix , fixers_applied , }

326 :	"__init__"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

326 :	"self"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

326 :	"type"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

326 :	"value"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

327 :	"context"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

328 :	"prefix"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

329 :	"fixers_applied"
		- NEIGH  = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { column , }
		- SUCC   = { __repr__ , self , }

336 :	"assert"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , context , is , not , }

336 :	"<="
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , context , is , not , }

336 :	"type"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , context , is , not , }

336 :	"<"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , context , is , not , }

336 :	"type"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , context , is , not , }

337 :	"if"
		- NEIGH  = { if , context , is , not , }
		- PARENT = { }
		- CHILD  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PRED   = { assert , <= , type , < , type , }
		- SUCC   = { self , type , type , }

337 :	"context"
		- NEIGH  = { if , context , is , not , }
		- PARENT = { }
		- CHILD  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PRED   = { assert , <= , type , < , type , }
		- SUCC   = { self , type , type , }

337 :	"is"
		- NEIGH  = { if , context , is , not , }
		- PARENT = { }
		- CHILD  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PRED   = { assert , <= , type , < , type , }
		- SUCC   = { self , type , type , }

337 :	"not"
		- NEIGH  = { if , context , is , not , }
		- PARENT = { }
		- CHILD  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PRED   = { assert , <= , type , < , type , }
		- SUCC   = { self , type , type , }

338 :	"tuple"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"self"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"_prefix"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"tuple"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"self"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"lineno"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"self"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"column"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

338 :	"context"
		- NEIGH  = { tuple , self , _prefix , tuple , self , lineno , self , column , context , }
		- PARENT = { if , context , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

339 :	"self"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , context , is , not , }
		- SUCC   = { self , value , value , }

339 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , context , is , not , }
		- SUCC   = { self , value , value , }

339 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , context , is , not , }
		- SUCC   = { self , value , value , }

340 :	"self"
		- NEIGH  = { self , value , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { if , prefix , is , not , }

340 :	"value"
		- NEIGH  = { self , value , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { if , prefix , is , not , }

340 :	"value"
		- NEIGH  = { self , value , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { if , prefix , is , not , }

341 :	"if"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , _prefix , prefix , }
		- PRED   = { self , value , value , }
		- SUCC   = { self , fixers_applied , fixers_applied , }

341 :	"prefix"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , _prefix , prefix , }
		- PRED   = { self , value , value , }
		- SUCC   = { self , fixers_applied , fixers_applied , }

341 :	"is"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , _prefix , prefix , }
		- PRED   = { self , value , value , }
		- SUCC   = { self , fixers_applied , fixers_applied , }

341 :	"not"
		- NEIGH  = { if , prefix , is , not , }
		- PARENT = { }
		- CHILD  = { self , _prefix , prefix , }
		- PRED   = { self , value , value , }
		- SUCC   = { self , fixers_applied , fixers_applied , }

342 :	"self"
		- NEIGH  = { self , _prefix , prefix , }
		- PARENT = { if , prefix , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

342 :	"_prefix"
		- NEIGH  = { self , _prefix , prefix , }
		- PARENT = { if , prefix , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

342 :	"prefix"
		- NEIGH  = { self , _prefix , prefix , }
		- PARENT = { if , prefix , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

343 :	"self"
		- NEIGH  = { self , fixers_applied , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , prefix , is , not , }
		- SUCC   = { }

343 :	"fixers_applied"
		- NEIGH  = { self , fixers_applied , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , prefix , is , not , }
		- SUCC   = { }

343 :	"fixers_applied"
		- NEIGH  = { self , fixers_applied , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , prefix , is , not , }
		- SUCC   = { }

345 :	"__repr__"
		- NEIGH  = { __repr__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- SUCC   = { __unicode__ , self , }

345 :	"self"
		- NEIGH  = { __repr__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , value , context , prefix , fixers_applied , }
		- SUCC   = { __unicode__ , self , }

347 :	"import"
		- NEIGH  = { import , tok_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }

347 :	"tok_name"
		- NEIGH  = { import , tok_name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }

348 :	"return"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

348 :	"%"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

348 :	"tuple"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

348 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

348 :	"__class__"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

348 :	"__name__"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

349 :	"tok_name"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

349 :	"get"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

349 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

349 :	"type"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

349 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

349 :	"type"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

350 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

350 :	"value"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , tok_name , get , self , type , self , type , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { import , tok_name , }
		- SUCC   = { }

352 :	"__unicode__"
		- NEIGH  = { __unicode__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __repr__ , self , }
		- SUCC   = { if , sys , version_info , > , tuple , }

352 :	"self"
		- NEIGH  = { __unicode__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __repr__ , self , }
		- SUCC   = { if , sys , version_info , > , tuple , }

358 :	"return"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"self"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"prefix"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"+"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"str"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"self"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

358 :	"value"
		- NEIGH  = { return , self , prefix , + , str , self , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

360 :	"if"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

360 :	"sys"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

360 :	"version_info"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

360 :	">"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

360 :	"tuple"
		- NEIGH  = { if , sys , version_info , > , tuple , }
		- PARENT = { }
		- CHILD  = { __str__ , __unicode__ , }
		- PRED   = { __unicode__ , self , }
		- SUCC   = { _eq , self , other , }

361 :	"__str__"
		- NEIGH  = { __str__ , __unicode__ , }
		- PARENT = { if , sys , version_info , > , tuple , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

361 :	"__unicode__"
		- NEIGH  = { __str__ , __unicode__ , }
		- PARENT = { if , sys , version_info , > , tuple , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

363 :	"_eq"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , sys , version_info , > , tuple , }
		- SUCC   = { clone , self , }

363 :	"self"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , sys , version_info , > , tuple , }
		- SUCC   = { clone , self , }

363 :	"other"
		- NEIGH  = { _eq , self , other , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , sys , version_info , > , tuple , }
		- SUCC   = { clone , self , }

365 :	"return"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"tuple"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"self"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"type"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"self"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"value"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"=="
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"tuple"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"other"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"type"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"other"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

365 :	"value"
		- NEIGH  = { return , tuple , self , type , self , value , == , tuple , other , type , other , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

367 :	"clone"
		- NEIGH  = { clone , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _eq , self , other , }
		- SUCC   = { leaves , self , }

367 :	"self"
		- NEIGH  = { clone , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _eq , self , other , }
		- SUCC   = { leaves , self , }

369 :	"return"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

369 :	"Leaf"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

369 :	"self"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

369 :	"type"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

369 :	"self"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

369 :	"value"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"tuple"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"self"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"prefix"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"tuple"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"self"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"lineno"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"self"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

370 :	"column"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

371 :	"fixers_applied"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

371 :	"self"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

371 :	"fixers_applied"
		- NEIGH  = { return , Leaf , self , type , self , value , tuple , self , prefix , tuple , self , lineno , self , column , fixers_applied , self , fixers_applied , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

373 :	"leaves"
		- NEIGH  = { leaves , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { clone , self , }
		- SUCC   = { post_order , self , }

373 :	"self"
		- NEIGH  = { leaves , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { clone , self , }
		- SUCC   = { post_order , self , }

374 :	"yield"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

374 :	"self"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

376 :	"post_order"
		- NEIGH  = { post_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , self , }
		- SUCC   = { pre_order , self , }

376 :	"self"
		- NEIGH  = { post_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { leaves , self , }
		- SUCC   = { pre_order , self , }

378 :	"yield"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

378 :	"self"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

380 :	"pre_order"
		- NEIGH  = { pre_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { post_order , self , }
		- SUCC   = { property , }

380 :	"self"
		- NEIGH  = { pre_order , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { post_order , self , }
		- SUCC   = { property , }

382 :	"yield"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

382 :	"self"
		- NEIGH  = { yield , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

384 :	"property"
		- NEIGH  = { property , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { pre_order , self , }
		- SUCC   = { prefix , self , }

385 :	"prefix"
		- NEIGH  = { prefix , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { prefix , setter , }

385 :	"self"
		- NEIGH  = { prefix , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { property , }
		- SUCC   = { prefix , setter , }

389 :	"return"
		- NEIGH  = { return , self , _prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

389 :	"self"
		- NEIGH  = { return , self , _prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

389 :	"_prefix"
		- NEIGH  = { return , self , _prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

391 :	"prefix"
		- NEIGH  = { prefix , setter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , }
		- SUCC   = { prefix , self , prefix , }

391 :	"setter"
		- NEIGH  = { prefix , setter , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , self , }
		- SUCC   = { prefix , self , prefix , }

392 :	"prefix"
		- NEIGH  = { prefix , self , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , setter , }
		- SUCC   = { }

392 :	"self"
		- NEIGH  = { prefix , self , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , setter , }
		- SUCC   = { }

392 :	"prefix"
		- NEIGH  = { prefix , self , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { prefix , setter , }
		- SUCC   = { }

393 :	"self"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , _prefix , prefix , }

393 :	"changed"
		- NEIGH  = { self , changed , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { self , _prefix , prefix , }

394 :	"self"
		- NEIGH  = { self , _prefix , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , changed , }
		- SUCC   = { }

394 :	"_prefix"
		- NEIGH  = { self , _prefix , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , changed , }
		- SUCC   = { }

394 :	"prefix"
		- NEIGH  = { self , _prefix , prefix , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , changed , }
		- SUCC   = { }

396 :	"convert"
		- NEIGH  = { convert , gr , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Leaf , }
		- SUCC   = { BasePattern , }

396 :	"gr"
		- NEIGH  = { convert , gr , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Leaf , }
		- SUCC   = { BasePattern , }

396 :	"raw_node"
		- NEIGH  = { convert , gr , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { Leaf , }
		- SUCC   = { BasePattern , }

404 :	"tuple"
		- NEIGH  = { tuple , type , value , context , children , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , children , or , type , in , gr , number2symbol , }

404 :	"type"
		- NEIGH  = { tuple , type , value , context , children , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , children , or , type , in , gr , number2symbol , }

404 :	"value"
		- NEIGH  = { tuple , type , value , context , children , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , children , or , type , in , gr , number2symbol , }

404 :	"context"
		- NEIGH  = { tuple , type , value , context , children , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , children , or , type , in , gr , number2symbol , }

404 :	"children"
		- NEIGH  = { tuple , type , value , context , children , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , children , or , type , in , gr , number2symbol , }

404 :	"raw_node"
		- NEIGH  = { tuple , type , value , context , children , raw_node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , children , or , type , in , gr , number2symbol , }

405 :	"if"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

405 :	"children"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

405 :	"or"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

405 :	"type"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

405 :	"in"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

405 :	"gr"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

405 :	"number2symbol"
		- NEIGH  = { if , children , or , type , in , gr , number2symbol , }
		- PARENT = { }
		- CHILD  = { if , len , children , == , return , Node , type , children , context , context , return , Leaf , type , value , context , context , }
		- PRED   = { tuple , type , value , context , children , raw_node , }
		- SUCC   = { }

408 :	"if"
		- NEIGH  = { if , len , children , == , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { return , children , }
		- PRED   = { }
		- SUCC   = { return , Node , type , children , context , context , }

408 :	"len"
		- NEIGH  = { if , len , children , == , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { return , children , }
		- PRED   = { }
		- SUCC   = { return , Node , type , children , context , context , }

408 :	"children"
		- NEIGH  = { if , len , children , == , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { return , children , }
		- PRED   = { }
		- SUCC   = { return , Node , type , children , context , context , }

408 :	"=="
		- NEIGH  = { if , len , children , == , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { return , children , }
		- PRED   = { }
		- SUCC   = { return , Node , type , children , context , context , }

409 :	"return"
		- NEIGH  = { return , children , }
		- PARENT = { if , len , children , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

409 :	"children"
		- NEIGH  = { return , children , }
		- PARENT = { if , len , children , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

410 :	"return"
		- NEIGH  = { return , Node , type , children , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { if , len , children , == , }
		- SUCC   = { return , Leaf , type , value , context , context , }

410 :	"Node"
		- NEIGH  = { return , Node , type , children , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { if , len , children , == , }
		- SUCC   = { return , Leaf , type , value , context , context , }

410 :	"type"
		- NEIGH  = { return , Node , type , children , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { if , len , children , == , }
		- SUCC   = { return , Leaf , type , value , context , context , }

410 :	"children"
		- NEIGH  = { return , Node , type , children , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { if , len , children , == , }
		- SUCC   = { return , Leaf , type , value , context , context , }

410 :	"context"
		- NEIGH  = { return , Node , type , children , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { if , len , children , == , }
		- SUCC   = { return , Leaf , type , value , context , context , }

410 :	"context"
		- NEIGH  = { return , Node , type , children , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { if , len , children , == , }
		- SUCC   = { return , Leaf , type , value , context , context , }

412 :	"return"
		- NEIGH  = { return , Leaf , type , value , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { return , Node , type , children , context , context , }
		- SUCC   = { }

412 :	"Leaf"
		- NEIGH  = { return , Leaf , type , value , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { return , Node , type , children , context , context , }
		- SUCC   = { }

412 :	"type"
		- NEIGH  = { return , Leaf , type , value , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { return , Node , type , children , context , context , }
		- SUCC   = { }

412 :	"value"
		- NEIGH  = { return , Leaf , type , value , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { return , Node , type , children , context , context , }
		- SUCC   = { }

412 :	"context"
		- NEIGH  = { return , Leaf , type , value , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { return , Node , type , children , context , context , }
		- SUCC   = { }

412 :	"context"
		- NEIGH  = { return , Leaf , type , value , context , context , }
		- PARENT = { if , children , or , type , in , gr , number2symbol , }
		- CHILD  = { }
		- PRED   = { return , Node , type , children , context , context , }
		- SUCC   = { }

415 :	"BasePattern"
		- NEIGH  = { BasePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { convert , gr , raw_node , }
		- SUCC   = { LeafPattern , }

432 :	"type"
		- NEIGH  = { type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , }

433 :	"content"
		- NEIGH  = { content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { type , }
		- SUCC   = { name , }

434 :	"name"
		- NEIGH  = { name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { content , }
		- SUCC   = { __new__ , cls , args , kwds , }

436 :	"__new__"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { name , }
		- SUCC   = { __repr__ , self , }

436 :	"cls"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { name , }
		- SUCC   = { __repr__ , self , }

436 :	"args"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { name , }
		- SUCC   = { __repr__ , self , }

436 :	"kwds"
		- NEIGH  = { __new__ , cls , args , kwds , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { name , }
		- SUCC   = { __repr__ , self , }

438 :	"assert"
		- NEIGH  = { assert , cls , is , not , BasePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

438 :	"cls"
		- NEIGH  = { assert , cls , is , not , BasePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

438 :	"is"
		- NEIGH  = { assert , cls , is , not , BasePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

438 :	"not"
		- NEIGH  = { assert , cls , is , not , BasePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

438 :	"BasePattern"
		- NEIGH  = { assert , cls , is , not , BasePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { return , object , __new__ , cls , }

439 :	"return"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , BasePattern , }
		- SUCC   = { }

439 :	"object"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , BasePattern , }
		- SUCC   = { }

439 :	"__new__"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , BasePattern , }
		- SUCC   = { }

439 :	"cls"
		- NEIGH  = { return , object , __new__ , cls , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { assert , cls , is , not , BasePattern , }
		- SUCC   = { }

441 :	"__repr__"
		- NEIGH  = { __repr__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __new__ , cls , args , kwds , }
		- SUCC   = { optimize , self , }

441 :	"self"
		- NEIGH  = { __repr__ , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __new__ , cls , args , kwds , }
		- SUCC   = { optimize , self , }

442 :	"args"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"list"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"type_repr"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"self"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"type"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"self"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"content"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"self"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

442 :	"name"
		- NEIGH  = { args , list , type_repr , self , type , self , content , self , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { while , args , or , args , is , }

443 :	"while"
		- NEIGH  = { while , args , or , args , is , }
		- PARENT = { }
		- CHILD  = { del , args , }
		- PRED   = { args , list , type_repr , self , type , self , content , self , name , }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }

443 :	"args"
		- NEIGH  = { while , args , or , args , is , }
		- PARENT = { }
		- CHILD  = { del , args , }
		- PRED   = { args , list , type_repr , self , type , self , content , self , name , }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }

443 :	"or"
		- NEIGH  = { while , args , or , args , is , }
		- PARENT = { }
		- CHILD  = { del , args , }
		- PRED   = { args , list , type_repr , self , type , self , content , self , name , }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }

443 :	"args"
		- NEIGH  = { while , args , or , args , is , }
		- PARENT = { }
		- CHILD  = { del , args , }
		- PRED   = { args , list , type_repr , self , type , self , content , self , name , }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }

443 :	"is"
		- NEIGH  = { while , args , or , args , is , }
		- PARENT = { }
		- CHILD  = { del , args , }
		- PRED   = { args , list , type_repr , self , type , self , content , self , name , }
		- SUCC   = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }

444 :	"del"
		- NEIGH  = { del , args , }
		- PARENT = { while , args , or , args , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

444 :	"args"
		- NEIGH  = { del , args , }
		- PARENT = { while , args , or , args , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

445 :	"return"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"%"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"tuple"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"self"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"__class__"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"__name__"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"join"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"map"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"repr"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

445 :	"args"
		- NEIGH  = { return , % , tuple , self , __class__ , __name__ , join , map , repr , args , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , args , or , args , is , }
		- SUCC   = { }

447 :	"optimize"
		- NEIGH  = { optimize , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __repr__ , self , }
		- SUCC   = { match , self , node , results , }

447 :	"self"
		- NEIGH  = { optimize , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __repr__ , self , }
		- SUCC   = { match , self , node , results , }

453 :	"return"
		- NEIGH  = { return , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

453 :	"self"
		- NEIGH  = { return , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

455 :	"match"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

455 :	"self"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

455 :	"node"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

455 :	"results"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

466 :	"if"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"self"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"type"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"is"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"not"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"or"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"node"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"type"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"!="
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"self"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

466 :	"type"
		- NEIGH  = { if , self , type , is , not , or , node , type , != , self , type , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , }

467 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , type , is , not , or , node , type , != , self , type , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

468 :	"if"
		- NEIGH  = { if , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { r , if , results , is , not , if , self , _submatch , node , r , if , r , }
		- PRED   = { if , self , type , is , not , or , node , type , != , self , type , }
		- SUCC   = { if , results , is , not , or , self , name , }

468 :	"self"
		- NEIGH  = { if , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { r , if , results , is , not , if , self , _submatch , node , r , if , r , }
		- PRED   = { if , self , type , is , not , or , node , type , != , self , type , }
		- SUCC   = { if , results , is , not , or , self , name , }

468 :	"content"
		- NEIGH  = { if , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { r , if , results , is , not , if , self , _submatch , node , r , if , r , }
		- PRED   = { if , self , type , is , not , or , node , type , != , self , type , }
		- SUCC   = { if , results , is , not , or , self , name , }

468 :	"is"
		- NEIGH  = { if , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { r , if , results , is , not , if , self , _submatch , node , r , if , r , }
		- PRED   = { if , self , type , is , not , or , node , type , != , self , type , }
		- SUCC   = { if , results , is , not , or , self , name , }

468 :	"not"
		- NEIGH  = { if , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { r , if , results , is , not , if , self , _submatch , node , r , if , r , }
		- PRED   = { if , self , type , is , not , or , node , type , != , self , type , }
		- SUCC   = { if , results , is , not , or , self , name , }

469 :	"r"
		- NEIGH  = { r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , results , is , not , }

470 :	"if"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { r , dict , }
		- PRED   = { r , }
		- SUCC   = { if , self , _submatch , node , r , }

470 :	"results"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { r , dict , }
		- PRED   = { r , }
		- SUCC   = { if , self , _submatch , node , r , }

470 :	"is"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { r , dict , }
		- PRED   = { r , }
		- SUCC   = { if , self , _submatch , node , r , }

470 :	"not"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { r , dict , }
		- PRED   = { r , }
		- SUCC   = { if , self , _submatch , node , r , }

471 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

471 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

472 :	"if"
		- NEIGH  = { if , self , _submatch , node , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { return , }
		- PRED   = { if , results , is , not , }
		- SUCC   = { if , r , }

472 :	"self"
		- NEIGH  = { if , self , _submatch , node , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { return , }
		- PRED   = { if , results , is , not , }
		- SUCC   = { if , r , }

472 :	"_submatch"
		- NEIGH  = { if , self , _submatch , node , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { return , }
		- PRED   = { if , results , is , not , }
		- SUCC   = { if , r , }

472 :	"node"
		- NEIGH  = { if , self , _submatch , node , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { return , }
		- PRED   = { if , results , is , not , }
		- SUCC   = { if , r , }

472 :	"r"
		- NEIGH  = { if , self , _submatch , node , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { return , }
		- PRED   = { if , results , is , not , }
		- SUCC   = { if , r , }

473 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , _submatch , node , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

474 :	"if"
		- NEIGH  = { if , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { results , update , r , }
		- PRED   = { if , self , _submatch , node , r , }
		- SUCC   = { }

474 :	"r"
		- NEIGH  = { if , r , }
		- PARENT = { if , self , content , is , not , }
		- CHILD  = { results , update , r , }
		- PRED   = { if , self , _submatch , node , r , }
		- SUCC   = { }

475 :	"results"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

475 :	"update"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

475 :	"r"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

476 :	"if"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

476 :	"results"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

476 :	"is"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

476 :	"not"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

476 :	"or"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

476 :	"self"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

476 :	"name"
		- NEIGH  = { if , results , is , not , or , self , name , }
		- PARENT = { }
		- CHILD  = { results , self , name , node , }
		- PRED   = { if , self , content , is , not , }
		- SUCC   = { return , }

477 :	"results"
		- NEIGH  = { results , self , name , node , }
		- PARENT = { if , results , is , not , or , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

477 :	"self"
		- NEIGH  = { results , self , name , node , }
		- PARENT = { if , results , is , not , or , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

477 :	"name"
		- NEIGH  = { results , self , name , node , }
		- PARENT = { if , results , is , not , or , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

477 :	"node"
		- NEIGH  = { results , self , name , node , }
		- PARENT = { if , results , is , not , or , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

478 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , results , is , not , or , self , name , }
		- SUCC   = { }

480 :	"match_seq"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

480 :	"self"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

480 :	"nodes"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

480 :	"results"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

486 :	"if"
		- NEIGH  = { if , len , nodes , != , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , match , nodes , results , }

486 :	"len"
		- NEIGH  = { if , len , nodes , != , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , match , nodes , results , }

486 :	"nodes"
		- NEIGH  = { if , len , nodes , != , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , match , nodes , results , }

486 :	"!="
		- NEIGH  = { if , len , nodes , != , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , self , match , nodes , results , }

487 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , len , nodes , != , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

488 :	"return"
		- NEIGH  = { return , self , match , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , len , nodes , != , }
		- SUCC   = { }

488 :	"self"
		- NEIGH  = { return , self , match , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , len , nodes , != , }
		- SUCC   = { }

488 :	"match"
		- NEIGH  = { return , self , match , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , len , nodes , != , }
		- SUCC   = { }

488 :	"nodes"
		- NEIGH  = { return , self , match , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , len , nodes , != , }
		- SUCC   = { }

488 :	"results"
		- NEIGH  = { return , self , match , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , len , nodes , != , }
		- SUCC   = { }

490 :	"generate_matches"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , results , }
		- SUCC   = { }

490 :	"self"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , results , }
		- SUCC   = { }

490 :	"nodes"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , results , }
		- SUCC   = { }

496 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , nodes , or , self , match , nodes , r , }

496 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , nodes , or , self , match , nodes , r , }

497 :	"if"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

497 :	"nodes"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

497 :	"or"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

497 :	"self"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

497 :	"match"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

497 :	"nodes"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

497 :	"r"
		- NEIGH  = { if , nodes , or , self , match , nodes , r , }
		- PARENT = { }
		- CHILD  = { yield , tuple , r , }
		- PRED   = { r , dict , }
		- SUCC   = { }

498 :	"yield"
		- NEIGH  = { yield , tuple , r , }
		- PARENT = { if , nodes , or , self , match , nodes , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

498 :	"tuple"
		- NEIGH  = { yield , tuple , r , }
		- PARENT = { if , nodes , or , self , match , nodes , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

498 :	"r"
		- NEIGH  = { yield , tuple , r , }
		- PARENT = { if , nodes , or , self , match , nodes , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

501 :	"LeafPattern"
		- NEIGH  = { LeafPattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { BasePattern , }
		- SUCC   = { NodePattern , }

503 :	"__init__"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , results , }

503 :	"self"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , results , }

503 :	"type"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , results , }

503 :	"content"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , results , }

503 :	"name"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , results , }

515 :	"if"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , <= , type , < , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

515 :	"type"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , <= , type , < , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

515 :	"is"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , <= , type , < , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

515 :	"not"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , <= , type , < , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

516 :	"assert"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

516 :	"<="
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

516 :	"type"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

516 :	"<"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

516 :	"type"
		- NEIGH  = { assert , <= , type , < , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

517 :	"if"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

517 :	"content"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

517 :	"is"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

517 :	"not"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

518 :	"assert"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

518 :	"isinstance"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

518 :	"content"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

518 :	"str"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

518 :	"repr"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

518 :	"content"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

519 :	"self"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , content , content , }

519 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , content , content , }

519 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , content , content , }

520 :	"self"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { self , name , name , }

520 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { self , name , name , }

520 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { self , name , name , }

521 :	"self"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { }

521 :	"name"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { }

521 :	"name"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { }

523 :	"match"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { _submatch , self , node , results , }

523 :	"self"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { _submatch , self , node , results , }

523 :	"node"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { _submatch , self , node , results , }

523 :	"results"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { _submatch , self , node , results , }

525 :	"if"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , BasePattern , match , self , node , results , }

525 :	"isinstance"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , BasePattern , match , self , node , results , }

525 :	"node"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , BasePattern , match , self , node , results , }

525 :	"Leaf"
		- NEIGH  = { if , isinstance , node , Leaf , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { return , BasePattern , match , self , node , results , }

526 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , isinstance , node , Leaf , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

527 :	"return"
		- NEIGH  = { return , BasePattern , match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

527 :	"BasePattern"
		- NEIGH  = { return , BasePattern , match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

527 :	"match"
		- NEIGH  = { return , BasePattern , match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

527 :	"self"
		- NEIGH  = { return , BasePattern , match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

527 :	"node"
		- NEIGH  = { return , BasePattern , match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

527 :	"results"
		- NEIGH  = { return , BasePattern , match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , isinstance , node , Leaf , }
		- SUCC   = { }

529 :	"_submatch"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { }

529 :	"self"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { }

529 :	"node"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { }

529 :	"results"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { }

542 :	"return"
		- NEIGH  = { return , self , content , == , node , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"self"
		- NEIGH  = { return , self , content , == , node , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"content"
		- NEIGH  = { return , self , content , == , node , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"=="
		- NEIGH  = { return , self , content , == , node , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"node"
		- NEIGH  = { return , self , content , == , node , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

542 :	"value"
		- NEIGH  = { return , self , content , == , node , value , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

545 :	"NodePattern"
		- NEIGH  = { NodePattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { LeafPattern , }
		- SUCC   = { WildcardPattern , }

547 :	"wildcards"
		- NEIGH  = { wildcards , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { __init__ , self , type , content , name , }

549 :	"__init__"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { wildcards , }
		- SUCC   = { _submatch , self , node , results , }

549 :	"self"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { wildcards , }
		- SUCC   = { _submatch , self , node , results , }

549 :	"type"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { wildcards , }
		- SUCC   = { _submatch , self , node , results , }

549 :	"content"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { wildcards , }
		- SUCC   = { _submatch , self , node , results , }

549 :	"name"
		- NEIGH  = { __init__ , self , type , content , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { wildcards , }
		- SUCC   = { _submatch , self , node , results , }

565 :	"if"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , type , >= , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

565 :	"type"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , type , >= , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

565 :	"is"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , type , >= , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

565 :	"not"
		- NEIGH  = { if , type , is , not , }
		- PARENT = { }
		- CHILD  = { assert , type , >= , type , }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

566 :	"assert"
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

566 :	"type"
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

566 :	">="
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

566 :	"type"
		- NEIGH  = { assert , type , >= , type , }
		- PARENT = { if , type , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

567 :	"if"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , content , list , content , for , tuple , i , item , enumerate , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

567 :	"content"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , content , list , content , for , tuple , i , item , enumerate , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

567 :	"is"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , content , list , content , for , tuple , i , item , enumerate , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

567 :	"not"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , str , repr , content , content , list , content , for , tuple , i , item , enumerate , content , }
		- PRED   = { if , type , is , not , }
		- SUCC   = { self , type , type , }

568 :	"assert"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , list , content , }

568 :	"isinstance"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , list , content , }

568 :	"content"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , list , content , }

568 :	"str"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , list , content , }

568 :	"repr"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , list , content , }

568 :	"content"
		- NEIGH  = { assert , isinstance , content , str , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { content , list , content , }

569 :	"content"
		- NEIGH  = { content , list , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { assert , isinstance , content , str , repr , content , }
		- SUCC   = { for , tuple , i , item , enumerate , content , }

569 :	"list"
		- NEIGH  = { content , list , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { assert , isinstance , content , str , repr , content , }
		- SUCC   = { for , tuple , i , item , enumerate , content , }

569 :	"content"
		- NEIGH  = { content , list , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { assert , isinstance , content , str , repr , content , }
		- SUCC   = { for , tuple , i , item , enumerate , content , }

570 :	"for"
		- NEIGH  = { for , tuple , i , item , enumerate , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , isinstance , item , BasePattern , tuple , i , item , if , isinstance , item , WildcardPattern , }
		- PRED   = { content , list , content , }
		- SUCC   = { }

570 :	"tuple"
		- NEIGH  = { for , tuple , i , item , enumerate , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , isinstance , item , BasePattern , tuple , i , item , if , isinstance , item , WildcardPattern , }
		- PRED   = { content , list , content , }
		- SUCC   = { }

570 :	"i"
		- NEIGH  = { for , tuple , i , item , enumerate , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , isinstance , item , BasePattern , tuple , i , item , if , isinstance , item , WildcardPattern , }
		- PRED   = { content , list , content , }
		- SUCC   = { }

570 :	"item"
		- NEIGH  = { for , tuple , i , item , enumerate , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , isinstance , item , BasePattern , tuple , i , item , if , isinstance , item , WildcardPattern , }
		- PRED   = { content , list , content , }
		- SUCC   = { }

570 :	"enumerate"
		- NEIGH  = { for , tuple , i , item , enumerate , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , isinstance , item , BasePattern , tuple , i , item , if , isinstance , item , WildcardPattern , }
		- PRED   = { content , list , content , }
		- SUCC   = { }

570 :	"content"
		- NEIGH  = { for , tuple , i , item , enumerate , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , isinstance , item , BasePattern , tuple , i , item , if , isinstance , item , WildcardPattern , }
		- PRED   = { content , list , content , }
		- SUCC   = { }

571 :	"assert"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

571 :	"isinstance"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

571 :	"item"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

571 :	"BasePattern"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

571 :	"tuple"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

571 :	"i"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

571 :	"item"
		- NEIGH  = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , isinstance , item , WildcardPattern , }

572 :	"if"
		- NEIGH  = { if , isinstance , item , WildcardPattern , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { self , wildcards , }
		- PRED   = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- SUCC   = { }

572 :	"isinstance"
		- NEIGH  = { if , isinstance , item , WildcardPattern , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { self , wildcards , }
		- PRED   = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- SUCC   = { }

572 :	"item"
		- NEIGH  = { if , isinstance , item , WildcardPattern , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { self , wildcards , }
		- PRED   = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- SUCC   = { }

572 :	"WildcardPattern"
		- NEIGH  = { if , isinstance , item , WildcardPattern , }
		- PARENT = { for , tuple , i , item , enumerate , content , }
		- CHILD  = { self , wildcards , }
		- PRED   = { assert , isinstance , item , BasePattern , tuple , i , item , }
		- SUCC   = { }

573 :	"self"
		- NEIGH  = { self , wildcards , }
		- PARENT = { if , isinstance , item , WildcardPattern , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

573 :	"wildcards"
		- NEIGH  = { self , wildcards , }
		- PARENT = { if , isinstance , item , WildcardPattern , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

574 :	"self"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , content , content , }

574 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , content , content , }

574 :	"type"
		- NEIGH  = { self , type , type , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , content , content , }

575 :	"self"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { self , name , name , }

575 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { self , name , name , }

575 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , type , type , }
		- SUCC   = { self , name , name , }

576 :	"self"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { }

576 :	"name"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { }

576 :	"name"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { }

578 :	"_submatch"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { }

578 :	"self"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { }

578 :	"node"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { }

578 :	"results"
		- NEIGH  = { _submatch , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , type , content , name , }
		- SUCC   = { }

591 :	"if"
		- NEIGH  = { if , self , wildcards , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , self , content , node , children , return , }
		- PRED   = { }
		- SUCC   = { if , len , self , content , != , len , node , children , }

591 :	"self"
		- NEIGH  = { if , self , wildcards , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , self , content , node , children , return , }
		- PRED   = { }
		- SUCC   = { if , len , self , content , != , len , node , children , }

591 :	"wildcards"
		- NEIGH  = { if , self , wildcards , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , self , content , node , children , return , }
		- PRED   = { }
		- SUCC   = { if , len , self , content , != , len , node , children , }

592 :	"for"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"tuple"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"c"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"r"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"generate_matches"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"self"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"content"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"node"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

592 :	"children"
		- NEIGH  = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { if , c , == , len , node , children , }
		- PRED   = { }
		- SUCC   = { return , }

593 :	"if"
		- NEIGH  = { if , c , == , len , node , children , }
		- PARENT = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

593 :	"c"
		- NEIGH  = { if , c , == , len , node , children , }
		- PARENT = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

593 :	"=="
		- NEIGH  = { if , c , == , len , node , children , }
		- PARENT = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

593 :	"len"
		- NEIGH  = { if , c , == , len , node , children , }
		- PARENT = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

593 :	"node"
		- NEIGH  = { if , c , == , len , node , children , }
		- PARENT = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

593 :	"children"
		- NEIGH  = { if , c , == , len , node , children , }
		- PARENT = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

594 :	"if"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , node , children , }
		- CHILD  = { results , update , r , }
		- PRED   = { }
		- SUCC   = { return , }

594 :	"results"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , node , children , }
		- CHILD  = { results , update , r , }
		- PRED   = { }
		- SUCC   = { return , }

594 :	"is"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , node , children , }
		- CHILD  = { results , update , r , }
		- PRED   = { }
		- SUCC   = { return , }

594 :	"not"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , node , children , }
		- CHILD  = { results , update , r , }
		- PRED   = { }
		- SUCC   = { return , }

595 :	"results"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

595 :	"update"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

595 :	"r"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

596 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , c , == , len , node , children , }
		- CHILD  = { }
		- PRED   = { if , results , is , not , }
		- SUCC   = { }

597 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , self , wildcards , }
		- CHILD  = { }
		- PRED   = { for , tuple , c , r , generate_matches , self , content , node , children , }
		- SUCC   = { }

598 :	"if"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"len"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"self"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"content"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"!="
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"len"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"node"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

598 :	"children"
		- NEIGH  = { if , len , self , content , != , len , node , children , }
		- PARENT = { }
		- CHILD  = { return , }
		- PRED   = { if , self , wildcards , }
		- SUCC   = { for , tuple , subpattern , child , zip , self , content , node , children , }

599 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , len , self , content , != , len , node , children , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

600 :	"for"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"tuple"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"subpattern"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"child"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"zip"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"self"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"content"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"node"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

600 :	"children"
		- NEIGH  = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- PARENT = { }
		- CHILD  = { if , subpattern , match , child , results , }
		- PRED   = { if , len , self , content , != , len , node , children , }
		- SUCC   = { return , }

601 :	"if"
		- NEIGH  = { if , subpattern , match , child , results , }
		- PARENT = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

601 :	"subpattern"
		- NEIGH  = { if , subpattern , match , child , results , }
		- PARENT = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

601 :	"match"
		- NEIGH  = { if , subpattern , match , child , results , }
		- PARENT = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

601 :	"child"
		- NEIGH  = { if , subpattern , match , child , results , }
		- PARENT = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

601 :	"results"
		- NEIGH  = { if , subpattern , match , child , results , }
		- PARENT = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- CHILD  = { return , }
		- PRED   = { }
		- SUCC   = { }

602 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , subpattern , match , child , results , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

603 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , subpattern , child , zip , self , content , node , children , }
		- SUCC   = { }

606 :	"WildcardPattern"
		- NEIGH  = { WildcardPattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NodePattern , }
		- SUCC   = { NegatedPattern , }

620 :	"__init__"
		- NEIGH  = { __init__ , self , content , min , max , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { optimize , self , }

620 :	"self"
		- NEIGH  = { __init__ , self , content , min , max , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { optimize , self , }

620 :	"content"
		- NEIGH  = { __init__ , self , content , min , max , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { optimize , self , }

620 :	"min"
		- NEIGH  = { __init__ , self , content , min , max , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { optimize , self , }

620 :	"max"
		- NEIGH  = { __init__ , self , content , min , max , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { optimize , self , }

620 :	"name"
		- NEIGH  = { __init__ , self , content , min , max , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { optimize , self , }

643 :	"assert"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"<="
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"min"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"<="
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"max"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"<="
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"HUGE"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"tuple"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"min"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

643 :	"max"
		- NEIGH  = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , content , is , not , }

644 :	"if"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { content , tuple , map , tuple , content , assert , len , content , repr , content , for , alt , content , }
		- PRED   = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- SUCC   = { self , content , content , }

644 :	"content"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { content , tuple , map , tuple , content , assert , len , content , repr , content , for , alt , content , }
		- PRED   = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- SUCC   = { self , content , content , }

644 :	"is"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { content , tuple , map , tuple , content , assert , len , content , repr , content , for , alt , content , }
		- PRED   = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- SUCC   = { self , content , content , }

644 :	"not"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { content , tuple , map , tuple , content , assert , len , content , repr , content , for , alt , content , }
		- PRED   = { assert , <= , min , <= , max , <= , HUGE , tuple , min , max , }
		- SUCC   = { self , content , content , }

645 :	"content"
		- NEIGH  = { content , tuple , map , tuple , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , len , content , repr , content , }

645 :	"tuple"
		- NEIGH  = { content , tuple , map , tuple , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , len , content , repr , content , }

645 :	"map"
		- NEIGH  = { content , tuple , map , tuple , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , len , content , repr , content , }

645 :	"tuple"
		- NEIGH  = { content , tuple , map , tuple , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , len , content , repr , content , }

645 :	"content"
		- NEIGH  = { content , tuple , map , tuple , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { assert , len , content , repr , content , }

647 :	"assert"
		- NEIGH  = { assert , len , content , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { content , tuple , map , tuple , content , }
		- SUCC   = { for , alt , content , }

647 :	"len"
		- NEIGH  = { assert , len , content , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { content , tuple , map , tuple , content , }
		- SUCC   = { for , alt , content , }

647 :	"content"
		- NEIGH  = { assert , len , content , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { content , tuple , map , tuple , content , }
		- SUCC   = { for , alt , content , }

647 :	"repr"
		- NEIGH  = { assert , len , content , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { content , tuple , map , tuple , content , }
		- SUCC   = { for , alt , content , }

647 :	"content"
		- NEIGH  = { assert , len , content , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { content , tuple , map , tuple , content , }
		- SUCC   = { for , alt , content , }

648 :	"for"
		- NEIGH  = { for , alt , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , len , alt , repr , alt , }
		- PRED   = { assert , len , content , repr , content , }
		- SUCC   = { }

648 :	"alt"
		- NEIGH  = { for , alt , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , len , alt , repr , alt , }
		- PRED   = { assert , len , content , repr , content , }
		- SUCC   = { }

648 :	"content"
		- NEIGH  = { for , alt , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { assert , len , alt , repr , alt , }
		- PRED   = { assert , len , content , repr , content , }
		- SUCC   = { }

649 :	"assert"
		- NEIGH  = { assert , len , alt , repr , alt , }
		- PARENT = { for , alt , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

649 :	"len"
		- NEIGH  = { assert , len , alt , repr , alt , }
		- PARENT = { for , alt , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

649 :	"alt"
		- NEIGH  = { assert , len , alt , repr , alt , }
		- PARENT = { for , alt , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

649 :	"repr"
		- NEIGH  = { assert , len , alt , repr , alt , }
		- PARENT = { for , alt , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

649 :	"alt"
		- NEIGH  = { assert , len , alt , repr , alt , }
		- PARENT = { for , alt , content , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

650 :	"self"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , min , min , }

650 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , min , min , }

650 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { self , min , min , }

651 :	"self"
		- NEIGH  = { self , min , min , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { self , max , max , }

651 :	"min"
		- NEIGH  = { self , min , min , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { self , max , max , }

651 :	"min"
		- NEIGH  = { self , min , min , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , content , content , }
		- SUCC   = { self , max , max , }

652 :	"self"
		- NEIGH  = { self , max , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , min , min , }
		- SUCC   = { self , name , name , }

652 :	"max"
		- NEIGH  = { self , max , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , min , min , }
		- SUCC   = { self , name , name , }

652 :	"max"
		- NEIGH  = { self , max , max , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , min , min , }
		- SUCC   = { self , name , name , }

653 :	"self"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , max , max , }
		- SUCC   = { }

653 :	"name"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , max , max , }
		- SUCC   = { }

653 :	"name"
		- NEIGH  = { self , name , name , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { self , max , max , }
		- SUCC   = { }

655 :	"optimize"
		- NEIGH  = { optimize , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , content , min , max , name , }
		- SUCC   = { match , self , node , results , }

655 :	"self"
		- NEIGH  = { optimize , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , content , min , max , name , }
		- SUCC   = { match , self , node , results , }

657 :	"subpattern"
		- NEIGH  = { subpattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }

658 :	"if"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

658 :	"self"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

658 :	"content"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

658 :	"is"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

658 :	"not"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"or"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"len"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"self"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"content"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"=="
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"or"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"len"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"self"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"content"
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

659 :	"=="
		- NEIGH  = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- PARENT = { }
		- CHILD  = { subpattern , self , content , }
		- PRED   = { subpattern , }
		- SUCC   = { if , self , min , == , or , self , max , == , }

660 :	"subpattern"
		- NEIGH  = { subpattern , self , content , }
		- PARENT = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

660 :	"self"
		- NEIGH  = { subpattern , self , content , }
		- PARENT = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

660 :	"content"
		- NEIGH  = { subpattern , self , content , }
		- PARENT = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

661 :	"if"
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"self"
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"min"
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"=="
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"or"
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"self"
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"max"
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

661 :	"=="
		- NEIGH  = { if , self , min , == , or , self , max , == , }
		- PARENT = { }
		- CHILD  = { if , self , content , is , if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PRED   = { if , self , content , is , not , or , len , self , content , == , or , len , self , content , == , }
		- SUCC   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }

662 :	"if"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , NodePattern , name , self , name , }
		- PRED   = { }
		- SUCC   = { if , subpattern , is , not , or , self , name , == , subpattern , name , }

662 :	"self"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , NodePattern , name , self , name , }
		- PRED   = { }
		- SUCC   = { if , subpattern , is , not , or , self , name , == , subpattern , name , }

662 :	"content"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , NodePattern , name , self , name , }
		- PRED   = { }
		- SUCC   = { if , subpattern , is , not , or , self , name , == , subpattern , name , }

662 :	"is"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , NodePattern , name , self , name , }
		- PRED   = { }
		- SUCC   = { if , subpattern , is , not , or , self , name , == , subpattern , name , }

663 :	"return"
		- NEIGH  = { return , NodePattern , name , self , name , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

663 :	"NodePattern"
		- NEIGH  = { return , NodePattern , name , self , name , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

663 :	"name"
		- NEIGH  = { return , NodePattern , name , self , name , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

663 :	"self"
		- NEIGH  = { return , NodePattern , name , self , name , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

663 :	"name"
		- NEIGH  = { return , NodePattern , name , self , name , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

664 :	"if"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"subpattern"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"is"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"not"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"or"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"self"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"name"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"=="
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"subpattern"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

664 :	"name"
		- NEIGH  = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- PARENT = { if , self , min , == , or , self , max , == , }
		- CHILD  = { return , subpattern , optimize , }
		- PRED   = { if , self , content , is , }
		- SUCC   = { }

665 :	"return"
		- NEIGH  = { return , subpattern , optimize , }
		- PARENT = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

665 :	"subpattern"
		- NEIGH  = { return , subpattern , optimize , }
		- PARENT = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

665 :	"optimize"
		- NEIGH  = { return , subpattern , optimize , }
		- PARENT = { if , subpattern , is , not , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

666 :	"if"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"self"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"min"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"<="
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"or"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"isinstance"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"subpattern"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

666 :	"WildcardPattern"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"or"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"subpattern"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"min"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"<="
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"or"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"self"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"name"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"=="
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"subpattern"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

667 :	"name"
		- NEIGH  = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- PARENT = { }
		- CHILD  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PRED   = { if , self , min , == , or , self , max , == , }
		- SUCC   = { return , self , }

668 :	"return"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

668 :	"WildcardPattern"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

668 :	"subpattern"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

668 :	"content"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

669 :	"self"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

669 :	"min"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

669 :	"*"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

669 :	"subpattern"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

669 :	"min"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"self"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"max"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"*"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"subpattern"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

670 :	"max"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

671 :	"subpattern"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

671 :	"name"
		- NEIGH  = { return , WildcardPattern , subpattern , content , self , min , * , subpattern , min , self , max , * , subpattern , max , subpattern , name , }
		- PARENT = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

672 :	"return"
		- NEIGH  = { return , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- SUCC   = { }

672 :	"self"
		- NEIGH  = { return , self , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , self , min , <= , or , isinstance , subpattern , WildcardPattern , or , subpattern , min , <= , or , self , name , == , subpattern , name , }
		- SUCC   = { }

674 :	"match"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

674 :	"self"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

674 :	"node"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

674 :	"results"
		- NEIGH  = { match , self , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { optimize , self , }
		- SUCC   = { match_seq , self , nodes , results , }

676 :	"return"
		- NEIGH  = { return , self , match_seq , list , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

676 :	"self"
		- NEIGH  = { return , self , match_seq , list , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

676 :	"match_seq"
		- NEIGH  = { return , self , match_seq , list , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

676 :	"list"
		- NEIGH  = { return , self , match_seq , list , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

676 :	"node"
		- NEIGH  = { return , self , match_seq , list , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

676 :	"results"
		- NEIGH  = { return , self , match_seq , list , node , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

678 :	"match_seq"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

678 :	"self"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

678 :	"nodes"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

678 :	"results"
		- NEIGH  = { match_seq , self , nodes , results , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , results , }
		- SUCC   = { generate_matches , self , nodes , }

680 :	"for"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

680 :	"tuple"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

680 :	"c"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

680 :	"r"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

680 :	"self"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

680 :	"generate_matches"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

680 :	"nodes"
		- NEIGH  = { for , tuple , c , r , self , generate_matches , nodes , }
		- PARENT = { }
		- CHILD  = { if , c , == , len , nodes , }
		- PRED   = { }
		- SUCC   = { return , }

681 :	"if"
		- NEIGH  = { if , c , == , len , nodes , }
		- PARENT = { for , tuple , c , r , self , generate_matches , nodes , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

681 :	"c"
		- NEIGH  = { if , c , == , len , nodes , }
		- PARENT = { for , tuple , c , r , self , generate_matches , nodes , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

681 :	"=="
		- NEIGH  = { if , c , == , len , nodes , }
		- PARENT = { for , tuple , c , r , self , generate_matches , nodes , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

681 :	"len"
		- NEIGH  = { if , c , == , len , nodes , }
		- PARENT = { for , tuple , c , r , self , generate_matches , nodes , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

681 :	"nodes"
		- NEIGH  = { if , c , == , len , nodes , }
		- PARENT = { for , tuple , c , r , self , generate_matches , nodes , }
		- CHILD  = { if , results , is , not , return , }
		- PRED   = { }
		- SUCC   = { }

682 :	"if"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , nodes , }
		- CHILD  = { results , update , r , if , self , name , }
		- PRED   = { }
		- SUCC   = { return , }

682 :	"results"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , nodes , }
		- CHILD  = { results , update , r , if , self , name , }
		- PRED   = { }
		- SUCC   = { return , }

682 :	"is"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , nodes , }
		- CHILD  = { results , update , r , if , self , name , }
		- PRED   = { }
		- SUCC   = { return , }

682 :	"not"
		- NEIGH  = { if , results , is , not , }
		- PARENT = { if , c , == , len , nodes , }
		- CHILD  = { results , update , r , if , self , name , }
		- PRED   = { }
		- SUCC   = { return , }

683 :	"results"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , name , }

683 :	"update"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , name , }

683 :	"r"
		- NEIGH  = { results , update , r , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , name , }

684 :	"if"
		- NEIGH  = { if , self , name , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { results , self , name , list , nodes , }
		- PRED   = { results , update , r , }
		- SUCC   = { }

684 :	"self"
		- NEIGH  = { if , self , name , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { results , self , name , list , nodes , }
		- PRED   = { results , update , r , }
		- SUCC   = { }

684 :	"name"
		- NEIGH  = { if , self , name , }
		- PARENT = { if , results , is , not , }
		- CHILD  = { results , self , name , list , nodes , }
		- PRED   = { results , update , r , }
		- SUCC   = { }

685 :	"results"
		- NEIGH  = { results , self , name , list , nodes , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

685 :	"self"
		- NEIGH  = { results , self , name , list , nodes , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

685 :	"name"
		- NEIGH  = { results , self , name , list , nodes , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

685 :	"list"
		- NEIGH  = { results , self , name , list , nodes , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

685 :	"nodes"
		- NEIGH  = { results , self , name , list , nodes , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

686 :	"return"
		- NEIGH  = { return , }
		- PARENT = { if , c , == , len , nodes , }
		- CHILD  = { }
		- PRED   = { if , results , is , not , }
		- SUCC   = { }

687 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { for , tuple , c , r , self , generate_matches , nodes , }
		- SUCC   = { }

689 :	"generate_matches"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , results , }
		- SUCC   = { _iterative_matches , self , nodes , }

689 :	"self"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , results , }
		- SUCC   = { _iterative_matches , self , nodes , }

689 :	"nodes"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , results , }
		- SUCC   = { _iterative_matches , self , nodes , }

701 :	"if"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { for , count , range , self , min , + , min , len , nodes , self , max , if , self , name , == , }
		- PRED   = { }
		- SUCC   = { }

701 :	"self"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { for , count , range , self , min , + , min , len , nodes , self , max , if , self , name , == , }
		- PRED   = { }
		- SUCC   = { }

701 :	"content"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { for , count , range , self , min , + , min , len , nodes , self , max , if , self , name , == , }
		- PRED   = { }
		- SUCC   = { }

701 :	"is"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { for , count , range , self , min , + , min , len , nodes , self , max , if , self , name , == , }
		- PRED   = { }
		- SUCC   = { }

703 :	"for"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"count"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"range"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"self"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"min"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"+"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"min"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"len"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"nodes"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"self"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

703 :	"max"
		- NEIGH  = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { r , dict , if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { if , self , name , == , }

704 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , name , }

704 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , self , name , }

705 :	"if"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { r , dict , }
		- SUCC   = { yield , tuple , count , r , }

705 :	"self"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { r , dict , }
		- SUCC   = { yield , tuple , count , r , }

705 :	"name"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { r , dict , }
		- SUCC   = { yield , tuple , count , r , }

706 :	"r"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

706 :	"self"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

706 :	"name"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

706 :	"nodes"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

706 :	"count"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

707 :	"yield"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

707 :	"tuple"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

707 :	"count"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

707 :	"r"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

708 :	"if"
		- NEIGH  = { if , self , name , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , self , _bare_name_matches , nodes , if , hasattr , sys , try , for , tuple , count , r , self , _recursive_matches , nodes , except , RuntimeError , if , hasattr , sys , }
		- PRED   = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- SUCC   = { }

708 :	"self"
		- NEIGH  = { if , self , name , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , self , _bare_name_matches , nodes , if , hasattr , sys , try , for , tuple , count , r , self , _recursive_matches , nodes , except , RuntimeError , if , hasattr , sys , }
		- PRED   = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- SUCC   = { }

708 :	"name"
		- NEIGH  = { if , self , name , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , self , _bare_name_matches , nodes , if , hasattr , sys , try , for , tuple , count , r , self , _recursive_matches , nodes , except , RuntimeError , if , hasattr , sys , }
		- PRED   = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- SUCC   = { }

708 :	"=="
		- NEIGH  = { if , self , name , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , self , _bare_name_matches , nodes , if , hasattr , sys , try , for , tuple , count , r , self , _recursive_matches , nodes , except , RuntimeError , if , hasattr , sys , }
		- PRED   = { for , count , range , self , min , + , min , len , nodes , self , max , }
		- SUCC   = { }

709 :	"yield"
		- NEIGH  = { yield , self , _bare_name_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , hasattr , sys , }

709 :	"self"
		- NEIGH  = { yield , self , _bare_name_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , hasattr , sys , }

709 :	"_bare_name_matches"
		- NEIGH  = { yield , self , _bare_name_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , hasattr , sys , }

709 :	"nodes"
		- NEIGH  = { yield , self , _bare_name_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , hasattr , sys , }

715 :	"if"
		- NEIGH  = { if , hasattr , sys , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { save_stderr , sys , stderr , sys , stderr , StringIO , }
		- PRED   = { yield , self , _bare_name_matches , nodes , }
		- SUCC   = { try , }

715 :	"hasattr"
		- NEIGH  = { if , hasattr , sys , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { save_stderr , sys , stderr , sys , stderr , StringIO , }
		- PRED   = { yield , self , _bare_name_matches , nodes , }
		- SUCC   = { try , }

715 :	"sys"
		- NEIGH  = { if , hasattr , sys , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { save_stderr , sys , stderr , sys , stderr , StringIO , }
		- PRED   = { yield , self , _bare_name_matches , nodes , }
		- SUCC   = { try , }

716 :	"save_stderr"
		- NEIGH  = { save_stderr , sys , stderr , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sys , stderr , StringIO , }

716 :	"sys"
		- NEIGH  = { save_stderr , sys , stderr , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sys , stderr , StringIO , }

716 :	"stderr"
		- NEIGH  = { save_stderr , sys , stderr , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { sys , stderr , StringIO , }

717 :	"sys"
		- NEIGH  = { sys , stderr , StringIO , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { save_stderr , sys , stderr , }
		- SUCC   = { }

717 :	"stderr"
		- NEIGH  = { sys , stderr , StringIO , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { save_stderr , sys , stderr , }
		- SUCC   = { }

717 :	"StringIO"
		- NEIGH  = { sys , stderr , StringIO , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { save_stderr , sys , stderr , }
		- SUCC   = { }

718 :	"try"
		- NEIGH  = { try , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { }
		- PRED   = { if , hasattr , sys , }
		- SUCC   = { for , tuple , count , r , self , _recursive_matches , nodes , }

719 :	"for"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

719 :	"tuple"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

719 :	"count"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

719 :	"r"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

719 :	"self"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

719 :	"_recursive_matches"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

719 :	"nodes"
		- NEIGH  = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { try , }
		- SUCC   = { except , RuntimeError , }

720 :	"if"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { }
		- SUCC   = { yield , tuple , count , r , }

720 :	"self"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { }
		- SUCC   = { yield , tuple , count , r , }

720 :	"name"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { }
		- SUCC   = { yield , tuple , count , r , }

721 :	"r"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

721 :	"self"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

721 :	"name"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

721 :	"nodes"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

721 :	"count"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

722 :	"yield"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

722 :	"tuple"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

722 :	"count"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

722 :	"r"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

723 :	"except"
		- NEIGH  = { except , RuntimeError , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PRED   = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- SUCC   = { if , hasattr , sys , }

723 :	"RuntimeError"
		- NEIGH  = { except , RuntimeError , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PRED   = { for , tuple , count , r , self , _recursive_matches , nodes , }
		- SUCC   = { if , hasattr , sys , }

726 :	"for"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

726 :	"tuple"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

726 :	"count"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

726 :	"r"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

726 :	"self"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

726 :	"_iterative_matches"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

726 :	"nodes"
		- NEIGH  = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- PARENT = { except , RuntimeError , }
		- CHILD  = { if , self , name , yield , tuple , count , r , }
		- PRED   = { }
		- SUCC   = { }

727 :	"if"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { }
		- SUCC   = { yield , tuple , count , r , }

727 :	"self"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { }
		- SUCC   = { yield , tuple , count , r , }

727 :	"name"
		- NEIGH  = { if , self , name , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { r , self , name , nodes , count , }
		- PRED   = { }
		- SUCC   = { yield , tuple , count , r , }

728 :	"r"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

728 :	"self"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

728 :	"name"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

728 :	"nodes"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

728 :	"count"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { if , self , name , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

729 :	"yield"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

729 :	"tuple"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

729 :	"count"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

729 :	"r"
		- NEIGH  = { yield , tuple , count , r , }
		- PARENT = { for , tuple , count , r , self , _iterative_matches , nodes , }
		- CHILD  = { }
		- PRED   = { if , self , name , }
		- SUCC   = { }

731 :	"if"
		- NEIGH  = { if , hasattr , sys , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { sys , stderr , save_stderr , }
		- PRED   = { except , RuntimeError , }
		- SUCC   = { }

731 :	"hasattr"
		- NEIGH  = { if , hasattr , sys , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { sys , stderr , save_stderr , }
		- PRED   = { except , RuntimeError , }
		- SUCC   = { }

731 :	"sys"
		- NEIGH  = { if , hasattr , sys , }
		- PARENT = { if , self , name , == , }
		- CHILD  = { sys , stderr , save_stderr , }
		- PRED   = { except , RuntimeError , }
		- SUCC   = { }

732 :	"sys"
		- NEIGH  = { sys , stderr , save_stderr , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

732 :	"stderr"
		- NEIGH  = { sys , stderr , save_stderr , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

732 :	"save_stderr"
		- NEIGH  = { sys , stderr , save_stderr , }
		- PARENT = { if , hasattr , sys , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

734 :	"_iterative_matches"
		- NEIGH  = { _iterative_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { generate_matches , self , nodes , }
		- SUCC   = { _bare_name_matches , self , nodes , }

734 :	"self"
		- NEIGH  = { _iterative_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { generate_matches , self , nodes , }
		- SUCC   = { _bare_name_matches , self , nodes , }

734 :	"nodes"
		- NEIGH  = { _iterative_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { generate_matches , self , nodes , }
		- SUCC   = { _bare_name_matches , self , nodes , }

736 :	"nodelen"
		- NEIGH  = { nodelen , len , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , >= , self , min , }

736 :	"len"
		- NEIGH  = { nodelen , len , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , >= , self , min , }

736 :	"nodes"
		- NEIGH  = { nodelen , len , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , >= , self , min , }

737 :	"if"
		- NEIGH  = { if , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { nodelen , len , nodes , }
		- SUCC   = { results , list , }

737 :	">="
		- NEIGH  = { if , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { nodelen , len , nodes , }
		- SUCC   = { results , list , }

737 :	"self"
		- NEIGH  = { if , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { nodelen , len , nodes , }
		- SUCC   = { results , list , }

737 :	"min"
		- NEIGH  = { if , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { nodelen , len , nodes , }
		- SUCC   = { results , list , }

738 :	"yield"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , >= , self , min , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

738 :	"tuple"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , >= , self , min , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

738 :	"dict"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , >= , self , min , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

740 :	"results"
		- NEIGH  = { results , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , >= , self , min , }
		- SUCC   = { for , alt , self , content , }

740 :	"list"
		- NEIGH  = { results , list , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , >= , self , min , }
		- SUCC   = { for , alt , self , content , }

742 :	"for"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PRED   = { results , list , }
		- SUCC   = { while , results , }

742 :	"alt"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PRED   = { results , list , }
		- SUCC   = { while , results , }

742 :	"self"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PRED   = { results , list , }
		- SUCC   = { while , results , }

742 :	"content"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { }
		- CHILD  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PRED   = { results , list , }
		- SUCC   = { while , results , }

743 :	"for"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

743 :	"tuple"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

743 :	"c"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

743 :	"r"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

743 :	"generate_matches"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

743 :	"alt"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

743 :	"nodes"
		- NEIGH  = { for , tuple , c , r , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { yield , tuple , c , r , results , append , tuple , c , r , }
		- PRED   = { }
		- SUCC   = { }

744 :	"yield"
		- NEIGH  = { yield , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { results , append , tuple , c , r , }

744 :	"tuple"
		- NEIGH  = { yield , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { results , append , tuple , c , r , }

744 :	"c"
		- NEIGH  = { yield , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { results , append , tuple , c , r , }

744 :	"r"
		- NEIGH  = { yield , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { results , append , tuple , c , r , }

745 :	"results"
		- NEIGH  = { results , append , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c , r , }
		- SUCC   = { }

745 :	"append"
		- NEIGH  = { results , append , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c , r , }
		- SUCC   = { }

745 :	"tuple"
		- NEIGH  = { results , append , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c , r , }
		- SUCC   = { }

745 :	"c"
		- NEIGH  = { results , append , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c , r , }
		- SUCC   = { }

745 :	"r"
		- NEIGH  = { results , append , tuple , c , r , }
		- PARENT = { for , tuple , c , r , generate_matches , alt , nodes , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c , r , }
		- SUCC   = { }

748 :	"while"
		- NEIGH  = { while , results , }
		- PARENT = { }
		- CHILD  = { new_results , list , for , tuple , c0 , r0 , results , results , new_results , }
		- PRED   = { for , alt , self , content , }
		- SUCC   = { }

748 :	"results"
		- NEIGH  = { while , results , }
		- PARENT = { }
		- CHILD  = { new_results , list , for , tuple , c0 , r0 , results , results , new_results , }
		- PRED   = { for , alt , self , content , }
		- SUCC   = { }

749 :	"new_results"
		- NEIGH  = { new_results , list , }
		- PARENT = { while , results , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , c0 , r0 , results , }

749 :	"list"
		- NEIGH  = { new_results , list , }
		- PARENT = { while , results , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , c0 , r0 , results , }

750 :	"for"
		- NEIGH  = { for , tuple , c0 , r0 , results , }
		- PARENT = { while , results , }
		- CHILD  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PRED   = { new_results , list , }
		- SUCC   = { results , new_results , }

750 :	"tuple"
		- NEIGH  = { for , tuple , c0 , r0 , results , }
		- PARENT = { while , results , }
		- CHILD  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PRED   = { new_results , list , }
		- SUCC   = { results , new_results , }

750 :	"c0"
		- NEIGH  = { for , tuple , c0 , r0 , results , }
		- PARENT = { while , results , }
		- CHILD  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PRED   = { new_results , list , }
		- SUCC   = { results , new_results , }

750 :	"r0"
		- NEIGH  = { for , tuple , c0 , r0 , results , }
		- PARENT = { while , results , }
		- CHILD  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PRED   = { new_results , list , }
		- SUCC   = { results , new_results , }

750 :	"results"
		- NEIGH  = { for , tuple , c0 , r0 , results , }
		- PARENT = { while , results , }
		- CHILD  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PRED   = { new_results , list , }
		- SUCC   = { results , new_results , }

752 :	"if"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"c0"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"<"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"nodelen"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"or"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"c0"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"<="
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"self"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

752 :	"max"
		- NEIGH  = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- PARENT = { for , tuple , c0 , r0 , results , }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { }
		- SUCC   = { }

753 :	"for"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- CHILD  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PRED   = { }
		- SUCC   = { }

753 :	"alt"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- CHILD  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PRED   = { }
		- SUCC   = { }

753 :	"self"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- CHILD  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PRED   = { }
		- SUCC   = { }

753 :	"content"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , c0 , < , nodelen , or , c0 , <= , self , max , }
		- CHILD  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PRED   = { }
		- SUCC   = { }

754 :	"for"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"tuple"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"c1"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"r1"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"generate_matches"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"alt"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"nodes"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

754 :	"c0"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { if , c1 , > , }
		- PRED   = { }
		- SUCC   = { }

755 :	"if"
		- NEIGH  = { if , c1 , > , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , new_results , append , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

755 :	"c1"
		- NEIGH  = { if , c1 , > , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , new_results , append , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

755 :	">"
		- NEIGH  = { if , c1 , > , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , alt , nodes , c0 , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , new_results , append , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

756 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , update , r0 , }

756 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , update , r0 , }

757 :	"r"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

757 :	"update"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

757 :	"r0"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

758 :	"r"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

758 :	"update"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

758 :	"r1"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

759 :	"yield"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { new_results , append , tuple , c0 , + , c1 , r , }

759 :	"tuple"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { new_results , append , tuple , c0 , + , c1 , r , }

759 :	"c0"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { new_results , append , tuple , c0 , + , c1 , r , }

759 :	"+"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { new_results , append , tuple , c0 , + , c1 , r , }

759 :	"c1"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { new_results , append , tuple , c0 , + , c1 , r , }

759 :	"r"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { new_results , append , tuple , c0 , + , c1 , r , }

760 :	"new_results"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

760 :	"append"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

760 :	"tuple"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

760 :	"c0"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

760 :	"+"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

760 :	"c1"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

760 :	"r"
		- NEIGH  = { new_results , append , tuple , c0 , + , c1 , r , }
		- PARENT = { if , c1 , > , }
		- CHILD  = { }
		- PRED   = { yield , tuple , c0 , + , c1 , r , }
		- SUCC   = { }

761 :	"results"
		- NEIGH  = { results , new_results , }
		- PARENT = { while , results , }
		- CHILD  = { }
		- PRED   = { for , tuple , c0 , r0 , results , }
		- SUCC   = { }

761 :	"new_results"
		- NEIGH  = { results , new_results , }
		- PARENT = { while , results , }
		- CHILD  = { }
		- PRED   = { for , tuple , c0 , r0 , results , }
		- SUCC   = { }

763 :	"_bare_name_matches"
		- NEIGH  = { _bare_name_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _iterative_matches , self , nodes , }
		- SUCC   = { _recursive_matches , self , nodes , count , }

763 :	"self"
		- NEIGH  = { _bare_name_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _iterative_matches , self , nodes , }
		- SUCC   = { _recursive_matches , self , nodes , count , }

763 :	"nodes"
		- NEIGH  = { _bare_name_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _iterative_matches , self , nodes , }
		- SUCC   = { _recursive_matches , self , nodes , count , }

765 :	"count"
		- NEIGH  = { count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , dict , }

766 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { count , }
		- SUCC   = { done , }

766 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { count , }
		- SUCC   = { done , }

767 :	"done"
		- NEIGH  = { done , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { max , len , nodes , }

768 :	"max"
		- NEIGH  = { max , len , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , }
		- SUCC   = { while , done , or , count , < , max , }

768 :	"len"
		- NEIGH  = { max , len , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , }
		- SUCC   = { while , done , or , count , < , max , }

768 :	"nodes"
		- NEIGH  = { max , len , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { done , }
		- SUCC   = { while , done , or , count , < , max , }

769 :	"while"
		- NEIGH  = { while , done , or , count , < , max , }
		- PARENT = { }
		- CHILD  = { done , for , leaf , self , content , }
		- PRED   = { max , len , nodes , }
		- SUCC   = { r , self , name , nodes , count , }

769 :	"done"
		- NEIGH  = { while , done , or , count , < , max , }
		- PARENT = { }
		- CHILD  = { done , for , leaf , self , content , }
		- PRED   = { max , len , nodes , }
		- SUCC   = { r , self , name , nodes , count , }

769 :	"or"
		- NEIGH  = { while , done , or , count , < , max , }
		- PARENT = { }
		- CHILD  = { done , for , leaf , self , content , }
		- PRED   = { max , len , nodes , }
		- SUCC   = { r , self , name , nodes , count , }

769 :	"count"
		- NEIGH  = { while , done , or , count , < , max , }
		- PARENT = { }
		- CHILD  = { done , for , leaf , self , content , }
		- PRED   = { max , len , nodes , }
		- SUCC   = { r , self , name , nodes , count , }

769 :	"<"
		- NEIGH  = { while , done , or , count , < , max , }
		- PARENT = { }
		- CHILD  = { done , for , leaf , self , content , }
		- PRED   = { max , len , nodes , }
		- SUCC   = { r , self , name , nodes , count , }

769 :	"max"
		- NEIGH  = { while , done , or , count , < , max , }
		- PARENT = { }
		- CHILD  = { done , for , leaf , self , content , }
		- PRED   = { max , len , nodes , }
		- SUCC   = { r , self , name , nodes , count , }

770 :	"done"
		- NEIGH  = { done , }
		- PARENT = { while , done , or , count , < , max , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , leaf , self , content , }

771 :	"for"
		- NEIGH  = { for , leaf , self , content , }
		- PARENT = { while , done , or , count , < , max , }
		- CHILD  = { if , leaf , match , nodes , count , r , }
		- PRED   = { done , }
		- SUCC   = { }

771 :	"leaf"
		- NEIGH  = { for , leaf , self , content , }
		- PARENT = { while , done , or , count , < , max , }
		- CHILD  = { if , leaf , match , nodes , count , r , }
		- PRED   = { done , }
		- SUCC   = { }

771 :	"self"
		- NEIGH  = { for , leaf , self , content , }
		- PARENT = { while , done , or , count , < , max , }
		- CHILD  = { if , leaf , match , nodes , count , r , }
		- PRED   = { done , }
		- SUCC   = { }

771 :	"content"
		- NEIGH  = { for , leaf , self , content , }
		- PARENT = { while , done , or , count , < , max , }
		- CHILD  = { if , leaf , match , nodes , count , r , }
		- PRED   = { done , }
		- SUCC   = { }

772 :	"if"
		- NEIGH  = { if , leaf , match , nodes , count , r , }
		- PARENT = { for , leaf , self , content , }
		- CHILD  = { count , += , done , break , }
		- PRED   = { }
		- SUCC   = { }

772 :	"leaf"
		- NEIGH  = { if , leaf , match , nodes , count , r , }
		- PARENT = { for , leaf , self , content , }
		- CHILD  = { count , += , done , break , }
		- PRED   = { }
		- SUCC   = { }

772 :	"match"
		- NEIGH  = { if , leaf , match , nodes , count , r , }
		- PARENT = { for , leaf , self , content , }
		- CHILD  = { count , += , done , break , }
		- PRED   = { }
		- SUCC   = { }

772 :	"nodes"
		- NEIGH  = { if , leaf , match , nodes , count , r , }
		- PARENT = { for , leaf , self , content , }
		- CHILD  = { count , += , done , break , }
		- PRED   = { }
		- SUCC   = { }

772 :	"count"
		- NEIGH  = { if , leaf , match , nodes , count , r , }
		- PARENT = { for , leaf , self , content , }
		- CHILD  = { count , += , done , break , }
		- PRED   = { }
		- SUCC   = { }

772 :	"r"
		- NEIGH  = { if , leaf , match , nodes , count , r , }
		- PARENT = { for , leaf , self , content , }
		- CHILD  = { count , += , done , break , }
		- PRED   = { }
		- SUCC   = { }

773 :	"count"
		- NEIGH  = { count , += , }
		- PARENT = { if , leaf , match , nodes , count , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { done , }

773 :	"+="
		- NEIGH  = { count , += , }
		- PARENT = { if , leaf , match , nodes , count , r , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { done , }

774 :	"done"
		- NEIGH  = { done , }
		- PARENT = { if , leaf , match , nodes , count , r , }
		- CHILD  = { }
		- PRED   = { count , += , }
		- SUCC   = { break , }

775 :	"break"
		- NEIGH  = { break , }
		- PARENT = { if , leaf , match , nodes , count , r , }
		- CHILD  = { }
		- PRED   = { done , }
		- SUCC   = { }

776 :	"r"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , done , or , count , < , max , }
		- SUCC   = { return , tuple , count , r , }

776 :	"self"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , done , or , count , < , max , }
		- SUCC   = { return , tuple , count , r , }

776 :	"name"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , done , or , count , < , max , }
		- SUCC   = { return , tuple , count , r , }

776 :	"nodes"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , done , or , count , < , max , }
		- SUCC   = { return , tuple , count , r , }

776 :	"count"
		- NEIGH  = { r , self , name , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { while , done , or , count , < , max , }
		- SUCC   = { return , tuple , count , r , }

777 :	"return"
		- NEIGH  = { return , tuple , count , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , self , name , nodes , count , }
		- SUCC   = { }

777 :	"tuple"
		- NEIGH  = { return , tuple , count , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , self , name , nodes , count , }
		- SUCC   = { }

777 :	"count"
		- NEIGH  = { return , tuple , count , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , self , name , nodes , count , }
		- SUCC   = { }

777 :	"r"
		- NEIGH  = { return , tuple , count , r , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { r , self , name , nodes , count , }
		- SUCC   = { }

779 :	"_recursive_matches"
		- NEIGH  = { _recursive_matches , self , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _bare_name_matches , self , nodes , }
		- SUCC   = { }

779 :	"self"
		- NEIGH  = { _recursive_matches , self , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _bare_name_matches , self , nodes , }
		- SUCC   = { }

779 :	"nodes"
		- NEIGH  = { _recursive_matches , self , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _bare_name_matches , self , nodes , }
		- SUCC   = { }

779 :	"count"
		- NEIGH  = { _recursive_matches , self , nodes , count , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { _bare_name_matches , self , nodes , }
		- SUCC   = { }

781 :	"assert"
		- NEIGH  = { assert , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , count , >= , self , min , }

781 :	"self"
		- NEIGH  = { assert , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , count , >= , self , min , }

781 :	"content"
		- NEIGH  = { assert , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , count , >= , self , min , }

781 :	"is"
		- NEIGH  = { assert , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , count , >= , self , min , }

781 :	"not"
		- NEIGH  = { assert , self , content , is , not , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { if , count , >= , self , min , }

782 :	"if"
		- NEIGH  = { if , count , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { assert , self , content , is , not , }
		- SUCC   = { if , count , < , self , max , }

782 :	"count"
		- NEIGH  = { if , count , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { assert , self , content , is , not , }
		- SUCC   = { if , count , < , self , max , }

782 :	">="
		- NEIGH  = { if , count , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { assert , self , content , is , not , }
		- SUCC   = { if , count , < , self , max , }

782 :	"self"
		- NEIGH  = { if , count , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { assert , self , content , is , not , }
		- SUCC   = { if , count , < , self , max , }

782 :	"min"
		- NEIGH  = { if , count , >= , self , min , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { assert , self , content , is , not , }
		- SUCC   = { if , count , < , self , max , }

783 :	"yield"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , count , >= , self , min , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

783 :	"tuple"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , count , >= , self , min , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

783 :	"dict"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , count , >= , self , min , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

784 :	"if"
		- NEIGH  = { if , count , < , self , max , }
		- PARENT = { }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { if , count , >= , self , min , }
		- SUCC   = { }

784 :	"count"
		- NEIGH  = { if , count , < , self , max , }
		- PARENT = { }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { if , count , >= , self , min , }
		- SUCC   = { }

784 :	"<"
		- NEIGH  = { if , count , < , self , max , }
		- PARENT = { }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { if , count , >= , self , min , }
		- SUCC   = { }

784 :	"self"
		- NEIGH  = { if , count , < , self , max , }
		- PARENT = { }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { if , count , >= , self , min , }
		- SUCC   = { }

784 :	"max"
		- NEIGH  = { if , count , < , self , max , }
		- PARENT = { }
		- CHILD  = { for , alt , self , content , }
		- PRED   = { if , count , >= , self , min , }
		- SUCC   = { }

785 :	"for"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , count , < , self , max , }
		- CHILD  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PRED   = { }
		- SUCC   = { }

785 :	"alt"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , count , < , self , max , }
		- CHILD  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PRED   = { }
		- SUCC   = { }

785 :	"self"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , count , < , self , max , }
		- CHILD  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PRED   = { }
		- SUCC   = { }

785 :	"content"
		- NEIGH  = { for , alt , self , content , }
		- PARENT = { if , count , < , self , max , }
		- CHILD  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PRED   = { }
		- SUCC   = { }

786 :	"for"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

786 :	"tuple"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

786 :	"c0"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

786 :	"r0"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

786 :	"generate_matches"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

786 :	"alt"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

786 :	"nodes"
		- NEIGH  = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- PARENT = { for , alt , self , content , }
		- CHILD  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PRED   = { }
		- SUCC   = { }

787 :	"for"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"tuple"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"c1"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"r1"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"self"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"_recursive_matches"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"nodes"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"c0"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"count"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

787 :	"+"
		- NEIGH  = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- PARENT = { for , tuple , c0 , r0 , generate_matches , alt , nodes , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { }
		- SUCC   = { }

788 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , update , r0 , }

788 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , update , r0 , }

789 :	"r"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

789 :	"update"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

789 :	"r0"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

790 :	"r"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

790 :	"update"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

790 :	"r1"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

791 :	"yield"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

791 :	"tuple"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

791 :	"c0"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

791 :	"+"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

791 :	"c1"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

791 :	"r"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , self , _recursive_matches , nodes , c0 , count , + , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

794 :	"NegatedPattern"
		- NEIGH  = { NegatedPattern , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { WildcardPattern , }
		- SUCC   = { generate_matches , patterns , nodes , }

796 :	"__init__"
		- NEIGH  = { __init__ , self , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , }

796 :	"self"
		- NEIGH  = { __init__ , self , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , }

796 :	"content"
		- NEIGH  = { __init__ , self , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { match , self , node , }

805 :	"if"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , BasePattern , repr , content , }
		- PRED   = { }
		- SUCC   = { self , content , content , }

805 :	"content"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , BasePattern , repr , content , }
		- PRED   = { }
		- SUCC   = { self , content , content , }

805 :	"is"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , BasePattern , repr , content , }
		- PRED   = { }
		- SUCC   = { self , content , content , }

805 :	"not"
		- NEIGH  = { if , content , is , not , }
		- PARENT = { }
		- CHILD  = { assert , isinstance , content , BasePattern , repr , content , }
		- PRED   = { }
		- SUCC   = { self , content , content , }

806 :	"assert"
		- NEIGH  = { assert , isinstance , content , BasePattern , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

806 :	"isinstance"
		- NEIGH  = { assert , isinstance , content , BasePattern , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

806 :	"content"
		- NEIGH  = { assert , isinstance , content , BasePattern , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

806 :	"BasePattern"
		- NEIGH  = { assert , isinstance , content , BasePattern , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

806 :	"repr"
		- NEIGH  = { assert , isinstance , content , BasePattern , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

806 :	"content"
		- NEIGH  = { assert , isinstance , content , BasePattern , repr , content , }
		- PARENT = { if , content , is , not , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

807 :	"self"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { }

807 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { }

807 :	"content"
		- NEIGH  = { self , content , content , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { if , content , is , not , }
		- SUCC   = { }

809 :	"match"
		- NEIGH  = { match , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , content , }
		- SUCC   = { match_seq , self , nodes , }

809 :	"self"
		- NEIGH  = { match , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , content , }
		- SUCC   = { match_seq , self , nodes , }

809 :	"node"
		- NEIGH  = { match , self , node , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { __init__ , self , content , }
		- SUCC   = { match_seq , self , nodes , }

811 :	"return"
		- NEIGH  = { return , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

813 :	"match_seq"
		- NEIGH  = { match_seq , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , }
		- SUCC   = { generate_matches , self , nodes , }

813 :	"self"
		- NEIGH  = { match_seq , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , }
		- SUCC   = { generate_matches , self , nodes , }

813 :	"nodes"
		- NEIGH  = { match_seq , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match , self , node , }
		- SUCC   = { generate_matches , self , nodes , }

815 :	"return"
		- NEIGH  = { return , len , nodes , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

815 :	"len"
		- NEIGH  = { return , len , nodes , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

815 :	"nodes"
		- NEIGH  = { return , len , nodes , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

815 :	"=="
		- NEIGH  = { return , len , nodes , == , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

817 :	"generate_matches"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , }
		- SUCC   = { }

817 :	"self"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , }
		- SUCC   = { }

817 :	"nodes"
		- NEIGH  = { generate_matches , self , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { match_seq , self , nodes , }
		- SUCC   = { }

818 :	"if"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { if , len , nodes , == , for , tuple , c , r , self , content , generate_matches , nodes , yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { }

818 :	"self"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { if , len , nodes , == , for , tuple , c , r , self , content , generate_matches , nodes , yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { }

818 :	"content"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { if , len , nodes , == , for , tuple , c , r , self , content , generate_matches , nodes , yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { }

818 :	"is"
		- NEIGH  = { if , self , content , is , }
		- PARENT = { }
		- CHILD  = { if , len , nodes , == , for , tuple , c , r , self , content , generate_matches , nodes , yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { }

820 :	"if"
		- NEIGH  = { if , len , nodes , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { for , tuple , c , r , self , content , generate_matches , nodes , }

820 :	"len"
		- NEIGH  = { if , len , nodes , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { for , tuple , c , r , self , content , generate_matches , nodes , }

820 :	"nodes"
		- NEIGH  = { if , len , nodes , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { for , tuple , c , r , self , content , generate_matches , nodes , }

820 :	"=="
		- NEIGH  = { if , len , nodes , == , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { yield , tuple , dict , }
		- PRED   = { }
		- SUCC   = { for , tuple , c , r , self , content , generate_matches , nodes , }

821 :	"yield"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , len , nodes , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

821 :	"tuple"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , len , nodes , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

821 :	"dict"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , len , nodes , == , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

824 :	"for"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"tuple"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"c"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"r"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"self"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"content"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"generate_matches"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

824 :	"nodes"
		- NEIGH  = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { return , }
		- PRED   = { if , len , nodes , == , }
		- SUCC   = { yield , tuple , dict , }

825 :	"return"
		- NEIGH  = { return , }
		- PARENT = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { }

826 :	"yield"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- SUCC   = { }

826 :	"tuple"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- SUCC   = { }

826 :	"dict"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , self , content , is , }
		- CHILD  = { }
		- PRED   = { for , tuple , c , r , self , content , generate_matches , nodes , }
		- SUCC   = { }

829 :	"generate_matches"
		- NEIGH  = { generate_matches , patterns , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NegatedPattern , }
		- SUCC   = { }

829 :	"patterns"
		- NEIGH  = { generate_matches , patterns , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NegatedPattern , }
		- SUCC   = { }

829 :	"nodes"
		- NEIGH  = { generate_matches , patterns , nodes , }
		- PARENT = { }
		- CHILD  = { }
		- PRED   = { NegatedPattern , }
		- SUCC   = { }

842 :	"if"
		- NEIGH  = { if , patterns , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , tuple , p , rest , tuple , patterns , patterns , for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PRED   = { }
		- SUCC   = { }

842 :	"patterns"
		- NEIGH  = { if , patterns , }
		- PARENT = { }
		- CHILD  = { yield , tuple , dict , tuple , p , rest , tuple , patterns , patterns , for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PRED   = { }
		- SUCC   = { }

843 :	"yield"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tuple , p , rest , tuple , patterns , patterns , }

843 :	"tuple"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tuple , p , rest , tuple , patterns , patterns , }

843 :	"dict"
		- NEIGH  = { yield , tuple , dict , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { tuple , p , rest , tuple , patterns , patterns , }

845 :	"tuple"
		- NEIGH  = { tuple , p , rest , tuple , patterns , patterns , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { yield , tuple , dict , }
		- SUCC   = { for , tuple , c0 , r0 , p , generate_matches , nodes , }

845 :	"p"
		- NEIGH  = { tuple , p , rest , tuple , patterns , patterns , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { yield , tuple , dict , }
		- SUCC   = { for , tuple , c0 , r0 , p , generate_matches , nodes , }

845 :	"rest"
		- NEIGH  = { tuple , p , rest , tuple , patterns , patterns , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { yield , tuple , dict , }
		- SUCC   = { for , tuple , c0 , r0 , p , generate_matches , nodes , }

845 :	"tuple"
		- NEIGH  = { tuple , p , rest , tuple , patterns , patterns , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { yield , tuple , dict , }
		- SUCC   = { for , tuple , c0 , r0 , p , generate_matches , nodes , }

845 :	"patterns"
		- NEIGH  = { tuple , p , rest , tuple , patterns , patterns , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { yield , tuple , dict , }
		- SUCC   = { for , tuple , c0 , r0 , p , generate_matches , nodes , }

845 :	"patterns"
		- NEIGH  = { tuple , p , rest , tuple , patterns , patterns , }
		- PARENT = { if , patterns , }
		- CHILD  = { }
		- PRED   = { yield , tuple , dict , }
		- SUCC   = { for , tuple , c0 , r0 , p , generate_matches , nodes , }

846 :	"for"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

846 :	"tuple"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

846 :	"c0"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

846 :	"r0"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

846 :	"p"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

846 :	"generate_matches"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

846 :	"nodes"
		- NEIGH  = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- PARENT = { if , patterns , }
		- CHILD  = { if , rest , }
		- PRED   = { tuple , p , rest , tuple , patterns , patterns , }
		- SUCC   = { }

847 :	"if"
		- NEIGH  = { if , rest , }
		- PARENT = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- CHILD  = { yield , tuple , c0 , r0 , for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PRED   = { }
		- SUCC   = { }

847 :	"rest"
		- NEIGH  = { if , rest , }
		- PARENT = { for , tuple , c0 , r0 , p , generate_matches , nodes , }
		- CHILD  = { yield , tuple , c0 , r0 , for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PRED   = { }
		- SUCC   = { }

848 :	"yield"
		- NEIGH  = { yield , tuple , c0 , r0 , }
		- PARENT = { if , rest , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }

848 :	"tuple"
		- NEIGH  = { yield , tuple , c0 , r0 , }
		- PARENT = { if , rest , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }

848 :	"c0"
		- NEIGH  = { yield , tuple , c0 , r0 , }
		- PARENT = { if , rest , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }

848 :	"r0"
		- NEIGH  = { yield , tuple , c0 , r0 , }
		- PARENT = { if , rest , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }

850 :	"for"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"tuple"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"c1"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"r1"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"generate_matches"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"rest"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"nodes"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

850 :	"c0"
		- NEIGH  = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- PARENT = { if , rest , }
		- CHILD  = { r , dict , r , update , r0 , r , update , r1 , yield , tuple , c0 , + , c1 , r , }
		- PRED   = { yield , tuple , c0 , r0 , }
		- SUCC   = { }

851 :	"r"
		- NEIGH  = { r , dict , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , update , r0 , }

851 :	"dict"
		- NEIGH  = { r , dict , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { }
		- SUCC   = { r , update , r0 , }

852 :	"r"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

852 :	"update"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

852 :	"r0"
		- NEIGH  = { r , update , r0 , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , dict , }
		- SUCC   = { r , update , r1 , }

853 :	"r"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

853 :	"update"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

853 :	"r1"
		- NEIGH  = { r , update , r1 , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r0 , }
		- SUCC   = { yield , tuple , c0 , + , c1 , r , }

854 :	"yield"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

854 :	"tuple"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

854 :	"c0"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

854 :	"+"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

854 :	"c1"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

854 :	"r"
		- NEIGH  = { yield , tuple , c0 , + , c1 , r , }
		- PARENT = { for , tuple , c1 , r1 , generate_matches , rest , nodes , c0 , }
		- CHILD  = { }
		- PRED   = { r , update , r1 , }
		- SUCC   = { }

