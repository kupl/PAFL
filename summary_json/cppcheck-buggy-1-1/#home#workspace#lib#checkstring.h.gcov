        -:    0:Source:/home/workspace/lib/checkstring.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkstring.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkstring.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkstringH
        -:   22:#define checkstringH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:
        -:   28:#include <string>
        -:   29:
        -:   30:class ErrorLogger;
        -:   31:class Settings;
        -:   32:class Token;
        -:   33:class Tokenizer;
        -:   34:
        -:   35:/// @addtogroup Checks
        -:   36:/// @{
        -:   37:
        -:   38:
        -:   39:/** @brief Detect misusage of C-style strings and related standard functions */
        -:   40:
function _ZN11CheckStringD0Ev called 0 returned 0% blocks executed 0%
function _ZN11CheckStringD2Ev called 0 returned 0% blocks executed 0%
    #####:   41:class CPPCHECKLIB CheckString : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   42:public:
        -:   43:    /** @brief This constructor is used when registering the CheckClass */
function _ZN11CheckStringC2Ev called 1 returned 100% blocks executed 71%
        1:   44:    CheckString() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   45:    }
        -:   46:
        -:   47:    /** @brief This constructor is used when running checks. */
function _ZN11CheckStringC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   48:    CheckString(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   49:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   50:    }
        -:   51:
        -:   52:    /** @brief Run checks against the normal token list */
function _ZN11CheckString9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   53:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   54:        CheckString checkString(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   55:
        -:   56:        // Checks
    #####:   57:        checkString.strPlusChar();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:        checkString.checkSuspiciousStringCompare();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:        checkString.stringLiteralWrite();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:        checkString.overlappingStrcmp();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:        checkString.checkIncorrectStringCompare();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:        checkString.sprintfOverlappingData();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:        checkString.checkAlwaysTrueOrFalseStringCompare();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:    }
        -:   65:
        -:   66:    /** @brief undefined behaviour, writing string literal */
        -:   67:    void stringLiteralWrite();
        -:   68:
        -:   69:    /** @brief str plus char (unusual pointer arithmetic) */
        -:   70:    void strPlusChar();
        -:   71:
        -:   72:    /** @brief %Check for using bad usage of strncmp and substr */
        -:   73:    void checkIncorrectStringCompare();
        -:   74:
        -:   75:    /** @brief %Check for comparison of a string literal with a char* variable */
        -:   76:    void checkSuspiciousStringCompare();
        -:   77:
        -:   78:    /** @brief %Check for suspicious code that compares string literals for equality */
        -:   79:    void checkAlwaysTrueOrFalseStringCompare();
        -:   80:
        -:   81:    /** @brief %Check for overlapping strcmp() */
        -:   82:    void overlappingStrcmp();
        -:   83:
        -:   84:    /** @brief %Check for overlapping source and destination passed to sprintf() */
        -:   85:    void sprintfOverlappingData();
        -:   86:
        -:   87:private:
        -:   88:    void stringLiteralWriteError(const Token *tok, const Token *strValue);
        -:   89:    void sprintfOverlappingDataError(const Token *funcTok, const Token *tok, const std::string &varname);
        -:   90:    void strPlusCharError(const Token *tok);
        -:   91:    void incorrectStringCompareError(const Token *tok, const std::string& func, const std::string &string);
        -:   92:    void incorrectStringBooleanError(const Token *tok, const std::string& string);
        -:   93:    void alwaysTrueFalseStringCompareError(const Token *tok, const std::string& str1, const std::string& str2);
        -:   94:    void alwaysTrueStringVariableCompareError(const Token *tok, const std::string& str1, const std::string& str2);
        -:   95:    void suspiciousStringCompareError(const Token* tok, const std::string& var, bool isLong);
        -:   96:    void suspiciousStringCompareError_char(const Token* tok, const std::string& var);
        -:   97:    void overlappingStrcmpError(const Token* eq0, const Token *ne0);
        -:   98:
function _ZNK11CheckString16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:   99:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:  100:        CheckString c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  101:
    #####:  102:        c.stringLiteralWriteError(nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  103:        c.sprintfOverlappingDataError(nullptr, nullptr, "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  104:        c.strPlusCharError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  105:        c.incorrectStringCompareError(nullptr, "substr", "\"Hello World\"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  106:        c.suspiciousStringCompareError(nullptr, "foo", false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  107:        c.suspiciousStringCompareError_char(nullptr, "foo");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  108:        c.incorrectStringBooleanError(nullptr, "\"Hello World\"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  109:        c.incorrectStringBooleanError(nullptr, "\'x\'");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  110:        c.alwaysTrueFalseStringCompareError(nullptr, "str1", "str2");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  111:        c.alwaysTrueStringVariableCompareError(nullptr, "varname1", "varname2");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  112:        c.overlappingStrcmpError(nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:    }
        -:  114:
function _ZN11CheckString6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  115:    static std::string myName() {
    #####:  116:        return "String";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  117:    }
        -:  118:
function _ZNK11CheckString9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  119:    std::string classInfo() const OVERRIDE {
        -:  120:        return "Detect misusage of C-style strings:\n"
        -:  121:               "- overlapping buffers passed to sprintf as source and destination\n"
        -:  122:               "- incorrect length arguments for 'substr' and 'strncmp'\n"
        -:  123:               "- suspicious condition (runtime comparison of string literals)\n"
        -:  124:               "- suspicious condition (string/char literals as boolean)\n"
        -:  125:               "- suspicious comparison of a string literal with a char\\* variable\n"
        -:  126:               "- suspicious comparison of '\\0' with a char\\* variable\n"
    #####:  127:               "- overlapping strcmp() expression\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  128:    }
        -:  129:};
        -:  130:/// @}
        -:  131://---------------------------------------------------------------------------
        -:  132:#endif // checkstringH
