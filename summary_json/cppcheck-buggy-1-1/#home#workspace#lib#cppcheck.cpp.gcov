        -:    0:Source:/home/workspace/lib/cppcheck.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/cppcheck.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/cppcheck.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:#include "cppcheck.h"
        -:   19:
        -:   20:#include "check.h"
        -:   21:#include "checkunusedfunctions.h"
        -:   22:#include "ctu.h"
        -:   23:#include "library.h"
        -:   24:#include "mathlib.h"
        -:   25:#include "path.h"
        -:   26:#include "platform.h"
        -:   27:#include "preprocessor.h" // Preprocessor
        -:   28:#include "suppressions.h"
        -:   29:#include "timer.h"
        -:   30:#include "token.h"
        -:   31:#include "tokenize.h" // Tokenizer
        -:   32:#include "tokenlist.h"
        -:   33:#include "version.h"
        -:   34:
        -:   35:#include "exprengine.h"
        -:   36:
        -:   37:#define PICOJSON_USE_INT64
        -:   38:#include <picojson.h>
        -:   39:#include <simplecpp.h>
        -:   40:#include <tinyxml2.h>
        -:   41:#include <algorithm>
        -:   42:#include <cstring>
        -:   43:#include <new>
        -:   44:#include <set>
        -:   45:#include <stdexcept>
        -:   46:#include <vector>
        -:   47:#include <memory>
        -:   48:#include <iostream> // <- TEMPORARY
        -:   49:
        -:   50:#ifdef HAVE_RULES
        -:   51:#define PCRE_STATIC
        -:   52:#include <pcre.h>
        -:   53:#endif
        -:   54:
        -:   55:static const char Version[] = CPPCHECK_VERSION_STRING;
        -:   56:static const char ExtraVersion[] = "";
        -:   57:
        1:   58:static TimerResults S_timerResults;
call    0 returned 100%
call    1 returned 100%
        -:   59:
        -:   60:// CWE ids used
        1:   61:static const CWE CWE398(398U);  // Indicator of Poor Code Quality
call    0 returned 100%
        -:   62:
        -:   63:namespace {
function _ZN12_GLOBAL__N_19AddonInfoD2Ev called 0 returned 0% blocks executed 0%
function _ZN12_GLOBAL__N_19AddonInfoC2Ev called 0 returned 0% blocks executed 0%
    #####:   64:    struct AddonInfo {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   65:        std::string name;
        -:   66:        std::string scriptFile;
        -:   67:        std::string args;
        -:   68:
function _ZN12_GLOBAL__N_19AddonInfo11getFullPathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####:   69:        static std::string getFullPath(const std::string &fileName, const std::string &exename) {
    #####:   70:            if (Path::fileExists(fileName))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   71:                return fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   72:
    #####:   73:            const std::string exepath = Path::getPathFromFilename(exename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   74:            if (Path::fileExists(exepath + fileName))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:   75:                return exepath + fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:            if (Path::fileExists(exepath + "addons/" + fileName))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:   77:                return exepath + "addons/" + fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:   78:
        -:   79:#ifdef FILESDIR
    #####:   80:            if (Path::fileExists(FILESDIR + ("/" + fileName)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:   81:                return FILESDIR + ("/" + fileName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:   82:            if (Path::fileExists(FILESDIR + ("/addons/" + fileName)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:   83:                return FILESDIR + ("/addons/" + fileName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:   84:#endif
    #####:   85:            return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   86:        }
        -:   87:
function _ZN12_GLOBAL__N_19AddonInfo12getAddonInfoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####:   88:        std::string getAddonInfo(const std::string &fileName, const std::string &exename) {
    #####:   89:            if (fileName.find(".") == std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   90:                return getAddonInfo(fileName + ".py", exename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:   91:
    #####:   92:            if (endsWith(fileName, ".py", 3)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   93:                scriptFile = getFullPath(fileName, exename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   94:                if (scriptFile.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:                    return "Did not find addon " + fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   96:
    #####:   97:                std::string::size_type pos1 = scriptFile.rfind("/");
call    0 never executed
    #####:   98:                if (pos1 == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:   99:                    pos1 = 0;
        -:  100:                else
    #####:  101:                    pos1++;
    #####:  102:                std::string::size_type pos2 = scriptFile.rfind(".");
call    0 never executed
    #####:  103:                if (pos2 < pos1)
branch  0 never executed
branch  1 never executed
    #####:  104:                    pos2 = std::string::npos;
    #####:  105:                name = scriptFile.substr(pos1, pos2 - pos1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  106:
    #####:  107:                return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  108:            }
        -:  109:
    #####:  110:            if (!endsWith(fileName, ".json", 5))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  111:                return "Failed to open addon " + fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:
    #####:  113:            std::ifstream fin(fileName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  114:            if (!fin.is_open())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  115:                return "Failed to open " + fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:            picojson::value json;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  117:            fin >> json;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:            if (!json.is<picojson::object>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  119:                return "Loading " + fileName + " failed. Bad json.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  120:            picojson::object obj = json.get<picojson::object>();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  121:            if (obj.count("args")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  122:                if (!obj["args"].is<picojson::array>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  123:                    return "Loading " + fileName + " failed. args must be array.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  124:                for (const picojson::value &v : obj["args"].get<picojson::array>())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####:  125:                    args += " " + v.get<std::string>();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -:  126:            }
        -:  127:
    #####:  128:            return getAddonInfo(obj["script"].get<std::string>(), exename);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  129:        }
        -:  130:    };
        -:  131:}
        -:  132:
function _ZL12executeAddonRKN12_GLOBAL__N_19AddonInfoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  133:static std::string executeAddon(const AddonInfo &addonInfo, const std::string &dumpFile)
        -:  134:{
    #####:  135:    const std::string cmd = "python \"" + addonInfo.scriptFile + "\" --cli" + addonInfo.args + " \"" + dumpFile + "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  136:
        -:  137:#ifdef _WIN32
        -:  138:    std::unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd.c_str(), "r"), _pclose);
        -:  139:#else
    #####:  140:    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  141:#endif
    #####:  142:    if (!pipe)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  144:    char buffer[1024];
    #####:  145:    std::string result;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  146:    while (fgets(buffer, sizeof(buffer), pipe.get()) != nullptr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  147:        result += buffer;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  148:    }
    #####:  149:    return result;
call    0 never executed
        -:  150:}
        -:  151:
function _ZL5splitRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ called 0 returned 0% blocks executed 0%
    #####:  152:static std::vector<std::string> split(const std::string &str, const std::string &sep)
        -:  153:{
    #####:  154:    std::vector<std::string> ret;
call    0 never executed
    #####:  155:    for (std::string::size_type defineStartPos = 0U; defineStartPos < str.size();) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  156:        const std::string::size_type defineEndPos = str.find(sep, defineStartPos);
call    0 never executed
    #####:  157:        ret.push_back((defineEndPos == std::string::npos) ? str.substr(defineStartPos) : str.substr(defineStartPos, defineEndPos - defineStartPos));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  158:        if (defineEndPos == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  159:            break;
    #####:  160:        defineStartPos = defineEndPos + 1U;
        -:  161:    }
    #####:  162:    return ret;
        -:  163:}
        -:  164:
function _ZN8CppCheckC2ER11ErrorLoggerb called 0 returned 0% blocks executed 0%
    #####:  165:CppCheck::CppCheck(ErrorLogger &errorLogger, bool useGlobalSuppressions)
    #####:  166:    : mErrorLogger(errorLogger), mExitCode(0), mSuppressInternalErrorFound(false), mUseGlobalSuppressions(useGlobalSuppressions), mTooManyConfigs(false), mSimplify(true)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  167:{
    #####:  168:}
        -:  169:
function _ZN8CppCheckD0Ev called 0 returned 0% blocks executed 0%
function _ZN8CppCheckD2Ev called 0 returned 0% blocks executed 0%
    #####:  170:CppCheck::~CppCheck()
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  171:{
    #####:  172:    while (!mFileInfo.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  173:        delete mFileInfo.back();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  174:        mFileInfo.pop_back();
call    0 never executed
        -:  175:    }
    #####:  176:    S_timerResults.ShowResults(mSettings.showtime);
call    0 never executed
    #####:  177:}
call    0 never executed
call    1 never executed
        -:  178:
function _ZN8CppCheck7versionEv called 0 returned 0% blocks executed 0%
    #####:  179:const char * CppCheck::version()
        -:  180:{
    #####:  181:    return Version;
        -:  182:}
        -:  183:
function _ZN8CppCheck12extraVersionEv called 0 returned 0% blocks executed 0%
    #####:  184:const char * CppCheck::extraVersion()
        -:  185:{
    #####:  186:    return ExtraVersion;
        -:  187:}
        -:  188:
function _ZN8CppCheck5checkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  189:unsigned int CppCheck::check(const std::string &path)
        -:  190:{
    #####:  191:    std::ifstream fin(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  192:    return checkFile(Path::simplifyPath(path), emptyString, fin);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  193:}
        -:  194:
function _ZN8CppCheck5checkERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:  195:unsigned int CppCheck::check(const std::string &path, const std::string &content)
        -:  196:{
    #####:  197:    std::istringstream iss(content);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  198:    return checkFile(Path::simplifyPath(path), emptyString, iss);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  199:}
        -:  200:
function _ZN8CppCheck5checkERKN13ImportProject12FileSettingsE called 0 returned 0% blocks executed 0%
    #####:  201:unsigned int CppCheck::check(const ImportProject::FileSettings &fs)
        -:  202:{
    #####:  203:    CppCheck temp(mErrorLogger, mUseGlobalSuppressions);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  204:    temp.mSettings = mSettings;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  205:    if (!temp.mSettings.userDefines.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  206:        temp.mSettings.userDefines += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:    temp.mSettings.userDefines += fs.cppcheckDefines();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  208:    temp.mSettings.includePaths = fs.includePaths;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  209:    temp.mSettings.userUndefs = fs.undefs;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  210:    if (fs.platformType != Settings::Unspecified) {
branch  0 never executed
branch  1 never executed
    #####:  211:        temp.mSettings.platform(fs.platformType);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  212:    }
    #####:  213:    std::ifstream fin(fs.filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  214:    return temp.checkFile(Path::simplifyPath(fs.filename), fs.cfg, fin);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  215:}
        -:  216:
function _ZN8CppCheck9checkFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RSi called 0 returned 0% blocks executed 0%
    #####:  217:unsigned int CppCheck::checkFile(const std::string& filename, const std::string &cfgname, std::istream& fileStream)
        -:  218:{
    #####:  219:    mExitCode = 0;
    #####:  220:    mSuppressInternalErrorFound = false;
        -:  221:
        -:  222:    // only show debug warnings for accepted C/C++ source files
    #####:  223:    if (!Path::acceptFile(filename))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  224:        mSettings.debugwarnings = false;
        -:  225:
    #####:  226:    if (mSettings.terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  227:        return mExitCode;
        -:  228:
    #####:  229:    if (!mSettings.quiet) {
branch  0 never executed
branch  1 never executed
    #####:  230:        std::string fixedpath = Path::simplifyPath(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  231:        fixedpath = Path::toNativeSeparators(fixedpath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  232:        mErrorLogger.reportOut(std::string("Checking ") + fixedpath + ' ' + cfgname + std::string("..."));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
        -:  233:
    #####:  234:        if (mSettings.verbose) {
branch  0 never executed
branch  1 never executed
    #####:  235:            mErrorLogger.reportOut("Defines:" + mSettings.userDefines);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  236:            std::string undefs;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  237:            for (const std::string& U : mSettings.userUndefs) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  238:                if (!undefs.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  239:                    undefs += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  240:                undefs += ' ' + U;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  241:            }
    #####:  242:            mErrorLogger.reportOut("Undefines:" + undefs);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  243:            std::string includePaths;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  244:            for (const std::string &I : mSettings.includePaths)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  245:                includePaths += " -I" + I;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  246:            mErrorLogger.reportOut("Includes:" + includePaths);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  247:            mErrorLogger.reportOut(std::string("Platform:") + mSettings.platformString());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  248:        }
        -:  249:    }
        -:  250:
    #####:  251:    if (plistFile.is_open()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  252:        plistFile << ErrorLogger::plistFooter();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  253:        plistFile.close();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  254:    }
        -:  255:
    #####:  256:    CheckUnusedFunctions checkUnusedFunctions(nullptr, nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  257:
        -:  258:    try {
    #####:  259:        Preprocessor preprocessor(mSettings, this);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  260:        std::set<std::string> configurations;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  261:
    #####:  262:        simplecpp::OutputList outputList;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  263:        std::vector<std::string> files;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  264:        simplecpp::TokenList tokens1(fileStream, files, filename, &outputList);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  265:
        -:  266:        // If there is a syntax error, report it and stop
    #####:  267:        for (const simplecpp::Output &output : outputList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -:  268:            bool err;
    #####:  269:            switch (output.type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  270:            case simplecpp::Output::ERROR:
        -:  271:            case simplecpp::Output::INCLUDE_NESTED_TOO_DEEPLY:
        -:  272:            case simplecpp::Output::SYNTAX_ERROR:
        -:  273:            case simplecpp::Output::UNHANDLED_CHAR_ERROR:
    #####:  274:                err = true;
    #####:  275:                break;
    #####:  276:            case simplecpp::Output::WARNING:
        -:  277:            case simplecpp::Output::MISSING_HEADER:
        -:  278:            case simplecpp::Output::PORTABILITY_BACKSLASH:
    #####:  279:                err = false;
    #####:  280:                break;
        -:  281:            };
        -:  282:
    #####:  283:            if (err) {
branch  0 never executed
branch  1 never executed
    #####:  284:                const ErrorLogger::ErrorMessage::FileLocation loc1(output.location.file(), output.location.line, output.location.col);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  285:                std::list<ErrorLogger::ErrorMessage::FileLocation> callstack(1, loc1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  286:
        -:  287:                ErrorLogger::ErrorMessage errmsg(callstack,
        -:  288:                                                 "",
        -:  289:                                                 Severity::error,
        -:  290:                                                 output.msg,
        -:  291:                                                 "syntaxError",
    #####:  292:                                                 false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  293:                reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  294:                return mExitCode;
        -:  295:            }
        -:  296:        }
        -:  297:
    #####:  298:        preprocessor.loadFiles(tokens1, files);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  299:
    #####:  300:        if (!mSettings.plistOutput.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  301:            std::string filename2;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  302:            if (filename.find('/') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  303:                filename2 = filename.substr(filename.rfind('/') + 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  304:            else
    #####:  305:                filename2 = filename;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  306:            filename2 = mSettings.plistOutput + filename2.substr(0, filename2.find('.')) + ".plist";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  307:            plistFile.open(filename2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  308:            plistFile << ErrorLogger::plistHeader(version(), files);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  309:        }
        -:  310:
        -:  311:        // write dump file xml prolog
    #####:  312:        std::ofstream fdump;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  313:        std::string dumpFile;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  314:        if (mSettings.dump || !mSettings.addons.empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  315:            if (!mSettings.dumpFile.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  316:                dumpFile = mSettings.dumpFile;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  317:            else if (!mSettings.dump && !mSettings.buildDir.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  318:                dumpFile = AnalyzerInformation::getAnalyzerInfoFile(mSettings.buildDir, filename, "") + ".dump";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -:  319:            else
    #####:  320:                dumpFile = filename + ".dump";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  321:
    #####:  322:            fdump.open(dumpFile);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  323:            if (fdump.is_open()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  324:                fdump << "<?xml version=\"1.0\"?>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  325:                fdump << "<dumps>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  326:                fdump << "  <platform"
        -:  327:                      << " name=\"" << mSettings.platformString() << '\"'
    #####:  328:                      << " char_bit=\"" << mSettings.char_bit << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####:  329:                      << " short_bit=\"" << mSettings.short_bit << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  330:                      << " int_bit=\"" << mSettings.int_bit << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  331:                      << " long_bit=\"" << mSettings.long_bit << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  332:                      << " long_long_bit=\"" << mSettings.long_long_bit << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  333:                      << " pointer_bit=\"" << (mSettings.sizeof_pointer * mSettings.char_bit) << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  334:                      << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  335:                fdump << "  <rawtokens>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  336:                for (unsigned int i = 0; i < files.size(); ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  337:                    fdump << "    <file index=\"" << i << "\" name=\"" << ErrorLogger::toxml(files[i]) << "\"/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
    #####:  338:                for (const simplecpp::Token *tok = tokens1.cfront(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  339:                    fdump << "    <tok "
    #####:  340:                          << "fileIndex=\"" << tok->location.fileIndex << "\" "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  341:                          << "linenr=\"" << tok->location.line << "\" "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  342:                          << "column=\"" << tok->location.col << "\" "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  343:                          << "str=\"" << ErrorLogger::toxml(tok->str()) << "\""
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  344:                          << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
        -:  345:                }
    #####:  346:                fdump << "  </rawtokens>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  347:            }
        -:  348:        }
        -:  349:
        -:  350:        // Parse comments and then remove them
    #####:  351:        preprocessor.inlineSuppressions(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  352:        if ((mSettings.dump || !mSettings.addons.empty()) && fdump.is_open()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  353:            mSettings.nomsg.dump(fdump);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  354:        }
    #####:  355:        tokens1.removeComments();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  356:        preprocessor.removeComments();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  357:
    #####:  358:        if (!mSettings.buildDir.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  359:            // Get toolinfo
    #####:  360:            std::ostringstream toolinfo;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  361:            toolinfo << CPPCHECK_VERSION_STRING;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  362:            toolinfo << (mSettings.isEnabled(Settings::WARNING) ? 'w' : ' ');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  363:            toolinfo << (mSettings.isEnabled(Settings::STYLE) ? 's' : ' ');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  364:            toolinfo << (mSettings.isEnabled(Settings::PERFORMANCE) ? 'p' : ' ');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  365:            toolinfo << (mSettings.isEnabled(Settings::PORTABILITY) ? 'p' : ' ');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  366:            toolinfo << (mSettings.isEnabled(Settings::INFORMATION) ? 'i' : ' ');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  367:            toolinfo << mSettings.userDefines;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  368:            mSettings.nomsg.dump(toolinfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  369:
        -:  370:            // Calculate checksum so it can be compared with old checksum / future checksums
    #####:  371:            const unsigned int checksum = preprocessor.calculateChecksum(tokens1, toolinfo.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  372:            std::list<ErrorLogger::ErrorMessage> errors;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  373:            if (!mAnalyzerInformation.analyzeFile(mSettings.buildDir, filename, cfgname, checksum, &errors)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  374:                while (!errors.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  375:                    reportErr(errors.front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  376:                    errors.pop_front();
call    0 never executed
        -:  377:                }
    #####:  378:                return mExitCode;  // known results => no need to reanalyze file
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  379:            }
        -:  380:        }
        -:  381:
        -:  382:        // Get directives
    #####:  383:        preprocessor.setDirectives(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  384:        preprocessor.simplifyPragmaAsm(&tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  385:
    #####:  386:        preprocessor.setPlatformInfo(&tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  387:
        -:  388:        // Get configurations..
    #####:  389:        if (mSettings.userDefines.empty() || mSettings.force) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  390:            Timer t("Preprocessor::getConfigs", mSettings.showtime, &S_timerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  391:            configurations = preprocessor.getConfigs(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  392:        } else {
    #####:  393:            configurations.insert(mSettings.userDefines);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  394:        }
        -:  395:
    #####:  396:        if (mSettings.checkConfiguration) {
branch  0 never executed
branch  1 never executed
    #####:  397:            for (const std::string &config : configurations)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  398:                (void)preprocessor.getcode(tokens1, config, files, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  399:
    #####:  400:            return 0;
        -:  401:        }
        -:  402:
        -:  403:        // Run define rules on raw code
    #####:  404:        for (const Settings::Rule &rule : mSettings.rules) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  405:            if (rule.tokenlist != "define")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  406:                continue;
        -:  407:
    #####:  408:            std::string code;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  409:            const std::list<Directive> &directives = preprocessor.getDirectives();
call    0 never executed
    #####:  410:            for (const Directive &dir : directives) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  411:                if (dir.str.compare(0,8,"#define ") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  412:                    code += "#line " + MathLib::toString(dir.linenr) + " \"" + dir.file + "\"\n" + dir.str + '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
        -:  413:            }
    #####:  414:            Tokenizer tokenizer2(&mSettings, this);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  415:            std::istringstream istr2(code);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  416:            tokenizer2.list.createTokens(istr2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  417:            executeRules("define", tokenizer2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  418:            break;
        -:  419:        }
        -:  420:
    #####:  421:        if (!mSettings.force && configurations.size() > mSettings.maxConfigs) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  422:            if (mSettings.isEnabled(Settings::INFORMATION)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  423:                tooManyConfigsError(Path::toNativeSeparators(filename),configurations.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  424:            } else {
    #####:  425:                mTooManyConfigs = true;
        -:  426:            }
        -:  427:        }
        -:  428:
    #####:  429:        std::set<unsigned long long> checksums;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  430:        unsigned int checkCount = 0;
    #####:  431:        bool hasValidConfig = false;
    #####:  432:        std::list<std::string> configurationError;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  433:        for (const std::string &currCfg : configurations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  434:            // bail out if terminated
    #####:  435:            if (mSettings.terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  436:                break;
        -:  437:
        -:  438:            // Check only a few configurations (default 12), after that bail out, unless --force
        -:  439:            // was used.
    #####:  440:            if (!mSettings.force && ++checkCount > mSettings.maxConfigs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  441:                break;
        -:  442:
    #####:  443:            if (!mSettings.userDefines.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  444:                mCurrentConfig = mSettings.userDefines;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  445:                const std::vector<std::string> v1(split(mSettings.userDefines, ";"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  446:                for (const std::string &cfg: split(currCfg, ";")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    #####:  447:                    if (std::find(v1.begin(), v1.end(), cfg) == v1.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  448:                        mCurrentConfig += ";" + cfg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  449:                    }
        -:  450:                }
        -:  451:            } else {
    #####:  452:                mCurrentConfig = currCfg;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  453:            }
        -:  454:
    #####:  455:            if (mSettings.preprocessOnly) {
branch  0 never executed
branch  1 never executed
    #####:  456:                Timer t("Preprocessor::getcode", mSettings.showtime, &S_timerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  457:                std::string codeWithoutCfg = preprocessor.getcode(tokens1, mCurrentConfig, files, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  458:                t.Stop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  459:
    #####:  460:                if (codeWithoutCfg.compare(0,5,"#file") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  461:                    codeWithoutCfg.insert(0U, "//");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  462:                std::string::size_type pos = 0;
    #####:  463:                while ((pos = codeWithoutCfg.find("\n#file",pos)) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  464:                    codeWithoutCfg.insert(pos+1U, "//");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  465:                pos = 0;
    #####:  466:                while ((pos = codeWithoutCfg.find("\n#endfile",pos)) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  467:                    codeWithoutCfg.insert(pos+1U, "//");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  468:                pos = 0;
    #####:  469:                while ((pos = codeWithoutCfg.find(Preprocessor::macroChar,pos)) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  470:                    codeWithoutCfg[pos] = ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  471:                reportOut(codeWithoutCfg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  472:                continue;
        -:  473:            }
        -:  474:
    #####:  475:            Tokenizer mTokenizer(&mSettings, this);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  476:            if (mSettings.showtime != SHOWTIME_MODES::SHOWTIME_NONE)
branch  0 never executed
branch  1 never executed
    #####:  477:                mTokenizer.setTimerResults(&S_timerResults);
call    0 never executed
        -:  478:
        -:  479:            try {
        -:  480:                bool result;
        -:  481:
        -:  482:                // Create tokens, skip rest of iteration if failed
    #####:  483:                Timer timer("Tokenizer::createTokens", mSettings.showtime, &S_timerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  484:                const simplecpp::TokenList &tokensP = preprocessor.preprocess(tokens1, mCurrentConfig, files, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  485:                mTokenizer.createTokens(&tokensP);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  486:                timer.Stop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  487:                hasValidConfig = true;
        -:  488:
        -:  489:                // If only errors are printed, print filename after the check
    #####:  490:                if (!mSettings.quiet && (!mCurrentConfig.empty() || checkCount > 1)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  491:                    std::string fixedpath = Path::simplifyPath(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  492:                    fixedpath = Path::toNativeSeparators(fixedpath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  493:                    mErrorLogger.reportOut("Checking " + fixedpath + ": " + mCurrentConfig + "...");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -:  494:                }
        -:  495:
    #####:  496:                if (tokensP.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  497:                    continue;
        -:  498:
        -:  499:                // skip rest of iteration if just checking configuration
    #####:  500:                if (mSettings.checkConfiguration)
branch  0 never executed
branch  1 never executed
    #####:  501:                    continue;
        -:  502:
        -:  503:                // Check raw tokens
    #####:  504:                checkRawTokens(mTokenizer);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  505:
        -:  506:                // Simplify tokens into normal form, skip rest of iteration if failed
    #####:  507:                Timer timer2("Tokenizer::simplifyTokens1", mSettings.showtime, &S_timerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  508:                result = mTokenizer.simplifyTokens1(mCurrentConfig);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  509:                timer2.Stop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  510:                if (!result)
branch  0 never executed
branch  1 never executed
    #####:  511:                    continue;
        -:  512:
        -:  513:                // dump xml if --dump
    #####:  514:                if ((mSettings.dump || !mSettings.addons.empty()) && fdump.is_open()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  515:                    fdump << "<dump cfg=\"" << ErrorLogger::toxml(mCurrentConfig) << "\">" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  516:                    fdump << "  <standards>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  517:                    fdump << "    <c version=\"" << mSettings.standards.getC() << "\"/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  518:                    fdump << "    <cpp version=\"" << mSettings.standards.getCPP() << "\"/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  519:                    fdump << "  </standards>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  520:                    preprocessor.dump(fdump);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  521:                    mTokenizer.dump(fdump);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  522:                    fdump << "</dump>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  523:                }
        -:  524:
        -:  525:                // Skip if we already met the same simplified token list
    #####:  526:                if (mSettings.force || mSettings.maxConfigs > 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  527:                    const unsigned long long checksum = mTokenizer.list.calculateChecksum();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  528:                    if (checksums.find(checksum) != checksums.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  529:                        if (mSettings.debugwarnings)
branch  0 never executed
branch  1 never executed
    #####:  530:                            purgedConfigurationMessage(filename, mCurrentConfig);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  531:                        continue;
        -:  532:                    }
    #####:  533:                    checksums.insert(checksum);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  534:                }
        -:  535:
        -:  536:                // Check normal tokens
    #####:  537:                checkNormalTokens(mTokenizer);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  538:
        -:  539:                // Analyze info..
    #####:  540:                if (!mSettings.buildDir.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  541:                    checkUnusedFunctions.parseTokens(mTokenizer, filename.c_str(), &mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  542:
        -:  543:                // simplify more if required, skip rest of iteration if failed
    #####:  544:                if (mSimplify && hasRule("simple")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
        -:  545:                    // if further simplification fails then skip rest of iteration
    #####:  546:                    Timer timer3("Tokenizer::simplifyTokenList2", mSettings.showtime, &S_timerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  547:                    result = mTokenizer.simplifyTokenList2();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  548:                    timer3.Stop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  549:                    if (!result)
branch  0 never executed
branch  1 never executed
    #####:  550:                        continue;
        -:  551:
    #####:  552:                    if (!mSettings.terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  553:                        executeRules("simple", mTokenizer);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:  554:                }
        -:  555:
    =====:  556:            } catch (const simplecpp::Output &o) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  557:                // #error etc during preprocessing
    =====:  558:                configurationError.push_back((mCurrentConfig.empty() ? "\'\'" : mCurrentConfig) + " : [" + o.location.file() + ':' + MathLib::toString(o.location.line) + "] " + o.msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
branch 53 never executed
branch 54 never executed
call   55 never executed
call   56 never executed
    =====:  559:                --checkCount; // don't count invalid configurations
    =====:  560:                continue;
        -:  561:
    =====:  562:            } catch (const InternalError &e) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  563:                std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  564:                if (e.token) {
branch  0 never executed
branch  1 never executed
    =====:  565:                    ErrorLogger::ErrorMessage::FileLocation loc(e.token, &mTokenizer.list);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    =====:  566:                    locationList.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  567:                } else {
    =====:  568:                    ErrorLogger::ErrorMessage::FileLocation loc(mTokenizer.list.getSourceFilePath(), 0, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    =====:  569:                    ErrorLogger::ErrorMessage::FileLocation loc2(filename, 0, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    =====:  570:                    locationList.push_back(loc2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  571:                    locationList.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  572:                }
        -:  573:                ErrorLogger::ErrorMessage errmsg(locationList,
        -:  574:                                                 mTokenizer.list.getSourceFilePath(),
        -:  575:                                                 Severity::error,
        -:  576:                                                 e.errorMessage,
        -:  577:                                                 e.id,
    =====:  578:                                                 false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  579:
    =====:  580:                if (errmsg.severity == Severity::error || mSettings.isEnabled(errmsg.severity))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    =====:  581:                    reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  582:            }
        -:  583:        }
        -:  584:
    #####:  585:        if (!hasValidConfig && configurations.size() > 1 && mSettings.isEnabled(Settings::INFORMATION)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  586:            std::string msg;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  587:            msg = "This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  588:            msg += "\nThis file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  589:            for (const std::string &s : configurationError)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  590:                msg += '\n' + s;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  591:
    #####:  592:            std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  593:            ErrorLogger::ErrorMessage::FileLocation loc;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  594:            loc.setfile(Path::toNativeSeparators(filename));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  595:            locationList.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  596:            ErrorLogger::ErrorMessage errmsg(locationList,
    #####:  597:                                             loc.getfile(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  598:                                             Severity::information,
        -:  599:                                             msg,
        -:  600:                                             "noValidConfiguration",
    #####:  601:                                             false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  602:            reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  603:        }
        -:  604:
        -:  605:        // dumped all configs, close root </dumps> element now
    #####:  606:        if ((mSettings.dump || !mSettings.addons.empty()) && fdump.is_open())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  607:            fdump << "</dumps>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  608:
    #####:  609:        if (!mSettings.addons.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  610:            fdump.close();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  611:
    #####:  612:            for (const std::string &addon : mSettings.addons) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  613:                struct AddonInfo addonInfo;
call    0 never executed
call    1 never executed
    #####:  614:                const std::string &failedToGetAddonInfo = addonInfo.getAddonInfo(addon, mSettings.exename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  615:                if (!failedToGetAddonInfo.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  616:                    reportOut(failedToGetAddonInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  617:                    continue;
        -:  618:                }
    #####:  619:                const std::string results = executeAddon(addonInfo, dumpFile);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  620:                std::istringstream istr(results);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  621:                std::string line;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  622:
    #####:  623:                while (std::getline(istr, line)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  624:                    if (line.compare(0,1,"{") != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  625:                        continue;
        -:  626:
    #####:  627:                    picojson::value res;
call    0 never executed
call    1 never executed
    #####:  628:                    std::istringstream istr2(line);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  629:                    istr2 >> res;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  630:                    if (!res.is<picojson::object>())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  631:                        continue;
        -:  632:
    #####:  633:                    picojson::object obj = res.get<picojson::object>();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  634:
    #####:  635:                    const std::string fileName = obj["file"].get<std::string>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
    #####:  636:                    const int64_t lineNumber = obj["linenr"].get<int64_t>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  637:                    const int64_t column = obj["column"].get<int64_t>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  638:
    #####:  639:                    ErrorLogger::ErrorMessage errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  640:
    #####:  641:                    errmsg.callStack.emplace_back(ErrorLogger::ErrorMessage::FileLocation(fileName, lineNumber, column));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  642:
    #####:  643:                    errmsg.id = obj["addon"].get<std::string>() + "-" + obj["errorId"].get<std::string>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
    #####:  644:                    const std::string text = obj["message"].get<std::string>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####:  645:                    errmsg.setmsg(text);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  646:                    const std::string severity = obj["severity"].get<std::string>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
    #####:  647:                    errmsg.severity = Severity::fromString(severity);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  648:                    if (errmsg.severity == Severity::SeverityType::none)
branch  0 never executed
branch  1 never executed
    #####:  649:                        continue;
    #####:  650:                    errmsg.file0 = fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  651:
    #####:  652:                    reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  653:                }
        -:  654:            }
        -:  655:        }
        -:  656:
    =====:  657:    } catch (const std::runtime_error &e) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  658:        internalError(filename, e.what());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    =====:  659:    } catch (const std::bad_alloc &e) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  660:        internalError(filename, e.what());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    =====:  661:    } catch (const InternalError &e) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  662:        internalError(filename, e.errorMessage);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  663:        mExitCode=1; // e.g. reflect a syntax error
        -:  664:    }
        -:  665:
    #####:  666:    mAnalyzerInformation.setFileInfo("CheckUnusedFunctions", checkUnusedFunctions.analyzerInfo());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  667:    mAnalyzerInformation.close();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  668:
        -:  669:    // In jointSuppressionReport mode, unmatched suppressions are
        -:  670:    // collected after all files are processed
    #####:  671:    if (!mSettings.jointSuppressionReport && (mSettings.isEnabled(Settings::INFORMATION) || mSettings.checkConfiguration)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  672:        reportUnmatchedSuppressions(mSettings.nomsg.getUnmatchedLocalSuppressions(filename, isUnusedFunctionCheckEnabled()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  673:    }
        -:  674:
    #####:  675:    mErrorList.clear();
call    0 never executed
        -:  676:
    #####:  677:    return mExitCode;
        -:  678:}
        -:  679:
function _ZN8CppCheck13internalErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:  680:void CppCheck::internalError(const std::string &filename, const std::string &msg)
        -:  681:{
    #####:  682:    const std::string fixedpath = Path::toNativeSeparators(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  683:    const std::string fullmsg("Bailing out from checking " + fixedpath + " since there was an internal error: " + msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  684:
    #####:  685:    if (mSettings.isEnabled(Settings::INFORMATION)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  686:        const ErrorLogger::ErrorMessage::FileLocation loc1(filename, 0, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  687:        std::list<ErrorLogger::ErrorMessage::FileLocation> callstack(1, loc1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  688:
        -:  689:        ErrorLogger::ErrorMessage errmsg(callstack,
        -:  690:                                         emptyString,
        -:  691:                                         Severity::information,
        -:  692:                                         fullmsg,
        -:  693:                                         "internalError",
    #####:  694:                                         false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  695:
    #####:  696:        mErrorLogger.reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  697:    } else {
        -:  698:        // Report on stdout
    #####:  699:        mErrorLogger.reportOut(fullmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  700:    }
    #####:  701:}
call    0 never executed
        -:  702:
        -:  703://---------------------------------------------------------------------------
        -:  704:// CppCheck - A function that checks a raw token list
        -:  705://---------------------------------------------------------------------------
function _ZN8CppCheck14checkRawTokensERK9Tokenizer called 0 returned 0% blocks executed 0%
    #####:  706:void CppCheck::checkRawTokens(const Tokenizer &tokenizer)
        -:  707:{
        -:  708:    // Execute rules for "raw" code
    #####:  709:    executeRules("raw", tokenizer);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  710:}
        -:  711:
        -:  712://---------------------------------------------------------------------------
        -:  713:// CppCheck - A function that checks a normal token list
        -:  714://---------------------------------------------------------------------------
        -:  715:
function _ZN8CppCheck17checkNormalTokensERK9Tokenizer called 0 returned 0% blocks executed 0%
    #####:  716:void CppCheck::checkNormalTokens(const Tokenizer &tokenizer)
        -:  717:{
        -:  718:    // call all "runChecks" in all registered Check classes
    #####:  719:    for (Check *check : Check::instances()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  720:        if (mSettings.terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  721:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  722:
    #####:  723:        if (tokenizer.isMaxTime())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  724:            return;
        -:  725:
    #####:  726:        Timer timerRunChecks(check->name() + "::runChecks", mSettings.showtime, &S_timerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  727:        check->runChecks(&tokenizer, &mSettings, this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:    }
        -:  729:
        -:  730:    // Verification using ExprEngine..
    #####:  731:    if (mSettings.verification) {
branch  0 never executed
branch  1 never executed
    #####:  732:        ExprEngine::runChecks(this, &tokenizer, &mSettings);
call    0 never executed
        -:  733:    }
        -:  734:
        -:  735:    // Analyse the tokens..
        -:  736:
    #####:  737:    CTU::FileInfo *fi1 = CTU::getFileInfo(&tokenizer);
call    0 never executed
    #####:  738:    if (fi1) {
branch  0 never executed
branch  1 never executed
    #####:  739:        mFileInfo.push_back(fi1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  740:        mAnalyzerInformation.setFileInfo("ctu", fi1->toString());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  741:    }
        -:  742:
    #####:  743:    for (const Check *check : Check::instances()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  744:        Check::FileInfo *fi = check->getFileInfo(&tokenizer, &mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  745:        if (fi != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  746:            mFileInfo.push_back(fi);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  747:            mAnalyzerInformation.setFileInfo(check->name(), fi->toString());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  748:        }
        -:  749:    }
        -:  750:
    #####:  751:    executeRules("normal", tokenizer);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  752:}
        -:  753:
        -:  754://---------------------------------------------------------------------------
        -:  755:
function _ZNK8CppCheck7hasRuleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  756:bool CppCheck::hasRule(const std::string &tokenlist) const
        -:  757:{
        -:  758:#ifdef HAVE_RULES
        -:  759:    for (const Settings::Rule &rule : mSettings.rules) {
        -:  760:        if (rule.tokenlist == tokenlist)
        -:  761:            return true;
        -:  762:    }
        -:  763:#else
        -:  764:    (void)tokenlist;
        -:  765:#endif
    #####:  766:    return false;
        -:  767:}
        -:  768:
        -:  769:
        -:  770:#ifdef HAVE_RULES
        -:  771:
        -:  772:static const char * pcreErrorCodeToString(const int pcreExecRet)
        -:  773:{
        -:  774:    switch (pcreExecRet) {
        -:  775:    case PCRE_ERROR_NULL:
        -:  776:        return "Either code or subject was passed as NULL, or ovector was NULL "
        -:  777:               "and ovecsize was not zero (PCRE_ERROR_NULL)";
        -:  778:    case PCRE_ERROR_BADOPTION:
        -:  779:        return "An unrecognized bit was set in the options argument (PCRE_ERROR_BADOPTION)";
        -:  780:    case PCRE_ERROR_BADMAGIC:
        -:  781:        return "PCRE stores a 4-byte \"magic number\" at the start of the compiled code, "
        -:  782:               "to catch the case when it is passed a junk pointer and to detect when a "
        -:  783:               "pattern that was compiled in an environment of one endianness is run in "
        -:  784:               "an environment with the other endianness. This is the error that PCRE "
        -:  785:               "gives when the magic number is not present (PCRE_ERROR_BADMAGIC)";
        -:  786:    case PCRE_ERROR_UNKNOWN_NODE:
        -:  787:        return "While running the pattern match, an unknown item was encountered in the "
        -:  788:               "compiled pattern. This error could be caused by a bug in PCRE or by "
        -:  789:               "overwriting of the compiled pattern (PCRE_ERROR_UNKNOWN_NODE)";
        -:  790:    case PCRE_ERROR_NOMEMORY:
        -:  791:        return "If a pattern contains back references, but the ovector that is passed "
        -:  792:               "to pcre_exec() is not big enough to remember the referenced substrings, "
        -:  793:               "PCRE gets a block of memory at the start of matching to use for this purpose. "
        -:  794:               "If the call via pcre_malloc() fails, this error is given. The memory is "
        -:  795:               "automatically freed at the end of matching. This error is also given if "
        -:  796:               "pcre_stack_malloc() fails in pcre_exec(). "
        -:  797:               "This can happen only when PCRE has been compiled with "
        -:  798:               "--disable-stack-for-recursion (PCRE_ERROR_NOMEMORY)";
        -:  799:    case PCRE_ERROR_NOSUBSTRING:
        -:  800:        return "This error is used by the pcre_copy_substring(), pcre_get_substring(), "
        -:  801:               "and pcre_get_substring_list() functions (see below). "
        -:  802:               "It is never returned by pcre_exec() (PCRE_ERROR_NOSUBSTRING)";
        -:  803:    case PCRE_ERROR_MATCHLIMIT:
        -:  804:        return "The backtracking limit, as specified by the match_limit field in a pcre_extra "
        -:  805:               "structure (or defaulted) was reached. "
        -:  806:               "See the description above (PCRE_ERROR_MATCHLIMIT)";
        -:  807:    case PCRE_ERROR_CALLOUT:
        -:  808:        return "This error is never generated by pcre_exec() itself. "
        -:  809:               "It is provided for use by callout functions that want to yield a distinctive "
        -:  810:               "error code. See the pcrecallout documentation for details (PCRE_ERROR_CALLOUT)";
        -:  811:    case PCRE_ERROR_BADUTF8:
        -:  812:        return "A string that contains an invalid UTF-8 byte sequence was passed as a subject, "
        -:  813:               "and the PCRE_NO_UTF8_CHECK option was not set. If the size of the output vector "
        -:  814:               "(ovecsize) is at least 2, the byte offset to the start of the the invalid UTF-8 "
        -:  815:               "character is placed in the first element, and a reason code is placed in the "
        -:  816:               "second element. The reason codes are listed in the following section. For "
        -:  817:               "backward compatibility, if PCRE_PARTIAL_HARD is set and the problem is a truncated "
        -:  818:               "UTF-8 character at the end of the subject (reason codes 1 to 5), "
        -:  819:               "PCRE_ERROR_SHORTUTF8 is returned instead of PCRE_ERROR_BADUTF8";
        -:  820:    case PCRE_ERROR_BADUTF8_OFFSET:
        -:  821:        return "The UTF-8 byte sequence that was passed as a subject was checked and found to "
        -:  822:               "be valid (the PCRE_NO_UTF8_CHECK option was not set), but the value of "
        -:  823:               "startoffset did not point to the beginning of a UTF-8 character or the end of "
        -:  824:               "the subject (PCRE_ERROR_BADUTF8_OFFSET)";
        -:  825:    case PCRE_ERROR_PARTIAL:
        -:  826:        return "The subject string did not match, but it did match partially. See the "
        -:  827:               "pcrepartial documentation for details of partial matching (PCRE_ERROR_PARTIAL)";
        -:  828:    case PCRE_ERROR_BADPARTIAL:
        -:  829:        return "This code is no longer in use. It was formerly returned when the PCRE_PARTIAL "
        -:  830:               "option was used with a compiled pattern containing items that were not supported "
        -:  831:               "for partial matching. From release 8.00 onwards, there are no restrictions on "
        -:  832:               "partial matching (PCRE_ERROR_BADPARTIAL)";
        -:  833:    case PCRE_ERROR_INTERNAL:
        -:  834:        return "An unexpected internal error has occurred. This error could be caused by a bug "
        -:  835:               "in PCRE or by overwriting of the compiled pattern (PCRE_ERROR_INTERNAL)";
        -:  836:    case PCRE_ERROR_BADCOUNT:
        -:  837:        return"This error is given if the value of the ovecsize argument is negative "
        -:  838:              "(PCRE_ERROR_BADCOUNT)";
        -:  839:    case PCRE_ERROR_RECURSIONLIMIT :
        -:  840:        return "The internal recursion limit, as specified by the match_limit_recursion "
        -:  841:               "field in a pcre_extra structure (or defaulted) was reached. "
        -:  842:               "See the description above (PCRE_ERROR_RECURSIONLIMIT)";
        -:  843:    case PCRE_ERROR_DFA_UITEM:
        -:  844:        return "PCRE_ERROR_DFA_UITEM";
        -:  845:    case PCRE_ERROR_DFA_UCOND:
        -:  846:        return "PCRE_ERROR_DFA_UCOND";
        -:  847:    case PCRE_ERROR_DFA_WSSIZE:
        -:  848:        return "PCRE_ERROR_DFA_WSSIZE";
        -:  849:    case PCRE_ERROR_DFA_RECURSE:
        -:  850:        return "PCRE_ERROR_DFA_RECURSE";
        -:  851:    case PCRE_ERROR_NULLWSLIMIT:
        -:  852:        return "PCRE_ERROR_NULLWSLIMIT";
        -:  853:    case PCRE_ERROR_BADNEWLINE:
        -:  854:        return "An invalid combination of PCRE_NEWLINE_xxx options was "
        -:  855:               "given (PCRE_ERROR_BADNEWLINE)";
        -:  856:    case PCRE_ERROR_BADOFFSET:
        -:  857:        return "The value of startoffset was negative or greater than the length "
        -:  858:               "of the subject, that is, the value in length (PCRE_ERROR_BADOFFSET)";
        -:  859:    case PCRE_ERROR_SHORTUTF8:
        -:  860:        return "This error is returned instead of PCRE_ERROR_BADUTF8 when the subject "
        -:  861:               "string ends with a truncated UTF-8 character and the PCRE_PARTIAL_HARD option is set. "
        -:  862:               "Information about the failure is returned as for PCRE_ERROR_BADUTF8. "
        -:  863:               "It is in fact sufficient to detect this case, but this special error code for "
        -:  864:               "PCRE_PARTIAL_HARD precedes the implementation of returned information; "
        -:  865:               "it is retained for backwards compatibility (PCRE_ERROR_SHORTUTF8)";
        -:  866:    case PCRE_ERROR_RECURSELOOP:
        -:  867:        return "This error is returned when pcre_exec() detects a recursion loop "
        -:  868:               "within the pattern. Specifically, it means that either the whole pattern "
        -:  869:               "or a subpattern has been called recursively for the second time at the same "
        -:  870:               "position in the subject string. Some simple patterns that might do this "
        -:  871:               "are detected and faulted at compile time, but more complicated cases, "
        -:  872:               "in particular mutual recursions between two different subpatterns, "
        -:  873:               "cannot be detected until run time (PCRE_ERROR_RECURSELOOP)";
        -:  874:    case PCRE_ERROR_JIT_STACKLIMIT:
        -:  875:        return "This error is returned when a pattern that was successfully studied "
        -:  876:               "using a JIT compile option is being matched, but the memory available "
        -:  877:               "for the just-in-time processing stack is not large enough. See the pcrejit "
        -:  878:               "documentation for more details (PCRE_ERROR_JIT_STACKLIMIT)";
        -:  879:    case PCRE_ERROR_BADMODE:
        -:  880:        return "This error is given if a pattern that was compiled by the 8-bit library "
        -:  881:               "is passed to a 16-bit or 32-bit library function, or vice versa (PCRE_ERROR_BADMODE)";
        -:  882:    case PCRE_ERROR_BADENDIANNESS:
        -:  883:        return "This error is given if a pattern that was compiled and saved is reloaded on a "
        -:  884:               "host with different endianness. The utility function pcre_pattern_to_host_byte_order() "
        -:  885:               "can be used to convert such a pattern so that it runs on the new host (PCRE_ERROR_BADENDIANNESS)";
        -:  886:    case PCRE_ERROR_DFA_BADRESTART:
        -:  887:        return "PCRE_ERROR_DFA_BADRESTART";
        -:  888:#if PCRE_MAJOR >= 8 && PCRE_MINOR >= 32
        -:  889:    case PCRE_ERROR_BADLENGTH:
        -:  890:        return "This error is given if pcre_exec() is called with a negative value for the length argument (PCRE_ERROR_BADLENGTH)";
        -:  891:    case PCRE_ERROR_JIT_BADOPTION:
        -:  892:        return "This error is returned when a pattern that was successfully studied using a JIT compile "
        -:  893:               "option is being matched, but the matching mode (partial or complete match) does not correspond "
        -:  894:               "to any JIT compilation mode. When the JIT fast path function is used, this error may be "
        -:  895:               "also given for invalid options. See the pcrejit documentation for more details (PCRE_ERROR_JIT_BADOPTION)";
        -:  896:#endif
        -:  897:    }
        -:  898:    return "";
        -:  899:}
        -:  900:
        -:  901:#endif // HAVE_RULES
        -:  902:
        -:  903:
function _ZN8CppCheck12executeRulesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK9Tokenizer called 0 returned 0% blocks executed 0%
    #####:  904:void CppCheck::executeRules(const std::string &tokenlist, const Tokenizer &tokenizer)
        -:  905:{
        -:  906:    (void)tokenlist;
        -:  907:    (void)tokenizer;
        -:  908:
        -:  909:#ifdef HAVE_RULES
        -:  910:    // There is no rule to execute
        -:  911:    if (!hasRule(tokenlist))
        -:  912:        return;
        -:  913:
        -:  914:    // Write all tokens in a string that can be parsed by pcre
        -:  915:    std::ostringstream ostr;
        -:  916:    for (const Token *tok = tokenizer.tokens(); tok; tok = tok->next())
        -:  917:        ostr << " " << tok->str();
        -:  918:    const std::string str(ostr.str());
        -:  919:
        -:  920:    for (const Settings::Rule &rule : mSettings.rules) {
        -:  921:        if (rule.pattern.empty() || rule.id.empty() || rule.severity == Severity::none || rule.tokenlist != tokenlist)
        -:  922:            continue;
        -:  923:
        -:  924:        const char *pcreCompileErrorStr = nullptr;
        -:  925:        int erroffset = 0;
        -:  926:        pcre * const re = pcre_compile(rule.pattern.c_str(),0,&pcreCompileErrorStr,&erroffset,nullptr);
        -:  927:        if (!re) {
        -:  928:            if (pcreCompileErrorStr) {
        -:  929:                const std::string msg = "pcre_compile failed: " + std::string(pcreCompileErrorStr);
        -:  930:                const ErrorLogger::ErrorMessage errmsg(std::list<ErrorLogger::ErrorMessage::FileLocation>(),
        -:  931:                                                       emptyString,
        -:  932:                                                       Severity::error,
        -:  933:                                                       msg,
        -:  934:                                                       "pcre_compile",
        -:  935:                                                       false);
        -:  936:
        -:  937:                reportErr(errmsg);
        -:  938:            }
        -:  939:            continue;
        -:  940:        }
        -:  941:
        -:  942:        // Optimize the regex, but only if PCRE_CONFIG_JIT is available
        -:  943:#ifdef PCRE_CONFIG_JIT
        -:  944:        const char *pcreStudyErrorStr = nullptr;
        -:  945:        pcre_extra * const pcreExtra = pcre_study(re, PCRE_STUDY_JIT_COMPILE, &pcreStudyErrorStr);
        -:  946:        // pcre_study() returns NULL for both errors and when it can not optimize the regex.
        -:  947:        // The last argument is how one checks for errors.
        -:  948:        // It is NULL if everything works, and points to an error string otherwise.
        -:  949:        if (pcreStudyErrorStr) {
        -:  950:            const std::string msg = "pcre_study failed: " + std::string(pcreStudyErrorStr);
        -:  951:            const ErrorLogger::ErrorMessage errmsg(std::list<ErrorLogger::ErrorMessage::FileLocation>(),
        -:  952:                                                   emptyString,
        -:  953:                                                   Severity::error,
        -:  954:                                                   msg,
        -:  955:                                                   "pcre_study",
        -:  956:                                                   false);
        -:  957:
        -:  958:            reportErr(errmsg);
        -:  959:            // pcre_compile() worked, but pcre_study() returned an error. Free the resources allocated by pcre_compile().
        -:  960:            pcre_free(re);
        -:  961:            continue;
        -:  962:        }
        -:  963:#else
        -:  964:        const pcre_extra * const pcreExtra = nullptr;
        -:  965:#endif
        -:  966:
        -:  967:        int pos = 0;
        -:  968:        int ovector[30]= {0};
        -:  969:        while (pos < (int)str.size()) {
        -:  970:            const int pcreExecRet = pcre_exec(re, pcreExtra, str.c_str(), (int)str.size(), pos, 0, ovector, 30);
        -:  971:            if (pcreExecRet < 0) {
        -:  972:                const std::string errorMessage = pcreErrorCodeToString(pcreExecRet);
        -:  973:                if (!errorMessage.empty()) {
        -:  974:                    const ErrorLogger::ErrorMessage errmsg(std::list<ErrorLogger::ErrorMessage::FileLocation>(),
        -:  975:                                                           emptyString,
        -:  976:                                                           Severity::error,
        -:  977:                                                           std::string("pcre_exec failed: ") + errorMessage,
        -:  978:                                                           "pcre_exec",
        -:  979:                                                           false);
        -:  980:
        -:  981:                    reportErr(errmsg);
        -:  982:                }
        -:  983:                break;
        -:  984:            }
        -:  985:            const unsigned int pos1 = (unsigned int)ovector[0];
        -:  986:            const unsigned int pos2 = (unsigned int)ovector[1];
        -:  987:
        -:  988:            // jump to the end of the match for the next pcre_exec
        -:  989:            pos = (int)pos2;
        -:  990:
        -:  991:            // determine location..
        -:  992:            ErrorLogger::ErrorMessage::FileLocation loc;
        -:  993:            loc.setfile(tokenizer.list.getSourceFilePath());
        -:  994:            loc.line = 0;
        -:  995:
        -:  996:            std::size_t len = 0;
        -:  997:            for (const Token *tok = tokenizer.tokens(); tok; tok = tok->next()) {
        -:  998:                len = len + 1U + tok->str().size();
        -:  999:                if (len > pos1) {
        -: 1000:                    loc.setfile(tokenizer.list.getFiles().at(tok->fileIndex()));
        -: 1001:                    loc.line = tok->linenr();
        -: 1002:                    break;
        -: 1003:                }
        -: 1004:            }
        -: 1005:
        -: 1006:            const std::list<ErrorLogger::ErrorMessage::FileLocation> callStack(1, loc);
        -: 1007:
        -: 1008:            // Create error message
        -: 1009:            std::string summary;
        -: 1010:            if (rule.summary.empty())
        -: 1011:                summary = "found '" + str.substr(pos1, pos2 - pos1) + "'";
        -: 1012:            else
        -: 1013:                summary = rule.summary;
        -: 1014:            const ErrorLogger::ErrorMessage errmsg(callStack, tokenizer.list.getSourceFilePath(), rule.severity, summary, rule.id, false);
        -: 1015:
        -: 1016:            // Report error
        -: 1017:            reportErr(errmsg);
        -: 1018:        }
        -: 1019:
        -: 1020:        pcre_free(re);
        -: 1021:#ifdef PCRE_CONFIG_JIT
        -: 1022:        // Free up the EXTRA PCRE value (may be NULL at this point)
        -: 1023:        if (pcreExtra) {
        -: 1024:            pcre_free_study(pcreExtra);
        -: 1025:        }
        -: 1026:#endif
        -: 1027:    }
        -: 1028:#endif
    #####: 1029:}
        -: 1030:
function _ZN8CppCheck8settingsEv called 0 returned 0% blocks executed 0%
    #####: 1031:Settings &CppCheck::settings()
        -: 1032:{
    #####: 1033:    return mSettings;
        -: 1034:}
        -: 1035:
function _ZN8CppCheck19tooManyConfigsErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm called 0 returned 0% blocks executed 0%
    #####: 1036:void CppCheck::tooManyConfigsError(const std::string &file, const std::size_t numberOfConfigurations)
        -: 1037:{
    #####: 1038:    if (!mSettings.isEnabled(Settings::INFORMATION) && !mTooManyConfigs)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1039:        return;
        -: 1040:
    #####: 1041:    mTooManyConfigs = false;
        -: 1042:
    #####: 1043:    if (mSettings.isEnabled(Settings::INFORMATION) && file.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1044:        return;
        -: 1045:
    #####: 1046:    std::list<ErrorLogger::ErrorMessage::FileLocation> loclist;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1047:    if (!file.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1048:        ErrorLogger::ErrorMessage::FileLocation location;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1049:        location.setfile(file);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:        loclist.push_back(location);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1051:    }
        -: 1052:
    #####: 1053:    std::ostringstream msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1054:    msg << "Too many #ifdef configurations - cppcheck only checks " << mSettings.maxConfigs;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1055:    if (numberOfConfigurations > mSettings.maxConfigs)
branch  0 never executed
branch  1 never executed
    #####: 1056:        msg << " of " << numberOfConfigurations << " configurations. Use --force to check all configurations.\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1057:    if (file.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1058:        msg << " configurations. Use --force to check all configurations. For more details, use --enable=information.\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1059:    msg << "The checking of the file will be interrupted because there are too many "
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1060:        "#ifdef configurations. Checking of all #ifdef configurations can be forced "
        -: 1061:        "by --force command line option or from GUI preferences. However that may "
        -: 1062:        "increase the checking time.";
    #####: 1063:    if (file.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1064:        msg << " For more details, use --enable=information.";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1065:
        -: 1066:
        -: 1067:    ErrorLogger::ErrorMessage errmsg(loclist,
        -: 1068:                                     emptyString,
        -: 1069:                                     Severity::information,
    #####: 1070:                                     msg.str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1071:                                     "toomanyconfigs", CWE398,
    #####: 1072:                                     false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1073:
    #####: 1074:    reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1075:}
        -: 1076:
function _ZN8CppCheck26purgedConfigurationMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####: 1077:void CppCheck::purgedConfigurationMessage(const std::string &file, const std::string& configuration)
        -: 1078:{
    #####: 1079:    mTooManyConfigs = false;
        -: 1080:
    #####: 1081:    if (mSettings.isEnabled(Settings::INFORMATION) && file.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1082:        return;
        -: 1083:
    #####: 1084:    std::list<ErrorLogger::ErrorMessage::FileLocation> loclist;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1085:    if (!file.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1086:        ErrorLogger::ErrorMessage::FileLocation location;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1087:        location.setfile(file);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1088:        loclist.push_back(location);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1089:    }
        -: 1090:
        -: 1091:    ErrorLogger::ErrorMessage errmsg(loclist,
        -: 1092:                                     emptyString,
        -: 1093:                                     Severity::information,
    #####: 1094:                                     "The configuration '" + configuration + "' was not checked because its code equals another one.",
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1095:                                     "purgedConfiguration",
    #####: 1096:                                     false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1097:
    #####: 1098:    reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1099:}
        -: 1100:
        -: 1101://---------------------------------------------------------------------------
        -: 1102:
function _ZN8CppCheck9reportErrERKN11ErrorLogger12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####: 1103:void CppCheck::reportErr(const ErrorLogger::ErrorMessage &msg)
        -: 1104:{
    #####: 1105:    mSuppressInternalErrorFound = false;
        -: 1106:
    #####: 1107:    if (!mSettings.library.reportErrors(msg.file0))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1108:        return;
        -: 1109:
    #####: 1110:    const std::string errmsg = msg.toString(mSettings.verbose);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1111:    if (errmsg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1112:        return;
        -: 1113:
        -: 1114:    // Alert only about unique errors
    #####: 1115:    if (std::find(mErrorList.begin(), mErrorList.end(), errmsg) != mErrorList.end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1116:        return;
        -: 1117:
    #####: 1118:    const Suppressions::ErrorMessage errorMessage = msg.toSuppressionsErrorMessage();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -: 1119:
    #####: 1120:    if (mUseGlobalSuppressions) {
branch  0 never executed
branch  1 never executed
    #####: 1121:        if (mSettings.nomsg.isSuppressed(errorMessage)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1122:            mSuppressInternalErrorFound = true;
    #####: 1123:            return;
        -: 1124:        }
        -: 1125:    } else {
    #####: 1126:        if (mSettings.nomsg.isSuppressedLocal(errorMessage)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1127:            mSuppressInternalErrorFound = true;
    #####: 1128:            return;
        -: 1129:        }
        -: 1130:    }
        -: 1131:
    #####: 1132:    if (!mSettings.nofail.isSuppressed(errorMessage) && !mSettings.nomsg.isSuppressed(errorMessage)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1133:        mExitCode = 1;
        -: 1134:    }
        -: 1135:
    #####: 1136:    mErrorList.push_back(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1137:
    #####: 1138:    mErrorLogger.reportErr(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1139:    mAnalyzerInformation.reportErr(msg, mSettings.verbose);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1140:    if (!mSettings.plistOutput.empty() && plistFile.is_open()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1141:        plistFile << ErrorLogger::plistData(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 1142:    }
        -: 1143:}
        -: 1144:
function _ZN8CppCheck9reportOutERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1145:void CppCheck::reportOut(const std::string &outmsg)
        -: 1146:{
    #####: 1147:    mErrorLogger.reportOut(outmsg);
call    0 never executed
    #####: 1148:}
        -: 1149:
function _ZN8CppCheck14reportProgressERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcm called 0 returned 0% blocks executed 0%
    #####: 1150:void CppCheck::reportProgress(const std::string &filename, const char stage[], const std::size_t value)
        -: 1151:{
    #####: 1152:    mErrorLogger.reportProgress(filename, stage, value);
call    0 never executed
    #####: 1153:}
        -: 1154:
function _ZN8CppCheck10reportInfoERKN11ErrorLogger12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####: 1155:void CppCheck::reportInfo(const ErrorLogger::ErrorMessage &msg)
        -: 1156:{
    #####: 1157:    const Suppressions::ErrorMessage &errorMessage = msg.toSuppressionsErrorMessage();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1158:    if (!mSettings.nomsg.isSuppressed(errorMessage))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1159:        mErrorLogger.reportInfo(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1160:}
        -: 1161:
function _ZN8CppCheck12reportStatusEjjmm called 0 returned 0% blocks executed 0%
    #####: 1162:void CppCheck::reportStatus(unsigned int /*fileindex*/, unsigned int /*filecount*/, std::size_t /*sizedone*/, std::size_t /*sizetotal*/)
        -: 1163:{
        -: 1164:
    #####: 1165:}
        -: 1166:
function _ZN8CppCheck16getErrorMessagesEv called 0 returned 0% blocks executed 0%
    #####: 1167:void CppCheck::getErrorMessages()
        -: 1168:{
    #####: 1169:    Settings s(mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1170:    s.addEnabled("warning");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1171:    s.addEnabled("style");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1172:    s.addEnabled("portability");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1173:    s.addEnabled("performance");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1174:    s.addEnabled("information");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1175:
    #####: 1176:    purgedConfigurationMessage("","");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 1177:
    #####: 1178:    mTooManyConfigs = true;
    #####: 1179:    tooManyConfigsError("",0U);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1180:
        -: 1181:    // call all "getErrorMessages" in all registered Check classes
    #####: 1182:    for (std::list<Check *>::const_iterator it = Check::instances().begin(); it != Check::instances().end(); ++it)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 1183:        (*it)->getErrorMessages(this, &s);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1184:
    #####: 1185:    Preprocessor::getErrorMessages(this, &s);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1186:}
        -: 1187:
function _ZN8CppCheck19analyseWholeProgramEv called 0 returned 0% blocks executed 0%
    #####: 1188:bool CppCheck::analyseWholeProgram()
        -: 1189:{
    #####: 1190:    bool errors = false;
        -: 1191:    // Init CTU
    #####: 1192:    CTU::maxCtuDepth = mSettings.maxCtuDepth;
        -: 1193:    // Analyse the tokens
    #####: 1194:    CTU::FileInfo ctu;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1195:    for (const Check::FileInfo *fi : mFileInfo) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1196:        const CTU::FileInfo *fi2 = dynamic_cast<const CTU::FileInfo *>(fi);
branch  0 never executed
branch  1 never executed
    #####: 1197:        if (fi2) {
branch  0 never executed
branch  1 never executed
    #####: 1198:            ctu.functionCalls.insert(ctu.functionCalls.end(), fi2->functionCalls.begin(), fi2->functionCalls.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1199:            ctu.nestedCalls.insert(ctu.nestedCalls.end(), fi2->nestedCalls.begin(), fi2->nestedCalls.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 1200:        }
        -: 1201:    }
    #####: 1202:    for (Check *check : Check::instances())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1203:        errors |= check->analyseWholeProgram(&ctu, mFileInfo, mSettings, *this);  // TODO: ctu
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1204:    return errors && (mExitCode > 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1205:}
        -: 1206:
function _ZN8CppCheck19analyseWholeProgramERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug3mapIS5_mSt4lessIS5_ESaISt4pairIS6_mEEEE called 0 returned 0% blocks executed 0%
    #####: 1207:void CppCheck::analyseWholeProgram(const std::string &buildDir, const std::map<std::string, std::size_t> &files)
        -: 1208:{
        -: 1209:    (void)files;
    #####: 1210:    if (buildDir.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1211:        return;
    #####: 1212:    if (mSettings.isEnabled(Settings::UNUSED_FUNCTION))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1213:        CheckUnusedFunctions::analyseWholeProgram(this, buildDir);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1214:    std::list<Check::FileInfo*> fileInfoList;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1215:    CTU::FileInfo ctuFileInfo;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1216:
        -: 1217:    // Load all analyzer info data..
    #####: 1218:    const std::string filesTxt(buildDir + "/files.txt");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1219:    std::ifstream fin(filesTxt);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1220:    std::string filesTxtLine;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1221:    while (std::getline(fin, filesTxtLine)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1222:        const std::string::size_type firstColon = filesTxtLine.find(':');
call    0 never executed
    #####: 1223:        if (firstColon == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####: 1224:            continue;
    #####: 1225:        const std::string::size_type lastColon = filesTxtLine.rfind(':');
call    0 never executed
    #####: 1226:        if (firstColon == lastColon)
branch  0 never executed
branch  1 never executed
    #####: 1227:            continue;
    #####: 1228:        const std::string xmlfile = buildDir + '/' + filesTxtLine.substr(0,firstColon);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 1229:        //const std::string sourcefile = filesTxtLine.substr(lastColon+1);
        -: 1230:
    #####: 1231:        tinyxml2::XMLDocument doc;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 1232:        const tinyxml2::XMLError error = doc.LoadFile(xmlfile.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1233:        if (error != tinyxml2::XML_SUCCESS)
branch  0 never executed
branch  1 never executed
    #####: 1234:            continue;
        -: 1235:
    #####: 1236:        const tinyxml2::XMLElement * const rootNode = doc.FirstChildElement();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1237:        if (rootNode == nullptr)
branch  0 never executed
branch  1 never executed
    #####: 1238:            continue;
        -: 1239:
    #####: 1240:        for (const tinyxml2::XMLElement *e = rootNode->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1241:            if (std::strcmp(e->Name(), "FileInfo") != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1242:                continue;
    #####: 1243:            const char *checkClassAttr = e->Attribute("check");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1244:            if (!checkClassAttr)
branch  0 never executed
branch  1 never executed
    #####: 1245:                continue;
    #####: 1246:            if (std::strcmp(checkClassAttr, "ctu") == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1247:                ctuFileInfo.loadFromXml(e);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1248:                continue;
        -: 1249:            }
    #####: 1250:            for (Check *check : Check::instances()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1251:                if (checkClassAttr == check->name())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1252:                    fileInfoList.push_back(check->loadFileInfoFromXml(e));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1253:            }
        -: 1254:        }
        -: 1255:    }
        -: 1256:
        -: 1257:    // Set CTU max depth
    #####: 1258:    CTU::maxCtuDepth = mSettings.maxCtuDepth;
        -: 1259:
        -: 1260:    // Analyse the tokens
    #####: 1261:    for (Check *check : Check::instances())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1262:        check->analyseWholeProgram(&ctuFileInfo, fileInfoList, mSettings, *this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1263:
    #####: 1264:    for (Check::FileInfo *fi : fileInfoList)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1265:        delete fi;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1266:}
        -: 1267:
function _ZNK8CppCheck28isUnusedFunctionCheckEnabledEv called 0 returned 0% blocks executed 0%
    #####: 1268:bool CppCheck::isUnusedFunctionCheckEnabled() const
        -: 1269:{
    #####: 1270:    return (mSettings.jobs == 1 && mSettings.isEnabled(Settings::UNUSED_FUNCTION));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
function _GLOBAL__sub_I__ZN8CppCheckC2ER11ErrorLoggerb called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 1271:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
