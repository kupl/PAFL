        -:    0:Source:/home/workspace/lib/standards.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/settings.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/settings.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#ifndef standardsH
        -:   21:#define standardsH
        -:   22://---------------------------------------------------------------------------
        -:   23:
        -:   24:#include <string>
        -:   25:
        -:   26:/// @addtogroup Core
        -:   27:/// @{
        -:   28:
        -:   29:
        -:   30:/**
        -:   31: * @brief This is just a container for standards settings.
        -:   32: * This struct contains all possible standards that cppcheck recognize.
        -:   33: */
        -:   34:struct Standards {
        -:   35:    /** C code C89/C99/C11 standard */
        -:   36:    enum cstd_t { C89, C99, C11, CLatest=C11 } c;
        -:   37:
        -:   38:    /** C++ code standard */
        -:   39:    enum cppstd_t { CPP03, CPP11, CPP14, CPP17, CPP20, CPPLatest=CPP20 } cpp;
        -:   40:
        -:   41:    /** This constructor clear all the variables **/
function _ZN9StandardsC2Ev called 0 returned 0% blocks executed 0%
    #####:   42:    Standards() : c(C11), cpp(CPPLatest) {}
        -:   43:
        -:   44:    bool setC(const std::string& str) {
        -:   45:        if (str == "c89" || str == "C89") {
        -:   46:            c = C89;
        -:   47:            return true;
        -:   48:        }
        -:   49:        if (str == "c99" || str == "C99") {
        -:   50:            c = C99;
        -:   51:            return true;
        -:   52:        }
        -:   53:        if (str == "c11" || str == "C11") {
        -:   54:            c = C11;
        -:   55:            return true;
        -:   56:        }
        -:   57:        return false;
        -:   58:    }
        -:   59:    const std::string getC(void) const {
        -:   60:        switch (c) {
        -:   61:        case C89:
        -:   62:            return "c89";
        -:   63:        case C99:
        -:   64:            return "c99";
        -:   65:        case C11:
        -:   66:            return "c11";
        -:   67:        }
        -:   68:        return "";
        -:   69:    }
        -:   70:    bool setCPP(const std::string& str) {
        -:   71:        if (str == "c++03" || str == "C++03") {
        -:   72:            cpp = CPP03;
        -:   73:            return true;
        -:   74:        }
        -:   75:        if (str == "c++11" || str == "C++11") {
        -:   76:            cpp = CPP11;
        -:   77:            return true;
        -:   78:        }
        -:   79:        if (str == "c++14" || str == "C++14") {
        -:   80:            cpp = CPP14;
        -:   81:            return true;
        -:   82:        }
        -:   83:        if (str == "c++17" || str == "C++17") {
        -:   84:            cpp = CPP17;
        -:   85:            return true;
        -:   86:        }
        -:   87:        if (str == "c++20" || str == "C++20") {
        -:   88:            cpp = CPP20;
        -:   89:            return true;
        -:   90:        }
        -:   91:        return false;
        -:   92:    }
        -:   93:    const std::string getCPP(void) const {
        -:   94:        switch (cpp) {
        -:   95:        case CPP03:
        -:   96:            return "c++03";
        -:   97:        case CPP11:
        -:   98:            return "c++11";
        -:   99:        case CPP14:
        -:  100:            return "c++14";
        -:  101:        case CPP17:
        -:  102:            return "c++17";
        -:  103:        case CPP20:
        -:  104:            return "c++20";
        -:  105:        }
        -:  106:        return "";
        -:  107:    }
        -:  108:};
        -:  109:
        -:  110:/// @}
        -:  111://---------------------------------------------------------------------------
        -:  112:#endif // standardsH
