        -:    0:Source:/home/workspace/lib/checkbool.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkbool.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkbool.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkboolH
        -:   22:#define checkboolH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:
        -:   28:#include <string>
        -:   29:
        -:   30:class ErrorLogger;
        -:   31:class Settings;
        -:   32:class Token;
        -:   33:class Tokenizer;
        -:   34:
        -:   35:/// @addtogroup Checks
        -:   36:/// @{
        -:   37:
        -:   38:
        -:   39:/** @brief checks dealing with suspicious usage of boolean type (not for evaluating conditions) */
        -:   40:
function _ZN9CheckBoolD0Ev called 0 returned 0% blocks executed 0%
function _ZN9CheckBoolD2Ev called 0 returned 0% blocks executed 0%
    #####:   41:class CPPCHECKLIB CheckBool : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   42:public:
        -:   43:    /** @brief This constructor is used when registering the CheckClass */
function _ZN9CheckBoolC2Ev called 1 returned 100% blocks executed 71%
        1:   44:    CheckBool() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   45:    }
        -:   46:
        -:   47:    /** @brief This constructor is used when running checks. */
function _ZN9CheckBoolC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   48:    CheckBool(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   49:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   50:    }
        -:   51:
        -:   52:    /** @brief Run checks against the normal token list */
function _ZN9CheckBool9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   53:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   54:        CheckBool checkBool(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   55:
        -:   56:        // Checks
    #####:   57:        checkBool.checkComparisonOfBoolExpressionWithInt();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:        checkBool.checkComparisonOfBoolWithInt();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:        checkBool.checkAssignBoolToFloat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:        checkBool.pointerArithBool();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:        checkBool.returnValueOfFunctionReturningBool();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:        checkBool.checkComparisonOfFuncReturningBool();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:        checkBool.checkComparisonOfBoolWithBool();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:        checkBool.checkIncrementBoolean();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:        checkBool.checkAssignBoolToPointer();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   66:        checkBool.checkBitwiseOnBoolean();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:    }
        -:   68:
        -:   69:    /** @brief %Check for comparison of function returning bool*/
        -:   70:    void checkComparisonOfFuncReturningBool();
        -:   71:
        -:   72:    /** @brief %Check for comparison of variable of type bool*/
        -:   73:    void checkComparisonOfBoolWithBool();
        -:   74:
        -:   75:    /** @brief %Check for using postfix increment on bool */
        -:   76:    void checkIncrementBoolean();
        -:   77:
        -:   78:    /** @brief %Check for suspicious comparison of a bool and a non-zero (and non-one) value (e.g. "if (!x==4)") */
        -:   79:    void checkComparisonOfBoolWithInt();
        -:   80:
        -:   81:    /** @brief assigning bool to pointer */
        -:   82:    void checkAssignBoolToPointer();
        -:   83:
        -:   84:    /** @brief assigning bool to float */
        -:   85:    void checkAssignBoolToFloat();
        -:   86:
        -:   87:    /** @brief %Check for using bool in bitwise expression */
        -:   88:    void checkBitwiseOnBoolean();
        -:   89:
        -:   90:    /** @brief %Check for comparing a bool expression with an integer other than 0 or 1 */
        -:   91:    void checkComparisonOfBoolExpressionWithInt();
        -:   92:
        -:   93:    /** @brief %Check for 'if (p+1)' etc. either somebody forgot to dereference, or else somebody uses pointer overflow */
        -:   94:    void pointerArithBool();
        -:   95:    void pointerArithBoolCond(const Token *tok);
        -:   96:
        -:   97:    /** @brief %Check if a function returning bool returns an integer other than 0 or 1 */
        -:   98:    void returnValueOfFunctionReturningBool();
        -:   99:
        -:  100:private:
        -:  101:    // Error messages..
        -:  102:    void comparisonOfFuncReturningBoolError(const Token *tok, const std::string &expression);
        -:  103:    void comparisonOfTwoFuncsReturningBoolError(const Token *tok, const std::string &expression1, const std::string &expression2);
        -:  104:    void comparisonOfBoolWithBoolError(const Token *tok, const std::string &expression);
        -:  105:    void incrementBooleanError(const Token *tok);
        -:  106:    void comparisonOfBoolWithInvalidComparator(const Token *tok, const std::string &expression);
        -:  107:    void assignBoolToPointerError(const Token *tok);
        -:  108:    void assignBoolToFloatError(const Token *tok);
        -:  109:    void bitwiseOnBooleanError(const Token *tok, const std::string &varname, const std::string &op);
        -:  110:    void comparisonOfBoolExpressionWithIntError(const Token *tok, bool n0o1);
        -:  111:    void pointerArithBoolError(const Token *tok);
        -:  112:    void returnValueBoolError(const Token *tok);
        -:  113:
function _ZNK9CheckBool16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  114:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:  115:        CheckBool c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  116:
    #####:  117:        c.assignBoolToPointerError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:        c.assignBoolToFloatError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  119:        c.comparisonOfFuncReturningBoolError(nullptr, "func_name");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  120:        c.comparisonOfTwoFuncsReturningBoolError(nullptr, "func_name1", "func_name2");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  121:        c.comparisonOfBoolWithBoolError(nullptr, "var_name");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  122:        c.incrementBooleanError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  123:        c.bitwiseOnBooleanError(nullptr, "varname", "&&");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  124:        c.comparisonOfBoolExpressionWithIntError(nullptr, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  125:        c.pointerArithBoolError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:        c.comparisonOfBoolWithInvalidComparator(nullptr, "expression");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  127:        c.returnValueBoolError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  128:    }
        -:  129:
function _ZN9CheckBool6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  130:    static std::string myName() {
    #####:  131:        return "Boolean";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  132:    }
        -:  133:
function _ZNK9CheckBool9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  134:    std::string classInfo() const OVERRIDE {
        -:  135:        return "Boolean type checks\n"
        -:  136:               "- using increment on boolean\n"
        -:  137:               "- comparison of a boolean expression with an integer other than 0 or 1\n"
        -:  138:               "- comparison of a function returning boolean value using relational operator\n"
        -:  139:               "- comparison of a boolean value with boolean value using relational operator\n"
        -:  140:               "- using bool in bitwise expression\n"
        -:  141:               "- pointer addition in condition (either dereference is forgot or pointer overflow is required to make the condition false)\n"
        -:  142:               "- Assigning bool value to pointer or float\n"
    #####:  143:               "- Returning an integer other than 0 or 1 from a function with boolean return value\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  144:    }
        -:  145:};
        -:  146:/// @}
        -:  147://---------------------------------------------------------------------------
        -:  148:#endif // checkboolH
