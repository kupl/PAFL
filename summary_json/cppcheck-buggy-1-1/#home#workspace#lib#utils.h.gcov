        -:    0:Source:/home/workspace/lib/utils.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#ifndef utilsH
        -:   21:#define utilsH
        -:   22://---------------------------------------------------------------------------
        -:   23:
        -:   24:#include <algorithm>
        -:   25:#include <cctype>
        -:   26:#include <cstddef>
        -:   27:#include <string>
        -:   28:
        -:   29:inline bool endsWith(const std::string &str, char c)
        -:   30:{
        -:   31:    return str[str.size()-1U] == c;
        -:   32:}
        -:   33:
        -:   34:inline bool endsWith(const std::string &str, const char end[], std::size_t endlen)
        -:   35:{
        -:   36:    return (str.size() >= endlen) && (str.compare(str.size()-endlen, endlen, end)==0);
        -:   37:}
        -:   38:
function _ZL14getOrdinalTexti called 2 returned 100% blocks executed 38%
        2:   39:inline static const char *getOrdinalText(int i)
        -:   40:{
        2:   41:    if (i == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   42:        return "st";
    #####:   43:    if (i == 2)
branch  0 never executed
branch  1 never executed
    #####:   44:        return "nd";
    #####:   45:    if (i == 3)
branch  0 never executed
branch  1 never executed
    #####:   46:        return "rd";
    #####:   47:    return "th";
        -:   48:}
        -:   49:
        -:   50:inline static int caseInsensitiveStringCompare(const std::string &lhs, const std::string &rhs)
        -:   51:{
        -:   52:    if (lhs.size() != rhs.size())
        -:   53:        return (lhs.size() < rhs.size()) ? -1 : 1;
        -:   54:    for (unsigned int i = 0; i < lhs.size(); ++i) {
        -:   55:        const int c1 = std::toupper(lhs[i]);
        -:   56:        const int c2 = std::toupper(rhs[i]);
        -:   57:        if (c1 != c2)
        -:   58:            return (c1 < c2) ? -1 : 1;
        -:   59:    }
        -:   60:    return 0;
        -:   61:}
        -:   62:
        -:   63:#define UNUSED(x) (void)(x)
        -:   64:
        -:   65:// Use the nonneg macro when you want to assert that a variable/argument is not negative
        -:   66:#ifdef __CPPCHECK__
        -:   67:#define nonneg   __cppcheck_low__(0)
        -:   68:#elif defined(NONNEG)
        -:   69:// Enable non-negative values checking
        -:   70:// TODO : investigate using annotations/contracts for stronger value checking
        -:   71:#define nonneg   unsigned
        -:   72:#else
        -:   73:// Disable non-negative values checking
        -:   74:#define nonneg
        -:   75:#endif
        -:   76:
        -:   77:#if defined(__has_feature)
        -:   78:#if __has_feature(address_sanitizer)
        -:   79:#define ASAN 1
        -:   80:#endif
        -:   81:#endif
        -:   82:
        -:   83:#ifndef ASAN
        -:   84:#ifdef  __SANITIZE_ADDRESS__
        -:   85:#define ASAN 1
        -:   86:#else
        -:   87:#define ASAN 0
        -:   88:#endif
        -:   89:#endif
        -:   90:
        -:   91:#endif
