        -:    0:Source:/home/workspace/lib/token.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/token.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/token.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "token.h"
        -:   20:
        -:   21:#include "astutils.h"
        -:   22:#include "errorlogger.h"
        -:   23:#include "library.h"
        -:   24:#include "settings.h"
        -:   25:#include "symboldatabase.h"
        -:   26:#include "utils.h"
        -:   27:
        -:   28:#include <cassert>
        -:   29:#include <cctype>
        -:   30:#include <cstring>
        -:   31:#include <iostream>
        -:   32:#include <map>
        -:   33:#include <set>
        -:   34:#include <stack>
        -:   35:#include <utility>
        -:   36:
function __tcf_0 called 1 returned 100% blocks executed 100%
        2:   37:static const std::string literal_prefix[4] = {"u8", "u", "U", "L"};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
call   20 returned 100%
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
branch 31 taken 80% (fallthrough)
branch 32 taken 20%
call   33 returned 100%
        -:   38:
function _ZL19isStringCharLiteralRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEc called 90158 returned 100% blocks executed 36%
    90158:   39:static bool isStringCharLiteral(const std::string &str, char q)
        -:   40:{
        -:   41:
    90158:   42:    if (!endsWith(str, q))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    90151:   43:        return false;
        7:   44:    if (str[0] == q && str.length() > 1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        7:   45:        return true;
        -:   46:
    #####:   47:    for (const std::string & p: literal_prefix) {
branch  0 never executed
branch  1 never executed
    #####:   48:        if ((str.length() + 1) > p.length() && (str.compare(0, p.size() + 1, (p + q)) == 0))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
    #####:   49:            return true;
        -:   50:    }
    #####:   51:    return false;
        -:   52:}
        1:   53:const std::list<ValueFlow::Value> TokenImpl::mEmptyValueList;
call    0 returned 100%
call    1 returned 100%
        -:   54:
function _ZN5TokenC2EP15TokensFrontBack called 36224 returned 100% blocks executed 83%
    36224:   55:Token::Token(TokensFrontBack *tokensFrontBack) :
        -:   56:    mTokensFrontBack(tokensFrontBack),
        -:   57:    mNext(nullptr),
        -:   58:    mPrevious(nullptr),
        -:   59:    mLink(nullptr),
        -:   60:    mTokType(eNone),
    36224:   61:    mFlags(0)
call    0 returned 100%
call    1 never executed
        -:   62:{
    36224:   63:    mImpl = new TokenImpl();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
    36224:   64:}
        -:   65:
function _ZN5TokenD2Ev called 36224 returned 100% blocks executed 100%
    72448:   66:Token::~Token()
call    0 returned 100%
        -:   67:{
    36224:   68:    delete mImpl;
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
    36224:   69:}
        -:   70:
       12:   71:static const std::set<std::string> controlFlowKeywords = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 92% (fallthrough)
branch 50 taken 8%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
        -:   72:    "goto",
        -:   73:    "do",
        -:   74:    "if",
        -:   75:    "else",
        -:   76:    "for",
        -:   77:    "while",
        -:   78:    "switch",
        -:   79:    "case",
        -:   80:    "break",
        -:   81:    "continue",
        -:   82:    "return"
       11:   83:};
call    0 returned 100%
call    1 never executed
        -:   84:
function _ZN5Token20update_property_infoEv called 45094 returned 100% blocks executed 97%
    45094:   85:void Token::update_property_info()
        -:   86:{
    45094:   87:    setFlag(fIsControlFlowKeyword, controlFlowKeywords.find(mStr) != controlFlowKeywords.end());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
        -:   88:
    45094:   89:    if (!mStr.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    45094:   90:        if (mStr == "true" || mStr == "false")
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       12:   91:            tokType(eBoolean);
call    0 returned 100%
    45082:   92:        else if (isStringCharLiteral(mStr, '\"'))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6:   93:            tokType(eString);
call    0 returned 100%
    45076:   94:        else if (isStringCharLiteral(mStr, '\''))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1:   95:            tokType(eChar);
call    0 returned 100%
    45075:   96:        else if (std::isalpha((unsigned char)mStr[0]) || mStr[0] == '_' || mStr[0] == '$') { // Name
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 38% (fallthrough)
branch 10 taken 62%
    16982:   97:            if (mImpl->mVarId)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:                tokType(eVariable);
call    0 never executed
    16982:   99:            else if (mTokType != eVariable && mTokType != eFunction && mTokType != eType && mTokType != eKeyword)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    16429:  100:                tokType(eName);
call    0 returned 100%
    28093:  101:        } else if (std::isdigit((unsigned char)mStr[0]) || (mStr.length() > 1 && mStr[0] == '-' && std::isdigit((unsigned char)mStr[1])))
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
branch  7 taken 22% (fallthrough)
branch  8 taken 78%
call    9 returned 100%
branch 10 taken 13% (fallthrough)
branch 11 taken 88%
branch 12 taken 15% (fallthrough)
branch 13 taken 85%
     4183:  102:            tokType(eNumber);
call    0 returned 100%
    47824:  103:        else if (mStr == "=" || mStr == "<<=" || mStr == ">>=" ||
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
branch 11 taken 2% (fallthrough)
branch 12 taken 98%
    23578:  104:                 (mStr.size() == 2U && mStr[1] == '=' && std::strchr("+-*/%&^|", mStr[0])))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 30% (fallthrough)
branch  3 taken 70%
call    4 returned 100%
branch  5 taken 13% (fallthrough)
branch  6 taken 87%
      441:  105:            tokType(eAssignmentOp);
call    0 returned 100%
    23469:  106:        else if (mStr.size() == 1 && mStr.find_first_of(",[]()?:") != std::string::npos)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 41% (fallthrough)
branch  5 taken 59%
branch  6 taken 41% (fallthrough)
branch  7 taken 59%
     9534:  107:            tokType(eExtendedOp);
call    0 returned 100%
    13935:  108:        else if (mStr=="<<" || mStr==">>" || (mStr.size()==1 && mStr.find_first_of("+-*/%") != std::string::npos))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
call    9 returned 100%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
branch 12 taken 2% (fallthrough)
branch 13 taken 98%
      280:  109:            tokType(eArithmeticalOp);
call    0 returned 100%
    13655:  110:        else if (mStr.size() == 1 && mStr.find_first_of("&|^~") != std::string::npos)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       23:  111:            tokType(eBitOp);
call    0 returned 100%
    27284:  112:        else if (mStr.size() <= 2 &&
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
    27252:  113:                 (mStr == "&&" ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    27242:  114:                  mStr == "||" ||
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
    13620:  115:                  mStr == "!"))
call    0 returned 100%
       22:  116:            tokType(eLogicalOp);
call    0 returned 100%
    27256:  117:        else if (mStr.size() <= 2 && !mLink &&
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
    27084:  118:                 (mStr == "==" ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    27057:  119:                  mStr == "!=" ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    27011:  120:                  mStr == "<"  ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    26976:  121:                  mStr == "<=" ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    26942:  122:                  mStr == ">"  ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    13454:  123:                  mStr == ">="))
call    0 returned 100%
       96:  124:            tokType(eComparisonOp);
call    0 returned 100%
    13583:  125:        else if (mStr.size() == 2 &&
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 92% (fallthrough)
branch  4 taken 8%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
      123:  126:                 (mStr == "++" ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       59:  127:                  mStr == "--"))
call    0 returned 100%
        5:  128:            tokType(eIncDecOp);
call    0 returned 100%
    13509:  129:        else if (mStr.size() == 1 && (mStr.find_first_of("{}") != std::string::npos || (mLink && mStr.find_first_of("<>") != std::string::npos)))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 94% (fallthrough)
branch 12 taken 6%
    12738:  130:            tokType(eBracket);
call    0 returned 100%
      771:  131:        else if (mStr == "...")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2:  132:            tokType(eEllipsis);
call    0 returned 100%
        -:  133:        else
      769:  134:            tokType(eOther);
call    0 returned 100%
        -:  135:    } else {
    #####:  136:        tokType(eNone);
call    0 never executed
        -:  137:    }
        -:  138:
    45094:  139:    update_property_char_string_literal();
call    0 returned 100%
    45094:  140:    update_property_isStandardType();
call    0 returned 100%
    45094:  141:}
        -:  142:
       12:  143:static const std::set<std::string> stdTypes = { "bool"
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 92% (fallthrough)
branch 50 taken 8%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
        -:  144:                                                , "_Bool"
        -:  145:                                                , "char"
        -:  146:                                                , "double"
        -:  147:                                                , "float"
        -:  148:                                                , "int"
        -:  149:                                                , "long"
        -:  150:                                                , "short"
        -:  151:                                                , "size_t"
        -:  152:                                                , "void"
        -:  153:                                                , "wchar_t"
       11:  154:                                              };
call    0 returned 100%
call    1 never executed
        -:  155:
function _ZN5Token30update_property_isStandardTypeEv called 45094 returned 100% blocks executed 88%
    45094:  156:void Token::update_property_isStandardType()
        -:  157:{
    45094:  158:    isStandardType(false);
call    0 returned 100%
        -:  159:
    45094:  160:    if (mStr.size() < 3)
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
    38124:  161:        return;
        -:  162:
     6970:  163:    if (stdTypes.find(mStr)!=stdTypes.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 14% (fallthrough)
branch  8 taken 86%
call    9 never executed
      971:  164:        isStandardType(true);
call    0 returned 100%
      971:  165:        tokType(eType);
call    0 returned 100%
        -:  166:    }
        -:  167:}
        -:  168:
function _ZN5Token35update_property_char_string_literalEv called 45094 returned 100% blocks executed 62%
    45094:  169:void Token::update_property_char_string_literal()
        -:  170:{
    45094:  171:    if (!(mTokType == Token::eString || mTokType == Token::eChar)) // Token has already been updated
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    45087:  172:        return;
        -:  173:
       35:  174:    for (const std::string & p : literal_prefix) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       84:  175:        if (((mTokType == Token::eString) && mStr.compare(0, p.size() + 1, p + "\"") == 0) ||
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 14% (fallthrough)
branch 12 taken 86%
branch 13 taken 86% (fallthrough)
branch 14 taken 14%
call   15 returned 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 never executed
branch 19 never executed
call   20 never executed
       60:  176:            ((mTokType == Token::eChar) && (mStr.compare(0, p.size() +  1, p + "\'") == 0))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 14% (fallthrough)
branch 10 taken 86%
call   11 returned 100%
branch 12 never executed
branch 13 never executed
call   14 never executed
    #####:  177:            mStr = mStr.substr(p.size());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  178:            isLong(p != "u8");
call    0 never executed
call    1 never executed
    #####:  179:            break;
        -:  180:        }
        -:  181:    }
        -:  182:}
        -:  183:
function _ZNK5Token15isUpperCaseNameEv called 2722 returned 100% blocks executed 100%
     2722:  184:bool Token::isUpperCaseName() const
        -:  185:{
     2722:  186:    if (!isName())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        5:  187:        return false;
     2764:  188:    for (char i : mStr) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
     2756:  189:        if (std::islower(i))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     2709:  190:            return false;
        -:  191:    }
        8:  192:    return true;
        -:  193:}
        -:  194:
function _ZN5Token9concatStrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  195:void Token::concatStr(std::string const& b)
        -:  196:{
    #####:  197:    mStr.erase(mStr.length() - 1);
call    0 never executed
call    1 never executed
    #####:  198:    mStr.append(b.begin() + 1, b.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  199:
    #####:  200:    update_property_info();
call    0 never executed
    #####:  201:}
        -:  202:
function _ZNK5Token8strValueB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  203:std::string Token::strValue() const
        -:  204:{
    #####:  205:    assert(mTokType == eString);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  206:    std::string ret(mStr.substr(1, mStr.length() - 2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  207:    std::string::size_type pos = 0U;
    #####:  208:    while ((pos = ret.find('\\', pos)) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  209:        ret.erase(pos,1U);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  210:        if (ret[pos] >= 'a') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  211:            if (ret[pos] == 'n')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  212:                ret[pos] = '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  213:            else if (ret[pos] == 'r')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  214:                ret[pos] = '\r';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  215:            else if (ret[pos] == 't')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  216:                ret[pos] = '\t';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  217:        }
    #####:  218:        if (ret[pos] == '0')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  219:            return ret.substr(0,pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  220:        pos++;
        -:  221:    }
    #####:  222:    return ret;
call    0 never executed
        -:  223:}
        -:  224:
function _ZN5Token10deleteNextEi called 25 returned 100% blocks executed 87%
       50:  225:void Token::deleteNext(nonneg int count)
        -:  226:{
       75:  227:    while (mNext && count > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
       25:  228:        Token *n = mNext;
        -:  229:
        -:  230:        // #8154 we are about to be unknown -> destroy the link to us
       25:  231:        if (n->mLink && n->mLink->mLink == n)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  232:            n->mLink->link(nullptr);
call    0 returned 100%
        -:  233:
       25:  234:        mNext = n->next();
call    0 returned 100%
       25:  235:        delete n;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
       25:  236:        --count;
        -:  237:    }
        -:  238:
       25:  239:    if (mNext)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       25:  240:        mNext->previous(this);
call    0 returned 100%
    #####:  241:    else if (mTokensFrontBack)
branch  0 never executed
branch  1 never executed
    #####:  242:        mTokensFrontBack->back = this;
       25:  243:}
        -:  244:
function _ZN5Token14deletePreviousEi called 0 returned 0% blocks executed 0%
    #####:  245:void Token::deletePrevious(nonneg int count)
        -:  246:{
    #####:  247:    while (mPrevious && count > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  248:        Token *p = mPrevious;
        -:  249:
        -:  250:        // #8154 we are about to be unknown -> destroy the link to us
    #####:  251:        if (p->mLink && p->mLink->mLink == p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  252:            p->mLink->link(nullptr);
call    0 never executed
        -:  253:
    #####:  254:        mPrevious = p->previous();
call    0 never executed
    #####:  255:        delete p;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  256:        --count;
        -:  257:    }
        -:  258:
    #####:  259:    if (mPrevious)
branch  0 never executed
branch  1 never executed
    #####:  260:        mPrevious->next(this);
call    0 never executed
    #####:  261:    else if (mTokensFrontBack)
branch  0 never executed
branch  1 never executed
    #####:  262:        mTokensFrontBack->front = this;
    #####:  263:}
        -:  264:
function _ZN5Token12swapWithNextEv called 0 returned 0% blocks executed 0%
    #####:  265:void Token::swapWithNext()
        -:  266:{
    #####:  267:    if (mNext) {
branch  0 never executed
branch  1 never executed
    #####:  268:        std::swap(mStr, mNext->mStr);
call    0 never executed
    #####:  269:        std::swap(mTokType, mNext->mTokType);
call    0 never executed
    #####:  270:        std::swap(mFlags, mNext->mFlags);
call    0 never executed
    #####:  271:        std::swap(mImpl, mNext->mImpl);
call    0 never executed
    #####:  272:        for (auto templateSimplifierPointer : mImpl->mTemplateSimplifierPointers) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  273:            templateSimplifierPointer->token(this);
call    0 never executed
        -:  274:        }
        -:  275:
    #####:  276:        for (auto templateSimplifierPointer : mNext->mImpl->mTemplateSimplifierPointers) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  277:            templateSimplifierPointer->token(mNext);
call    0 never executed
        -:  278:        }
    #####:  279:        if (mNext->mLink)
branch  0 never executed
branch  1 never executed
    #####:  280:            mNext->mLink->mLink = this;
    #####:  281:        if (this->mLink)
branch  0 never executed
branch  1 never executed
    #####:  282:            this->mLink->mLink = mNext;
    #####:  283:        std::swap(mLink, mNext->mLink);
call    0 never executed
        -:  284:    }
    #####:  285:}
        -:  286:
function _ZN5Token8takeDataEPS_ called 10 returned 100% blocks executed 82%
       10:  287:void Token::takeData(Token *fromToken)
        -:  288:{
       10:  289:    mStr = fromToken->mStr;
call    0 returned 100%
       10:  290:    tokType(fromToken->mTokType);
call    0 returned 100%
       10:  291:    mFlags = fromToken->mFlags;
       10:  292:    delete mImpl;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
       10:  293:    mImpl = fromToken->mImpl;
       10:  294:    fromToken->mImpl = nullptr;
       10:  295:    for (auto templateSimplifierPointer : mImpl->mTemplateSimplifierPointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
    #####:  296:        templateSimplifierPointer->token(this);
call    0 never executed
        -:  297:    }
       10:  298:    mLink = fromToken->mLink;
       10:  299:    if (mLink)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        1:  300:        mLink->link(this);
call    0 returned 100%
       10:  301:}
        -:  302:
function _ZN5Token10deleteThisEv called 10 returned 100% blocks executed 38%
       10:  303:void Token::deleteThis()
        -:  304:{
       10:  305:    if (mNext) { // Copy next to this and delete next
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  306:        takeData(mNext);
call    0 returned 100%
       10:  307:        mNext->link(nullptr); // mark as unlinked
call    0 returned 100%
       10:  308:        deleteNext();
call    0 returned 100%
    #####:  309:    } else if (mPrevious && mPrevious->mPrevious) { // Copy previous to this and delete previous
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  310:        takeData(mPrevious);
call    0 never executed
        -:  311:
    #####:  312:        Token* toDelete = mPrevious;
    #####:  313:        mPrevious = mPrevious->mPrevious;
    #####:  314:        mPrevious->mNext = this;
        -:  315:
    #####:  316:        delete toDelete;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  317:    } else {
        -:  318:        // We are the last token in the list, we can't delete
        -:  319:        // ourselves, so just make us empty
    #####:  320:        str("");
call    0 never executed
        -:  321:    }
       10:  322:}
        -:  323:
function _ZN5Token7replaceEPS_S0_S0_ called 0 returned 0% blocks executed 0%
    #####:  324:void Token::replace(Token *replaceThis, Token *start, Token *end)
        -:  325:{
        -:  326:    // Fix the whole in the old location of start and end
    #####:  327:    if (start->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  328:        start->previous()->next(end->next());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  329:
    #####:  330:    if (end->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  331:        end->next()->previous(start->previous());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  332:
        -:  333:    // Move start and end to their new location
    #####:  334:    if (replaceThis->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  335:        replaceThis->previous()->next(start);
call    0 never executed
call    1 never executed
        -:  336:
    #####:  337:    if (replaceThis->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  338:        replaceThis->next()->previous(end);
call    0 never executed
call    1 never executed
        -:  339:
    #####:  340:    start->previous(replaceThis->previous());
call    0 never executed
call    1 never executed
    #####:  341:    end->next(replaceThis->next());
call    0 never executed
call    1 never executed
        -:  342:
    #####:  343:    if (end->mTokensFrontBack && end->mTokensFrontBack->back == end) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  344:        while (end->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  345:            end = end->next();
call    0 never executed
    #####:  346:        end->mTokensFrontBack->back = end;
        -:  347:    }
        -:  348:
        -:  349:    // Update mProgressValue, fileIndex and linenr
    #####:  350:    for (Token *tok = start; tok != end->next(); tok = tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  351:        tok->mImpl->mProgressValue = replaceThis->mImpl->mProgressValue;
        -:  352:
        -:  353:    // Delete old token, which is replaced
    #####:  354:    delete replaceThis;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  355:}
        -:  356:
function _ZNK5Token5tokAtEi called 8165219 returned 100% blocks executed 100%
  8165219:  357:const Token *Token::tokAt(int index) const
        -:  358:{
  8165219:  359:    const Token *tok = this;
 24268063:  360:    while (index > 0 && tok) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
  8051422:  361:        tok = tok->next();
call    0 returned 100%
  8051422:  362:        --index;
        -:  363:    }
 16549797:  364:    while (index < 0 && tok) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
  4192289:  365:        tok = tok->previous();
call    0 returned 100%
  4192289:  366:        ++index;
        -:  367:    }
  8165219:  368:    return tok;
        -:  369:}
        -:  370:
function _ZNK5Token6linkAtEi called 21998 returned 100% blocks executed 26%
    21998:  371:const Token *Token::linkAt(int index) const
        -:  372:{
    21998:  373:    const Token *tok = this->tokAt(index);
call    0 returned 100%
    21998:  374:    if (!tok) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  375:        throw InternalError(this, "Internal error. Token::linkAt called with index outside the tokens range.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  376:    }
    21998:  377:    return tok->link();
call    0 returned 100%
        -:  378:}
        -:  379:
function _ZNK5Token5strAtB5cxx11Ei called 4070558 returned 100% blocks executed 100%
  4070558:  380:const std::string &Token::strAt(int index) const
        -:  381:{
  4070558:  382:    const Token *tok = this->tokAt(index);
call    0 returned 100%
  4070558:  383:    return tok ? tok->mStr : emptyString;
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  384:}
        -:  385:
function _ZL19multiComparePercentPK5TokenRPKci called 1791113 returned 100% blocks executed 67%
  1791113:  386:static int multiComparePercent(const Token *tok, const char*& haystack, nonneg int varid)
        -:  387:{
  1791113:  388:    ++haystack;
        -:  389:    // Compare only the first character of the string for optimization reasons
  1791113:  390:    switch (haystack[0]) {
branch  0 taken 0%
branch  1 taken 5%
branch  2 taken 16%
branch  3 taken 4%
branch  4 taken 46%
branch  5 taken 10%
branch  6 taken 4%
branch  7 taken 2%
branch  8 taken 12%
branch  9 taken 0%
    #####:  391:    case '\0':
        -:  392:    case ' ':
        -:  393:    case '|':
        -:  394:        //simple '%' character
    #####:  395:        haystack += 1;
    #####:  396:        if (tok->isArithmeticalOp() && tok->str() == "%")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  397:            return 1;
    #####:  398:        break;
    85230:  399:    case 'v':
    85230:  400:        if (haystack[3] == '%') { // %var%
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    84213:  401:            haystack += 4;
    84213:  402:            if (tok->varId() != 0)
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
     5035:  403:                return 1;
        -:  404:        } else { // %varid%
     1017:  405:            if (varid == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  406:                throw InternalError(tok, "Internal error. Token::Match called with varid 0. Please report this to Cppcheck developers");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  407:            }
        -:  408:
     1017:  409:            haystack += 6;
        -:  410:
     1017:  411:            if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
      388:  412:                return 1;
        -:  413:        }
    79807:  414:        break;
   291932:  415:    case 't':
        -:  416:        // Type (%type%)
        -:  417:    {
   291932:  418:        haystack += 5;
   291932:  419:        if (tok->isName() && tok->varId() == 0 && !tok->isKeyword())
call    0 returned 100%
branch  1 taken 44% (fallthrough)
branch  2 taken 56%
call    3 returned 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
branch  9 taken 43% (fallthrough)
branch 10 taken 57%
   125522:  420:            return 1;
        -:  421:    }
   166410:  422:    break;
    77804:  423:    case 'a':
        -:  424:        // Accept any token (%any%) or assign (%assign%)
        -:  425:    {
    77804:  426:        if (haystack[3] == '%') { // %any%
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     5246:  427:            haystack += 4;
     5246:  428:            return 1;
        -:  429:        } else { // %assign%
    72558:  430:            haystack += 7;
    72558:  431:            if (tok->isAssignmentOp())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      437:  432:                return 1;
        -:  433:        }
        -:  434:    }
    72121:  435:    break;
   830929:  436:    case 'n':
        -:  437:        // Number (%num%) or name (%name%)
        -:  438:    {
   830929:  439:        if (haystack[4] == '%') { // %name%
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   748351:  440:            haystack += 5;
   748351:  441:            if (tok->isName())
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
   270352:  442:                return 1;
        -:  443:        } else {
    82578:  444:            haystack += 4;
    82578:  445:            if (tok->isNumber())
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
    16800:  446:                return 1;
        -:  447:        }
        -:  448:    }
   543777:  449:    break;
   182654:  450:    case 'c': {
   182654:  451:        haystack += 1;
        -:  452:        // Character (%char%)
   182654:  453:        if (haystack[0] == 'h') {
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
    58946:  454:            haystack += 4;
    58946:  455:            if (tok->tokType() == Token::eChar)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2:  456:                return 1;
        -:  457:        }
        -:  458:        // Const operator (%cop%)
   123708:  459:        else if (haystack[1] == 'p') {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
    76629:  460:            haystack += 3;
    76629:  461:            if (tok->isConstOp())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      851:  462:                return 1;
        -:  463:        }
        -:  464:        // Comparison operator (%comp%)
        -:  465:        else {
    47079:  466:            haystack += 4;
    47079:  467:            if (tok->isComparisonOp())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      122:  468:                return 1;
        -:  469:        }
        -:  470:    }
   181679:  471:    break;
    69049:  472:    case 's':
        -:  473:        // String (%str%)
        -:  474:    {
    69049:  475:        haystack += 4;
    69049:  476:        if (tok->tokType() == Token::eString)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6:  477:            return 1;
        -:  478:    }
    69043:  479:    break;
    36598:  480:    case 'b':
        -:  481:        // Bool (%bool%)
        -:  482:    {
    36598:  483:        haystack += 5;
    36598:  484:        if (tok->isBoolean())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        8:  485:            return 1;
        -:  486:    }
    36590:  487:    break;
   216917:  488:    case 'o': {
   216917:  489:        ++haystack;
   216917:  490:        if (haystack[1] == '%') {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -:  491:            // Op (%op%)
   103109:  492:            if (haystack[0] == 'p') {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    34044:  493:                haystack += 2;
    34044:  494:                if (tok->isOp())
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      967:  495:                    return 1;
        -:  496:            }
        -:  497:            // Or (%or%)
        -:  498:            else {
    69065:  499:                haystack += 2;
    69065:  500:                if (tok->tokType() == Token::eBitOp && tok->str() == "|")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  501:                    return 1;
        -:  502:            }
        -:  503:        }
        -:  504:
        -:  505:        // Oror (%oror%)
        -:  506:        else {
   113808:  507:            haystack += 4;
   113808:  508:            if (tok->tokType() == Token::eLogicalOp && tok->str() == "||")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 13% (fallthrough)
branch  6 taken 87%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       24:  509:                return 1;
        -:  510:        }
        -:  511:    }
   215926:  512:    break;
    #####:  513:    default:
        -:  514:        //unknown %cmd%, abort
    #####:  515:        throw InternalError(tok, "Unexpected command");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  516:    }
        -:  517:
  1365353:  518:    if (*haystack == '|')
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
   538801:  519:        haystack += 1;
        -:  520:    else
   826552:  521:        return -1;
        -:  522:
   538801:  523:    return 0xFFFF;
        -:  524:}
        -:  525:
function _ZN5Token12multiCompareEPKS_PKci called 24477356 returned 100% blocks executed 100%
 24477356:  526:int Token::multiCompare(const Token *tok, const char *haystack, nonneg int varid)
        -:  527:{
 24477356:  528:    const char *needle = tok->str().c_str();
call    0 returned 100%
call    1 returned 100%
 24477356:  529:    const char *needlePointer = needle;
        -:  530:    for (;;) {
 60111748:  531:        if (needlePointer == needle && haystack[0] == '%' && haystack[1] != '|' && haystack[1] != '\0' && haystack[1] != ' ') {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
  1791113:  532:            const int ret = multiComparePercent(tok, haystack, varid);
call    0 returned 100%
  1791113:  533:            if (ret < 2)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
  1252312:  534:                return ret;
 58320635:  535:        } else if (*haystack == '|') {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
  6167334:  536:            if (*needlePointer == 0) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  537:                // If needle is at the end, we have a match.
  6167145:  538:                return 1;
        -:  539:            }
        -:  540:
      189:  541:            needlePointer = needle;
      189:  542:            ++haystack;
 52153301:  543:        } else if (*needlePointer == *haystack) {
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
  6552174:  544:            if (*needlePointer == '\0')
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
    96910:  545:                return 1;
  6455264:  546:            ++needlePointer;
  6455264:  547:            ++haystack;
 45601127:  548:        } else if (*haystack == ' ' || *haystack == '\0') {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   233669:  549:            if (needlePointer == needle)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
   162119:  550:                return 0;
    71550:  551:            break;
        -:  552:        }
        -:  553:        // If haystack and needle don't share the same character,
        -:  554:        // find next '|' character.
        -:  555:        else {
 45367458:  556:            needlePointer = needle;
        -:  557:
 62540206:  558:            do {
107907664:  559:                ++haystack;
107907664:  560:            } while (*haystack != ' ' && *haystack != '|' && *haystack);
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 73% (fallthrough)
branch  3 taken 27%
branch  4 taken 81% (fallthrough)
branch  5 taken 19%
        -:  561:
 45367458:  562:            if (*haystack == ' ' || *haystack == '\0') {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 34% (fallthrough)
branch  3 taken 66%
 16727320:  563:                return -1;
        -:  564:            }
        -:  565:
 28640138:  566:            ++haystack;
        -:  567:        }
 35634392:  568:    }
        -:  569:
    71550:  570:    if (*needlePointer == '\0')
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    71325:  571:        return 1;
        -:  572:
      225:  573:    return -1;
        -:  574:}
        -:  575:
function _ZN5Token11simpleMatchEPKS_PKc called 2848992 returned 100% blocks executed 100%
  2848992:  576:bool Token::simpleMatch(const Token *tok, const char pattern[])
        -:  577:{
  2848992:  578:    if (!tok)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     4721:  579:        return false; // shortcut
  2844271:  580:    const char *current  = pattern;
  2844271:  581:    const char *next = std::strchr(pattern, ' ');
  2844271:  582:    if (!next)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
   137469:  583:        next = pattern + std::strlen(pattern);
        -:  584:
  3091489:  585:    while (*current) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
  2921401:  586:        const std::size_t length = next - current;
        -:  587:
  2921401:  588:        if (!tok || length != tok->mStr.length() || std::strncmp(current, tok->mStr.c_str(), length))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 16% (fallthrough)
branch  4 taken 84%
call    5 returned 100%
branch  6 taken 73% (fallthrough)
branch  7 taken 27%
branch  8 taken 96% (fallthrough)
branch  9 taken 4%
  2797792:  589:            return false;
        -:  590:
   123609:  591:        current = next;
   123609:  592:        if (*next) {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
    77130:  593:            next = std::strchr(++current, ' ');
    77130:  594:            if (!next)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
    66440:  595:                next = current + std::strlen(current);
        -:  596:        }
   123609:  597:        tok = tok->next();
call    0 returned 100%
        -:  598:    }
        -:  599:
    46479:  600:    return true;
        -:  601:}
        -:  602:
function _ZN5Token15firstWordEqualsEPKcS1_ called 52973 returned 100% blocks executed 100%
    58148:  603:bool Token::firstWordEquals(const char *str, const char *word)
        -:  604:{
        -:  605:    for (;;) {
    63323:  606:        if (*str != *word) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
    52666:  607:            return (*str == ' ' && *word == 0);
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     5482:  608:        } else if (*str == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
      307:  609:            break;
        -:  610:
     5175:  611:        ++str;
     5175:  612:        ++word;
        -:  613:    }
        -:  614:
      307:  615:    return true;
        -:  616:}
        -:  617:
function _ZN5Token14chrInFirstWordEPKcc called 902501 returned 100% blocks executed 100%
  4347957:  618:const char *Token::chrInFirstWord(const char *str, char c)
        -:  619:{
        -:  620:    for (;;) {
  7793413:  621:        if (*str == ' ' || *str == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    48908:  622:            return nullptr;
        -:  623:
  4299049:  624:        if (*str == c)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
   853593:  625:            return str;
        -:  626:
  3445456:  627:        ++str;
        -:  628:    }
        -:  629:}
        -:  630:
function _ZN5Token5MatchEPKS_PKci called 24643403 returned 100% blocks executed 99%
 24643403:  631:bool Token::Match(const Token *tok, const char pattern[], nonneg int varid)
        -:  632:{
 24643403:  633:    const char *p = pattern;
 39048365:  634:    while (*p) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  635:        // Skip spaces in pattern..
 26911868:  636:        while (*p == ' ')
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
   756155:  637:            ++p;
        -:  638:
        -:  639:        // No token => Success!
 25399558:  640:        if (*p == '\0')
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  641:            break;
        -:  642:
 25399558:  643:        if (!tok) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  644:            // If we have no tokens, pattern "!!else" should return true
    15983:  645:            if (p[0] == '!' && p[1] == '!' && p[2] != '\0') {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
     3799:  646:                while (*p && *p != ' ')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
     1726:  647:                    ++p;
      347:  648:                continue;
        -:  649:            } else
    15289:  650:                return false;
        -:  651:        }
        -:  652:
        -:  653:        // [.. => search for a one-character token..
 25383922:  654:        if (p[0] == '[' && chrInFirstWord(p, ']')) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
branch  3 taken 95% (fallthrough)
branch  4 taken 5%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
   853593:  655:            if (tok->str().length() != 1)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
   229962:  656:                return false;
        -:  657:
   623631:  658:            const char *temp = p+1;
   623631:  659:            bool chrFound = false;
   623631:  660:            int count = 0;
  4249825:  661:            while (*temp && *temp != ' ') {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
  2043652:  662:                if (*temp == ']') {
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
   426554:  663:                    ++count;
        -:  664:                }
        -:  665:
  1617098:  666:                else if (*temp == tok->str()[0]) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
   230555:  667:                    chrFound = true;
   230555:  668:                    break;
        -:  669:                }
        -:  670:
  1813097:  671:                ++temp;
        -:  672:            }
        -:  673:
   623631:  674:            if (count > 1 && tok->str()[0] == ']')
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
      419:  675:                chrFound = true;
        -:  676:
   623631:  677:            if (!chrFound)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
   392657:  678:                return false;
        -:  679:
   230974:  680:            p = temp;
  1663712:  681:            while (*p && *p != ' ')
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
   716369:  682:                ++p;
        -:  683:        }
        -:  684:
        -:  685:        // Parse "not" options. Token can be anything except the given one
 24578230:  686:        else if (p[0] == '!' && p[1] == '!' && p[2] != '\0') {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
    52973:  687:            p += 2;
    52973:  688:            if (firstWordEquals(p, tok->str().c_str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
     5072:  689:                return false;
   167401:  690:            while (*p && *p != ' ')
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 59% (fallthrough)
branch  3 taken 41%
    59750:  691:                ++p;
        -:  692:        }
        -:  693:
        -:  694:        // Parse multi options, such as void|int|char (accept token which is one of these 3)
        -:  695:        else {
 24477356:  696:            const int res = multiCompare(tok, p, varid);
call    0 returned 100%
 24639475:  697:            if (res == 0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  698:                // Empty alternative matches, use the same token on next round
  1826809:  699:                while (*p && *p != ' ')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
   832345:  700:                    ++p;
   162119:  701:                continue;
 24315237:  702:            } else if (res == -1) {
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -:  703:                // No match
 17554097:  704:                return false;
        -:  705:            }
        -:  706:        }
        -:  707:
 72752799:  708:        while (*p && *p != ' ')
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
 32856392:  709:            ++p;
        -:  710:
  7040015:  711:        tok = tok->next();
call    0 returned 100%
        -:  712:    }
        -:  713:
        -:  714:    // The end of the pattern has been reached and nothing wrong has been found
  6446326:  715:    return true;
        -:  716:}
        -:  717:
function _ZN5Token12getStrLengthEPKS_ called 0 returned 0% blocks executed 0%
    #####:  718:nonneg int Token::getStrLength(const Token *tok)
        -:  719:{
    #####:  720:    assert(tok != nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  721:    assert(tok->mTokType == eString);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  722:
    #####:  723:    int len = 0;
    #####:  724:    std::string::const_iterator it = tok->str().begin() + 1U;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  725:    const std::string::const_iterator end = tok->str().end() - 1U;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  726:
    #####:  727:    while (it != end) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:        if (*it == '\\') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  729:            ++it;
call    0 never executed
        -:  730:
        -:  731:            // string ends at '\0'
    #####:  732:            if (*it == '0')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:                return len;
        -:  734:        }
        -:  735:
    #####:  736:        if (*it == '\0')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:            return len;
        -:  738:
    #####:  739:        ++it;
call    0 never executed
    #####:  740:        ++len;
        -:  741:    }
        -:  742:
    #####:  743:    return len;
        -:  744:}
        -:  745:
function _ZN5Token10getStrSizeEPKS_ called 0 returned 0% blocks executed 0%
    #####:  746:nonneg int Token::getStrSize(const Token *tok)
        -:  747:{
    #####:  748:    assert(tok != nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  749:    assert(tok->tokType() == eString);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  750:    const std::string &str = tok->str();
call    0 never executed
    #####:  751:    int sizeofstring = 1;
    #####:  752:    for (int i = 1; i < (int)str.size() - 1; i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  753:        if (str[i] == '\\')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  754:            ++i;
    #####:  755:        ++sizeofstring;
        -:  756:    }
    #####:  757:    return sizeofstring;
        -:  758:}
        -:  759:
function _ZN5Token9getCharAtB5cxx11EPKS_x called 0 returned 0% blocks executed 0%
    #####:  760:std::string Token::getCharAt(const Token *tok, MathLib::bigint index)
        -:  761:{
    #####:  762:    assert(tok != nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  763:
    #####:  764:    std::string::const_iterator it = tok->str().begin() + 1U;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  765:    const std::string::const_iterator end = tok->str().end() - 1U;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  766:
    #####:  767:    while (it != end) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  768:        if (index == 0) {
branch  0 never executed
branch  1 never executed
    #####:  769:            if (*it == '\0')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:                return "\\0";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  771:
    #####:  772:            std::string ret(1, *it);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  773:            if (*it == '\\') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:                ++it;
call    0 never executed
    #####:  775:                ret += *it;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  776:            }
    #####:  777:            return ret;
call    0 never executed
        -:  778:        }
        -:  779:
    #####:  780:        if (*it == '\\')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:            ++it;
call    0 never executed
    #####:  782:        ++it;
call    0 never executed
    #####:  783:        --index;
        -:  784:    }
    #####:  785:    assert(index == 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  786:
    #####:  787:    return "\\0";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  788:}
        -:  789:
function _ZN5Token4moveEPS_S0_S0_ called 0 returned 0% blocks executed 0%
    #####:  790:void Token::move(Token *srcStart, Token *srcEnd, Token *newLocation)
        -:  791:{
        -:  792:    /**[newLocation] -> b -> c -> [srcStart] -> [srcEnd] -> f */
        -:  793:
        -:  794:    // Fix the gap, which tokens to be moved will leave
    #####:  795:    srcStart->previous()->next(srcEnd->next());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  796:    srcEnd->next()->previous(srcStart->previous());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  797:
        -:  798:    // Fix the tokens to be moved
    #####:  799:    srcEnd->next(newLocation->next());
call    0 never executed
call    1 never executed
    #####:  800:    srcStart->previous(newLocation);
call    0 never executed
        -:  801:
        -:  802:    // Fix the tokens at newLocation
    #####:  803:    newLocation->next()->previous(srcEnd);
call    0 never executed
call    1 never executed
    #####:  804:    newLocation->next(srcStart);
call    0 never executed
        -:  805:
        -:  806:    // Update _progressValue
    #####:  807:    for (Token *tok = srcStart; tok != srcEnd->next(); tok = tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  808:        tok->mImpl->mProgressValue = newLocation->mImpl->mProgressValue;
    #####:  809:}
        -:  810:
function _ZNK5Token12nextArgumentEv called 19532 returned 100% blocks executed 95%
    19532:  811:Token* Token::nextArgument() const
        -:  812:{
    40610:  813:    for (const Token* tok = this; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    40610:  814:        if (tok->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
      386:  815:            return tok->next();
call    0 returned 100%
    40224:  816:        else if (tok->link() && Token::Match(tok, "(|{|[|<"))
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
call    3 returned 100%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
      334:  817:            tok = tok->link();
call    0 returned 100%
    39890:  818:        else if (Token::Match(tok, ")|;"))
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
    19146:  819:            return nullptr;
        -:  820:    }
    #####:  821:    return nullptr;
        -:  822:}
        -:  823:
function _ZNK5Token30nextArgumentBeforeCreateLinks2Ev called 0 returned 0% blocks executed 0%
    #####:  824:Token* Token::nextArgumentBeforeCreateLinks2() const
        -:  825:{
    #####:  826:    for (const Token* tok = this; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  827:        if (tok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  828:            return tok->next();
call    0 never executed
    #####:  829:        else if (tok->link() && Token::Match(tok, "(|{|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  830:            tok = tok->link();
call    0 never executed
    #####:  831:        else if (tok->str() == "<") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  832:            const Token* temp = tok->findClosingBracket();
call    0 never executed
    #####:  833:            if (temp)
branch  0 never executed
branch  1 never executed
    #####:  834:                tok = temp;
    #####:  835:        } else if (Token::Match(tok, ")|;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:            return nullptr;
        -:  837:    }
    #####:  838:    return nullptr;
        -:  839:}
        -:  840:
function _ZNK5Token20nextTemplateArgumentEv called 0 returned 0% blocks executed 0%
    #####:  841:Token* Token::nextTemplateArgument() const
        -:  842:{
    #####:  843:    for (const Token* tok = this; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  844:        if (tok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  845:            return tok->next();
call    0 never executed
    #####:  846:        else if (tok->link() && Token::Match(tok, "(|{|[|<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  847:            tok = tok->link();
call    0 never executed
    #####:  848:        else if (Token::Match(tok, ">|;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  849:            return nullptr;
        -:  850:    }
    #####:  851:    return nullptr;
        -:  852:}
        -:  853:
function _ZNK5Token18findClosingBracketEv called 135 returned 100% blocks executed 54%
      135:  854:const Token * Token::findClosingBracket() const
        -:  855:{
      135:  856:    if (mStr != "<")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  857:        return nullptr;
        -:  858:
      135:  859:    const Token *closing = nullptr;
      135:  860:    const bool templateParameter(strAt(-1) == "template");
call    0 returned 100%
call    1 returned 100%
      270:  861:    std::set<std::string> templateParameters;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  862:
      135:  863:    unsigned int depth = 0;
      490:  864:    for (closing = this; closing != nullptr; closing = closing->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      490:  865:        if (Token::Match(closing, "{|[|(")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
       21:  866:            closing = closing->link();
call    0 returned 100%
       21:  867:            if (!closing)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  868:                return nullptr; // #6803
      469:  869:        } else if (Token::Match(closing, "}|]|)|;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2:  870:            return nullptr;
        -:  871:        // we can make some guesses for template parameters
      934:  872:        else if (closing->str() == "<" && closing->previous() && closing->previous()->isName() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 30% (fallthrough)
branch  3 taken 70%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed
branch 16 never executed
branch 17 taken 30% (fallthrough)
branch 18 taken 70%
      467:  873:                 (templateParameter ? templateParameters.find(closing->strAt(-1)) == templateParameters.end() : true))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
      139:  874:            ++depth;
      328:  875:        else if (closing->str() == ">") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 42% (fallthrough)
branch  3 taken 58%
      137:  876:            if (--depth == 0)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      133:  877:                return closing;
      191:  878:        } else if (closing->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  879:            if (depth <= 2)
branch  0 never executed
branch  1 never executed
    #####:  880:                return closing;
    #####:  881:            depth -= 2;
        -:  882:        }
        -:  883:        // save named template parameter
      191:  884:        else if (templateParameter && depth == 1 && closing->str() == "," &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
      191:  885:                 closing->previous()->isName() && !Match(closing->previous(), "class|typename|."))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  886:            templateParameters.insert(closing->strAt(-1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  887:    }
        -:  888:
    #####:  889:    return closing;
        -:  890:}
        -:  891:
function _ZN5Token18findClosingBracketEv called 81 returned 100% blocks executed 100%
       81:  892:Token * Token::findClosingBracket()
        -:  893:{
        -:  894:    // return value of const function
       81:  895:    return const_cast<Token*>(const_cast<const Token*>(this)->findClosingBracket());
call    0 returned 100%
        -:  896:}
        -:  897:
function _ZNK5Token18findOpeningBracketEv called 0 returned 0% blocks executed 0%
    #####:  898:const Token * Token::findOpeningBracket() const
        -:  899:{
    #####:  900:    if (mStr != ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  901:        return nullptr;
        -:  902:
    #####:  903:    const Token *opening = nullptr;
        -:  904:
    #####:  905:    unsigned int depth = 0;
    #####:  906:    for (opening = this; opening != nullptr; opening = opening->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  907:        if (Token::Match(opening, "}|]|)")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  908:            opening = opening->link();
call    0 never executed
    #####:  909:            if (!opening)
branch  0 never executed
branch  1 never executed
    #####:  910:                return nullptr;
    #####:  911:        } else if (Token::Match(opening, "{|{|(|;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  912:            return nullptr;
    #####:  913:        else if (opening->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  914:            ++depth;
    #####:  915:        else if (opening->str() == "<") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  916:            if (--depth == 0)
branch  0 never executed
branch  1 never executed
    #####:  917:                return opening;
        -:  918:        }
        -:  919:    }
        -:  920:
    #####:  921:    return opening;
        -:  922:}
        -:  923:
function _ZN5Token18findOpeningBracketEv called 0 returned 0% blocks executed 0%
    #####:  924:Token * Token::findOpeningBracket()
        -:  925:{
        -:  926:    // return value of const function
    #####:  927:    return const_cast<Token*>(const_cast<const Token*>(this)->findOpeningBracket());
call    0 never executed
        -:  928:}
        -:  929:
        -:  930://---------------------------------------------------------------------------
        -:  931:
function _ZN5Token15findsimplematchEPKS_PKc called 83 returned 100% blocks executed 88%
       83:  932:const Token *Token::findsimplematch(const Token * const startTok, const char pattern[])
        -:  933:{
     2952:  934:    for (const Token* tok = startTok; tok; tok = tok->next()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
     2869:  935:        if (Token::simpleMatch(tok, pattern))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:            return tok;
        -:  937:    }
       83:  938:    return nullptr;
        -:  939:}
        -:  940:
function _ZN5Token15findsimplematchEPKS_PKcS1_ called 20 returned 100% blocks executed 100%
       20:  941:const Token *Token::findsimplematch(const Token * const startTok, const char pattern[], const Token * const end)
        -:  942:{
       68:  943:    for (const Token* tok = startTok; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 74% (fallthrough)
branch  3 taken 26%
call    4 returned 100%
       50:  944:        if (Token::simpleMatch(tok, pattern))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        2:  945:            return tok;
        -:  946:    }
       18:  947:    return nullptr;
        -:  948:}
        -:  949:
function _ZN5Token9findmatchEPKS_PKci called 209 returned 100% blocks executed 88%
      209:  950:const Token *Token::findmatch(const Token * const startTok, const char pattern[], const nonneg int varId)
        -:  951:{
      223:  952:    for (const Token* tok = startTok; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      223:  953:        if (Token::Match(tok, pattern, varId))
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
      209:  954:            return tok;
        -:  955:    }
    #####:  956:    return nullptr;
        -:  957:}
        -:  958:
function _ZN5Token9findmatchEPKS_PKcS1_i called 4184 returned 100% blocks executed 100%
     4184:  959:const Token *Token::findmatch(const Token * const startTok, const char pattern[], const Token * const end, const nonneg int varId)
        -:  960:{
     9353:  961:    for (const Token* tok = startTok; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
call    4 returned 100%
     5237:  962:        if (Token::Match(tok, pattern, varId))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       68:  963:            return tok;
        -:  964:    }
     4116:  965:    return nullptr;
        -:  966:}
        -:  967:
function _ZN5Token8functionEPK8Function called 36823 returned 100% blocks executed 89%
    36823:  968:void Token::function(const Function *f)
        -:  969:{
    36823:  970:    mImpl->mFunction = f;
    36823:  971:    if (f) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      624:  972:        if (f->isLambda())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  973:            tokType(eLambda);
call    0 never executed
        -:  974:        else
      624:  975:            tokType(eFunction);
call    0 returned 100%
    36199:  976:    } else if (mTokType == eFunction)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      214:  977:        tokType(eName);
call    0 returned 100%
    36823:  978:}
        -:  979:
function _ZN5Token11insertTokenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_b called 36030 returned 100% blocks executed 13%
    36030:  980:void Token::insertToken(const std::string &tokenStr, const std::string &originalNameStr, bool prepend)
        -:  981:{
        -:  982:    Token *newToken;
    36030:  983:    if (mStr.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  984:        newToken = this;
        -:  985:    else
    36030:  986:        newToken = new Token(mTokensFrontBack);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
call    5 never executed
call    6 never executed
    36030:  987:    newToken->str(tokenStr);
call    0 returned 100%
    36030:  988:    if (!originalNameStr.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  989:        newToken->originalName(originalNameStr);
call    0 never executed
        -:  990:
    36030:  991:    if (newToken != this) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    36030:  992:        newToken->mImpl->mLineNumber = mImpl->mLineNumber;
    36030:  993:        newToken->mImpl->mFileIndex = mImpl->mFileIndex;
    36030:  994:        newToken->mImpl->mProgressValue = mImpl->mProgressValue;
        -:  995:
    36030:  996:        if (prepend) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  997:            if (this->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  998:                newToken->previous(this->previous());
call    0 never executed
call    1 never executed
    #####:  999:                newToken->previous()->next(newToken);
call    0 never executed
call    1 never executed
    #####: 1000:            } else if (mTokensFrontBack) {
branch  0 never executed
branch  1 never executed
    #####: 1001:                mTokensFrontBack->front = newToken;
        -: 1002:            }
    #####: 1003:            this->previous(newToken);
call    0 never executed
    #####: 1004:            newToken->next(this);
call    0 never executed
        -: 1005:        } else {
    36030: 1006:            if (this->next()) {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
     4305: 1007:                newToken->next(this->next());
call    0 returned 100%
call    1 returned 100%
     4305: 1008:                newToken->next()->previous(newToken);
call    0 returned 100%
call    1 returned 100%
    31725: 1009:            } else if (mTokensFrontBack) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    31725: 1010:                mTokensFrontBack->back = newToken;
        -: 1011:            }
    36030: 1012:            this->next(newToken);
call    0 returned 100%
    36030: 1013:            newToken->previous(this);
call    0 returned 100%
        -: 1014:        }
        -: 1015:
    36030: 1016:        if (mImpl->mScopeInfo) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1017:            // If the brace is immediately closed there is no point opening a new scope for it
        4: 1018:            if (tokenStr == "{") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1019:                std::string nextScopeNameAddition = "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 1020:                // This might be the opening of a member function
    #####: 1021:                Token *tok1 = newToken;
    #####: 1022:                while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1023:                    tok1 = tok1->previous();
call    0 never executed
    #####: 1024:                if (tok1 && tok1->previous() && tok1->strAt(-1) == ")") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1025:                    tok1 = tok1->linkAt(-1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1026:                    if (Token::Match(tok1->previous(), "throw|noexcept")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1027:                        tok1 = tok1->previous();
call    0 never executed
    #####: 1028:                        while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1029:                            tok1 = tok1->previous();
call    0 never executed
    #####: 1030:                        if (tok1->strAt(-1) != ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1031:                            return;
    #####: 1032:                    } else if (Token::Match(newToken->tokAt(-2), ":|, %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1033:                        tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1034:                        if (tok1->strAt(-1) != ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1035:                            return;
        -: 1036:                    }
    #####: 1037:                    if (tok1->strAt(-1) == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1038:                        tok1 = tok1->previous()->findOpeningBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1039:                    if (tok1 && Token::Match(tok1->tokAt(-3), "%name% :: %name%")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1040:                        tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1041:                        std::string scope = tok1->strAt(-1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1042:                        while (Token::Match(tok1->tokAt(-2), ":: %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1043:                            scope = tok1->strAt(-3) + " :: " + scope;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1044:                            tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1045:                        }
        -: 1046:
    #####: 1047:                        if (!nextScopeNameAddition.empty() && !scope.empty()) nextScopeNameAddition += " :: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1048:                        nextScopeNameAddition += scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1049:                    }
        -: 1050:                }
        -: 1051:
        -: 1052:                // Or it might be a namespace/class/struct
    #####: 1053:                if (Token::Match(newToken->previous(), "%name%|>")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1054:                    Token* nameTok = newToken->previous();
call    0 never executed
    #####: 1055:                    while (nameTok && !Token::Match(nameTok, "namespace|class|struct|union %name% {|::|:|<")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1056:                        nameTok = nameTok->previous();
call    0 never executed
        -: 1057:                    }
    #####: 1058:                    if (nameTok) {
branch  0 never executed
branch  1 never executed
    #####: 1059:                        for (nameTok = nameTok->next(); nameTok && !Token::Match(nameTok, "{|:|<"); nameTok = nameTok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1060:                            nextScopeNameAddition.append(nameTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1061:                            nextScopeNameAddition.append(" ");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:                        }
    #####: 1063:                        if (nextScopeNameAddition.length() > 0) nextScopeNameAddition = nextScopeNameAddition.substr(0, nextScopeNameAddition.length() - 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1064:                    }
        -: 1065:                }
        -: 1066:
        -: 1067:                // New scope is opening, record it here
    #####: 1068:                std::shared_ptr<ScopeInfo2> newScopeInfo = std::make_shared<ScopeInfo2>(mImpl->mScopeInfo->name, nullptr, mImpl->mScopeInfo->usingNamespaces);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -: 1069:
    #####: 1070:                if (!newScopeInfo->name.empty() && !nextScopeNameAddition.empty()) newScopeInfo->name.append(" :: ");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1071:                newScopeInfo->name.append(nextScopeNameAddition);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1072:                nextScopeNameAddition = "";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1073:
    #####: 1074:                newToken->scopeInfo(newScopeInfo);
call    0 never executed
call    1 never executed
call    2 never executed
        4: 1075:            } else if (tokenStr == "}") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1076:                Token* matchingTok = newToken->previous();
call    0 never executed
    #####: 1077:                int depth = 0;
    #####: 1078:                while (matchingTok && (depth != 0 || !Token::simpleMatch(matchingTok, "{"))) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1079:                    if (Token::simpleMatch(matchingTok, "}")) depth++;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1080:                    if (Token::simpleMatch(matchingTok, "{")) depth--;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1081:                    matchingTok = matchingTok->previous();
call    0 never executed
        -: 1082:                }
    #####: 1083:                if (matchingTok && matchingTok->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1084:                    newToken->mImpl->mScopeInfo = matchingTok->previous()->scopeInfo();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1085:                }
        -: 1086:            } else {
        4: 1087:                if (prepend && newToken->previous()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1088:                    newToken->mImpl->mScopeInfo = newToken->previous()->scopeInfo();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1089:                } else {
        4: 1090:                    newToken->mImpl->mScopeInfo = mImpl->mScopeInfo;
call    0 returned 100%
        -: 1091:                }
        4: 1092:                if (tokenStr == ";") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1093:                    const Token* statementStart;
    #####: 1094:                    for (statementStart = newToken; statementStart->previous() && !Token::Match(statementStart->previous(), ";|{"); statementStart = statementStart->previous());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 1095:                    if (Token::Match(statementStart, "using namespace %name% ::|;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1096:                        const Token * tok1 = statementStart->tokAt(2);
call    0 never executed
    #####: 1097:                        std::string nameSpace;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1098:                        while (tok1 && tok1->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1099:                            if (!nameSpace.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1100:                                nameSpace += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1101:                            nameSpace += tok1->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1102:                            tok1 = tok1->next();
call    0 never executed
        -: 1103:                        }
    #####: 1104:                        mImpl->mScopeInfo->usingNamespaces.insert(nameSpace);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1105:                    }
        -: 1106:                }
        -: 1107:            }
        -: 1108:        }
        -: 1109:    }
        -: 1110:}
        -: 1111:
function _ZN5Token11eraseTokensEPS_PKS_ called 3 returned 100% blocks executed 92%
        3: 1112:void Token::eraseTokens(Token *begin, const Token *end)
        -: 1113:{
        3: 1114:    if (!begin || begin == end)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1115:        return;
        -: 1116:
        8: 1117:    while (begin->next() && begin->next() != end) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 73% (fallthrough)
branch  5 taken 27%
branch  6 taken 73% (fallthrough)
branch  7 taken 27%
        8: 1118:        begin->deleteNext();
call    0 returned 100%
        -: 1119:    }
        -: 1120:}
        -: 1121:
function _ZN5Token17createMutualLinksEPS_S0_ called 11101 returned 100% blocks executed 67%
    11101: 1122:void Token::createMutualLinks(Token *begin, Token *end)
        -: 1123:{
    11101: 1124:    assert(begin != nullptr);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    11101: 1125:    assert(end != nullptr);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    11101: 1126:    assert(begin != end);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    11101: 1127:    begin->link(end);
call    0 returned 100%
    11101: 1128:    end->link(begin);
call    0 returned 100%
    11101: 1129:}
        -: 1130:
function _ZNK5Token8printOutEPKc called 0 returned 0% blocks executed 0%
    #####: 1131:void Token::printOut(const char *title) const
        -: 1132:{
    #####: 1133:    if (title && title[0])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1134:        std::cout << "\n### " << title << " ###\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1135:    std::cout << stringifyList(true, true, true, true, true, nullptr, nullptr) << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1136:}
        -: 1137:
function _ZNK5Token8printOutEPKcRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEE called 0 returned 0% blocks executed 0%
    #####: 1138:void Token::printOut(const char *title, const std::vector<std::string> &fileNames) const
        -: 1139:{
    #####: 1140:    if (title && title[0])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1141:        std::cout << "\n### " << title << " ###\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1142:    std::cout << stringifyList(true, true, true, true, true, &fileNames, nullptr) << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1143:}
        -: 1144:
function _ZNK5Token9stringifyERSobbb called 0 returned 0% blocks executed 0%
    #####: 1145:void Token::stringify(std::ostream& os, bool varid, bool attributes, bool macro) const
        -: 1146:{
    #####: 1147:    if (attributes) {
branch  0 never executed
branch  1 never executed
    #####: 1148:        if (isUnsigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1149:            os << "unsigned ";
call    0 never executed
    #####: 1150:        else if (isSigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1151:            os << "signed ";
call    0 never executed
    #####: 1152:        if (isComplex())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1153:            os << "_Complex ";
call    0 never executed
    #####: 1154:        if (isLong()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1155:            if (mTokType == eString || mTokType == eChar)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1156:                os << "L";
call    0 never executed
        -: 1157:            else
    #####: 1158:                os << "long ";
call    0 never executed
        -: 1159:        }
        -: 1160:    }
    #####: 1161:    if (macro && isExpandedMacro())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1162:        os << "$";
call    0 never executed
    #####: 1163:    if (isName() && mStr.find(' ') != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1164:        for (char i : mStr) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 1165:            if (i != ' ')
branch  0 never executed
branch  1 never executed
    #####: 1166:                os << i;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1167:        }
    #####: 1168:    } else if (mStr[0] != '\"' || mStr.find('\0') == std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1169:        os << mStr;
call    0 never executed
        -: 1170:    else {
    #####: 1171:        for (char i : mStr) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 1172:            if (i == '\0')
branch  0 never executed
branch  1 never executed
    #####: 1173:                os << "\\0";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1174:            else
    #####: 1175:                os << i;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1176:        }
        -: 1177:    }
    #####: 1178:    if (varid && mImpl->mVarId != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1179:        os << '@' << mImpl->mVarId;
call    0 never executed
call    1 never executed
    #####: 1180:}
call    0 never executed
        -: 1181:
function _ZNK5Token13stringifyListEbbbbbPKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEPKS_ called 0 returned 0% blocks executed 0%
    #####: 1182:std::string Token::stringifyList(bool varid, bool attributes, bool linenumbers, bool linebreaks, bool files, const std::vector<std::string>* fileNames, const Token* end) const
        -: 1183:{
    #####: 1184:    if (this == end)
branch  0 never executed
branch  1 never executed
    #####: 1185:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1186:
    #####: 1187:    std::ostringstream ret;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1188:
    #####: 1189:    unsigned int lineNumber = mImpl->mLineNumber - (linenumbers ? 1U : 0U);
branch  0 never executed
branch  1 never executed
    #####: 1190:    unsigned int fileIndex = files ? ~0U : mImpl->mFileIndex;
branch  0 never executed
branch  1 never executed
    #####: 1191:    std::map<int, unsigned int> lineNumbers;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1192:    for (const Token *tok = this; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1193:        bool fileChange = false;
    #####: 1194:        if (tok->mImpl->mFileIndex != fileIndex) {
branch  0 never executed
branch  1 never executed
    #####: 1195:            if (fileIndex != ~0U) {
branch  0 never executed
branch  1 never executed
    #####: 1196:                lineNumbers[fileIndex] = tok->mImpl->mFileIndex;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1197:            }
        -: 1198:
    #####: 1199:            fileIndex = tok->mImpl->mFileIndex;
    #####: 1200:            if (files) {
branch  0 never executed
branch  1 never executed
    #####: 1201:                ret << "\n\n##file ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1202:                if (fileNames && fileNames->size() > tok->mImpl->mFileIndex)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1203:                    ret << fileNames->at(tok->mImpl->mFileIndex);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1204:                else
    #####: 1205:                    ret << fileIndex;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1206:                ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1207:            }
        -: 1208:
    #####: 1209:            lineNumber = lineNumbers[fileIndex];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1210:            fileChange = true;
        -: 1211:        }
        -: 1212:
    #####: 1213:        if (linebreaks && (lineNumber != tok->linenr() || fileChange)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1214:            if (lineNumber+4 < tok->linenr() && fileIndex == tok->mImpl->mFileIndex) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1215:                ret << '\n' << lineNumber+1 << ":\n|\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1216:                ret << tok->linenr()-1 << ":\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1217:                ret << tok->linenr() << ": ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1218:            } else if (this == tok && linenumbers) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1219:                ret << tok->linenr() << ": ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1220:            } else {
    #####: 1221:                while (lineNumber < tok->linenr()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1222:                    ++lineNumber;
    #####: 1223:                    ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1224:                    if (linenumbers) {
branch  0 never executed
branch  1 never executed
    #####: 1225:                        ret << lineNumber << ':';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1226:                        if (lineNumber == tok->linenr())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1227:                            ret << ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1228:                    }
        -: 1229:                }
        -: 1230:            }
    #####: 1231:            lineNumber = tok->linenr();
call    0 never executed
        -: 1232:        }
        -: 1233:
    #####: 1234:        tok->stringify(ret, varid, attributes, attributes); // print token
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1235:        if (tok->next() != end && (!linebreaks || (tok->next()->linenr() <= tok->linenr() && tok->next()->fileIndex() == tok->fileIndex())))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1236:            ret << ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1237:    }
    #####: 1238:    if (linebreaks && (files || linenumbers))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1239:        ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1240:    return ret.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1241:}
        -: 1242:
function _ZNK5Token13stringifyListB5cxx11EPKS_b called 0 returned 0% blocks executed 0%
    #####: 1243:std::string Token::stringifyList(const Token* end, bool attributes) const
        -: 1244:{
    #####: 1245:    return stringifyList(false, attributes, false, false, false, nullptr, end);
call    0 never executed
        -: 1246:}
        -: 1247:
function _ZNK5Token13stringifyListB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####: 1248:std::string Token::stringifyList(bool varid) const
        -: 1249:{
    #####: 1250:    return stringifyList(varid, false, true, true, true, nullptr, nullptr);
call    0 never executed
        -: 1251:}
        -: 1252:
function _ZN5Token11astOperand1EPS_ called 5503 returned 100% blocks executed 27%
     5503: 1253:void Token::astOperand1(Token *tok)
        -: 1254:{
     5503: 1255:    if (mImpl->mAstOperand1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1256:        mImpl->mAstOperand1->mImpl->mAstParent = nullptr;
        -: 1257:    // goto parent operator
     5503: 1258:    if (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    11006: 1259:        std::set<Token*> visitedParents;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     5503: 1260:        while (tok->mImpl->mAstParent) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1261:            if (!visitedParents.insert(tok->mImpl->mAstParent).second) // #6838/#6726/#8352 avoid hang on garbage code
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1262:                throw InternalError(this, "Internal error. Token::astOperand1() cyclic dependency.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1263:            tok = tok->mImpl->mAstParent;
        -: 1264:        }
     5503: 1265:        tok->mImpl->mAstParent = this;
        -: 1266:    }
     5503: 1267:    mImpl->mAstOperand1 = tok;
     5503: 1268:}
        -: 1269:
function _ZN5Token11astOperand2EPS_ called 5110 returned 100% blocks executed 27%
     5110: 1270:void Token::astOperand2(Token *tok)
        -: 1271:{
     5110: 1272:    if (mImpl->mAstOperand2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1273:        mImpl->mAstOperand2->mImpl->mAstParent = nullptr;
        -: 1274:    // goto parent operator
     5110: 1275:    if (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10220: 1276:        std::set<Token*> visitedParents;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     5110: 1277:        while (tok->mImpl->mAstParent) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1278:            //std::cout << tok << " -> " << tok->mAstParent ;
    #####: 1279:            if (!visitedParents.insert(tok->mImpl->mAstParent).second) // #6838/#6726 avoid hang on garbage code
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1280:                throw InternalError(this, "Internal error. Token::astOperand2() cyclic dependency.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1281:            tok = tok->mImpl->mAstParent;
        -: 1282:        }
     5110: 1283:        tok->mImpl->mAstParent = this;
        -: 1284:    }
     5110: 1285:    mImpl->mAstOperand2 = tok;
     5110: 1286:}
        -: 1287:
function _ZL19goToLeftParenthesisPK5TokenS1_ called 432 returned 100% blocks executed 100%
      432: 1288:static const Token* goToLeftParenthesis(const Token* start, const Token* end)
        -: 1289:{
        -: 1290:    // move start to lpar in such expression: '(*it).x'
      432: 1291:    int par = 0;
     1435: 1292:    for (const Token *tok = start; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
call    4 returned 100%
     1003: 1293:        if (tok->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       96: 1294:            ++par;
      907: 1295:        else if (tok->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
       77: 1296:            if (par == 0)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       12: 1297:                start = tok->link();
call    0 returned 100%
        -: 1298:            else
       65: 1299:                --par;
        -: 1300:        }
        -: 1301:    }
      432: 1302:    return start;
        -: 1303:}
        -: 1304:
function _ZL20goToRightParenthesisPK5TokenS1_ called 432 returned 100% blocks executed 100%
      432: 1305:static const Token* goToRightParenthesis(const Token* start, const Token* end)
        -: 1306:{
        -: 1307:    // move end to rpar in such expression: '2>(x+1)'
      432: 1308:    int par = 0;
     1447: 1309:    for (const Token *tok = end; tok && tok != start; tok = tok->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
call    4 returned 100%
     1015: 1310:        if (tok->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
      104: 1311:            ++par;
      911: 1312:        else if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       96: 1313:            if (par == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        4: 1314:                end = tok->link();
call    0 returned 100%
        -: 1315:            else
       92: 1316:                --par;
        -: 1317:        }
        -: 1318:    }
      432: 1319:    return end;
        -: 1320:}
        -: 1321:
function _ZNK5Token28findExpressionStartEndTokensEv called 432 returned 100% blocks executed 90%
      432: 1322:std::pair<const Token *, const Token *> Token::findExpressionStartEndTokens() const
        -: 1323:{
      432: 1324:    const Token * const top = this;
        -: 1325:
        -: 1326:    // find start node in AST tree
      432: 1327:    const Token *start = top;
     1814: 1328:    while (start->astOperand1() &&
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
branch  3 taken 22% (fallthrough)
branch  4 taken 78%
branch  5 taken 43% (fallthrough)
branch  6 taken 57%
      488: 1329:           (start->astOperand2() || !start->isUnaryPreOp() || Token::simpleMatch(start, "( )") || start->str() == "{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
      327: 1330:        start = start->astOperand1();
call    0 returned 100%
        -: 1331:
        -: 1332:    // find end node in AST tree
      432: 1333:    const Token *end = top;
     1112: 1334:    while (end->astOperand1() && (end->astOperand2() || end->isUnaryPreOp())) {
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 48% (fallthrough)
branch 12 taken 52%
        -: 1335:        // lambda..
      367: 1336:        if (end->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1337:            const Token *lambdaEnd = findLambdaEndToken(end);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1338:            if (lambdaEnd) {
branch  0 never executed
branch  1 never executed
    #####: 1339:                end = lambdaEnd;
    #####: 1340:                break;
        -: 1341:            }
        -: 1342:        }
      427: 1343:        if (Token::Match(end,"(|[") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
branch  5 taken 18% (fallthrough)
branch  6 taken 82%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
       39: 1344:            !(Token::Match(end, "( %type%") && !end->astOperand2())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       27: 1345:            end = end->link();
call    0 returned 100%
       27: 1346:            break;
        -: 1347:        }
      340: 1348:        end = end->astOperand2() ? end->astOperand2() : end->astOperand1();
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
call    3 returned 100%
call    4 returned 100%
        -: 1349:    }
        -: 1350:
        -: 1351:    // skip parentheses
      432: 1352:    start = goToLeftParenthesis(start, end);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      432: 1353:    end = goToRightParenthesis(start, end);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      432: 1354:    if (Token::simpleMatch(end, "{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1355:        end = end->link();
call    0 never executed
      432: 1356:    return std::pair<const Token *, const Token *>(start,end);
call    0 returned 100%
        -: 1357:}
        -: 1358:
function _ZNK5Token13isCalculationEv called 0 returned 0% blocks executed 0%
    #####: 1359:bool Token::isCalculation() const
        -: 1360:{
    #####: 1361:    if (!Token::Match(this, "%cop%|++|--"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1362:        return false;
        -: 1363:
    #####: 1364:    if (Token::Match(this, "*|&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1365:        // dereference or address-of?
    #####: 1366:        if (!this->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1367:            return false;
        -: 1368:
    #####: 1369:        if (this->astOperand2()->str() == "[")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1370:            return false;
        -: 1371:
        -: 1372:        // type specification?
    #####: 1373:        std::stack<const Token *> operands;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1374:        operands.push(this);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1375:        while (!operands.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1376:            const Token *op = operands.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1377:            operands.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1378:            if (op->isNumber() || op->varId() > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1379:                return true;
    #####: 1380:            if (op->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1381:                operands.push(op->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1382:            if (op->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1383:                operands.push(op->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1384:            else if (Token::Match(op, "*|&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1385:                return false;
        -: 1386:        }
        -: 1387:
        -: 1388:        // type specification => return false
    #####: 1389:        return false;
        -: 1390:    }
        -: 1391:
    #####: 1392:    return true;
        -: 1393:}
        -: 1394:
function _ZNK5Token12isUnaryPreOpEv called 161 returned 100% blocks executed 71%
      161: 1395:bool Token::isUnaryPreOp() const
        -: 1396:{
      161: 1397:    if (!astOperand1() || astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1398:        return false;
      161: 1399:    if (!Token::Match(this, "++|--"))
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
      149: 1400:        return true;
       12: 1401:    const Token *tokbefore = mPrevious;
       12: 1402:    const Token *tokafter = mNext;
       12: 1403:    for (int distance = 1; distance < 10 && tokbefore; distance++) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       12: 1404:        if (tokbefore == mImpl->mAstOperand1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12: 1405:            return false;
    #####: 1406:        if (tokafter == mImpl->mAstOperand1)
branch  0 never executed
branch  1 never executed
    #####: 1407:            return true;
    #####: 1408:        tokbefore = tokbefore->mPrevious;
    #####: 1409:        tokafter  = tokafter->mPrevious;
        -: 1410:    }
    #####: 1411:    return false; // <- guess
        -: 1412:}
        -: 1413:
function _ZL20stringFromTokenRangePK5TokenS1_ called 389 returned 100% blocks executed 78%
      389: 1414:static std::string stringFromTokenRange(const Token* start, const Token* end)
        -: 1415:{
      778: 1416:    std::ostringstream ret;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      389: 1417:    if (end)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      389: 1418:        end = end->next();
call    0 returned 100%
     1708: 1419:    for (const Token *tok = start; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
call    4 returned 100%
     1319: 1420:        if (tok->isUnsigned())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1421:            ret << "unsigned ";
call    0 never executed
branch  1 never executed
branch  2 never executed
     1319: 1422:        if (tok->isLong())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1423:            ret << (tok->isLiteral() ? "L" : "long ");
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
     1319: 1424:        if (tok->originalName().empty() || tok->isUnsigned() || tok->isLong()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 99% (fallthrough)
branch 15 taken 1%
     1318: 1425:            ret << tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1426:        } else
        1: 1427:            ret << tok->originalName();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1319: 1428:        if (Token::Match(tok, "%name%|%num% %name%|%num%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        3: 1429:            ret << ' ';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1430:    }
      778: 1431:    return ret.str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1432:}
        -: 1433:
function _ZNK5Token16expressionStringB5cxx11Ev called 389 returned 100% blocks executed 100%
      389: 1434:std::string Token::expressionString() const
        -: 1435:{
      389: 1436:    const auto tokens = findExpressionStartEndTokens();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      389: 1437:    return stringFromTokenRange(tokens.first, tokens.second);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1438:}
        -: 1439:
function _ZL12astStringXmlPK5TokeniRSo called 0 returned 0% blocks executed 0%
    #####: 1440:static void astStringXml(const Token *tok, nonneg int indent, std::ostream &out)
        -: 1441:{
    #####: 1442:    const std::string strindent(indent, ' ');
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 1443:
    #####: 1444:    out << strindent << "<token str=\"" << tok->str() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1445:    if (tok->varId() > 0U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1446:        out << " varId=\"" << MathLib::toString(tok->varId()) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1447:    if (tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1448:        out << " variable=\"" << tok->variable() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1449:    if (tok->function())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1450:        out << " function=\"" << tok->function() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1451:    if (!tok->values().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1452:        out << " values=\"" << &tok->values() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 1453:
    #####: 1454:    if (!tok->astOperand1() && !tok->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1455:        out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1456:    }
        -: 1457:
        -: 1458:    else {
    #####: 1459:        out << '>' << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1460:        if (tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1461:            astStringXml(tok->astOperand1(), indent+2U, out);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1462:        if (tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1463:            astStringXml(tok->astOperand2(), indent+2U, out);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1464:        out << strindent << "</token>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1465:    }
    #####: 1466:}
call    0 never executed
        -: 1467:
function _ZNK5Token8printAstEbbRSo called 0 returned 0% blocks executed 0%
    #####: 1468:void Token::printAst(bool verbose, bool xml, std::ostream &out) const
        -: 1469:{
    #####: 1470:    std::set<const Token *> printed;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1471:    for (const Token *tok = this; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1472:        if (!tok->mImpl->mAstParent && tok->mImpl->mAstOperand1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1473:            if (printed.empty() && !xml)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1474:                out << "\n\n##AST" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1475:            else if (printed.find(tok) != printed.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 1476:                continue;
    #####: 1477:            printed.insert(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1478:
    #####: 1479:            if (xml) {
branch  0 never executed
branch  1 never executed
    #####: 1480:                out << "<ast scope=\"" << tok->scope() << "\" fileIndex=\"" << tok->fileIndex() << "\" linenr=\"" << tok->linenr()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1481:                    << "\" column=\"" << tok->column() << "\">" << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1482:                astStringXml(tok, 2U, out);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1483:                out << "</ast>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1484:            } else if (verbose)
branch  0 never executed
branch  1 never executed
    #####: 1485:                out << tok->astStringVerbose() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1486:            else
    #####: 1487:                out << tok->astString(" ") << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1488:            if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1489:                tok = tok->link();
call    0 never executed
        -: 1490:        }
        -: 1491:    }
    #####: 1492:}
        -: 1493:
function _ZL6indentRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii called 0 returned 0% blocks executed 0%
    #####: 1494:static void indent(std::string &str, const nonneg int indent1, const nonneg int indent2)
        -: 1495:{
    #####: 1496:    for (int i = 0; i < indent1; ++i)
branch  0 never executed
branch  1 never executed
    #####: 1497:        str += ' ';
call    0 never executed
    #####: 1498:    for (int i = indent1; i < indent2; i += 2)
branch  0 never executed
branch  1 never executed
    #####: 1499:        str += "| ";
call    0 never executed
    #####: 1500:}
        -: 1501:
function _ZNK5Token25astStringVerboseRecursiveERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii called 0 returned 0% blocks executed 0%
    #####: 1502:void Token::astStringVerboseRecursive(std::string& ret, const nonneg int indent1, const nonneg int indent2) const
        -: 1503:{
    #####: 1504:    if (isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1505:        ret += '$';
call    0 never executed
    #####: 1506:    ret += mStr;
call    0 never executed
    #####: 1507:    if (mImpl->mValueType)
branch  0 never executed
branch  1 never executed
    #####: 1508:        ret += " \'" + mImpl->mValueType->str() + '\'';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1509:    ret += '\n';
call    0 never executed
        -: 1510:
    #####: 1511:    if (mImpl->mAstOperand1) {
branch  0 never executed
branch  1 never executed
    #####: 1512:        int i1 = indent1, i2 = indent2 + 2;
    #####: 1513:        if (indent1 == indent2 && !mImpl->mAstOperand2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1514:            i1 += 2;
    #####: 1515:        indent(ret, indent1, indent2);
call    0 never executed
    #####: 1516:        ret += mImpl->mAstOperand2 ? "|-" : "`-";
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1517:        mImpl->mAstOperand1->astStringVerboseRecursive(ret, i1, i2);
call    0 never executed
        -: 1518:    }
    #####: 1519:    if (mImpl->mAstOperand2) {
branch  0 never executed
branch  1 never executed
    #####: 1520:        int i1 = indent1, i2 = indent2 + 2;
    #####: 1521:        if (indent1 == indent2)
branch  0 never executed
branch  1 never executed
    #####: 1522:            i1 += 2;
    #####: 1523:        indent(ret, indent1, indent2);
call    0 never executed
    #####: 1524:        ret += "`-";
call    0 never executed
    #####: 1525:        mImpl->mAstOperand2->astStringVerboseRecursive(ret, i1, i2);
call    0 never executed
        -: 1526:    }
    #####: 1527:}
        -: 1528:
function _ZNK5Token16astStringVerboseB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1529:std::string Token::astStringVerbose() const
        -: 1530:{
    #####: 1531:    std::string ret;
call    0 never executed
    #####: 1532:    astStringVerboseRecursive(ret);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1533:    return ret;
call    0 never executed
        -: 1534:}
        -: 1535:
        -: 1536:
function _ZNK5Token14printValueFlowEbRSo called 0 returned 0% blocks executed 0%
    #####: 1537:void Token::printValueFlow(bool xml, std::ostream &out) const
        -: 1538:{
    #####: 1539:    int line = 0;
    #####: 1540:    if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1541:        out << "  <valueflow>" << std::endl;
call    0 never executed
call    1 never executed
        -: 1542:    else
    #####: 1543:        out << "\n\n##Value flow" << std::endl;
call    0 never executed
call    1 never executed
    #####: 1544:    for (const Token *tok = this; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1545:        if (!tok->mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1546:            continue;
    #####: 1547:        if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1548:            out << "    <values id=\"" << tok->mImpl->mValues << "\">" << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1549:        else if (line != tok->linenr())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1550:            out << "Line " << tok->linenr() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1551:        line = tok->linenr();
call    0 never executed
    #####: 1552:        if (!xml) {
branch  0 never executed
branch  1 never executed
    #####: 1553:            out << "  " << tok->str() << (tok->mImpl->mValues->front().isKnown() ? " always " : " possible ");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1554:            if (tok->mImpl->mValues->size() > 1U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1555:                out << '{';
call    0 never executed
        -: 1556:        }
    #####: 1557:        for (const ValueFlow::Value &value : *tok->mImpl->mValues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1558:            if (xml) {
branch  0 never executed
branch  1 never executed
    #####: 1559:                out << "      <value ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1560:                switch (value.valueType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1561:                case ValueFlow::Value::INT:
    #####: 1562:                    if (tok->valueType() && tok->valueType()->sign == ValueType::UNSIGNED)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1563:                        out << "intvalue=\"" << (MathLib::biguint)value.intvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1564:                    else
    #####: 1565:                        out << "intvalue=\"" << value.intvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1566:                    break;
    #####: 1567:                case ValueFlow::Value::TOK:
    #####: 1568:                    out << "tokvalue=\"" << value.tokvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1569:                    break;
    #####: 1570:                case ValueFlow::Value::FLOAT:
    #####: 1571:                    out << "floatvalue=\"" << value.floatValue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1572:                    break;
    #####: 1573:                case ValueFlow::Value::MOVED:
    #####: 1574:                    out << "movedvalue=\"" << ValueFlow::Value::toString(value.moveKind) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1575:                    break;
    #####: 1576:                case ValueFlow::Value::UNINIT:
    #####: 1577:                    out << "uninit=\"1\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1578:                    break;
    #####: 1579:                case ValueFlow::Value::BUFFER_SIZE:
    #####: 1580:                    out << "buffer-size=\"" << value.intvalue << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1581:                    break;
    #####: 1582:                case ValueFlow::Value::CONTAINER_SIZE:
    #####: 1583:                    out << "container-size=\"" << value.intvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1584:                    break;
    #####: 1585:                case ValueFlow::Value::LIFETIME:
    #####: 1586:                    out << "lifetime=\"" << value.tokvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1587:                    break;
        -: 1588:                }
    #####: 1589:                if (value.condition)
branch  0 never executed
branch  1 never executed
    #####: 1590:                    out << " condition-line=\"" << value.condition->linenr() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1591:                if (value.isKnown())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1592:                    out << " known=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1593:                else if (value.isPossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1594:                    out << " possible=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1595:                else if (value.isImpossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1596:                    out << " impossible=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1597:                else if (value.isInconclusive())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1598:                    out << " inconclusive=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1599:                out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1600:            }
        -: 1601:
        -: 1602:            else {
    #####: 1603:                if (&value != &tok->mImpl->mValues->front())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1604:                    out << ",";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1605:                if (value.isImpossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1606:                    out << "!";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1607:                if (value.bound == ValueFlow::Value::Bound::Lower)
branch  0 never executed
branch  1 never executed
    #####: 1608:                    out << ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1609:                if (value.bound == ValueFlow::Value::Bound::Upper)
branch  0 never executed
branch  1 never executed
    #####: 1610:                    out << "<";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1611:                switch (value.valueType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1612:                case ValueFlow::Value::INT:
    #####: 1613:                    if (tok->valueType() && tok->valueType()->sign == ValueType::UNSIGNED)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1614:                        out << (MathLib::biguint)value.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1615:                    else
    #####: 1616:                        out << value.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1617:                    break;
    #####: 1618:                case ValueFlow::Value::TOK:
    #####: 1619:                    out << value.tokvalue->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1620:                    break;
    #####: 1621:                case ValueFlow::Value::FLOAT:
    #####: 1622:                    out << value.floatValue;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1623:                    break;
    #####: 1624:                case ValueFlow::Value::MOVED:
    #####: 1625:                    out << ValueFlow::Value::toString(value.moveKind);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1626:                    break;
    #####: 1627:                case ValueFlow::Value::UNINIT:
    #####: 1628:                    out << "Uninit";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1629:                    break;
    #####: 1630:                case ValueFlow::Value::BUFFER_SIZE:
        -: 1631:                case ValueFlow::Value::CONTAINER_SIZE:
    #####: 1632:                    out << "size=" << value.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1633:                    break;
    #####: 1634:                case ValueFlow::Value::LIFETIME:
    #####: 1635:                    out << "lifetime=" << value.tokvalue->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1636:                    break;
        -: 1637:                }
    #####: 1638:                if (value.indirect > 0)
branch  0 never executed
branch  1 never executed
    #####: 1639:                    for (int i=0; i<value.indirect; i++)
branch  0 never executed
branch  1 never executed
    #####: 1640:                        out << "*";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1641:            }
        -: 1642:        }
    #####: 1643:        if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1644:            out << "    </values>" << std::endl;
call    0 never executed
call    1 never executed
    #####: 1645:        else if (tok->mImpl->mValues->size() > 1U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1646:            out << '}' << std::endl;
call    0 never executed
call    1 never executed
        -: 1647:        else
    #####: 1648:            out << std::endl;
call    0 never executed
        -: 1649:    }
    #####: 1650:    if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1651:        out << "  </valueflow>" << std::endl;
call    0 never executed
call    1 never executed
    #####: 1652:}
        -: 1653:
function _ZNK5Token10getValueLEExPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1654:const ValueFlow::Value * Token::getValueLE(const MathLib::bigint val, const Settings *settings) const
        -: 1655:{
    #####: 1656:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1657:        return nullptr;
    #####: 1658:    const ValueFlow::Value *ret = nullptr;
    #####: 1659:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
    #####: 1660:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1661:        if (it->isImpossible())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1662:            continue;
    #####: 1663:        if (it->isIntValue() && it->intvalue <= val) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1664:            if (!ret || ret->isInconclusive() || (ret->condition && !it->isInconclusive()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1665:                ret = &(*it);
call    0 never executed
    #####: 1666:            if (!ret->isInconclusive() && !ret->condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1667:                break;
        -: 1668:        }
        -: 1669:    }
    #####: 1670:    if (settings && ret) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1671:        if (ret->isInconclusive() && !settings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1672:            return nullptr;
    #####: 1673:        if (ret->condition && !settings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1674:            return nullptr;
        -: 1675:    }
    #####: 1676:    return ret;
        -: 1677:}
        -: 1678:
function _ZNK5Token10getValueGEExPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1679:const ValueFlow::Value * Token::getValueGE(const MathLib::bigint val, const Settings *settings) const
        -: 1680:{
    #####: 1681:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1682:        return nullptr;
    #####: 1683:    const ValueFlow::Value *ret = nullptr;
    #####: 1684:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
    #####: 1685:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1686:        if (it->isImpossible())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1687:            continue;
    #####: 1688:        if (it->isIntValue() && it->intvalue >= val) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1689:            if (!ret || ret->isInconclusive() || (ret->condition && !it->isInconclusive()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1690:                ret = &(*it);
call    0 never executed
    #####: 1691:            if (!ret->isInconclusive() && !ret->condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1692:                break;
        -: 1693:        }
        -: 1694:    }
    #####: 1695:    if (settings && ret) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1696:        if (ret->isInconclusive() && !settings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1697:            return nullptr;
    #####: 1698:        if (ret->condition && !settings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1699:            return nullptr;
        -: 1700:    }
    #####: 1701:    return ret;
        -: 1702:}
        -: 1703:
function _ZNK5Token15getInvalidValueEPKS_iPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1704:const ValueFlow::Value * Token::getInvalidValue(const Token *ftok, nonneg int argnr, const Settings *settings) const
        -: 1705:{
    #####: 1706:    if (!mImpl->mValues || !settings)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1707:        return nullptr;
    #####: 1708:    const ValueFlow::Value *ret = nullptr;
    #####: 1709:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1710:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1711:        if (it->isImpossible())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1712:            continue;
    #####: 1713:        if ((it->isIntValue() && !settings->library.isIntArgValid(ftok, argnr, it->intvalue)) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1714:            (it->isFloatValue() && !settings->library.isFloatArgValid(ftok, argnr, it->floatValue))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1715:            if (!ret || ret->isInconclusive() || (ret->condition && !it->isInconclusive()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1716:                ret = &(*it);
call    0 never executed
    #####: 1717:            if (!ret->isInconclusive() && !ret->condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1718:                break;
        -: 1719:        }
        -: 1720:    }
    #####: 1721:    if (ret) {
branch  0 never executed
branch  1 never executed
    #####: 1722:        if (ret->isInconclusive() && !settings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1723:            return nullptr;
    #####: 1724:        if (ret->condition && !settings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1725:            return nullptr;
        -: 1726:    }
    #####: 1727:    return ret;
        -: 1728:}
        -: 1729:
function _ZNK5Token23getValueTokenMinStrSizeEv called 0 returned 0% blocks executed 0%
    #####: 1730:const Token *Token::getValueTokenMinStrSize() const
        -: 1731:{
    #####: 1732:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1733:        return nullptr;
    #####: 1734:    const Token *ret = nullptr;
    #####: 1735:    int minsize = INT_MAX;
    #####: 1736:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
    #####: 1737:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1738:        if (it->isTokValue() && it->tokvalue && it->tokvalue->tokType() == Token::eString) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1739:            const int size = getStrSize(it->tokvalue);
call    0 never executed
call    1 never executed
    #####: 1740:            if (!ret || size < minsize) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1741:                minsize = size;
    #####: 1742:                ret = it->tokvalue;
call    0 never executed
        -: 1743:            }
        -: 1744:        }
        -: 1745:    }
    #####: 1746:    return ret;
        -: 1747:}
        -: 1748:
function _ZNK5Token25getValueTokenMaxStrLengthEv called 0 returned 0% blocks executed 0%
    #####: 1749:const Token *Token::getValueTokenMaxStrLength() const
        -: 1750:{
    #####: 1751:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1752:        return nullptr;
    #####: 1753:    const Token *ret = nullptr;
    #####: 1754:    int maxlength = 0;
    #####: 1755:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
    #####: 1756:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1757:        if (it->isTokValue() && it->tokvalue && it->tokvalue->tokType() == Token::eString) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1758:            const int length = getStrLength(it->tokvalue);
call    0 never executed
call    1 never executed
    #####: 1759:            if (!ret || length > maxlength) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1760:                maxlength = length;
    #####: 1761:                ret = it->tokvalue;
call    0 never executed
        -: 1762:            }
        -: 1763:        }
        -: 1764:    }
    #####: 1765:    return ret;
        -: 1766:}
        -: 1767:
function _ZL16getfunctionscopePK5Scope called 0 returned 0% blocks executed 0%
    #####: 1768:static const Scope *getfunctionscope(const Scope *s)
        -: 1769:{
    #####: 1770:    while (s && s->type != Scope::eFunction)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1771:        s = s->nestedIn;
    #####: 1772:    return s;
        -: 1773:}
        -: 1774:
function _ZNK5Token24getValueTokenDeadPointerEv called 0 returned 0% blocks executed 0%
    #####: 1775:const Token *Token::getValueTokenDeadPointer() const
        -: 1776:{
    #####: 1777:    const Scope * const functionscope = getfunctionscope(this->scope());
call    0 never executed
call    1 never executed
        -: 1778:
    #####: 1779:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1780:    for (it = values().begin(); it != values().end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 1781:        // Is this a pointer alias?
    #####: 1782:        if (!it->isTokValue() || (it->tokvalue && it->tokvalue->str() != "&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1783:            continue;
        -: 1784:        // Get variable
    #####: 1785:        const Token *vartok = it->tokvalue->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1786:        if (!vartok || !vartok->isName() || !vartok->variable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1787:            continue;
    #####: 1788:        const Variable * const var = vartok->variable();
call    0 never executed
    #####: 1789:        if (var->isStatic() || var->isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1790:            continue;
    #####: 1791:        if (!var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1792:            return nullptr; // #6804
    #####: 1793:        if (var->scope()->type == Scope::eUnion && var->scope()->nestedIn == this->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1794:            continue;
        -: 1795:        // variable must be in same function (not in subfunction)
    #####: 1796:        if (functionscope != getfunctionscope(var->scope()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1797:            continue;
        -: 1798:        // Is variable defined in this scope or upper scope?
    #####: 1799:        const Scope *s = this->scope();
call    0 never executed
    #####: 1800:        while ((s != nullptr) && (s != var->scope()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1801:            s = s->nestedIn;
    #####: 1802:        if (!s)
branch  0 never executed
branch  1 never executed
    #####: 1803:            return it->tokvalue;
call    0 never executed
        -: 1804:    }
    #####: 1805:    return nullptr;
        -: 1806:}
        -: 1807:
function _ZL19removeContradictionRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 4302 returned 100% blocks executed 57%
     4302: 1808:static bool removeContradiction(std::list<ValueFlow::Value>& values)
        -: 1809:{
     4302: 1810:    bool result = false;
     8607: 1811:    for (ValueFlow::Value& x : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
     4305: 1812:        if (x.isNonValue())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       32: 1813:            continue;
     8551: 1814:        for (ValueFlow::Value& y : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
     4278: 1815:            if (y.isNonValue())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 1816:                continue;
     4277: 1817:            if (x == y)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     4273: 1818:                continue;
        4: 1819:            if (x.valueType != y.valueType)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1820:                continue;
        4: 1821:            if (x.isImpossible() == y.isImpossible())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2: 1822:                continue;
        2: 1823:            if (!x.equalValue(y))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 1824:                continue;
    #####: 1825:            if (x.bound == y.bound ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1826:                (x.bound != ValueFlow::Value::Bound::Point && y.bound != ValueFlow::Value::Bound::Point)) {
branch  0 never executed
branch  1 never executed
    #####: 1827:                const bool removex = !x.isImpossible() || y.isKnown();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1828:                const bool removey = !y.isImpossible() || x.isKnown();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1829:                if (removex)
branch  0 never executed
branch  1 never executed
    #####: 1830:                    values.remove(x);
call    0 never executed
    #####: 1831:                if (removey)
branch  0 never executed
branch  1 never executed
    #####: 1832:                    values.remove(y);
call    0 never executed
    #####: 1833:                return true;
    #####: 1834:            } else if (x.bound == ValueFlow::Value::Bound::Point) {
branch  0 never executed
branch  1 never executed
    #####: 1835:                y.decreaseRange();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1836:                result = true;
        -: 1837:            }
        -: 1838:        }
        -: 1839:    }
     4302: 1840:    return result;
        -: 1841:}
        -: 1842:
function _ZL14removeOverlapsRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 0 returned 0% blocks executed 0%
    #####: 1843:static void removeOverlaps(std::list<ValueFlow::Value>& values)
        -: 1844:{
    #####: 1845:    for (ValueFlow::Value& x : values) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1846:        if (x.isNonValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1847:            continue;
function _ZZL14removeOverlapsRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEENKUlRS2_E_clES6_ called 0 returned 0% blocks executed 0%
    #####: 1848:        values.remove_if([&](ValueFlow::Value& y) {
call    0 never executed
    #####: 1849:            if (y.isNonValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1850:                return false;
    #####: 1851:            if (&x == &y)
branch  0 never executed
branch  1 never executed
    #####: 1852:                return false;
    #####: 1853:            if (x.valueType != y.valueType)
branch  0 never executed
branch  1 never executed
    #####: 1854:                return false;
    #####: 1855:            if (x.valueKind != y.valueKind)
branch  0 never executed
branch  1 never executed
    #####: 1856:                return false;
        -: 1857:            // TODO: Remove points coverd in a lower or upper bound
        -: 1858:            // TODO: Remove lower or upper bound already covered by a lower and upper bound
    #####: 1859:            if (!x.equalValue(y))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1860:                return false;
    #####: 1861:            if (x.bound != y.bound)
branch  0 never executed
branch  1 never executed
    #####: 1862:                return false;
    #####: 1863:            return true;
        -: 1864:        });
        -: 1865:    }
    #####: 1866:}
        -: 1867:
        -: 1868:// Removing contradictions is an NP-hard problem. Instead we run multiple
        -: 1869:// passes to try to catch most contradictions
function _ZL20removeContradictionsRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 4302 returned 100% blocks executed 75%
     4302: 1870:static void removeContradictions(std::list<ValueFlow::Value>& values)
        -: 1871:{
     4302: 1872:    for (int i = 0; i < 4; i++) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4302: 1873:        if (!removeContradiction(values))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     4302: 1874:            return;
    #####: 1875:        removeOverlaps(values);
call    0 never executed
        -: 1876:    }
        -: 1877:}
        -: 1878:
function _ZN5Token8addValueERKN9ValueFlow5ValueE called 4335 returned 100% blocks executed 66%
     4335: 1879:bool Token::addValue(const ValueFlow::Value &value)
        -: 1880:{
     4335: 1881:    if (value.isKnown() && mImpl->mValues) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        -: 1882:        // Clear all other values of the same type since value is known
function _ZZN5Token8addValueERKN9ValueFlow5ValueEENKUlS3_E_clES3_ called 13 returned 100% blocks executed 100%
       26: 1883:        mImpl->mValues->remove_if([&](const ValueFlow::Value & x) {
call    0 returned 100%
       13: 1884:            return x.valueType == value.valueType;
       13: 1885:        });
        -: 1886:    }
        -: 1887:
     4335: 1888:    if (mImpl->mValues) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1889:        // Don't handle more than 10 values for performance reasons
        -: 1890:        // TODO: add setting?
       49: 1891:        if (mImpl->mValues->size() >= 10U)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       33: 1892:            return false;
        -: 1893:
        -: 1894:        // if value already exists, don't add it again
       65: 1895:        std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 never executed
call    2 never executed
       55: 1896:        for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 71% (fallthrough)
branch  7 taken 29%
call    8 returned 100%
        -: 1897:            // different types => continue
       39: 1898:            if (it->valueType != value.valueType)
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        2: 1899:                continue;
        -: 1900:
       37: 1901:            if (it->isImpossible() != value.isImpossible())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
        2: 1902:                continue;
        -: 1903:
        -: 1904:            // different value => continue
       35: 1905:            bool differentValue = true;
       35: 1906:            switch (it->valueType) {
call    0 returned 100%
branch  1 taken 91%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 9%
branch  6 taken 0%
       32: 1907:            case ValueFlow::Value::ValueType::INT:
        -: 1908:            case ValueFlow::Value::ValueType::CONTAINER_SIZE:
        -: 1909:            case ValueFlow::Value::ValueType::BUFFER_SIZE:
       32: 1910:                differentValue = (it->intvalue != value.intvalue);
call    0 returned 100%
       32: 1911:                break;
    #####: 1912:            case ValueFlow::Value::ValueType::TOK:
        -: 1913:            case ValueFlow::Value::ValueType::LIFETIME:
    #####: 1914:                differentValue = (it->tokvalue != value.tokvalue);
call    0 never executed
    #####: 1915:                break;
    #####: 1916:            case ValueFlow::Value::ValueType::FLOAT:
        -: 1917:                // TODO: Write some better comparison
    #####: 1918:                differentValue = (it->floatValue > value.floatValue || it->floatValue < value.floatValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1919:                break;
    #####: 1920:            case ValueFlow::Value::ValueType::MOVED:
    #####: 1921:                differentValue = (it->moveKind != value.moveKind);
call    0 never executed
    #####: 1922:                break;
        3: 1923:            case ValueFlow::Value::ValueType::UNINIT:
        3: 1924:                differentValue = false;
        3: 1925:                break;
        -: 1926:            }
       35: 1927:            if (differentValue)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        2: 1928:                continue;
        -: 1929:
       33: 1930:            if ((value.isTokValue() || value.isLifetimeValue()) && (it->tokvalue != value.tokvalue) && (it->tokvalue->str() != value.tokvalue->str()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 1931:                continue;
        -: 1932:
        -: 1933:            // same value, but old value is inconclusive so replace it
       33: 1934:            if (it->isInconclusive() && !value.isInconclusive() && !value.isImpossible()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1935:                *it = value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1936:                if (it->varId == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1937:                    it->varId = mImpl->mVarId;
call    0 never executed
    #####: 1938:                break;
        -: 1939:            }
        -: 1940:
        -: 1941:            // Same value already exists, don't  add new value
       33: 1942:            return false;
        -: 1943:        }
        -: 1944:
        -: 1945:        // Add value
       16: 1946:        if (it == mImpl->mValues->end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       32: 1947:            ValueFlow::Value v(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 33%
branch  6 taken 67%
call    7 never executed
       16: 1948:            if (v.varId == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16: 1949:                v.varId = mImpl->mVarId;
       16: 1950:            if (v.isKnown() && v.isIntValue())
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
call    3 returned 100%
branch  4 taken 31% (fallthrough)
branch  5 taken 69%
branch  6 taken 25% (fallthrough)
branch  7 taken 75%
        4: 1951:                mImpl->mValues->push_front(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1952:            else
       12: 1953:                mImpl->mValues->push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1954:        }
        -: 1955:    } else {
     8572: 1956:        ValueFlow::Value v(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     4286: 1957:        if (v.varId == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     4272: 1958:            v.varId = mImpl->mVarId;
     4286: 1959:        mImpl->mValues = new std::list<ValueFlow::Value>(1, v);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        -: 1960:    }
        -: 1961:
     4302: 1962:    removeContradictions(*mImpl->mValues);
call    0 returned 100%
        -: 1963:
     4302: 1964:    return true;
        -: 1965:}
        -: 1966:
function _ZN5Token20assignProgressValuesEPS_ called 388 returned 100% blocks executed 100%
      388: 1967:void Token::assignProgressValues(Token *tok)
        -: 1968:{
      388: 1969:    int total_count = 0;
    64507: 1970:    for (Token *tok2 = tok; tok2; tok2 = tok2->next())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    64119: 1971:        ++total_count;
      388: 1972:    int count = 0;
    64507: 1973:    for (Token *tok2 = tok; tok2; tok2 = tok2->next())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    64119: 1974:        tok2->mImpl->mProgressValue = count++ * 100 / total_count;
      388: 1975:}
        -: 1976:
function _ZN5Token13assignIndexesEv called 194 returned 100% blocks executed 86%
      194: 1977:void Token::assignIndexes()
        -: 1978:{
      194: 1979:    int index = (mPrevious ? mPrevious->mImpl->mIndex : 0) + 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    36393: 1980:    for (Token *tok = this; tok; tok = tok->next())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    36199: 1981:        tok->mImpl->mIndex = index++;
      194: 1982:}
        -: 1983:
function _ZN5Token12setValueTypeEP9ValueType called 119497 returned 100% blocks executed 100%
   119497: 1984:void Token::setValueType(ValueType *vt)
        -: 1985:{
   119497: 1986:    if (vt != mImpl->mValueType) {
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
    21800: 1987:        delete mImpl->mValueType;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
call    3 returned 100%
    21800: 1988:        mImpl->mValueType = vt;
        -: 1989:    }
   119497: 1990:}
        -: 1991:
function _ZN5Token4typeEPK4Type called 36424 returned 100% blocks executed 100%
    36424: 1992:void Token::type(const ::Type *t)
        -: 1993:{
    36424: 1994:    mImpl->mType = t;
    36424: 1995:    if (t) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       30: 1996:        tokType(eType);
call    0 returned 100%
       30: 1997:        isEnumType(mImpl->mType->isEnumType());
call    0 returned 100%
call    1 returned 100%
    36394: 1998:    } else if (mTokType == eType)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      513: 1999:        tokType(eName);
call    0 returned 100%
    36424: 2000:}
        -: 2001:
function _ZN5Token6typeOfEPKS_ called 2036 returned 100% blocks executed 38%
     2036: 2002:const ::Type *Token::typeOf(const Token *tok)
        -: 2003:{
     2036: 2004:    if (Token::simpleMatch(tok, "return")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 2005:        const Scope *scope = tok->scope();
call    0 returned 100%
        1: 2006:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2007:            return nullptr;
        1: 2008:        const Function *function = scope->function;
        1: 2009:        if (!function)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2010:            return nullptr;
        1: 2011:        return function->retType;
     2035: 2012:    } else if (Token::Match(tok, "%type%")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     2020: 2013:        return tok->type();
call    0 returned 100%
       15: 2014:    } else if (Token::Match(tok, "%var%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       15: 2015:        const Variable *var = tok->variable();
call    0 returned 100%
       15: 2016:        if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2017:            return nullptr;
       15: 2018:        return var->type();
call    0 returned 100%
    #####: 2019:    } else if (Token::Match(tok, "%name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2020:        const Function *function = tok->function();
call    0 never executed
    #####: 2021:        if (!function)
branch  0 never executed
branch  1 never executed
    #####: 2022:            return nullptr;
    #####: 2023:        return function->retType;
    #####: 2024:    } else if (Token::simpleMatch(tok, "=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2025:        return Token::typeOf(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####: 2026:    } else if (Token::simpleMatch(tok, ".")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2027:        return Token::typeOf(tok->astOperand2());
call    0 never executed
call    1 never executed
    #####: 2028:    } else if (Token::simpleMatch(tok, "[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2029:        return Token::typeOf(tok->astOperand1());
call    0 never executed
call    1 never executed
        -: 2030:    }
    #####: 2031:    return nullptr;
        -: 2032:}
        -: 2033:
function _ZN5Token8typeDeclEPKS_ called 0 returned 0% blocks executed 0%
    #####: 2034:std::pair<const Token*, const Token*> Token::typeDecl(const Token * tok)
        -: 2035:{
    #####: 2036:    if (Token::simpleMatch(tok, "return")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2037:        const Scope *scope = tok->scope();
call    0 never executed
    #####: 2038:        if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 2039:            return {};
call    0 never executed
    #####: 2040:        const Function *function = scope->function;
    #####: 2041:        if (!function)
branch  0 never executed
branch  1 never executed
    #####: 2042:            return {};
call    0 never executed
    #####: 2043:        return {function->retDef, function->returnDefEnd()};
call    0 never executed
call    1 never executed
    #####: 2044:    } else if (Token::Match(tok, "%type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2045:        return {tok, tok->next()};
call    0 never executed
call    1 never executed
    #####: 2046:    } else if (Token::Match(tok, "%var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2047:        const Variable *var = tok->variable();
call    0 never executed
    #####: 2048:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 2049:            return {};
call    0 never executed
    #####: 2050:        if (!var->typeStartToken() || !var->typeEndToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2051:            return {};
call    0 never executed
    #####: 2052:        return {var->typeStartToken(), var->typeEndToken()->next()};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2053:    } else if (Token::Match(tok, "%name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2054:        const Function *function = tok->function();
call    0 never executed
    #####: 2055:        if (!function)
branch  0 never executed
branch  1 never executed
    #####: 2056:            return {};
call    0 never executed
    #####: 2057:        return {function->retDef, function->returnDefEnd()};
call    0 never executed
call    1 never executed
    #####: 2058:    } else if (Token::simpleMatch(tok, "=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2059:        return Token::typeDecl(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####: 2060:    } else if (Token::simpleMatch(tok, ".")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2061:        return Token::typeDecl(tok->astOperand2());
call    0 never executed
call    1 never executed
        -: 2062:    } else {
    #####: 2063:        const ::Type * t = typeOf(tok);
call    0 never executed
    #####: 2064:        if (!t || !t->classDef)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2065:            return {};
call    0 never executed
    #####: 2066:        return {t->classDef->next(), t->classDef->tokAt(2)};
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2067:    }
        -: 2068:}
function _ZN5Token7typeStrB5cxx11EPKS_ called 0 returned 0% blocks executed 0%
    #####: 2069:std::string Token::typeStr(const Token* tok)
        -: 2070:{
    #####: 2071:    if (tok->valueType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2072:        const ValueType * vt = tok->valueType();
call    0 never executed
    #####: 2073:        std::string ret = vt->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2074:        if (!ret.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2075:            return ret;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2076:    }
    #####: 2077:    std::pair<const Token*, const Token*> r = Token::typeDecl(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2078:    if (!r.first || !r.second)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2079:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2080:    return r.first->stringifyList(r.second, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2081:}
        -: 2082:
function _ZN5Token9scopeInfoESt10shared_ptrI10ScopeInfo2E called 5893 returned 100% blocks executed 100%
     5893: 2083:void Token::scopeInfo(std::shared_ptr<ScopeInfo2> newScopeInfo)
        -: 2084:{
     5893: 2085:    mImpl->mScopeInfo = newScopeInfo;
call    0 returned 100%
     5893: 2086:}
function _ZNK5Token9scopeInfoEv called 5890 returned 100% blocks executed 100%
     5890: 2087:std::shared_ptr<ScopeInfo2> Token::scopeInfo() const
        -: 2088:{
     5890: 2089:    return mImpl->mScopeInfo;
call    0 returned 100%
        -: 2090:}
        -: 2091:
function _ZN9TokenImplD2Ev called 36224 returned 100% blocks executed 72%
    72448: 2092:TokenImpl::~TokenImpl()
call    0 returned 100%
call    1 returned 100%
        -: 2093:{
    36224: 2094:    delete mOriginalName;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
    36224: 2095:    delete mValueType;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
    36224: 2096:    delete mValues;
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
call    2 returned 100%
call    3 returned 100%
        -: 2097:
    36224: 2098:    for (auto templateSimplifierPointer : mTemplateSimplifierPointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
    #####: 2099:        templateSimplifierPointer->token(nullptr);
call    0 never executed
        -: 2100:    }
        -: 2101:
    36224: 2102:    while (mCppcheckAttributes) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2103:        struct CppcheckAttributes *c = mCppcheckAttributes;
    #####: 2104:        mCppcheckAttributes = mCppcheckAttributes->next;
    #####: 2105:        delete c;
call    0 never executed
        -: 2106:    }
    36224: 2107:}
        -: 2108:
function _ZN9TokenImpl20setCppcheckAttributeENS_18CppcheckAttributes4TypeEx called 0 returned 0% blocks executed 0%
    #####: 2109:void TokenImpl::setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type type, MathLib::bigint value)
        -: 2110:{
    #####: 2111:    struct CppcheckAttributes *attr = mCppcheckAttributes;
    #####: 2112:    while (attr && attr->type != type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2113:        attr = attr->next;
    #####: 2114:    if (attr)
branch  0 never executed
branch  1 never executed
    #####: 2115:        attr->value = value;
        -: 2116:    else {
    #####: 2117:        attr = new CppcheckAttributes;
call    0 never executed
    #####: 2118:        attr->type = type;
    #####: 2119:        attr->value = value;
    #####: 2120:        attr->next = mCppcheckAttributes;
    #####: 2121:        mCppcheckAttributes = attr;
        -: 2122:    }
    #####: 2123:}
        -: 2124:
function _ZNK9TokenImpl20getCppcheckAttributeENS_18CppcheckAttributes4TypeEPx called 228 returned 100% blocks executed 63%
      228: 2125:bool TokenImpl::getCppcheckAttribute(TokenImpl::CppcheckAttributes::Type type, MathLib::bigint *value) const
        -: 2126:{
      228: 2127:    struct CppcheckAttributes *attr = mCppcheckAttributes;
      228: 2128:    while (attr && attr->type != type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 2129:        attr = attr->next;
      228: 2130:    if (attr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2131:        *value = attr->value;
      228: 2132:    return attr != nullptr;
function _GLOBAL__sub_I__ZN9TokenImpl15mEmptyValueListE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 51%
        3: 2133:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
