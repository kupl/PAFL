        -:    0:Source:/home/workspace/lib/valueflow.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:/**
        -:   20: * @brief This is the ValueFlow component in Cppcheck.
        -:   21: *
        -:   22: * Each @sa Token in the token list has a list of values. These are
        -:   23: * the "possible" values for the Token at runtime.
        -:   24: *
        -:   25: * In the --debug and --debug-normal output you can see the ValueFlow data. For example:
        -:   26: *
        -:   27: *     int f()
        -:   28: *     {
        -:   29: *         int x = 10;
        -:   30: *         return 4 * x + 2;
        -:   31: *     }
        -:   32: *
        -:   33: * The --debug-normal output says:
        -:   34: *
        -:   35: *     ##Value flow
        -:   36: *     Line 3
        -:   37: *       10 always 10
        -:   38: *     Line 4
        -:   39: *       4 always 4
        -:   40: *       * always 40
        -:   41: *       x always 10
        -:   42: *       + always 42
        -:   43: *       2 always 2
        -:   44: *
        -:   45: * All value flow analysis is executed in the ValueFlow::setValues() function. The ValueFlow analysis is executed after the tokenizer/ast/symboldatabase/etc..
        -:   46: * The ValueFlow analysis is done in a series of valueFlow* function calls, where each such function call can only use results from previous function calls.
        -:   47: * The function calls should be arranged so that valueFlow* that do not require previous ValueFlow information should be first.
        -:   48: *
        -:   49: * Type of analysis
        -:   50: * ================
        -:   51: *
        -:   52: * This is "flow sensitive" value flow analysis. We _usually_ track the value for 1 variable at a time.
        -:   53: *
        -:   54: * How are calculations handled
        -:   55: * ============================
        -:   56: *
        -:   57: * Here is an example code:
        -:   58: *
        -:   59: *   x = 3 + 4;
        -:   60: *
        -:   61: * The valueFlowNumber set the values for the "3" and "4" tokens by calling setTokenValue().
        -:   62: * The setTokenValue() handle the calculations automatically. When both "3" and "4" have values, the "+" can be calculated. setTokenValue() recursively calls itself when parents in calculations can be calculated.
        -:   63: *
        -:   64: * Forward / Reverse flow analysis
        -:   65: * ===============================
        -:   66: *
        -:   67: * In forward value flow analysis we know a value and see what happens when we are stepping the program forward. Like normal execution.
        -:   68: * The valueFlowForward is used in this analysis.
        -:   69: *
        -:   70: * In reverse value flow analysis we know the value of a variable at line X. And try to "execute backwards" to determine possible values before line X.
        -:   71: * The valueFlowReverse is used in this analysis.
        -:   72: *
        -:   73: *
        -:   74: */
        -:   75:
        -:   76:
        -:   77:
        -:   78:#include "valueflow.h"
        -:   79:
        -:   80:#include "astutils.h"
        -:   81:#include "errorlogger.h"
        -:   82:#include "library.h"
        -:   83:#include "mathlib.h"
        -:   84:#include "platform.h"
        -:   85:#include "settings.h"
        -:   86:#include "standards.h"
        -:   87:#include "symboldatabase.h"
        -:   88:#include "token.h"
        -:   89:#include "tokenlist.h"
        -:   90:#include "utils.h"
        -:   91:#include "path.h"
        -:   92:
        -:   93:#include <algorithm>
        -:   94:#include <cassert>
        -:   95:#include <cstddef>
        -:   96:#include <functional>
        -:   97:#include <iterator>
        -:   98:#include <limits>
        -:   99:#include <map>
        -:  100:#include <set>
        -:  101:#include <stack>
        -:  102:#include <vector>
        -:  103:
        -:  104:static const int TIMEOUT = 10; // Do not repeat ValueFlow analysis more than 10 seconds
        -:  105:
        -:  106:namespace {
function _ZN12_GLOBAL__N_113ProgramMemoryaSERKS0_ called 0 returned 0% blocks executed 0%
function _ZN12_GLOBAL__N_113ProgramMemoryC2Ev called 58 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_113ProgramMemoryD2Ev called 227 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_113ProgramMemoryC2ERKS0_ called 169 returned 100% blocks executed 100%
      454:  107:    struct ProgramMemory {
call    0 never executed
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  108:        std::map<int, ValueFlow::Value> values;
        -:  109:
function _ZN12_GLOBAL__N_113ProgramMemory8setValueEiRKN9ValueFlow5ValueE called 46 returned 100% blocks executed 100%
       46:  110:        void setValue(nonneg int varid, const ValueFlow::Value &value) {
       46:  111:            values[varid] = value;
call    0 returned 100%
call    1 returned 100%
       46:  112:        }
        -:  113:
function _ZNK12_GLOBAL__N_113ProgramMemory11getIntValueEiPx called 74 returned 100% blocks executed 100%
       74:  114:        bool getIntValue(nonneg int varid, MathLib::bigint* result) const {
      148:  115:            const std::map<int, ValueFlow::Value>::const_iterator it = values.find(varid);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       74:  116:            const bool found = it != values.end() && it->second.isIntValue();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 43% (fallthrough)
branch  3 taken 57%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
       74:  117:            if (found)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
       32:  118:                *result = it->second.intvalue;
call    0 returned 100%
      148:  119:            return found;
        -:  120:        }
        -:  121:
function _ZN12_GLOBAL__N_113ProgramMemory11setIntValueEix called 2 returned 100% blocks executed 75%
        2:  122:        void setIntValue(nonneg int varid, MathLib::bigint value) {
        2:  123:            values[varid] = ValueFlow::Value(value);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
        2:  124:        }
        -:  125:
function _ZNK12_GLOBAL__N_113ProgramMemory11getTokValueEiPPK5Token called 0 returned 0% blocks executed 0%
    #####:  126:        bool getTokValue(nonneg int varid, const Token** result) const {
    #####:  127:            const std::map<int, ValueFlow::Value>::const_iterator it = values.find(varid);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  128:            const bool found = it != values.end() && it->second.isTokValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  129:            if (found)
branch  0 never executed
branch  1 never executed
    #####:  130:                *result = it->second.tokvalue;
call    0 never executed
    #####:  131:            return found;
        -:  132:        }
        -:  133:
function _ZN12_GLOBAL__N_113ProgramMemory8hasValueEi called 20 returned 100% blocks executed 80%
       20:  134:        bool hasValue(nonneg int varid) {
       20:  135:            return values.find(varid) != values.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        -:  136:        }
        -:  137:
function _ZN12_GLOBAL__N_113ProgramMemory4swapERS0_ called 0 returned 0% blocks executed 0%
    #####:  138:        void swap(ProgramMemory &pm) {
    #####:  139:            values.swap(pm.values);
call    0 never executed
    #####:  140:        }
        -:  141:
function _ZN12_GLOBAL__N_113ProgramMemory5clearEv called 0 returned 0% blocks executed 0%
    #####:  142:        void clear() {
    #####:  143:            values.clear();
call    0 never executed
    #####:  144:        }
        -:  145:
function _ZNK12_GLOBAL__N_113ProgramMemory5emptyEv called 0 returned 0% blocks executed 0%
    #####:  146:        bool empty() const {
    #####:  147:            return values.empty();
call    0 never executed
        -:  148:        }
        -:  149:
        -:  150:        void replace(const ProgramMemory &pm) {
        -:  151:            for (auto&& p:pm.values)
        -:  152:                values[p.first] = p.second;
        -:  153:        }
        -:  154:
        -:  155:        void insert(const ProgramMemory &pm) {
        -:  156:            for (auto&& p:pm.values)
        -:  157:                values.insert(p);
        -:  158:        }
        -:  159:    };
        -:  160:}
        -:  161:
        -:  162:static void execute(const Token *expr,
        -:  163:                    ProgramMemory * const programMemory,
        -:  164:                    MathLib::bigint *result,
        -:  165:                    bool *error);
        -:  166:
function _ZL15bailoutInternalP9TokenListP11ErrorLoggerPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESD_iSD_ called 0 returned 0% blocks executed 0%
    #####:  167:static void bailoutInternal(TokenList *tokenlist, ErrorLogger *errorLogger, const Token *tok, const std::string &what, const std::string &file, int line, const std::string &function)
        -:  168:{
    #####:  169:    std::list<ErrorLogger::ErrorMessage::FileLocation> callstack(1, ErrorLogger::ErrorMessage::FileLocation(tok, tokenlist));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  170:    ErrorLogger::ErrorMessage errmsg(callstack, tokenlist->getSourceFilePath(), Severity::debug,
    #####:  171:                                     Path::stripDirectoryPart(file) + ":" + MathLib::toString(line) + ":" + function + " bailout: " + what, "valueFlowBailout", false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
    #####:  172:    errorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  173:}
call    0 never executed
        -:  174:
        -:  175:#if (defined __cplusplus) && __cplusplus >= 201103L
        -:  176:#define bailout(tokenlist, errorLogger, tok, what) bailoutInternal(tokenlist, errorLogger, tok, what, __FILE__, __LINE__, __func__)
        -:  177:#elif (defined __GNUC__) || (defined __clang__) || (defined _MSC_VER)
        -:  178:#define bailout(tokenlist, errorLogger, tok, what) bailoutInternal(tokenlist, errorLogger, tok, what, __FILE__, __LINE__, __FUNCTION__)
        -:  179:#else
        -:  180:#define bailout(tokenlist, errorLogger, tok, what) bailoutInternal(tokenlist, errorLogger, tok, what, __FILE__, __LINE__, "(valueFlow)")
        -:  181:#endif
        -:  182:
function _ZL21changeKnownToPossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 93 returned 100% blocks executed 85%
       93:  183:static void changeKnownToPossible(std::list<ValueFlow::Value> &values, int indirect=-1)
        -:  184:{
      185:  185:    for (ValueFlow::Value& v: values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
       92:  186:        if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  187:            continue;
       92:  188:        v.changeKnownToPossible();
call    0 returned 100%
        -:  189:    }
       93:  190:}
        -:  191:
function _ZL16removeImpossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 25 returned 100% blocks executed 100%
       25:  192:static void removeImpossible(std::list<ValueFlow::Value>& values, int indirect = -1)
        -:  193:{
function _ZZL16removeImpossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEiENKUlRKS2_E_clES7_ called 24 returned 100% blocks executed 60%
       49:  194:    values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
       24:  195:        if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  196:            return false;
       24:  197:        return v.isImpossible();
call    0 returned 100%
        -:  198:    });
       25:  199:}
        -:  200:
function _ZL15lowerToPossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 13 returned 100% blocks executed 100%
       13:  201:static void lowerToPossible(std::list<ValueFlow::Value>& values, int indirect = -1)
        -:  202:{
       13:  203:    changeKnownToPossible(values, indirect);
call    0 returned 100%
       13:  204:    removeImpossible(values, indirect);
call    0 returned 100%
       13:  205:}
        -:  206:
function _ZL19lowerToInconclusiveRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEPK8Settingsi called 32 returned 100% blocks executed 18%
       32:  207:static void lowerToInconclusive(std::list<ValueFlow::Value>& values, const Settings* settings, int indirect = -1)
        -:  208:{
       32:  209:    if (settings->inconclusive) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:        removeImpossible(values, indirect);
call    0 never executed
    #####:  211:        for (ValueFlow::Value& v : values) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  212:            if (indirect >= 0 && v.indirect != indirect)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  213:                continue;
    #####:  214:            v.setInconclusive();
call    0 never executed
        -:  215:        }
        -:  216:    } else {
        -:  217:        // Remove all values if the inconclusive flags is not set
function _ZZL19lowerToInconclusiveRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEPK8SettingsiENKUlRKS2_E_clESA_ called 34 returned 100% blocks executed 80%
       66:  218:        values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
       34:  219:            if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  220:                return false;
       34:  221:            return true;
        -:  222:        });
        -:  223:    }
       32:  224:}
        -:  225:
function _ZL21changePossibleToKnownRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 50 returned 100% blocks executed 83%
       50:  226:static void changePossibleToKnown(std::list<ValueFlow::Value>& values, int indirect = -1)
        -:  227:{
      100:  228:    for (ValueFlow::Value& v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
       50:  229:        if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  230:            continue;
       50:  231:        if (!v.isPossible())
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
       17:  232:            continue;
       33:  233:        if (v.bound != ValueFlow::Value::Bound::Point)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  234:            continue;
       33:  235:        v.setKnown();
call    0 returned 100%
        -:  236:    }
       50:  237:}
        -:  238:
        -:  239:/**
        -:  240: * Is condition always false when variable has given value?
        -:  241: * \param condition   top ast token in condition
        -:  242: * \param programMemory   program memory
        -:  243: */
function _ZL16conditionIsFalsePK5TokenRKN12_GLOBAL__N_113ProgramMemoryE called 64 returned 100% blocks executed 58%
       64:  244:static bool conditionIsFalse(const Token *condition, const ProgramMemory &programMemory)
        -:  245:{
       64:  246:    if (!condition)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        1:  247:        return false;
       63:  248:    if (condition->str() == "&&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  249:        return conditionIsFalse(condition->astOperand1(), programMemory) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  250:               conditionIsFalse(condition->astOperand2(), programMemory);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  251:    }
      126:  252:    ProgramMemory progmem(programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       63:  253:    MathLib::bigint result = 0;
       63:  254:    bool error = false;
       63:  255:    execute(condition, &progmem, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       63:  256:    return !error && result == 0;
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
        -:  257:}
        -:  258:
        -:  259:/**
        -:  260: * Is condition always true when variable has given value?
        -:  261: * \param condition   top ast token in condition
        -:  262: * \param programMemory   program memory
        -:  263: */
function _ZL15conditionIsTruePK5TokenRKN12_GLOBAL__N_113ProgramMemoryE called 62 returned 100% blocks executed 58%
       62:  264:static bool conditionIsTrue(const Token *condition, const ProgramMemory &programMemory)
        -:  265:{
       62:  266:    if (!condition)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        2:  267:        return false;
       60:  268:    if (condition->str() == "||") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  269:        return conditionIsTrue(condition->astOperand1(), programMemory) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  270:               conditionIsTrue(condition->astOperand2(), programMemory);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  271:    }
      120:  272:    ProgramMemory progmem(programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       60:  273:    bool error = false;
       60:  274:    MathLib::bigint result = 0;
       60:  275:    execute(condition, &progmem, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       60:  276:    return !error && result == 1;
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:  277:}
        -:  278:
function _Z18setValueUpperBoundRN9ValueFlow5ValueEb called 36 returned 100% blocks executed 100%
       36:  279:void setValueUpperBound(ValueFlow::Value& value, bool upper)
        -:  280:{
       36:  281:    if (upper)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       18:  282:        value.bound = ValueFlow::Value::Bound::Upper;
        -:  283:    else
       18:  284:        value.bound = ValueFlow::Value::Bound::Lower;
       36:  285:}
        -:  286:
function _Z13setValueBoundRN9ValueFlow5ValueEPK5Tokenb called 166 returned 100% blocks executed 100%
      166:  287:void setValueBound(ValueFlow::Value& value, const Token* tok, bool invert)
        -:  288:{
      166:  289:    if (Token::Match(tok, "<|<=")) {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
       20:  290:        setValueUpperBound(value, !invert);
call    0 returned 100%
      146:  291:    } else if (Token::Match(tok, ">|>=")) {
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
       16:  292:        setValueUpperBound(value, invert);
call    0 returned 100%
        -:  293:    }
      166:  294:}
        -:  295:
function _ZL20setConditionalValuesPK5TokenbxRN9ValueFlow5ValueES4_ called 83 returned 100% blocks executed 80%
       83:  296:static void setConditionalValues(const Token *tok,
        -:  297:                                 bool invert,
        -:  298:                                 MathLib::bigint value,
        -:  299:                                 ValueFlow::Value &true_value,
        -:  300:                                 ValueFlow::Value &false_value)
        -:  301:{
       83:  302:    if (Token::Match(tok, "==|!=|>=|<=")) {
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
       65:  303:        true_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
       65:  304:        const char* greaterThan = ">=";
       65:  305:        const char* lessThan = "<=";
       65:  306:        if (invert)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        2:  307:            std::swap(greaterThan, lessThan);
call    0 returned 100%
       65:  308:        if (Token::simpleMatch(tok, greaterThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  309:            false_value = ValueFlow::Value{tok, value - 1};
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
       65:  310:        } else if (Token::simpleMatch(tok, lessThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  311:            false_value = ValueFlow::Value{tok, value + 1};
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  312:        } else {
       65:  313:            false_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:  314:        }
        -:  315:    } else {
       18:  316:        const char* greaterThan = ">";
       18:  317:        const char* lessThan = "<";
       18:  318:        if (invert)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  319:            std::swap(greaterThan, lessThan);
call    0 never executed
       18:  320:        if (Token::simpleMatch(tok, greaterThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 44% (fallthrough)
branch  4 taken 56%
        8:  321:            true_value = ValueFlow::Value{tok, value + 1};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        8:  322:            false_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
       10:  323:        } else if (Token::simpleMatch(tok, lessThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       10:  324:            true_value = ValueFlow::Value{tok, value - 1};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
       10:  325:            false_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:  326:        }
        -:  327:    }
       83:  328:    setValueBound(true_value, tok, invert);
call    0 returned 100%
       83:  329:    setValueBound(false_value, tok, !invert);
call    0 returned 100%
       83:  330:}
call    0 never executed
        -:  331:
function _ZL11isSaturatedx called 83 returned 100% blocks executed 88%
       83:  332:static bool isSaturated(MathLib::bigint value)
        -:  333:{
       83:  334:    return value == std::numeric_limits<MathLib::bigint>::max() || value == std::numeric_limits<MathLib::bigint>::min();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  335:}
        -:  336:
function _ZL15parseCompareIntPK5TokenRN9ValueFlow5ValueES4_ called 38070 returned 100% blocks executed 94%
    38070:  337:static const Token *parseCompareInt(const Token *tok, ValueFlow::Value &true_value, ValueFlow::Value &false_value)
        -:  338:{
    38070:  339:    if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
call    3 returned 100%
branch  4 taken 8% (fallthrough)
branch  5 taken 92%
branch  6 taken 85% (fallthrough)
branch  7 taken 15%
    32543:  340:        return nullptr;
     5527:  341:    if (Token::Match(tok, "%comp%")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       84:  342:        if (tok->astOperand1()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        2:  343:            MathLib::bigint value = tok->astOperand1()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:  344:            if (isSaturated(value))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  345:                return nullptr;
        2:  346:            setConditionalValues(tok, true, value, true_value, false_value);
call    0 returned 100%
        2:  347:            return tok->astOperand2();
call    0 returned 100%
       82:  348:        } else if (tok->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
       81:  349:            MathLib::bigint value = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       81:  350:            if (isSaturated(value))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  351:                return nullptr;
       81:  352:            setConditionalValues(tok, false, value, true_value, false_value);
call    0 returned 100%
       81:  353:            return tok->astOperand1();
call    0 returned 100%
        -:  354:        }
        -:  355:    }
     5444:  356:    return nullptr;
        -:  357:}
        -:  358:
function _ZL27programMemoryParseConditionRN12_GLOBAL__N_113ProgramMemoryEPK5TokenS4_PK8Settingsb called 4 returned 100% blocks executed 11%
        4:  359:static void programMemoryParseCondition(ProgramMemory& pm, const Token* tok, const Token* endTok, const Settings* settings, bool then)
        -:  360:{
        4:  361:    if (Token::Match(tok, "==|>=|<=|<|>|!=")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  362:        if (then && !Token::Match(tok, "==|>=|<="))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        8:  363:            return;
    #####:  364:        if (!then && !Token::Match(tok, "<|>|!="))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  365:            return;
    #####:  366:        ValueFlow::Value truevalue;
call    0 never executed
call    1 never executed
    #####:  367:        ValueFlow::Value falsevalue;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  368:        const Token* vartok = parseCompareInt(tok, truevalue, falsevalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:        if (!vartok)
branch  0 never executed
branch  1 never executed
    #####:  370:            return;
    #####:  371:        if (vartok->varId() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  372:            return;
    #####:  373:        if (!truevalue.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  374:            return;
    #####:  375:        if (isVariableChanged(tok->next(), endTok, vartok->varId(), false, settings, true))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  376:            return;
    #####:  377:        pm.setIntValue(vartok->varId(),  then ? truevalue.intvalue : falsevalue.intvalue);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  378:    } else if (Token::Match(tok, "%var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  379:        if (tok->varId() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  380:            return;
    #####:  381:        if (then && !astIsPointer(tok) && !astIsBool(tok))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  382:            return;
    #####:  383:        if (isVariableChanged(tok->next(), endTok, tok->varId(), false, settings, true))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  384:            return;
    #####:  385:        pm.setIntValue(tok->varId(), then);
call    0 never executed
call    1 never executed
    #####:  386:    } else if (Token::simpleMatch(tok, "!")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  387:        programMemoryParseCondition(pm, tok->astOperand1(), endTok, settings, !then);
call    0 never executed
call    1 never executed
    #####:  388:    } else if (then && Token::simpleMatch(tok, "&&")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  389:        programMemoryParseCondition(pm, tok->astOperand1(), endTok, settings, then);
call    0 never executed
call    1 never executed
    #####:  390:        programMemoryParseCondition(pm, tok->astOperand2(), endTok, settings, then);
call    0 never executed
call    1 never executed
    #####:  391:    } else if (!then && Token::simpleMatch(tok, "||")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  392:        programMemoryParseCondition(pm, tok->astOperand1(), endTok, settings, then);
call    0 never executed
call    1 never executed
    #####:  393:        programMemoryParseCondition(pm, tok->astOperand2(), endTok, settings, then);
call    0 never executed
call    1 never executed
        -:  394:    }
        -:  395:}
        -:  396:
function _ZL31fillProgramMemoryFromConditionsRN12_GLOBAL__N_113ProgramMemoryEPK5ScopePK5TokenPK8Settings called 50 returned 100% blocks executed 59%
       50:  397:static void fillProgramMemoryFromConditions(ProgramMemory& pm, const Scope* scope, const Token* endTok, const Settings* settings)
        -:  398:{
       50:  399:    if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  400:        return;
       50:  401:    if (!scope->isLocal())
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
       46:  402:        return;
        4:  403:    assert(scope != scope->nestedIn);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        4:  404:    fillProgramMemoryFromConditions(pm, scope->nestedIn, endTok, settings);
call    0 returned 100%
        4:  405:    if (scope->type == Scope::eIf || scope->type == Scope::eWhile || scope->type == Scope::eElse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4:  406:        const Token * bodyStart = scope->bodyStart;
        4:  407:        if (scope->type == Scope::eElse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  408:            if (!Token::simpleMatch(bodyStart->tokAt(-2), "} else {"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  409:                return;
    #####:  410:            bodyStart = bodyStart->linkAt(-2);
call    0 never executed
        -:  411:        }
        4:  412:        const Token * condEndTok = bodyStart->previous();
call    0 returned 100%
        4:  413:        if (!Token::simpleMatch(condEndTok, ") {"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  414:            return;
        4:  415:        const Token * condStartTok = condEndTok->link();
call    0 returned 100%
        4:  416:        if (!condStartTok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  417:            return;
        4:  418:        if (!Token::Match(condStartTok->previous(), "if|while ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  419:            return;
        4:  420:        const Token * condTok = condStartTok->astOperand2();
call    0 returned 100%
        4:  421:        programMemoryParseCondition(pm, condTok, endTok, settings, scope->type != Scope::eElse);
call    0 returned 100%
        -:  422:    }
        -:  423:}
        -:  424:
function _ZL31fillProgramMemoryFromConditionsRN12_GLOBAL__N_113ProgramMemoryEPK5TokenPK8Settings called 46 returned 100% blocks executed 100%
       46:  425:static void fillProgramMemoryFromConditions(ProgramMemory& pm, const Token* tok, const Settings* settings)
        -:  426:{
       46:  427:    fillProgramMemoryFromConditions(pm, tok->scope(), tok, settings);
call    0 returned 100%
call    1 returned 100%
       46:  428:}
        -:  429:
function _ZL32fillProgramMemoryFromAssignmentsRN12_GLOBAL__N_113ProgramMemoryEPK5TokenRKS0_NSt7__debug13unordered_mapIiN9ValueFlow5ValueESt4hashIiESt8equal_toIiESaISt4pairIKiSA_EEEE called 46 returned 100% blocks executed 69%
       46:  430:static void fillProgramMemoryFromAssignments(ProgramMemory& pm, const Token* tok, const ProgramMemory& state, std::unordered_map<nonneg int, ValueFlow::Value> vars)
        -:  431:{
       46:  432:    int indentlevel = 0;
      330:  433:    for (const Token *tok2 = tok; tok2; tok2 = tok2->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      330:  434:        bool setvar = false;
      330:  435:        if (Token::Match(tok2, "[;{}] %var% = %var% ;")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  436:            for (auto&& p:vars) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  437:                if (p.first != tok2->next()->varId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  438:                    continue;
    #####:  439:                const Token *vartok = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  440:                pm.setValue(vartok->varId(), p.second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  441:                setvar = true;
        -:  442:            }
        -:  443:        }
      640:  444:        if (!setvar && (Token::Match(tok2, "[;{}] %var% =") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 6% (fallthrough)
branch  8 taken 94%
      310:  445:                        Token::Match(tok2, "[;{}] const| %type% %var% ("))) {
call    0 returned 100%
       20:  446:            const Token *vartok = tok2->next();
call    0 returned 100%
       20:  447:            while (vartok->next()->isName())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  448:                vartok = vartok->next();
call    0 never executed
       20:  449:            if (!pm.hasValue(vartok->varId())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        4:  450:                MathLib::bigint result = 0;
        4:  451:                bool error = false;
        4:  452:                execute(vartok->next()->astOperand2(), &pm, &result, &error);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        4:  453:                if (!error)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  454:                    pm.setIntValue(vartok->varId(), result);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  455:            }
        -:  456:        }
        -:  457:
      330:  458:        if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
       30:  459:            if (indentlevel <= 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       30:  460:                break;
    #####:  461:            --indentlevel;
        -:  462:        }
      300:  463:        if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
       24:  464:            const Token *cond = tok2->link();
call    0 returned 100%
       24:  465:            cond = Token::simpleMatch(cond->previous(), ") {") ? cond->linkAt(-1) : nullptr;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
       24:  466:            if (cond && conditionIsFalse(cond->astOperand2(), state))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        8:  467:                tok2 = cond->previous();
call    0 returned 100%
       16:  468:            else if (cond && conditionIsTrue(cond->astOperand2(), state)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  469:                ++indentlevel;
    #####:  470:                continue;
        -:  471:            } else
       16:  472:                break;
        -:  473:        }
        -:  474:    }
       46:  475:}
        -:  476:
        -:  477:/**
        -:  478: * Get program memory by looking backwards from given token.
        -:  479: */
function _ZL16getProgramMemoryPK5TokeniRKN9ValueFlow5ValueE called 46 returned 100% blocks executed 56%
       46:  480:static ProgramMemory getProgramMemory(const Token *tok, nonneg int varid, const ValueFlow::Value &value)
        -:  481:{
       46:  482:    ProgramMemory programMemory;
call    0 returned 100%
       46:  483:    if (value.tokvalue)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
       40:  484:        fillProgramMemoryFromConditions(programMemory, value.tokvalue, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46:  485:    if (value.condition)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        6:  486:        fillProgramMemoryFromConditions(programMemory, value.condition, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46:  487:    programMemory.setValue(varid, value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46:  488:    if (value.varId)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  489:        programMemory.setIntValue(value.varId, value.varvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
       92:  490:    const ProgramMemory state = programMemory;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
       46:  491:    fillProgramMemoryFromAssignments(programMemory, tok, state, {{varid, value}});
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
branch 12 taken 50% (fallthrough)
branch 13 taken 50%
call   14 returned 100%
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
       92:  492:    return programMemory;
        -:  493:}
        -:  494:
        -:  495:/**
        -:  496: * Should value be skipped because it's hidden inside && || or ?: expression.
        -:  497: * Example: ((x!=NULL) && (*x == 123))
        -:  498: * If 'valuetok' points at the x in '(*x == 123)'. Then the '&&' will be returned.
        -:  499: * @param valuetok original variable token
        -:  500: * @return NULL=>don't skip, non-NULL=>The operator token that cause the skip. For instance the '&&'.
        -:  501: * */
function _ZL32skipValueInConditionalExpressionPK5Token called 64 returned 100% blocks executed 46%
       64:  502:static const Token * skipValueInConditionalExpression(const Token * const valuetok)
        -:  503:{
        -:  504:    // Walk up the ast
       64:  505:    const Token *prev = valuetok;
      156:  506:    for (const Token *tok = valuetok->astParent(); tok; tok = tok->astParent()) {
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
call    3 returned 100%
       92:  507:        const bool prevIsLhs = (prev == tok->astOperand1());
call    0 returned 100%
       92:  508:        prev = tok;
        -:  509:
       92:  510:        if (prevIsLhs || !Token::Match(tok, "%oror%|&&|?|:"))
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
       92:  511:            continue;
        -:  512:
    #####:  513:        if (tok->hasKnownIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  514:            return tok;
        -:  515:
        -:  516:        // Is variable protected in LHS..
    #####:  517:        bool bailout = false;
function _ZZL32skipValueInConditionalExpressionPK5TokenENKUlS1_E_clES1_ called 0 returned 0% blocks executed 0%
    #####:  518:        visitAstNodes(tok->astOperand1(), [&](const Token *tok2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  519:            if (tok2->str() == ".")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  520:                return ChildrenToVisit::none;
        -:  521:            // A variable is seen..
    #####:  522:            if (tok2 != valuetok && tok2->variable() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  523:                (tok2->varId() == valuetok->varId() || (!tok2->variable()->isArgument() && !tok2->hasKnownIntValue()))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  524:                // TODO: limit this bailout
    #####:  525:                bailout = true;
    #####:  526:                return ChildrenToVisit::done;
        -:  527:            }
    #####:  528:            return ChildrenToVisit::op1_and_op2;
        -:  529:        });
    #####:  530:        if (bailout)
branch  0 never executed
branch  1 never executed
    #####:  531:            return tok;
        -:  532:    }
       64:  533:    return nullptr;
        -:  534:}
        -:  535:
function _ZL13isEscapeScopePK5TokenP9TokenListb called 4100 returned 100% blocks executed 91%
     4100:  536:static bool isEscapeScope(const Token* tok, TokenList * tokenlist, bool unknown = false)
        -:  537:{
     4100:  538:    if (!Token::simpleMatch(tok, "{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  539:        return false;
        -:  540:    // TODO this search for termTok in all subscopes. It should check the end of the scope.
     4100:  541:    const Token * termTok = Token::findmatch(tok, "return|continue|break|throw|goto", tok->link());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     4100:  542:    if (termTok && termTok->scope() == tok->scope())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       39:  543:        return true;
     8122:  544:    std::string unknownFunction;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     4061:  545:    if (tokenlist && tokenlist->getSettings()->library.isScopeNoReturn(tok->link(), &unknownFunction))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       18:  546:        return unknownFunction.empty() || unknown;
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
     4043:  547:    return false;
        -:  548:}
        -:  549:
function _ZL21bailoutSelfAssignmentPK5Token called 14 returned 100% blocks executed 46%
       14:  550:static bool bailoutSelfAssignment(const Token * const tok)
        -:  551:{
       14:  552:    const Token *parent = tok;
      110:  553:    while (parent) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
       48:  554:        const Token *op = parent;
       48:  555:        parent = parent->astParent();
call    0 returned 100%
        -:  556:
        -:  557:        // Assignment where lhs variable exists in rhs => return true
       82:  558:        if (parent                         != nullptr      &&
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       50:  559:            parent->astOperand2()          == op           &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       80:  560:            parent->astOperand1()          != nullptr      &&
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       16:  561:            parent->str()                  == "=") {
call    0 returned 100%
call    1 returned 100%
    #####:  562:            for (const Token *lhs = parent->astOperand1(); lhs; lhs = lhs->astOperand1()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  563:                if (lhs->varId() == tok->varId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  564:                    return true;
    #####:  565:                if (lhs->astOperand2() && lhs->astOperand2()->varId() == tok->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  566:                    return true;
        -:  567:            }
        -:  568:        }
        -:  569:    }
       14:  570:    return false;
        -:  571:}
        -:  572:
function _ZL9castValueN9ValueFlow5ValueEN9ValueType4SignEi called 0 returned 0% blocks executed 0%
    #####:  573:static ValueFlow::Value castValue(ValueFlow::Value value, const ValueType::Sign sign, nonneg int bit)
        -:  574:{
    #####:  575:    if (value.isFloatValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  576:        value.valueType = ValueFlow::Value::INT;
    #####:  577:        if (value.floatValue >= std::numeric_limits<int>::min() && value.floatValue <= std::numeric_limits<int>::max()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  578:            value.intvalue = value.floatValue;
        -:  579:        } else { // don't perform UB
    #####:  580:            value.intvalue = 0;
        -:  581:        }
        -:  582:    }
    #####:  583:    if (bit < MathLib::bigint_bits) {
branch  0 never executed
branch  1 never executed
    #####:  584:        const MathLib::biguint one = 1;
    #####:  585:        value.intvalue &= (one << bit) - 1;
    #####:  586:        if (sign == ValueType::Sign::SIGNED && value.intvalue & (one << (bit - 1))) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  587:            value.intvalue |= ~((one << bit) - 1ULL);
        -:  588:        }
        -:  589:    }
    #####:  590:    return value;
call    0 never executed
        -:  591:}
        -:  592:
function _ZL22combineValuePropertiesRKN9ValueFlow5ValueES2_PS0_ called 6 returned 100% blocks executed 86%
        6:  593:static void combineValueProperties(const ValueFlow::Value &value1, const ValueFlow::Value &value2, ValueFlow::Value *result)
        -:  594:{
        6:  595:    if (value1.isKnown() && value2.isKnown())
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  596:        result->setKnown();
call    0 returned 100%
        4:  597:    else if (value1.isImpossible() || value2.isImpossible())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  598:        result->setImpossible();
call    0 never executed
        4:  599:    else if (value1.isInconclusive() || value2.isInconclusive())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  600:        result->setInconclusive();
call    0 never executed
        -:  601:    else
        4:  602:        result->setPossible();
call    0 returned 100%
        6:  603:    result->condition = value1.condition ? value1.condition : value2.condition;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        6:  604:    result->varId = (value1.varId != 0U) ? value1.varId : value2.varId;
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        6:  605:    result->varvalue = (result->varId == value1.varId) ? value1.varvalue : value2.varvalue;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  606:    result->errorPath = (value1.errorPath.empty() ? value2 : value1).errorPath;
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
        6:  607:    result->safe = value1.safe || value2.safe;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        6:  608:}
        -:  609:
        -:  610:
function _ZL21getCastTypeStartTokenPK5Token called 4270 returned 100% blocks executed 86%
     4270:  611:static const Token *getCastTypeStartToken(const Token *parent)
        -:  612:{
        -:  613:    // TODO: This might be a generic utility function?
     4270:  614:    if (!parent || parent->str() != "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
branch  6 taken 4% (fallthrough)
branch  7 taken 96%
      153:  615:        return nullptr;
     4117:  616:    if (!parent->astOperand2() && Token::Match(parent,"( %name%"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        2:  617:        return parent->next();
call    0 returned 100%
     4115:  618:    if (parent->astOperand2() && Token::Match(parent->astOperand1(), "const_cast|dynamic_cast|reinterpret_cast|static_cast <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  619:        return parent->astOperand1()->tokAt(2);
call    0 never executed
call    1 never executed
     4115:  620:    return nullptr;
        -:  621:}
        -:  622:
        -:  623:/** Set token value for cast */
        -:  624:static void setTokenValueCast(Token *parent, const ValueType &valueType, const ValueFlow::Value &value, const Settings *settings);
        -:  625:
        -:  626:/** set ValueFlow value and perform calculations if possible */
function _ZL13setTokenValueP5TokenRKN9ValueFlow5ValueEPK8Settings called 4335 returned 100% blocks executed 26%
     4335:  627:static void setTokenValue(Token* tok, const ValueFlow::Value &value, const Settings *settings)
        -:  628:{
     4335:  629:    if (!tok->addValue(value))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       33:  630:        return;
        -:  631:
     4302:  632:    Token *parent = tok->astParent();
call    0 returned 100%
     4302:  633:    if (!parent)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  634:        return;
        -:  635:
     4302:  636:    if (value.isContainerSizeValue()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  637:        // .empty, .size, +"abc", +'a'
    #####:  638:        if (parent->str() == "+") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  639:            for (const ValueFlow::Value &value1 : parent->astOperand1()->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  640:                for (const ValueFlow::Value &value2 : parent->astOperand2()->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  641:                    ValueFlow::Value result;
call    0 never executed
call    1 never executed
    #####:  642:                    result.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####:  643:                    if (value1.isContainerSizeValue() && value2.isContainerSizeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  644:                        result.intvalue = value1.intvalue + value2.intvalue;
    #####:  645:                    else if (value1.isContainerSizeValue() && value2.isTokValue() && value2.tokvalue->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  646:                        result.intvalue = value1.intvalue + Token::getStrLength(value2.tokvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  647:                    else if (value2.isContainerSizeValue() && value1.isTokValue() && value1.tokvalue->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  648:                        result.intvalue = Token::getStrLength(value1.tokvalue) + value2.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  649:                    else
    #####:  650:                        continue;
        -:  651:
    #####:  652:                    combineValueProperties(value1, value2, &result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  653:
    #####:  654:                    setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  655:                }
        -:  656:            }
        -:  657:        }
        -:  658:
        -:  659:
    #####:  660:        else if (Token::Match(parent, ". %name% (") && parent->astParent() == parent->tokAt(2) && parent->astOperand1() && parent->astOperand1()->valueType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  661:            const Library::Container *c = parent->astOperand1()->valueType()->container;
call    0 never executed
call    1 never executed
    #####:  662:            const Library::Container::Yield yields = c ? c->getYield(parent->strAt(1)) : Library::Container::Yield::NO_YIELD;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  663:            if (yields == Library::Container::Yield::SIZE) {
branch  0 never executed
branch  1 never executed
    #####:  664:                ValueFlow::Value v(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  665:                v.valueType = ValueFlow::Value::ValueType::INT;
    #####:  666:                setTokenValue(parent->astParent(), v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  667:            } else if (yields == Library::Container::Yield::EMPTY) {
branch  0 never executed
branch  1 never executed
    #####:  668:                ValueFlow::Value v(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  669:                v.intvalue = !v.intvalue;
    #####:  670:                v.valueType = ValueFlow::Value::ValueType::INT;
    #####:  671:                setTokenValue(parent->astParent(), v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  672:            }
        -:  673:        }
        -:  674:
    #####:  675:        return;
        -:  676:    }
        -:  677:
     4302:  678:    if (value.isLifetimeValue()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       13:  679:        if (value.lifetimeKind == ValueFlow::Value::LifetimeKind::Iterator && astIsIterator(parent)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  680:            setTokenValue(parent,value,settings);
call    0 never executed
       13:  681:        } else if (astIsPointer(tok) && astIsPointer(parent) &&
call    0 returned 100%
branch  1 taken 54% (fallthrough)
branch  2 taken 46%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  682:                   (parent->isArithmeticalOp() || Token::Match(parent, "( %type%"))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  683:            setTokenValue(parent,value,settings);
call    0 never executed
        -:  684:        }
       13:  685:        return;
        -:  686:    }
        -:  687:
     4289:  688:    if (value.isUninitValue()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       38:  689:        ValueFlow::Value pvalue = value;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
       19:  690:        if (parent->isUnaryOp("&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
    #####:  691:            pvalue.indirect++;
    #####:  692:            setTokenValue(parent, pvalue, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
       19:  693:        } else if (Token::Match(parent, ". %var%") && parent->astOperand1() == tok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  694:            if (parent->originalName() == "->" && pvalue.indirect > 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  695:                pvalue.indirect--;
    #####:  696:            setTokenValue(parent->astOperand2(), pvalue, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       19:  697:        } else if (Token::Match(parent->astParent(), ". %var%") && parent->astParent()->astOperand1() == parent) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  698:            if (parent->astParent()->originalName() == "->" && pvalue.indirect > 0)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  699:                pvalue.indirect--;
    #####:  700:            setTokenValue(parent->astParent()->astOperand2(), pvalue, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       19:  701:        } else if (parent->isUnaryOp("*") && pvalue.indirect > 0) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 never executed
branch 10 never executed
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####:  702:            pvalue.indirect--;
    #####:  703:            setTokenValue(parent, pvalue, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  704:        }
       19:  705:        return;
        -:  706:    }
        -:  707:
        -:  708:    // cast..
     4270:  709:    if (const Token *castType = getCastTypeStartToken(parent)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2:  710:        if (astIsPointer(tok) && value.valueType == ValueFlow::Value::INT &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  711:            Token::simpleMatch(parent->astOperand1(), "dynamic_cast"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  712:            return;
        4:  713:        const ValueType &valueType = ValueType::parseDecl(castType, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        2:  714:        setTokenValueCast(parent, valueType, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  715:    }
        -:  716:
     4268:  717:    else if (parent->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  718:        setTokenValue(parent,value,settings);
call    0 never executed
        -:  719:    }
        -:  720:
     4268:  721:    else if (parent->str() == "?" && tok->str() == ":" && tok == parent->astOperand2() && parent->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
        -:  722:        // is condition always true/false?
    #####:  723:        if (parent->astOperand1()->hasKnownValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  724:            const ValueFlow::Value &condvalue = parent->astOperand1()->values().front();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  725:            const bool cond(condvalue.isTokValue() || (condvalue.isIntValue() && condvalue.intvalue != 0));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  726:            if (cond && !tok->astOperand1()) { // true condition, no second operator
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  727:                setTokenValue(parent, condvalue, settings);
call    0 never executed
        -:  728:            } else {
    #####:  729:                const Token *op = cond ? tok->astOperand1() : tok->astOperand2();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  730:                if (!op) // #7769 segmentation fault at setTokenValue()
branch  0 never executed
branch  1 never executed
    #####:  731:                    return;
    #####:  732:                const std::list<ValueFlow::Value> &values = op->values();
call    0 never executed
    #####:  733:                if (std::find(values.begin(), values.end(), value) != values.end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####:  734:                    setTokenValue(parent, value, settings);
call    0 never executed
        -:  735:            }
        -:  736:        } else {
        -:  737:            // is condition only depending on 1 variable?
    #####:  738:            int varId = 0;
    #####:  739:            bool ret = false;
    #####:  740:            visitAstNodes(parent->astOperand1(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
function _ZZL13setTokenValueP5TokenRKN9ValueFlow5ValueEPK8SettingsENKUlPKS_E_clES9_ called 0 returned 0% blocks executed 0%
    #####:  741:            [&](const Token *t) {
    #####:  742:                if (t->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  743:                    if (varId > 0 || value.varId != 0U)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  744:                        ret = true;
    #####:  745:                    varId = t->varId();
call    0 never executed
    #####:  746:                } else if (t->str() == "(" && Token::Match(t->previous(), "%name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  747:                    ret = true; // function call
    #####:  748:                return ret ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 never executed
branch  1 never executed
        -:  749:            });
    #####:  750:            if (ret)
branch  0 never executed
branch  1 never executed
    #####:  751:                return;
        -:  752:
    #####:  753:            ValueFlow::Value v(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  754:            v.conditional = true;
    #####:  755:            v.changeKnownToPossible();
call    0 never executed
        -:  756:
    #####:  757:            if (varId)
branch  0 never executed
branch  1 never executed
    #####:  758:                v.varId = varId;
        -:  759:
    #####:  760:            setTokenValue(parent, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  761:        }
        -:  762:    }
        -:  763:
        -:  764:    // Calculations..
    12851:  765:    else if ((parent->isArithmeticalOp() || parent->isComparisonOp() || (parent->tokType() == Token::eBitOp) || (parent->tokType() == Token::eLogicalOp)) &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
     4380:  766:             parent->astOperand1() &&
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 95% (fallthrough)
branch  4 taken 5%
       56:  767:             parent->astOperand2()) {
call    0 returned 100%
        -:  768:
        -:  769:        // Dont compare impossible values
       53:  770:        if (parent->isComparisonOp() && value.isImpossible())
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  771:            return;
        -:  772:
        -:  773:        // known result when a operand is 0.
       53:  774:        if (Token::Match(parent, "[&*]") && value.isKnown() && value.isIntValue() && value.intvalue==0) {
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  775:            setTokenValue(parent, value, settings);
call    0 never executed
    #####:  776:            return;
        -:  777:        }
        -:  778:
        -:  779:        // known result when a operand is true.
       53:  780:        if (Token::simpleMatch(parent, "&&") && value.isKnown() && value.isIntValue() && value.intvalue==0) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  781:            setTokenValue(parent, value, settings);
call    0 never executed
    #####:  782:            return;
        -:  783:        }
        -:  784:
        -:  785:        // known result when a operand is false.
       53:  786:        if (Token::simpleMatch(parent, "||") && value.isKnown() && value.isIntValue() && value.intvalue!=0) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  787:            setTokenValue(parent, value, settings);
call    0 never executed
    #####:  788:            return;
        -:  789:        }
        -:  790:
       65:  791:        for (const ValueFlow::Value &value1 : parent->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 18% (fallthrough)
branch  6 taken 82%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
call   13 never executed
       12:  792:            if (!value1.isIntValue() && !value1.isFloatValue() && !value1.isTokValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  793:                continue;
       12:  794:            if (value1.isTokValue() && (!parent->isComparisonOp() || value1.tokvalue->tokType() != Token::eString))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  795:                continue;
       18:  796:            for (const ValueFlow::Value &value2 : parent->astOperand2()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 33% (fallthrough)
branch  6 taken 67%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        6:  797:                if (!value2.isIntValue() && !value2.isFloatValue() && !value2.isTokValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  798:                    continue;
        6:  799:                if (value2.isTokValue() && (!parent->isComparisonOp() || value2.tokvalue->tokType() != Token::eString || value1.isTokValue()))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  800:                    continue;
       12:  801:                if (value1.isKnown() || value2.isKnown() || value1.varId == 0U || value2.varId == 0U ||
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
    #####:  802:                    (value1.varId == value2.varId && value1.varvalue == value2.varvalue && value1.isIntValue() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  803:                     value2.isIntValue())) {
call    0 never executed
       12:  804:                    ValueFlow::Value result(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        6:  805:                    combineValueProperties(value1, value2, &result);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  806:                    const float floatValue1 = value1.isIntValue() ? value1.intvalue : value1.floatValue;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6:  807:                    const float floatValue2 = value2.isIntValue() ? value2.intvalue : value2.floatValue;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6:  808:                    switch (parent->str()[0]) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 33%
branch  8 taken 33%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
    #####:  809:                    case '+':
    #####:  810:                        if (value1.isTokValue() || value2.isTokValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  811:                            break;
    #####:  812:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  813:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  814:                            result.floatValue = floatValue1 + floatValue2;
        -:  815:                        } else {
    #####:  816:                            result.intvalue = value1.intvalue + value2.intvalue;
        -:  817:                        }
    #####:  818:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  819:                        break;
    #####:  820:                    case '-':
    #####:  821:                        if (value1.isTokValue() || value2.isTokValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  822:                            break;
    #####:  823:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  824:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  825:                            result.floatValue = floatValue1 - floatValue2;
        -:  826:                        } else {
    #####:  827:                            result.intvalue = value1.intvalue - value2.intvalue;
        -:  828:                        }
    #####:  829:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:                        break;
        2:  831:                    case '*':
        2:  832:                        if (value1.isTokValue() || value2.isTokValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  833:                            break;
        2:  834:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  835:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  836:                            result.floatValue = floatValue1 * floatValue2;
        -:  837:                        } else {
        2:  838:                            result.intvalue = value1.intvalue * value2.intvalue;
        -:  839:                        }
        2:  840:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  841:                        break;
    #####:  842:                    case '/':
    #####:  843:                        if (value1.isTokValue() || value2.isTokValue() || value2.intvalue == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  844:                            break;
    #####:  845:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  846:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  847:                            result.floatValue = floatValue1 / floatValue2;
        -:  848:                        } else {
    #####:  849:                            result.intvalue = value1.intvalue / value2.intvalue;
        -:  850:                        }
    #####:  851:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:                        break;
    #####:  853:                    case '%':
    #####:  854:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  855:                            break;
    #####:  856:                        if (value2.intvalue == 0)
branch  0 never executed
branch  1 never executed
    #####:  857:                            break;
    #####:  858:                        result.intvalue = value1.intvalue % value2.intvalue;
    #####:  859:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  860:                        break;
        2:  861:                    case '=':
        2:  862:                        if (parent->str() == "==") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:  863:                            if ((value1.isIntValue() && value2.isTokValue()) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        2:  864:                                (value1.isTokValue() && value2.isIntValue())) {
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  865:                                result.intvalue = 0;
    #####:  866:                                setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        2:  867:                            } else if (value1.isIntValue() && value2.isIntValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        2:  868:                                result.intvalue = value1.intvalue == value2.intvalue;
        2:  869:                                setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  870:                            }
        -:  871:                        }
        2:  872:                        break;
        2:  873:                    case '!':
        2:  874:                        if (parent->str() == "!=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:  875:                            if ((value1.isIntValue() && value2.isTokValue()) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        2:  876:                                (value1.isTokValue() && value2.isIntValue())) {
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  877:                                result.intvalue = 1;
    #####:  878:                                setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        2:  879:                            } else if (value1.isIntValue() && value2.isIntValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        2:  880:                                result.intvalue = value1.intvalue != value2.intvalue;
        2:  881:                                setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  882:                            }
        -:  883:                        }
        2:  884:                        break;
    #####:  885:                    case '>': {
    #####:  886:                        const bool f = value1.isFloatValue() || value2.isFloatValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  887:                        if (!f && !value1.isIntValue() && !value2.isIntValue())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  888:                            break;
    #####:  889:                        if (parent->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  890:                            result.intvalue = f ? (floatValue1 > floatValue2) : (value1.intvalue > value2.intvalue);
branch  0 never executed
branch  1 never executed
    #####:  891:                        else if (parent->str() == ">=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  892:                            result.intvalue = f ? (floatValue1 >= floatValue2) : (value1.intvalue >= value2.intvalue);
branch  0 never executed
branch  1 never executed
    #####:  893:                        else if (!f && parent->str() == ">>" && value1.intvalue >= 0 && value2.intvalue >= 0 && value2.intvalue < MathLib::bigint_bits)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  894:                            result.intvalue = value1.intvalue >> value2.intvalue;
        -:  895:                        else
    #####:  896:                            break;
    #####:  897:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  898:                        break;
        -:  899:                    }
    #####:  900:                    case '<': {
    #####:  901:                        const bool f = value1.isFloatValue() || value2.isFloatValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  902:                        if (!f && !value1.isIntValue() && !value2.isIntValue())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  903:                            break;
    #####:  904:                        if (parent->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  905:                            result.intvalue = f ? (floatValue1 < floatValue2) : (value1.intvalue < value2.intvalue);
branch  0 never executed
branch  1 never executed
    #####:  906:                        else if (parent->str() == "<=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  907:                            result.intvalue = f ? (floatValue1 <= floatValue2) : (value1.intvalue <= value2.intvalue);
branch  0 never executed
branch  1 never executed
    #####:  908:                        else if (!f && parent->str() == "<<" && value1.intvalue >= 0 && value2.intvalue >= 0 && value2.intvalue < MathLib::bigint_bits)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  909:                            result.intvalue = value1.intvalue << value2.intvalue;
        -:  910:                        else
    #####:  911:                            break;
    #####:  912:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  913:                        break;
        -:  914:                    }
    #####:  915:                    case '&':
    #####:  916:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  917:                            break;
    #####:  918:                        if (parent->str() == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  919:                            result.intvalue = value1.intvalue & value2.intvalue;
        -:  920:                        else
    #####:  921:                            result.intvalue = value1.intvalue && value2.intvalue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  922:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:                        break;
    #####:  924:                    case '|':
    #####:  925:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  926:                            break;
    #####:  927:                        if (parent->str() == "|")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  928:                            result.intvalue = value1.intvalue | value2.intvalue;
        -:  929:                        else
    #####:  930:                            result.intvalue = value1.intvalue || value2.intvalue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  931:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  932:                        break;
    #####:  933:                    case '^':
    #####:  934:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  935:                            break;
    #####:  936:                        result.intvalue = value1.intvalue ^ value2.intvalue;
    #####:  937:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:                        break;
    #####:  939:                    default:
        -:  940:                        // unhandled operator, do nothing
    #####:  941:                        break;
        -:  942:                    }
        -:  943:                }
        -:  944:            }
        -:  945:        }
        -:  946:    }
        -:  947:
        -:  948:    // !
     4215:  949:    else if (parent->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        6:  950:        for (const ValueFlow::Value &val : tok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
        3:  951:            if (!val.isIntValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  952:                continue;
        6:  953:            ValueFlow::Value v(val);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        3:  954:            v.intvalue = !v.intvalue;
        3:  955:            setTokenValue(parent, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  956:        }
        -:  957:    }
        -:  958:
        -:  959:    // ~
     4212:  960:    else if (parent->str() == "~") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  961:        for (const ValueFlow::Value &val : tok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  962:            if (!val.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:                continue;
    #####:  964:            ValueFlow::Value v(val);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  965:            v.intvalue = ~v.intvalue;
    #####:  966:            int bits = 0;
    #####:  967:            if (settings &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  968:                tok->valueType() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  969:                tok->valueType()->sign == ValueType::Sign::UNSIGNED &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  970:                tok->valueType()->pointer == 0) {
call    0 never executed
    #####:  971:                if (tok->valueType()->type == ValueType::Type::INT)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  972:                    bits = settings->int_bit;
    #####:  973:                else if (tok->valueType()->type == ValueType::Type::LONG)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:                    bits = settings->long_bit;
        -:  975:            }
    #####:  976:            if (bits > 0 && bits < MathLib::bigint_bits)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  977:                v.intvalue &= (((MathLib::biguint)1)<<bits) - 1;
    #####:  978:            setTokenValue(parent, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  979:        }
        -:  980:    }
        -:  981:
        -:  982:    // unary minus
     4212:  983:    else if (parent->isUnaryOp("-")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  984:        for (const ValueFlow::Value &val : tok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  985:            if (!val.isIntValue() && !val.isFloatValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  986:                continue;
    #####:  987:            ValueFlow::Value v(val);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  988:            if (v.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  989:                v.intvalue = -v.intvalue;
        -:  990:            else
    #####:  991:                v.floatValue = -v.floatValue;
    #####:  992:            setTokenValue(parent, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  993:        }
        -:  994:    }
        -:  995:
        -:  996:    // Array element
     4212:  997:    else if (parent->str() == "[" && parent->isBinaryOp()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       21:  998:        for (const ValueFlow::Value &value1 : parent->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
    #####:  999:            if (!value1.isTokValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:                continue;
    #####: 1001:            for (const ValueFlow::Value &value2 : parent->astOperand2()->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1002:                if (!value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1003:                    continue;
    #####: 1004:                if (value1.varId == 0U || value2.varId == 0U ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1005:                    (value1.varId == value2.varId && value1.varvalue == value2.varvalue)) {
branch  0 never executed
branch  1 never executed
    #####: 1006:                    ValueFlow::Value result(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1007:                    result.condition = value1.condition ? value1.condition : value2.condition;
branch  0 never executed
branch  1 never executed
    #####: 1008:                    result.setInconclusive(value1.isInconclusive() | value2.isInconclusive());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1009:                    result.varId = (value1.varId != 0U) ? value1.varId : value2.varId;
branch  0 never executed
branch  1 never executed
    #####: 1010:                    result.varvalue = (result.varId == value1.varId) ? value1.intvalue : value2.intvalue;
branch  0 never executed
branch  1 never executed
    #####: 1011:                    if (value1.valueKind == value2.valueKind)
branch  0 never executed
branch  1 never executed
    #####: 1012:                        result.valueKind = value1.valueKind;
    #####: 1013:                    if (value1.tokvalue->tokType() == Token::eString) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1014:                        const std::string s = value1.tokvalue->strValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1015:                        const MathLib::bigint index = value2.intvalue;
    #####: 1016:                        if (index == s.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1017:                            result.intvalue = 0;
    #####: 1018:                            setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1019:                        } else if (index >= 0 && index < s.size()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1020:                            result.intvalue = s[index];
call    0 never executed
    #####: 1021:                            setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1022:                        }
    #####: 1023:                    } else if (value1.tokvalue->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1024:                        MathLib::bigint index = value2.intvalue;
    #####: 1025:                        const Token *element = value1.tokvalue->next();
call    0 never executed
    #####: 1026:                        while (index > 0 && element->str() != "}") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1027:                            if (element->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1028:                                --index;
    #####: 1029:                            if (Token::Match(element, "[{}()[]]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1030:                                break;
    #####: 1031:                            element = element->next();
call    0 never executed
        -: 1032:                        }
    #####: 1033:                        if (Token::Match(element, "%num% [,}]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1034:                            result.intvalue = MathLib::toLongNumber(element->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1035:                            setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1036:                        }
        -: 1037:                    }
        -: 1038:                }
        -: 1039:            }
        -: 1040:        }
        -: 1041:    }
        -: 1042:}
        -: 1043:
function _ZL17setTokenValueCastP5TokenRK9ValueTypeRKN9ValueFlow5ValueEPK8Settings called 2 returned 100% blocks executed 5%
        2: 1044:static void setTokenValueCast(Token *parent, const ValueType &valueType, const ValueFlow::Value &value, const Settings *settings)
        -: 1045:{
        2: 1046:    if (valueType.pointer)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1047:        setTokenValue(parent,value,settings);
call    0 returned 100%
    #####: 1048:    else if (valueType.type == ValueType::Type::CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1049:        setTokenValue(parent, castValue(value, valueType.sign, settings->char_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1050:    else if (valueType.type == ValueType::Type::SHORT)
branch  0 never executed
branch  1 never executed
    #####: 1051:        setTokenValue(parent, castValue(value, valueType.sign, settings->short_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1052:    else if (valueType.type == ValueType::Type::INT)
branch  0 never executed
branch  1 never executed
    #####: 1053:        setTokenValue(parent, castValue(value, valueType.sign, settings->int_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1054:    else if (valueType.type == ValueType::Type::LONG)
branch  0 never executed
branch  1 never executed
    #####: 1055:        setTokenValue(parent, castValue(value, valueType.sign, settings->long_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1056:    else if (valueType.type == ValueType::Type::LONGLONG)
branch  0 never executed
branch  1 never executed
    #####: 1057:        setTokenValue(parent, castValue(value, valueType.sign, settings->long_long_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1058:    else if (value.isIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1059:        const long long charMax = settings->signedCharMax();
call    0 never executed
    #####: 1060:        const long long charMin = settings->signedCharMin();
call    0 never executed
    #####: 1061:        if (charMin <= value.intvalue && value.intvalue <= charMax) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1062:            // unknown type, but value is small so there should be no truncation etc
    #####: 1063:            setTokenValue(parent,value,settings);
call    0 never executed
        -: 1064:        }
        -: 1065:    }
        2: 1066:}
        -: 1067:
function _ZL13getSizeOfTypePK5TokenPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1068:static nonneg int getSizeOfType(const Token *typeTok, const Settings *settings)
        -: 1069:{
    #####: 1070:    const std::string &typeStr = typeTok->str();
call    0 never executed
    #####: 1071:    if (typeStr == "char")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:        return 1;
    #####: 1073:    else if (typeStr == "short")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1074:        return settings->sizeof_short;
    #####: 1075:    else if (typeStr == "int")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1076:        return settings->sizeof_int;
    #####: 1077:    else if (typeStr == "long")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1078:        return typeTok->isLong() ? settings->sizeof_long_long : settings->sizeof_long;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1079:    else if (typeStr == "wchar_t")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1080:        return settings->sizeof_wchar_t;
        -: 1081:    else
    #####: 1082:        return 0;
        -: 1083:}
        -: 1084:
function _ZL9getSizeOfRK9ValueTypePK8Settings called 33 returned 100% blocks executed 75%
       33: 1085:static size_t getSizeOf(const ValueType &vt, const Settings *settings)
        -: 1086:{
       33: 1087:    if (vt.pointer)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
       23: 1088:        return settings->sizeof_pointer;
       10: 1089:    else if (vt.type == ValueType::Type::CHAR)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        2: 1090:        return 1;
        8: 1091:    else if (vt.type == ValueType::Type::SHORT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1092:        return settings->sizeof_short;
        8: 1093:    else if (vt.type == ValueType::Type::WCHAR_T)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1094:        return settings->sizeof_wchar_t;
        8: 1095:    else if (vt.type == ValueType::Type::INT)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        1: 1096:        return settings->sizeof_int;
        7: 1097:    else if (vt.type == ValueType::Type::LONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1098:        return settings->sizeof_long;
        7: 1099:    else if (vt.type == ValueType::Type::LONGLONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1100:        return settings->sizeof_long_long;
        7: 1101:    else if (vt.type == ValueType::Type::FLOAT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1102:        return settings->sizeof_float;
        7: 1103:    else if (vt.type == ValueType::Type::DOUBLE)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1: 1104:        return settings->sizeof_double;
        -: 1105:
        6: 1106:    return 0;
        -: 1107:}
        -: 1108:
        -: 1109:// Handle various constants..
function _ZL25valueFlowSetConstantValueP5TokenPK8Settingsb called 36179 returned 100% blocks executed 30%
    36179: 1110:static Token * valueFlowSetConstantValue(Token *tok, const Settings *settings, bool cpp)
        -: 1111:{
    36179: 1112:    if ((tok->isNumber() && MathLib::isInt(tok->str())) || (tok->tokType() == Token::eChar)) {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 12% (fallthrough)
branch 11 taken 88%
     8362: 1113:        ValueFlow::Value value(MathLib::toLongNumber(tok->str()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
     4181: 1114:        if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     4181: 1115:            value.setKnown();
call    0 returned 100%
     4181: 1116:        setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    31998: 1117:    } else if (tok->isNumber() && MathLib::isFloat(tok->str())) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1118:        ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1119:        value.valueType = ValueFlow::Value::FLOAT;
    #####: 1120:        value.floatValue = MathLib::toDoubleNumber(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1121:        if (!tok->isTemplateArg())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1122:            value.setKnown();
call    0 never executed
    #####: 1123:        setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    31998: 1124:    } else if (tok->enumerator() && tok->enumerator()->value_known) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1125:        ValueFlow::Value value(tok->enumerator()->value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 1126:        if (!tok->isTemplateArg())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1127:            value.setKnown();
call    0 never executed
    #####: 1128:        setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    31998: 1129:    } else if (tok->str() == "NULL" || (cpp && tok->str() == "nullptr")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 9% (fallthrough)
branch  5 taken 91%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       58: 1130:        ValueFlow::Value value(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       29: 1131:        if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       29: 1132:            value.setKnown();
call    0 returned 100%
       29: 1133:        setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    31969: 1134:    } else if (Token::simpleMatch(tok, "sizeof (")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 1135:        const Token *tok2 = tok->tokAt(2);
call    0 returned 100%
        -: 1136:        // skip over tokens to find variable or type
        6: 1137:        while (Token::Match(tok2, "%name% ::|.|[")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1138:            if (tok2->next()->str() == "[")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1139:                tok2 = tok2->linkAt(1)->next();
call    0 never executed
call    1 never executed
        -: 1140:            else
    #####: 1141:                tok2 = tok2->tokAt(2);
call    0 never executed
        -: 1142:        }
        6: 1143:        if (Token::simpleMatch(tok, "sizeof ( *")) {
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        2: 1144:            const ValueType *vt = tok->tokAt(2)->valueType();
call    0 returned 100%
call    1 returned 100%
        2: 1145:            const size_t sz = vt ? getSizeOf(*vt, settings) : 0;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2: 1146:            if (sz > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1147:                ValueFlow::Value value(sz);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1148:                if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1149:                    value.setKnown();
call    0 never executed
    #####: 1150:                setTokenValue(tok->next(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1151:            }
        4: 1152:        } else if (tok2->enumerator() && tok2->enumerator()->scope) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1153:            long long size = settings->sizeof_int;
    #####: 1154:            const Token * type = tok2->enumerator()->scope->enumType;
call    0 never executed
    #####: 1155:            if (type) {
branch  0 never executed
branch  1 never executed
    #####: 1156:                size = getSizeOfType(type, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1157:            }
    #####: 1158:            ValueFlow::Value value(size);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1159:            if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1160:                value.setKnown();
call    0 never executed
    #####: 1161:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1162:            setTokenValue(tok->next(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        4: 1163:        } else if (tok2->type() && tok2->type()->isEnumType()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1164:            long long size = settings->sizeof_int;
    #####: 1165:            if (tok2->type()->classScope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1166:                const Token * type = tok2->type()->classScope->enumType;
call    0 never executed
    #####: 1167:                if (type) {
branch  0 never executed
branch  1 never executed
    #####: 1168:                    size = getSizeOfType(type, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1169:                }
        -: 1170:            }
    #####: 1171:            ValueFlow::Value value(size);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1172:            if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1173:                value.setKnown();
call    0 never executed
    #####: 1174:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1175:            setTokenValue(tok->next(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        4: 1176:        } else if (Token::Match(tok, "sizeof ( %var% ) / sizeof (") && tok->next()->astParent() == tok->tokAt(4)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -: 1177:            // Get number of elements in array
    #####: 1178:            const Token *sz1 = tok->tokAt(2);
call    0 never executed
    #####: 1179:            const Token *sz2 = tok->tokAt(7);
call    0 never executed
    #####: 1180:            const int varid1 = sz1->varId();
call    0 never executed
    #####: 1181:            if (varid1 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1182:                sz1->variable() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1183:                sz1->variable()->isArray() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1184:                !sz1->variable()->dimensions().empty() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1185:                sz1->variable()->dimensionKnown(0) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1186:                (Token::Match(sz2, "* %varid% )", varid1) || Token::Match(sz2, "%varid% [ 0 ] )", varid1))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1187:                ValueFlow::Value value(sz1->variable()->dimension(0));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1188:                if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1189:                    value.setKnown();
call    0 never executed
    #####: 1190:                setTokenValue(tok->tokAt(4), value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1191:            }
        4: 1192:        } else if (Token::Match(tok2, "%var% )")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1193:            const Variable *var = tok2->variable();
call    0 never executed
        -: 1194:            // only look for single token types (no pointers or references yet)
    #####: 1195:            if (var && var->typeStartToken() == var->typeEndToken()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1196:                // find the size of the type
    #####: 1197:                size_t size = 0;
    #####: 1198:                if (var->isEnumType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1199:                    size = settings->sizeof_int;
    #####: 1200:                    if (var->type()->classScope && var->type()->classScope->enumType)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1201:                        size = getSizeOfType(var->type()->classScope->enumType, settings);
call    0 never executed
call    1 never executed
    #####: 1202:                } else if (var->valueType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1203:                    size = getSizeOf(*var->valueType(), settings);
call    0 never executed
call    1 never executed
    #####: 1204:                } else if (!var->type()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1205:                    size = getSizeOfType(var->typeStartToken(), settings);
call    0 never executed
call    1 never executed
        -: 1206:                }
        -: 1207:                // find the number of elements
    #####: 1208:                size_t count = 1;
    #####: 1209:                for (size_t i = 0; i < var->dimensions().size(); ++i) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1210:                    if (var->dimensionKnown(i))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1211:                        count *= var->dimension(i);
call    0 never executed
        -: 1212:                    else
    #####: 1213:                        count = 0;
        -: 1214:                }
    #####: 1215:                if (size && count > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1216:                    ValueFlow::Value value(count * size);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1217:                    if (settings->platformType != cppcheck::Platform::Unspecified)
branch  0 never executed
branch  1 never executed
    #####: 1218:                        value.setKnown();
call    0 never executed
    #####: 1219:                    setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1220:                    setTokenValue(tok->next(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1221:                }
        -: 1222:            }
        4: 1223:        } else if (!tok2->type()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        8: 1224:            const ValueType &vt = ValueType::parseDecl(tok2,settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 1225:            const size_t sz = getSizeOf(vt, settings);
call    0 returned 100%
        4: 1226:            if (sz > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8: 1227:                ValueFlow::Value value(sz);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4: 1228:                if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        4: 1229:                    value.setKnown();
call    0 returned 100%
        4: 1230:                setTokenValue(tok->next(), value, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1231:            }
        -: 1232:        }
        -: 1233:        // skip over enum
        6: 1234:        tok = tok->linkAt(1);
call    0 returned 100%
        -: 1235:    }
    36179: 1236:    return tok->next();
call    0 returned 100%
        -: 1237:}
        -: 1238:
        -: 1239:
function _ZL15valueFlowNumberP9TokenList called 194 returned 100% blocks executed 71%
      194: 1240:static void valueFlowNumber(TokenList *tokenlist)
        -: 1241:{
    36373: 1242:    for (Token *tok = tokenlist->front(); tok;) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    36179: 1243:        tok = valueFlowSetConstantValue(tok, tokenlist->getSettings(), tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 1244:    }
        -: 1245:
      194: 1246:    if (tokenlist->isCPP()) {
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
     2952: 1247:        for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
     2869: 1248:            if (tok->isName() && !tok->varId() && Token::Match(tok, "false|true")) {
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
call    3 returned 100%
branch  4 taken 68% (fallthrough)
branch  5 taken 32%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        8: 1249:                ValueFlow::Value value(tok->str() == "true");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
        4: 1250:                if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4: 1251:                    value.setKnown();
call    0 returned 100%
        4: 1252:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     2865: 1253:            } else if (Token::Match(tok, "[(,] NULL [,)]")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1254:                // NULL function parameters are not simplified in the
        -: 1255:                // normal tokenlist
    #####: 1256:                ValueFlow::Value value(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1257:                if (!tok->isTemplateArg())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1258:                    value.setKnown();
call    0 never executed
    #####: 1259:                setTokenValue(tok->next(), value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1260:            }
        -: 1261:        }
        -: 1262:    }
      194: 1263:}
        -: 1264:
function _ZL15valueFlowStringP9TokenList called 194 returned 100% blocks executed 87%
      194: 1265:static void valueFlowString(TokenList *tokenlist)
        -: 1266:{
    36393: 1267:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1268:        if (tok->tokType() == Token::eString) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 1269:            ValueFlow::Value strvalue;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        3: 1270:            strvalue.valueType = ValueFlow::Value::TOK;
        3: 1271:            strvalue.tokvalue = tok;
        3: 1272:            strvalue.setKnown();
call    0 returned 100%
        3: 1273:            setTokenValue(tok, strvalue, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1274:        }
        -: 1275:    }
      194: 1276:}
        -: 1277:
function _ZL14valueFlowArrayP9TokenList called 194 returned 100% blocks executed 33%
      194: 1278:static void valueFlowArray(TokenList *tokenlist)
        -: 1279:{
      388: 1280:    std::map<int, const Token *> constantArrays;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1281:
    36393: 1282:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1283:        if (tok->varId() > 0U) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -: 1284:            // array
     1654: 1285:            const std::map<int, const Token *>::const_iterator it = constantArrays.find(tok->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
      827: 1286:            if (it != constantArrays.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1287:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1288:                value.valueType = ValueFlow::Value::TOK;
    #####: 1289:                value.tokvalue = it->second;
call    0 never executed
    #####: 1290:                value.setKnown();
call    0 never executed
    #####: 1291:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1292:            }
        -: 1293:
        -: 1294:            // pointer = array
     2461: 1295:            else if (tok->variable() &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      807: 1296:                     tok->variable()->isArray() &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
    #####: 1297:                     Token::simpleMatch(tok->astParent(), "=") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1298:                     tok == tok->astParent()->astOperand2() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1299:                     tok->astParent()->astOperand1() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
      827: 1300:                     tok->astParent()->astOperand1()->variable() &&
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1301:                     tok->astParent()->astOperand1()->variable()->isPointer()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1302:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1303:                value.valueType = ValueFlow::Value::TOK;
    #####: 1304:                value.tokvalue = tok;
    #####: 1305:                value.setKnown();
call    0 never executed
    #####: 1306:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1307:            }
      827: 1308:            continue;
        -: 1309:        }
        -: 1310:
    35372: 1311:        if (Token::Match(tok, "const %type% %var% [ %num%| ] = {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1312:            const Token *vartok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1313:            const Token *rhstok = vartok->next()->link()->tokAt(2);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1314:            constantArrays[vartok->varId()] = rhstok;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1315:            tok = rhstok->link();
call    0 never executed
    #####: 1316:            continue;
        -: 1317:        }
        -: 1318:
    35372: 1319:        else if (Token::Match(tok, "const char %var% [ %num%| ] = %str% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1320:            const Token *vartok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1321:            const Token *strtok = vartok->next()->link()->tokAt(2);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1322:            constantArrays[vartok->varId()] = strtok;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1323:            tok = strtok->next();
call    0 never executed
    #####: 1324:            continue;
        -: 1325:        }
        -: 1326:    }
      194: 1327:}
        -: 1328:
function _ZL9isNonZeroPK5Token called 0 returned 0% blocks executed 0%
    #####: 1329:static bool isNonZero(const Token *tok)
        -: 1330:{
    #####: 1331:    return tok && (!tok->hasKnownIntValue() || tok->values().front().intvalue != 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1332:}
        -: 1333:
function _ZL15getOtherOperandPK5Token called 0 returned 0% blocks executed 0%
    #####: 1334:static const Token *getOtherOperand(const Token *tok)
        -: 1335:{
    #####: 1336:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1337:        return nullptr;
    #####: 1338:    if (!tok->astParent())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1339:        return nullptr;
    #####: 1340:    if (tok->astParent()->astOperand1() != tok)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1341:        return tok->astParent()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1342:    if (tok->astParent()->astOperand2() != tok)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1343:        return tok->astParent()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 1344:    return nullptr;
        -: 1345:}
        -: 1346:
function _ZL18valueFlowArrayBoolP9TokenList called 224 returned 100% blocks executed 42%
      224: 1347:static void valueFlowArrayBool(TokenList *tokenlist)
        -: 1348:{
    37537: 1349:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    37313: 1350:        if (tok->hasKnownIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
    41600: 1351:            continue;
    33026: 1352:        const Variable *var = nullptr;
    33026: 1353:        bool known = false;
        -: 1354:        std::list<ValueFlow::Value>::const_iterator val =
    33026: 1355:            std::find_if(tok->values().begin(), tok->values().end(), std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
    33026: 1356:        if (val == tok->values().end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
    33023: 1357:            var = tok->variable();
call    0 returned 100%
    33023: 1358:            known = true;
        -: 1359:        } else {
        3: 1360:            var = val->tokvalue->variable();
call    0 returned 100%
call    1 returned 100%
        3: 1361:            known = val->isKnown();
call    0 returned 100%
call    1 returned 100%
        -: 1362:        }
    33026: 1363:        if (!var)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
    32069: 1364:            continue;
      957: 1365:        if (!var->isArray() || var->isArgument() || var->isStlType())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
      957: 1366:            continue;
    #####: 1367:        if (isNonZero(getOtherOperand(tok)) && Token::Match(tok->astParent(), "%comp%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1368:            continue;
        -: 1369:        // TODO: Check for function argument
    #####: 1370:        if ((astIsBool(tok->astParent()) && !Token::Match(tok->astParent(), "(|%name%")) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1371:            (tok->astParent() && Token::Match(tok->astParent()->previous(), "if|while|for ("))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1372:            ValueFlow::Value value{1};
call    0 never executed
call    1 never executed
call    2 returned 100%
branch  3 taken 0%
branch  4 taken 100%
call    5 never executed
    #####: 1373:            if (known)
branch  0 never executed
branch  1 never executed
    #####: 1374:                value.setKnown();
call    0 never executed
    #####: 1375:            setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:        }
        -: 1377:    }
      224: 1378:}
call    0 never executed
        -: 1379:
function _ZL21valueFlowPointerAliasP9TokenList called 194 returned 100% blocks executed 69%
      194: 1380:static void valueFlowPointerAlias(TokenList *tokenlist)
        -: 1381:{
    36393: 1382:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
        -: 1383:        // not address of
    36199: 1384:        if (!tok->isUnaryOp("&"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 never executed
call   12 never executed
    72384: 1385:            continue;
        -: 1386:
        -: 1387:        // parent should be a '='
       14: 1388:        if (!Token::simpleMatch(tok->astParent(), "="))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
       13: 1389:            continue;
        -: 1390:
        -: 1391:        // child should be some buffer or variable
        1: 1392:        const Token *vartok = tok->astOperand1();
call    0 returned 100%
        3: 1393:        while (vartok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1394:            if (vartok->str() == "[")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1395:                vartok = vartok->astOperand1();
call    0 never executed
        2: 1396:            else if (vartok->str() == "." || vartok->str() == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
        1: 1397:                vartok = vartok->astOperand2();
call    0 returned 100%
        -: 1398:            else
        1: 1399:                break;
        -: 1400:        }
        1: 1401:        if (!(vartok && vartok->variable() && !vartok->variable()->isPointer()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        1: 1402:            continue;
        -: 1403:
    #####: 1404:        ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1405:        value.valueType = ValueFlow::Value::TOK;
    #####: 1406:        value.tokvalue = tok;
    #####: 1407:        setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1408:    }
      194: 1409:}
        -: 1410:
function _ZL26valueFlowPointerAliasDerefP9TokenList called 224 returned 100% blocks executed 25%
      224: 1411:static void valueFlowPointerAliasDeref(TokenList *tokenlist)
        -: 1412:{
    37537: 1413:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    37313: 1414:        if (!tok->isUnaryOp("*"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 never executed
call   12 never executed
    74609: 1415:            continue;
       17: 1416:        if (!astIsPointer(tok->astOperand1()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
        1: 1417:            continue;
        -: 1418:
       16: 1419:        const Token* lifeTok = nullptr;
       16: 1420:        ErrorPath errorPath;
call    0 returned 100%
call    1 never executed
       16: 1421:        for (const ValueFlow::Value& v:tok->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
    #####: 1422:            if (!v.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1423:                continue;
    #####: 1424:            lifeTok = v.tokvalue;
    #####: 1425:            errorPath = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1426:        }
       16: 1427:        if (!lifeTok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16: 1428:            continue;
    #####: 1429:        if (lifeTok->varId() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1430:            continue;
    #####: 1431:        const Variable * var = lifeTok->variable();
call    0 never executed
    #####: 1432:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 1433:            continue;
    #####: 1434:        if (!var->isConst() && isVariableChanged(lifeTok->next(), tok, lifeTok->varId(), !var->isLocal(), tokenlist->getSettings(), tokenlist->isCPP()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1435:            continue;
    #####: 1436:        for (const ValueFlow::Value& v:lifeTok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 returned 100%
branch 11 taken 0%
branch 12 taken 100%
call   13 never executed
call   14 never executed
    #####: 1437:            if (v.isLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1438:                continue;
    #####: 1439:            ValueFlow::Value value = v;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1440:            value.errorPath.insert(value.errorPath.begin(), errorPath.begin(), errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1441:            setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1442:        }
        -: 1443:    }
      224: 1444:}
        -: 1445:
function _ZL15valueFlowBitAndP9TokenList called 194 returned 100% blocks executed 50%
      194: 1446:static void valueFlowBitAnd(TokenList *tokenlist)
        -: 1447:{
    36393: 1448:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1449:        if (tok->str() != "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    36179: 1450:            continue;
        -: 1451:
       20: 1452:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1453:            continue;
        -: 1454:
       20: 1455:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
call    3 returned 100%
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
       19: 1456:            continue;
        -: 1457:
        -: 1458:        MathLib::bigint number;
        1: 1459:        if (MathLib::isInt(tok->astOperand1()->str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1460:            number = MathLib::toLongNumber(tok->astOperand1()->str());
call    0 never executed
call    1 never executed
call    2 never executed
        2: 1461:        else if (MathLib::isInt(tok->astOperand2()->str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1462:            number = MathLib::toLongNumber(tok->astOperand2()->str());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1463:        else
        1: 1464:            continue;
        -: 1465:
    #####: 1466:        int bit = 0;
    #####: 1467:        while (bit <= (MathLib::bigint_bits - 2) && ((((MathLib::bigint)1) << bit) < number))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1468:            ++bit;
        -: 1469:
    #####: 1470:        if ((((MathLib::bigint)1) << bit) == number) {
branch  0 never executed
branch  1 never executed
    #####: 1471:            setTokenValue(tok, ValueFlow::Value(0), tokenlist->getSettings());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1472:            setTokenValue(tok, ValueFlow::Value(number), tokenlist->getSettings());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -: 1473:        }
        -: 1474:    }
      194: 1475:}
        -: 1476:
function _ZL24valueFlowSameExpressionsP9TokenList called 194 returned 100% blocks executed 68%
      194: 1477:static void valueFlowSameExpressions(TokenList *tokenlist)
        -: 1478:{
    36393: 1479:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1480:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
    40424: 1481:            continue;
        -: 1482:
    31974: 1483:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
call    3 returned 100%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
branch  6 taken 84% (fallthrough)
branch  7 taken 16%
    26874: 1484:            continue;
        -: 1485:
     5100: 1486:        if (tok->astOperand1()->isLiteral() || tok->astOperand2()->isLiteral())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 82% (fallthrough)
branch 11 taken 18%
branch 12 taken 82% (fallthrough)
branch 13 taken 18%
     4167: 1487:            continue;
        -: 1488:
      933: 1489:        if (!astIsIntegral(tok->astOperand1(), false) && !astIsIntegral(tok->astOperand2(), false))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 90% (fallthrough)
branch 11 taken 10%
branch 12 taken 88% (fallthrough)
branch 13 taken 12%
      821: 1490:            continue;
        -: 1491:
      112: 1492:        ValueFlow::Value val;
call    0 returned 100%
call    1 never executed
        -: 1493:
      112: 1494:        if (Token::Match(tok, "==|>=|<=|/")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1495:            val = ValueFlow::Value(1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1496:            val.setKnown();
call    0 never executed
        -: 1497:        }
        -: 1498:
      112: 1499:        if (Token::Match(tok, "!=|>|<|%|-")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1500:            val = ValueFlow::Value(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1501:            val.setKnown();
call    0 never executed
        -: 1502:        }
        -: 1503:
      112: 1504:        if (!val.isKnown())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      112: 1505:            continue;
        -: 1506:
    #####: 1507:        if (isSameExpression(tokenlist->isCPP(), false, tok->astOperand1(), tok->astOperand2(), tokenlist->getSettings()->library, true, true, &val.errorPath)) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1508:            setTokenValue(tok, val, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 returned 100%
branch  5 taken 0%
branch  6 taken 100%
        -: 1509:        }
        -: 1510:    }
      194: 1511:}
        -: 1512:
function _ZL29valueFlowTerminatingConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 47%
      224: 1513:static void valueFlowTerminatingCondition(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 1514:{
      224: 1515:    const bool cpp = symboldatabase->isCPP();
call    0 returned 100%
        -: 1516:    typedef std::pair<const Token*, const Scope*> Condition;
      365: 1517:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 63% (fallthrough)
branch  4 taken 37%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      230: 1518:        bool skipFunction = false;
      371: 1519:        std::vector<Condition> conds;
call    0 returned 100%
call    1 never executed
    34227: 1520:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    34086: 1521:            if (tok->isIncompleteVar()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       89: 1522:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1523:                    bailout(tokenlist, errorLogger, tok, "Skipping function due to incomplete variable " + tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
       89: 1524:                skipFunction = true;
       89: 1525:                break;
        -: 1526:            }
    33997: 1527:            if (!Token::simpleMatch(tok, "if ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 88% (fallthrough)
branch  4 taken 12%
    63886: 1528:                continue;
        -: 1529:            // Skip known values
     4092: 1530:            if (tok->next()->hasKnownValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1531:                continue;
     4092: 1532:            const Token * condTok = tok->next();
call    0 returned 100%
     4092: 1533:            if (!Token::simpleMatch(condTok->link(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1534:                continue;
     4092: 1535:            const Token * blockTok = condTok->link()->tokAt(1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1536:            // Check if the block terminates early
     4092: 1537:            if (!isEscapeScope(blockTok, tokenlist))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     4053: 1538:                continue;
        -: 1539:            // Check if any variables are modified in scope
       39: 1540:            bool bail = false;
      114: 1541:            for (const Token * tok2=condTok->next(); tok2 != condTok->link(); tok2 = tok2->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 86% (fallthrough)
branch  3 taken 14%
call    4 returned 100%
       98: 1542:                const Variable * var = tok2->variable();
call    0 returned 100%
       98: 1543:                if (!var)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
       64: 1544:                    continue;
       34: 1545:                if (!var->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1546:                    continue;
       34: 1547:                const Token * endToken = var->scope()->bodyEnd;
call    0 returned 100%
       34: 1548:                if (!var->isLocal() && !var->isConst() && !var->isArgument()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 38% (fallthrough)
branch  4 taken 62%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 8% (fallthrough)
branch 10 taken 92%
branch 11 taken 3% (fallthrough)
branch 12 taken 97%
        1: 1549:                    bail = true;
        1: 1550:                    break;
        -: 1551:                }
       33: 1552:                if (var->isStatic() && !var->isConst()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1553:                    bail = true;
    #####: 1554:                    break;
        -: 1555:                }
       33: 1556:                if (!var->isConst() && var->declEndToken() && isVariableChanged(var->declEndToken()->next(), endToken, tok2->varId(), false, settings, cpp)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 67% (fallthrough)
branch 17 taken 33%
branch 18 taken 67% (fallthrough)
branch 19 taken 33%
       22: 1557:                    bail = true;
       22: 1558:                    break;
        -: 1559:                }
        -: 1560:            }
       39: 1561:            if (bail)
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
       23: 1562:                continue;
        -: 1563:            // TODO: Handle multiple conditions
       16: 1564:            if (Token::Match(condTok->astOperand2(), "%oror%|%or%|&|&&"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1565:                continue;
       16: 1566:            const Scope * condScope = nullptr;
       49: 1567:            for (const Scope * parent = condTok->scope(); parent; parent = parent->nestedIn) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
       66: 1568:                if (parent->type == Scope::eIf ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       66: 1569:                    parent->type == Scope::eWhile ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       33: 1570:                    parent->type == Scope::eSwitch) {
    #####: 1571:                    condScope = parent;
    #####: 1572:                    break;
        -: 1573:                }
        -: 1574:            }
       16: 1575:            conds.emplace_back(condTok->astOperand2(), condScope);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1576:        }
      230: 1577:        if (skipFunction)
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       89: 1578:            break;
      151: 1579:        for (Condition cond:conds) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 61%
branch 11 taken 39%
call   12 never executed
call   13 never executed
       10: 1580:            if (!cond.first)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1581:                continue;
       10: 1582:            Token *const startToken = cond.first->findExpressionStartEndTokens().second->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      163: 1583:            for (Token* tok = startToken; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
      153: 1584:                if (!Token::Match(tok, "%comp%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      306: 1585:                    continue;
        -: 1586:                // Skip known values
    #####: 1587:                if (tok->hasKnownValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1588:                    continue;
    #####: 1589:                if (cond.second) {
branch  0 never executed
branch  1 never executed
    #####: 1590:                    bool bail = true;
    #####: 1591:                    for (const Scope * parent = tok->scope()->nestedIn; parent; parent = parent->nestedIn) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1592:                        if (parent == cond.second) {
branch  0 never executed
branch  1 never executed
    #####: 1593:                            bail = false;
    #####: 1594:                            break;
        -: 1595:                        }
        -: 1596:                    }
    #####: 1597:                    if (bail)
branch  0 never executed
branch  1 never executed
    #####: 1598:                        continue;
        -: 1599:                }
    #####: 1600:                ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1601:                if (isOppositeCond(true, cpp, tok, cond.first, settings->library, true, true, &errorPath)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1602:                    ValueFlow::Value val(1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1603:                    val.setKnown();
call    0 never executed
    #####: 1604:                    val.condition = cond.first;
    #####: 1605:                    val.errorPath = errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1606:                    val.errorPath.emplace_back(cond.first, "Assuming condition '" + cond.first->expressionString() + "' is false");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1607:                    setTokenValue(tok, val, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1608:                } else if (isSameExpression(cpp, true, tok, cond.first, settings->library, true, true, &errorPath)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1609:                    ValueFlow::Value val(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1610:                    val.setKnown();
call    0 never executed
    #####: 1611:                    val.condition = cond.first;
    #####: 1612:                    val.errorPath = errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1613:                    val.errorPath.emplace_back(cond.first, "Assuming condition '" + cond.first->expressionString() + "' is false");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1614:                    setTokenValue(tok, val, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1615:                }
        -: 1616:            }
        -: 1617:        }
        -: 1618:    }
      224: 1619:}
        -: 1620:
function _ZL18getExpressionRangePK5TokenPxS2_ called 0 returned 0% blocks executed 0%
    #####: 1621:static bool getExpressionRange(const Token *expr, MathLib::bigint *minvalue, MathLib::bigint *maxvalue)
        -: 1622:{
    #####: 1623:    if (expr->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1624:        if (minvalue)
branch  0 never executed
branch  1 never executed
    #####: 1625:            *minvalue = expr->values().front().intvalue;
call    0 never executed
call    1 never executed
    #####: 1626:        if (maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 1627:            *maxvalue = expr->values().front().intvalue;
call    0 never executed
call    1 never executed
    #####: 1628:        return true;
        -: 1629:    }
        -: 1630:
    #####: 1631:    if (expr->str() == "&" && expr->astOperand1() && expr->astOperand2()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -: 1632:        MathLib::bigint vals[4];
    #####: 1633:        bool lhsHasKnownRange = getExpressionRange(expr->astOperand1(), &vals[0], &vals[1]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1634:        bool rhsHasKnownRange = getExpressionRange(expr->astOperand2(), &vals[2], &vals[3]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1635:        if (!lhsHasKnownRange && !rhsHasKnownRange)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1636:            return false;
    #####: 1637:        if (!lhsHasKnownRange || !rhsHasKnownRange) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1638:            if (minvalue)
branch  0 never executed
branch  1 never executed
    #####: 1639:                *minvalue = lhsHasKnownRange ? vals[0] : vals[2];
branch  0 never executed
branch  1 never executed
    #####: 1640:            if (maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 1641:                *maxvalue = lhsHasKnownRange ? vals[1] : vals[3];
branch  0 never executed
branch  1 never executed
        -: 1642:        } else {
    #####: 1643:            if (minvalue)
branch  0 never executed
branch  1 never executed
    #####: 1644:                *minvalue = vals[0] & vals[2];
    #####: 1645:            if (maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 1646:                *maxvalue = vals[1] & vals[3];
        -: 1647:        }
    #####: 1648:        return true;
        -: 1649:    }
        -: 1650:
    #####: 1651:    if (expr->str() == "%" && expr->astOperand1() && expr->astOperand2()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -: 1652:        MathLib::bigint vals[4];
    #####: 1653:        if (!getExpressionRange(expr->astOperand2(), &vals[2], &vals[3]))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1654:            return false;
    #####: 1655:        if (vals[2] <= 0)
branch  0 never executed
branch  1 never executed
    #####: 1656:            return false;
    #####: 1657:        bool lhsHasKnownRange = getExpressionRange(expr->astOperand1(), &vals[0], &vals[1]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1658:        if (lhsHasKnownRange && vals[0] < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1659:            return false;
        -: 1660:        // If lhs has unknown value, it must be unsigned
    #####: 1661:        if (!lhsHasKnownRange && (!expr->astOperand1()->valueType() || expr->astOperand1()->valueType()->sign != ValueType::Sign::UNSIGNED))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1662:            return false;
    #####: 1663:        if (minvalue)
branch  0 never executed
branch  1 never executed
    #####: 1664:            *minvalue = 0;
    #####: 1665:        if (maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 1666:            *maxvalue = vals[3] - 1;
    #####: 1667:        return true;
        -: 1668:    }
        -: 1669:
    #####: 1670:    return false;
call    0 never executed
        -: 1671:}
        -: 1672:
function _ZL19valueFlowRightShiftP9TokenListPK8Settings called 224 returned 100% blocks executed 10%
      224: 1673:static void valueFlowRightShift(TokenList *tokenList, const Settings* settings)
        -: 1674:{
    37537: 1675:    for (Token *tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    37313: 1676:        if (tok->str() != ">>")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    74626: 1677:            continue;
        -: 1678:
    #####: 1679:        if (tok->hasKnownValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1680:            continue;
        -: 1681:
    #####: 1682:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1683:            continue;
        -: 1684:
    #####: 1685:        if (!tok->astOperand2()->hasKnownValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1686:            continue;
        -: 1687:
    #####: 1688:        const MathLib::bigint rhsvalue = tok->astOperand2()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1689:        if (rhsvalue < 0)
branch  0 never executed
branch  1 never executed
    #####: 1690:            continue;
        -: 1691:
    #####: 1692:        if (!tok->astOperand1()->valueType() || !tok->astOperand1()->valueType()->isIntegral())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1693:            continue;
        -: 1694:
    #####: 1695:        if (!tok->astOperand2()->valueType() || !tok->astOperand2()->valueType()->isIntegral())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1696:            continue;
        -: 1697:
    #####: 1698:        MathLib::bigint lhsmax=0;
    #####: 1699:        if (!getExpressionRange(tok->astOperand1(), nullptr, &lhsmax))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1700:            continue;
    #####: 1701:        if (lhsmax < 0)
branch  0 never executed
branch  1 never executed
    #####: 1702:            continue;
        -: 1703:        int lhsbits;
    #####: 1704:        if ((tok->astOperand1()->valueType()->type == ValueType::Type::CHAR) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1705:            (tok->astOperand1()->valueType()->type == ValueType::Type::SHORT) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1706:            (tok->astOperand1()->valueType()->type == ValueType::Type::WCHAR_T) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1707:            (tok->astOperand1()->valueType()->type == ValueType::Type::BOOL) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1708:            (tok->astOperand1()->valueType()->type == ValueType::Type::INT))
call    0 never executed
call    1 never executed
    #####: 1709:            lhsbits = settings->int_bit;
    #####: 1710:        else if (tok->astOperand1()->valueType()->type == ValueType::Type::LONG)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1711:            lhsbits = settings->long_bit;
    #####: 1712:        else if (tok->astOperand1()->valueType()->type == ValueType::Type::LONGLONG)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1713:            lhsbits = settings->long_long_bit;
        -: 1714:        else
    #####: 1715:            continue;
    #####: 1716:        if (rhsvalue >= lhsbits || rhsvalue >= MathLib::bigint_bits || (1ULL << rhsvalue) <= lhsmax)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1717:            continue;
        -: 1718:
    #####: 1719:        ValueFlow::Value val(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1720:        val.setKnown();
call    0 never executed
    #####: 1721:        setTokenValue(tok, val, tokenList->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1722:    }
      224: 1723:}
        -: 1724:
function _ZL26valueFlowOppositeConditionP14SymbolDatabasePK8Settings called 224 returned 100% blocks executed 74%
      224: 1725:static void valueFlowOppositeCondition(SymbolDatabase *symboldatabase, const Settings *settings)
        -: 1726:{
     6836: 1727:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     6612: 1728:        if (scope.type != Scope::eIf)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
     2498: 1729:            continue;
     4114: 1730:        Token *tok = const_cast<Token *>(scope.classDef);
     4114: 1731:        if (!Token::simpleMatch(tok, "if ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1732:            continue;
     4114: 1733:        const Token *cond1 = tok->next()->astOperand2();
call    0 returned 100%
call    1 returned 100%
     4114: 1734:        if (!cond1 || !cond1->isComparisonOp())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
     4073: 1735:            continue;
       41: 1736:        const bool cpp = symboldatabase->isCPP();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       41: 1737:        Token *tok2 = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       45: 1738:        while (Token::simpleMatch(tok2, ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       43: 1739:            tok2 = tok2->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       43: 1740:            if (!Token::simpleMatch(tok2, "} else { if ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 95% (fallthrough)
branch  4 taken 5%
       41: 1741:                break;
        2: 1742:            Token *ifOpenBraceTok = tok2->tokAt(4);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1743:            Token *cond2 = ifOpenBraceTok->astOperand2();
call    0 returned 100%
        2: 1744:            if (!cond2 || !cond2->isComparisonOp())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1745:                continue;
        2: 1746:            if (isOppositeCond(true, cpp, cond1, cond2, settings->library, true, true)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1747:                ValueFlow::Value value(1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1748:                value.setKnown();
call    0 never executed
    #####: 1749:                setTokenValue(cond2, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1750:            }
        2: 1751:            tok2 = ifOpenBraceTok->link();
call    0 returned 100%
        -: 1752:        }
        -: 1753:    }
      224: 1754:}
        -: 1755:
function _ZL23valueFlowGlobalConstVarP9TokenListPK8Settings called 194 returned 100% blocks executed 51%
      194: 1756:static void valueFlowGlobalConstVar(TokenList* tokenList, const Settings *settings)
        -: 1757:{
        -: 1758:    // Get variable values...
      388: 1759:    std::map<const Variable*, ValueFlow::Value> vars;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    36393: 1760:    for (const Token* tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1761:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    35392: 1762:            continue;
        -: 1763:        // Initialization...
     1892: 1764:        if (tok == tok->variable()->nameToken() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      556: 1765:            !tok->variable()->isVolatile() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 65% (fallthrough)
branch  3 taken 35%
      459: 1766:            !tok->variable()->isArgument() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      181: 1767:            tok->variable()->isConst() &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
    #####: 1768:            tok->valueType() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1769:            tok->valueType()->isIntegral() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1770:            tok->valueType()->pointer == 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1771:            tok->valueType()->constness == 1 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1772:            Token::Match(tok, "%name% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
      807: 1773:            tok->next()->astOperand2() &&
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1774:            tok->next()->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1775:            vars[tok->variable()] = tok->next()->astOperand2()->values().front();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1776:        }
        -: 1777:    }
        -: 1778:
        -: 1779:    // Set values..
    36393: 1780:    for (Token* tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1781:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    71591: 1782:            continue;
      807: 1783:        std::map<const Variable*, ValueFlow::Value>::const_iterator var = vars.find(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
      807: 1784:        if (var == vars.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      807: 1785:            continue;
    #####: 1786:        setTokenValue(tok, var->second, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 returned 100%
branch  5 taken 0%
branch  6 taken 100%
        -: 1787:    }
      194: 1788:}
        -: 1789:
function _ZL24valueFlowGlobalStaticVarP9TokenListPK8Settings called 194 returned 100% blocks executed 63%
      194: 1790:static void valueFlowGlobalStaticVar(TokenList *tokenList, const Settings *settings)
        -: 1791:{
        -: 1792:    // Get variable values...
      388: 1793:    std::map<const Variable *, ValueFlow::Value> vars;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    36393: 1794:    for (const Token *tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1795:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    35392: 1796:            continue;
        -: 1797:        // Initialization...
     1892: 1798:        if (tok == tok->variable()->nameToken() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
      279: 1799:            tok->variable()->isStatic() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 1800:            !tok->variable()->isConst() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 1801:            tok->valueType() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 1802:            tok->valueType()->isIntegral() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1: 1803:            tok->valueType()->pointer == 0 &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
    #####: 1804:            tok->valueType()->constness == 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1805:            Token::Match(tok, "%name% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
      807: 1806:            tok->next()->astOperand2() &&
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1807:            tok->next()->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1808:            vars[tok->variable()] = tok->next()->astOperand2()->values().front();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1809:        } else {
        -: 1810:            // If variable is written anywhere in TU then remove it from vars
      807: 1811:            if (!tok->astParent())
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
       26: 1812:                continue;
      781: 1813:            if (Token::Match(tok->astParent(), "++|--|&") && !tok->astParent()->astOperand2())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
       12: 1814:                vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      769: 1815:            else if (tok->astParent()->isAssignmentOp()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 24% (fallthrough)
branch  3 taken 76%
      187: 1816:                if (tok == tok->astParent()->astOperand1())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
      183: 1817:                    vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4: 1818:                else if (tokenList->isCPP() && Token::Match(tok->astParent()->tokAt(-2), "& %name% ="))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 1819:                    vars.erase(tok->variable());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
      582: 1820:            } else if (isLikelyStreamRead(tokenList->isCPP(), tok->astParent())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1821:                vars.erase(tok->variable());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
      582: 1822:            } else if (Token::Match(tok->astParent(), "[(,]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 36% (fallthrough)
branch  5 taken 64%
      210: 1823:                vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1824:        }
        -: 1825:    }
        -: 1826:
        -: 1827:    // Set values..
    36393: 1828:    for (Token *tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 1829:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    71591: 1830:            continue;
      807: 1831:        std::map<const Variable *, ValueFlow::Value>::const_iterator var = vars.find(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
      807: 1832:        if (var == vars.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      807: 1833:            continue;
    #####: 1834:        setTokenValue(tok, var->second, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 returned 100%
branch  5 taken 0%
branch  6 taken 100%
        -: 1835:    }
      194: 1836:}
        -: 1837:
function _ZL16valueFlowReverseP9TokenListP5TokenPKS1_N9ValueFlow5ValueES6_P11ErrorLoggerPK8Settings called 71 returned 100% blocks executed 17%
       71: 1838:static void valueFlowReverse(TokenList *tokenlist,
        -: 1839:                             Token *tok,
        -: 1840:                             const Token * const varToken,
        -: 1841:                             ValueFlow::Value val,
        -: 1842:                             ValueFlow::Value val2,
        -: 1843:                             ErrorLogger *errorLogger,
        -: 1844:                             const Settings *settings)
        -: 1845:{
       71: 1846:    const MathLib::bigint    num        = val.intvalue;
       71: 1847:    const Variable * const   var        = varToken->variable();
call    0 returned 100%
       71: 1848:    if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1849:        return;
        -: 1850:
       71: 1851:    const int                varid      = varToken->varId();
call    0 returned 100%
       71: 1852:    const Token * const      startToken = var->nameToken();
call    0 returned 100%
        -: 1853:
      544: 1854:    for (Token *tok2 = tok->previous(); ; tok2 = tok2->previous()) {
call    0 returned 100%
call    1 returned 100%
     1632: 1855:        if (!tok2 ||
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
     1128: 1856:            tok2 == startToken ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      583: 1857:            (tok2->str() == "{" && tok2->scope()->type == Scope::ScopeType::eFunction)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       41: 1858:            break;
        -: 1859:        }
        -: 1860:
      503: 1861:        if (tok2->varId() == varid) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
        -: 1862:            // bailout: assignment
       37: 1863:            if (Token::Match(tok2->previous(), "!!* %name% =")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 62% (fallthrough)
branch  5 taken 38%
       23: 1864:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1865:                    bailout(tokenlist, errorLogger, tok2, "assignment of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
       46: 1866:                break;
        -: 1867:            }
        -: 1868:
        -: 1869:            // increment/decrement
       14: 1870:            int inc = 0;
       14: 1871:            if (Token::Match(tok2->previous(), "[;{}] %name% ++|-- ;"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1872:                inc = (tok2->strAt(1)=="++") ? -1 : 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
       14: 1873:            else if (Token::Match(tok2->tokAt(-2), "[;{}] ++|-- %name% ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1874:                inc = (tok2->strAt(-1)=="++") ? -1 : 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
       14: 1875:            else if (Token::Match(tok2->previous(), "++|-- %name%") || Token::Match(tok2, "%name% ++|--")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1876:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1877:                    bailout(tokenlist, errorLogger, tok2, "increment/decrement of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 1878:                break;
        -: 1879:            }
       14: 1880:            if (inc != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1881:                val.intvalue += inc;
    #####: 1882:                const std::string info(tok2->str() + " is " + std::string(inc==1 ? "decremented" : "incremented") + ", before this " + (inc==1?"decrement":"increment") + " the value is " + val.infoString());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
    #####: 1883:                val.errorPath.emplace_back(tok2, info);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1884:            }
        -: 1885:
        -: 1886:            // compound assignment
       14: 1887:            if (Token::Match(tok2->previous(), "[;{}] %var% %assign%") && tok2->next()->str() != "=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1888:                const Token * const assignToken = tok2->next();
call    0 never executed
    #####: 1889:                const Token * const rhsToken = assignToken->astOperand2();
call    0 never executed
    #####: 1890:                if (!rhsToken || !rhsToken->hasKnownIntValue()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1891:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1892:                        bailout(tokenlist, errorLogger, tok2, "compound assignment, rhs value is not known");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 1893:                    break;
        -: 1894:                }
    #####: 1895:                const MathLib::bigint rhsValue =  rhsToken->values().front().intvalue;
call    0 never executed
call    1 never executed
    #####: 1896:                if (assignToken->str() == "+=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1897:                    val.intvalue -= rhsValue;
    #####: 1898:                else if (assignToken->str() == "-=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1899:                    val.intvalue += rhsValue;
    #####: 1900:                else if (assignToken->str() == "*=" && rhsValue != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1901:                    val.intvalue /= rhsValue;
        -: 1902:                else {
    #####: 1903:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1904:                        bailout(tokenlist, errorLogger, tok2, "compound assignment " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 1905:                    break;
        -: 1906:                }
        -: 1907:
    #####: 1908:                const std::string info("Compound assignment '" + assignToken->str() + "', before assignment value is " + val.infoString());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 1909:                val.errorPath.emplace_back(tok2, info);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1910:            }
        -: 1911:
        -: 1912:            // bailout: variable is used in rhs in assignment to itself
       14: 1913:            if (bailoutSelfAssignment(tok2)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1914:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1915:                    bailout(tokenlist, errorLogger, tok2, "variable " + tok2->str() + " is used in rhs in assignment to itself");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 1916:                break;
        -: 1917:            }
        -: 1918:
       14: 1919:            if (Token::Match(tok2->previous(), "sizeof|.")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1920:                const Token *prev = tok2->previous();
call    0 never executed
    #####: 1921:                while (Token::Match(prev,"%name%|.") && prev->str() != "sizeof")
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1922:                    prev = prev->previous();
call    0 never executed
    #####: 1923:                if (prev && prev->str() == "sizeof")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1924:                    continue;
        -: 1925:            }
        -: 1926:
        -: 1927:            // assigned by subfunction?
       14: 1928:            bool inconclusive = false;
       14: 1929:            if (isVariableChangedByFunctionCall(tok2, std::max(val.indirect, val2.indirect), settings, &inconclusive)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1930:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1931:                    bailout(tokenlist, errorLogger, tok2, "possible assignment of " + tok2->str() + " by subfunction");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 1932:                break;
        -: 1933:            }
        -: 1934:            // Impossible values cant be inconclusive
       14: 1935:            if (val.isImpossible() || val2.isImpossible())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1936:                break;
       14: 1937:            val.setInconclusive(inconclusive);
call    0 returned 100%
       14: 1938:            val2.setInconclusive(inconclusive);
call    0 returned 100%
        -: 1939:
        -: 1940:            // skip if variable is conditionally used in ?: expression
       14: 1941:            if (const Token *parent = skipValueInConditionalExpression(tok2)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1942:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1943:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
        -: 1944:                            errorLogger,
        -: 1945:                            tok2,
        -: 1946:                            "no simplification of " + tok2->str() + " within " + (Token::Match(parent,"[?:]") ? "?:" : parent->str()) + " expression");
    #####: 1947:                continue;
        -: 1948:            }
        -: 1949:
        -: 1950:            // do-while condition, break in the loop body
        -: 1951:            {
       14: 1952:                const Token *parent = tok2->astParent();
call    0 returned 100%
       82: 1953:                while (parent && !Token::simpleMatch(parent->previous(), "while ("))
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 71% (fallthrough)
branch  9 taken 29%
       34: 1954:                    parent = parent->astParent();
call    0 returned 100%
       14: 1955:                if (parent && Token::simpleMatch(parent->tokAt(-2), "} while (") && Token::simpleMatch(parent->linkAt(-2)->previous(), "do {")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
    #####: 1956:                    bool breakBailout = false;
    #####: 1957:                    for (const Token *iftok = parent->linkAt(-2); iftok != parent; iftok = iftok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 1958:                        if (!Token::simpleMatch(iftok, "if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1959:                            continue;
    #####: 1960:                        if (!Token::simpleMatch(iftok->linkAt(1), ") { break"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1961:                            continue;
    #####: 1962:                        ProgramMemory programMemory;
call    0 never executed
call    1 never executed
    #####: 1963:                        programMemory.setIntValue(varid, num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1964:                        if (conditionIsTrue(iftok->next()->astOperand2(), programMemory)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1965:                            breakBailout = true;
    #####: 1966:                            break;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1967:                        }
        -: 1968:                    }
    #####: 1969:                    if (breakBailout) {
branch  0 never executed
branch  1 never executed
    #####: 1970:                        if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1971:                            bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 1972:                                    errorLogger,
        -: 1973:                                    tok2,
        -: 1974:                                    "no simplification of " + tok2->str() + " in do-while condition since there is a break in the loop body");
    #####: 1975:                        break;
        -: 1976:                    }
        -: 1977:                }
        -: 1978:            }
        -: 1979:
       14: 1980:            setTokenValue(tok2, val, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14: 1981:            if (val2.condition)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1982:                setTokenValue(tok2,val2, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
       14: 1983:            if (tok2 == var->nameToken())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1984:                break;
        -: 1985:        }
        -: 1986:
        -: 1987:        // skip sizeof etc..
      480: 1988:        if (tok2->str() == ")" && Token::Match(tok2->link()->previous(), "sizeof|typeof|typeid ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1989:            tok2 = tok2->link();
call    0 never executed
        -: 1990:
        -: 1991:        // goto label
      480: 1992:        if (Token::Match(tok2, "[;{}] %name% :")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1993:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1994:                bailout(tokenlist, errorLogger, tok2->next(), "variable " + var->name() + " stopping on goto label");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
    #####: 1995:            break;
        -: 1996:        }
        -: 1997:
      480: 1998:        if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       13: 1999:            const Token *vartok = Token::findmatch(tok2->link(), "%varid%", tok2, varid);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       13: 2000:            while (Token::Match(vartok, "%name% = %num% ;") && !vartok->tokAt(2)->getValue(num))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 2001:                vartok = Token::findmatch(vartok->next(), "%varid%", tok2, varid);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       13: 2002:            if (vartok) {
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
        7: 2003:                if (settings->debugwarnings) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2004:                    std::string errmsg = "variable ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2005:                    errmsg += var->name() + " ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2006:                    errmsg += "stopping on }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2007:                    bailout(tokenlist, errorLogger, tok2, errmsg);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 2008:                }
        7: 2009:                break;
        -: 2010:            } else {
        6: 2011:                tok2 = tok2->link();
call    0 returned 100%
        -: 2012:            }
      467: 2013:        } else if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 2014:            // if variable is assigned in loop don't look before the loop
    #####: 2015:            if (tok2->previous() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2016:                (Token::simpleMatch(tok2->previous(), "do") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2017:                 (tok2->strAt(-1) == ")" && Token::Match(tok2->linkAt(-1)->previous(), "for|while (")))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -: 2018:
    #####: 2019:                const Token *start = tok2;
    #####: 2020:                const Token *end   = start->link();
call    0 never executed
    #####: 2021:                if (isVariableChanged(start,end,varid,var->isGlobal(),settings, tokenlist->isCPP())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2022:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2023:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " is assigned in loop. so valueflow analysis bailout when start of loop is reached.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2024:                    break;
        -: 2025:                }
        -: 2026:            }
        -: 2027:
        -: 2028:            // Global variable : stop when leaving the function scope
    #####: 2029:            if (!var->isLocal()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2030:                if (!Token::Match(tok2->previous(), ")|else|do {"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2031:                    break;
    #####: 2032:                if ((tok2->previous()->str() == ")") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2033:                    !Token::Match(tok2->linkAt(-1)->previous(), "if|for|while ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2034:                    break;
        -: 2035:            }
      467: 2036:        } else if (tok2->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
       62: 2037:            const Token *parent = tok2->previous();
call    0 returned 100%
      260: 2038:            while (parent && !Token::Match(parent, "return|break|continue|goto"))
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 61% (fallthrough)
branch  8 taken 39%
       99: 2039:                parent = parent->astParent();
call    0 returned 100%
        -: 2040:            // reaching a break/continue/return
       62: 2041:            if (parent) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2042:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2043:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " stopping on " + parent->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    #####: 2044:                break;
        -: 2045:            }
        -: 2046:        }
        -: 2047:
      473: 2048:        if (Token::Match(tok2, "%name% (") && !Token::simpleMatch(tok2->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 41% (fallthrough)
branch 12 taken 59%
branch 13 taken 8% (fallthrough)
branch 14 taken 92%
        -: 2049:            // bailout: global non-const variables
       37: 2050:            if (!(var->isLocal() || var->isArgument()) && !var->isConst()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 2051:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2052:                    bailout(tokenlist, errorLogger, tok, "global variable " + var->name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 2053:                return;
        -: 2054:            }
        -: 2055:        }
      473: 2056:    }
        -: 2057:}
        -: 2058:
function _ZL24valueFlowBeforeConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 47%
      224: 2059:static void valueFlowBeforeCondition(TokenList *tokenlist, SymbolDatabase *symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 2060:{
      457: 2061:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    35893: 2062:        for (Token* tok = const_cast<Token*>(scope->bodyStart); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    35660: 2063:            MathLib::bigint num = 0;
    35660: 2064:            const Token *vartok = nullptr;
    35660: 2065:            if (tok->isComparisonOp() && tok->astOperand1() && tok->astOperand2()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       58: 2066:                if (tok->astOperand1()->isName() && tok->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 78% (fallthrough)
branch  5 taken 22%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 93% (fallthrough)
branch 11 taken 7%
branch 12 taken 72% (fallthrough)
branch 13 taken 28%
       42: 2067:                    vartok = tok->astOperand1();
call    0 returned 100%
       42: 2068:                    num = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       32: 2069:                } else if (tok->astOperand1()->hasKnownIntValue() && tok->astOperand2()->isName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 13% (fallthrough)
branch  5 taken 88%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2070:                    vartok = tok->astOperand2();
call    0 never executed
    #####: 2071:                    num = tok->astOperand1()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2072:                } else {
    35605: 2073:                    continue;
        -: 2074:                }
    71164: 2075:            } else if (Token::Match(tok->previous(), "if|while ( %name% %oror%|&&|)") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
    35562: 2076:                       Token::Match(tok, "%oror%|&& %name% %oror%|&&|)")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       42: 2077:                vartok = tok->next();
call    0 returned 100%
       42: 2078:                num = 0;
    71100: 2079:            } else if (Token::Match(tok, "[!?]") && Token::Match(tok->astOperand1(), "%name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 95% (fallthrough)
branch 10 taken 5%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
       20: 2080:                vartok = tok->astOperand1();
call    0 returned 100%
       20: 2081:                num = 0;
        -: 2082:            } else {
    35540: 2083:                continue;
        -: 2084:            }
        -: 2085:
      104: 2086:            int varid = vartok->varId();
call    0 returned 100%
      104: 2087:            const Variable * const var = vartok->variable();
call    0 returned 100%
        -: 2088:
      104: 2089:            if (varid == 0U || !var)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       30: 2090:                continue;
        -: 2091:
       74: 2092:            if (tok->str() == "?" && tok->isExpandedMacro()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 2093:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2094:                    bailout(tokenlist, errorLogger, tok, "variable " + var->name() + ", condition is defined in macro");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2095:                continue;
        -: 2096:            }
        -: 2097:
        -: 2098:            // bailout: for/while-condition, variable is changed in while loop
      219: 2099:            for (const Token *tok2 = tok; tok2; tok2 = tok2->astParent()) {
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
call    2 returned 100%
      145: 2100:                if (tok2->astParent() || tok2->str() != "(" || !Token::simpleMatch(tok2->link(), ") {"))
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
branch 13 taken 50% (fallthrough)
branch 14 taken 50%
       72: 2101:                    continue;
        -: 2102:
        -: 2103:                // Variable changed in 3rd for-expression
       73: 2104:                if (Token::simpleMatch(tok2->previous(), "for (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        1: 2105:                    if (tok2->astOperand2() && tok2->astOperand2()->astOperand2() && isVariableChanged(tok2->astOperand2()->astOperand2(), tok2->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
branch 17 taken 100% (fallthrough)
branch 18 taken 0%
        1: 2106:                        varid = 0U;
        1: 2107:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2108:                            bailout(tokenlist, errorLogger, tok, "variable " + var->name() + " used in loop");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2109:                    }
        -: 2110:                }
        -: 2111:
        -: 2112:                // Variable changed in loop code
       73: 2113:                if (Token::Match(tok2->previous(), "for|while (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        1: 2114:                    const Token * const start = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
        1: 2115:                    const Token * const end   = start->link();
call    0 returned 100%
        -: 2116:
        1: 2117:                    if (isVariableChanged(start,end,varid,var->isGlobal(),settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2118:                        varid = 0U;
    #####: 2119:                        if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2120:                            bailout(tokenlist, errorLogger, tok, "variable " + var->name() + " used in loop");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2121:                    }
        -: 2122:                }
        -: 2123:
        -: 2124:                // if,macro => bailout
       72: 2125:                else if (Token::simpleMatch(tok2->previous(), "if (") && tok2->previous()->isExpandedMacro()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2126:                    varid = 0U;
    #####: 2127:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2128:                        bailout(tokenlist, errorLogger, tok, "variable " + var->name() + ", condition is defined in macro");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2129:                }
        -: 2130:            }
       74: 2131:            if (varid == 0U)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 2132:                continue;
        -: 2133:
        -: 2134:            // extra logic for unsigned variables 'i>=1' => possible value can also be 0
       73: 2135:            if (Token::Match(tok, "<|>")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
        2: 2136:                if (num != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2137:                    continue;
        2: 2138:                if (!var->typeStartToken()->isUnsigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2: 2139:                    continue;
        -: 2140:            }
      142: 2141:            ValueFlow::Value val(tok, num);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       71: 2142:            val.varId = varid;
      142: 2143:            ValueFlow::Value val2;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       71: 2144:            if (num==1U && Token::Match(tok,"<=|>=")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2145:                if (var->typeStartToken()->isUnsigned()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2146:                    val2 = ValueFlow::Value(tok,0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2147:                    val2.varId = varid;
        -: 2148:                }
        -: 2149:            }
       71: 2150:            Token* startTok = tok->astParent() ? tok->astParent() : tok->previous();
call    0 returned 100%
branch  1 taken 69% (fallthrough)
branch  2 taken 31%
call    3 returned 100%
call    4 returned 100%
       71: 2151:            valueFlowReverse(tokenlist, startTok, vartok, val, val2, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        -: 2152:        }
        -: 2153:    }
      224: 2154:}
        -: 2155:
function _ZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ called 5 returned 100% blocks executed 69%
        5: 2156:static void removeValues(std::list<ValueFlow::Value> &values, const std::list<ValueFlow::Value> &valuesToRemove)
        -: 2157:{
       10: 2158:    for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 never executed
       10: 2159:        const bool found = std::any_of(valuesToRemove.cbegin(), valuesToRemove.cend(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 never executed
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENUlRKS2_E_C2ERKSA_ called 20 returned 100% blocks executed 100%
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENUlRKS2_E_C2EOSA_ called 10 returned 100% blocks executed 100%
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENUlRKS2_E_D2Ev called 35 returned 100% blocks executed 100%
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENKUlRKS2_E_clES9_ called 3 returned 100% blocks executed 100%
       68: 2160:        [=](const ValueFlow::Value &v2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 2161:            return it->intvalue == v2.intvalue;
call    0 returned 100%
        8: 2162:        });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 2163:        if (found)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3: 2164:            values.erase(it++);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -: 2165:        else
        2: 2166:            ++it;
call    0 returned 100%
        -: 2167:    }
        5: 2168:}
        -: 2169:
function _ZL12valueFlowASTP5TokeniRKN9ValueFlow5ValueEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 2170:static void valueFlowAST(Token *tok, nonneg int varid, const ValueFlow::Value &value, const Settings *settings)
        -: 2171:{
    #####: 2172:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 2173:        return;
    #####: 2174:    if (tok->varId() == varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2175:        setTokenValue(tok, value, settings);
call    0 never executed
    #####: 2176:    valueFlowAST(tok->astOperand1(), varid, value, settings);
call    0 never executed
call    1 never executed
    #####: 2177:    if (tok->str() == "&&" && tok->astOperand1() && tok->astOperand1()->getValue(0)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2178:        ProgramMemory pm;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2179:        pm.setValue(varid,value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2180:        if (conditionIsFalse(tok->astOperand1(), pm))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2181:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2182:    } else if (tok->str() == "||" && tok->astOperand1()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2183:        const std::list<ValueFlow::Value> &values = tok->astOperand1()->values();
call    0 never executed
call    1 never executed
    #####: 2184:        const bool nonzero = std::any_of(values.cbegin(), values.cend(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
function _ZZL12valueFlowASTP5TokeniRKN9ValueFlow5ValueEPK8SettingsENKUlS4_E_clES4_ called 0 returned 0% blocks executed 0%
    #####: 2185:        [=](const ValueFlow::Value &v) {
    #####: 2186:            return v.intvalue != 0;
    #####: 2187:        });
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2188:        if (!nonzero)
branch  0 never executed
branch  1 never executed
    #####: 2189:            return;
    #####: 2190:        ProgramMemory pm;
call    0 never executed
call    1 never executed
    #####: 2191:        pm.setValue(varid,value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2192:        if (conditionIsTrue(tok->astOperand1(), pm))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2193:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2194:    }
    #####: 2195:    valueFlowAST(tok->astOperand2(), varid, value, settings);
call    0 never executed
call    1 never executed
        -: 2196:}
        -: 2197:
        -: 2198:/** if known variable is changed in loop body, change it to a possible value */
function _ZL23handleKnownValuesInLoopPK5TokenS1_PNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEibPK8Settings called 7 returned 100% blocks executed 100%
        7: 2199:static bool handleKnownValuesInLoop(const Token                 *startToken,
        -: 2200:                                    const Token                 *endToken,
        -: 2201:                                    std::list<ValueFlow::Value> *values,
        -: 2202:                                    nonneg int                  varid,
        -: 2203:                                    bool                        globalvar,
        -: 2204:                                    const Settings              *settings)
        -: 2205:{
        7: 2206:    const bool isChanged = isVariableChanged(startToken, endToken, varid, globalvar, settings, true);
call    0 returned 100%
        7: 2207:    if (!isChanged)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        2: 2208:        return false;
        5: 2209:    lowerToPossible(*values);
call    0 returned 100%
        5: 2210:    return isChanged;
        -: 2211:}
        -: 2212:
function _ZL14evalAssignmentRN9ValueFlow5ValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2213:static bool evalAssignment(ValueFlow::Value &lhsValue, const std::string &assign, const ValueFlow::Value &rhsValue)
        -: 2214:{
    #####: 2215:    if (lhsValue.isIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2216:        if (assign == "+=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2217:            lhsValue.intvalue += rhsValue.intvalue;
    #####: 2218:        else if (assign == "-=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2219:            lhsValue.intvalue -= rhsValue.intvalue;
    #####: 2220:        else if (assign == "*=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2221:            lhsValue.intvalue *= rhsValue.intvalue;
    #####: 2222:        else if (assign == "/=") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2223:            if (rhsValue.intvalue == 0)
branch  0 never executed
branch  1 never executed
    #####: 2224:                return false;
        -: 2225:            else
    #####: 2226:                lhsValue.intvalue /= rhsValue.intvalue;
    #####: 2227:        } else if (assign == "%=") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2228:            if (rhsValue.intvalue == 0)
branch  0 never executed
branch  1 never executed
    #####: 2229:                return false;
        -: 2230:            else
    #####: 2231:                lhsValue.intvalue %= rhsValue.intvalue;
    #####: 2232:        } else if (assign == "&=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2233:            lhsValue.intvalue &= rhsValue.intvalue;
    #####: 2234:        else if (assign == "|=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2235:            lhsValue.intvalue |= rhsValue.intvalue;
    #####: 2236:        else if (assign == "^=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2237:            lhsValue.intvalue ^= rhsValue.intvalue;
        -: 2238:        else
    #####: 2239:            return false;
    #####: 2240:    } else if (lhsValue.isFloatValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2241:        if (assign == "+=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2242:            lhsValue.floatValue += rhsValue.intvalue;
    #####: 2243:        else if (assign == "-=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2244:            lhsValue.floatValue -= rhsValue.intvalue;
    #####: 2245:        else if (assign == "*=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2246:            lhsValue.floatValue *= rhsValue.intvalue;
    #####: 2247:        else if (assign == "/=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2248:            lhsValue.floatValue /= rhsValue.intvalue;
        -: 2249:        else
    #####: 2250:            return false;
        -: 2251:    } else {
    #####: 2252:        return false;
        -: 2253:    }
    #####: 2254:    return true;
        -: 2255:}
        -: 2256:
        -: 2257:// Check if its an alias of the variable or is being aliased to this variable
function _ZL9isAliasOfPK8VariablePK5TokeniRKNSt7__debug4listIN9ValueFlow5ValueESaIS8_EEE called 430 returned 100% blocks executed 71%
      430: 2258:static bool isAliasOf(const Variable * var, const Token *tok, nonneg int varid, const std::list<ValueFlow::Value>& values)
        -: 2259:{
      430: 2260:    if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2261:        return false;
      430: 2262:    if (tok->varId() == 0)
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
      385: 2263:        return false;
       45: 2264:    if (isAliasOf(tok, varid))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2265:        return true;
       45: 2266:    if (!var->isPointer())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
       39: 2267:        return false;
        -: 2268:    // Search through non value aliases
       12: 2269:    for (const ValueFlow::Value &val : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
        6: 2270:        if (!val.isNonValue())
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        2: 2271:            continue;
        4: 2272:        if (val.isInconclusive())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2273:            continue;
        4: 2274:        if (val.isLifetimeValue() && !val.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2275:            continue;
        4: 2276:        if (val.isLifetimeValue() && val.lifetimeKind != ValueFlow::Value::LifetimeKind::Address)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2277:            continue;
        4: 2278:        if (!Token::Match(val.tokvalue, ".|&|*|%var%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2279:            continue;
        4: 2280:        if (astHasVar(val.tokvalue, tok->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2281:            return true;
        -: 2282:    }
        6: 2283:    return false;
        -: 2284:}
        -: 2285:
function _ZL15getIndirectionsRKNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 123 returned 100% blocks executed 50%
      123: 2286:static std::set<int> getIndirections(const std::list<ValueFlow::Value>& values)
        -: 2287:{
      123: 2288:    std::set<int> result;
call    0 returned 100%
function _ZZL15getIndirectionsRKNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEENKUlRKS2_E_clES8_ called 125 returned 100% blocks executed 100%
      248: 2289:    std::transform(values.begin(), values.end(), std::inserter(result, result.end()), [](const ValueFlow::Value& v) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
      250: 2290:        return std::max(0, v.indirect);
call    0 returned 100%
      250: 2291:    });
      123: 2292:    return result;
        -: 2293:}
        -: 2294:
function _ZL16valueFlowForwardP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8Settings called 212 returned 100% blocks executed 27%
      212: 2295:static bool valueFlowForward(Token * const               startToken,
        -: 2296:                             const Token * const         endToken,
        -: 2297:                             const Variable * const      var,
        -: 2298:                             const nonneg int            varid,
        -: 2299:                             std::list<ValueFlow::Value> values,
        -: 2300:                             const bool                  constValue,
        -: 2301:                             const bool                  subFunction,
        -: 2302:                             TokenList * const           tokenlist,
        -: 2303:                             ErrorLogger * const         errorLogger,
        -: 2304:                             const Settings * const      settings)
        -: 2305:{
      212: 2306:    int indentlevel = 0;
      212: 2307:    int number_of_if = 0;
      212: 2308:    int varusagelevel = -1;
      212: 2309:    bool returnStatement = false;  // current statement is a return, stop analysis at the ";"
      212: 2310:    bool read = false;  // is variable value read?
        -: 2311:
      212: 2312:    if (values.empty())
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       18: 2313:        return true;
        -: 2314:
      740: 2315:    for (Token *tok2 = startToken; tok2 && tok2 != endToken; tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
call    4 returned 100%
      672: 2316:        if (values.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      126: 2317:            return true;
      672: 2318:        if (indentlevel >= 0 && tok2->str() == "{")
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       10: 2319:            ++indentlevel;
      662: 2320:        else if (indentlevel >= 0 && tok2->str() == "}") {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
       14: 2321:            --indentlevel;
       14: 2322:            if (indentlevel <= 0 && isReturnScope(tok2, settings) && Token::Match(tok2->link()->previous(), "else|) {")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 2323:                const Token *condition = tok2->link();
call    0 never executed
    #####: 2324:                const bool iselse = Token::simpleMatch(condition->tokAt(-2), "} else {");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2325:                if (iselse)
branch  0 never executed
branch  1 never executed
    #####: 2326:                    condition = condition->linkAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2327:                if (condition && Token::simpleMatch(condition->previous(), ") {"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2328:                    condition = condition->linkAt(-1)->astOperand2();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 2329:                else
    #####: 2330:                    condition = nullptr;
    #####: 2331:                if (!condition) {
branch  0 never executed
branch  1 never executed
    #####: 2332:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2333:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, bailing out since it's unknown if conditional return is executed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2334:                    return false;
        -: 2335:                }
        -: 2336:
    #####: 2337:                bool bailoutflag = false;
    #####: 2338:                const Token * const start1 = iselse ? tok2->link()->linkAt(-2) : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2339:                for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2340:                    if (!iselse && conditionIsTrue(condition, getProgramMemory(condition->astParent(), varid, *it))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 2341:                        bailoutflag = true;
    #####: 2342:                        break;
        -: 2343:                    }
    #####: 2344:                    if (iselse && conditionIsFalse(condition, getProgramMemory(condition->astParent(), varid, *it))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 2345:                        bailoutflag = true;
    #####: 2346:                        break;
        -: 2347:                    }
    #####: 2348:                    if (iselse && it->isPossible() && isVariableChanged(start1, start1->link(), varid, var->isGlobal(), settings, tokenlist->isCPP()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 2349:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2350:                    else
    #####: 2351:                        ++it;
call    0 never executed
        -: 2352:                }
    #####: 2353:                if (bailoutflag) {
branch  0 never executed
branch  1 never executed
    #####: 2354:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2355:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, conditional return is assumed to be executed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2356:                    return false;
        -: 2357:                }
        -: 2358:
    #####: 2359:                if (values.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2360:                    return true;
       28: 2361:            } else if (indentlevel <= 0 &&
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
       19: 2362:                       Token::simpleMatch(tok2->link()->previous(), "else {") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       24: 2363:                       !isReturnScope(tok2->link()->tokAt(-2), settings) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 60% (fallthrough)
branch 10 taken 40%
        5: 2364:                       isVariableChanged(tok2->link(), tok2, varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        3: 2365:                lowerToPossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2366:            }
        -: 2367:        }
        -: 2368:
        -: 2369:        // skip lambda functions
        -: 2370:        // TODO: handle lambda functions
      672: 2371:        if (tok2->str() == "[" && findLambdaEndToken(tok2)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 2372:            Token *lambdaEndToken = const_cast<Token *>(findLambdaEndToken(tok2));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2373:            if (isVariableChanged(lambdaEndToken->link(), lambdaEndToken, varid, var->isGlobal(), settings, tokenlist->isCPP()))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2374:                return false;
        -: 2375:            // Don't skip lambdas for lifetime values
    #####: 2376:            if (!std::all_of(values.begin(), values.end(), std::mem_fn(&ValueFlow::Value::isLifetimeValue))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####: 2377:                tok2 = lambdaEndToken;
    #####: 2378:                continue;
        -: 2379:            }
        -: 2380:        }
        -: 2381:
      672: 2382:        if (Token::Match(tok2, "[;{}] %name% :") || tok2->str() == "case") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 2383:            lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2384:            tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2385:            continue;
        -: 2386:        }
        -: 2387:
      672: 2388:        else if ((var->isGlobal() || tok2->str() == "asm") && Token::Match(tok2, "%name% (") && Token::Match(tok2->linkAt(1), ") !!{")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
    #####: 2389:            return false;
        -: 2390:        }
        -: 2391:
        -: 2392:        // Skip sizeof etc
      672: 2393:        else if (Token::Match(tok2, "sizeof|typeof|typeid ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2394:            tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2395:
      672: 2396:        else if (Token::simpleMatch(tok2, "else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        -: 2397:            // Should scope be skipped because variable value is checked?
        2: 2398:            const Token *condition = tok2->linkAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 2399:            condition = condition ? condition->linkAt(-1) : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2: 2400:            condition = condition ? condition->astOperand2() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 2401:
        4: 2402:            const bool skipelse = std::any_of(values.cbegin(), values.cend(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
function _ZZL16valueFlowForwardP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E_clESK_ called 2 returned 100% blocks executed 75%
        2: 2403:            [=](const ValueFlow::Value &v) {
        4: 2404:                return conditionIsTrue(condition, getProgramMemory(tok2, varid, v));
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        6: 2405:            });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 2406:            if (skipelse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2407:                tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2408:                continue;
        -: 2409:            }
        -: 2410:        }
        -: 2411:
      670: 2412:        else if (Token::simpleMatch(tok2, "do {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 2413:            const Token *start = tok2->next();
call    0 returned 100%
        1: 2414:            const Token *end   = start->link();
call    0 returned 100%
        1: 2415:            if (Token::simpleMatch(end, "} while ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 2416:                end = end->linkAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2417:
        1: 2418:            if (isVariableChanged(start, end, varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        1: 2419:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2420:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, assignment in do-while");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        1: 2421:                return false;
        -: 2422:            }
        -: 2423:
    #####: 2424:            handleKnownValuesInLoop(start, end, &values, varid, var->isGlobal(), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2425:        }
        -: 2426:
        -: 2427:        // conditional block of code that assigns variable..
      669: 2428:        else if (!tok2->varId() && Token::Match(tok2, "%name% (") && Token::simpleMatch(tok2->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 19% (fallthrough)
branch  7 taken 81%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 50% (fallthrough)
branch 15 taken 50%
branch 16 taken 8% (fallthrough)
branch 17 taken 92%
        -: 2429:            // is variable changed in condition?
      110: 2430:            for (int i:getIndirections(values)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       55: 2431:                Token* tokChanged = findVariableChanged(tok2->next(), tok2->next()->link(), i, varid, var->isGlobal(), settings, tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
       55: 2432:                if (tokChanged != nullptr) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 2433:                    // Set the value before bailing
       14: 2434:                    if (tokChanged->varId() == varid) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       28: 2435:                        for (const ValueFlow::Value &v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       14: 2436:                            if (!v.isNonValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2437:                                continue;
       14: 2438:                            setTokenValue(tokChanged, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2439:                        }
        -: 2440:                    }
function _ZZL16valueFlowForwardP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E0_clESK_ called 14 returned 100% blocks executed 100%
       28: 2441:                    values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
       14: 2442:                        return v.indirect == i;
       14: 2443:                    });
        -: 2444:                }
        -: 2445:            }
       55: 2446:            if (values.empty()) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
       14: 2447:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2448:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, assignment in condition");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       43: 2449:                return false;
        -: 2450:            }
        -: 2451:
        -: 2452:            // if known variable is changed in loop body, change it to a possible value..
       41: 2453:            if (Token::Match(tok2, "for|while")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
        7: 2454:                if (handleKnownValuesInLoop(tok2, tok2->linkAt(1)->linkAt(1), &values, varid, var->isGlobal(), settings))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 71% (fallthrough)
branch 11 taken 29%
        5: 2455:                    number_of_if++;
        -: 2456:            }
        -: 2457:
        -: 2458:            // Set values in condition
      109: 2459:            for (Token* tok3 = tok2->tokAt(2); tok3 != tok2->next()->link(); tok3 = tok3->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 66% (fallthrough)
branch  6 taken 34%
call    7 returned 100%
       72: 2460:                if (tok3->varId() == varid) {
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
       20: 2461:                    for (const ValueFlow::Value &v : values)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       10: 2462:                        setTokenValue(tok3, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       62: 2463:                } else if (Token::Match(tok3, "%oror%|&&|?|;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
        4: 2464:                    break;
        -: 2465:                }
        -: 2466:            }
        -: 2467:
       41: 2468:            const Token * const condTok = tok2->next()->astOperand2();
call    0 returned 100%
call    1 returned 100%
       41: 2469:            const bool condAlwaysTrue = (condTok && condTok->hasKnownIntValue() && condTok->values().front().intvalue != 0);
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 98%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
       41: 2470:            const bool condAlwaysFalse = (condTok && condTok->hasKnownIntValue() && condTok->values().front().intvalue == 0);
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 98%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -: 2471:
        -: 2472:            // Should scope be skipped because variable value is checked?
       57: 2473:            std::list<ValueFlow::Value> truevalues;
call    0 returned 100%
call    1 never executed
       57: 2474:            std::list<ValueFlow::Value> falsevalues;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 39%
branch  3 taken 37%
branch  4 taken 24%
call    5 never executed
       82: 2475:            for (const ValueFlow::Value &v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       42: 2476:                if (condAlwaysTrue) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        1: 2477:                    truevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 2478:                    continue;
        -: 2479:                }
       40: 2480:                if (condAlwaysFalse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2481:                    falsevalues.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2482:                    continue;
        -: 2483:                }
        -: 2484:                // TODO: Compute program from tokvalue first
       80: 2485:                ProgramMemory programMemory = getProgramMemory(tok2, varid, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       40: 2486:                const bool isTrue = conditionIsTrue(condTok, programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       40: 2487:                const bool isFalse = conditionIsFalse(condTok, programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2488:
       40: 2489:                if (isTrue)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        6: 2490:                    truevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       40: 2491:                if (isFalse)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        6: 2492:                    falsevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2493:
        -: 2494:            }
       41: 2495:            if (!truevalues.empty() || !falsevalues.empty()) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 18% (fallthrough)
branch  5 taken 82%
branch  6 taken 32% (fallthrough)
branch  7 taken 68%
        -: 2496:                // '{'
       13: 2497:                const Token * const startToken1 = tok2->linkAt(1)->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 2498:
       39: 2499:                bool vfresult = valueFlowForward(startToken1->next(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
       13: 2500:                                                 startToken1->link(),
call    0 returned 100%
        -: 2501:                                                 var,
        -: 2502:                                                 varid,
        -: 2503:                                                 truevalues,
        -: 2504:                                                 constValue,
        -: 2505:                                                 subFunction,
        -: 2506:                                                 tokenlist,
        -: 2507:                                                 errorLogger,
       13: 2508:                                                 settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2509:
       13: 2510:                if (!condAlwaysFalse && isVariableChanged(startToken1, startToken1->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 23% (fallthrough)
branch  9 taken 77%
branch 10 taken 23% (fallthrough)
branch 11 taken 77%
        3: 2511:                    removeValues(values, truevalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 2512:                    lowerToPossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2513:                }
        -: 2514:
        -: 2515:                // goto '}'
       13: 2516:                tok2 = startToken1->link();
call    0 returned 100%
        -: 2517:
       13: 2518:                if (isReturnScope(tok2, settings) || !vfresult) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 85% (fallthrough)
branch  4 taken 15%
branch  5 taken 9% (fallthrough)
branch  6 taken 91%
branch  7 taken 23% (fallthrough)
branch  8 taken 77%
        3: 2519:                    if (condAlwaysTrue)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 2520:                        return false;
        2: 2521:                    removeValues(values, truevalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2522:                }
        -: 2523:
       12: 2524:                if (Token::simpleMatch(tok2, "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2525:                    const Token * const startTokenElse = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2526:
    #####: 2527:                    vfresult = valueFlowForward(startTokenElse->next(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2528:                                                startTokenElse->link(),
call    0 never executed
        -: 2529:                                                var,
        -: 2530:                                                varid,
        -: 2531:                                                falsevalues,
        -: 2532:                                                constValue,
        -: 2533:                                                subFunction,
        -: 2534:                                                tokenlist,
        -: 2535:                                                errorLogger,
        -: 2536:                                                settings);
        -: 2537:
    #####: 2538:                    if (!condAlwaysTrue && isVariableChanged(startTokenElse, startTokenElse->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2539:                        removeValues(values, falsevalues);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2540:                        lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2541:                    }
        -: 2542:
        -: 2543:                    // goto '}'
    #####: 2544:                    tok2 = startTokenElse->link();
call    0 never executed
        -: 2545:
    #####: 2546:                    if (isReturnScope(tok2, settings) || !vfresult) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2547:                        if (condAlwaysFalse)
branch  0 never executed
branch  1 never executed
    #####: 2548:                            return false;
    #####: 2549:                        removeValues(values, falsevalues);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2550:                    }
        -: 2551:                }
       12: 2552:                if (values.empty())
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        2: 2553:                    return false;
       10: 2554:                continue;
        -: 2555:            }
        -: 2556:
       28: 2557:            Token * const start = tok2->linkAt(1)->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       28: 2558:            Token * const end   = start->link();
call    0 returned 100%
       56: 2559:            const bool varusage = (indentlevel >= 0 && constValue && number_of_if == 0U) ?
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 64% (fallthrough)
branch  5 taken 36%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
       18: 2560:                                  isVariableChanged(start,end,varid,var->isGlobal(),settings, tokenlist->isCPP()) :
call    0 returned 100%
call    1 returned 100%
       38: 2561:                                  (nullptr != Token::findmatch(start, "%varid%", end, varid));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       28: 2562:            if (!read) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28: 2563:                read = bool(nullptr != Token::findmatch(tok2, "%varid% !!=", end, varid));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2564:            }
       28: 2565:            if (varusage) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       24: 2566:                varusagelevel = indentlevel;
        -: 2567:
       24: 2568:                if (indentlevel < 0 && tok2->str() == "switch")
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        6: 2569:                    return false;
        -: 2570:
        -: 2571:                // TODO: don't check noreturn scopes
       24: 2572:                if (read && (number_of_if > 0U || Token::findmatch(tok2, "%varid%", start, varid))) {
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 45% (fallthrough)
branch  3 taken 55%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 25% (fallthrough)
branch 10 taken 75%
        -: 2573:                    // Set values in condition
        6: 2574:                    const Token * const condend = tok2->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       30: 2575:                    for (Token *condtok = tok2; condtok != condend; condtok = condtok->next()) {
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
       26: 2576:                        if (condtok->varId() == varid) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2577:                            for (const ValueFlow::Value &v : values)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2578:                                setTokenValue(condtok, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2579:                        }
       26: 2580:                        if (Token::Match(condtok, "%oror%|&&|?|;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
        2: 2581:                            break;
        -: 2582:                    }
        6: 2583:                    if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2584:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " is assigned in conditional code");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        6: 2585:                    return false;
        -: 2586:                }
        -: 2587:
       18: 2588:                if (var->isStatic()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2589:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2590:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " bailout when conditional code that contains var is seen");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2591:                    return false;
        -: 2592:                }
        -: 2593:
        -: 2594:                // Forward known values in the else branch
       18: 2595:                if (Token::simpleMatch(end, "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 22% (fallthrough)
branch  4 taken 78%
        8: 2596:                    std::list<ValueFlow::Value> knownValues;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4: 2597:                    std::copy_if(values.begin(), values.end(), std::back_inserter(knownValues), std::mem_fn(&ValueFlow::Value::isKnown));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        8: 2598:                    valueFlowForward(end->tokAt(2),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        4: 2599:                                     end->linkAt(2),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2600:                                     var,
        -: 2601:                                     varid,
        -: 2602:                                     knownValues,
        -: 2603:                                     constValue,
        -: 2604:                                     subFunction,
        -: 2605:                                     tokenlist,
        -: 2606:                                     errorLogger,
        -: 2607:                                     settings);
        -: 2608:                }
        -: 2609:
        -: 2610:                // Remove conditional values
       36: 2611:                std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 returned 100%
       36: 2612:                for (it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
       18: 2613:                    if (it->condition || it->conditional || it->isImpossible())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2614:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2615:                    else {
       18: 2616:                        it->changeKnownToPossible();
call    0 returned 100%
call    1 returned 100%
       18: 2617:                        ++it;
call    0 returned 100%
        -: 2618:                    }
        -: 2619:                }
        -: 2620:            }
        -: 2621:
        -: 2622:            // stop after conditional return scopes that are executed
       22: 2623:            if (isReturnScope(end, settings)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 18% (fallthrough)
branch  4 taken 82%
        8: 2624:                std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 never executed
        8: 2625:                for (it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        4: 2626:                    if (conditionIsTrue(tok2->next()->astOperand2(), getProgramMemory(tok2, varid, *it)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
    #####: 2627:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2628:                    else
        4: 2629:                        ++it;
call    0 returned 100%
        -: 2630:                }
        4: 2631:                if (values.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2632:                    return false;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 2633:            }
        -: 2634:
        -: 2635:            // noreturn scopes..
       28: 2636:            if ((number_of_if > 0 || Token::findmatch(tok2, "%varid%", start, varid)) &&
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
branch  9 taken 9% (fallthrough)
branch 10 taken 91%
        6: 2637:                (isEscapeScope(start, tokenlist) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        2: 2638:                 (Token::simpleMatch(end,"} else {") && isEscapeScope(end->tokAt(2), tokenlist)))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        2: 2639:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2640:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + ". noreturn conditional scope.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        2: 2641:                return false;
        -: 2642:            }
        -: 2643:
       20: 2644:            if (isVariableChanged(start, end, varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 90% (fallthrough)
branch  6 taken 10%
       59: 2645:                if ((!read || number_of_if == 0) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 78% (fallthrough)
branch  5 taken 22%
       66: 2646:                    Token::simpleMatch(tok2, "if (") &&
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 25% (fallthrough)
branch  6 taken 75%
       20: 2647:                    !(Token::simpleMatch(end, "} else {") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        4: 2648:                      isEscapeScope(end->tokAt(2), tokenlist))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       14: 2649:                    ++number_of_if;
       14: 2650:                    tok2 = end;
        -: 2651:                } else {
        -: 2652:                    // loop that conditionally set variable and then break => either loop condition is
        -: 2653:                    // redundant or the variable can be unchanged after the loop.
        4: 2654:                    bool loopCondition = false;
        4: 2655:                    if (Token::simpleMatch(tok2, "while (") && Token::Match(tok2->next()->astOperand2(), "%op%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2656:                        loopCondition = true;
        8: 2657:                    else if (Token::simpleMatch(tok2, "for (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2658:                             Token::simpleMatch(tok2->next()->astOperand2(), ";") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        4: 2659:                             Token::simpleMatch(tok2->next()->astOperand2()->astOperand2(), ";") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2660:                             Token::Match(tok2->next()->astOperand2()->astOperand2()->astOperand1(), "%op%"))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2661:                        loopCondition = true;
        -: 2662:
        4: 2663:                    bool bail = true;
        4: 2664:                    if (loopCondition) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2665:                        const Token *tok3 = Token::findmatch(start, "%varid%", end, varid);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2666:                        if (Token::Match(tok3, "%varid% =", varid) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2667:                            tok3->scope()->bodyEnd                &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2668:                            Token::Match(tok3->scope()->bodyEnd->tokAt(-3), "[;}] break ;") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2669:                            !Token::findmatch(tok3->next(), "%varid%", end, varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2670:                            bail = false;
    #####: 2671:                            tok2 = end;
        -: 2672:                        }
        -: 2673:                    }
        -: 2674:
        4: 2675:                    if (bail) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 2676:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2677:                            bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " is assigned in conditional code");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        4: 2678:                        return false;
call    0 returned 100%
branch  1 taken 39%
branch  2 taken 37%
branch  3 taken 24%
        -: 2679:                    }
        -: 2680:                }
        -: 2681:            }
        -: 2682:        }
        -: 2683:
      614: 2684:        else if (Token::Match(tok2, "assert|ASSERT (") && Token::simpleMatch(tok2->linkAt(1), ") ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 2685:            const Token * const arg = tok2->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 2686:            if (arg != nullptr && arg->str() != ",") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2687:                // Should scope be skipped because variable value is checked?
    #####: 2688:                for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2689:                    if (conditionIsFalse(arg, getProgramMemory(tok2, varid, *it)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2690:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2691:                    else
    #####: 2692:                        ++it;
call    0 never executed
        -: 2693:                }
        -: 2694:            }
        -: 2695:        }
        -: 2696:
      614: 2697:        else if (tok2->str() == "}" && indentlevel == varusagelevel) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
       12: 2698:            ++number_of_if;
        -: 2699:
        -: 2700:            // Set "conditional" flag for all values
       12: 2701:            removeImpossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24: 2702:            std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       24: 2703:            for (it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
       12: 2704:                it->conditional = true;
call    0 returned 100%
       12: 2705:                it->changeKnownToPossible();
call    0 returned 100%
call    1 returned 100%
        -: 2706:            }
        -: 2707:
       12: 2708:            if (Token::simpleMatch(tok2,"} else {"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2709:                tok2 = tok2->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2710:        }
        -: 2711:
      602: 2712:        else if (Token::Match(tok2, "break|continue|goto")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2713:            const Scope *scope = tok2->scope();
call    0 never executed
    #####: 2714:            if (indentlevel > 0) {
branch  0 never executed
branch  1 never executed
    #####: 2715:                const Token *tok3 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2716:                int indentlevel2 = indentlevel;
    #####: 2717:                while (indentlevel2 > 0 &&
branch  0 never executed
branch  1 never executed
    #####: 2718:                       tok3->str() == "}" &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2719:                       Token::Match(tok3->link()->previous(), "!!)")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2720:                    indentlevel2--;
    #####: 2721:                    tok3 = tok3->next();
call    0 never executed
    #####: 2722:                    if (tok3 && tok3->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2723:                        tok3 = tok3->next();
call    0 never executed
        -: 2724:                }
    #####: 2725:                if (indentlevel2 > 0)
branch  0 never executed
branch  1 never executed
    #####: 2726:                    continue;
    #####: 2727:                scope = tok3->scope();
call    0 never executed
    #####: 2728:                indentlevel = 0;
        -: 2729:            }
    #####: 2730:            if (tok2->str() == "break") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2731:                if (scope && scope->type == Scope::eSwitch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2732:                    tok2 = const_cast<Token *>(scope->bodyEnd);
    #####: 2733:                    if (tok2 == endToken)
branch  0 never executed
branch  1 never executed
    #####: 2734:                        break;
    #####: 2735:                    --indentlevel;
    #####: 2736:                    lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2737:                    continue;
        -: 2738:                }
        -: 2739:            }
    #####: 2740:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2741:                bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + ". noreturn conditional scope.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2742:            return false;
        -: 2743:        }
        -: 2744:
      602: 2745:        else if (indentlevel <= 0 && Token::Match(tok2, "return|throw|setjmp|longjmp"))
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 10% (fallthrough)
branch  6 taken 90%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
       58: 2746:            returnStatement = true;
        -: 2747:
      544: 2748:        else if (returnStatement && tok2->str() == ";")
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 55% (fallthrough)
branch  5 taken 45%
branch  6 taken 11% (fallthrough)
branch  7 taken 89%
       58: 2749:            return false;
        -: 2750:
        -: 2751:        // If a ? is seen and it's known that the condition is true/false..
      486: 2752:        else if (tok2->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2753:            if (subFunction && (astIsPointer(tok2->astOperand1()) || astIsIntegral(tok2->astOperand1(), false))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 2754:                tok2 = const_cast<Token*>(nextAfterAstRightmostLeaf(tok2));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2755:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2756:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, skip ternary in subfunctions");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2757:                continue;
        -: 2758:            }
    #####: 2759:            const Token *condition = tok2->astOperand1();
call    0 never executed
    #####: 2760:            Token *op2 = tok2->astOperand2();
call    0 never executed
    #####: 2761:            if (!condition || !op2) // Ticket #6713
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2762:                continue;
        -: 2763:
    #####: 2764:            if (condition->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2765:                const ValueFlow::Value &condValue = condition->values().front();
call    0 never executed
call    1 never executed
    #####: 2766:                Token *expr = (condValue.intvalue != 0) ? op2->astOperand1() : op2->astOperand2();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 2767:                for (const ValueFlow::Value &v : values)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2768:                    valueFlowAST(expr, varid, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2769:                if (isVariableChangedByFunctionCall(expr, 0, varid, settings, nullptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2770:                    lowerToPossible(values, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2771:                if (isVariableChangedByFunctionCall(expr, 1, varid, settings, nullptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2772:                    lowerToPossible(values, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2773:            } else {
    #####: 2774:                for (const ValueFlow::Value &v : values) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2775:                    const ProgramMemory programMemory(getProgramMemory(tok2, varid, v));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2776:                    if (conditionIsTrue(condition, programMemory))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2777:                        valueFlowAST(op2->astOperand1(), varid, v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2778:                    else if (conditionIsFalse(condition, programMemory))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2779:                        valueFlowAST(op2->astOperand2(), varid, v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2780:                    else
    #####: 2781:                        valueFlowAST(op2, varid, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2782:                }
        -: 2783:
    #####: 2784:                const Token * const expr0 = op2->astOperand1() ? op2->astOperand1() : tok2->astOperand1();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2785:                const Token * const expr1 = op2->astOperand2();
call    0 never executed
        -: 2786:
    #####: 2787:                const std::pair<const Token *, const Token *> startEnd0 = expr0->findExpressionStartEndTokens();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2788:                const std::pair<const Token *, const Token *> startEnd1 = expr1->findExpressionStartEndTokens();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2789:                const bool changed0 = isVariableChanged(startEnd0.first, startEnd0.second->next(), varid, var->isGlobal(), settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2790:                const bool changed1 = isVariableChanged(startEnd1.first, startEnd1.second->next(), varid, var->isGlobal(), settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2791:
    #####: 2792:                if (changed0 && changed1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2793:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2794:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, changed in both : expressions");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2795:                    return false;
        -: 2796:                }
        -: 2797:
    #####: 2798:                if (changed0 || changed1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2799:                    lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2800:            }
        -: 2801:
        -: 2802:            // Skip conditional expressions..
    #####: 2803:            const Token * const questionToken = tok2;
    #####: 2804:            while (tok2->astOperand1() || tok2->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2805:                if (tok2->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2806:                    tok2 = tok2->astOperand2();
call    0 never executed
    #####: 2807:                else if (tok2->isUnaryPreOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2808:                    tok2 = tok2->astOperand1();
call    0 never executed
        -: 2809:                else
    #####: 2810:                    break;
        -: 2811:            }
    #####: 2812:            tok2 = tok2->next();
call    0 never executed
        -: 2813:
    #####: 2814:            if (isVariableChanged(questionToken, questionToken->astOperand2(), varid, false, settings, tokenlist->isCPP()) &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2815:                isVariableChanged(questionToken->astOperand2(), tok2, varid, false, settings, tokenlist->isCPP())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2816:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2817:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " valueFlowForward, assignment in condition");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
    #####: 2818:                return false;
        -: 2819:
        -: 2820:            }
        -: 2821:        }
        -: 2822:
      486: 2823:        else if (tok2->varId() == varid) {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
        -: 2824:            // compound assignment, known value in rhs
      118: 2825:            if (Token::Match(tok2->previous(), "!!* %name% %assign%") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        6: 2826:                tok2->next()->str() != "=" &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 never executed
branch  4 never executed
       56: 2827:                tok2->next()->astOperand2() &&
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2828:                tok2->next()->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2829:
    #####: 2830:                const ValueFlow::Value &rhsValue = tok2->next()->astOperand2()->values().front();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2831:                const std::string &assign = tok2->next()->str();
call    0 never executed
call    1 never executed
    #####: 2832:                std::list<ValueFlow::Value>::iterator it;
call    0 never executed
call    1 never executed
        -: 2833:                // Erase values that are not int values..
    #####: 2834:                for (it = values.begin(); it != values.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2835:                    if (!evalAssignment(*it, assign, rhsValue)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2836:                        it = values.erase(it);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 2837:                    } else {
    #####: 2838:                        const std::string info("Compound assignment '" + assign + "', assigned value is " + it->infoString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 2839:                        it->errorPath.emplace_back(tok2, info);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2840:
    #####: 2841:                        ++it;
call    0 never executed
        -: 2842:                    }
        -: 2843:
        -: 2844:                }
    #####: 2845:                if (values.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2846:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2847:                        bailout(tokenlist, errorLogger, tok2, "compound assignment of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 2848:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2849:                }
        -: 2850:            }
        -: 2851:
        -: 2852:            // bailout: assignment
       56: 2853:            else if (Token::Match(tok2->previous(), "!!* %name% %assign%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
        -: 2854:                // simplify rhs
       12: 2855:                std::stack<Token *> rhs;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        6: 2856:                rhs.push(tok2->next()->astOperand2());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       98: 2857:                while (!rhs.empty()) {
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
       46: 2858:                    Token *rtok = rhs.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46: 2859:                    rhs.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46: 2860:                    if (!rtok)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
       26: 2861:                        continue;
       20: 2862:                    if (rtok->str() == "(" && Token::Match(rtok->astOperand1(), "sizeof|typeof|typeid"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2863:                        continue;
       20: 2864:                    if (Token::Match(rtok, "++|--|?|:|;|,"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2865:                        continue;
       20: 2866:                    if (rtok->varId() == varid) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2867:                        for (const ValueFlow::Value &v : values)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2868:                            setTokenValue(rtok, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2869:                    }
       20: 2870:                    rhs.push(rtok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       20: 2871:                    rhs.push(rtok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2872:                }
        6: 2873:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2874:                    bailout(tokenlist, errorLogger, tok2, "assignment of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        6: 2875:                return false;
        -: 2876:            }
        -: 2877:
        -: 2878:            // bailout: possible assignment using >>
       50: 2879:            if (isLikelyStreamRead(tokenlist->isCPP(), tok2->previous())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2880:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2881:                    bailout(tokenlist, errorLogger, tok2, "Possible assignment of " + tok2->str() + " using " + tok2->strAt(-1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
    #####: 2882:                return false;
        -: 2883:            }
        -: 2884:
        -: 2885:            // skip if variable is conditionally used in ?: expression
       50: 2886:            if (const Token *parent = skipValueInConditionalExpression(tok2)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2887:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2888:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
        -: 2889:                            errorLogger,
        -: 2890:                            tok2,
        -: 2891:                            "no simplification of " + tok2->str() + " within " + (Token::Match(parent,"[?:]") ? "?:" : parent->str()) + " expression");
    #####: 2892:                const Token *astTop = parent->astTop();
call    0 never executed
    #####: 2893:                if (Token::simpleMatch(astTop->astOperand1(), "for ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2894:                    tok2 = astTop->link();
call    0 never executed
        -: 2895:
        -: 2896:                // bailout if address of var is taken..
    #####: 2897:                if (tok2->astParent() && tok2->astParent()->isUnaryOp("&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 2898:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2899:                        bailout(tokenlist, errorLogger, tok2, "Taking address of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 2900:                    return false;
        -: 2901:                }
        -: 2902:
    #####: 2903:                continue;
        -: 2904:            }
        -: 2905:
        -: 2906:            {
        -: 2907:                // Is variable usage protected by && || ?:
       50: 2908:                const Token *tok3 = tok2;
       50: 2909:                const Token *parent = tok3->astParent();
call    0 returned 100%
      166: 2910:                while (parent && !Token::Match(parent, "%oror%|&&|:")) {
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 54% (fallthrough)
branch  8 taken 46%
       58: 2911:                    tok3 = parent;
       58: 2912:                    parent = parent->astParent();
call    0 returned 100%
        -: 2913:                }
       50: 2914:                const bool conditional = parent && (parent->str() == ":" || parent->astOperand2() == tok3);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2915:
      102: 2916:                for (const ValueFlow::Value &v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       52: 2917:                    if (!conditional || !v.conditional)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
       52: 2918:                        setTokenValue(tok2, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2919:                }
        -: 2920:            }
        -: 2921:
        -: 2922:            // increment/decrement
       50: 2923:            if (Token::Match(tok2->previous(), "++|-- %name%") || Token::Match(tok2, "%name% ++|--")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 2924:                std::list<ValueFlow::Value>::iterator it;
call    0 never executed
call    1 never executed
        -: 2925:                // Erase values that are not int values..
    #####: 2926:                for (it = values.begin(); it != values.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2927:                    if (!it->isIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2928:                        it = values.erase(it);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 2929:                    else
    #####: 2930:                        ++it;
call    0 never executed
        -: 2931:                }
    #####: 2932:                if (values.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2933:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2934:                        bailout(tokenlist, errorLogger, tok2, "increment/decrement of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 2935:                    return false;
        -: 2936:                }
    #####: 2937:                const bool pre   = Token::Match(tok2->previous(), "++|--");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2938:                Token * const op = pre ? tok2->previous() : tok2->next();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 2939:                const bool inc   = (op->str() == "++");
call    0 never executed
call    1 never executed
        -: 2940:                // Perform increment/decrement..
    #####: 2941:                for (it = values.begin(); it != values.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2942:                    if (!pre)
branch  0 never executed
branch  1 never executed
    #####: 2943:                        setTokenValue(op, *it, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2944:                    it->intvalue += (inc ? 1 : -1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2945:                    if (pre)
branch  0 never executed
branch  1 never executed
    #####: 2946:                        setTokenValue(op, *it, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2947:                    const std::string info(tok2->str() + " is " + std::string(inc ? "incremented" : "decremented") + "', new value is " + it->infoString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    #####: 2948:                    it->errorPath.emplace_back(tok2, info);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2949:                }
        -: 2950:            }
        -: 2951:
        -: 2952:            // bailout if address of var is taken..
       50: 2953:            if (tok2->astParent() && tok2->astParent()->isUnaryOp("&")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 2954:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2955:                    bailout(tokenlist, errorLogger, tok2, "Taking address of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 2956:                return false;
        -: 2957:            }
        -: 2958:
        -: 2959:            // bailout if reference is created..
       50: 2960:            if (tok2->astParent() && Token::Match(tok2->astParent()->tokAt(-2), "& %name% =")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2961:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2962:                    bailout(tokenlist, errorLogger, tok2, "Reference of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 2963:                return false;
        -: 2964:            }
        -: 2965:
        -: 2966:            // bailout if its stream..
       50: 2967:            if (isLikelyStream(tokenlist->isCPP(), tok2)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2968:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2969:                    bailout(tokenlist, errorLogger, tok2, "Stream used: " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 2970:                return false;
        -: 2971:            }
        -: 2972:
        -: 2973:            // assigned by subfunction?
      100: 2974:            for (int i:getIndirections(values)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       50: 2975:                bool inconclusive = false;
       50: 2976:                if (isVariableChangedByFunctionCall(tok2, i, settings, &inconclusive)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
function _ZZL16valueFlowForwardP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E1_clESK_ called 0 returned 0% blocks executed 0%
    #####: 2977:                    values.remove_if([&](const ValueFlow::Value& v) {
call    0 never executed
    #####: 2978:                        return v.indirect <= i;
    #####: 2979:                    });
        -: 2980:                }
       50: 2981:                if (inconclusive)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
       32: 2982:                    lowerToInconclusive(values, settings, i);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2983:            }
       50: 2984:            if (values.empty()) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
       32: 2985:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2986:                    bailout(tokenlist, errorLogger, tok2, "possible assignment of " + tok2->str() + " by subfunction");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       32: 2987:                return false;
        -: 2988:            }
       18: 2989:            if (tok2->strAt(1) == "." && tok2->next()->originalName() != "->") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 2990:                lowerToInconclusive(values, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2991:                if (!settings->inconclusive) {
branch  0 never executed
branch  1 never executed
    #####: 2992:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2993:                        bailout(tokenlist, errorLogger, tok2, "possible assignment of " + tok2->str() + " by member function");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2994:                    return false;
        -: 2995:                }
        -: 2996:            }
        -: 2997:            // Variable changed
       36: 2998:            for (int i:getIndirections(values)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
        -: 2999:                // Remove uninitialized values if modified
       18: 3000:                if (isVariableChanged(tok2, i, settings, tokenlist->isCPP()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
function _ZZL16valueFlowForwardP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E2_clESK_ called 0 returned 0% blocks executed 0%
    #####: 3001:                    values.remove_if([&](const ValueFlow::Value& v) {
call    0 never executed
    #####: 3002:                    return v.isUninitValue() && v.indirect <= i;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3003:                });
        -: 3004:            }
      430: 3005:        } else if (isAliasOf(var, tok2, varid, values) && isVariableChanged(tok2, 0, settings, tokenlist->isCPP())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 3006:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3007:                bailout(tokenlist, errorLogger, tok2, "Alias variable was modified.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        -: 3008:            // Bail at the end of the statement if its in an assignment
    #####: 3009:            const Token * top = tok2->astTop();
call    0 never executed
    #####: 3010:            if (Token::Match(top, "%assign%") && astHasToken(top->astOperand1(), tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3011:                returnStatement = true;
        -: 3012:            else
    #####: 3013:                return false;
        -: 3014:        }
        -: 3015:
        -: 3016:        // Lambda function
     1072: 3017:        if (Token::simpleMatch(tok2, "= [") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      536: 3018:            Token::simpleMatch(tok2->linkAt(1), "] (") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3019:            Token::simpleMatch(tok2->linkAt(1)->linkAt(1), ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3020:            const Token *bodyStart = tok2->linkAt(1)->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 3021:            if (isVariableChanged(bodyStart, bodyStart->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3022:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3023:                    bailout(tokenlist, errorLogger, tok2, "valueFlowForward, " + var->name() + " is changed in lambda function");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 3024:                return false;
        -: 3025:            }
        -: 3026:        }
        -: 3027:
        -: 3028:    }
       68: 3029:    return true;
        -: 3030:}
        -: 3031:
function _ZL16findSimpleReturnPK8Function called 0 returned 0% blocks executed 0%
    #####: 3032:static const Token *findSimpleReturn(const Function *f)
        -: 3033:{
    #####: 3034:    const Scope *scope = f->functionScope;
    #####: 3035:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 3036:        return nullptr;
    #####: 3037:    const Token *returnTok = nullptr;
    #####: 3038:    for (const Token *tok = scope->bodyStart->next(); tok && tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 3039:        if (tok->str() == "{" && tok->scope() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3040:            (tok->scope()->type == Scope::eLambda || tok->scope()->type == Scope::eClass)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3041:            tok = tok->link();
call    0 never executed
    #####: 3042:            continue;
        -: 3043:        }
    #####: 3044:        if (Token::simpleMatch(tok->astParent(), "return")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3045:            // Multiple returns
    #####: 3046:            if (returnTok)
branch  0 never executed
branch  1 never executed
    #####: 3047:                return nullptr;
    #####: 3048:            returnTok = tok;
        -: 3049:        }
        -: 3050:        // Skip lambda functions since the scope may not be set correctly
    #####: 3051:        const Token *lambdaEndToken = findLambdaEndToken(tok);
call    0 never executed
    #####: 3052:        if (lambdaEndToken) {
branch  0 never executed
branch  1 never executed
    #####: 3053:            tok = lambdaEndToken;
        -: 3054:        }
        -: 3055:    }
    #####: 3056:    return returnTok;
        -: 3057:}
        -: 3058:
function _ZL11findReturnsPK8Function called 17 returned 100% blocks executed 67%
       17: 3059:static std::vector<const Token*> findReturns(const Function* f)
        -: 3060:{
       17: 3061:    std::vector<const Token*> result;
call    0 returned 100%
       17: 3062:    const Scope* scope = f->functionScope;
       17: 3063:    if (!scope)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        5: 3064:        return result;
       66: 3065:    for (const Token* tok = scope->bodyStart->next(); tok && tok != scope->bodyEnd; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 82% (fallthrough)
branch  4 taken 18%
call    5 returned 100%
       54: 3066:        if (tok->str() == "{" && tok->scope() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3067:            (tok->scope()->type == Scope::eLambda || tok->scope()->type == Scope::eClass)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3068:            tok = tok->link();
call    0 never executed
    #####: 3069:            continue;
        -: 3070:        }
       54: 3071:        if (Token::simpleMatch(tok->astParent(), "return")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
        3: 3072:            result.push_back(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3073:        }
        -: 3074:        // Skip lambda functions since the scope may not be set correctly
       54: 3075:        const Token* lambdaEndToken = findLambdaEndToken(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       54: 3076:        if (lambdaEndToken) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3077:            tok = lambdaEndToken;
        -: 3078:        }
        -: 3079:    }
       12: 3080:    return result;
call    0 never executed
        -: 3081:}
        -: 3082:
function _ZL14getArgumentPosPK8VariablePK8Function called 0 returned 0% blocks executed 0%
    #####: 3083:static int getArgumentPos(const Variable *var, const Function *f)
        -: 3084:{
function _ZZL14getArgumentPosPK8VariablePK8FunctionENKUlRS0_E_clES5_ called 0 returned 0% blocks executed 0%
    #####: 3085:    auto arg_it = std::find_if(f->argumentList.begin(), f->argumentList.end(), [&](const Variable &v) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3086:        return v.nameToken() == var->nameToken();
call    0 never executed
call    1 never executed
    #####: 3087:    });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 3088:    if (arg_it == f->argumentList.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3089:        return -1;
    #####: 3090:    return std::distance(f->argumentList.begin(), arg_it);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 3091:}
        -: 3092:
function _Z12lifetimeTypeB5cxx11PK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 3093:std::string lifetimeType(const Token *tok, const ValueFlow::Value *val)
        -: 3094:{
    #####: 3095:    std::string result;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3096:    if (!val)
branch  0 never executed
branch  1 never executed
    #####: 3097:        return "object";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 3098:    switch (val->lifetimeKind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3099:    case ValueFlow::Value::LifetimeKind::Lambda:
    #####: 3100:        result = "lambda";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3101:        break;
    #####: 3102:    case ValueFlow::Value::LifetimeKind::Iterator:
    #####: 3103:        result = "iterator";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3104:        break;
    #####: 3105:    case ValueFlow::Value::LifetimeKind::Object:
        -: 3106:    case ValueFlow::Value::LifetimeKind::Address:
    #####: 3107:        if (astIsPointer(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3108:            result = "pointer";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3109:        else
    #####: 3110:            result = "object";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3111:        break;
        -: 3112:    }
    #####: 3113:    return result;
call    0 never executed
        -: 3114:}
        -: 3115:
function _Z15lifetimeMessagePK5TokenPKN9ValueFlow5ValueERNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISF_EEE called 0 returned 0% blocks executed 0%
    #####: 3116:std::string lifetimeMessage(const Token *tok, const ValueFlow::Value *val, ErrorPath &errorPath)
        -: 3117:{
    #####: 3118:    const Token *tokvalue = val ? val->tokvalue : nullptr;
branch  0 never executed
branch  1 never executed
    #####: 3119:    const Variable *tokvar = tokvalue ? tokvalue->variable() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3120:    const Token *vartok = tokvar ? tokvar->nameToken() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3121:    std::string type = lifetimeType(tok, val);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3122:    std::string msg = type;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3123:    if (vartok) {
branch  0 never executed
branch  1 never executed
    #####: 3124:        errorPath.emplace_back(vartok, "Variable created here.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3125:        const Variable * var = vartok->variable();
call    0 never executed
    #####: 3126:        if (var) {
branch  0 never executed
branch  1 never executed
    #####: 3127:            switch (val->lifetimeKind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3128:            case ValueFlow::Value::LifetimeKind::Object:
        -: 3129:            case ValueFlow::Value::LifetimeKind::Address:
    #####: 3130:                if (type == "pointer")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3131:                    msg += " to local variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3132:                else
    #####: 3133:                    msg += " that points to local variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3134:                break;
    #####: 3135:            case ValueFlow::Value::LifetimeKind::Lambda:
    #####: 3136:                msg += " that captures local variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3137:                break;
    #####: 3138:            case ValueFlow::Value::LifetimeKind::Iterator:
    #####: 3139:                msg += " to local container";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3140:                break;
        -: 3141:            }
    #####: 3142:            msg += " '" + var->name() + "'";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 3143:        }
        -: 3144:    }
    #####: 3145:    return msg;
        -: 3146:}
        -: 3147:
function _Z19getLifetimeObjValuePK5Token called 0 returned 0% blocks executed 0%
    #####: 3148:ValueFlow::Value getLifetimeObjValue(const Token *tok)
        -: 3149:{
    #####: 3150:    ValueFlow::Value result;
call    0 never executed
function _ZZ19getLifetimeObjValuePK5TokenENKUlRKN9ValueFlow5ValueEE_clES5_ called 0 returned 0% blocks executed 0%
    #####: 3151:    auto pred = [](const ValueFlow::Value &v) {
    #####: 3152:        if (!v.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3153:            return false;
    #####: 3154:        if (v.isInconclusive())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3155:            return false;
    #####: 3156:        if (!v.tokvalue->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3157:            return false;
    #####: 3158:        return true;
        -: 3159:    };
    #####: 3160:    auto it = std::find_if(tok->values().begin(), tok->values().end(), pred);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 3161:    if (it == tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3162:        return result;
    #####: 3163:    result = *it;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3164:    // There should only be one lifetime
    #####: 3165:    if (std::find_if(std::next(it), tok->values().end(), pred) != tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####: 3166:        return result;
    #####: 3167:    return result;
        -: 3168:}
        -: 3169:
function _Z17getLifetimeTokensPK5TokenNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEEi called 699 returned 100% blocks executed 25%
      699: 3170:std::vector<LifetimeToken> getLifetimeTokens(const Token* tok, ValueFlow::Value::ErrorPath errorPath, int depth)
        -: 3171:{
      699: 3172:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3173:        return std::vector<LifetimeToken> {};
call    0 never executed
      699: 3174:    const Variable *var = tok->variable();
call    0 returned 100%
      699: 3175:    if (depth < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3176:        return {{tok, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
      699: 3177:    if (var && var->declarationId() == tok->varId()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
      684: 3178:        if (var->isReference() || var->isRValueReference()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        3: 3179:            if (!var->declEndToken())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3180:                return {{tok, true, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        3: 3181:            if (var->isArgument()) {
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        1: 3182:                errorPath.emplace_back(var->declEndToken(), "Passed to reference.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        1: 3183:                return {{tok, true, std::move(errorPath)}};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        2: 3184:            } else if (Token::simpleMatch(var->declEndToken(), "=")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 3185:                errorPath.emplace_back(var->declEndToken(), "Assigned to reference.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        2: 3186:                const Token *vartok = var->declEndToken()->astOperand2();
call    0 returned 100%
call    1 returned 100%
        2: 3187:                if (vartok == tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3188:                    return {{tok, true, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        2: 3189:                if (vartok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 3190:                    return getLifetimeTokens(vartok, std::move(errorPath), depth - 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
        -: 3191:            } else {
    #####: 3192:                return std::vector<LifetimeToken> {};
call    0 never executed
        -: 3193:            }
        -: 3194:        }
       15: 3195:    } else if (Token::Match(tok->previous(), "%name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
        4: 3196:        const Function *f = tok->previous()->function();
call    0 returned 100%
call    1 returned 100%
        4: 3197:        if (f) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3198:            if (!Function::returnsReference(f))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3199:                return {{tok, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####: 3200:            std::vector<LifetimeToken> result;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3201:            std::vector<const Token*> returns = findReturns(f);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3202:            for (const Token* returnTok : returns) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3203:                if (returnTok == tok)
branch  0 never executed
branch  1 never executed
    #####: 3204:                    continue;
    #####: 3205:                for (LifetimeToken& lt : getLifetimeTokens(returnTok, std::move(errorPath), depth - 1)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 3206:                    const Token* argvarTok = lt.token;
    #####: 3207:                    const Variable* argvar = argvarTok->variable();
call    0 never executed
    #####: 3208:                    if (!argvar)
branch  0 never executed
branch  1 never executed
    #####: 3209:                        continue;
    #####: 3210:                    if (argvar->isArgument() && (argvar->isReference() || argvar->isRValueReference())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3211:                        int n = getArgumentPos(argvar, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3212:                        if (n < 0)
branch  0 never executed
branch  1 never executed
    #####: 3213:                            return std::vector<LifetimeToken> {};
call    0 never executed
    #####: 3214:                        const Token* argTok = getArguments(tok->previous()).at(n);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 3215:                        lt.errorPath.emplace_back(returnTok, "Return reference.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3216:                        lt.errorPath.emplace_back(tok->previous(), "Called function passing '" + argTok->str() + "'.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3217:                        std::vector<LifetimeToken> arglts = LifetimeToken::setInconclusive(
    #####: 3218:                                                                getLifetimeTokens(argTok, std::move(lt.errorPath), depth - 1), returns.size() > 1);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3219:                        result.insert(result.end(), arglts.begin(), arglts.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3220:                    }
        -: 3221:                }
        -: 3222:            }
    #####: 3223:            return result;
call    0 never executed
        4: 3224:        } else if (Token::Match(tok->tokAt(-2), ". %name% (") && astIsContainer(tok->tokAt(-2)->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3225:            const Library::Container* library = getLibraryContainer(tok->tokAt(-2)->astOperand1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3226:            Library::Container::Yield y = library->getYield(tok->previous()->str());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3227:            if (y == Library::Container::Yield::AT_INDEX || y == Library::Container::Yield::ITEM) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3228:                errorPath.emplace_back(tok->previous(), "Accessing container.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 3229:                return LifetimeToken::setAddressOf(
    #####: 3230:                           getLifetimeTokens(tok->tokAt(-2)->astOperand1(), std::move(errorPath), depth - 1), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 3231:            }
        -: 3232:        }
       11: 3233:    } else if (Token::Match(tok, ".|::|[")) {
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
        2: 3234:        const Token *vartok = tok;
        6: 3235:        while (vartok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 3236:            if (vartok->str() == "[" || vartok->originalName() == "->")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
        2: 3237:                vartok = vartok->astOperand1();
call    0 returned 100%
        2: 3238:            else if (vartok->str() == "." || vartok->str() == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3239:                vartok = vartok->astOperand2();
call    0 never executed
        -: 3240:            else
        2: 3241:                break;
        -: 3242:        }
        -: 3243:
        2: 3244:        if (!vartok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3245:            return {{tok, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        2: 3246:        const Variable *tokvar = vartok->variable();
call    0 returned 100%
        6: 3247:        if (!astIsContainer(vartok) && !(tokvar && tokvar->isArray()) &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        4: 3248:            (Token::Match(vartok->astParent(), "[|*") || vartok->astParent()->originalName() == "->")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        2: 3249:            for (const ValueFlow::Value &v : vartok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
call    8 returned 100%
branch  9 taken 100%
branch 10 taken 0%
call   11 returned 100%
branch 12 taken 100%
branch 13 taken 0%
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 3250:                if (!v.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3251:                    continue;
    #####: 3252:                errorPath.insert(errorPath.end(), v.errorPath.begin(), v.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 3253:                return getLifetimeTokens(v.tokvalue, std::move(errorPath));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -: 3254:            }
        -: 3255:        } else {
    #####: 3256:            return LifetimeToken::setAddressOf(getLifetimeTokens(vartok, std::move(errorPath)),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 3257:                                               !(astIsContainer(vartok) && Token::simpleMatch(vartok->astParent(), "[")));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -: 3258:        }
        -: 3259:    }
      696: 3260:    return {{tok, std::move(errorPath)}};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
        -: 3261:}
        -: 3262:
function _ZL16getLifetimeTokenPK5TokenRNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEEPb called 684 returned 100% blocks executed 55%
      684: 3263:static const Token* getLifetimeToken(const Token* tok, ValueFlow::Value::ErrorPath& errorPath, bool* addressOf = nullptr)
        -: 3264:{
     1368: 3265:    std::vector<LifetimeToken> lts = getLifetimeTokens(tok);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
      684: 3266:    if (lts.size() != 1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3267:        return nullptr;
      684: 3268:    if (lts.front().inconclusive)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3269:        return nullptr;
      684: 3270:    if (addressOf)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3271:        *addressOf = lts.front().addressOf;
call    0 never executed
      684: 3272:    errorPath.insert(errorPath.end(), lts.front().errorPath.begin(), lts.front().errorPath.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
      684: 3273:    return lts.front().token;
call    0 returned 100%
        -: 3274:}
        -: 3275:
function _Z19getLifetimeVariablePK5TokenRNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEEPb called 684 returned 100% blocks executed 100%
      684: 3276:const Variable* getLifetimeVariable(const Token* tok, ValueFlow::Value::ErrorPath& errorPath, bool* addressOf)
        -: 3277:{
      684: 3278:    const Token* tok2 = getLifetimeToken(tok, errorPath, addressOf);
call    0 returned 100%
      684: 3279:    if (tok2 && tok2->variable())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
      682: 3280:        return tok2->variable();
call    0 returned 100%
        2: 3281:    return nullptr;
        -: 3282:}
        -: 3283:
function _ZL18isNotLifetimeValueRKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 3284:static bool isNotLifetimeValue(const ValueFlow::Value& val)
        -: 3285:{
    #####: 3286:    return !val.isLifetimeValue();
call    0 never executed
        -: 3287:}
        -: 3288:
function _ZL15isLifetimeOwnedPK9ValueTypeS1_ called 0 returned 0% blocks executed 0%
    #####: 3289:static bool isLifetimeOwned(const ValueType *vt, const ValueType *vtParent)
        -: 3290:{
    #####: 3291:    if (!vtParent)
branch  0 never executed
branch  1 never executed
    #####: 3292:        return false;
    #####: 3293:    if (!vt) {
branch  0 never executed
branch  1 never executed
    #####: 3294:        if (vtParent->type == ValueType::CONTAINER)
branch  0 never executed
branch  1 never executed
    #####: 3295:            return true;
    #####: 3296:        return false;
        -: 3297:    }
    #####: 3298:    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3299:        if (vt->pointer != vtParent->pointer)
branch  0 never executed
branch  1 never executed
    #####: 3300:            return true;
    #####: 3301:        if (vt->type != vtParent->type) {
branch  0 never executed
branch  1 never executed
    #####: 3302:            if (vtParent->type == ValueType::RECORD)
branch  0 never executed
branch  1 never executed
    #####: 3303:                return true;
    #####: 3304:            if (vtParent->type == ValueType::CONTAINER)
branch  0 never executed
branch  1 never executed
    #####: 3305:                return true;
        -: 3306:        }
        -: 3307:    }
        -: 3308:
    #####: 3309:    return false;
        -: 3310:}
        -: 3311:
function _ZL18isLifetimeBorrowedPK9ValueTypeS1_ called 0 returned 0% blocks executed 0%
    #####: 3312:static bool isLifetimeBorrowed(const ValueType *vt, const ValueType *vtParent)
        -: 3313:{
    #####: 3314:    if (!vtParent)
branch  0 never executed
branch  1 never executed
    #####: 3315:        return false;
    #####: 3316:    if (!vt)
branch  0 never executed
branch  1 never executed
    #####: 3317:        return false;
    #####: 3318:    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3319:        if (vtParent->pointer > vt->pointer)
branch  0 never executed
branch  1 never executed
    #####: 3320:            return true;
    #####: 3321:        if (vtParent->pointer < vt->pointer && vtParent->isIntegral())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3322:            return true;
        -: 3323:    }
        -: 3324:
    #####: 3325:    return false;
        -: 3326:}
        -: 3327:
function _Z18isLifetimeBorrowedPK5TokenPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3328:bool isLifetimeBorrowed(const Token *tok, const Settings *settings)
        -: 3329:{
    #####: 3330:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 3331:        return true;
    #####: 3332:    if (Token::simpleMatch(tok, ","))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3333:        return true;
    #####: 3334:    if (!tok->astParent())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3335:        return true;
    #####: 3336:    if (!Token::Match(tok->astParent()->previous(), "%name% (") && !Token::simpleMatch(tok->astParent(), ",")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3337:        if (!Token::simpleMatch(tok, "{")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3338:            const ValueType *vt = tok->valueType();
call    0 never executed
    #####: 3339:            const ValueType *vtParent = tok->astParent()->valueType();
call    0 never executed
call    1 never executed
    #####: 3340:            if (isLifetimeBorrowed(vt, vtParent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3341:                return true;
    #####: 3342:            if (isLifetimeOwned(vt, vtParent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3343:                return false;
        -: 3344:        }
    #####: 3345:        const Type *t = Token::typeOf(tok);
call    0 never executed
    #####: 3346:        const Type *parentT = Token::typeOf(tok->astParent());
call    0 never executed
call    1 never executed
    #####: 3347:        if (t && parentT && t->classDef && parentT->classDef && t->classDef != parentT->classDef) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3348:            return false;
        -: 3349:        }
    #####: 3350:    } else if (Token::Match(tok->astParent()->tokAt(-3), "%var% . push_back|push_front|insert|push (") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3351:               astIsContainer(tok->astParent()->tokAt(-3))) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3352:        const ValueType *vt = tok->valueType();
call    0 never executed
    #####: 3353:        const ValueType *vtCont = tok->astParent()->tokAt(-3)->valueType();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 3354:        if (!vtCont->containerTypeToken)
branch  0 never executed
branch  1 never executed
    #####: 3355:            return true;
    #####: 3356:        ValueType vtParent = ValueType::parseDecl(vtCont->containerTypeToken, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3357:        if (isLifetimeBorrowed(vt, &vtParent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3358:            return true;
    #####: 3359:        if (isLifetimeOwned(vt, &vtParent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3360:            return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3361:    }
        -: 3362:
    #####: 3363:    return true;
        -: 3364:}
        -: 3365:
        -: 3366:static void valueFlowLifetimeFunction(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings);
        -: 3367:
        -: 3368:static void valueFlowLifetimeConstructor(Token *tok,
        -: 3369:        TokenList *tokenlist,
        -: 3370:        ErrorLogger *errorLogger,
        -: 3371:        const Settings *settings);
        -: 3372:
function _ZL24valueFlowForwardLifetimeP5TokenP9TokenListP11ErrorLoggerPK8Settings called 23 returned 100% blocks executed 30%
       23: 3373:static void valueFlowForwardLifetime(Token * tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 3374:{
       23: 3375:    Token *parent = tok->astParent();
call    0 returned 100%
       31: 3376:    while (parent && (parent->isArithmeticalOp() || parent->str() == ","))
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 24% (fallthrough)
branch  8 taken 76%
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
        4: 3377:        parent = parent->astParent();
call    0 returned 100%
       23: 3378:    if (!parent)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
       10: 3379:        return;
        -: 3380:    // Assignment
       13: 3381:    if (parent->str() == "=" && (!parent->astParent() || Token::simpleMatch(parent->astParent(), ";"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 8% (fallthrough)
branch 12 taken 92%
        1: 3382:        const Variable *var = getLHSVariable(parent);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 3383:        if (!var)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 3384:            return;
        -: 3385:
    #####: 3386:        const Token * endOfVarScope = nullptr;
    #####: 3387:        if (!var->isLocal())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3388:            endOfVarScope = tok->scope()->bodyEnd;
call    0 never executed
        -: 3389:        else
    #####: 3390:            endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 never executed
call    1 never executed
        -: 3391:
        -: 3392:        // Rhs values..
    #####: 3393:        if (!parent->astOperand2() || parent->astOperand2()->values().empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3394:            return;
        -: 3395:
    #####: 3396:        if (!isLifetimeBorrowed(parent->astOperand2(), settings))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3397:            return;
        -: 3398:
    #####: 3399:        std::list<ValueFlow::Value> values = parent->astOperand2()->values();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 3400:
        -: 3401:        // Static variable initialisation?
    #####: 3402:        if (var->isStatic() && var->nameToken() == parent->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3403:            lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3404:
        -: 3405:        // Skip RHS
    #####: 3406:        const Token *nextExpression = nextAfterAstRightmostLeaf(parent);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3407:
        -: 3408:        // Only forward lifetime values
    #####: 3409:        values.remove_if(&isNotLifetimeValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3410:        valueFlowForward(const_cast<Token *>(nextExpression),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 3411:                         endOfVarScope,
        -: 3412:                         var,
        -: 3413:                         var->declarationId(),
        -: 3414:                         values,
        -: 3415:                         false,
        -: 3416:                         false,
        -: 3417:                         tokenlist,
        -: 3418:                         errorLogger,
        -: 3419:                         settings);
        -: 3420:
    #####: 3421:        if (tok->astTop() && Token::simpleMatch(tok->astTop()->previous(), "for (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 3422:            Token::simpleMatch(tok->astTop()->link(), ") {")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3423:            Token *start = tok->astTop()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3424:            valueFlowForward(start,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 3425:                             start->link(),
call    0 never executed
        -: 3426:                             var,
        -: 3427:                             var->declarationId(),
        -: 3428:                             values,
        -: 3429:                             false,
        -: 3430:                             false,
        -: 3431:                             tokenlist,
        -: 3432:                             errorLogger,
        -: 3433:                             settings);
        -: 3434:        }
        -: 3435:        // Constructor
       12: 3436:    } else if (Token::simpleMatch(parent, "{") && !isScopeBracket(parent)) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 25% (fallthrough)
branch  7 taken 75%
        3: 3437:        valueFlowLifetimeConstructor(parent, tokenlist, errorLogger, settings);
call    0 returned 100%
        3: 3438:        valueFlowForwardLifetime(parent, tokenlist, errorLogger, settings);
call    0 returned 100%
        -: 3439:        // Function call
        9: 3440:    } else if (Token::Match(parent->previous(), "%name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 78% (fallthrough)
branch  3 taken 22%
        7: 3441:        valueFlowLifetimeFunction(parent->previous(), tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
        7: 3442:        valueFlowForwardLifetime(parent, tokenlist, errorLogger, settings);
call    0 returned 100%
        -: 3443:        // Variable
        2: 3444:    } else if (tok->variable()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3445:        const Variable *var = tok->variable();
call    0 never executed
    #####: 3446:        if (!var->typeStartToken() && !var->typeStartToken()->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3447:            return;
    #####: 3448:        const Token *endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 never executed
call    1 never executed
        -: 3449:
    #####: 3450:        std::list<ValueFlow::Value> values = tok->values();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 3451:        const Token *nextExpression = nextAfterAstRightmostLeaf(parent);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3452:        // Only forward lifetime values
    #####: 3453:        values.remove_if(&isNotLifetimeValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3454:        valueFlowForward(const_cast<Token *>(nextExpression),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 3455:                         endOfVarScope,
        -: 3456:                         var,
        -: 3457:                         var->declarationId(),
        -: 3458:                         values,
        -: 3459:                         false,
        -: 3460:                         false,
        -: 3461:                         tokenlist,
        -: 3462:                         errorLogger,
        -: 3463:                         settings);
        -: 3464:    }
        -: 3465:}
        -: 3466:
function _ZN13LifetimeStoreaSEOS_ called 0 returned 0% blocks executed 0%
function _ZN13LifetimeStoreD2Ev called 0 returned 0% blocks executed 0%
    #####: 3467:struct LifetimeStore {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 3468:    const Token *argtok;
        -: 3469:    std::string message;
        -: 3470:    ValueFlow::Value::LifetimeKind type;
        -: 3471:    ErrorPath errorPath;
        -: 3472:    bool inconclusive;
        -: 3473:
function _ZN13LifetimeStoreC2Ev called 0 returned 0% blocks executed 0%
    #####: 3474:    LifetimeStore()
    #####: 3475:        : argtok(nullptr), message(), type(), errorPath(), inconclusive(false)
call    0 never executed
call    1 never executed
    #####: 3476:    {}
        -: 3477:
function _ZN13LifetimeStoreC2EPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN9ValueFlow5Value12LifetimeKindEb called 0 returned 0% blocks executed 0%
    #####: 3478:    LifetimeStore(const Token *argtok,
        -: 3479:                  const std::string &message,
        -: 3480:                  ValueFlow::Value::LifetimeKind type = ValueFlow::Value::LifetimeKind::Object,
        -: 3481:                  bool inconclusive = false)
    #####: 3482:        : argtok(argtok), message(message), type(type), errorPath(), inconclusive(inconclusive)
call    0 never executed
call    1 never executed
    #####: 3483:    {}
        -: 3484:
function _ZN13LifetimeStore15fromFunctionArgEPK8FunctionP5TokenPK8VariableP9TokenListP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####: 3485:    static LifetimeStore fromFunctionArg(const Function * f, Token *tok, const Variable *var, TokenList *tokenlist, ErrorLogger *errorLogger) {
    #####: 3486:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 3487:            return LifetimeStore{};
call    0 never executed
    #####: 3488:        if (!var->isArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3489:            return LifetimeStore{};
call    0 never executed
    #####: 3490:        int n = getArgumentPos(var, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3491:        if (n < 0)
branch  0 never executed
branch  1 never executed
    #####: 3492:            return LifetimeStore{};
call    0 never executed
    #####: 3493:        std::vector<const Token *> args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3494:        if (n >= args.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3495:            if (tokenlist->getSettings()->debugwarnings)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3496:                bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
        -: 3497:                        errorLogger,
        -: 3498:                        tok,
        -: 3499:                        "Argument mismatch: Function '" + tok->str() + "' returning lifetime from argument index " +
        -: 3500:                        std::to_string(n) + " but only " + std::to_string(args.size()) +
        -: 3501:                        " arguments are available.");
    #####: 3502:            return LifetimeStore{};
call    0 never executed
        -: 3503:        }
    #####: 3504:        const Token *argtok2 = args[n];
call    0 never executed
    #####: 3505:        return LifetimeStore{argtok2, "Passed to '" + tok->str() + "'.", ValueFlow::Value::LifetimeKind::Object};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 3506:    }
        -: 3507:
        -: 3508:    template <class Predicate>
function _ZNK13LifetimeStore5byRefIZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsEUlPK5TokenE_EEvPSA_S2_S6_S9_T_ called 0 returned 0% blocks executed 0%
function _ZNK13LifetimeStore5byRefIZNKS_5byRefEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
    #####: 3509:    void byRef(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings, Predicate pred) const {
    #####: 3510:        if (!settings->inconclusive && inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3511:            return;
    #####: 3512:        if (!argtok)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3513:            return;
    #####: 3514:        for (const LifetimeToken& lt : getLifetimeTokens(argtok)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
    #####: 3515:            if (!settings->inconclusive && lt.inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3516:                continue;
    #####: 3517:            ErrorPath er = errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 3518:            er.insert(er.end(), lt.errorPath.begin(), lt.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
    #####: 3519:            if (!lt.token)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3520:                return;
    #####: 3521:            if (!pred(lt.token))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3522:                return;
    #####: 3523:            er.emplace_back(argtok, message);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3524:
    #####: 3525:            ValueFlow::Value value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 3526:            value.valueType = ValueFlow::Value::LIFETIME;
    #####: 3527:            value.lifetimeScope = ValueFlow::Value::LifetimeScope::Local;
    #####: 3528:            value.tokvalue = lt.token;
    #####: 3529:            value.errorPath = std::move(er);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3530:            value.lifetimeKind = type;
    #####: 3531:            value.setInconclusive(lt.inconclusive || inconclusive);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -: 3532:            // Don't add the value a second time
    #####: 3533:            if (std::find(tok->values().begin(), tok->values().end(), value) != tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
    #####: 3534:                return;
    #####: 3535:            setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3536:            valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 3537:        }
        -: 3538:    }
        -: 3539:
function _ZNK13LifetimeStore5byRefEP5TokenP9TokenListP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3540:    void byRef(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings) const {
function _ZZNK13LifetimeStore5byRefEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENUlPKS0_E_4_FUNESA_ called 0 returned 0% blocks executed 0%
function _ZZNK13LifetimeStore5byRefEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENKUlPKS0_E_clESA_ called 0 returned 0% blocks executed 0%
    #####: 3541:        byRef(tok, tokenlist, errorLogger, settings, [](const Token *) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3542:            return true;
    #####: 3543:        });
call    0 never executed
    #####: 3544:    }
        -: 3545:
        -: 3546:    template <class Predicate>
function _ZNK13LifetimeStore5byValIZNKS_11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
function _ZNK13LifetimeStore5byValIZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsEUlPK5TokenE_EEvPSA_S2_S6_S9_T_ called 0 returned 0% blocks executed 0%
function _ZNK13LifetimeStore5byValIZNKS_5byValEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
    #####: 3547:    void byVal(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings, Predicate pred) const {
    #####: 3548:        if (!settings->inconclusive && inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3549:            return;
    #####: 3550:        if (!argtok)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3551:            return;
    #####: 3552:        if (argtok->values().empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3553:            ErrorPath er;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 3554:            er.emplace_back(argtok, message);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3555:            const Variable *var = getLifetimeVariable(argtok, er);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3556:            if (var && var->isArgument()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####: 3557:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
    #####: 3558:                value.valueType = ValueFlow::Value::LIFETIME;
    #####: 3559:                value.lifetimeScope = ValueFlow::Value::LifetimeScope::Argument;
    #####: 3560:                value.tokvalue = var->nameToken();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3561:                value.errorPath = er;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3562:                value.lifetimeKind = type;
    #####: 3563:                value.setInconclusive(inconclusive);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3564:                // Don't add the value a second time
    #####: 3565:                if (std::find(tok->values().begin(), tok->values().end(), value) != tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
    #####: 3566:                    return;
    #####: 3567:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3568:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 3569:            }
        -: 3570:        }
    #####: 3571:        for (const ValueFlow::Value &v : argtok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
call   47 never executed
    #####: 3572:            if (!v.isLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3573:                continue;
    #####: 3574:            const Token *tok3 = v.tokvalue;
    #####: 3575:            for (const LifetimeToken& lt : getLifetimeTokens(tok3)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
branch 69 never executed
branch 70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
    #####: 3576:                if (!settings->inconclusive && lt.inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3577:                    continue;
    #####: 3578:                ErrorPath er = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 3579:                er.insert(er.end(), lt.errorPath.begin(), lt.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
    #####: 3580:                if (!lt.token)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3581:                    return;
    #####: 3582:                if (!pred(lt.token))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3583:                    return;
    #####: 3584:                er.emplace_back(argtok, message);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3585:                er.insert(er.end(), errorPath.begin(), errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
        -: 3586:
    #####: 3587:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
    #####: 3588:                value.valueType = ValueFlow::Value::LIFETIME;
    #####: 3589:                value.lifetimeScope = v.lifetimeScope;
    #####: 3590:                value.tokvalue = lt.token;
    #####: 3591:                value.errorPath = std::move(er);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3592:                value.lifetimeKind = type;
    #####: 3593:                value.setInconclusive(lt.inconclusive || v.isInconclusive() || inconclusive);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
        -: 3594:                // Don't add the value a second time
    #####: 3595:                if (std::find(tok->values().begin(), tok->values().end(), value) != tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
    #####: 3596:                    continue;
    #####: 3597:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3598:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 3599:            }
        -: 3600:        }
        -: 3601:    }
        -: 3602:
function _ZNK13LifetimeStore5byValEP5TokenP9TokenListP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3603:    void byVal(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings) const {
function _ZZNK13LifetimeStore5byValEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENUlPKS0_E_4_FUNESA_ called 0 returned 0% blocks executed 0%
function _ZZNK13LifetimeStore5byValEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENKUlPKS0_E_clESA_ called 0 returned 0% blocks executed 0%
    #####: 3604:        byVal(tok, tokenlist, errorLogger, settings, [](const Token *) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3605:            return true;
    #####: 3606:        });
call    0 never executed
    #####: 3607:    }
        -: 3608:
        -: 3609:    template <class Predicate>
function _ZNK13LifetimeStore11byDerefCopyIZNKS_11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
    #####: 3610:    void byDerefCopy(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings, Predicate pred) const {
    #####: 3611:        if (!settings->inconclusive && inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3612:            return;
    #####: 3613:        if (!argtok)
branch  0 never executed
branch  1 never executed
    #####: 3614:            return;
    #####: 3615:        for (const ValueFlow::Value &v : argtok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3616:            if (!v.isLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3617:                continue;
    #####: 3618:            const Token *tok2 = v.tokvalue;
    #####: 3619:            ErrorPath er = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3620:            const Variable *var = getLifetimeVariable(tok2, er);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3621:            er.insert(er.end(), errorPath.begin(), errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 3622:            if (!var)
branch  0 never executed
branch  1 never executed
    #####: 3623:                continue;
    #####: 3624:            for (const Token *tok3 = tok; tok3 && tok3 != var->declEndToken(); tok3 = tok3->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3625:                if (tok3->varId() == var->declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3626:                    LifetimeStore{tok3, message, type, inconclusive} .byVal(tok, tokenlist, errorLogger, settings, pred);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 3627:                    break;
        -: 3628:                }
        -: 3629:            }
        -: 3630:        }
        -: 3631:    }
        -: 3632:
function _ZNK13LifetimeStore11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3633:    void byDerefCopy(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings) const {
function _ZZNK13LifetimeStore11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENUlPKS0_E_4_FUNESA_ called 0 returned 0% blocks executed 0%
function _ZZNK13LifetimeStore11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENKUlPKS0_E_clESA_ called 0 returned 0% blocks executed 0%
    #####: 3634:        byDerefCopy(tok, tokenlist, errorLogger, settings, [](const Token *) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3635:            return true;
    #####: 3636:        });
call    0 never executed
    #####: 3637:    }
        -: 3638:};
        -: 3639:
function _ZL25valueFlowLifetimeFunctionP5TokenP9TokenListP11ErrorLoggerPK8Settings called 4438 returned 100% blocks executed 16%
     4438: 3640:static void valueFlowLifetimeFunction(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 3641:{
     4438: 3642:    if (!Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3643:        return;
     4438: 3644:    if (Token::Match(tok->tokAt(-2), "std :: ref|cref|tie|front_inserter|back_inserter")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3645:        for (const Token *argtok : getArguments(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 3646:            LifetimeStore{argtok, "Passed to '" + tok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byRef(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3647:                tok->next(), tokenlist, errorLogger, settings);
        -: 3648:        }
     4438: 3649:    } else if (Token::Match(tok->tokAt(-2), "std :: make_tuple|tuple_cat|make_pair|make_reverse_iterator|next|prev|move")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3650:        for (const Token *argtok : getArguments(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 3651:            LifetimeStore{argtok, "Passed to '" + tok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byVal(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3652:                tok->next(), tokenlist, errorLogger, settings);
        -: 3653:        }
     4439: 3654:    } else if (Token::Match(tok->tokAt(-2), "%var% . push_back|push_front|insert|push|assign") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        1: 3655:               astIsContainer(tok->tokAt(-2))) {
call    0 returned 100%
call    1 returned 100%
    #####: 3656:        Token *vartok = tok->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3657:        std::vector<const Token *> args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3658:        std::size_t n = args.size();
call    0 never executed
    #####: 3659:        if (n > 1 && Token::typeStr(args[n - 2]) == Token::typeStr(args[n - 1]) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 3660:            (((astIsIterator(args[n - 2]) && astIsIterator(args[n - 1])) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3661:              (astIsPointer(args[n - 2]) && astIsPointer(args[n - 1]))))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3662:            LifetimeStore{args.back(), "Added to container '" + vartok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byDerefCopy(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3663:                vartok, tokenlist, errorLogger, settings);
    #####: 3664:        } else if (!args.empty() && isLifetimeBorrowed(args.back(), settings)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3665:            LifetimeStore{args.back(), "Added to container '" + vartok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byVal(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3666:                vartok, tokenlist, errorLogger, settings);
        -: 3667:        }
     4438: 3668:    } else if (tok->function()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       17: 3669:        const Function *f = tok->function();
call    0 returned 100%
       17: 3670:        if (Function::returnsReference(f))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3671:            return;
       34: 3672:        std::vector<const Token*> returns = findReturns(f);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       17: 3673:        const bool inconclusive = returns.size() > 1;
call    0 returned 100%
       20: 3674:        for (const Token* returnTok : returns) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 15% (fallthrough)
branch  4 taken 85%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        3: 3675:            if (returnTok == tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3676:                continue;
        3: 3677:            const Variable *returnVar = returnTok->variable();
call    0 returned 100%
        3: 3678:            if (returnVar && returnVar->isArgument() && (returnVar->isConst() || !isVariableChanged(returnVar, settings, tokenlist->isCPP()))) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 3679:                LifetimeStore ls = LifetimeStore::fromFunctionArg(f, tok, returnVar, tokenlist, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3680:                ls.inconclusive = inconclusive;
    #####: 3681:                ls.byVal(tok->next(), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3682:            }
        3: 3683:            for (const ValueFlow::Value &v : returnTok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
    #####: 3684:                if (!v.isLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3685:                    continue;
    #####: 3686:                if (!v.tokvalue)
branch  0 never executed
branch  1 never executed
    #####: 3687:                    continue;
    #####: 3688:                const Variable *var = v.tokvalue->variable();
call    0 never executed
    #####: 3689:                LifetimeStore ls = LifetimeStore::fromFunctionArg(f, tok, var, tokenlist, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3690:                if (!ls.argtok)
branch  0 never executed
branch  1 never executed
    #####: 3691:                    continue;
    #####: 3692:                ls.inconclusive = inconclusive;
    #####: 3693:                ls.errorPath = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3694:                ls.errorPath.emplace_front(returnTok, "Return " + lifetimeType(returnTok, &v) + ".");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 3695:                if (var->isReference() || var->isRValueReference()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3696:                    ls.byRef(tok->next(), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3697:                } else if (v.isArgumentLifetimeValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3698:                    ls.byVal(tok->next(), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3699:                }
        -: 3700:            }
        -: 3701:        }
        -: 3702:    }
        -: 3703:}
        -: 3704:
function _ZL28valueFlowLifetimeConstructorP5TokenPK4TypeP9TokenListP11ErrorLoggerPK8Settings called 4 returned 100% blocks executed 36%
        4: 3705:static void valueFlowLifetimeConstructor(Token* tok,
        -: 3706:        const Type* t,
        -: 3707:        TokenList* tokenlist,
        -: 3708:        ErrorLogger* errorLogger,
        -: 3709:        const Settings* settings)
        -: 3710:{
        4: 3711:    if (!t)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3712:        return;
        4: 3713:    if (!Token::Match(tok, "(|{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3714:        return;
        4: 3715:    const Scope* scope = t->classScope;
        4: 3716:    if (!scope)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 3717:        return;
        -: 3718:    // Only support aggregate constructors for now
        2: 3719:    if (scope->numConstructors == 0 && t->derivedFrom.empty() && (t->isClassType() || t->isStructType())) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 50% (fallthrough)
branch 12 taken 50%
        2: 3720:        std::vector<const Token*> args = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        1: 3721:        std::size_t i = 0;
        1: 3722:        for (const Variable& var : scope->varlist) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    #####: 3723:            if (i >= args.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3724:                break;
    #####: 3725:            const Token* argtok = args[i];
call    0 never executed
        -: 3726:            LifetimeStore ls{
    #####: 3727:                argtok, "Passed to constructor of '" + t->name() + "'.", ValueFlow::Value::LifetimeKind::Object};
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 3728:            if (var.isReference() || var.isRValueReference()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3729:                ls.byRef(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3730:            } else {
    #####: 3731:                ls.byVal(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3732:            }
    #####: 3733:            i++;
        -: 3734:        }
        -: 3735:    }
        -: 3736:}
function _ZL28valueFlowLifetimeConstructorP5TokenP9TokenListP11ErrorLoggerPK8Settings called 2036 returned 100% blocks executed 32%
     2036: 3737:static void valueFlowLifetimeConstructor(Token* tok, TokenList* tokenlist, ErrorLogger* errorLogger, const Settings* settings)
        -: 3738:{
     2036: 3739:    if (!Token::Match(tok, "(|{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3740:        return;
     2036: 3741:    Token* parent = tok->astParent();
call    0 returned 100%
     2036: 3742:    while (Token::simpleMatch(parent, ","))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3743:        parent = parent->astParent();
call    0 never executed
     2036: 3744:    if (Token::simpleMatch(parent, "{") && (astIsContainer(parent->astParent()) || astIsPointer(parent->astParent()))) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 3745:        valueFlowLifetimeConstructor(tok, Token::typeOf(parent->previous()), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
     2036: 3746:    } else if (Token::simpleMatch(tok, "{") && (astIsContainer(parent) || astIsPointer(parent))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3747:        std::vector<const Token *> args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3748:        for (const Token *argtok : args) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3749:            LifetimeStore ls{argtok, "Passed to initializer list.", ValueFlow::Value::LifetimeKind::Object};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3750:            ls.byVal(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3751:        }
     2036: 3752:    } else if (const Type* t = Token::typeOf(tok->previous())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        4: 3753:        valueFlowLifetimeConstructor(tok, t, tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 never executed
        -: 3754:    }
        -: 3755:}
        -: 3756:
        -: 3757:struct Lambda {
function _ZN6LambdaC2EPK5Token called 35032 returned 100% blocks executed 88%
    35032: 3758:    explicit Lambda(const Token * tok)
    35032: 3759:        : capture(nullptr), arguments(nullptr), returnTok(nullptr), bodyTok(nullptr) {
    35032: 3760:        if (!Token::simpleMatch(tok, "[") || !tok->link())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    34971: 3761:            return;
       61: 3762:        capture = tok;
        -: 3763:
       61: 3764:        if (Token::simpleMatch(capture->link(), "] (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        7: 3765:            arguments = capture->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 3766:        }
       61: 3767:        const Token * afterArguments = arguments ? arguments->link()->next() : capture->link()->next();
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
       61: 3768:        if (afterArguments && afterArguments->originalName() == "->") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3769:            returnTok = afterArguments->next();
call    0 never executed
    #####: 3770:            bodyTok = Token::findsimplematch(returnTok, "{");
call    0 never executed
       61: 3771:        } else if (Token::simpleMatch(afterArguments, "{")) {
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        6: 3772:            bodyTok = afterArguments;
        -: 3773:        }
        -: 3774:    }
        -: 3775:
        -: 3776:    const Token * capture;
        -: 3777:    const Token * arguments;
        -: 3778:    const Token * returnTok;
        -: 3779:    const Token * bodyTok;
        -: 3780:
function _ZNK6Lambda8isLambdaEv called 35032 returned 100% blocks executed 100%
    35032: 3781:    bool isLambda() const {
    35032: 3782:        return capture && bodyTok;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -: 3783:    }
        -: 3784:};
        -: 3785:
function _ZL16isDecayedPointerPK5TokenPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3786:static bool isDecayedPointer(const Token *tok, const Settings *settings)
        -: 3787:{
    #####: 3788:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 3789:        return false;
    #####: 3790:    if (astIsPointer(tok->astParent()) && !Token::simpleMatch(tok->astParent(), "return"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 3791:        return true;
    #####: 3792:    if (Token::Match(tok->astParent(), "%cop%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3793:        return true;
    #####: 3794:    if (!Token::simpleMatch(tok->astParent(), "return"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3795:        return false;
    #####: 3796:    if (!tok->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3797:        return false;
    #####: 3798:    if (!tok->scope()->function)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3799:        return false;
    #####: 3800:    if (!tok->scope()->function->retDef)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3801:        return false;
        -: 3802:    // TODO: Add valuetypes to return types of functions
    #####: 3803:    ValueType vt = ValueType::parseDecl(tok->scope()->function->retDef, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 3804:    if (vt.pointer > 0)
branch  0 never executed
branch  1 never executed
    #####: 3805:        return true;
    #####: 3806:    return false;
        -: 3807:}
        -: 3808:
function _ZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 194 returned 100% blocks executed 38%
      194: 3809:static void valueFlowLifetime(TokenList *tokenlist, SymbolDatabase*, ErrorLogger *errorLogger, const Settings *settings)
        -: 3810:{
    36393: 3811:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 3812:        if (!tok->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     1325: 3813:            continue;
    36199: 3814:        if (tok->scope()->type == Scope::eGlobal)
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
     1167: 3815:            continue;
    35032: 3816:        Lambda lam(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3817:        // Lamdas
    35032: 3818:        if (lam.isLambda()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 3819:            const Scope * bodyScope = lam.bodyTok->scope();
call    0 returned 100%
        -: 3820:
       12: 3821:            std::set<const Scope *> scopes;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 3822:
function _ZZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK5TokenE_clESA_ called 0 returned 0% blocks executed 0%
    #####: 3823:            auto isCapturingVariable = [&](const Token *varTok) {
    #####: 3824:                const Variable *var = varTok->variable();
call    0 never executed
    #####: 3825:                if (!var)
branch  0 never executed
branch  1 never executed
    #####: 3826:                    return false;
    #####: 3827:                const Scope *scope = var->scope();
call    0 never executed
    #####: 3828:                if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 3829:                    return false;
    #####: 3830:                if (scopes.count(scope) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3831:                    return false;
    #####: 3832:                if (scope->isNestedIn(bodyScope))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3833:                    return false;
    #####: 3834:                scopes.insert(scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3835:                return true;
        6: 3836:            };
        -: 3837:
        -: 3838:            // TODO: Handle explicit capture
        6: 3839:            bool captureByRef = Token::Match(lam.capture, "[ & ]");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 3840:            bool captureByValue = Token::Match(lam.capture, "[ = ]");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3841:
       30: 3842:            for (const Token * tok2 = lam.bodyTok; tok2 != lam.bodyTok->link(); tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
call    3 returned 100%
       48: 3843:                ErrorPath errorPath;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       24: 3844:                if (captureByRef) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3845:                    LifetimeStore{tok2, "Lambda captures variable by reference here.", ValueFlow::Value::LifetimeKind::Lambda} .byRef(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3846:                        tok, tokenlist, errorLogger, settings, isCapturingVariable);
       24: 3847:                } else if (captureByValue) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3848:                    LifetimeStore{tok2, "Lambda captures variable by value here.", ValueFlow::Value::LifetimeKind::Lambda} .byVal(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3849:                        tok, tokenlist, errorLogger, settings, isCapturingVariable);
        -: 3850:                }
        -: 3851:            }
        -: 3852:        }
        -: 3853:        // address of
    35026: 3854:        else if (tok->isUnaryOp("&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 never executed
call   12 never executed
       26: 3855:            for (const LifetimeToken& lt : getLifetimeTokens(tok->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 50% (fallthrough)
branch 10 taken 50%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
       13: 3856:                if (!settings->inconclusive && lt.inconclusive)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3857:                    continue;
       26: 3858:                ErrorPath errorPath = lt.errorPath;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       13: 3859:                errorPath.emplace_back(tok, "Address of variable taken here.");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3860:
       26: 3861:                ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       13: 3862:                value.valueType = ValueFlow::Value::ValueType::LIFETIME;
       13: 3863:                value.lifetimeScope = ValueFlow::Value::LifetimeScope::Local;
       13: 3864:                value.tokvalue = lt.token;
       13: 3865:                value.errorPath = std::move(errorPath);
call    0 returned 100%
call    1 returned 100%
       13: 3866:                if (astIsPointer(lt.token) || !Token::Match(lt.token->astParent(), ".|["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 46% (fallthrough)
branch  4 taken 54%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
       13: 3867:                    value.lifetimeKind = ValueFlow::Value::LifetimeKind::Address;
       13: 3868:                value.setInconclusive(lt.inconclusive);
call    0 returned 100%
       13: 3869:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3870:
       13: 3871:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3872:            }
        -: 3873:        }
        -: 3874:        // container lifetimes
    35013: 3875:        else if (astIsContainer(tok)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3876:            Token * parent = astParentSkipParens(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3877:            if (!Token::Match(parent, ". %name% ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3878:                continue;
        -: 3879:
    #####: 3880:            LifetimeStore ls;
call    0 never executed
call    1 never executed
        -: 3881:
    #####: 3882:            if (astIsIterator(parent->tokAt(2)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3883:                ls = LifetimeStore{tok, "Iterator to container is created here.", ValueFlow::Value::LifetimeKind::Iterator};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 3884:            else if (astIsPointer(parent->tokAt(2)) || Token::Match(parent->next(), "data|c_str"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 3885:                ls = LifetimeStore{tok, "Pointer to container is created here.", ValueFlow::Value::LifetimeKind::Object};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 3886:            else
    #####: 3887:                continue;
        -: 3888:
        -: 3889:            // Dereferencing
    #####: 3890:            if (tok->isUnaryOp("*") || parent->originalName() == "->")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 3891:                ls.byDerefCopy(parent->tokAt(2), tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3892:            else
    #####: 3893:                ls.byRef(parent->tokAt(2), tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 3894:
        -: 3895:        }
        -: 3896:        // Check constructors
    35013: 3897:        else if (Token::Match(tok, "=|return|%type%|%var% {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
     2033: 3898:            valueFlowLifetimeConstructor(tok->next(), tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3899:        }
        -: 3900:        // Check function calls
    32980: 3901:        else if (Token::Match(tok, "%name% (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 13% (fallthrough)
branch  4 taken 87%
     4431: 3902:            valueFlowLifetimeFunction(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3903:        }
        -: 3904:        // Check variables
    28549: 3905:        else if (tok->variable()) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
     1210: 3906:            ErrorPath errorPath;
call    0 returned 100%
call    1 never executed
      684: 3907:            const Variable * var = getLifetimeVariable(tok, errorPath);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      684: 3908:            if (!var)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2: 3909:                continue;
      682: 3910:            if (var->nameToken() == tok)
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
      156: 3911:                continue;
      526: 3912:            if (var->isArray() && !var->isStlType() && !var->isArgument() && isDecayedPointer(tok, settings)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 3913:                errorPath.emplace_back(tok, "Array decayed to pointer here.");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3914:
    #####: 3915:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 returned 100%
branch  3 taken 77%
branch  4 taken 23%
call    5 never executed
    #####: 3916:                value.valueType = ValueFlow::Value::ValueType::LIFETIME;
    #####: 3917:                value.lifetimeScope = ValueFlow::Value::LifetimeScope::Local;
    #####: 3918:                value.tokvalue = var->nameToken();
call    0 never executed
    #####: 3919:                value.errorPath = errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3920:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3921:
    #####: 3922:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3923:            }
        -: 3924:        }
        -: 3925:    }
      194: 3926:}
        -: 3927:
function _ZL23isStdMoveOrStdForwardedP5TokenPN9ValueFlow5Value8MoveKindEPS0_ called 2424 returned 100% blocks executed 38%
     2424: 3928:static bool isStdMoveOrStdForwarded(Token * tok, ValueFlow::Value::MoveKind * moveKind, Token ** varTok = nullptr)
        -: 3929:{
     2424: 3930:    if (tok->str() != "std")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
     2394: 3931:        return false;
       30: 3932:    ValueFlow::Value::MoveKind kind = ValueFlow::Value::MoveKind::NonMovedVariable;
       30: 3933:    Token * variableToken = nullptr;
       30: 3934:    if (Token::Match(tok, "std :: move ( %var% )")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3935:        variableToken = tok->tokAt(4);
call    0 never executed
    #####: 3936:        kind = ValueFlow::Value::MoveKind::MovedVariable;
       30: 3937:    } else if (Token::simpleMatch(tok, "std :: forward <")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3938:        const Token * const leftAngle = tok->tokAt(3);
call    0 never executed
    #####: 3939:        Token * rightAngle = leftAngle->link();
call    0 never executed
    #####: 3940:        if (Token::Match(rightAngle, "> ( %var% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3941:            variableToken = rightAngle->tokAt(2);
call    0 never executed
    #####: 3942:            kind = ValueFlow::Value::MoveKind::ForwardedVariable;
        -: 3943:        }
        -: 3944:    }
       30: 3945:    if (!variableToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       30: 3946:        return false;
    #####: 3947:    if (variableToken->strAt(2) == ".") // Only partially moved
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3948:        return false;
        -: 3949:
    #####: 3950:    if (moveKind != nullptr)
branch  0 never executed
branch  1 never executed
    #####: 3951:        *moveKind = kind;
    #####: 3952:    if (varTok != nullptr)
branch  0 never executed
branch  1 never executed
    #####: 3953:        *varTok = variableToken;
    #####: 3954:    return true;
        -: 3955:}
        -: 3956:
function _ZL42isOpenParenthesisMemberFunctionCallOfVarIdPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 3957:static bool isOpenParenthesisMemberFunctionCallOfVarId(const Token * openParenthesisToken, nonneg int varId)
        -: 3958:{
    #####: 3959:    const Token * varTok = openParenthesisToken->tokAt(-3);
call    0 never executed
    #####: 3960:    return Token::Match(varTok, "%varid% . %name% (", varId) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3961:           varTok->next()->originalName() == emptyString;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3962:}
        -: 3963:
function _ZL24findOpenParentesisOfMovePK5Token called 0 returned 0% blocks executed 0%
    #####: 3964:static const Token * findOpenParentesisOfMove(const Token * moveVarTok)
        -: 3965:{
    #####: 3966:    const Token * tok = moveVarTok;
    #####: 3967:    while (tok && tok->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3968:        tok = tok->previous();
call    0 never executed
    #####: 3969:    return tok;
        -: 3970:}
        -: 3971:
function _ZL33findEndOfFunctionCallForParameterPK5Token called 0 returned 0% blocks executed 0%
    #####: 3972:static const Token * findEndOfFunctionCallForParameter(const Token * parameterToken)
        -: 3973:{
    #####: 3974:    if (!parameterToken)
branch  0 never executed
branch  1 never executed
    #####: 3975:        return nullptr;
    #####: 3976:    const Token * parent = parameterToken->astParent();
call    0 never executed
    #####: 3977:    while (parent && !parent->isOp() && parent->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3978:        parent = parent->astParent();
call    0 never executed
    #####: 3979:    if (!parent)
branch  0 never executed
branch  1 never executed
    #####: 3980:        return nullptr;
    #####: 3981:    return nextAfterAstRightmostLeaf(parent);
call    0 never executed
        -: 3982:}
        -: 3983:
function _ZL18valueFlowAfterMoveP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 18%
      224: 3984:static void valueFlowAfterMove(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 3985:{
      224: 3986:    if (!tokenlist->isCPP() || settings->standards.cpp < Standards::CPP11)
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 60% (fallthrough)
branch  6 taken 40%
      134: 3987:        return;
      189: 3988:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       99: 3989:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3990:            continue;
       99: 3991:        const Token * start = scope->bodyStart;
       99: 3992:        if (scope->function) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
       97: 3993:            const Token * memberInitializationTok = scope->function->constructorMemberInitialization();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       97: 3994:            if (memberInitializationTok)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        2: 3995:                start = memberInitializationTok;
        -: 3996:        }
        -: 3997:
     2523: 3998:        for (Token* tok = const_cast<Token*>(start); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
        -: 3999:            Token * varTok;
     2424: 4000:            if (Token::Match(tok, "%var% . reset|clear (") && tok->next()->originalName() == emptyString) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 4001:                varTok = tok;
    #####: 4002:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4003:                value.valueType = ValueFlow::Value::ValueType::MOVED;
    #####: 4004:                value.moveKind = ValueFlow::Value::MoveKind::NonMovedVariable;
    #####: 4005:                value.errorPath.emplace_back(tok, "Calling " + tok->next()->expressionString() + " makes " + tok->str() + " 'non-moved'");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 4006:                value.setKnown();
call    0 never executed
    #####: 4007:                std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4008:                values.push_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4009:
    #####: 4010:                const Variable *var = varTok->variable();
call    0 never executed
    #####: 4011:                if (!var || (!var->isLocal() && !var->isArgument()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4012:                    continue;
    #####: 4013:                const int varId = varTok->varId();
call    0 never executed
    #####: 4014:                const Token * const endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 never executed
call    1 never executed
    #####: 4015:                setTokenValue(varTok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4016:                valueFlowForward(varTok->next(), endOfVarScope, var, varId, values, false, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 4017:                continue;
        -: 4018:            }
        -: 4019:            ValueFlow::Value::MoveKind moveKind;
     2424: 4020:            if (!isStdMoveOrStdForwarded(tok, &moveKind, &varTok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     2424: 4021:                continue;
    #####: 4022:            const int varId = varTok->varId();
call    0 never executed
        -: 4023:            // x is not MOVED after assignment if code is:  x = ... std::move(x) .. ;
    #####: 4024:            const Token *parent = tok->astParent();
call    0 never executed
    #####: 4025:            while (parent && parent->str() != "=" && parent->str() != "return" &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 4026:                   !(parent->str() == "(" && isOpenParenthesisMemberFunctionCallOfVarId(parent, varId)))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4027:                parent = parent->astParent();
call    0 never executed
    #####: 4028:            if (parent &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4029:                (parent->str() == "return" || // MOVED in return statement
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4030:                 parent->str() == "(")) // MOVED in self assignment, isOpenParenthesisMemberFunctionCallOfVarId == true
call    0 never executed
call    1 never executed
    #####: 4031:                continue;
    #####: 4032:            if (parent && parent->astOperand1() && parent->astOperand1()->varId() == varId)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4033:                continue;
    #####: 4034:            const Variable *var = varTok->variable();
call    0 never executed
    #####: 4035:            if (!var)
branch  0 never executed
branch  1 never executed
    #####: 4036:                continue;
    #####: 4037:            const Token * const endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 never executed
call    1 never executed
        -: 4038:
    #####: 4039:            ValueFlow::Value value;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4040:            value.valueType = ValueFlow::Value::ValueType::MOVED;
    #####: 4041:            value.moveKind = moveKind;
    #####: 4042:            if (moveKind == ValueFlow::Value::MoveKind::MovedVariable)
branch  0 never executed
branch  1 never executed
    #####: 4043:                value.errorPath.emplace_back(tok, "Calling std::move(" + varTok->str() + ")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 4044:            else // if (moveKind == ValueFlow::Value::ForwardedVariable)
    #####: 4045:                value.errorPath.emplace_back(tok, "Calling std::forward(" + varTok->str() + ")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 4046:            value.setKnown();
call    0 never executed
    #####: 4047:            std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4048:            values.push_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4049:            const Token * openParentesisOfMove = findOpenParentesisOfMove(varTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4050:            const Token * endOfFunctionCall = findEndOfFunctionCallForParameter(openParentesisOfMove);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4051:            if (endOfFunctionCall)
branch  0 never executed
branch  1 never executed
    #####: 4052:                valueFlowForward(const_cast<Token *>(endOfFunctionCall), endOfVarScope, var, varId, values, false, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 4053:        }
        -: 4054:    }
        -: 4055:}
        -: 4056:
function _ZL22valueFlowForwardAssignP5TokenPK8VariableNSt7__debug4listIN9ValueFlow5ValueESaIS7_EEEbbP9TokenListP11ErrorLoggerPK8Settings called 39 returned 100% blocks executed 60%
       39: 4057:static void valueFlowForwardAssign(Token * const               tok,
        -: 4058:                                   const Variable * const      var,
        -: 4059:                                   std::list<ValueFlow::Value> values,
        -: 4060:                                   const bool                  constValue,
        -: 4061:                                   const bool                  init,
        -: 4062:                                   TokenList * const           tokenlist,
        -: 4063:                                   ErrorLogger * const         errorLogger,
        -: 4064:                                   const Settings * const      settings)
        -: 4065:{
       39: 4066:    const Token * const endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
       39: 4067:    if (std::any_of(values.begin(), values.end(), std::mem_fn(&ValueFlow::Value::isLifetimeValue))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 4068:        valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
    #####: 4069:        values.remove_if(std::mem_fn(&ValueFlow::Value::isLifetimeValue));
call    0 never executed
call    1 never executed
        -: 4070:    }
       39: 4071:    if (!var->isPointer() && !var->isSmartPointer())
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
call    3 returned 100%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
branch  6 taken 10% (fallthrough)
branch  7 taken 90%
        4: 4072:        values.remove_if(std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 returned 100%
call    1 returned 100%
       39: 4073:    if (tok->astParent()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
       64: 4074:        for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 42% (fallthrough)
branch  5 taken 58%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
       54: 4075:            const std::string info = "Assignment '" + tok->astParent()->expressionString() + "', assigned value is " + it->infoString();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
       27: 4076:            it->errorPath.emplace_back(tok, info);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4077:        }
        -: 4078:    }
        -: 4079:
       39: 4080:    if (tokenlist->isCPP() && Token::Match(var->typeStartToken(), "bool|_Bool")) {
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 17% (fallthrough)
branch  6 taken 83%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
        8: 4081:        std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 returned 100%
        8: 4082:        for (it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
        4: 4083:            if (it->isIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 4084:                it->intvalue = (it->intvalue != 0);
call    0 returned 100%
call    1 returned 100%
        4: 4085:            if (it->isTokValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4086:                it ->intvalue = (it->tokvalue != nullptr);
call    0 never executed
call    1 never executed
        -: 4087:        }
        -: 4088:    }
        -: 4089:
        -: 4090:    // Static variable initialisation?
       39: 4091:    if (var->isStatic() && init)
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4092:        lowerToPossible(values);
call    0 never executed
        -: 4093:
        -: 4094:    // Skip RHS
       39: 4095:    const Token * nextExpression = tok->astParent() ? nextAfterAstRightmostLeaf(tok->astParent()) : tok->next();
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -: 4096:
       39: 4097:    if (std::any_of(values.begin(), values.end(), std::mem_fn(&ValueFlow::Value::isTokValue))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 4098:        std::list<ValueFlow::Value> tokvalues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4099:        std::copy_if(values.begin(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 4100:                     values.end(),
call    0 never executed
call    1 never executed
call    2 never executed
        -: 4101:                     std::back_inserter(tokvalues),
    #####: 4102:                     std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4103:        valueFlowForward(const_cast<Token *>(nextExpression),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 4104:                         endOfVarScope,
        -: 4105:                         var,
        -: 4106:                         var->declarationId(),
        -: 4107:                         tokvalues,
        -: 4108:                         constValue,
        -: 4109:                         false,
        -: 4110:                         tokenlist,
        -: 4111:                         errorLogger,
        -: 4112:                         settings);
    #####: 4113:        values.remove_if(std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4114:    }
       68: 4115:    for (ValueFlow::Value& value:values)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 43% (fallthrough)
branch  4 taken 57%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
       29: 4116:        value.tokvalue = tok;
       39: 4117:    valueFlowForward(const_cast<Token *>(nextExpression), endOfVarScope, var, var->declarationId(), values, constValue, false, tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
       39: 4118:}
        -: 4119:
function _ZL14truncateValuesNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEPK9ValueTypePK8Settings called 27 returned 100% blocks executed 75%
       27: 4120:static std::list<ValueFlow::Value> truncateValues(std::list<ValueFlow::Value> values, const ValueType *valueType, const Settings *settings)
        -: 4121:{
       27: 4122:    if (!valueType || !valueType->isIntegral())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4123:        return values;
call    0 never executed
        -: 4124:
       27: 4125:    const size_t sz = getSizeOf(*valueType, settings);
call    0 returned 100%
        -: 4126:
       54: 4127:    for (ValueFlow::Value &value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
       27: 4128:        if (value.isFloatValue()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4129:            value.intvalue = value.floatValue;
    #####: 4130:            value.valueType = ValueFlow::Value::INT;
        -: 4131:        }
        -: 4132:
       27: 4133:        if (value.isIntValue() && sz > 0 && sz < 8) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 85% (fallthrough)
branch  4 taken 15%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 4134:            const MathLib::biguint unsignedMaxValue = (1ULL << (sz * 8)) - 1ULL;
    #####: 4135:            const MathLib::biguint signBit = 1ULL << (sz * 8 - 1);
    #####: 4136:            value.intvalue &= unsignedMaxValue;
    #####: 4137:            if (valueType->sign == ValueType::Sign::SIGNED && (value.intvalue & signBit))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4138:                value.intvalue |= ~unsignedMaxValue;
        -: 4139:        }
        -: 4140:    }
       27: 4141:    return values;
call    0 returned 100%
        -: 4142:}
        -: 4143:
function _ZL15isLiteralNumberPK5Tokenb called 27 returned 100% blocks executed 92%
       27: 4144:static bool isLiteralNumber(const Token *tok, bool cpp)
        -: 4145:{
       27: 4146:    return tok->isNumber() || tok->str() == "NULL" || (cpp && Token::Match(tok, "false|true|nullptr"));
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        -: 4147:}
        -: 4148:
function _ZL20valueFlowAfterAssignP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 80%
      224: 4149:static void valueFlowAfterAssign(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 4150:{
      457: 4151:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      466: 4152:        std::set<int> aliased;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    35893: 4153:        for (Token* tok = const_cast<Token*>(scope->bodyStart); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
        -: 4154:            // Alias
    35673: 4155:            if (tok->isUnaryOp("&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 never executed
call   12 never executed
       13: 4156:                aliased.insert(tok->astOperand1()->varId());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
    35646: 4157:                continue;
        -: 4158:            }
        -: 4159:
        -: 4160:            // Assignment
    35647: 4161:            if ((tok->str() != "=") || (tok->astParent()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 11% (fallthrough)
branch  6 taken 89%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
    35434: 4162:                continue;
        -: 4163:
        -: 4164:            // Lhs should be a variable
      213: 4165:            if (!tok->astOperand1() || !tok->astOperand1()->varId() || tok->astOperand1()->hasKnownValue())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 91% (fallthrough)
branch  6 taken 9%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 10% (fallthrough)
branch 14 taken 90%
       22: 4166:                continue;
      191: 4167:            const int varid = tok->astOperand1()->varId();
call    0 returned 100%
call    1 returned 100%
      191: 4168:            if (aliased.find(varid) != aliased.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
    #####: 4169:                continue;
      191: 4170:            const Variable *var = tok->astOperand1()->variable();
call    0 returned 100%
call    1 returned 100%
      191: 4171:            if (!var || (!var->isLocal() && !var->isGlobal() && !var->isArgument()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 20% (fallthrough)
branch 12 taken 80%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
        1: 4172:                continue;
        -: 4173:
        -: 4174:            // Rhs values..
      190: 4175:            if (!tok->astOperand2() || tok->astOperand2()->values().empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 86% (fallthrough)
branch  7 taken 14%
branch  8 taken 86% (fallthrough)
branch  9 taken 14%
      163: 4176:                continue;
        -: 4177:
       54: 4178:            std::list<ValueFlow::Value> values = truncateValues(tok->astOperand2()->values(), tok->astOperand1()->valueType(), settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
       27: 4179:            const bool constValue = isLiteralNumber(tok->astOperand2(), tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       27: 4180:            const bool init = var->nameToken() == tok->astOperand1();
call    0 returned 100%
call    1 returned 100%
       27: 4181:            valueFlowForwardAssign(tok->astOperand2(), var, values, constValue, init, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 4182:        }
        -: 4183:    }
      224: 4184:}
        -: 4185:
function _ZL16isConditionKnownPK5Tokenb called 140 returned 100% blocks executed 100%
      140: 4186:static bool isConditionKnown(const Token* tok, bool then)
        -: 4187:{
      140: 4188:    const char * op = "||";
      140: 4189:    if (then)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       96: 4190:        op = "&&";
      140: 4191:    const Token* parent = tok->astParent();
call    0 returned 100%
      180: 4192:    while (parent && parent->str() == op)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 88%
branch  6 taken 13% (fallthrough)
branch  7 taken 88%
       20: 4193:        parent = parent->astParent();
call    0 returned 100%
      140: 4194:    return (parent && parent->str() == "(");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
        -: 4195:}
        -: 4196:
function _ZL28valueFlowSetConditionToKnownPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEb called 130 returned 100% blocks executed 100%
      130: 4197:static void valueFlowSetConditionToKnown(const Token* tok, std::list<ValueFlow::Value>& values, bool then)
        -: 4198:{
      130: 4199:    if (values.empty())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        2: 4200:        return;
      128: 4201:    if (then && !Token::Match(tok, "==|!|("))
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
branch  3 taken 47% (fallthrough)
branch  4 taken 53%
branch  5 taken 37% (fallthrough)
branch  6 taken 63%
       47: 4202:        return;
       81: 4203:    if (!then && !Token::Match(tok, "!=|%var%|("))
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
call    2 returned 100%
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
branch  5 taken 26% (fallthrough)
branch  6 taken 74%
       21: 4204:        return;
       60: 4205:    if (isConditionKnown(tok, then))
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
       50: 4206:        changePossibleToKnown(values);
call    0 returned 100%
        -: 4207:}
        -: 4208:
function _ZL12isBreakScopePK5Token called 0 returned 0% blocks executed 0%
    #####: 4209:static bool isBreakScope(const Token* const endToken)
        -: 4210:{
    #####: 4211:    if (!Token::simpleMatch(endToken, "}"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4212:        return false;
    #####: 4213:    if (!Token::simpleMatch(endToken->link(), "{"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4214:        return false;
    #####: 4215:    return Token::findmatch(endToken->link(), "break|goto", endToken);
call    0 never executed
call    1 never executed
        -: 4216:}
        -: 4217:
function _ZL12asImpossibleN9ValueFlow5ValueE called 71 returned 100% blocks executed 100%
       71: 4218:static ValueFlow::Value asImpossible(ValueFlow::Value v)
        -: 4219:{
       71: 4220:    v.invertRange();
call    0 returned 100%
       71: 4221:    v.setImpossible();
call    0 returned 100%
       71: 4222:    return v;
call    0 returned 100%
        -: 4223:}
        -: 4224:
function _Z16insertImpossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ called 71 returned 100% blocks executed 62%
       71: 4225:void insertImpossible(std::list<ValueFlow::Value>& values, const std::list<ValueFlow::Value>& input)
        -: 4226:{
       71: 4227:    std::transform(input.begin(), input.end(), std::back_inserter(values), &asImpossible);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
       71: 4228:}
        -: 4229:
function _ZN25ValueFlowConditionHandlerD2Ev called 314 returned 100% blocks executed 100%
function _ZN25ValueFlowConditionHandlerC2Ev called 314 returned 100% blocks executed 100%
      628: 4230:struct ValueFlowConditionHandler {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
function _ZN25ValueFlowConditionHandler9ConditionD2Ev called 38070 returned 100% blocks executed 100%
    38070: 4231:    struct Condition {
call    0 returned 100%
call    1 returned 100%
        -: 4232:        const Token *vartok;
        -: 4233:        std::list<ValueFlow::Value> true_values;
        -: 4234:        std::list<ValueFlow::Value> false_values;
        -: 4235:
function _ZN25ValueFlowConditionHandler9ConditionC2Ev called 38070 returned 100% blocks executed 100%
    38070: 4236:        Condition() : vartok(nullptr), true_values(), false_values() {}
call    0 returned 100%
call    1 returned 100%
        -: 4237:    };
        -: 4238:    std::function<bool(Token *start, const Token *stop, const Variable *var, const std::list<ValueFlow::Value> &values, bool constValue)>
        -: 4239:    forward;
        -: 4240:    std::function<Condition(Token *tok)> parse;
        -: 4241:
function _ZNK25ValueFlowConditionHandler14afterConditionEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 314 returned 100% blocks executed 56%
      314: 4242:    void afterCondition(TokenList *tokenlist,
        -: 4243:                        SymbolDatabase *symboldatabase,
        -: 4244:                        ErrorLogger *errorLogger,
        -: 4245:                        const Settings *settings) const {
      646: 4246:        for (const Scope *scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      664: 4247:            std::set<unsigned> aliased;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    38402: 4248:            for (Token *tok = const_cast<Token *>(scope->bodyStart); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    38070: 4249:                if (Token::Match(tok, "= & %var% ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 4250:                    aliased.insert(tok->tokAt(2)->varId());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -: 4251:
    38126: 4252:                Condition cond = parse(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
    38070: 4253:                if (!cond.vartok)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    37975: 4254:                    continue;
       95: 4255:                if (cond.true_values.empty() || cond.false_values.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4256:                    continue;
       95: 4257:                const int varid = cond.vartok->varId();
call    0 returned 100%
       95: 4258:                if (varid == 0U)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       12: 4259:                    continue;
       83: 4260:                const Variable *var = cond.vartok->variable();
call    0 returned 100%
       83: 4261:                if (!var || !(var->isLocal() || var->isGlobal() || var->isArgument()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 51% (fallthrough)
branch  6 taken 49%
call    7 returned 100%
branch  8 taken 95% (fallthrough)
branch  9 taken 5%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 4262:                    continue;
       83: 4263:                if (aliased.find(varid) != aliased.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
    #####: 4264:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4265:                        bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        -: 4266:                                errorLogger,
        -: 4267:                                cond.vartok,
        -: 4268:                                "variable is aliased so we just skip all valueflow after condition");
    #####: 4269:                    continue;
        -: 4270:                }
        -: 4271:
       83: 4272:                if (Token::Match(tok->astParent(), "%oror%|&&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 29% (fallthrough)
branch  5 taken 71%
       24: 4273:                    Token *parent = tok->astParent();
call    0 returned 100%
       24: 4274:                    const std::string &op(parent->str());
call    0 returned 100%
        -: 4275:
       42: 4276:                    if (parent->astOperand1() == tok && ((op == "&&" && Token::Match(tok, "==|>=|<=|!")) ||
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
call    3 returned 100%
branch  4 taken 78% (fallthrough)
branch  5 taken 22%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 71% (fallthrough)
branch 10 taken 29%
branch 11 taken 29% (fallthrough)
branch 12 taken 71%
branch 13 taken 17% (fallthrough)
branch 14 taken 83%
       18: 4277:                                                         (op == "||" && Token::Match(tok, "%name%|!=")))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12: 4278:                        for (; parent && parent->str() == op; parent = parent->astParent()) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
        8: 4279:                            std::stack<Token *> tokens;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        4: 4280:                            tokens.push(parent->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4: 4281:                            bool assign = false;
       44: 4282:                            while (!tokens.empty()) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
       20: 4283:                                Token *rhstok = tokens.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20: 4284:                                tokens.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20: 4285:                                if (!rhstok)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       12: 4286:                                    continue;
        8: 4287:                                tokens.push(rhstok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        8: 4288:                                tokens.push(rhstok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        8: 4289:                                if (rhstok->varId() == varid)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4290:                                    setTokenValue(rhstok, cond.true_values.front(), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        8: 4291:                                else if (Token::Match(rhstok, "++|--|=") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 4292:                                         Token::Match(rhstok->astOperand1(), "%varid%", varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4293:                                    assign = true;
    #####: 4294:                                    break;
        -: 4295:                                }
        -: 4296:                            }
        4: 4297:                            if (assign)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4298:                                break;
        4: 4299:                            while (parent->astParent() && parent == parent->astParent()->astOperand2())
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
        4: 4300:                                parent = parent->astParent();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
        -: 4301:                        }
        -: 4302:                    }
        -: 4303:                }
        -: 4304:
       83: 4305:                const Token *top = tok->astTop();
call    0 returned 100%
       83: 4306:                if (top && Token::Match(top->previous(), "if|while (") && !top->previous()->isExpandedMacro()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 99% (fallthrough)
branch 15 taken 1%
        -: 4307:                    // does condition reassign variable?
      110: 4308:                    if (tok != top->astOperand2() && Token::Match(top->astOperand2(), "%oror%|&&") &&
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 77% (fallthrough)
branch  8 taken 23%
branch  9 taken 17% (fallthrough)
branch 10 taken 83%
branch 11 taken 5% (fallthrough)
branch 12 taken 95%
       24: 4309:                        isVariableChanged(top, top->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        4: 4310:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4311:                            bailout(tokenlist, errorLogger, tok, "assignment in condition");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
       31: 4312:                        continue;
call    0 returned 100%
branch  1 taken 1%
branch  2 taken 99%
        -: 4313:                    }
        -: 4314:
      133: 4315:                    std::list<ValueFlow::Value> thenValues;
call    0 returned 100%
call    1 never executed
      133: 4316:                    std::list<ValueFlow::Value> elseValues;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 71%
branch  3 taken 29%
call    4 never executed
        -: 4317:
       78: 4318:                    if (!Token::Match(tok, "!=|%var%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 47% (fallthrough)
branch  4 taken 53%
       37: 4319:                        thenValues.insert(thenValues.end(), cond.true_values.begin(), cond.true_values.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
       37: 4320:                        if (isConditionKnown(tok, false))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 84% (fallthrough)
branch  4 taken 16%
       31: 4321:                            insertImpossible(elseValues, cond.false_values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4322:                    }
       78: 4323:                    if (!Token::Match(tok, "==|!") && !Token::Match(tok->previous(), "%name% (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 55% (fallthrough)
branch  4 taken 45%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 55% (fallthrough)
branch 12 taken 45%
       43: 4324:                        elseValues.insert(elseValues.end(), cond.false_values.begin(), cond.false_values.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
       43: 4325:                        if (isConditionKnown(tok, true))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 93% (fallthrough)
branch  4 taken 7%
       40: 4326:                            insertImpossible(thenValues, cond.true_values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4327:                    }
        -: 4328:
        -: 4329:                    // start token of conditional code
       78: 4330:                    Token* startTokens[] = {nullptr, nullptr};
        -: 4331:
        -: 4332:                    // if astParent is "!" we need to invert codeblock
        -: 4333:                    {
       78: 4334:                        const Token *tok2 = tok;
      260: 4335:                        while (tok2->astParent()) {
call    0 returned 100%
branch  1 taken 54% (fallthrough)
branch  2 taken 46%
       91: 4336:                            const Token *parent = tok2->astParent();
call    0 returned 100%
      123: 4337:                            while (parent && parent->str() == "&&")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
       16: 4338:                                parent = parent->astParent();
call    0 returned 100%
       91: 4339:                            if (parent && (parent->str() == "!" || Token::simpleMatch(parent, "== false"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        1: 4340:                                std::swap(thenValues, elseValues);
call    0 returned 100%
        -: 4341:                            }
       91: 4342:                            tok2 = parent;
        -: 4343:                        }
        -: 4344:                    }
        -: 4345:
        -: 4346:                    // determine startToken(s)
       78: 4347:                    if (Token::simpleMatch(top->link(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
       77: 4348:                        startTokens[0] = top->link()->next();
call    0 returned 100%
call    1 returned 100%
       78: 4349:                    if (Token::simpleMatch(top->link()->linkAt(1), "} else {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
        3: 4350:                        startTokens[1] = top->link()->linkAt(1)->tokAt(2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 4351:
       78: 4352:                    int changeBlock = -1;
        -: 4353:
      234: 4354:                    for (int i = 0; i < 2; i++) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      156: 4355:                        const Token *const startToken = startTokens[i];
      156: 4356:                        if (!startToken)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
       76: 4357:                            continue;
       80: 4358:                        std::list<ValueFlow::Value>& values = (i == 0 ? thenValues : elseValues);
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       80: 4359:                        valueFlowSetConditionToKnown(tok, values, i == 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4360:
        -: 4361:                        // TODO: The endToken should not be startTokens[i]->link() in the valueFlowForward call
       80: 4362:                        if (forward(startTokens[i], startTokens[i]->link(), var, values, true))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 18% (fallthrough)
branch  5 taken 83%
       14: 4363:                            changeBlock = i;
       80: 4364:                        changeKnownToPossible(values);
call    0 returned 100%
        -: 4365:                    }
        -: 4366:                    // TODO: Values changed in noreturn blocks should not bail
       92: 4367:                    if (changeBlock >= 0 && !Token::simpleMatch(top->previous(), "while (")) {
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 18% (fallthrough)
branch  9 taken 82%
       14: 4368:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4369:                            bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
        -: 4370:                                    errorLogger,
        -: 4371:                                    startTokens[changeBlock]->link(),
        -: 4372:                                    "valueFlowAfterCondition: " + var->name() + " is changed in conditional block");
       14: 4373:                        continue;
        -: 4374:                    }
        -: 4375:
        -: 4376:                    // After conditional code..
       64: 4377:                    if (Token::simpleMatch(top->link(), ") {")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
       63: 4378:                        Token *after = top->link()->linkAt(1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      117: 4379:                        std::string unknownFunction;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 71%
branch  3 taken 29%
call    4 never executed
       72: 4380:                        if (settings->library.isScopeNoReturn(after, &unknownFunction)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
        9: 4381:                            if (settings->debugwarnings && !unknownFunction.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4382:                                bailout(tokenlist, errorLogger, after, "possible noreturn scope");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        9: 4383:                            continue;
        -: 4384:                        }
        -: 4385:
      108: 4386:                        bool dead_if = isReturnScope(after, settings) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 44% (fallthrough)
branch  4 taken 56%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       48: 4387:                                       (tok->astParent() && Token::simpleMatch(tok->astParent()->previous(), "while (") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 never executed
branch  9 never executed
       54: 4388:                                        !isBreakScope(after));
call    0 never executed
branch  1 never executed
branch  2 never executed
       54: 4389:                        bool dead_else = false;
        -: 4390:
       54: 4391:                        if (Token::simpleMatch(after, "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
        2: 4392:                            after = after->linkAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 4393:                            if (Token::simpleMatch(after->tokAt(-2), ") ; }")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4394:                                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4395:                                    bailout(tokenlist, errorLogger, after, "possible noreturn scope");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 4396:                                continue;
        -: 4397:                            }
        2: 4398:                            dead_else = isReturnScope(after, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4399:                        }
        -: 4400:
       54: 4401:                        if (dead_if && dead_else)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4402:                            continue;
        -: 4403:
      108: 4404:                        std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 86%
branch  4 taken 14%
call    5 never executed
       54: 4405:                        if (dead_if) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
       30: 4406:                            values = elseValues;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24: 4407:                        } else if (dead_else) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        2: 4408:                            values = thenValues;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4409:                        } else {
       22: 4410:                            std::copy_if(thenValues.begin(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       44: 4411:                                         thenValues.end(),
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4412:                                         std::back_inserter(values),
       22: 4413:                                         std::mem_fn(&ValueFlow::Value::isPossible));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       22: 4414:                            std::copy_if(elseValues.begin(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       44: 4415:                                         elseValues.end(),
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4416:                                         std::back_inserter(values),
       22: 4417:                                         std::mem_fn(&ValueFlow::Value::isPossible));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4418:                        }
        -: 4419:
       54: 4420:                        if (!values.empty()) {
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
       49: 4421:                            if ((dead_if || dead_else) && !Token::Match(tok->astParent(), "&&|&")) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 93% (fallthrough)
branch  9 taken 7%
branch 10 taken 51% (fallthrough)
branch 11 taken 49%
       25: 4422:                                valueFlowSetConditionToKnown(tok, values, true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       25: 4423:                                valueFlowSetConditionToKnown(tok, values, false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4424:                            }
        -: 4425:                            // TODO: constValue could be true if there are no assignments in the conditional blocks and
        -: 4426:                            //       perhaps if there are no && and no || in the condition
       49: 4427:                            bool constValue = false;
       49: 4428:                            forward(after, top->scope()->bodyEnd, var, values, constValue);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4429:                        }
        -: 4430:                    }
        -: 4431:                }
        -: 4432:            }
        -: 4433:        }
      314: 4434:    }
        -: 4435:};
        -: 4436:
function _ZL23valueFlowAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 64%
      224: 4437:static void valueFlowAfterCondition(TokenList *tokenlist,
        -: 4438:                                    SymbolDatabase *symboldatabase,
        -: 4439:                                    ErrorLogger *errorLogger,
        -: 4440:                                    const Settings *settings)
        -: 4441:{
      448: 4442:    ValueFlowConditionHandler handler;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      224: 4443:    handler.forward = [&](Token *start,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4444:                          const Token *stop,
        -: 4445:                          const Variable *var,
        -: 4446:                          const std::list<ValueFlow::Value> &values,
function _ZZL23valueFlowAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlP5TokenPKS8_PK8VariableRKNSt7__debug4listIN9ValueFlow5ValueESaISI_EEEbE_clES9_SB_SE_SM_b called 129 returned 100% blocks executed 86%
      129: 4447:    bool constValue) {
      387: 4448:        valueFlowForward(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
      645: 4449:            start->next(), stop, var, var->declarationId(), values, constValue, false, tokenlist, errorLogger, settings);
      258: 4450:        return isVariableChanged(start, stop, var->declarationId(), var->isGlobal(), settings, tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      448: 4451:    };
function _ZZL23valueFlowAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK5TokenE0_clESA_ called 35660 returned 100% blocks executed 87%
    35884: 4452:    handler.parse = [&](const Token *tok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    35660: 4453:        ValueFlowConditionHandler::Condition cond;
call    0 returned 100%
    71320: 4454:        ValueFlow::Value true_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
    71320: 4455:        ValueFlow::Value false_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    35660: 4456:        const Token *vartok = parseCompareInt(tok, true_value, false_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    35660: 4457:        if (vartok) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       57: 4458:            if (vartok->str() == "=" && vartok->astOperand1() && vartok->astOperand2())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 14% (fallthrough)
branch 11 taken 86%
        8: 4459:                vartok = vartok->astOperand1();
call    0 returned 100%
       57: 4460:            if (!vartok->isName())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
        8: 4461:                return cond;
       49: 4462:            cond.true_values.push_back(true_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       49: 4463:            cond.false_values.push_back(false_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       49: 4464:            cond.vartok = vartok;
       49: 4465:            return cond;
        -: 4466:        }
        -: 4467:
    35603: 4468:        if (tok->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       21: 4469:            vartok = tok->astOperand1();
call    0 returned 100%
        -: 4470:
    43657: 4471:        } else if (tok->isName() && (Token::Match(tok->astParent(), "%oror%|&&") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
     8075: 4472:                                     Token::Match(tok->tokAt(-2), "if|while ( %var% [)=]"))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       26: 4473:            vartok = tok;
        -: 4474:        }
        -: 4475:
    35603: 4476:        if (!vartok || !vartok->isName())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
    35557: 4477:            return cond;
       46: 4478:        cond.true_values.emplace_back(tok, 0LL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46: 4479:        cond.false_values.emplace_back(tok, 0LL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46: 4480:        cond.vartok = vartok;
        -: 4481:
       46: 4482:        return cond;
      224: 4483:    };
      224: 4484:    handler.afterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      224: 4485:}
        -: 4486:
function _ZL7executePK5TokenPN12_GLOBAL__N_113ProgramMemoryEPxPb called 194 returned 100% blocks executed 23%
      194: 4487:static void execute(const Token *expr,
        -: 4488:                    ProgramMemory * const programMemory,
        -: 4489:                    MathLib::bigint *result,
        -: 4490:                    bool *error)
        -: 4491:{
      194: 4492:    if (!expr)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 4493:        *error = true;
        -: 4494:
      193: 4495:    else if (expr->hasKnownIntValue()) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
       28: 4496:        *result = expr->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
        -: 4497:    }
        -: 4498:
      165: 4499:    else if (expr->isNumber()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4500:        *result = MathLib::toLongNumber(expr->str());
call    0 never executed
call    1 never executed
    #####: 4501:        if (MathLib::isFloat(expr->str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4502:            *error = true;
        -: 4503:    }
        -: 4504:
      165: 4505:    else if (expr->varId() > 0) {
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
       74: 4506:        if (!programMemory->getIntValue(expr->varId(), result))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
       42: 4507:            *error = true;
        -: 4508:    }
        -: 4509:
       91: 4510:    else if (expr->isComparisonOp()) {
call    0 returned 100%
branch  1 taken 26% (fallthrough)
branch  2 taken 74%
       24: 4511:        MathLib::bigint result1(0), result2(0);
       24: 4512:        execute(expr->astOperand1(), programMemory, &result1, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       24: 4513:        execute(expr->astOperand2(), programMemory, &result2, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       24: 4514:        if (expr->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        4: 4515:            *result = result1 < result2;
       20: 4516:        else if (expr->str() == "<=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4517:            *result = result1 <= result2;
       20: 4518:        else if (expr->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4519:            *result = result1 > result2;
       20: 4520:        else if (expr->str() == ">=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4521:            *result = result1 >= result2;
       20: 4522:        else if (expr->str() == "==")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4523:            *result = result1 == result2;
       20: 4524:        else if (expr->str() == "!=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       20: 4525:            *result = result1 != result2;
        -: 4526:    }
        -: 4527:
       67: 4528:    else if (expr->isAssignmentOp()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        2: 4529:        execute(expr->astOperand2(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 4530:        if (!expr->astOperand1() || !expr->astOperand1()->varId())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        2: 4531:            *error = true;
        2: 4532:        if (*error)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 4533:            return;
        -: 4534:
    #####: 4535:        if (expr->str() == "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4536:            programMemory->setIntValue(expr->astOperand1()->varId(), *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4537:            return;
        -: 4538:        }
        -: 4539:
        -: 4540:        long long intValue;
    #####: 4541:        if (!programMemory->getIntValue(expr->astOperand1()->varId(), &intValue)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4542:            *error = true;
    #####: 4543:            return;
        -: 4544:        }
    #####: 4545:        if (expr->str() == "+=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4546:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue + *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4547:        else if (expr->str() == "-=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4548:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue - *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4549:        else if (expr->str() == "*=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4550:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue * *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4551:        else if (expr->str() == "/=" && *result != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4552:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue / *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4553:        else if (expr->str() == "%=" && *result != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4554:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue % *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4555:        else if (expr->str() == "&=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4556:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue & *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4557:        else if (expr->str() == "|=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4558:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue | *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4559:        else if (expr->str() == "^=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4560:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue ^ *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4561:    }
        -: 4562:
       65: 4563:    else if (Token::Match(expr, "++|--")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4564:        if (!expr->astOperand1() || expr->astOperand1()->varId() == 0U)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4565:            *error = true;
        -: 4566:        else {
        -: 4567:            long long intValue;
    #####: 4568:            if (!programMemory->getIntValue(expr->astOperand1()->varId(), &intValue))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4569:                *error = true;
        -: 4570:            else {
    #####: 4571:                if (intValue == 0 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4572:                    expr->str() == "--" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4573:                    expr->astOperand1()->variable() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4574:                    expr->astOperand1()->variable()->typeStartToken()->isUnsigned())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4575:                    *error = true; // overflow
    #####: 4576:                *result = intValue + (expr->str() == "++" ? 1 : -1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4577:                programMemory->setIntValue(expr->astOperand1()->varId(), *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4578:            }
        -: 4579:        }
        -: 4580:    }
        -: 4581:
       65: 4582:    else if (expr->isArithmeticalOp() && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 4583:        MathLib::bigint result1(0), result2(0);
    #####: 4584:        execute(expr->astOperand1(), programMemory, &result1, error);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4585:        execute(expr->astOperand2(), programMemory, &result2, error);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4586:        if (expr->str() == "+")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4587:            *result = result1 + result2;
    #####: 4588:        else if (expr->str() == "-")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4589:            *result = result1 - result2;
    #####: 4590:        else if (expr->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4591:            if (result2 && (result1 > std::numeric_limits<MathLib::bigint>::max()/result2))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4592:                *error = true;
        -: 4593:            else
    #####: 4594:                *result = result1 * result2;
    #####: 4595:        } else if (result2 == 0)
branch  0 never executed
branch  1 never executed
    #####: 4596:            *error = true;
    #####: 4597:        else if (expr->str() == "/")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4598:            *result = result1 / result2;
    #####: 4599:        else if (expr->str() == "%")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4600:            *result = result1 % result2;
    #####: 4601:        else if (expr->str() == "<<")  {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4602:            if (result2 < 0 || result1 < 0 || result2 >= MathLib::bigint_bits)  { // don't perform UB
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4603:                *error= true;
        -: 4604:            } else {
    #####: 4605:                *result = result1 << result2;
        -: 4606:            }
    #####: 4607:        } else if (expr->str() == ">>") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4608:            if (result2 < 0) { // don't perform UB
branch  0 never executed
branch  1 never executed
    #####: 4609:                *error=true;
        -: 4610:            } else {
    #####: 4611:                *result = result1 >> result2;
        -: 4612:            }
        -: 4613:        }
        -: 4614:    }
        -: 4615:
       65: 4616:    else if (expr->str() == "&&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4617:        bool error1 = false;
    #####: 4618:        execute(expr->astOperand1(), programMemory, result, &error1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4619:        if (!error1 && *result == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4620:            *result = 0;
        -: 4621:        else {
    #####: 4622:            bool error2 = false;
    #####: 4623:            execute(expr->astOperand2(), programMemory, result, &error2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4624:            if (error1 && error2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4625:                *error = true;
    #####: 4626:            if (error2)
branch  0 never executed
branch  1 never executed
    #####: 4627:                *result = 1;
        -: 4628:            else
    #####: 4629:                *result = !!*result;
        -: 4630:        }
        -: 4631:    }
        -: 4632:
       65: 4633:    else if (expr->str() == "||") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4634:        execute(expr->astOperand1(), programMemory, result, error);
call    0 never executed
call    1 never executed
    #####: 4635:        if (*result == 0 && *error == false)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4636:            execute(expr->astOperand2(), programMemory, result, error);
call    0 never executed
call    1 never executed
        -: 4637:    }
        -: 4638:
       65: 4639:    else if (expr->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
       14: 4640:        execute(expr->astOperand1(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
       14: 4641:        *result = !(*result);
        -: 4642:    }
        -: 4643:
       51: 4644:    else if (expr->str() == "," && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 4645:        execute(expr->astOperand1(), programMemory, result, error);
call    0 never executed
call    1 never executed
    #####: 4646:        execute(expr->astOperand2(), programMemory, result, error);
call    0 never executed
call    1 never executed
        -: 4647:    }
        -: 4648:
       51: 4649:    else if (expr->str() == "[" && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 4650:        const Token *tokvalue = nullptr;
    #####: 4651:        if (!programMemory->getTokValue(expr->astOperand1()->varId(), &tokvalue)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4652:            auto tokvalue_it = std::find_if(expr->astOperand1()->values().begin(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 4653:                                            expr->astOperand1()->values().end(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4654:                                            std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 4655:            if (tokvalue_it == expr->astOperand1()->values().end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4656:                *error = true;
    #####: 4657:                return;
        -: 4658:            }
    #####: 4659:            tokvalue = tokvalue_it->tokvalue;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4660:        }
    #####: 4661:        if (!tokvalue || !tokvalue->isLiteral()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4662:            *error = true;
    #####: 4663:            return;
        -: 4664:        }
    #####: 4665:        const std::string strValue = tokvalue->strValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4666:        MathLib::bigint index = 0;
    #####: 4667:        execute(expr->astOperand2(), programMemory, &index, error);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4668:        if (index >= 0 && index < strValue.size())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4669:            *result = strValue[index];
call    0 never executed
    #####: 4670:        else if (index == strValue.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4671:            *result = 0;
        -: 4672:        else
    #####: 4673:            *error = true;
        -: 4674:    }
        -: 4675:
        -: 4676:    else
       51: 4677:        *error = true;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 4678:}
        -: 4679:
function _ZL10isInBoundsRKN9ValueFlow5ValueEx called 2 returned 100% blocks executed 50%
        2: 4680:static bool isInBounds(const ValueFlow::Value& value, MathLib::bigint x)
        -: 4681:{
        2: 4682:    if (value.intvalue == x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4683:        return true;
        2: 4684:    if (value.bound == ValueFlow::Value::Bound::Lower && value.intvalue > x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 4685:        return false;
        2: 4686:    if (value.bound == ValueFlow::Value::Bound::Upper && value.intvalue < x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 4687:        return false;
        -: 4688:    // Checking for equality is not necessary since we already know the value is not equal
        2: 4689:    if (value.bound == ValueFlow::Value::Bound::Point)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 4690:        return false;
    #####: 4691:    return true;
        -: 4692:}
        -: 4693:
function _ZL13proveNotEqualRKNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEx called 83 returned 100% blocks executed 71%
       83: 4694:static const ValueFlow::Value* proveNotEqual(const std::list<ValueFlow::Value>& values, MathLib::bigint x)
        -: 4695:{
       83: 4696:    const ValueFlow::Value* result = nullptr;
       85: 4697:    for (const ValueFlow::Value& value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 28% (fallthrough)
branch  4 taken 72%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 73%
branch  9 taken 27%
call   10 returned 100%
branch 11 taken 73%
branch 12 taken 27%
       24: 4698:        if (value.valueType != ValueFlow::Value::INT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4699:            continue;
       24: 4700:        if (result && !isInBounds(value, result->intvalue))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4701:            continue;
       24: 4702:        if (value.isImpossible()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4703:            if (value.intvalue == x)
branch  0 never executed
branch  1 never executed
    #####: 4704:                return &value;
    #####: 4705:            if (!isInBounds(value, x))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4706:                continue;
    #####: 4707:            result = &value;
        -: 4708:        } else {
       24: 4709:            if (value.intvalue == x)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       22: 4710:                return nullptr;
        2: 4711:            if (!isInBounds(value, x))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 4712:                continue;
    #####: 4713:            result = nullptr;
        -: 4714:        }
        -: 4715:    }
       61: 4716:    return result;
        -: 4717:}
        -: 4718:
function _ZL23valueFlowInferConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 74%
      224: 4719:static void valueFlowInferCondition(TokenList* tokenlist,
        -: 4720:                                    SymbolDatabase* symboldatabase,
        -: 4721:                                    ErrorLogger* errorLogger,
        -: 4722:                                    const Settings* settings)
        -: 4723:{
    37537: 4724:    for (Token* tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    37313: 4725:        if (!tok->astParent())
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
    26209: 4726:            continue;
    11104: 4727:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
     4303: 4728:            continue;
     7701: 4729:        if (Token::Match(tok, "%var%") && (Token::Match(tok->astParent(), "&&|!|%oror%") ||
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
      900: 4730:                                           Token::Match(tok->astParent()->previous(), "if|while ("))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       40: 4731:            const ValueFlow::Value* result = proveNotEqual(tok->values(), 0);
call    0 returned 100%
call    1 returned 100%
       40: 4732:            if (!result)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       40: 4733:                continue;
    #####: 4734:            ValueFlow::Value value = *result;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4735:            value.intvalue = 1;
    #####: 4736:            value.setKnown();
call    0 never executed
    #####: 4737:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
     6761: 4738:        } else if (Token::Match(tok, "==|!=")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       44: 4739:            MathLib::bigint val = 0;
       44: 4740:            const Token* varTok = nullptr;
       44: 4741:            if (tok->astOperand1()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
        2: 4742:                val = tok->astOperand1()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2: 4743:                varTok = tok->astOperand2();
call    0 returned 100%
       42: 4744:            } else if (tok->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
       41: 4745:                val = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       41: 4746:                varTok = tok->astOperand1();
call    0 returned 100%
        -: 4747:            }
       44: 4748:            if (!varTok)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       45: 4749:                continue;
       43: 4750:            if (varTok->hasKnownIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 4751:                continue;
       43: 4752:            const ValueFlow::Value* result = proveNotEqual(varTok->values(), val);
call    0 returned 100%
call    1 returned 100%
       43: 4753:            if (!result)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       43: 4754:                continue;
    #####: 4755:            ValueFlow::Value value = *result;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4756:            value.intvalue = tok->str() == "!=";
call    0 never executed
call    1 never executed
    #####: 4757:            value.setKnown();
call    0 never executed
    #####: 4758:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4759:        }
        -: 4760:    }
      224: 4761:}
        -: 4762:
function _ZL17valueFlowForLoop1PK5TokenPiPxS3_S3_ called 4 returned 100% blocks executed 78%
        4: 4763:static bool valueFlowForLoop1(const Token *tok, int * const varid, MathLib::bigint * const num1, MathLib::bigint * const num2, MathLib::bigint * const numAfter)
        -: 4764:{
        4: 4765:    tok = tok->tokAt(2);
call    0 returned 100%
        4: 4766:    if (!Token::Match(tok, "%type%| %var% ="))
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        3: 4767:        return false;
        1: 4768:    const Token * const vartok = Token::Match(tok, "%var% =") ? tok : tok->next();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
        1: 4769:    *varid = vartok->varId();
call    0 returned 100%
        1: 4770:    tok = vartok->tokAt(2);
call    0 returned 100%
        1: 4771:    const Token * const num1tok = Token::Match(tok, "%num% ;") ? tok : nullptr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 4772:    if (num1tok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4773:        *num1 = MathLib::toLongNumber(num1tok->str());
call    0 returned 100%
call    1 returned 100%
        3: 4774:    while (Token::Match(tok, "%name%|%num%|%or%|+|-|*|/|&|[|]|("))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 4775:        tok = (tok->str() == "(") ? tok->link()->next() : tok->next();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 returned 100%
        1: 4776:    if (!tok || tok->str() != ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4777:        return false;
        1: 4778:    tok = tok->next();
call    0 returned 100%
        1: 4779:    const Token *num2tok = nullptr;
        1: 4780:    if (Token::Match(tok, "%varid% <|<=|!=", vartok->varId())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 4781:        tok = tok->next();
call    0 returned 100%
        1: 4782:        num2tok = tok->astOperand2();
call    0 returned 100%
        1: 4783:        if (num2tok && num2tok->str() == "(" && !num2tok->astOperand2())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 4784:            num2tok = num2tok->astOperand1();
call    0 never executed
        1: 4785:        if (!Token::Match(num2tok, "%num% ;|%oror%")) // TODO: || enlarges the scope of the condition, so it should not cause FP, but it should no lnger be part of this pattern as soon as valueFlowForLoop2 can handle an unknown RHS of || better
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4786:            num2tok = nullptr;
        -: 4787:    }
        1: 4788:    if (!num2tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4789:        return false;
        1: 4790:    *num2 = MathLib::toLongNumber(num2tok->str()) - ((tok->str()=="<=") ? 0 : 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1: 4791:    *numAfter = *num2 + 1;
        1: 4792:    if (!num1tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4793:        *num1 = *num2;
        5: 4794:    while (tok && tok->str() != ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 67% (fallthrough)
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2: 4795:        tok = tok->next();
call    0 returned 100%
        1: 4796:    if (!Token::Match(tok, "; %varid% ++ ) {", vartok->varId()) && !Token::Match(tok, "; ++ %varid% ) {", vartok->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 4797:        return false;
        1: 4798:    return true;
        -: 4799:}
        -: 4800:
function _ZL17valueFlowForLoop2PK5TokenPN12_GLOBAL__N_113ProgramMemoryES4_S4_ called 3 returned 100% blocks executed 32%
        3: 4801:static bool valueFlowForLoop2(const Token *tok,
        -: 4802:                              ProgramMemory *memory1,
        -: 4803:                              ProgramMemory *memory2,
        -: 4804:                              ProgramMemory *memoryAfter)
        -: 4805:{
        -: 4806:    // for ( firstExpression ; secondExpression ; thirdExpression )
        3: 4807:    const Token *firstExpression  = tok->next()->astOperand2()->astOperand1();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 4808:    const Token *secondExpression = tok->next()->astOperand2()->astOperand2()->astOperand1();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        3: 4809:    const Token *thirdExpression = tok->next()->astOperand2()->astOperand2()->astOperand2();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -: 4810:
        6: 4811:    ProgramMemory programMemory;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        3: 4812:    MathLib::bigint result(0);
        3: 4813:    bool error = false;
        3: 4814:    execute(firstExpression, &programMemory, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 4815:    if (error)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3: 4816:        return false;
    #####: 4817:    execute(secondExpression, &programMemory, &result, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4818:    if (result == 0) // 2nd expression is false => no looping
branch  0 never executed
branch  1 never executed
    #####: 4819:        return false;
    #####: 4820:    if (error) {
branch  0 never executed
branch  1 never executed
        -: 4821:        // If a variable is reassigned in second expression, return false
    #####: 4822:        bool reassign = false;
    #####: 4823:        visitAstNodes(secondExpression,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
function _ZZL17valueFlowForLoop2PK5TokenPN12_GLOBAL__N_113ProgramMemoryES4_S4_ENKUlS1_E_clES1_ called 0 returned 0% blocks executed 0%
    #####: 4824:        [&](const Token *t) {
    #####: 4825:            if (t->str() == "=" && t->astOperand1() && programMemory.hasValue(t->astOperand1()->varId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 4826:                // TODO: investigate what variable is assigned.
    #####: 4827:                reassign = true;
    #####: 4828:            return reassign ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 never executed
branch  1 never executed
        -: 4829:        });
    #####: 4830:        if (reassign)
branch  0 never executed
branch  1 never executed
    #####: 4831:            return false;
        -: 4832:    }
        -: 4833:
    #####: 4834:    ProgramMemory startMemory(programMemory);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4835:    ProgramMemory endMemory;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 4836:
    #####: 4837:    int maxcount = 10000;
    #####: 4838:    while (result != 0 && !error && --maxcount > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4839:        endMemory = programMemory;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4840:        execute(thirdExpression, &programMemory, &result, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4841:        if (!error)
branch  0 never executed
branch  1 never executed
    #####: 4842:            execute(secondExpression, &programMemory, &result, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4843:    }
        -: 4844:
    #####: 4845:    memory1->swap(startMemory);
call    0 never executed
    #####: 4846:    if (!error) {
branch  0 never executed
branch  1 never executed
    #####: 4847:        memory2->swap(endMemory);
call    0 never executed
    #####: 4848:        memoryAfter->swap(programMemory);
call    0 never executed
        -: 4849:    }
        -: 4850:
    #####: 4851:    return true;
        -: 4852:}
        -: 4853:
function _ZL24valueFlowForLoopSimplifyP5TokenibxP9TokenListP11ErrorLoggerPK8Settings called 2 returned 100% blocks executed 9%
        2: 4854:static void valueFlowForLoopSimplify(Token * const bodyStart, const nonneg int varid, bool globalvar, const MathLib::bigint value, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 4855:{
        2: 4856:    const Token * const bodyEnd = bodyStart->link();
call    0 returned 100%
        -: 4857:
        -: 4858:    // Is variable modified inside for loop
        2: 4859:    if (isVariableChanged(bodyStart, bodyEnd, varid, globalvar, settings, tokenlist->isCPP()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4860:        return;
        -: 4861:
       28: 4862:    for (Token *tok2 = bodyStart->next(); tok2 != bodyEnd; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
call    3 returned 100%
       26: 4863:        if (tok2->varId() == varid) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4864:            const Token * parent = tok2->astParent();
call    0 never executed
    #####: 4865:            while (parent) {
branch  0 never executed
branch  1 never executed
    #####: 4866:                const Token * const p = parent;
    #####: 4867:                parent = parent->astParent();
call    0 never executed
    #####: 4868:                if (!parent || parent->str() == ":")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4869:                    break;
    #####: 4870:                if (parent->str() == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4871:                    if (parent->astOperand2() != p)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4872:                        parent = nullptr;
    #####: 4873:                    break;
        -: 4874:                }
        -: 4875:            }
    #####: 4876:            if (parent) {
branch  0 never executed
branch  1 never executed
    #####: 4877:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4878:                    bailout(tokenlist, errorLogger, tok2, "For loop variable " + tok2->str() + " stopping on ?");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 4879:                continue;
        -: 4880:            }
        -: 4881:
    #####: 4882:            ValueFlow::Value value1(value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 4883:            value1.varId = tok2->varId();
call    0 never executed
    #####: 4884:            setTokenValue(tok2, value1, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4885:        }
        -: 4886:
       26: 4887:        if (Token::Match(tok2, "%oror%|&&")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4888:            const ProgramMemory programMemory(getProgramMemory(tok2->astTop(), varid, ValueFlow::Value(value)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 4889:            if ((tok2->str() == "&&" && !conditionIsTrue(tok2->astOperand1(), programMemory)) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 4890:                (tok2->str() == "||" && !conditionIsFalse(tok2->astOperand1(), programMemory))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 4891:                // Skip second expression..
    #####: 4892:                const Token *parent = tok2;
    #####: 4893:                while (parent && parent->str() == tok2->str())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4894:                    parent = parent->astParent();
call    0 never executed
        -: 4895:                // Jump to end of condition
    #####: 4896:                if (parent && parent->str() == "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4897:                    tok2 = parent->link();
call    0 never executed
        -: 4898:                    // cast
    #####: 4899:                    if (Token::simpleMatch(tok2, ") ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4900:                        tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4901:                }
        -: 4902:            }
        -: 4903:
        -: 4904:        }
       78: 4905:        if ((tok2->str() == "&&" && conditionIsFalse(tok2->astOperand1(), getProgramMemory(tok2->astTop(), varid, ValueFlow::Value(value)))) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
call   22 never executed
branch 23 taken 0% (fallthrough)
branch 24 taken 100%
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
       52: 4906:            (tok2->str() == "||" && conditionIsTrue(tok2->astOperand1(), getProgramMemory(tok2->astTop(), varid, ValueFlow::Value(value)))))
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####: 4907:            break;
        -: 4908:
       26: 4909:        else if (Token::simpleMatch(tok2, ") {") && Token::findmatch(tok2->link(), "%varid%", tok2, varid)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 4910:            if (Token::findmatch(tok2, "continue|break|return", tok2->linkAt(1), varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4911:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4912:                    bailout(tokenlist, errorLogger, tok2, "For loop variable bailout on conditional continue|break|return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 4913:                break;
        -: 4914:            }
    #####: 4915:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4916:                bailout(tokenlist, errorLogger, tok2, "For loop variable skipping conditional scope");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 4917:            tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
    #####: 4918:            if (Token::simpleMatch(tok2, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4919:                if (Token::findmatch(tok2, "continue|break|return", tok2->linkAt(2), varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4920:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4921:                        bailout(tokenlist, errorLogger, tok2, "For loop variable bailout on conditional continue|break|return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 4922:                    break;
        -: 4923:                }
        -: 4924:
    #####: 4925:                tok2 = tok2->linkAt(2);
call    0 never executed
        -: 4926:            }
        -: 4927:        }
        -: 4928:
       26: 4929:        else if (Token::simpleMatch(tok2, ") {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4930:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4931:                bailout(tokenlist, errorLogger, tok2, "For loop skipping {} code");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 4932:            tok2 = tok2->linkAt(1);
call    0 never executed
    #####: 4933:            if (Token::simpleMatch(tok2, "} else {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4934:                tok2 = tok2->linkAt(2);
call    0 never executed
        -: 4935:        }
        -: 4936:    }
        -: 4937:}
        -: 4938:
function _ZL29valueFlowForLoopSimplifyAfterP5TokenixP9TokenListP11ErrorLoggerPK8Settings called 1 returned 100% blocks executed 66%
        1: 4939:static void valueFlowForLoopSimplifyAfter(Token *fortok, nonneg int varid, const MathLib::bigint num, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 4940:{
        1: 4941:    const Token *vartok = nullptr;
        4: 4942:    for (const Token *tok = fortok; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        4: 4943:        if (tok->varId() == varid) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        1: 4944:            vartok = tok;
        1: 4945:            break;
        -: 4946:        }
        -: 4947:    }
        1: 4948:    if (!vartok || !vartok->variable())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4949:        return;
        -: 4950:
        1: 4951:    const Variable *var = vartok->variable();
call    0 returned 100%
        1: 4952:    const Token *endToken = nullptr;
        1: 4953:    if (var->isLocal())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 4954:        endToken = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
        -: 4955:    else
    #####: 4956:        endToken = fortok->scope()->bodyEnd;
call    0 never executed
        -: 4957:
        2: 4958:    std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        1: 4959:    values.emplace_back(num);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 4960:    values.back().errorPath.emplace_back(fortok,"After for loop, " + var->name() + " has value " + values.back().infoString());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        -: 4961:
        1: 4962:    valueFlowForward(fortok->linkAt(1)->linkAt(1)->next(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
        -: 4963:                     endToken,
        -: 4964:                     var,
        -: 4965:                     varid,
        -: 4966:                     values,
        -: 4967:                     false,
        -: 4968:                     false,
        -: 4969:                     tokenlist,
        -: 4970:                     errorLogger,
        -: 4971:                     settings);
        -: 4972:}
        -: 4973:
function _ZL16valueFlowForLoopP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 36%
      224: 4974:static void valueFlowForLoop(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 4975:{
     6836: 4976:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     6612: 4977:        if (scope.type != Scope::eFor)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    13216: 4978:            continue;
        -: 4979:
        4: 4980:        Token* tok = const_cast<Token*>(scope.classDef);
        4: 4981:        Token* const bodyStart = const_cast<Token*>(scope.bodyStart);
        -: 4982:
        8: 4983:        if (!Token::simpleMatch(tok->next()->astOperand2(), ";") ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        4: 4984:            !Token::simpleMatch(tok->next()->astOperand2()->astOperand2(), ";"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
    #####: 4985:            continue;
        -: 4986:
        4: 4987:        int varid(0);
        4: 4988:        MathLib::bigint num1(0), num2(0), numAfter(0);
        -: 4989:
        4: 4990:        if (valueFlowForLoop1(tok, &varid, &num1, &num2, &numAfter)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        1: 4991:            if (num1 <= num2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4992:                valueFlowForLoopSimplify(bodyStart, varid, false, num1, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 4993:                valueFlowForLoopSimplify(bodyStart, varid, false, num2, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 4994:                valueFlowForLoopSimplifyAfter(tok, varid, numAfter, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4995:            } else
    #####: 4996:                valueFlowForLoopSimplifyAfter(tok, varid, num1, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4997:        } else {
        6: 4998:            ProgramMemory mem1, mem2, memAfter;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 never executed
        3: 4999:            if (valueFlowForLoop2(tok, &mem1, &mem2, &memAfter)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5000:                std::map<int, ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5001:                for (it = mem1.values.begin(); it != mem1.values.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 5002:                    if (!it->second.isIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5003:                        continue;
    #####: 5004:                    valueFlowForLoopSimplify(bodyStart, it->first, false, it->second.intvalue, tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5005:                }
    #####: 5006:                for (it = mem2.values.begin(); it != mem2.values.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 5007:                    if (!it->second.isIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5008:                        continue;
    #####: 5009:                    valueFlowForLoopSimplify(bodyStart, it->first, false, it->second.intvalue, tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5010:                }
    #####: 5011:                for (it = memAfter.values.begin(); it != memAfter.values.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 5012:                    if (!it->second.isIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5013:                        continue;
    #####: 5014:                    valueFlowForLoopSimplifyAfter(tok, it->first, it->second.intvalue, tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5015:                }
        -: 5016:            }
        -: 5017:        }
        -: 5018:    }
      224: 5019:}
        -: 5020:
function _ZL24valueFlowInjectParameterP9TokenListP11ErrorLoggerPK8SettingsPK8VariablePK5ScopeRKNSt7__debug4listIN9ValueFlow5ValueESaISF_EEE called 2 returned 100% blocks executed 41%
        2: 5021:static void valueFlowInjectParameter(TokenList* tokenlist, ErrorLogger* errorLogger, const Settings* settings, const Variable* arg, const Scope* functionScope, const std::list<ValueFlow::Value>& argvalues)
        -: 5022:{
        -: 5023:    // Is argument passed by value or const reference, and is it a known non-class type?
        2: 5024:    if (arg->isReference() && !arg->isConst() && !arg->isClass())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 5025:        return;
        -: 5026:
        -: 5027:    // Set value in function scope..
        2: 5028:    const int varid2 = arg->declarationId();
call    0 returned 100%
        2: 5029:    if (!varid2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 5030:        return;
        -: 5031:
    #####: 5032:    valueFlowForward(const_cast<Token*>(functionScope->bodyStart->next()), functionScope->bodyEnd, arg, varid2, argvalues, false, true, tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -: 5033:}
        -: 5034:
function _ZL23valueFlowSwitchVariableP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 6%
      224: 5035:static void valueFlowSwitchVariable(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 5036:{
     6836: 5037:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     6612: 5038:        if (scope.type != Scope::ScopeType::eSwitch)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     6611: 5039:            continue;
        1: 5040:        if (!Token::Match(scope.classDef, "switch ( %var% ) {"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 5041:            continue;
    #####: 5042:        const Token *vartok = scope.classDef->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5043:        const Variable *var = vartok->variable();
call    0 never executed
    #####: 5044:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 5045:            continue;
        -: 5046:
        -: 5047:        // bailout: global non-const variables
    #####: 5048:        if (!(var->isLocal() || var->isArgument()) && !var->isConst()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 5049:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 5050:                bailout(tokenlist, errorLogger, vartok, "switch variable " + var->name() + " is global");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 5051:            continue;
        -: 5052:        }
        -: 5053:
    #####: 5054:        for (Token *tok = scope.bodyStart->next(); tok != scope.bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5055:            if (tok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5056:                tok = tok->link();
call    0 never executed
    #####: 5057:                continue;
        -: 5058:            }
    #####: 5059:            if (Token::Match(tok, "case %num% :")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5060:                std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5061:                values.emplace_back(MathLib::toLongNumber(tok->next()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 5062:                values.back().condition = tok;
call    0 never executed
    #####: 5063:                const std::string info("case " + tok->next()->str() + ": " + vartok->str() + " is " + tok->next()->str() + " here.");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
    #####: 5064:                values.back().errorPath.emplace_back(tok, info);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5065:                bool known = false;
    #####: 5066:                if ((Token::simpleMatch(tok->previous(), "{") || Token::simpleMatch(tok->tokAt(-2), "break ;")) && !Token::Match(tok->tokAt(3), ";| case"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
    #####: 5067:                    known = true;
    #####: 5068:                while (Token::Match(tok->tokAt(3), ";| case %num% :")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5069:                    known = false;
    #####: 5070:                    tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5071:                    if (!tok->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5072:                        tok = tok->next();
call    0 never executed
    #####: 5073:                    values.emplace_back(MathLib::toLongNumber(tok->next()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 5074:                    values.back().condition = tok;
call    0 never executed
    #####: 5075:                    const std::string info2("case " + tok->next()->str() + ": " + vartok->str() + " is " + tok->next()->str() + " here.");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
    #####: 5076:                    values.back().errorPath.emplace_back(tok, info2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5077:                }
    #####: 5078:                for (std::list<ValueFlow::Value>::const_iterator val = values.begin(); val != values.end(); ++val) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5079:                    valueFlowReverse(tokenlist,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5080:                                     const_cast<Token*>(scope.classDef),
        -: 5081:                                     vartok,
    #####: 5082:                                     *val,
call    0 never executed
    #####: 5083:                                     ValueFlow::Value(),
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5084:                                     errorLogger,
        -: 5085:                                     settings);
        -: 5086:                }
    #####: 5087:                if (vartok->variable()->scope()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5088:                    if (known)
branch  0 never executed
branch  1 never executed
    #####: 5089:                        values.back().setKnown();
call    0 never executed
call    1 never executed
    #####: 5090:                    valueFlowForward(tok->tokAt(3), vartok->variable()->scope()->bodyEnd, vartok->variable(), vartok->varId(), values, values.back().isKnown(), false, tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
        -: 5091:                }
        -: 5092:            }
        -: 5093:        }
        -: 5094:    }
      224: 5095:}
        -: 5096:
function _ZL14setTokenValuesP5TokenRKNSt7__debug4listIN9ValueFlow5ValueESaIS4_EEEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 5097:static void setTokenValues(Token *tok, const std::list<ValueFlow::Value> &values, const Settings *settings)
        -: 5098:{
    #####: 5099:    for (const ValueFlow::Value &value : values) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5100:        if (value.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5101:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5102:    }
    #####: 5103:}
        -: 5104:
function _ZL8evaluatePK5TokenRKNSt7__debug6vectorINS2_4listIN9ValueFlow5ValueESaIS6_EEESaIS8_EEEPS8_ called 0 returned 0% blocks executed 0%
    #####: 5105:static bool evaluate(const Token *expr, const std::vector<std::list<ValueFlow::Value>> &values, std::list<ValueFlow::Value> *result)
        -: 5106:{
    #####: 5107:    if (!expr)
branch  0 never executed
branch  1 never executed
    #####: 5108:        return false;
        -: 5109:
        -: 5110:    // strlen(arg)..
    #####: 5111:    if (expr->str() == "(" && Token::Match(expr->previous(), "strlen ( %name% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5112:        const Token *arg = expr->next();
call    0 never executed
    #####: 5113:        if (arg->str().compare(0,3,"arg") != 0 || arg->str().size() != 4)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5114:            return false;
    #####: 5115:        const char n = arg->str()[3];
call    0 never executed
call    1 never executed
    #####: 5116:        if (n < '1' || n - '1' >= values.size())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5117:            return false;
    #####: 5118:        for (const ValueFlow::Value &argvalue : values[n - '1']) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 5119:            if (argvalue.isTokValue() && argvalue.tokvalue->tokType() == Token::eString) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5120:                ValueFlow::Value res(argvalue); // copy all "inconclusive", "condition", etc attributes
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 5121:                // set return value..
    #####: 5122:                res.valueType = ValueFlow::Value::INT;
    #####: 5123:                res.tokvalue = nullptr;
    #####: 5124:                res.intvalue = Token::getStrLength(argvalue.tokvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5125:                result->emplace_back(res);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5126:            }
        -: 5127:        }
    #####: 5128:        return !result->empty();
call    0 never executed
        -: 5129:    }
        -: 5130:
        -: 5131:    // unary operands
    #####: 5132:    if (expr->astOperand1() && !expr->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5133:        std::list<ValueFlow::Value> opvalues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5134:        if (!evaluate(expr->astOperand1(), values, &opvalues))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5135:            return false;
    #####: 5136:        if (expr->str() == "+") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5137:            result->swap(opvalues);
call    0 never executed
    #####: 5138:            return true;
        -: 5139:        }
    #####: 5140:        if (expr->str() == "-") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5141:            for (ValueFlow::Value v: opvalues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 5142:                if (v.isIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5143:                    v.intvalue = -v.intvalue;
    #####: 5144:                    result->emplace_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5145:                }
        -: 5146:            }
    #####: 5147:            return true;
        -: 5148:        }
    #####: 5149:        return false;
        -: 5150:    }
        -: 5151:    // binary/ternary operands
    #####: 5152:    if (expr->astOperand1() && expr->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5153:        std::list<ValueFlow::Value> lhsValues, rhsValues;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 5154:        if (!evaluate(expr->astOperand1(), values, &lhsValues))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5155:            return false;
    #####: 5156:        if (expr->str() != "?" && !evaluate(expr->astOperand2(), values, &rhsValues))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5157:            return false;
        -: 5158:
    #####: 5159:        for (const ValueFlow::Value &val1 : lhsValues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 5160:            if (!val1.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5161:                continue;
    #####: 5162:            if (expr->str() == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5163:                rhsValues.clear();
call    0 never executed
    #####: 5164:                const Token *expr2 = val1.intvalue ? expr->astOperand2()->astOperand1() : expr->astOperand2()->astOperand2();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5165:                if (!evaluate(expr2, values, &rhsValues))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5166:                    continue;
    #####: 5167:                result->insert(result->end(), rhsValues.begin(), rhsValues.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 5168:                continue;
        -: 5169:            }
        -: 5170:
    #####: 5171:            for (const ValueFlow::Value &val2 : rhsValues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 5172:                if (!val2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5173:                    continue;
        -: 5174:
    #####: 5175:                if (val1.varId != 0 && val2.varId != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5176:                    if (val1.varId != val2.varId || val1.varvalue != val2.varvalue)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5177:                        continue;
        -: 5178:                }
        -: 5179:
    #####: 5180:                if (expr->str() == "+")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5181:                    result->emplace_back(ValueFlow::Value(val1.intvalue + val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5182:                else if (expr->str() == "-")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5183:                    result->emplace_back(ValueFlow::Value(val1.intvalue - val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5184:                else if (expr->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5185:                    result->emplace_back(ValueFlow::Value(val1.intvalue * val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5186:                else if (expr->str() == "/" && val2.intvalue != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5187:                    result->emplace_back(ValueFlow::Value(val1.intvalue / val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5188:                else if (expr->str() == "%" && val2.intvalue != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5189:                    result->emplace_back(ValueFlow::Value(val1.intvalue % val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5190:                else if (expr->str() == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5191:                    result->emplace_back(ValueFlow::Value(val1.intvalue & val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5192:                else if (expr->str() == "|")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5193:                    result->emplace_back(ValueFlow::Value(val1.intvalue | val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5194:                else if (expr->str() == "^")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5195:                    result->emplace_back(ValueFlow::Value(val1.intvalue ^ val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5196:                else if (expr->str() == "==")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5197:                    result->emplace_back(ValueFlow::Value(val1.intvalue == val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5198:                else if (expr->str() == "!=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5199:                    result->emplace_back(ValueFlow::Value(val1.intvalue != val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5200:                else if (expr->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5201:                    result->emplace_back(ValueFlow::Value(val1.intvalue < val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5202:                else if (expr->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5203:                    result->emplace_back(ValueFlow::Value(val1.intvalue > val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5204:                else if (expr->str() == ">=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5205:                    result->emplace_back(ValueFlow::Value(val1.intvalue >= val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5206:                else if (expr->str() == "<=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5207:                    result->emplace_back(ValueFlow::Value(val1.intvalue <= val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5208:                else if (expr->str() == "&&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5209:                    result->emplace_back(ValueFlow::Value(val1.intvalue && val2.intvalue));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 5210:                else if (expr->str() == "||")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5211:                    result->emplace_back(ValueFlow::Value(val1.intvalue || val2.intvalue));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 5212:                else if (expr->str() == "<<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5213:                    result->emplace_back(ValueFlow::Value(val1.intvalue << val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5214:                else if (expr->str() == ">>")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5215:                    result->emplace_back(ValueFlow::Value(val1.intvalue >> val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 5216:                else
    #####: 5217:                    return false;
    #####: 5218:                combineValueProperties(val1, val2, &result->back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5219:            }
        -: 5220:        }
    #####: 5221:        return !result->empty();
call    0 never executed
        -: 5222:    }
    #####: 5223:    if (expr->str().compare(0,3,"arg")==0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5224:        *result = values[expr->str()[3] - '1'];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5225:        return true;
        -: 5226:    }
    #####: 5227:    if (expr->isNumber()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5228:        result->emplace_back(ValueFlow::Value(MathLib::toLongNumber(expr->str())));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 5229:        result->back().setKnown();
call    0 never executed
call    1 never executed
    #####: 5230:        return true;
    #####: 5231:    } else if (expr->tokType() == Token::eChar) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5232:        result->emplace_back(ValueFlow::Value(MathLib::toLongNumber(expr->str())));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5233:        result->back().setKnown();
call    0 never executed
call    1 never executed
    #####: 5234:        return true;
        -: 5235:    }
    #####: 5236:    return false;
        -: 5237:}
        -: 5238:
function _ZL25getFunctionArgumentValuesPK5Token called 121 returned 100% blocks executed 61%
      121: 5239:static std::list<ValueFlow::Value> getFunctionArgumentValues(const Token *argtok)
        -: 5240:{
      121: 5241:    std::list<ValueFlow::Value> argvalues(argtok->values());
call    0 returned 100%
call    1 returned 100%
      121: 5242:    if (argvalues.empty() && Token::Match(argtok, "%comp%|%oror%|&&|!")) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5243:        argvalues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5244:        argvalues.emplace_back(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 5245:    }
      121: 5246:    return argvalues;
        -: 5247:}
        -: 5248:
function _ZL24valueFlowLibraryFunctionP5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 5249:static void valueFlowLibraryFunction(Token *tok, const std::string &returnValue, const Settings *settings)
        -: 5250:{
    #####: 5251:    std::vector<std::list<ValueFlow::Value>> argValues;
call    0 never executed
call    1 never executed
    #####: 5252:    for (const Token *argtok : getArguments(tok->previous())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    #####: 5253:        argValues.emplace_back(getFunctionArgumentValues(argtok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5254:        if (argValues.back().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5255:            return;
        -: 5256:    }
    #####: 5257:    if (returnValue.find("arg") != std::string::npos && argValues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5258:        return;
        -: 5259:
    #####: 5260:    TokenList tokenList(settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -: 5261:    {
    #####: 5262:        const std::string code = "return " + returnValue + ";";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5263:        std::istringstream istr(code);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 5264:        if (!tokenList.createTokens(istr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5265:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5266:    }
        -: 5267:
        -: 5268:    // combine operators, set links, etc..
    #####: 5269:    std::stack<Token *> lpar;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 5270:    for (Token *tok2 = tokenList.front(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5271:        if (Token::Match(tok2, "[!<>=] =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5272:            tok2->str(tok2->str() + "=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 5273:            tok2->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5274:        } else if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5275:            lpar.push(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5276:        else if (tok2->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5277:            if (lpar.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5278:                return;
    #####: 5279:            Token::createMutualLinks(lpar.top(), tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5280:            lpar.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5281:        }
        -: 5282:    }
    #####: 5283:    if (!lpar.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5284:        return;
        -: 5285:
        -: 5286:    // Evaluate expression
    #####: 5287:    tokenList.createAst();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5288:    std::list<ValueFlow::Value> results;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 5289:    if (evaluate(tokenList.front()->astOperand1(), argValues, &results))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5290:        setTokenValues(tok, results, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5291:}
        -: 5292:
function _ZL20valueFlowSubFunctionP9TokenListP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 60%
      224: 5293:static void valueFlowSubFunction(TokenList* tokenlist, ErrorLogger* errorLogger, const Settings* settings)
        -: 5294:{
    37537: 5295:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    37313: 5296:        if (!Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 87% (fallthrough)
branch  4 taken 13%
    69637: 5297:            continue;
        -: 5298:
     4754: 5299:        const Function * const calledFunction = tok->function();
call    0 returned 100%
     4754: 5300:        if (!calledFunction) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -: 5301:            // library function?
     4510: 5302:            const std::string& returnValue(settings->library.returnValue(tok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     4510: 5303:            if (!returnValue.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5304:                valueFlowLibraryFunction(tok->next(), returnValue, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
     4510: 5305:            continue;
        -: 5306:        }
        -: 5307:
      244: 5308:        const Scope * const calledFunctionScope = calledFunction->functionScope;
      244: 5309:        if (!calledFunctionScope)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        9: 5310:            continue;
        -: 5311:
        -: 5312:        // TODO: Rewrite this. It does not work well to inject 1 argument at a time.
      470: 5313:        const std::vector<const Token *> &callArguments = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      354: 5314:        for (int argnr = 0U; argnr < callArguments.size(); ++argnr) {
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
      121: 5315:            const Token *argtok = callArguments[argnr];
call    0 returned 100%
        -: 5316:            // Get function argument
      121: 5317:            const Variable * const argvar = calledFunction->getArgumentVar(argnr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      121: 5318:            if (!argvar)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        2: 5319:                break;
        -: 5320:
        -: 5321:            // passing value(s) to function
      121: 5322:            std::list<ValueFlow::Value> argvalues(getFunctionArgumentValues(argtok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        -: 5323:
        -: 5324:            // Don't forward lifetime values
      121: 5325:            argvalues.remove_if(std::mem_fn(&ValueFlow::Value::isLifetimeValue));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5326:
      121: 5327:            if (argvalues.empty())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      119: 5328:                continue;
        -: 5329:
        -: 5330:            // Error path..
        4: 5331:            for (ValueFlow::Value &v : argvalues) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 5332:                const std::string nr = MathLib::toString(argnr + 1) + getOrdinalText(argnr + 1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
        -: 5333:
        4: 5334:                v.errorPath.emplace_back(argtok,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4: 5335:                                         "Calling function '" +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        6: 5336:                                         calledFunction->name() +
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4: 5337:                                         "', " +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 5338:                                         nr +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 5339:                                         " argument '" +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        8: 5340:                                         argtok->expressionString() +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        4: 5341:                                         "' value is " +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 5342:                                         v.infoString());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 5343:            }
        -: 5344:
        -: 5345:            // passed values are not "known"..
        2: 5346:            lowerToPossible(argvalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5347:
        2: 5348:            valueFlowInjectParameter(tokenlist, errorLogger, settings, argvar, calledFunctionScope, argvalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5349:            // FIXME: We need to rewrite the valueflow analysis to better handle multiple arguments
        2: 5350:            if (!argvalues.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 5351:                break;
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 2%
branch  3 taken 98%
        -: 5352:        }
        -: 5353:    }
      224: 5354:}
call    0 never executed
        -: 5355:
function _ZL33valueFlowFunctionDefaultParameterP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 28%
      224: 5356:static void valueFlowFunctionDefaultParameter(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 5357:{
      224: 5358:    if (!tokenlist->isCPP())
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
      134: 5359:        return;
        -: 5360:
      189: 5361:    for (const Scope* scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       99: 5362:        const Function* function = scope->function;
       99: 5363:        if (!function)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        2: 5364:            continue;
       97: 5365:        for (std::size_t arg = function->minArgCount(); arg < function->argCount(); arg++) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5366:            const Variable* var = function->getArgumentVar(arg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5367:            if (var && var->hasDefault() && Token::Match(var->nameToken(), "%var% = %num%|%str% [,)]")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 5368:                const std::list<ValueFlow::Value> &values = var->nameToken()->tokAt(2)->values();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 5369:                std::list<ValueFlow::Value> argvalues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5370:                for (const ValueFlow::Value &value : values) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5371:                    ValueFlow::Value v(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5372:                    v.defaultArg = true;
    #####: 5373:                    v.changeKnownToPossible();
call    0 never executed
    #####: 5374:                    if (v.isPossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5375:                        argvalues.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5376:                }
    #####: 5377:                if (!argvalues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5378:                    valueFlowInjectParameter(tokenlist, errorLogger, settings, var, scope, argvalues);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5379:            }
        -: 5380:        }
        -: 5381:    }
        -: 5382:}
        -: 5383:
function _ZL7isKnownPK5Token called 102 returned 100% blocks executed 86%
      102: 5384:static bool isKnown(const Token * tok)
        -: 5385:{
      102: 5386:    return tok && tok->hasKnownIntValue();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -: 5387:}
        -: 5388:
function _ZL23valueFlowFunctionReturnP9TokenListP11ErrorLogger called 194 returned 100% blocks executed 26%
      194: 5389:static void valueFlowFunctionReturn(TokenList *tokenlist, ErrorLogger *errorLogger)
        -: 5390:{
    36393: 5391:    for (Token *tok = tokenlist->back(); tok; tok = tok->previous()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 5392:        if (tok->str() != "(" || !tok->astOperand1() || !tok->astOperand1()->function())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 95% (fallthrough)
branch 10 taken 5%
branch 11 taken 99% (fallthrough)
branch 12 taken 1%
    72187: 5393:            continue;
        -: 5394:
      211: 5395:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5396:            continue;
        -: 5397:
        -: 5398:        // Arguments..
      211: 5399:        std::vector<MathLib::bigint> parvalues;
call    0 returned 100%
call    1 never executed
      211: 5400:        if (tok->astOperand2()) {
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
       87: 5401:            const Token *partok = tok->astOperand2();
call    0 returned 100%
       87: 5402:            while (partok && partok->str() == "," && isKnown(partok->astOperand2()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 5403:                partok = partok->astOperand1();
call    0 never executed
       87: 5404:            if (!isKnown(partok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       87: 5405:                continue;
    #####: 5406:            parvalues.push_back(partok->values().front().intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5407:            partok = partok->astParent();
call    0 never executed
    #####: 5408:            while (partok && partok->str() == ",") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5409:                parvalues.push_back(partok->astOperand2()->values().front().intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5410:                partok = partok->astParent();
call    0 never executed
        -: 5411:            }
    #####: 5412:            if (partok != tok)
branch  0 never executed
branch  1 never executed
    #####: 5413:                continue;
        -: 5414:        }
        -: 5415:
        -: 5416:        // Get scope and args of function
      124: 5417:        const Function * const function = tok->astOperand1()->function();
call    0 returned 100%
call    1 returned 100%
      124: 5418:        const Scope * const functionScope = function->functionScope;
      248: 5419:        if (!functionScope || !Token::simpleMatch(functionScope->bodyStart, "{ return")) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
      124: 5420:            if (functionScope && tokenlist->getSettings()->debugwarnings && Token::findsimplematch(functionScope->bodyStart, "return", functionScope->bodyEnd))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 5421:                bailout(tokenlist, errorLogger, tok, "function return; nontrivial function body");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
      124: 5422:            continue;
        -: 5423:        }
        -: 5424:
    #####: 5425:        ProgramMemory programMemory;
call    0 never executed
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
call    4 never executed
    #####: 5426:        for (std::size_t i = 0; i < parvalues.size(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5427:            const Variable * const arg = function->getArgumentVar(i);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5428:            if (!arg || !Token::Match(arg->typeStartToken(), "%type% %name% ,|)")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5429:                if (tokenlist->getSettings()->debugwarnings)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5430:                    bailout(tokenlist, errorLogger, tok, "function return; unhandled argument type");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 5431:                programMemory.clear();
call    0 never executed
    #####: 5432:                break;
        -: 5433:            }
    #####: 5434:            programMemory.setIntValue(arg->declarationId(), parvalues[i]);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5435:        }
    #####: 5436:        if (programMemory.empty() && !parvalues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5437:            continue;
        -: 5438:
        -: 5439:        // Determine return value of subfunction..
    #####: 5440:        MathLib::bigint result = 0;
    #####: 5441:        bool error = false;
    #####: 5442:        execute(functionScope->bodyStart->next()->astOperand1(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5443:                &programMemory,
        -: 5444:                &result,
        -: 5445:                &error);
    #####: 5446:        if (!error) {
branch  0 never executed
branch  1 never executed
    #####: 5447:            ValueFlow::Value v(result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 5448:            if (function->hasVirtualSpecifier())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5449:                v.setPossible();
call    0 never executed
        -: 5450:            else
    #####: 5451:                v.setKnown();
call    0 never executed
    #####: 5452:            setTokenValue(tok, v, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5453:        }
        -: 5454:    }
      194: 5455:}
        -: 5456:
function _ZL15valueFlowUninitP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 84%
      224: 5457:static void valueFlowUninit(TokenList *tokenlist, SymbolDatabase * /*symbolDatabase*/, ErrorLogger *errorLogger, const Settings *settings)
        -: 5458:{
    37537: 5459:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    37313: 5460:        if (!Token::Match(tok,"[;{}] %type%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 82% (fallthrough)
branch  4 taken 18%
    67942: 5461:            continue;
     6658: 5462:        if (!tok->scope()->isExecutable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       30: 5463:            continue;
     6628: 5464:        const Token *vardecl = tok->next();
call    0 returned 100%
     6628: 5465:        bool stdtype = false;
     6628: 5466:        bool pointer = false;
    20366: 5467:        while (Token::Match(vardecl, "%name%|::|*") && vardecl->varId() == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
branch  6 taken 97% (fallthrough)
branch  7 taken 3%
branch  8 taken 51% (fallthrough)
branch  9 taken 49%
     6869: 5468:            stdtype |= vardecl->isStandardType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     6869: 5469:            pointer |= vardecl->str() == "*";
call    0 returned 100%
call    1 returned 100%
     6869: 5470:            vardecl = vardecl->next();
call    0 returned 100%
        -: 5471:        }
        -: 5472:        // if (!stdtype && !pointer)
        -: 5473:        // continue;
     6628: 5474:        if (!Token::Match(vardecl, "%var% ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
     6440: 5475:            continue;
      188: 5476:        if (Token::Match(vardecl, "%varid% ; %varid% =", vardecl->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 78% (fallthrough)
branch  5 taken 22%
      146: 5477:            continue;
       42: 5478:        const Variable *var = vardecl->variable();
call    0 returned 100%
       42: 5479:        if (!var || var->nameToken() != vardecl)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33% (fallthrough)
branch  6 taken 67%
       14: 5480:            continue;
       84: 5481:        if ((!var->isPointer() && var->type() && var->type()->needInitialization != Type::NeedInitialization::True) ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 96% (fallthrough)
branch  8 taken 4%
branch  9 taken 7% (fallthrough)
branch 10 taken 93%
       83: 5482:            !var->isLocal() || var->isStatic() || var->isExtern() || var->isReference() || var->isThrow())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 96% (fallthrough)
branch  7 taken 4%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
        2: 5483:            continue;
       26: 5484:        if (!var->type() && !stdtype && !pointer)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 5485:            continue;
        -: 5486:
       52: 5487:        ValueFlow::Value uninitValue;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       26: 5488:        uninitValue.setKnown();
call    0 returned 100%
       26: 5489:        uninitValue.valueType = ValueFlow::Value::UNINIT;
       26: 5490:        uninitValue.tokvalue = vardecl;
       52: 5491:        std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       26: 5492:        values.push_back(uninitValue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5493:
       26: 5494:        const bool constValue = true;
       26: 5495:        const bool subFunction = false;
        -: 5496:
       26: 5497:        valueFlowForward(vardecl->next(), vardecl->scope()->bodyEnd, var, vardecl->varId(), values, constValue, subFunction, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        -: 5498:    }
      224: 5499:}
        -: 5500:
function _ZL21hasContainerSizeGuardPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 5501:static bool hasContainerSizeGuard(const Token *tok, nonneg int containerId)
        -: 5502:{
    #####: 5503:    for (; tok && tok->astParent(); tok = tok->astParent()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 5504:        const Token *parent = tok->astParent();
call    0 never executed
    #####: 5505:        if (tok != parent->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5506:            continue;
    #####: 5507:        if (!Token::Match(parent, "%oror%|&&|?"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5508:            continue;
        -: 5509:        // is container found in lhs?
    #####: 5510:        bool found = false;
    #####: 5511:        visitAstNodes(parent->astOperand1(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
function _ZZL21hasContainerSizeGuardPK5TokeniENKUlS1_E_clES1_ called 0 returned 0% blocks executed 0%
    #####: 5512:        [&](const Token *t) {
    #####: 5513:            if (t->varId() == containerId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5514:                found = true;
    #####: 5515:            return found ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 never executed
branch  1 never executed
        -: 5516:        });
    #####: 5517:        if (found)
branch  0 never executed
branch  1 never executed
    #####: 5518:            return true;
        -: 5519:    }
    #####: 5520:    return false;
        -: 5521:}
        -: 5522:
function _ZL15isContainerSizePK5Token called 26 returned 100% blocks executed 18%
       26: 5523:static bool isContainerSize(const Token* tok)
        -: 5524:{
       26: 5525:    if (!Token::Match(tok, "%var% . %name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       26: 5526:        return false;
    #####: 5527:    if (!astIsContainer(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5528:        return false;
    #####: 5529:    if (tok->valueType()->container && tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::SIZE)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5530:        return true;
    #####: 5531:    if (Token::Match(tok->tokAt(2), "size|length ( )"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5532:        return true;
    #####: 5533:    return false;
        -: 5534:}
        -: 5535:
function _ZL16isContainerEmptyPK5Token called 175 returned 100% blocks executed 32%
      175: 5536:static bool isContainerEmpty(const Token* tok)
        -: 5537:{
      175: 5538:    if (!Token::Match(tok, "%var% . %name% ("))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
      169: 5539:        return false;
        6: 5540:    if (!astIsContainer(tok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 5541:        return false;
    #####: 5542:    if (tok->valueType()->container && tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::EMPTY)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5543:        return true;
    #####: 5544:    if (Token::simpleMatch(tok->tokAt(2), "empty ( )"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5545:        return true;
    #####: 5546:    return false;
        -: 5547:}
        -: 5548:
        -: 5549:static bool isContainerSizeChanged(nonneg int varId, const Token *start, const Token *end, int depth = 20);
        -: 5550:
function _ZL32isContainerSizeChangedByFunctionPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 5551:static bool isContainerSizeChangedByFunction(const Token *tok, int depth = 20)
        -: 5552:{
    #####: 5553:    if (!tok->valueType() || !tok->valueType()->container)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5554:        return false;
        -: 5555:    // If we are accessing an element then we are not changing the container size
    #####: 5556:    if (Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5557:        Library::Container::Yield yield = tok->valueType()->container->getYield(tok->strAt(2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5558:        if (yield != Library::Container::Yield::NO_YIELD)
branch  0 never executed
branch  1 never executed
    #####: 5559:            return false;
        -: 5560:    }
    #####: 5561:    if (Token::simpleMatch(tok->astParent(), "["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5562:        return false;
        -: 5563:
        -: 5564:    // address of variable
    #####: 5565:    const bool addressOf = tok->astParent() && tok->astParent()->isUnaryOp("&");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
        -: 5566:
        -: 5567:    int narg;
    #####: 5568:    const Token * ftok = getTokenArgumentFunction(tok, narg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5569:    if (!ftok)
branch  0 never executed
branch  1 never executed
    #####: 5570:        return false; // not a function => variable not changed
    #####: 5571:    const Function * fun = ftok->function();
call    0 never executed
    #####: 5572:    if (fun) {
branch  0 never executed
branch  1 never executed
    #####: 5573:        const Variable *arg = fun->getArgumentVar(narg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5574:        if (arg) {
branch  0 never executed
branch  1 never executed
    #####: 5575:            if (!arg->isReference() && !addressOf)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5576:                return false;
    #####: 5577:            if (arg->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5578:                return false;
    #####: 5579:            const Scope * scope = fun->functionScope;
    #####: 5580:            if (scope) {
branch  0 never executed
branch  1 never executed
        -: 5581:                // Argument not used
    #####: 5582:                if (!arg->nameToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5583:                    return false;
    #####: 5584:                if (depth > 0)
branch  0 never executed
branch  1 never executed
    #####: 5585:                    return isContainerSizeChanged(arg->declarationId(), scope->bodyStart, scope->bodyEnd, depth - 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5586:            }
        -: 5587:        }
        -: 5588:    }
        -: 5589:
    #####: 5590:    bool inconclusive = false;
    #####: 5591:    const bool isChanged = isVariableChangedByFunctionCall(tok, 0, nullptr, &inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5592:    return (isChanged || inconclusive);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 5593:}
        -: 5594:
function _ZL25valueFlowContainerReverseP5TokeniRKN9ValueFlow5ValueEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 5595:static void valueFlowContainerReverse(Token *tok, nonneg int containerId, const ValueFlow::Value &value, const Settings *settings)
        -: 5596:{
    #####: 5597:    while (nullptr != (tok = tok->previous())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5598:        if (Token::Match(tok, "[{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5599:            break;
    #####: 5600:        if (Token::Match(tok, "return|break|continue"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5601:            break;
    #####: 5602:        if (tok->varId() != containerId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5603:            continue;
    #####: 5604:        if (Token::Match(tok, "%name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5605:            break;
    #####: 5606:        if (isContainerSizeChangedByFunction(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5607:            break;
    #####: 5608:        if (!tok->valueType() || !tok->valueType()->container)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5609:            break;
    #####: 5610:        if (Token::Match(tok, "%name% . %name% (") && tok->valueType()->container->getAction(tok->strAt(2)) != Library::Container::Action::NO_ACTION)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5611:            break;
    #####: 5612:        if (!hasContainerSizeGuard(tok, containerId))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5613:            setTokenValue(tok, value, settings);
call    0 never executed
        -: 5614:    }
    #####: 5615:}
        -: 5616:
function _ZL25valueFlowContainerForwardP5TokeniN9ValueFlow5ValueEPK8Settingsb called 0 returned 0% blocks executed 0%
    #####: 5617:static void valueFlowContainerForward(Token *tok, nonneg int containerId, ValueFlow::Value value, const Settings *settings, bool cpp)
        -: 5618:{
    #####: 5619:    while (nullptr != (tok = tok->next())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5620:        if (Token::Match(tok, "[{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5621:            break;
    #####: 5622:        if (Token::Match(tok, "while|for (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5623:            const Token *start = tok->linkAt(1)->next();
call    0 never executed
call    1 never executed
    #####: 5624:            if (!Token::simpleMatch(start->link(), "{"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5625:                break;
    #####: 5626:            if (isContainerSizeChanged(containerId, start, start->link()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5627:                break;
        -: 5628:        }
    #####: 5629:        if (Token::simpleMatch(tok, ") {") && Token::Match(tok->link()->previous(), "while|for|if (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5630:            const Token *start = tok->next();
call    0 never executed
    #####: 5631:            if (isContainerSizeChanged(containerId, start, start->link()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5632:                break;
    #####: 5633:            tok = start->link();
call    0 never executed
    #####: 5634:            if (Token::simpleMatch(tok, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5635:                start = tok->tokAt(2);
call    0 never executed
    #####: 5636:                if (isContainerSizeChanged(containerId, start, start->link()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5637:                    break;
    #####: 5638:                tok = start->link();
call    0 never executed
        -: 5639:            }
        -: 5640:        }
    #####: 5641:        if (tok->varId() != containerId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5642:            continue;
    #####: 5643:        if (Token::Match(tok, "%name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5644:            break;
    #####: 5645:        if (Token::Match(tok, "%name% +=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5646:            if (!tok->valueType() || !tok->valueType()->container || !tok->valueType()->container->stdStringLike)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 5647:                break;
    #####: 5648:            const Token *rhs = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 5649:            if (rhs->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5650:                value.intvalue += Token::getStrLength(rhs);
call    0 never executed
    #####: 5651:            else if (rhs->valueType() && rhs->valueType()->container && rhs->valueType()->container->stdStringLike) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 5652:                bool found = false;
    #####: 5653:                for (const ValueFlow::Value &rhsval : rhs->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 5654:                    if (rhsval.isKnown() && rhsval.isContainerSizeValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5655:                        value.intvalue += rhsval.intvalue;
    #####: 5656:                        found = true;
        -: 5657:                    }
        -: 5658:                }
    #####: 5659:                if (!found)
branch  0 never executed
branch  1 never executed
    #####: 5660:                    break;
        -: 5661:            } else
    #####: 5662:                break;
        -: 5663:        }
    #####: 5664:        if (isLikelyStreamRead(cpp, tok->astParent()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5665:            break;
    #####: 5666:        if (isContainerSizeChangedByFunction(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5667:            break;
    #####: 5668:        if (!tok->valueType() || !tok->valueType()->container)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5669:            break;
    #####: 5670:        if (Token::Match(tok, "%name% . %name% (") && tok->valueType()->container->getAction(tok->strAt(2)) != Library::Container::Action::NO_ACTION)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5671:            break;
    #####: 5672:        if (!hasContainerSizeGuard(tok, containerId))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5673:            setTokenValue(tok, value, settings);
call    0 never executed
        -: 5674:    }
    #####: 5675:}
        -: 5676:
function _ZL22isContainerSizeChangediPK5TokenS1_i called 0 returned 0% blocks executed 0%
    #####: 5677:static bool isContainerSizeChanged(nonneg int varId, const Token *start, const Token *end, int depth)
        -: 5678:{
    #####: 5679:    for (const Token *tok = start; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 5680:        if (tok->varId() != varId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5681:            continue;
    #####: 5682:        if (!tok->valueType() || !tok->valueType()->container)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5683:            return true;
    #####: 5684:        if (Token::Match(tok, "%name% %assign%|<<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5685:            return true;
    #####: 5686:        if (Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5687:            Library::Container::Action action = tok->valueType()->container->getAction(tok->strAt(2));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5688:            switch (action) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5689:            case Library::Container::Action::RESIZE:
        -: 5690:            case Library::Container::Action::CLEAR:
        -: 5691:            case Library::Container::Action::PUSH:
        -: 5692:            case Library::Container::Action::POP:
        -: 5693:            case Library::Container::Action::CHANGE:
        -: 5694:            case Library::Container::Action::INSERT:
        -: 5695:            case Library::Container::Action::ERASE:
        -: 5696:            case Library::Container::Action::CHANGE_INTERNAL:
    #####: 5697:                return true;
    #####: 5698:            case Library::Container::Action::NO_ACTION: // might be unknown action
    #####: 5699:                return true;
    #####: 5700:            case Library::Container::Action::FIND:
        -: 5701:            case Library::Container::Action::CHANGE_CONTENT:
    #####: 5702:                break;
        -: 5703:            };
        -: 5704:        }
    #####: 5705:        if (isContainerSizeChangedByFunction(tok, depth))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5706:            return true;
        -: 5707:    }
    #####: 5708:    return false;
        -: 5709:}
        -: 5710:
function _ZL21valueFlowSmartPointerP9TokenListP11ErrorLoggerPK8Settings called 90 returned 100% blocks executed 46%
       90: 5711:static void valueFlowSmartPointer(TokenList *tokenlist, ErrorLogger * errorLogger, const Settings *settings)
        -: 5712:{
     3264: 5713:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
     3174: 5714:        if (!tok->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5715:            continue;
     3174: 5716:        if (!tok->scope()->isExecutable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
      698: 5717:            continue;
     2476: 5718:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
     2114: 5719:            continue;
      362: 5720:        const Variable * var = tok->variable();
call    0 returned 100%
      362: 5721:        if (!var->isSmartPointer())
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
      337: 5722:            continue;
       25: 5723:        if (var->nameToken() == tok) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
       23: 5724:            if (Token::Match(tok, "%var% (|{") && tok->next()->astOperand2() && tok->next()->astOperand2()->str() != ",") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 43% (fallthrough)
branch  6 taken 57%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 43% (fallthrough)
branch 14 taken 57%
       10: 5725:                Token * inTok = tok->next()->astOperand2();
call    0 returned 100%
call    1 returned 100%
       20: 5726:                std::list<ValueFlow::Value> values = inTok->values();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
       10: 5727:                const bool constValue = inTok->isNumber();
call    0 returned 100%
       10: 5728:                valueFlowForwardAssign(inTok, var, values, constValue, true, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 5729:
       13: 5730:            } else if (Token::Match(tok, "%var% ;")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5731:                std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5732:                ValueFlow::Value v(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5733:                v.setKnown();
call    0 never executed
    #####: 5734:                values.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5735:                valueFlowForwardAssign(tok, var, values, false, true, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 5736:            }
        2: 5737:        } else if (Token::Match(tok, "%var% . reset (") && tok->next()->originalName() != "->") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5738:            if (Token::simpleMatch(tok->tokAt(3), "( )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5739:                std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5740:                ValueFlow::Value v(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5741:                v.setKnown();
call    0 never executed
    #####: 5742:                values.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5743:                valueFlowForwardAssign(tok->tokAt(4), var, values, false, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 5744:            } else {
    #####: 5745:                tok->removeValues(std::mem_fn(&ValueFlow::Value::isIntValue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5746:                Token * inTok = tok->tokAt(3)->astOperand2();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5747:                if (!inTok)
branch  0 never executed
branch  1 never executed
    #####: 5748:                    continue;
    #####: 5749:                std::list<ValueFlow::Value> values = inTok->values();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 5750:                const bool constValue = inTok->isNumber();
call    0 never executed
    #####: 5751:                valueFlowForwardAssign(inTok, var, values, constValue, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 5752:            }
        2: 5753:        } else if (Token::Match(tok, "%var% . release ( )") && tok->next()->originalName() != "->") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        4: 5754:            std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4: 5755:            ValueFlow::Value v(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        2: 5756:            v.setKnown();
call    0 returned 100%
        2: 5757:            values.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 5758:            valueFlowForwardAssign(tok->tokAt(4), var, values, false, false, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        -: 5759:        }
        -: 5760:    }
       90: 5761:}
        -: 5762:
function _ZL22valueFlowContainerSizeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 90 returned 100% blocks executed 31%
       90: 5763:static void valueFlowContainerSize(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger * /*errorLogger*/, const Settings *settings)
        -: 5764:{
        -: 5765:    // declaration
      336: 5766:    for (const Variable *var : symboldatabase->variableList()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 73% (fallthrough)
branch  5 taken 27%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
      246: 5767:        if (!var || !var->isLocal() || var->isPointer() || var->isReference())
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 59% (fallthrough)
branch  6 taken 41%
call    7 returned 100%
branch  8 taken 31% (fallthrough)
branch  9 taken 69%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 89% (fallthrough)
branch 14 taken 11%
      465: 5768:            continue;
       27: 5769:        if (!var->valueType() || !var->valueType()->container)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       27: 5770:            continue;
    #####: 5771:        if (!Token::Match(var->nameToken(), "%name% ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5772:            continue;
    #####: 5773:        if (var->nameToken()->hasKnownValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5774:            continue;
    #####: 5775:        ValueFlow::Value value(0);
call    0 never executed
call    1 never executed
    #####: 5776:        if (var->valueType()->container->size_templateArgNo >= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5777:            if (var->dimensions().size() == 1 && var->dimensions().front().tok && var->dimensions().front().tok->hasKnownIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 5778:                value.intvalue = var->dimensions().front().tok->getKnownIntValue();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5779:            else
    #####: 5780:                continue;
        -: 5781:        }
    #####: 5782:        value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####: 5783:        value.setKnown();
call    0 never executed
    #####: 5784:        valueFlowContainerForward(var->nameToken()->next(), var->declarationId(), value, settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
        -: 5785:    }
        -: 5786:
        -: 5787:    // after assignment
      189: 5788:    for (const Scope *functionScope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
     2509: 5789:        for (const Token *tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
     2410: 5790:            if (Token::Match(tok, "%name%|;|{|} %var% = %str% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5791:                const Token *containerTok = tok->next();
call    0 never executed
    #####: 5792:                if (containerTok && containerTok->valueType() && containerTok->valueType()->container && containerTok->valueType()->container->stdStringLike) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 5793:                    ValueFlow::Value value(Token::getStrLength(containerTok->tokAt(2)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 5794:                    value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####: 5795:                    value.setKnown();
call    0 never executed
    #####: 5796:                    valueFlowContainerForward(containerTok->next(), containerTok->varId(), value, settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 5797:                }
        -: 5798:            }
        -: 5799:        }
        -: 5800:    }
        -: 5801:
        -: 5802:    // conditional conditionSize
      340: 5803:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      250: 5804:        if (scope.type != Scope::ScopeType::eIf) // TODO: while
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
      212: 5805:            continue;
      290: 5806:        for (const Token *tok = scope.classDef; tok && tok->str() != "{"; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 87% (fallthrough)
branch  5 taken 13%
branch  6 taken 87% (fallthrough)
branch  7 taken 13%
call    8 returned 100%
      252: 5807:            if (!tok->isName() || !tok->valueType() || tok->valueType()->type != ValueType::CONTAINER || !tok->valueType()->container)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 39% (fallthrough)
branch  4 taken 61%
call    5 returned 100%
branch  6 taken 42% (fallthrough)
branch  7 taken 58%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
      504: 5808:                continue;
        -: 5809:
        -: 5810:            const Token *conditionToken;
        -: 5811:            MathLib::bigint intval;
        -: 5812:
    #####: 5813:            if (Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5814:                if (tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::SIZE) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5815:                    const Token *parent = tok->tokAt(3)->astParent();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5816:                    if (!parent || !parent->isComparisonOp() || !parent->astOperand2())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5817:                        continue;
    #####: 5818:                    if (parent->astOperand1()->hasKnownIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5819:                        intval = parent->astOperand1()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5820:                    else if (parent->astOperand2()->hasKnownIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5821:                        intval = parent->astOperand2()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5822:                    else
    #####: 5823:                        continue;
    #####: 5824:                    conditionToken = parent;
    #####: 5825:                } else if (tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::EMPTY) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5826:                    conditionToken = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5827:                    intval = 0;
        -: 5828:                } else {
    #####: 5829:                    continue;
        -: 5830:                }
    #####: 5831:            } else if (tok->valueType()->container->stdStringLike && Token::Match(tok, "%name% ==|!= %str%") && tok->next()->astOperand2() == tok->tokAt(2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 5832:                intval = Token::getStrLength(tok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5833:                conditionToken = tok->next();
call    0 never executed
        -: 5834:            } else {
    #####: 5835:                continue;
        -: 5836:            }
        -: 5837:
    #####: 5838:            ValueFlow::Value value(conditionToken, intval);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5839:            value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
        -: 5840:
        -: 5841:            // possible value before condition
    #####: 5842:            valueFlowContainerReverse(const_cast<Token *>(scope.classDef), tok->varId(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5843:        }
        -: 5844:    }
       90: 5845:}
        -: 5846:
function _ZL32valueFlowContainerAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 90 returned 100% blocks executed 64%
       90: 5847:static void valueFlowContainerAfterCondition(TokenList *tokenlist,
        -: 5848:        SymbolDatabase *symboldatabase,
        -: 5849:        ErrorLogger *errorLogger,
        -: 5850:        const Settings *settings)
        -: 5851:{
      180: 5852:    ValueFlowConditionHandler handler;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       90: 5853:    handler.forward =
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZL32valueFlowContainerAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlP5TokenPKS8_PK8VariableRKNSt7__debug4listIN9ValueFlow5ValueESaISI_EEEbE_clES9_SB_SE_SM_b called 0 returned 0% blocks executed 0%
    #####: 5854:    [&](Token *start, const Token *stop, const Variable *var, const std::list<ValueFlow::Value> &values, bool) {
        -: 5855:        // TODO: Forward multiple values
    #####: 5856:        if (values.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5857:            return false;
    #####: 5858:        valueFlowContainerForward(start, var->declarationId(), values.front(), settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 5859:        return isContainerSizeChanged(var->declarationId(), start, stop);
call    0 never executed
call    1 never executed
      180: 5860:    };
function _ZZL32valueFlowContainerAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK5TokenE0_clESA_ called 2410 returned 100% blocks executed 34%
     2500: 5861:    handler.parse = [&](const Token *tok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2410: 5862:        ValueFlowConditionHandler::Condition cond;
call    0 returned 100%
     4820: 5863:        ValueFlow::Value true_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
     4820: 5864:        ValueFlow::Value false_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     2410: 5865:        const Token *vartok = parseCompareInt(tok, true_value, false_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2410: 5866:        if (vartok) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       26: 5867:            vartok = vartok->tokAt(-3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       26: 5868:            if (!isContainerSize(vartok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       26: 5869:                return cond;
    #####: 5870:            true_value.valueType = ValueFlow::Value::CONTAINER_SIZE;
    #####: 5871:            false_value.valueType = ValueFlow::Value::CONTAINER_SIZE;
    #####: 5872:            cond.true_values.push_back(true_value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5873:            cond.false_values.push_back(false_value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5874:            cond.vartok = vartok;
    #####: 5875:            return cond;
        -: 5876:        }
        -: 5877:
        -: 5878:        // Empty check
     2384: 5879:        if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      175: 5880:            vartok = tok->tokAt(-3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5881:            // TODO: Handle .size()
      175: 5882:            if (!isContainerEmpty(vartok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      175: 5883:                return cond;
    #####: 5884:            const Token *parent = tok->astParent();
call    0 never executed
    #####: 5885:            while (parent) {
branch  0 never executed
branch  1 never executed
    #####: 5886:                if (Token::Match(parent, "%comp%|!"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5887:                    return cond;
    #####: 5888:                parent = parent->astParent();
call    0 never executed
        -: 5889:            }
    #####: 5890:            ValueFlow::Value value(tok, 0LL);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5891:            value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####: 5892:            cond.true_values.emplace_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5893:            cond.false_values.emplace_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5894:            cond.vartok = vartok;
    #####: 5895:            return cond;
        -: 5896:        }
        -: 5897:        // String compare
     2209: 5898:        if (Token::Match(tok, "==|!=")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5899:            const Token *strtok = nullptr;
    #####: 5900:            if (Token::Match(tok->astOperand1(), "%str%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5901:                strtok = tok->astOperand1();
call    0 never executed
    #####: 5902:                vartok = tok->astOperand2();
call    0 never executed
    #####: 5903:            } else if (Token::Match(tok->astOperand2(), "%str%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5904:                strtok = tok->astOperand2();
call    0 never executed
    #####: 5905:                vartok = tok->astOperand1();
call    0 never executed
        -: 5906:            }
    #####: 5907:            if (!strtok)
branch  0 never executed
branch  1 never executed
    #####: 5908:                return cond;
    #####: 5909:            if (!astIsContainer(vartok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5910:                return cond;
    #####: 5911:            ValueFlow::Value value(tok, Token::getStrLength(strtok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5912:            value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####: 5913:            cond.false_values.emplace_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5914:            cond.true_values.emplace_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5915:            cond.vartok = vartok;
    #####: 5916:            return cond;
        -: 5917:        }
     2209: 5918:        return cond;
       90: 5919:    };
       90: 5920:    handler.afterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       90: 5921:}
        -: 5922:
function _ZL20valueFlowFwdAnalysisPK9TokenListPK8Settings called 194 returned 100% blocks executed 67%
      194: 5923:static void valueFlowFwdAnalysis(const TokenList *tokenlist, const Settings *settings)
        -: 5924:{
    36393: 5925:    for (const Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 5926:        if (tok->str() != "=" || !tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 99% (fallthrough)
branch 11 taken 1%
    72165: 5927:            continue;
      202: 5928:        if (!tok->scope()->isExecutable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5929:            continue;
      202: 5930:        if (!tok->astOperand2()->hasKnownIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 85% (fallthrough)
branch  5 taken 15%
      171: 5931:            continue;
       62: 5932:        ValueFlow::Value v(tok->astOperand2()->values().front());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
       31: 5933:        v.errorPath.emplace_back(tok, tok->astOperand1()->expressionString() + " is assigned value " + MathLib::toString(v.intvalue));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
       62: 5934:        FwdAnalysis fwdAnalysis(tokenlist->isCPP(), settings->library);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
       31: 5935:        const Token *startToken = tok->findExpressionStartEndTokens().second->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       31: 5936:        const Scope *functionScope = tok->scope();
call    0 returned 100%
       51: 5937:        while (functionScope->nestedIn && functionScope->nestedIn->isExecutable())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 24% (fallthrough)
branch  4 taken 76%
branch  5 taken 24% (fallthrough)
branch  6 taken 76%
       10: 5938:            functionScope = functionScope->nestedIn;
       31: 5939:        const Token *endToken = functionScope->bodyEnd;
       31: 5940:        for (const FwdAnalysis::KnownAndToken read : fwdAnalysis.valueFlow(tok->astOperand1(), startToken, endToken)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
call   10 never executed
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 5941:            v.valueKind = read.known ? ValueFlow::Value::ValueKind::Known : ValueFlow::Value::ValueKind::Possible;
branch  0 never executed
branch  1 never executed
    #####: 5942:            setTokenValue(const_cast<Token *>(read.token), v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5943:        }
        -: 5944:    }
      194: 5945:}
        -: 5946:
function _ZL26valueFlowDynamicBufferSizeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 194 returned 100% blocks executed 26%
      194: 5947:static void valueFlowDynamicBufferSize(TokenList *tokenlist, SymbolDatabase *symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 5948:{
      397: 5949:    for (const Scope *functionScope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    34953: 5950:        for (const Token *tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
    34750: 5951:            if (!Token::Match(tok, "[;{}] %var% ="))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    69333: 5952:                continue;
        -: 5953:
      167: 5954:            if (!tok->next()->variable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5955:                continue;
        -: 5956:
      167: 5957:            const Token *rhs = tok->tokAt(2)->astOperand2();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      179: 5958:            while (rhs && rhs->isCast())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 3% (fallthrough)
branch  8 taken 97%
        6: 5959:                rhs = rhs->astOperand2() ? rhs->astOperand2() : rhs->astOperand1();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
      167: 5960:            if (!rhs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5961:                continue;
        -: 5962:
      167: 5963:            if (!Token::Match(rhs->previous(), "%name% ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 39% (fallthrough)
branch  5 taken 61%
       65: 5964:                continue;
        -: 5965:
      102: 5966:            const Library::AllocFunc *allocFunc = settings->library.getAllocFuncInfo(rhs->previous());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      102: 5967:            if (!allocFunc)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       14: 5968:                allocFunc = settings->library.getReallocFuncInfo(rhs->previous());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      102: 5969:            if (!allocFunc || allocFunc->bufferSize == Library::AllocFunc::BufferSize::none)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      102: 5970:                continue;
        -: 5971:
    #####: 5972:            const std::vector<const Token *> args = getArguments(rhs->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 5973:
    #####: 5974:            const Token * const arg1 = (args.size() >= allocFunc->bufferSizeArg1) ? args[allocFunc->bufferSizeArg1 - 1] : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5975:            const Token * const arg2 = (args.size() >= allocFunc->bufferSizeArg2) ? args[allocFunc->bufferSizeArg2 - 1] : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 5976:
    #####: 5977:            MathLib::bigint sizeValue = -1;
    #####: 5978:            switch (allocFunc->bufferSize) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5979:            case Library::AllocFunc::BufferSize::none:
    #####: 5980:                break;
    #####: 5981:            case Library::AllocFunc::BufferSize::malloc:
    #####: 5982:                if (arg1 && arg1->hasKnownIntValue())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5983:                    sizeValue = arg1->getKnownIntValue();
call    0 never executed
    #####: 5984:                break;
    #####: 5985:            case Library::AllocFunc::BufferSize::calloc:
    #####: 5986:                if (arg1 && arg2 && arg1->hasKnownIntValue() && arg2->hasKnownIntValue())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 5987:                    sizeValue = arg1->getKnownIntValue() * arg2->getKnownIntValue();
call    0 never executed
call    1 never executed
    #####: 5988:                break;
    #####: 5989:            case Library::AllocFunc::BufferSize::strdup:
    #####: 5990:                if (arg1 && arg1->hasKnownValue()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5991:                    const ValueFlow::Value &value = arg1->values().back();
call    0 never executed
call    1 never executed
    #####: 5992:                    if (value.isTokValue() && value.tokvalue->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5993:                        sizeValue = Token::getStrLength(value.tokvalue) + 1; // Add one for the null terminator
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5994:                }
    #####: 5995:                break;
        -: 5996:            };
    #####: 5997:            if (sizeValue < 0)
branch  0 never executed
branch  1 never executed
    #####: 5998:                continue;
        -: 5999:
    #####: 6000:            ValueFlow::Value value(sizeValue);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 6001:            value.errorPath.emplace_back(tok->tokAt(2), "Assign " + tok->strAt(1) + ", buffer with size " + MathLib::toString(sizeValue));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 6002:            value.valueType = ValueFlow::Value::ValueType::BUFFER_SIZE;
    #####: 6003:            value.setKnown();
call    0 never executed
    #####: 6004:            const std::list<ValueFlow::Value> values{value};
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####: 6005:            valueFlowForward(const_cast<Token *>(rhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####: 6006:                             functionScope->bodyEnd,
        -: 6007:                             tok->next()->variable(),
        -: 6008:                             tok->next()->varId(),
        -: 6009:                             values,
        -: 6010:                             true,
        -: 6011:                             false,
        -: 6012:                             tokenlist,
        -: 6013:                             errorLogger,
        -: 6014:                             settings);
        -: 6015:        }
        -: 6016:    }
      194: 6017:}
        -: 6018:
function _ZL15getMinMaxValuesPK9ValueTypeRKN8cppcheck8PlatformEPxS6_ called 0 returned 0% blocks executed 0%
    #####: 6019:static bool getMinMaxValues(const ValueType *vt, const cppcheck::Platform &platform, MathLib::bigint *minValue, MathLib::bigint *maxValue)
        -: 6020:{
    #####: 6021:    if (!vt || !vt->isIntegral() || vt->pointer)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6022:        return false;
        -: 6023:
        -: 6024:    int bits;
    #####: 6025:    switch (vt->type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6026:    case ValueType::Type::BOOL:
    #####: 6027:        bits = 1;
    #####: 6028:        break;
    #####: 6029:    case ValueType::Type::CHAR:
    #####: 6030:        bits = platform.char_bit;
    #####: 6031:        break;
    #####: 6032:    case ValueType::Type::SHORT:
    #####: 6033:        bits = platform.short_bit;
    #####: 6034:        break;
    #####: 6035:    case ValueType::Type::INT:
    #####: 6036:        bits = platform.int_bit;
    #####: 6037:        break;
    #####: 6038:    case ValueType::Type::LONG:
    #####: 6039:        bits = platform.long_bit;
    #####: 6040:        break;
    #####: 6041:    case ValueType::Type::LONGLONG:
    #####: 6042:        bits = platform.long_long_bit;
    #####: 6043:        break;
    #####: 6044:    default:
    #####: 6045:        return false;
        -: 6046:    };
        -: 6047:
    #####: 6048:    if (bits == 1) {
branch  0 never executed
branch  1 never executed
    #####: 6049:        *minValue = 0;
    #####: 6050:        *maxValue = 1;
    #####: 6051:    } else if (bits < 62) {
branch  0 never executed
branch  1 never executed
    #####: 6052:        if (vt->sign == ValueType::Sign::UNSIGNED) {
branch  0 never executed
branch  1 never executed
    #####: 6053:            *minValue = 0;
    #####: 6054:            *maxValue = (1LL << bits) - 1;
        -: 6055:        } else {
    #####: 6056:            *minValue = -(1LL << (bits - 1));
    #####: 6057:            *maxValue = (1LL << (bits - 1)) - 1;
        -: 6058:        }
    #####: 6059:    } else if (bits == 64) {
branch  0 never executed
branch  1 never executed
    #####: 6060:        if (vt->sign == ValueType::Sign::UNSIGNED) {
branch  0 never executed
branch  1 never executed
    #####: 6061:            *minValue = 0;
    #####: 6062:            *maxValue = LLONG_MAX; // todo max unsigned value
        -: 6063:        } else {
    #####: 6064:            *minValue = LLONG_MIN;
    #####: 6065:            *maxValue = LLONG_MAX;
        -: 6066:        }
        -: 6067:    } else {
    #####: 6068:        return false;
        -: 6069:    }
        -: 6070:
    #####: 6071:    return true;
        -: 6072:}
        -: 6073:
function _ZL15getMinMaxValuesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK8SettingsPxSA_ called 0 returned 0% blocks executed 0%
    #####: 6074:static bool getMinMaxValues(const std::string &typestr, const Settings *settings, MathLib::bigint *minvalue, MathLib::bigint *maxvalue)
        -: 6075:{
    #####: 6076:    TokenList typeTokens(settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 6077:    std::istringstream istr(typestr+";");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 6078:    if (!typeTokens.createTokens(istr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6079:        return false;
    #####: 6080:    typeTokens.simplifyPlatformTypes();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6081:    typeTokens.simplifyStdType();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6082:    const ValueType &vt = ValueType::parseDecl(typeTokens.front(), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 6083:    return getMinMaxValues(&vt, *settings, minvalue, maxvalue);
call    0 never executed
        -: 6084:}
        -: 6085:
function _ZL22valueFlowSafeFunctionsP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 224 returned 100% blocks executed 15%
      224: 6086:static void valueFlowSafeFunctions(TokenList *tokenlist, SymbolDatabase *symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 6087:{
      457: 6088:    for (const Scope *functionScope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      233: 6089:        if (!functionScope->bodyStart)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6090:            continue;
      233: 6091:        const Function *function = functionScope->function;
      233: 6092:        if (!function)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2: 6093:            continue;
        -: 6094:
      231: 6095:        const bool safe = function->isSafe(settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      231: 6096:        const bool all = safe && settings->platformType != cppcheck::Platform::PlatformType::Unspecified;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -: 6097:
      348: 6098:        for (const Variable &arg : function->argumentList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 34% (fallthrough)
branch  4 taken 66%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      117: 6099:            if (!arg.nameToken() || !arg.valueType())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
      120: 6100:                continue;
        -: 6101:
      114: 6102:            if (arg.valueType()->type == ValueType::Type::CONTAINER) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6103:                if (!safe)
branch  0 never executed
branch  1 never executed
    #####: 6104:                    continue;
    #####: 6105:                std::list<ValueFlow::Value> argValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6106:                argValues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6107:                argValues.back().valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
call    0 never executed
    #####: 6108:                argValues.back().errorPath.emplace_back(arg.nameToken(), "Assuming " + arg.name() + " is empty");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6109:                argValues.back().safe = true;
call    0 never executed
    #####: 6110:                argValues.emplace_back(1000000);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6111:                argValues.back().valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
call    0 never executed
    #####: 6112:                argValues.back().errorPath.emplace_back(arg.nameToken(), "Assuming " + arg.name() + " size is 1000000");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6113:                argValues.back().safe = true;
call    0 never executed
    #####: 6114:                for (const ValueFlow::Value &value : argValues)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6115:                    valueFlowContainerForward(const_cast<Token*>(functionScope->bodyStart), arg.declarationId(), value, settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 6116:                continue;
        -: 6117:            }
        -: 6118:
        -: 6119:            MathLib::bigint low, high;
      114: 6120:            bool isLow = arg.nameToken()->getCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::LOW, &low);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      114: 6121:            bool isHigh = arg.nameToken()->getCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::HIGH, &high);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 6122:
      114: 6123:            if (!isLow && !isHigh && !all)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      114: 6124:                continue;
        -: 6125:
    #####: 6126:            const bool safeLow = !isLow;
    #####: 6127:            const bool safeHigh = !isHigh;
        -: 6128:
    #####: 6129:            if ((!isLow || !isHigh) && all) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 6130:                MathLib::bigint minValue, maxValue;
    #####: 6131:                if (getMinMaxValues(arg.valueType(), *settings, &minValue, &maxValue)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6132:                    if (!isLow)
branch  0 never executed
branch  1 never executed
    #####: 6133:                        low = minValue;
    #####: 6134:                    if (!isHigh)
branch  0 never executed
branch  1 never executed
    #####: 6135:                        high = maxValue;
    #####: 6136:                    isLow = isHigh = true;
    #####: 6137:                } else if (arg.valueType()->type == ValueType::Type::FLOAT || arg.valueType()->type == ValueType::Type::DOUBLE || arg.valueType()->type == ValueType::Type::LONGDOUBLE) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 6138:                    std::list<ValueFlow::Value> argValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6139:                    argValues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6140:                    argValues.back().valueType = ValueFlow::Value::ValueType::FLOAT;
call    0 never executed
    #####: 6141:                    argValues.back().floatValue = isLow ? low : -1E25f;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6142:                    argValues.back().errorPath.emplace_back(arg.nameToken(), "Safe checks: Assuming argument has value " + MathLib::toString(argValues.back().floatValue));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6143:                    argValues.back().safe = true;
call    0 never executed
    #####: 6144:                    argValues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6145:                    argValues.back().valueType = ValueFlow::Value::ValueType::FLOAT;
call    0 never executed
    #####: 6146:                    argValues.back().floatValue = isHigh ? high : 1E25f;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6147:                    argValues.back().errorPath.emplace_back(arg.nameToken(), "Safe checks: Assuming argument has value " + MathLib::toString(argValues.back().floatValue));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6148:                    argValues.back().safe = true;
call    0 never executed
    #####: 6149:                    valueFlowForward(const_cast<Token *>(functionScope->bodyStart->next()),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 6150:                                     functionScope->bodyEnd,
        -: 6151:                                     &arg,
        -: 6152:                                     arg.declarationId(),
        -: 6153:                                     argValues,
        -: 6154:                                     false,
        -: 6155:                                     false,
        -: 6156:                                     tokenlist,
        -: 6157:                                     errorLogger,
        -: 6158:                                     settings);
    #####: 6159:                    continue;
        -: 6160:                }
        -: 6161:            }
        -: 6162:
    #####: 6163:            std::list<ValueFlow::Value> argValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6164:            if (isLow) {
branch  0 never executed
branch  1 never executed
    #####: 6165:                argValues.emplace_back(low);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6166:                argValues.back().errorPath.emplace_back(arg.nameToken(), std::string(safeLow ? "Safe checks: " : "") + "Assuming argument has value " + MathLib::toString(low));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 6167:                argValues.back().safe = safeLow;
call    0 never executed
        -: 6168:            }
    #####: 6169:            if (isHigh) {
branch  0 never executed
branch  1 never executed
    #####: 6170:                argValues.emplace_back(high);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6171:                argValues.back().errorPath.emplace_back(arg.nameToken(), std::string(safeHigh ? "Safe checks: " : "") + "Assuming argument has value " + MathLib::toString(high));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 6172:                argValues.back().safe = safeHigh;
call    0 never executed
        -: 6173:            }
        -: 6174:
    #####: 6175:            if (!argValues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6176:                valueFlowForward(const_cast<Token *>(functionScope->bodyStart->next()),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 6177:                                 functionScope->bodyEnd,
        -: 6178:                                 &arg,
        -: 6179:                                 arg.declarationId(),
        -: 6180:                                 argValues,
        -: 6181:                                 false,
        -: 6182:                                 false,
        -: 6183:                                 tokenlist,
        -: 6184:                                 errorLogger,
        -: 6185:                                 settings);
        -: 6186:        }
        -: 6187:    }
      224: 6188:}
        -: 6189:
function _ZL30valueFlowUnknownFunctionReturnP9TokenListPK8Settings called 194 returned 100% blocks executed 7%
      194: 6190:static void valueFlowUnknownFunctionReturn(TokenList *tokenlist, const Settings *settings)
        -: 6191:{
      194: 6192:    if (settings->checkUnknownFunctionReturn.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      194: 6193:        return;
    #####: 6194:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6195:        if (!tok->astParent() || tok->str() != "(")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6196:            continue;
    #####: 6197:        if (!Token::Match(tok->previous(), "%name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6198:            continue;
    #####: 6199:        if (settings->checkUnknownFunctionReturn.find(tok->previous()->str()) == settings->checkUnknownFunctionReturn.end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 6200:            continue;
    #####: 6201:        std::vector<MathLib::bigint> unknownValues = settings->library.unknownReturnValues(tok->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 6202:        if (unknownValues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6203:            continue;
        -: 6204:
        -: 6205:        // Get min/max values for return type
    #####: 6206:        const std::string &typestr = settings->library.returnValueType(tok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6207:        MathLib::bigint minvalue, maxvalue;
    #####: 6208:        if (!getMinMaxValues(typestr, settings, &minvalue, &maxvalue))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6209:            continue;
        -: 6210:
    #####: 6211:        for (MathLib::bigint value : unknownValues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####: 6212:            if (value < minvalue)
branch  0 never executed
branch  1 never executed
    #####: 6213:                value = minvalue;
    #####: 6214:            else if (value > maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 6215:                value = maxvalue;
    #####: 6216:            setTokenValue(const_cast<Token *>(tok), ValueFlow::Value(value), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 6217:        }
        -: 6218:    }
        -: 6219:}
        -: 6220:
function _ZN9ValueFlow5ValueC2EPK5Tokenx called 329 returned 100% blocks executed 50%
      329: 6221:ValueFlow::Value::Value(const Token* c, long long val)
        -: 6222:    : valueType(INT),
        -: 6223:      bound(Bound::Point),
        -: 6224:      intvalue(val),
        -: 6225:      tokvalue(nullptr),
        -: 6226:      floatValue(0.0),
        -: 6227:      moveKind(MoveKind::NonMovedVariable),
        -: 6228:      varvalue(val),
        -: 6229:      condition(c),
        -: 6230:      varId(0U),
        -: 6231:      safe(false),
        -: 6232:      conditional(false),
        -: 6233:      defaultArg(false),
        -: 6234:      indirect(0),
        -: 6235:      lifetimeKind(LifetimeKind::Object),
        -: 6236:      lifetimeScope(LifetimeScope::Local),
      329: 6237:      valueKind(ValueKind::Possible)
call    0 returned 100%
call    1 never executed
        -: 6238:{
      329: 6239:    errorPath.emplace_back(c, "Assuming that condition '" + c->expressionString() + "' is not redundant");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
      329: 6240:}
        -: 6241:
function _ZNK9ValueFlow5Value10infoStringB5cxx11Ev called 30 returned 100% blocks executed 9%
       30: 6242:std::string ValueFlow::Value::infoString() const
        -: 6243:{
       30: 6244:    switch (valueType) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
       30: 6245:    case INT:
       30: 6246:        return MathLib::toString(intvalue);
call    0 returned 100%
    #####: 6247:    case TOK:
    #####: 6248:        return tokvalue->str();
call    0 never executed
call    1 never executed
    #####: 6249:    case FLOAT:
    #####: 6250:        return MathLib::toString(floatValue);
call    0 never executed
    #####: 6251:    case MOVED:
    #####: 6252:        return "<Moved>";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 6253:    case UNINIT:
    #####: 6254:        return "<Uninit>";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 6255:    case BUFFER_SIZE:
        -: 6256:    case CONTAINER_SIZE:
    #####: 6257:        return "size=" + MathLib::toString(intvalue);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 6258:    case LIFETIME:
    #####: 6259:        return "lifetime=" + tokvalue->str();
call    0 never executed
call    1 never executed
        -: 6260:    };
    #####: 6261:    throw InternalError(nullptr, "Invalid ValueFlow Value type");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 6262:}
        -: 6263:
function _ZN9ValueFlow24valueFlowConstantFoldASTEP5TokenPK8Settings called 0 returned 0% blocks executed 0%
    #####: 6264:const ValueFlow::Value *ValueFlow::valueFlowConstantFoldAST(Token *expr, const Settings *settings)
        -: 6265:{
    #####: 6266:    if (expr && expr->values().empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6267:        valueFlowConstantFoldAST(expr->astOperand1(), settings);
call    0 never executed
call    1 never executed
    #####: 6268:        valueFlowConstantFoldAST(expr->astOperand2(), settings);
call    0 never executed
call    1 never executed
    #####: 6269:        valueFlowSetConstantValue(expr, settings, true /* TODO: this is a guess */);
call    0 never executed
        -: 6270:    }
    #####: 6271:    return expr && expr->hasKnownValue() ? &expr->values().front() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -: 6272:}
        -: 6273:
function _ZL14getTotalValuesP9TokenList called 642 returned 100% blocks executed 100%
      642: 6274:static std::size_t getTotalValues(TokenList *tokenlist)
        -: 6275:{
      642: 6276:    std::size_t n = 1;
   111467: 6277:    for (Token *tok = tokenlist->front(); tok; tok = tok->next())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
   110825: 6278:        n += tok->values().size();
call    0 returned 100%
call    1 returned 100%
      642: 6279:    return n;
        -: 6280:}
        -: 6281:
function _ZN9ValueFlow9setValuesEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 194 returned 100% blocks executed 100%
      194: 6282:void ValueFlow::setValues(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 6283:{
    36393: 6284:    for (Token *tok = tokenlist->front(); tok; tok = tok->next())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    36199: 6285:        tok->clearValueFlow();
call    0 returned 100%
        -: 6286:
      194: 6287:    valueFlowNumber(tokenlist);
call    0 returned 100%
      194: 6288:    valueFlowString(tokenlist);
call    0 returned 100%
      194: 6289:    valueFlowArray(tokenlist);
call    0 returned 100%
      194: 6290:    valueFlowUnknownFunctionReturn(tokenlist, settings);
call    0 returned 100%
      194: 6291:    valueFlowGlobalConstVar(tokenlist, settings);
call    0 returned 100%
      194: 6292:    valueFlowGlobalStaticVar(tokenlist, settings);
call    0 returned 100%
      194: 6293:    valueFlowPointerAlias(tokenlist);
call    0 returned 100%
      194: 6294:    valueFlowLifetime(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      194: 6295:    valueFlowFunctionReturn(tokenlist, errorLogger);
call    0 returned 100%
      194: 6296:    valueFlowBitAnd(tokenlist);
call    0 returned 100%
      194: 6297:    valueFlowSameExpressions(tokenlist);
call    0 returned 100%
      194: 6298:    valueFlowFwdAnalysis(tokenlist, settings);
call    0 returned 100%
        -: 6299:
        -: 6300:    // Temporary hack.. run valueflow until there is nothing to update or timeout expires
      194: 6301:    const std::time_t timeout = std::time(nullptr) + TIMEOUT;
call    0 returned 100%
      194: 6302:    std::size_t values = 0;
      642: 6303:    while (std::time(nullptr) < timeout && values < getTotalValues(tokenlist)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 54% (fallthrough)
branch  5 taken 46%
branch  6 taken 54% (fallthrough)
branch  7 taken 46%
      224: 6304:        values = getTotalValues(tokenlist);
call    0 returned 100%
      224: 6305:        valueFlowPointerAliasDeref(tokenlist);
call    0 returned 100%
      224: 6306:        valueFlowArrayBool(tokenlist);
call    0 returned 100%
      224: 6307:        valueFlowRightShift(tokenlist, settings);
call    0 returned 100%
      224: 6308:        valueFlowOppositeCondition(symboldatabase, settings);
call    0 returned 100%
      224: 6309:        valueFlowTerminatingCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6310:        valueFlowBeforeCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6311:        valueFlowAfterMove(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6312:        valueFlowAfterAssign(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6313:        valueFlowAfterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6314:        valueFlowInferCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6315:        valueFlowSwitchVariable(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6316:        valueFlowForLoop(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6317:        valueFlowSubFunction(tokenlist, errorLogger, settings);
call    0 returned 100%
      224: 6318:        valueFlowFunctionDefaultParameter(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6319:        valueFlowUninit(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      224: 6320:        if (tokenlist->isCPP()) {
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
       90: 6321:            valueFlowSmartPointer(tokenlist, errorLogger, settings);
call    0 returned 100%
       90: 6322:            valueFlowContainerSize(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
       90: 6323:            valueFlowContainerAfterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
        -: 6324:        }
      224: 6325:        valueFlowSafeFunctions(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
        -: 6326:    }
        -: 6327:
      194: 6328:    valueFlowDynamicBufferSize(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      194: 6329:}
        -: 6330:
        -: 6331:
function _ZN9ValueFlow29eitherTheConditionIsRedundantB5cxx11EPK5Token called 0 returned 0% blocks executed 0%
    #####: 6332:std::string ValueFlow::eitherTheConditionIsRedundant(const Token *condition)
        -: 6333:{
    #####: 6334:    if (!condition)
branch  0 never executed
branch  1 never executed
    #####: 6335:        return "Either the condition is redundant";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 6336:    if (condition->str() == "case") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6337:        std::string expr;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 6338:        for (const Token *tok = condition; tok && tok->str() != ":"; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 6339:            expr += tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6340:            if (Token::Match(tok, "%name%|%num% %name%|%num%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6341:                expr += ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6342:        }
    #####: 6343:        return "Either the switch case '" + expr + "' is redundant";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 6344:    }
    #####: 6345:    return "Either the condition '" + condition->expressionString() + "' is redundant";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
function _GLOBAL__sub_I__Z18setValueUpperBoundRN9ValueFlow5ValueEb called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 6346:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
