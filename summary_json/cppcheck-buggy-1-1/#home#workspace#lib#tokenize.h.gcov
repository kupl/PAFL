        -:    0:Source:/home/workspace/lib/tokenize.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/tokenize.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/tokenize.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#ifndef tokenizeH
        -:   21:#define tokenizeH
        -:   22://---------------------------------------------------------------------------
        -:   23:
        -:   24:#include "config.h"
        -:   25:#include "errorlogger.h"
        -:   26:#include "tokenlist.h"
        -:   27:
        -:   28:#include <ctime>
        -:   29:#include <list>
        -:   30:#include <map>
        -:   31:#include <string>
        -:   32:#include <stack>
        -:   33:
        -:   34:class Settings;
        -:   35:class SymbolDatabase;
        -:   36:class TimerResults;
        -:   37:class Token;
        -:   38:class TemplateSimplifier;
        -:   39:
        -:   40:namespace simplecpp {
        -:   41:    class TokenList;
        -:   42:}
        -:   43:
        -:   44:/// @addtogroup Core
        -:   45:/// @{
        -:   46:
        -:   47:/** @brief The main purpose is to tokenize the source code. It also has functions that simplify the token list */
        -:   48:class CPPCHECKLIB Tokenizer {
        -:   49:
        -:   50:    friend class TestSimplifyTokens;
        -:   51:    friend class TestSimplifyTypedef;
        -:   52:    friend class TestSimplifyUsing;
        -:   53:    friend class TestTokenizer;
        -:   54:    friend class SymbolDatabase;
        -:   55:    friend class TestSimplifyTemplate;
        -:   56:    friend class TemplateSimplifier;
        -:   57:
        -:   58:    /** Class used in Tokenizer::setVarIdPass1 */
function _ZN9Tokenizer11VariableMapD2Ev called 194 returned 100% blocks executed 100%
      194:   59:    class VariableMap {
call    0 returned 100%
call    1 returned 100%
        -:   60:    private:
        -:   61:        std::map<std::string, int> mVariableId;
        -:   62:        std::stack<std::list<std::pair<std::string,int> > > mScopeInfo;
        -:   63:        mutable nonneg int mVarId;
        -:   64:    public:
        -:   65:        VariableMap();
        -:   66:        void enterScope();
        -:   67:        bool leaveScope();
        -:   68:        void addVariable(const std::string &varname);
        -:   69:        bool hasVariable(const std::string &varname) const;
function _ZNK9Tokenizer11VariableMap4findERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8068 returned 100% blocks executed 100%
     8068:   70:        std::map<std::string,int>::const_iterator find(const std::string &varname) const {
     8068:   71:            return mVariableId.find(varname);
call    0 returned 100%
        -:   72:        }
function _ZNK9Tokenizer11VariableMap3endB5cxx11Ev called 8068 returned 100% blocks executed 100%
     8068:   73:        std::map<std::string,int>::const_iterator end() const {
     8068:   74:            return mVariableId.end();
call    0 returned 100%
        -:   75:        }
function _ZNK9Tokenizer11VariableMap3mapB5cxx11Ev called 13561 returned 100% blocks executed 100%
    13561:   76:        const std::map<std::string,int> &map() const {
    13561:   77:            return mVariableId;
        -:   78:        }
function _ZNK9Tokenizer11VariableMap8getVarIdEv called 5341 returned 100% blocks executed 100%
     5341:   79:        nonneg int *getVarId() const {
     5341:   80:            return &mVarId;
        -:   81:        }
        -:   82:    };
        -:   83:
        -:   84:
        -:   85:public:
        -:   86:    Tokenizer();
        -:   87:    Tokenizer(const Settings * settings, ErrorLogger *errorLogger);
        -:   88:    ~Tokenizer();
        -:   89:
        -:   90:    void setTimerResults(TimerResults *tr) {
        -:   91:        mTimerResults = tr;
        -:   92:    }
        -:   93:
        -:   94:    /** Is the code C. Used for bailouts */
function _ZNK9Tokenizer3isCEv called 0 returned 0% blocks executed 0%
    #####:   95:    bool isC() const {
    #####:   96:        return list.isC();
call    0 never executed
        -:   97:    }
        -:   98:
        -:   99:    /** Is the code CPP. Used for bailouts */
function _ZNK9Tokenizer5isCPPEv called 0 returned 0% blocks executed 0%
    #####:  100:    bool isCPP() const {
    #####:  101:        return list.isCPP();
call    0 never executed
        -:  102:    }
        -:  103:
        -:  104:    /**
        -:  105:     * Check if inner scope ends with a call to a noreturn function
        -:  106:     * \param endScopeToken The '}' token
        -:  107:     * \param unknown set to true if it's unknown if the scope is noreturn
        -:  108:     * \return true if scope ends with a function call that might be 'noreturn'
        -:  109:     */
        -:  110:    bool IsScopeNoReturn(const Token *endScopeToken, bool *unknown = nullptr) const;
        -:  111:
        -:  112:    bool createTokens(std::istream &code, const std::string& FileName);
        -:  113:    void createTokens(const simplecpp::TokenList *tokenList);
        -:  114:
        -:  115:    bool simplifyTokens1(const std::string &configuration);
        -:  116:    /**
        -:  117:     * Tokenize code
        -:  118:     * @param code input stream for code, e.g.
        -:  119:     * \code
        -:  120:     * #file "p.h"
        -:  121:     * class Foo
        -:  122:     * {
        -:  123:     * private:
        -:  124:     * void Bar();
        -:  125:     * };
        -:  126:     *
        -:  127:     * #endfile
        -:  128:     * void Foo::Bar()
        -:  129:     * {
        -:  130:     * }
        -:  131:     * \endcode
        -:  132:     *
        -:  133:     * @param FileName The filename
        -:  134:     * @param configuration E.g. "A" for code where "#ifdef A" is true
        -:  135:     * @return false if source code contains syntax errors
        -:  136:     */
        -:  137:    bool tokenize(std::istream &code,
        -:  138:                  const char FileName[],
        -:  139:                  const std::string &configuration = emptyString);
        -:  140:
        -:  141:    /** Set variable id */
        -:  142:    void setVarId();
        -:  143:    void setVarIdPass1();
        -:  144:    void setVarIdPass2();
        -:  145:
        -:  146:    /**
        -:  147:    * Basic simplification of tokenlist
        -:  148:    *
        -:  149:    * @param FileName The filename to run; used to do
        -:  150:    * markup checks.
        -:  151:    *
        -:  152:    * @return false if there is an error that requires aborting
        -:  153:    * the checking of this file.
        -:  154:    */
        -:  155:    bool simplifyTokenList1(const char FileName[]);
        -:  156:
        -:  157:    void SimplifyNamelessRValueReferences();
        -:  158:
        -:  159:    /**
        -:  160:    * Most aggressive simplification of tokenlist
        -:  161:    *
        -:  162:    * @return false if there is an error that requires aborting
        -:  163:    * the checking of this file.
        -:  164:    */
        -:  165:    bool simplifyTokenList2();
        -:  166:
        -:  167:    /**
        -:  168:     * If --check-headers=no has been given; then remove unneeded code in headers.
        -:  169:     * - All executable code.
        -:  170:     * - Unused types/variables/etc
        -:  171:     */
        -:  172:    void simplifyHeaders();
        -:  173:
        -:  174:    /**
        -:  175:     * Deletes dead code between 'begin' and 'end'.
        -:  176:     * In general not everything can be erased, such as:
        -:  177:     * - code after labels;
        -:  178:     * - code outside the scope where the function is called;
        -:  179:     * - code after a change of scope caused by 'switch(...);'
        -:  180:     *   instructions, like 'case %any%;' or 'default;'
        -:  181:     * Also, if the dead code contains a 'switch' block
        -:  182:     * and inside it there's a label, the function removes all
        -:  183:     * the 'switch(..)' tokens and every occurrence of 'case %any%; | default;'
        -:  184:     * expression, such as the 'switch' block is reduced to a simple block.
        -:  185:     *
        -:  186:     * @param begin Tokens after this have a possibility to be erased.
        -:  187:     * @param end Tokens before this have a possibility to be erased.
        -:  188:     */
        -:  189:    static void eraseDeadCode(Token *begin, const Token *end);
        -:  190:
        -:  191:    /**
        -:  192:     * Simplify '* & ( %name% ) =' or any combination of '* &' and '()'
        -:  193:     * parentheses around '%name%' to '%name% ='
        -:  194:     */
        -:  195:    void simplifyMulAndParens();
        -:  196:
        -:  197:    /**
        -:  198:     * Calculates sizeof value for given type.
        -:  199:     * @param type Token which will contain e.g. "int", "*", or string.
        -:  200:     * @return sizeof for given type, or 0 if it can't be calculated.
        -:  201:     */
        -:  202:    nonneg int sizeOfType(const Token *type) const;
        -:  203:
        -:  204:    /**
        -:  205:     * Try to determine if function parameter is passed by value by looking
        -:  206:     * at the function declaration.
        -:  207:     * @param fpar token for function parameter in the function call
        -:  208:     * @return true if the parameter is passed by value. if unsure, false is returned
        -:  209:     */
        -:  210:    bool isFunctionParameterPassedByValue(const Token *fpar) const;
        -:  211:
        -:  212:    /** Simplify assignment in function call "f(x=g());" => "x=g();f(x);"
        -:  213:     */
        -:  214:    void simplifyAssignmentInFunctionCall();
        -:  215:
        -:  216:    /** Simplify assignment where rhs is a block : "x=({123;});" => "{x=123;}" */
        -:  217:    void simplifyAssignmentBlock();
        -:  218:
        -:  219:    /**
        -:  220:     * Simplify constant calculations such as "1+2" => "3"
        -:  221:     * @return true if modifications to token-list are done.
        -:  222:     *         false if no modifications are done.
        -:  223:     */
        -:  224:    bool simplifyCalculations();
        -:  225:
        -:  226:    /**
        -:  227:     * Simplify dereferencing a pointer offset by a number:
        -:  228:     *     "*(ptr + num)" => "ptr[num]"
        -:  229:     *     "*(ptr - num)" => "ptr[-num]"
        -:  230:     */
        -:  231:    void simplifyOffsetPointerDereference();
        -:  232:
        -:  233:    /**
        -:  234:       * Simplify referencing a pointer offset:
        -:  235:       *     "Replace "&str[num]" => "(str + num)"
        -:  236:       */
        -:  237:    void simplifyOffsetPointerReference();
        -:  238:
        -:  239:    /** Insert array size where it isn't given */
        -:  240:    void arraySize();
        -:  241:
        -:  242:    /** Simplify labels and 'case|default' syntaxes.
        -:  243:      */
        -:  244:    void simplifyLabelsCaseDefault();
        -:  245:
        -:  246:    /** simplify case ranges (gcc extension)
        -:  247:      */
        -:  248:    void simplifyCaseRange();
        -:  249:
        -:  250:    /** Remove macros in global scope */
        -:  251:    void removeMacrosInGlobalScope();
        -:  252:
        -:  253:    /** Remove undefined macro in class definition:
        -:  254:      * class DLLEXPORT Fred { };
        -:  255:      * class Fred FINAL : Base { };
        -:  256:      */
        -:  257:    void removeMacroInClassDef();
        -:  258:
        -:  259:    /** Remove unknown macro in variable declarations: PROGMEM char x; */
        -:  260:    void removeMacroInVarDecl();
        -:  261:
        -:  262:    /** Remove redundant assignment */
        -:  263:    void removeRedundantAssignment();
        -:  264:
        -:  265:    /** Simplifies some realloc usage like
        -:  266:      * 'x = realloc (0, n);' => 'x = malloc(n);'
        -:  267:      * 'x = realloc (y, 0);' => 'x = 0; free(y);'
        -:  268:      */
        -:  269:    void simplifyRealloc();
        -:  270:
        -:  271:    /** Add parentheses for sizeof: sizeof x => sizeof(x) */
        -:  272:    void sizeofAddParentheses();
        -:  273:
        -:  274:    /**
        -:  275:     * Replace sizeof() to appropriate size.
        -:  276:     * @return true if modifications to token-list are done.
        -:  277:     *         false if no modifications are done.
        -:  278:     */
        -:  279:    bool simplifySizeof();
        -:  280:
        -:  281:    /**
        -:  282:     * Simplify variable declarations (split up)
        -:  283:     * \param only_k_r_fpar Only simplify K&R function parameters
        -:  284:     */
        -:  285:    void simplifyVarDecl(const bool only_k_r_fpar);
        -:  286:    void simplifyVarDecl(Token * tokBegin, const Token * const tokEnd, const bool only_k_r_fpar);
        -:  287:
        -:  288:    /**
        -:  289:     * Simplify variable initialization
        -:  290:     * '; int *p(0);' => '; int *p = 0;'
        -:  291:     */
        -:  292:    void simplifyInitVar();
        -:  293:    Token * initVar(Token * tok);
        -:  294:
        -:  295:    /**
        -:  296:     * Simplify easy constant '?:' operation
        -:  297:     * Example: 0 ? (2/0) : 0 => 0
        -:  298:     * @return true if something is modified
        -:  299:     *         false if nothing is done.
        -:  300:     */
        -:  301:    bool simplifyConstTernaryOp();
        -:  302:
        -:  303:    /**
        -:  304:     * Simplify compound assignments
        -:  305:     * Example: ";a+=b;" => ";a=a+b;"
        -:  306:     */
        -:  307:    void simplifyCompoundAssignment();
        -:  308:
        -:  309:    /**
        -:  310:     * Simplify the location of "static" and "const" qualifiers in
        -:  311:     * a variable declaration or definition.
        -:  312:     * Example: "int static const a;" => "static const a;"
        -:  313:     * Example: "long long const static b;" => "static const long long b;"
        -:  314:     */
        -:  315:    void simplifyStaticConst();
        -:  316:
        -:  317:    /**
        -:  318:     * Simplify assignments in "if" and "while" conditions
        -:  319:     * Example: "if(a=b);" => "a=b;if(a);"
        -:  320:     * Example: "while(a=b) { f(a); }" => "a = b; while(a){ f(a); a = b; }"
        -:  321:     * Example: "do { f(a); } while(a=b);" => "do { f(a); a = b; } while(a);"
        -:  322:     */
        -:  323:    void simplifyIfAndWhileAssign();
        -:  324:
        -:  325:    /**
        -:  326:     * Simplify multiple assignments.
        -:  327:     * Example: "a = b = c = 0;" => "a = 0; b = 0; c = 0;"
        -:  328:     */
        -:  329:    void simplifyVariableMultipleAssign();
        -:  330:
        -:  331:    /**
        -:  332:     * Simplify the 'C Alternative Tokens'
        -:  333:     * Examples:
        -:  334:     * "if(s and t)" => "if(s && t)"
        -:  335:     * "while((r bitand s) and not t)" => while((r & s) && !t)"
        -:  336:     * "a and_eq b;" => "a &= b;"
        -:  337:     */
        -:  338:    bool simplifyCAlternativeTokens();
        -:  339:
        -:  340:    /**
        -:  341:     * Simplify comma into a semicolon when possible:
        -:  342:     * - "delete a, delete b" => "delete a; delete b;"
        -:  343:     * - "a = 0, b = 0;" => "a = 0; b = 0;"
        -:  344:     * - "return a(), b;" => "a(); return b;"
        -:  345:     */
        -:  346:    void simplifyComma();
        -:  347:
        -:  348:    /** Add braces to an if-block, for-block, etc.
        -:  349:     * @return true if no syntax errors
        -:  350:     */
        -:  351:    bool simplifyAddBraces();
        -:  352:
        -:  353:    /** Add braces to an if-block, for-block, etc.
        -:  354:     * for command starting at token including else-block
        -:  355:     * @return last token of command
        -:  356:     *         or input token in case of an error where no braces are added
        -:  357:     *         or NULL when syntaxError is called
        -:  358:     */
        -:  359:    Token * simplifyAddBracesToCommand(Token * tok);
        -:  360:
        -:  361:    /** Add pair of braces to an single if-block, else-block, for-block, etc.
        -:  362:     * for command starting at token
        -:  363:     * @return last token of command
        -:  364:     *         or input token in case of an error where no braces are added
        -:  365:     *         or NULL when syntaxError is called
        -:  366:     */
        -:  367:    Token * simplifyAddBracesPair(Token *tok, bool commandWithCondition);
        -:  368:
        -:  369:    /**
        -:  370:     * typedef A mytype;
        -:  371:     * mytype c;
        -:  372:     *
        -:  373:     * Becomes:
        -:  374:     * typedef A mytype;
        -:  375:     * A c;
        -:  376:     */
        -:  377:    void simplifyTypedef();
        -:  378:
        -:  379:    /**
        -:  380:     */
        -:  381:    bool simplifyUsing();
        -:  382:
        -:  383:    /**
        -:  384:     * Simplify casts
        -:  385:     */
        -:  386:    void simplifyCasts();
        -:  387:
        -:  388:    /**
        -:  389:     * Change (multiple) arrays to (multiple) pointers.
        -:  390:     */
        -:  391:    void simplifyUndefinedSizeArray();
        -:  392:
        -:  393:    /**
        -:  394:     * A simplify function that replaces a variable with its value in cases
        -:  395:     * when the value is known. e.g. "x=10; if(x)" => "x=10;if(10)"
        -:  396:     *
        -:  397:     * @return true if modifications to token-list are done.
        -:  398:     *         false if no modifications are done.
        -:  399:     */
        -:  400:    bool simplifyKnownVariables();
        -:  401:
        -:  402:    /**
        -:  403:     * Utility function for simplifyKnownVariables. Get data about an
        -:  404:     * assigned variable.
        -:  405:     */
        -:  406:    static bool simplifyKnownVariablesGetData(nonneg int varid, Token **_tok2, Token **_tok3, std::string &value, nonneg int &valueVarId, bool &valueIsPointer, bool floatvar);
        -:  407:
        -:  408:    /**
        -:  409:     * utility function for simplifyKnownVariables. Perform simplification
        -:  410:     * of a given variable
        -:  411:     */
        -:  412:    bool simplifyKnownVariablesSimplify(Token **tok2, Token *tok3, nonneg int varid, const std::string &structname, std::string &value, nonneg int valueVarId, bool valueIsPointer, const Token * const valueToken, int indentlevel) const;
        -:  413:
        -:  414:    /** Simplify useless C++ empty namespaces, like: 'namespace %name% { }'*/
        -:  415:    void simplifyEmptyNamespaces();
        -:  416:
        -:  417:    /** Simplify redundant code placed after control flow statements :
        -:  418:     * 'return', 'throw', 'goto', 'break' and 'continue'
        -:  419:     */
        -:  420:    void simplifyFlowControl();
        -:  421:
        -:  422:    /** Expand nested strcat() calls. */
        -:  423:    void simplifyNestedStrcat();
        -:  424:
        -:  425:    /** Simplify "if else" */
        -:  426:    void elseif();
        -:  427:
        -:  428:    /** Simplify conditions
        -:  429:     * @return true if something is modified
        -:  430:     *         false if nothing is done.
        -:  431:     */
        -:  432:    bool simplifyConditions();
        -:  433:
        -:  434:    /** Remove redundant code, e.g. if( false ) { int a; } should be
        -:  435:     * removed, because it is never executed.
        -:  436:     * @return true if something is modified
        -:  437:     *         false if nothing is done.
        -:  438:     */
        -:  439:    bool removeRedundantConditions();
        -:  440:
        -:  441:    /**
        -:  442:     * Remove redundant for:
        -:  443:     * "for (x=0;x<1;x++) { }" => "{ x = 1; }"
        -:  444:     */
        -:  445:    void removeRedundantFor();
        -:  446:
        -:  447:
        -:  448:    /**
        -:  449:     * Reduces "; ;" to ";", except in "( ; ; )"
        -:  450:     */
        -:  451:    void removeRedundantSemicolons();
        -:  452:
        -:  453:    /** Simplify function calls - constant return value
        -:  454:     * @return true if something is modified
        -:  455:     *         false if nothing is done.
        -:  456:     */
        -:  457:    bool simplifyFunctionReturn();
        -:  458:
        -:  459:    /** Struct simplification
        -:  460:     * "struct S { } s;" => "struct S { }; S s;"
        -:  461:     */
        -:  462:
        -:  463:    void simplifyStructDecl();
        -:  464:
        -:  465:    /**
        -:  466:     * Remove redundant parentheses:
        -:  467:     * - "((x))" => "(x)"
        -:  468:     * - "(function())" => "function()"
        -:  469:     * - "(delete x)" => "delete x"
        -:  470:     * - "(delete [] x)" => "delete [] x"
        -:  471:     * @return true if modifications to token-list are done.
        -:  472:     *         false if no modifications are done.
        -:  473:     */
        -:  474:    bool simplifyRedundantParentheses();
        -:  475:
        -:  476:    void simplifyCharAt();
        -:  477:
        -:  478:    /** Simplify references */
        -:  479:    void simplifyReference();
        -:  480:
        -:  481:    /**
        -:  482:     * Simplify functions like "void f(x) int x; {"
        -:  483:     * into "void f(int x) {"
        -:  484:     */
        -:  485:    void simplifyFunctionParameters();
        -:  486:
        -:  487:    /**
        -:  488:     * Simplify templates
        -:  489:     */
        -:  490:    void simplifyTemplates();
        -:  491:
        -:  492:    void simplifyDoublePlusAndDoubleMinus();
        -:  493:
        -:  494:    void simplifyRedundantConsecutiveBraces();
        -:  495:
        -:  496:    void simplifyArrayAccessSyntax();
        -:  497:
        -:  498:    void simplifyParameterVoid();
        -:  499:
        -:  500:    void fillTypeSizes();
        -:  501:
        -:  502:    void combineOperators();
        -:  503:
        -:  504:    void combineStringAndCharLiterals();
        -:  505:
        -:  506:    void concatenateNegativeNumberAndAnyPositive();
        -:  507:
        -:  508:    void simplifyExternC();
        -:  509:
        -:  510:    void simplifyRoundCurlyParentheses();
        -:  511:
        -:  512:    void simplifyTypeIntrinsics();
        -:  513:
        -:  514:    void simplifySQL();
        -:  515:
        -:  516:    void checkForEnumsWithTypedef();
        -:  517:
        -:  518:    void findComplicatedSyntaxErrorsInTemplates();
        -:  519:
        -:  520:    /**
        -:  521:     * Simplify e.g. 'atol("0")' into '0'
        -:  522:     */
        -:  523:    void simplifyMathFunctions();
        -:  524:
        -:  525:    /**
        -:  526:     * Simplify e.g. 'sin(0)' into '0'
        -:  527:     */
        -:  528:    void simplifyMathExpressions();
        -:  529:
        -:  530:    /**
        -:  531:     * Modify strings in the token list by replacing hex and oct
        -:  532:     * values. E.g. "\x61" -> "a" and "\000" -> "\0"
        -:  533:     * @param source The string to be modified, e.g. "\x61"
        -:  534:     * @return Modified string, e.g. "a"
        -:  535:     */
        -:  536:    static std::string simplifyString(const std::string &source);
        -:  537:
        -:  538:    /**
        -:  539:     * is token pointing at function head?
        -:  540:     * @param tok         A '(' or ')' token in a possible function head
        -:  541:     * @param endsWith    string after function head
        -:  542:     * @return token matching with endsWith if syntax seems to be a function head else nullptr
        -:  543:     */
        -:  544:    const Token * isFunctionHead(const Token *tok, const std::string &endsWith) const;
        -:  545:
        -:  546:    /**
        -:  547:     * is token pointing at function head?
        -:  548:     * @param tok         A '(' or ')' token in a possible function head
        -:  549:     * @param endsWith    string after function head
        -:  550:     * @param cpp         c++ code
        -:  551:     * @return token matching with endsWith if syntax seems to be a function head else nullptr
        -:  552:     */
        -:  553:    static const Token * isFunctionHead(const Token *tok, const std::string &endsWith, bool cpp);
        -:  554:
        -:  555:private:
        -:  556:
        -:  557:    /**
        -:  558:     * simplify "while (0)"
        -:  559:     */
        -:  560:    void simplifyWhile0();
        -:  561:
        -:  562:    /**
        -:  563:     * Simplify while(func() && errno==EINTR)
        -:  564:     */
        -:  565:    void simplifyErrNoInWhile();
        -:  566:
        -:  567:    /**
        -:  568:     * Simplify while(func(f))
        -:  569:     */
        -:  570:    void simplifyFuncInWhile();
        -:  571:
        -:  572:    /**
        -:  573:     * Remove "std::" before some function names
        -:  574:     */
        -:  575:    void simplifyStd();
        -:  576:
        -:  577:    /** Simplify pointer to standard type (C only) */
        -:  578:    void simplifyPointerToStandardType();
        -:  579:
        -:  580:    /** Simplify function pointers */
        -:  581:    void simplifyFunctionPointers();
        -:  582:
        -:  583:    /**
        -:  584:     * Send error message to error logger about internal bug.
        -:  585:     * @param tok the token that this bug concerns.
        -:  586:     */
        -:  587:    void cppcheckError(const Token *tok) const;
        -:  588:
        -:  589:    /**
        -:  590:     * Setup links for tokens so that one can call Token::link().
        -:  591:     */
        -:  592:    void createLinks();
        -:  593:
        -:  594:    /**
        -:  595:     * Setup links between < and >.
        -:  596:     */
        -:  597:    void createLinks2();
        -:  598:
        -:  599:public:
        -:  600:
        -:  601:    /** Syntax error */
        -:  602:    void syntaxError(const Token *tok, const std::string &code = "") const;
        -:  603:
        -:  604:    /** Syntax error. Unmatched character. */
        -:  605:    void unmatchedToken(const Token *tok) const;
        -:  606:
        -:  607:    /** Syntax error. C++ code in C file. */
        -:  608:    void syntaxErrorC(const Token *tok, const std::string &what) const;
        -:  609:
        -:  610:    /** Warn about unknown macro(s), configuration is recommended */
        -:  611:    void unknownMacroError(const Token *tok1) const;
        -:  612:
        -:  613:private:
        -:  614:
        -:  615:    /** Report that there is an unhandled "class x y {" code */
        -:  616:    void unhandled_macro_class_x_y(const Token *tok) const;
        -:  617:
        -:  618:    /** Check configuration (unknown macros etc) */
        -:  619:    void checkConfiguration() const;
        -:  620:    void macroWithSemicolonError(const Token *tok, const std::string &macroName) const;
        -:  621:
        -:  622:    /**
        -:  623:     * Is there C++ code in C file?
        -:  624:     */
        -:  625:    void validateC() const;
        -:  626:
        -:  627:    /**
        -:  628:     * assert that tokens are ok - used during debugging for example
        -:  629:     * to catch problems in simplifyTokenList1/2.
        -:  630:     */
        -:  631:    void validate() const;
        -:  632:
        -:  633:    /** Detect garbage code and call syntaxError() if found. */
        -:  634:    void findGarbageCode() const;
        -:  635:
        -:  636:    /** Detect garbage expression */
        -:  637:    static bool isGarbageExpr(const Token *start, const Token *end, bool allowSemicolon);
        -:  638:
        -:  639:    /**
        -:  640:     * Remove __declspec()
        -:  641:     */
        -:  642:    void simplifyDeclspec();
        -:  643:
        -:  644:    /**
        -:  645:     * Remove calling convention
        -:  646:     */
        -:  647:    void simplifyCallingConvention();
        -:  648:
        -:  649:    /**
        -:  650:     * Remove \__attribute\__ ((?))
        -:  651:     */
        -:  652:    void simplifyAttribute();
        -:  653:
        -:  654:    /**
        -:  655:     * Remove \__cppcheck\__ ((?))
        -:  656:     */
        -:  657:    void simplifyCppcheckAttribute();
        -:  658:
        -:  659:    /**
        -:  660:     * Remove keywords "volatile", "inline", "register", and "restrict"
        -:  661:     */
        -:  662:    void simplifyKeyword();
        -:  663:
        -:  664:    /**
        -:  665:     * Remove __asm
        -:  666:     */
        -:  667:    void simplifyAsm();
        -:  668:
        -:  669:    /**
        -:  670:     * asm heuristics, Put ^{} statements in asm()
        -:  671:     */
        -:  672:    void simplifyAsm2();
        -:  673:
        -:  674:    /**
        -:  675:     * Simplify \@&hellip;  (compiler extension)
        -:  676:     */
        -:  677:    void simplifyAt();
        -:  678:
        -:  679:    /**
        -:  680:     * Simplify bitfields - the field width is removed as we don't use it.
        -:  681:     */
        -:  682:    void simplifyBitfields();
        -:  683:
        -:  684:    /**
        -:  685:     * Remove unnecessary member qualification
        -:  686:     */
        -:  687:    void removeUnnecessaryQualification();
        -:  688:
        -:  689:    /**
        -:  690:     * Add std:: in front of std classes, when using namespace std; was given
        -:  691:     */
        -:  692:    void simplifyNamespaceStd();
        -:  693:
        -:  694:    /**
        -:  695:    * Convert Microsoft memory functions
        -:  696:    * CopyMemory(dst, src, len) -> memcpy(dst, src, len)
        -:  697:    * FillMemory(dst, len, val) -> memset(dst, val, len)
        -:  698:    * MoveMemory(dst, src, len) -> memmove(dst, src, len)
        -:  699:    * ZeroMemory(dst, len) -> memset(dst, 0, len)
        -:  700:    */
        -:  701:    void simplifyMicrosoftMemoryFunctions();
        -:  702:
        -:  703:    /**
        -:  704:    * Convert Microsoft string functions
        -:  705:    * _tcscpy -> strcpy
        -:  706:    */
        -:  707:    void simplifyMicrosoftStringFunctions();
        -:  708:
        -:  709:    /**
        -:  710:      * Remove Borland code
        -:  711:      */
        -:  712:    void simplifyBorland();
        -:  713:
        -:  714:    /**
        -:  715:     * Remove Qt signals and slots
        -:  716:     */
        -:  717:    void simplifyQtSignalsSlots();
        -:  718:
        -:  719:    /**
        -:  720:     * Collapse operator name tokens into single token
        -:  721:     * operator = => operator=
        -:  722:     */
        -:  723:    void simplifyOperatorName();
        -:  724:
        -:  725:    /**
        -:  726:    * Remove [[attribute]] (C++11 and later) from TokenList
        -:  727:    */
        -:  728:    void simplifyCPPAttribute();
        -:  729:
        -:  730:    /**
        -:  731:     * Replace strlen(str)
        -:  732:     * @return true if any replacement took place, false else
        -:  733:     * */
        -:  734:    bool simplifyStrlen();
        -:  735:
        -:  736:    /**
        -:  737:     * Convert namespace aliases
        -:  738:     */
        -:  739:    void simplifyNamespaceAliases();
        -:  740:
        -:  741:    /**
        -:  742:     * Convert C++17 style nested namespace to older style
        -:  743:     */
        -:  744:    void simplifyNestedNamespace();
        -:  745:
        -:  746:    /**
        -:  747:    * Prepare ternary operators with parentheses so that the AST can be created
        -:  748:    * */
        -:  749:    void prepareTernaryOpForAST();
        -:  750:
        -:  751:    /**
        -:  752:     * check for duplicate enum definition
        -:  753:     */
        -:  754:    static bool duplicateDefinition(Token **tokPtr);
        -:  755:
        -:  756:    /**
        -:  757:     * report error message
        -:  758:     */
        -:  759:    void reportError(const Token* tok, const Severity::SeverityType severity, const std::string& id, const std::string& msg, bool inconclusive = false) const;
        -:  760:    void reportError(const std::list<const Token*>& callstack, Severity::SeverityType severity, const std::string& id, const std::string& msg, bool inconclusive = false) const;
        -:  761:
        -:  762:    bool duplicateTypedef(Token **tokPtr, const Token *name, const Token *typeDef) const;
        -:  763:
        -:  764:    void unsupportedTypedef(const Token *tok) const;
        -:  765:
        -:  766:    void setVarIdClassDeclaration(const Token * const startToken,
        -:  767:                                  const VariableMap &variableMap,
        -:  768:                                  const nonneg int scopeStartVarId,
        -:  769:                                  std::map<int, std::map<std::string,int> >& structMembers);
        -:  770:
        -:  771:    void setVarIdStructMembers(Token **tok1,
        -:  772:                               std::map<int, std::map<std::string, int> >& structMembers,
        -:  773:                               nonneg int *varId);
        -:  774:
        -:  775:    void setVarIdClassFunction(const std::string &classname,
        -:  776:                               Token * const startToken,
        -:  777:                               const Token * const endToken,
        -:  778:                               const std::map<std::string,int> &varlist,
        -:  779:                               std::map<int, std::map<std::string,int> >& structMembers,
        -:  780:                               nonneg int *varId_);
        -:  781:
        -:  782:    /**
        -:  783:     * Simplify e.g. 'return(strncat(temp,"a",1));' into
        -:  784:     * strncat(temp,"a",1); return temp;
        -:  785:     */
        -:  786:    void simplifyReturnStrncat();
        -:  787:
        -:  788:    /**
        -:  789:     * Output list of unknown types.
        -:  790:     */
        -:  791:    void printUnknownTypes() const;
        -:  792:
        -:  793:    /** Find end of SQL (or PL/SQL) block */
        -:  794:    static const Token *findSQLBlockEnd(const Token *tokSQLStart);
        -:  795:
        -:  796:public:
        -:  797:
        -:  798:    /** Was there templates in the code? */
        -:  799:    bool codeWithTemplates() const {
        -:  800:        return mCodeWithTemplates;
        -:  801:    }
        -:  802:
        -:  803:
        -:  804:    void setSettings(const Settings *settings) {
        -:  805:        mSettings = settings;
        -:  806:        list.setSettings(settings);
        -:  807:    }
        -:  808:
        -:  809:    const SymbolDatabase *getSymbolDatabase() const {
        -:  810:        return mSymbolDatabase;
        -:  811:    }
        -:  812:    void createSymbolDatabase();
        -:  813:    void deleteSymbolDatabase();
        -:  814:
        -:  815:    /** print --debug output if debug flags match the simplification:
        -:  816:     * 0=unknown/both simplifications
        -:  817:     * 1=1st simplifications
        -:  818:     * 2=2nd simplifications
        -:  819:     */
        -:  820:    void printDebugOutput(int simplification) const;
        -:  821:
        -:  822:    void dump(std::ostream &out) const;
        -:  823:
        -:  824:    Token *deleteInvalidTypedef(Token *typeDef);
        -:  825:
        -:  826:    /**
        -:  827:     * Get variable count.
        -:  828:     * @return number of variables
        -:  829:     */
        -:  830:    nonneg int varIdCount() const {
        -:  831:        return mVarId;
        -:  832:    }
        -:  833:
        -:  834:    /**
        -:  835:     * Token list: stores all tokens.
        -:  836:     */
        -:  837:    TokenList list;
        -:  838:    // Implement tokens() as a wrapper for convenience when using the TokenList
function _ZNK9Tokenizer6tokensEv called 0 returned 0% blocks executed 0%
    #####:  839:    const Token* tokens() const {
    #####:  840:        return list.front();
call    0 never executed
        -:  841:    }
        -:  842:
        -:  843:    /**
        -:  844:    * Helper function to check whether number is zero (0 or 0.0 or 0E+0) or not?
        -:  845:    * @param s the string to check
        -:  846:    * @return true in case is is zero and false otherwise.
        -:  847:    */
        -:  848:    static bool isZeroNumber(const std::string &s);
        -:  849:
        -:  850:    /**
        -:  851:    * Helper function to check whether number is one (1 or 0.1E+1 or 1E+0) or not?
        -:  852:    * @param s the string to check
        -:  853:    * @return true in case is is one and false otherwise.
        -:  854:    */
        -:  855:    static bool isOneNumber(const std::string &s);
        -:  856:
        -:  857:    /**
        -:  858:    * Helper function to check whether number is two (2 or 0.2E+1 or 2E+0) or not?
        -:  859:    * @param s the string to check
        -:  860:    * @return true in case is is two and false otherwise.
        -:  861:    */
        -:  862:    static bool isTwoNumber(const std::string &s);
        -:  863:
        -:  864:    /**
        -:  865:    * Helper function to check for start of function execution scope.
        -:  866:    * Do not use this in checks.  Use the symbol database.
        -:  867:    * @param tok pointer to end parentheses of parameter list
        -:  868:    * @return pointer to start brace of function scope or nullptr if not start.
        -:  869:    */
        -:  870:    static const Token * startOfExecutableScope(const Token * tok);
        -:  871:
        -:  872:#ifdef MAXTIME
        -:  873:    bool isMaxTime() const {
        -:  874:        return (std::time(0) > mMaxTime);
        -:  875:#else
function _ZN9Tokenizer9isMaxTimeEv called 0 returned 0% blocks executed 0%
    #####:  876:    static bool isMaxTime() {
    #####:  877:        return false;
        -:  878:#endif
        -:  879:    }
        -:  880:
        -:  881:    const Settings *getSettings() const {
        -:  882:        return mSettings;
        -:  883:    }
        -:  884:
        -:  885:    void calculateScopes();
        -:  886:
        -:  887:private:
        -:  888:    /** Disable copy constructor */
        -:  889:    Tokenizer(const Tokenizer &) = delete;
        -:  890:
        -:  891:    /** Disable assignment operator */
        -:  892:    Tokenizer &operator=(const Tokenizer &) = delete;
        -:  893:
        -:  894:    Token *processFunc(Token *tok2, bool inOperator) const;
        -:  895:
        -:  896:    /**
        -:  897:    * Get new variable id.
        -:  898:    * @return new variable id
        -:  899:    */
        -:  900:    nonneg int newVarId() {
        -:  901:        return ++mVarId;
        -:  902:    }
        -:  903:
        -:  904:    /** Set pod types */
        -:  905:    void setPodTypes();
        -:  906:
        -:  907:    /** settings */
        -:  908:    const Settings * mSettings;
        -:  909:
        -:  910:    /** errorlogger */
        -:  911:    ErrorLogger* const mErrorLogger;
        -:  912:
        -:  913:    /** Symbol database that all checks etc can use */
        -:  914:    SymbolDatabase *mSymbolDatabase;
        -:  915:
        -:  916:    TemplateSimplifier *mTemplateSimplifier;
        -:  917:
        -:  918:    /** E.g. "A" for code where "#ifdef A" is true. This is used to
        -:  919:        print additional information in error situations. */
        -:  920:    std::string mConfiguration;
        -:  921:
        -:  922:    /** sizeof information for known types */
        -:  923:    std::map<std::string, int> mTypeSize;
        -:  924:
        -:  925:    /** variable count */
        -:  926:    nonneg int mVarId;
        -:  927:
        -:  928:    /** unnamed count "Unnamed0", "Unnamed1", "Unnamed2", ... */
        -:  929:    nonneg int mUnnamedCount;
        -:  930:
        -:  931:    /**
        -:  932:     * was there any templates? templates that are "unused" are
        -:  933:     * removed from the token list
        -:  934:     */
        -:  935:    bool mCodeWithTemplates;
        -:  936:
        -:  937:    /**
        -:  938:     * TimerResults
        -:  939:     */
        -:  940:    TimerResults *mTimerResults;
        -:  941:
        -:  942:#ifdef MAXTIME
        -:  943:    /** Tokenizer maxtime */
        -:  944:    const std::time_t mMaxTime;
        -:  945:#endif
        -:  946:};
        -:  947:
        -:  948:/// @}
        -:  949:
        -:  950://---------------------------------------------------------------------------
        -:  951:#endif // tokenizeH
