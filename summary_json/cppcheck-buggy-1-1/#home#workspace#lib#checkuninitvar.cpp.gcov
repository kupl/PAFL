        -:    0:Source:/home/workspace/lib/checkuninitvar.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkuninitvar.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkuninitvar.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "checkuninitvar.h"
        -:   22:
        -:   23:#include "astutils.h"
        -:   24:#include "checknullpointer.h"   // CheckNullPointer::isPointerDeref
        -:   25:#include "errorlogger.h"
        -:   26:#include "library.h"
        -:   27:#include "mathlib.h"
        -:   28:#include "settings.h"
        -:   29:#include "symboldatabase.h"
        -:   30:#include "token.h"
        -:   31:#include "tokenize.h"
        -:   32:#include "valueflow.h"
        -:   33:
        -:   34:#include <tinyxml2.h>
        -:   35:
        -:   36:#include <cassert>
        -:   37:#include <cstddef>
        -:   38:#include <list>
        -:   39:#include <map>
        -:   40:#include <stack>
        -:   41:#include <utility>
        -:   42://---------------------------------------------------------------------------
        -:   43:
        -:   44:// Register this check class (by creating a static instance of it)
        -:   45:namespace {
        1:   46:    CheckUninitVar instance;
call    0 returned 100%
call    1 returned 100%
        -:   47:}
        -:   48:
        -:   49://---------------------------------------------------------------------------
        -:   50:
        -:   51:// CWE ids used:
        1:   52:static const struct CWE CWE476(476U);  // NULL Pointer Dereference
call    0 returned 100%
        1:   53:static const struct CWE CWE676(676U);
call    0 returned 100%
        1:   54:static const struct CWE CWE908(908U);
call    0 returned 100%
        1:   55:static const struct CWE CWE825(825U);
call    0 returned 100%
        -:   56:
        -:   57:// get ast parent, skip possible address-of and casts
function _ZL40getAstParentSkipPossibleCastAndAddressOfPK5TokenPb called 0 returned 0% blocks executed 0%
    #####:   58:static const Token *getAstParentSkipPossibleCastAndAddressOf(const Token *vartok, bool *unknown)
        -:   59:{
    #####:   60:    if (unknown)
branch  0 never executed
branch  1 never executed
    #####:   61:        *unknown = false;
    #####:   62:    if (!vartok)
branch  0 never executed
branch  1 never executed
    #####:   63:        return nullptr;
    #####:   64:    const Token *parent = vartok->astParent();
call    0 never executed
    #####:   65:    while (Token::Match(parent, ".|::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   66:        parent = parent->astParent();
call    0 never executed
    #####:   67:    if (!parent)
branch  0 never executed
branch  1 never executed
    #####:   68:        return nullptr;
    #####:   69:    if (parent->isUnaryOp("&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:   70:        parent = parent->astParent();
call    0 never executed
    #####:   71:    else if (parent->str() == "&" && vartok == parent->astOperand2() && Token::Match(parent->astOperand1()->previous(), "( %type% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:   72:        parent = parent->astParent();
call    0 never executed
    #####:   73:        if (unknown)
branch  0 never executed
branch  1 never executed
    #####:   74:            *unknown = true;
        -:   75:    }
    #####:   76:    while (parent && parent->isCast())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   77:        parent = parent->astParent();
call    0 never executed
    #####:   78:    return parent;
        -:   79:}
        -:   80:
function _ZN14CheckUninitVar5checkEv called 0 returned 0% blocks executed 0%
    #####:   81:void CheckUninitVar::check()
        -:   82:{
    #####:   83:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:   84:
    #####:   85:    std::set<std::string> arrayTypeDefs;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   86:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   87:        if (Token::Match(tok, "%name% [") && tok->variable() && Token::Match(tok->variable()->typeStartToken(), "%type% %var% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:   88:            arrayTypeDefs.insert(tok->variable()->typeStartToken()->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:   89:    }
        -:   90:
        -:   91:    // check every executable scope
    #####:   92:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   93:        if (scope.isExecutable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   94:            checkScope(&scope, arrayTypeDefs);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   95:        }
        -:   96:    }
    #####:   97:}
        -:   98:
function _ZN14CheckUninitVar10checkScopeEPK5ScopeRKNSt7__debug3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessISA_ESaISA_EEE called 0 returned 0% blocks executed 0%
    #####:   99:void CheckUninitVar::checkScope(const Scope* scope, const std::set<std::string> &arrayTypeDefs)
        -:  100:{
    #####:  101:    for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  102:        if ((mTokenizer->isCPP() && var.type() && !var.isPointer() && var.type()->needInitialization != Type::NeedInitialization::True) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  103:            var.isStatic() || var.isExtern() || var.isReference())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  104:            continue;
        -:  105:
        -:  106:        // don't warn for try/catch exception variable
    #####:  107:        if (var.isThrow())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:            continue;
        -:  109:
    #####:  110:        if (Token::Match(var.nameToken()->next(), "[({:]"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  111:            continue;
        -:  112:
    #####:  113:        if (Token::Match(var.nameToken(), "%name% =")) { // Variable is initialized, but Rhs might be not
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  114:            checkRhs(var.nameToken(), var, NO_ALLOC, 0U, emptyString);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  115:            continue;
        -:  116:        }
    #####:  117:        if (Token::Match(var.nameToken(), "%name% ) (") && Token::simpleMatch(var.nameToken()->linkAt(2), ") =")) { // Function pointer is initialized, but Rhs might be not
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  118:            checkRhs(var.nameToken()->linkAt(2)->next(), var, NO_ALLOC, 0U, emptyString);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  119:            continue;
        -:  120:        }
        -:  121:
    #####:  122:        if (var.isArray() || var.isPointerToArray()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  123:            const Token *tok = var.nameToken()->next();
call    0 never executed
call    1 never executed
    #####:  124:            if (var.isPointerToArray())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  125:                tok = tok->next();
call    0 never executed
    #####:  126:            while (Token::simpleMatch(tok->link(), "] ["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  127:                tok = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:  128:            if (Token::Match(tok->link(), "] =|{"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  129:                continue;
        -:  130:        }
        -:  131:
    #####:  132:        bool stdtype = mTokenizer->isC() && arrayTypeDefs.find(var.typeStartToken()->str()) == arrayTypeDefs.end();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  133:        const Token* tok = var.typeStartToken();
call    0 never executed
    #####:  134:        for (; tok != var.nameToken() && tok->str() != "<"; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  135:            if (tok->isStandardType() || tok->isEnumType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  136:                stdtype = true;
        -:  137:        }
    #####:  138:        if (var.isArray() && !stdtype)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  139:            continue;
        -:  140:
    #####:  141:        while (tok && tok->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  142:            tok = tok->next();
call    0 never executed
    #####:  143:        if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  144:            continue;
        -:  145:
    #####:  146:        if (tok->astParent() && Token::simpleMatch(tok->astParent()->previous(), "for (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  147:            checkLoopBody(tok->astParent()->link()->next(), var, var.isArray() ? ARRAY : NO_ALLOC, emptyString, true))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  148:            continue;
        -:  149:
    #####:  150:        if (var.isArray()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  151:            Alloc alloc = ARRAY;
    #####:  152:            const std::map<int, VariableValue> variableValue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  153:            bool init = false;
    #####:  154:            for (const Token *parent = var.nameToken(); parent; parent = parent->astParent()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  155:                if (parent->str() == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  156:                    init = true;
        -:  157:            }
    #####:  158:            if (!init)
branch  0 never executed
branch  1 never executed
    #####:  159:                checkScopeForVariable(tok, var, nullptr, nullptr, &alloc, emptyString, variableValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  160:            continue;
        -:  161:        }
    #####:  162:        if (stdtype || var.isPointer()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  163:            Alloc alloc = NO_ALLOC;
    #####:  164:            const std::map<int, VariableValue> variableValue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  165:            checkScopeForVariable(tok, var, nullptr, nullptr, &alloc, emptyString, variableValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  166:        }
    #####:  167:        if (var.type())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:            checkStruct(tok, var);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  169:    }
        -:  170:
    #####:  171:    if (scope->function) {
branch  0 never executed
branch  1 never executed
    #####:  172:        for (const Variable &arg : scope->function->argumentList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  173:            if (arg.declarationId() && Token::Match(arg.typeStartToken(), "%type% * %name% [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  174:                // Treat the pointer as initialized until it is assigned by malloc
    #####:  175:                for (const Token *tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  176:                    if (Token::Match(tok, "[;{}] %varid% = %name% (", arg.declarationId()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  177:                        mSettings->library.returnuninitdata.count(tok->strAt(3)) == 1U) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  178:                        if (arg.typeStartToken()->strAt(-1) == "struct" || (arg.type() && arg.type()->isStructType()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  179:                            checkStruct(tok, arg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  180:                        else if (arg.typeStartToken()->isStandardType() || arg.typeStartToken()->isEnumType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  181:                            Alloc alloc = NO_ALLOC;
    #####:  182:                            const std::map<int, VariableValue> variableValue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  183:                            checkScopeForVariable(tok->next(), arg, nullptr, nullptr, &alloc, emptyString, variableValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  184:                        }
        -:  185:                    }
        -:  186:                }
        -:  187:            }
        -:  188:        }
        -:  189:    }
    #####:  190:}
        -:  191:
function _ZN14CheckUninitVar11checkStructEPK5TokenRK8Variable called 0 returned 0% blocks executed 0%
    #####:  192:void CheckUninitVar::checkStruct(const Token *tok, const Variable &structvar)
        -:  193:{
    #####:  194:    const Token *typeToken = structvar.typeStartToken();
call    0 never executed
    #####:  195:    const SymbolDatabase * symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  196:    for (const Scope *scope2 : symbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  197:        if (scope2->className == typeToken->str() && scope2->numConstructors == 0U) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  198:            for (const Variable &var : scope2->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  199:                if (var.isStatic() || var.hasDefault() || var.isArray() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  200:                    (!mTokenizer->isC() && var.isClass() && (!var.type() || var.type()->needInitialization != Type::NeedInitialization::True)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  201:                    continue;
        -:  202:
        -:  203:                // is the variable declared in a inner union?
    #####:  204:                bool innerunion = false;
    #####:  205:                for (const Scope *innerScope : scope2->nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  206:                    if (innerScope->type == Scope::eUnion) {
branch  0 never executed
branch  1 never executed
    #####:  207:                        if (var.typeStartToken()->linenr() >= innerScope->bodyStart->linenr() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  208:                            var.typeStartToken()->linenr() <= innerScope->bodyEnd->linenr()) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  209:                            innerunion = true;
    #####:  210:                            break;
        -:  211:                        }
        -:  212:                    }
        -:  213:                }
        -:  214:
    #####:  215:                if (!innerunion) {
branch  0 never executed
branch  1 never executed
    #####:  216:                    Alloc alloc = NO_ALLOC;
    #####:  217:                    const Token *tok2 = tok;
    #####:  218:                    if (tok->str() == "}")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  219:                        tok2 = tok2->next();
call    0 never executed
    #####:  220:                    const std::map<int, VariableValue> variableValue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  221:                    checkScopeForVariable(tok2, structvar, nullptr, nullptr, &alloc, var.name(), variableValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  222:                }
        -:  223:            }
        -:  224:        }
        -:  225:    }
    #####:  226:}
        -:  227:
function _Znt13VariableValue called 0 returned 0% blocks executed 0%
    #####:  228:static VariableValue operator!(VariableValue v)
        -:  229:{
    #####:  230:    v.notEqual = !v.notEqual;
    #####:  231:    return v;
        -:  232:}
function _ZeqRK13VariableValuex called 0 returned 0% blocks executed 0%
    #####:  233:static bool operator==(const VariableValue & v, MathLib::bigint i)
        -:  234:{
    #####:  235:    return v.notEqual ? (i != v.value) : (i == v.value);
branch  0 never executed
branch  1 never executed
        -:  236:}
function _ZneRK13VariableValuex called 0 returned 0% blocks executed 0%
    #####:  237:static bool operator!=(const VariableValue & v, MathLib::bigint i)
        -:  238:{
    #####:  239:    return v.notEqual ? (i == v.value) : (i != v.value);
branch  0 never executed
branch  1 never executed
        -:  240:}
        -:  241:
function _ZL26conditionAlwaysTrueOrFalsePK5TokenRKNSt7__debug3mapIi13VariableValueSt4lessIiESaISt4pairIKiS4_EEEEPbSE_ called 0 returned 0% blocks executed 0%
    #####:  242:static void conditionAlwaysTrueOrFalse(const Token *tok, const std::map<int, VariableValue> &variableValue, bool *alwaysTrue, bool *alwaysFalse)
        -:  243:{
    #####:  244:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  245:        return;
        -:  246:
    #####:  247:    if (tok->isName() || tok->str() == ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  248:        while (tok && tok->str() == ".")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  249:            tok = tok->astOperand2();
call    0 never executed
    #####:  250:        const std::map<int, VariableValue>::const_iterator it = variableValue.find(tok ? tok->varId() : ~0U);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  251:        if (it != variableValue.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  252:            *alwaysTrue = (it->second != 0LL);
call    0 never executed
call    1 never executed
    #####:  253:            *alwaysFalse = (it->second == 0LL);
call    0 never executed
call    1 never executed
        -:  254:        }
        -:  255:    }
        -:  256:
    #####:  257:    else if (tok->isComparisonOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  258:        if (tok->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  259:            if (tok->values().front().intvalue)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  260:                *alwaysTrue = true;
        -:  261:            else
    #####:  262:                *alwaysFalse = true;
    #####:  263:            return;
        -:  264:        }
        -:  265:
        -:  266:        const Token *vartok, *numtok;
    #####:  267:        if (tok->astOperand2() && tok->astOperand2()->isNumber()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  268:            vartok = tok->astOperand1();
call    0 never executed
    #####:  269:            numtok = tok->astOperand2();
call    0 never executed
    #####:  270:        } else if (tok->astOperand1() && tok->astOperand1()->isNumber()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  271:            vartok = tok->astOperand2();
call    0 never executed
    #####:  272:            numtok = tok->astOperand1();
call    0 never executed
        -:  273:        } else {
    #####:  274:            return;
        -:  275:        }
        -:  276:
    #####:  277:        while (vartok && vartok->str() == ".")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  278:            vartok = vartok->astOperand2();
call    0 never executed
        -:  279:
    #####:  280:        const std::map<int, VariableValue>::const_iterator it = variableValue.find(vartok ? vartok->varId() : ~0U);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  281:        if (it == variableValue.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  282:            return;
        -:  283:
    #####:  284:        if (tok->str() == "==")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  285:            *alwaysTrue  = (it->second == MathLib::toLongNumber(numtok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  286:        else if (tok->str() == "!=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  287:            *alwaysTrue  = (it->second != MathLib::toLongNumber(numtok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  288:        else
    #####:  289:            return;
    #####:  290:        *alwaysFalse = !(*alwaysTrue);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    }
        -:  292:
    #####:  293:    else if (tok->str() == "!") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  294:        bool t=false,f=false;
    #####:  295:        conditionAlwaysTrueOrFalse(tok->astOperand1(), variableValue, &t, &f);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  296:        if (t||f) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  297:            *alwaysTrue = !t;
    #####:  298:            *alwaysFalse = !f;
        -:  299:        }
        -:  300:    }
        -:  301:
    #####:  302:    else if (tok->str() == "||") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  303:        bool t1=false, f1=false;
    #####:  304:        conditionAlwaysTrueOrFalse(tok->astOperand1(), variableValue, &t1, &f1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  305:        bool t2=false, f2=false;
    #####:  306:        if (!t1)
branch  0 never executed
branch  1 never executed
    #####:  307:            conditionAlwaysTrueOrFalse(tok->astOperand2(), variableValue, &t2, &f2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  308:        *alwaysTrue = (t1 || t2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  309:        *alwaysFalse = (f1 && f2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  310:    }
        -:  311:
    #####:  312:    else if (tok->str() == "&&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  313:        bool t1=false, f1=false;
    #####:  314:        conditionAlwaysTrueOrFalse(tok->astOperand1(), variableValue, &t1, &f1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  315:        bool t2=false, f2=false;
    #####:  316:        if (!f1)
branch  0 never executed
branch  1 never executed
    #####:  317:            conditionAlwaysTrueOrFalse(tok->astOperand2(), variableValue, &t2, &f2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  318:        *alwaysTrue = (t1 && t2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  319:        *alwaysFalse = (f1 || f2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  320:    }
        -:  321:}
        -:  322:
function _ZL14isVariableUsedPK5TokenRK8Variable called 0 returned 0% blocks executed 0%
    #####:  323:static bool isVariableUsed(const Token *tok, const Variable& var)
        -:  324:{
    #####:  325:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  326:        return false;
    #####:  327:    if (tok->str() == "&" && !tok->astOperand2())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  328:        return false;
    #####:  329:    if (tok->isConstOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  330:        return isVariableUsed(tok->astOperand1(),var) || isVariableUsed(tok->astOperand2(),var);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  331:    if (tok->varId() != var.declarationId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  332:        return false;
    #####:  333:    if (!var.isArray())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:        return true;
        -:  335:
    #####:  336:    const Token *parent = tok->astParent();
call    0 never executed
    #####:  337:    while (Token::Match(parent, "[?:]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  338:        parent = parent->astParent();
call    0 never executed
        -:  339:    // no dereference, then array is not "used"
    #####:  340:    if (!Token::Match(parent, "*|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  341:        return false;
    #####:  342:    const Token *parent2 = parent->astParent();
call    0 never executed
        -:  343:    // TODO: handle function calls. There is a TODO assertion in TestUninitVar::uninitvar_arrays
    #####:  344:    return !parent2 || parent2->isConstOp() || (parent2->str() == "=" && parent2->astOperand2() == parent);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  345:}
        -:  346:
function _ZN14CheckUninitVar21checkScopeForVariableEPK5TokenRK8VariablePbS6_PNS_5AllocERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENSt7__debug3mapIi13VariableValueSt4lessIiESaISt4pairIKiSJ_EEEE called 0 returned 0% blocks executed 0%
    #####:  347:bool CheckUninitVar::checkScopeForVariable(const Token *tok, const Variable& var, bool * const possibleInit, bool * const noreturn, Alloc* const alloc, const std::string &membervar, std::map<int, VariableValue> variableValue)
        -:  348:{
    #####:  349:    const bool suppressErrors(possibleInit && *possibleInit);  // Assume that this is a variable delaratkon, rather than a fundef
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  350:    const bool printDebug = mSettings->debugwarnings;
        -:  351:
    #####:  352:    if (possibleInit)
branch  0 never executed
branch  1 never executed
    #####:  353:        *possibleInit = false;
        -:  354:
    #####:  355:    int number_of_if = 0;
        -:  356:
    #####:  357:    if (var.declarationId() == 0U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  358:        return true;
        -:  359:
    #####:  360:    for (; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  361:        // End of scope..
    #####:  362:        if (tok->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  363:            if (number_of_if && possibleInit)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  364:                *possibleInit = true;
        -:  365:
        -:  366:            // might be a noreturn function..
    #####:  367:            if (mTokenizer->IsScopeNoReturn(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  368:                if (noreturn)
branch  0 never executed
branch  1 never executed
    #####:  369:                    *noreturn = true;
    #####:  370:                return false;
        -:  371:            }
        -:  372:
    #####:  373:            break;
        -:  374:        }
        -:  375:
        -:  376:        // Unconditional inner scope or try..
    #####:  377:        if (tok->str() == "{" && Token::Match(tok->previous(), ",|;|{|}|try")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  378:            if (checkScopeForVariable(tok->next(), var, possibleInit, noreturn, alloc, membervar, variableValue))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:  379:                return true;
    #####:  380:            tok = tok->link();
call    0 never executed
    #####:  381:            continue;
        -:  382:        }
        -:  383:
        -:  384:        // assignment with nonzero constant..
    #####:  385:        if (Token::Match(tok->previous(), "[;{}] %var% = - %name% ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  386:            variableValue[tok->varId()] = !VariableValue(0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  387:
        -:  388:        // Inner scope..
    #####:  389:        else if (Token::simpleMatch(tok, "if (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  390:            bool alwaysTrue = false;
    #####:  391:            bool alwaysFalse = false;
        -:  392:
        -:  393:            // Is variable assigned in condition?
    #####:  394:            if (!membervar.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  395:                for (const Token *cond = tok->linkAt(1); cond != tok; cond = cond->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  396:                    if (cond->varId() == var.declarationId() && isMemberVariableAssignment(cond, membervar))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  397:                        return true;
        -:  398:                }
        -:  399:            }
        -:  400:
    #####:  401:            conditionAlwaysTrueOrFalse(tok->next()->astOperand2(), variableValue, &alwaysTrue, &alwaysFalse);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  402:
        -:  403:            // initialization / usage in condition..
    #####:  404:            if (!alwaysTrue && checkIfForWhileHead(tok->next(), var, suppressErrors, bool(number_of_if == 0), *alloc, membervar))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  405:                return true;
        -:  406:
        -:  407:            // checking if a not-zero variable is zero => bail out
    #####:  408:            int condVarId = 0;
    #####:  409:            VariableValue condVarValue(0);
call    0 never executed
    #####:  410:            const Token *condVarTok = nullptr;
    #####:  411:            if (alwaysFalse)
branch  0 never executed
branch  1 never executed
        -:  412:                ;
    #####:  413:            else if (Token::simpleMatch(tok, "if (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  414:                     astIsVariableComparison(tok->next()->astOperand2(), "!=", "0", &condVarTok)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
    #####:  415:                const std::map<int,VariableValue>::const_iterator it = variableValue.find(condVarTok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  416:                if (it != variableValue.end() && it->second != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  417:                    return true;   // this scope is not fully analysed => return true
        -:  418:                else {
    #####:  419:                    condVarId = condVarTok->varId();
call    0 never executed
    #####:  420:                    condVarValue = !VariableValue(0);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  421:                }
    #####:  422:            } else if (Token::simpleMatch(tok, "if (") && Token::Match(tok->next()->astOperand2(), "==|!=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  423:                const Token *condition = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  424:                const Token *lhs = condition->astOperand1();
call    0 never executed
    #####:  425:                const Token *rhs = condition->astOperand2();
call    0 never executed
    #####:  426:                const Token *vartok = rhs && rhs->isNumber() ? lhs : rhs;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  427:                const Token *numtok = rhs && rhs->isNumber() ? rhs : lhs;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  428:                while (Token::simpleMatch(vartok, "."))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  429:                    vartok = vartok->astOperand2();
call    0 never executed
    #####:  430:                if (vartok && vartok->varId() && numtok) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  431:                    const std::map<int,VariableValue>::const_iterator it = variableValue.find(vartok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  432:                    if (it != variableValue.end() && it->second != MathLib::toLongNumber(numtok->str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####:  433:                        return true;   // this scope is not fully analysed => return true
        -:  434:                    else {
    #####:  435:                        condVarId = vartok->varId();
call    0 never executed
    #####:  436:                        condVarValue = VariableValue(MathLib::toLongNumber(numtok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  437:                        if (condition->str() == "!=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  438:                            condVarValue = !condVarValue;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  439:                    }
        -:  440:                }
        -:  441:            }
        -:  442:
        -:  443:            // goto the {
    #####:  444:            tok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  445:
    #####:  446:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  447:                break;
    #####:  448:            if (tok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  449:                bool possibleInitIf((!alwaysTrue && number_of_if > 0) || suppressErrors);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  450:                bool noreturnIf = false;
    #####:  451:                const bool initif = !alwaysFalse && checkScopeForVariable(tok->next(), var, &possibleInitIf, &noreturnIf, alloc, membervar, variableValue);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
        -:  452:
        -:  453:                // bail out for such code:
        -:  454:                //    if (a) x=0;    // conditional initialization
        -:  455:                //    if (b) return; // cppcheck doesn't know if b can be false when a is false.
        -:  456:                //    x++;           // it's possible x is always initialized
    #####:  457:                if (!alwaysTrue && noreturnIf && number_of_if > 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  458:                    if (printDebug) {
branch  0 never executed
branch  1 never executed
    #####:  459:                        std::string condition;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  460:                        for (const Token *tok2 = tok->linkAt(-1); tok2 != tok; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  461:                            condition += tok2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  462:                            if (tok2->isName() && tok2->next()->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  463:                                condition += ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  464:                        }
    #####:  465:                        reportError(tok, Severity::debug, "debug", "bailout uninitialized variable checking for '" + var.name() + "'. can't determine if this condition can be false when previous condition is false: " + condition);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  466:                    }
    #####:  467:                    return true;
        -:  468:                }
        -:  469:
    #####:  470:                if (alwaysTrue && (initif || noreturnIf))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  471:                    return true;
        -:  472:
    #####:  473:                std::map<int, VariableValue> varValueIf;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  474:                if (!alwaysFalse && !initif && !noreturnIf) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  475:                    for (const Token *tok2 = tok; tok2 && tok2 != tok->link(); tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  476:                        if (Token::Match(tok2, "[;{}.] %name% = - %name% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  477:                            varValueIf[tok2->next()->varId()] = !VariableValue(0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  478:                        else if (Token::Match(tok2, "[;{}.] %name% = %num% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  479:                            varValueIf[tok2->next()->varId()] = VariableValue(MathLib::toLongNumber(tok2->strAt(3)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  480:                    }
        -:  481:                }
        -:  482:
    #####:  483:                if (initif && condVarId > 0U)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  484:                    variableValue[condVarId] = !condVarValue;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  485:
        -:  486:                // goto the }
    #####:  487:                tok = tok->link();
call    0 never executed
        -:  488:
    #####:  489:                if (!Token::simpleMatch(tok, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  490:                    if (initif || possibleInitIf) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  491:                        ++number_of_if;
    #####:  492:                        if (number_of_if >= 2)
branch  0 never executed
branch  1 never executed
    #####:  493:                            return true;
        -:  494:                    }
        -:  495:                } else {
        -:  496:                    // goto the {
    #####:  497:                    tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  498:
    #####:  499:                    bool possibleInitElse((!alwaysFalse && number_of_if > 0) || suppressErrors);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  500:                    bool noreturnElse = false;
    #####:  501:                    const bool initelse = !alwaysTrue && checkScopeForVariable(tok->next(), var, &possibleInitElse, &noreturnElse, alloc, membervar, variableValue);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
        -:  502:
    #####:  503:                    std::map<int, VariableValue> varValueElse;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  504:                    if (!alwaysTrue && !initelse && !noreturnElse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  505:                        for (const Token *tok2 = tok; tok2 && tok2 != tok->link(); tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  506:                            if (Token::Match(tok2, "[;{}.] %var% = - %name% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  507:                                varValueElse[tok2->next()->varId()] = !VariableValue(0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  508:                            else if (Token::Match(tok2, "[;{}.] %var% = %num% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  509:                                varValueElse[tok2->next()->varId()] = VariableValue(MathLib::toLongNumber(tok2->strAt(3)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  510:                        }
        -:  511:                    }
        -:  512:
    #####:  513:                    if (initelse && condVarId > 0U && !noreturnIf && !noreturnElse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  514:                        variableValue[condVarId] = condVarValue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  515:
        -:  516:                    // goto the }
    #####:  517:                    tok = tok->link();
call    0 never executed
        -:  518:
    #####:  519:                    if ((alwaysFalse || initif || noreturnIf) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  520:                        (alwaysTrue || initelse || noreturnElse))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  521:                        return true;
        -:  522:
    #####:  523:                    if (initif || initelse || possibleInitElse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  524:                        ++number_of_if;
    #####:  525:                    if (!initif && !noreturnIf)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  526:                        variableValue.insert(varValueIf.begin(), varValueIf.end());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  527:                    if (!initelse && !noreturnElse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  528:                        variableValue.insert(varValueElse.begin(), varValueElse.end());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
        -:  529:                }
        -:  530:            }
        -:  531:        }
        -:  532:
        -:  533:        // = { .. }
    #####:  534:        else if (Token::simpleMatch(tok, "= {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  535:            // end token
    #####:  536:            const Token *end = tok->next()->link();
call    0 never executed
call    1 never executed
        -:  537:
        -:  538:            // If address of variable is taken in the block then bail out
    #####:  539:            if (var.isPointer() || var.isArray()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  540:                if (Token::findmatch(tok->tokAt(2), "%varid%", end, var.declarationId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  541:                    return true;
    #####:  542:            } else if (Token::findmatch(tok->tokAt(2), "& %varid%", end, var.declarationId())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  543:                return true;
        -:  544:            }
        -:  545:
    #####:  546:            const Token *errorToken = nullptr;
    #####:  547:            visitAstNodes(tok->next(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
function _ZZN14CheckUninitVar21checkScopeForVariableEPK5TokenRK8VariablePbS6_PNS_5AllocERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENSt7__debug3mapIi13VariableValueSt4lessIiESaISt4pairIKiSJ_EEEEENKUlS2_E_clES2_ called 0 returned 0% blocks executed 0%
    #####:  548:            [&](const Token *child) {
    #####:  549:                if (child->isUnaryOp("&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  550:                    return ChildrenToVisit::none;
    #####:  551:                if (child->str() == "," || child->str() == "{" || child->isConstOp())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  552:                    return ChildrenToVisit::op1_and_op2;
    #####:  553:                if (child->str() == "." && Token::Match(child->astOperand1(), "%varid%", var.declarationId()) && child->astOperand2() && child->astOperand2()->str() == membervar) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  554:                    errorToken = child;
    #####:  555:                    return ChildrenToVisit::done;
        -:  556:                }
    #####:  557:                return ChildrenToVisit::none;
        -:  558:            });
        -:  559:
    #####:  560:            if (errorToken) {
branch  0 never executed
branch  1 never executed
    #####:  561:                uninitStructMemberError(errorToken->astOperand2(), errorToken->astOperand1()->str() + "." + membervar);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####:  562:                return true;
        -:  563:            }
        -:  564:
        -:  565:            // Skip block
    #####:  566:            tok = end;
    #####:  567:            continue;
        -:  568:        }
        -:  569:
        -:  570:        // skip sizeof / offsetof
    #####:  571:        if (Token::Match(tok, "sizeof|typeof|offsetof|decltype ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  572:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -:  573:
        -:  574:        // for/while..
    #####:  575:        else if (Token::Match(tok, "for|while (") || Token::simpleMatch(tok, "do {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  576:            const bool forwhile = Token::Match(tok, "for|while (");
call    0 never executed
        -:  577:
        -:  578:            // is variable initialized in for-head?
    #####:  579:            if (forwhile && checkIfForWhileHead(tok->next(), var, tok->str() == "for", false, *alloc, membervar))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  580:                return true;
        -:  581:
        -:  582:            // goto the {
    #####:  583:            const Token *tok2 = forwhile ? tok->next()->link()->next() : tok->next();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  584:
    #####:  585:            if (tok2 && tok2->str() == "{") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  586:                const bool init = checkLoopBody(tok2, var, *alloc, membervar, (number_of_if > 0) || suppressErrors);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  587:
        -:  588:                // variable is initialized in the loop..
    #####:  589:                if (init)
branch  0 never executed
branch  1 never executed
    #####:  590:                    return true;
        -:  591:
        -:  592:                // is variable used in for-head?
    #####:  593:                bool initcond = false;
    #####:  594:                if (!suppressErrors) {
branch  0 never executed
branch  1 never executed
    #####:  595:                    const Token *startCond = forwhile ? tok->next() : tok->next()->link()->tokAt(2);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  596:                    initcond = checkIfForWhileHead(startCond, var, false, bool(number_of_if == 0), *alloc, membervar);
call    0 never executed
        -:  597:                }
        -:  598:
        -:  599:                // goto "}"
    #####:  600:                tok = tok2->link();
call    0 never executed
        -:  601:
        -:  602:                // do-while => goto ")"
    #####:  603:                if (!forwhile) {
branch  0 never executed
branch  1 never executed
        -:  604:                    // Assert that the tokens are '} while ('
    #####:  605:                    if (!Token::simpleMatch(tok, "} while (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  606:                        if (printDebug)
branch  0 never executed
branch  1 never executed
    #####:  607:                            reportError(tok,Severity::debug,"","assertion failed '} while ('");
call    0 never executed
    #####:  608:                        break;
        -:  609:                    }
        -:  610:
        -:  611:                    // Goto ')'
    #####:  612:                    tok = tok->linkAt(2);
call    0 never executed
        -:  613:
    #####:  614:                    if (!tok)
branch  0 never executed
branch  1 never executed
        -:  615:                        // bailout : invalid code / bad tokenizer
    #####:  616:                        break;
        -:  617:
    #####:  618:                    if (initcond)
branch  0 never executed
branch  1 never executed
        -:  619:                        // variable is initialized in while-condition
    #####:  620:                        return true;
        -:  621:                }
        -:  622:            }
        -:  623:        }
        -:  624:
        -:  625:        // Unknown or unhandled inner scope
    #####:  626:        else if (Token::simpleMatch(tok, ") {") || (Token::Match(tok, "%name% {") && tok->str() != "try")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  627:            if (tok->str() == "struct" || tok->str() == "union") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  628:                tok = tok->linkAt(1);
call    0 never executed
    #####:  629:                continue;
        -:  630:            }
    #####:  631:            return true;
        -:  632:        }
        -:  633:
        -:  634:        // bailout if there is ({
    #####:  635:        if (Token::simpleMatch(tok, "( {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  636:            return true;
        -:  637:        }
        -:  638:
        -:  639:        // bailout if there is assembler code or setjmp
    #####:  640:        if (Token::Match(tok, "asm|setjmp (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  641:            return true;
        -:  642:        }
        -:  643:
        -:  644:        // bailout if there is a goto label
    #####:  645:        if (Token::Match(tok, "[;{}] %name% :")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  646:            return true;
        -:  647:        }
        -:  648:
    #####:  649:        if (tok->str() == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  650:            if (!tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  651:                return true;
    #####:  652:            const bool used1 = isVariableUsed(tok->astOperand2()->astOperand1(), var);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  653:            const bool used0 = isVariableUsed(tok->astOperand2()->astOperand2(), var);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  654:            const bool err = (number_of_if == 0) ? (used1 || used0) : (used1 && used0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  655:            if (err)
branch  0 never executed
branch  1 never executed
    #####:  656:                uninitvarError(tok, var.nameToken()->str(), *alloc);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  657:
        -:  658:            // Todo: skip expression if there is no error
    #####:  659:            return true;
        -:  660:        }
        -:  661:
    #####:  662:        if (Token::Match(tok, "return|break|continue|throw|goto")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  663:            if (noreturn)
branch  0 never executed
branch  1 never executed
    #####:  664:                *noreturn = true;
        -:  665:
    #####:  666:            tok = tok->next();
call    0 never executed
    #####:  667:            while (tok && tok->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  668:                // variable is seen..
    #####:  669:                if (tok->varId() == var.declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  670:                    if (!membervar.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  671:                        if (!suppressErrors && Token::Match(tok, "%name% . %name% ;|%cop%") && tok->strAt(2) == membervar)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  672:                            uninitStructMemberError(tok, tok->str() + "." + membervar);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  673:                    }
        -:  674:
        -:  675:                    // Use variable
    #####:  676:                    else if (!suppressErrors && isVariableUsage(tok, var.isPointer(), *alloc))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  677:                        uninitvarError(tok, tok->str(), *alloc);
call    0 never executed
call    1 never executed
        -:  678:
    #####:  679:                    return true;
        -:  680:                }
        -:  681:
    #####:  682:                else if (Token::Match(tok, "sizeof|typeof|offsetof|decltype ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  683:                    tok = tok->linkAt(1);
call    0 never executed
        -:  684:
    #####:  685:                else if (tok->str() == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  686:                    if (!tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  687:                        return true;
    #####:  688:                    const bool used1 = isVariableUsed(tok->astOperand2()->astOperand1(), var);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  689:                    const bool used0 = isVariableUsed(tok->astOperand2()->astOperand2(), var);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  690:                    const bool err = (number_of_if == 0) ? (used1 || used0) : (used1 && used0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  691:                    if (err)
branch  0 never executed
branch  1 never executed
    #####:  692:                        uninitvarError(tok, var.nameToken()->str(), *alloc);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  693:                    return true;
        -:  694:                }
        -:  695:
    #####:  696:                tok = tok->next();
call    0 never executed
        -:  697:            }
        -:  698:
    #####:  699:            return (noreturn == nullptr);
        -:  700:        }
        -:  701:
        -:  702:        // variable is seen..
    #####:  703:        if (tok->varId() == var.declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  704:            // calling function that returns uninit data through pointer..
    #####:  705:            if (var.isPointer() && Token::simpleMatch(tok->next(), "=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  706:                const Token *rhs = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  707:                while (rhs && rhs->isCast())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  708:                    rhs = rhs->astOperand1();
call    0 never executed
    #####:  709:                if (rhs && Token::Match(rhs->previous(), "%name% (") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  710:                    mSettings->library.returnuninitdata.count(rhs->previous()->str()) > 0U) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  711:                    *alloc = NO_CTOR_CALL;
    #####:  712:                    continue;
        -:  713:                }
        -:  714:            }
    #####:  715:            if (var.isPointer() && (var.typeStartToken()->isStandardType() || var.typeStartToken()->isEnumType() || (var.type() && var.type()->needInitialization == Type::NeedInitialization::True)) && Token::simpleMatch(tok->next(), "= new")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
    #####:  716:                *alloc = CTOR_CALL;
        -:  717:
        -:  718:                // type has constructor(s)
    #####:  719:                if (var.typeScope() && var.typeScope()->numConstructors > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  720:                    return true;
        -:  721:
        -:  722:                // standard or enum type: check if new initializes the allocated memory
    #####:  723:                if (var.typeStartToken()->isStandardType() || var.typeStartToken()->isEnumType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  724:                    // scalar new with initialization
    #####:  725:                    if (Token::Match(tok->next(), "= new %type% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  726:                        return true;
        -:  727:
        -:  728:                    // array new
    #####:  729:                    if (Token::Match(tok->next(), "= new %type% [")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  730:                        const Token* tokClosingBracket=tok->linkAt(4);
call    0 never executed
        -:  731:                        // array new with initialization
    #####:  732:                        if (tokClosingBracket && Token::simpleMatch(tokClosingBracket->next(), "( )"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  733:                            return true;
        -:  734:                    }
        -:  735:                }
        -:  736:
    #####:  737:                continue;
        -:  738:            }
        -:  739:
        -:  740:
    #####:  741:            if (!membervar.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  742:                if (isMemberVariableAssignment(tok, membervar)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  743:                    checkRhs(tok, var, *alloc, number_of_if, membervar);
call    0 never executed
    #####:  744:                    return true;
        -:  745:                }
        -:  746:
    #####:  747:                if (isMemberVariableUsage(tok, var.isPointer(), *alloc, membervar)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  748:                    uninitStructMemberError(tok, tok->str() + "." + membervar);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  749:                    return true;
        -:  750:                }
        -:  751:
    #####:  752:                else if (Token::Match(tok->previous(), "[(,] %name% [,)]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  753:                    return true;
        -:  754:
        -:  755:            } else {
        -:  756:                // Use variable
    #####:  757:                if (!suppressErrors && isVariableUsage(tok, var.isPointer(), *alloc)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  758:                    uninitvarError(tok, tok->str(), *alloc);
call    0 never executed
call    1 never executed
    #####:  759:                    return true;
        -:  760:                }
        -:  761:
        -:  762:                else {
    #####:  763:                    if (tok->strAt(1) == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  764:                        checkRhs(tok, var, *alloc, number_of_if, emptyString);
call    0 never executed
        -:  765:
        -:  766:                    // assume that variable is assigned
    #####:  767:                    return true;
        -:  768:                }
        -:  769:            }
        -:  770:        }
        -:  771:    }
        -:  772:
    #####:  773:    return false;
        -:  774:}
        -:  775:
function _ZN14CheckUninitVar19checkIfForWhileHeadEPK5TokenRK8VariablebbNS_5AllocERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  776:bool CheckUninitVar::checkIfForWhileHead(const Token *startparentheses, const Variable& var, bool suppressErrors, bool isuninit, Alloc alloc, const std::string &membervar)
        -:  777:{
    #####:  778:    const Token * const endpar = startparentheses->link();
call    0 never executed
    #####:  779:    if (Token::Match(startparentheses, "( ! %name% %oror%") && startparentheses->tokAt(2)->getValue(0))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  780:        suppressErrors = true;
    #####:  781:    for (const Token *tok = startparentheses->next(); tok && tok != endpar; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  782:        if (tok->varId() == var.declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  783:            if (Token::Match(tok, "%name% . %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  784:                if (membervar.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  785:                    return true;
    #####:  786:                if (tok->strAt(2) == membervar) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  787:                    if (isMemberVariableAssignment(tok, membervar))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  788:                        return true;
        -:  789:
    #####:  790:                    if (!suppressErrors && isMemberVariableUsage(tok, var.isPointer(), alloc, membervar))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  791:                        uninitStructMemberError(tok, tok->str() + "." + membervar);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  792:                }
    #####:  793:                continue;
        -:  794:            }
        -:  795:
    #####:  796:            if (isVariableUsage(tok, var.isPointer(), alloc)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  797:                if (suppressErrors)
branch  0 never executed
branch  1 never executed
    #####:  798:                    continue;
    #####:  799:                uninitvarError(tok, tok->str(), alloc);
call    0 never executed
call    1 never executed
        -:  800:            }
    #####:  801:            return true;
        -:  802:        }
    #####:  803:        if (Token::Match(tok, "sizeof|decltype|offsetof ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  804:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
    #####:  805:        if ((!isuninit || !membervar.empty()) && tok->str() == "&&")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  806:            suppressErrors = true;
        -:  807:    }
    #####:  808:    return false;
        -:  809:}
        -:  810:
function _ZN14CheckUninitVar13checkLoopBodyEPK5TokenRK8VariableNS_5AllocERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  811:bool CheckUninitVar::checkLoopBody(const Token *tok, const Variable& var, const Alloc alloc, const std::string &membervar, const bool suppressErrors)
        -:  812:{
    #####:  813:    const Token *usetok = nullptr;
        -:  814:
    #####:  815:    assert(tok->str() == "{");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  816:
    #####:  817:    for (const Token * const end = tok->link(); tok != end; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  818:        if (Token::Match(tok, "sizeof|typeof (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  819:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
    #####:  820:            continue;
        -:  821:        }
        -:  822:
    #####:  823:        if (Token::Match(tok, "asm ( %str% ) ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:            return true;
        -:  825:
    #####:  826:        if (tok->varId() != var.declarationId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  827:            continue;
        -:  828:
    #####:  829:        if (!membervar.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:            if (isMemberVariableAssignment(tok, membervar)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:                bool assign = true;
    #####:  832:                bool rhs = false;
        -:  833:                // Used for tracking if an ")" is inner or outer
    #####:  834:                const Token *rpar = nullptr;
    #####:  835:                for (const Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  836:                    if (tok2->str() == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  837:                        rhs = true;
        -:  838:
        -:  839:                    // Look at inner expressions but not outer expressions
    #####:  840:                    if (!rpar && tok2->str() == "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  841:                        rpar = tok2->link();
call    0 never executed
    #####:  842:                    else if (tok2->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  843:                        // No rpar => this is an outer right parenthesis
    #####:  844:                        if (!rpar)
branch  0 never executed
branch  1 never executed
    #####:  845:                            break;
    #####:  846:                        if (rpar == tok2)
branch  0 never executed
branch  1 never executed
    #####:  847:                            rpar = nullptr;
        -:  848:                    }
        -:  849:
    #####:  850:                    if (tok2->str() == ";" || (!rpar && tok2->str() == ","))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  851:                        break;
    #####:  852:                    if (rhs && tok2->varId() == var.declarationId() && isMemberVariableUsage(tok2, var.isPointer(), alloc, membervar)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  853:                        assign = false;
    #####:  854:                        break;
        -:  855:                    }
        -:  856:                }
    #####:  857:                if (assign)
branch  0 never executed
branch  1 never executed
    #####:  858:                    return true;
        -:  859:            }
        -:  860:
    #####:  861:            if (isMemberVariableUsage(tok, var.isPointer(), alloc, membervar))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  862:                usetok = tok;
    #####:  863:            else if (Token::Match(tok->previous(), "[(,] %name% [,)]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  864:                return true;
        -:  865:        } else {
    #####:  866:            if (isVariableUsage(tok, var.isPointer(), alloc))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  867:                usetok = tok;
    #####:  868:            else if (tok->strAt(1) == "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:                // Is var used in rhs?
    #####:  870:                bool rhs = false;
    #####:  871:                std::stack<const Token *> tokens;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  872:                tokens.push(tok->next()->astOperand2());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  873:                while (!tokens.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  874:                    const Token *t = tokens.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  875:                    tokens.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:                    if (!t)
branch  0 never executed
branch  1 never executed
    #####:  877:                        continue;
    #####:  878:                    if (t->varId() == var.declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  879:                        // var is used in rhs
    #####:  880:                        rhs = true;
    #####:  881:                        break;
        -:  882:                    }
    #####:  883:                    if (Token::simpleMatch(t->previous(),"sizeof ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  884:                        continue;
    #####:  885:                    tokens.push(t->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  886:                    tokens.push(t->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  887:                }
    #####:  888:                if (!rhs)
branch  0 never executed
branch  1 never executed
    #####:  889:                    return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  890:            } else {
    #####:  891:                return true;
        -:  892:            }
        -:  893:        }
        -:  894:    }
        -:  895:
    #####:  896:    if (!suppressErrors && usetok) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  897:        if (membervar.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  898:            uninitvarError(usetok, usetok->str(), alloc);
call    0 never executed
call    1 never executed
        -:  899:        else
    #####:  900:            uninitStructMemberError(usetok, usetok->str() + "." + membervar);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  901:        return true;
        -:  902:    }
        -:  903:
    #####:  904:    return false;
        -:  905:}
        -:  906:
function _ZN14CheckUninitVar8checkRhsEPK5TokenRK8VariableNS_5AllocEiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  907:void CheckUninitVar::checkRhs(const Token *tok, const Variable &var, Alloc alloc, nonneg int number_of_if, const std::string &membervar)
        -:  908:{
    #####:  909:    bool rhs = false;
    #####:  910:    int indent = 0;
    #####:  911:    while (nullptr != (tok = tok->next())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  912:        if (tok->str() == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  913:            rhs = true;
    #####:  914:        else if (rhs && tok->varId() == var.declarationId()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  915:            if (membervar.empty() && isVariableUsage(tok, var.isPointer(), alloc))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  916:                uninitvarError(tok, tok->str(), alloc);
call    0 never executed
call    1 never executed
    #####:  917:            else if (!membervar.empty() && isMemberVariableUsage(tok, var.isPointer(), alloc, membervar))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  918:                uninitStructMemberError(tok, tok->str() + "." + membervar);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  919:            else if (Token::Match(tok, "%var% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:                break;
    #####:  921:        } else if (tok->str() == ";" || (indent==0 && tok->str() == ","))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  922:            break;
    #####:  923:        else if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  924:            ++indent;
    #####:  925:        else if (tok->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  926:            if (indent == 0)
branch  0 never executed
branch  1 never executed
    #####:  927:                break;
    #####:  928:            --indent;
    #####:  929:        } else if (tok->str() == "?" && tok->astOperand2()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  930:            const bool used1 = isVariableUsed(tok->astOperand2()->astOperand1(), var);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  931:            const bool used0 = isVariableUsed(tok->astOperand2()->astOperand2(), var);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  932:            const bool err = (number_of_if == 0) ? (used1 || used0) : (used1 && used0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  933:            if (err)
branch  0 never executed
branch  1 never executed
    #####:  934:                uninitvarError(tok, var.nameToken()->str(), alloc);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  935:            break;
    #####:  936:        } else if (Token::simpleMatch(tok, "sizeof ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  937:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -:  938:    }
    #####:  939:}
        -:  940:
function _ZNK14CheckUninitVar15isVariableUsageEPK5TokenbNS_5AllocE called 0 returned 0% blocks executed 0%
    #####:  941:bool CheckUninitVar::isVariableUsage(const Token *vartok, bool pointer, Alloc alloc) const
        -:  942:{
    #####:  943:    if (alloc == NO_ALLOC && ((Token::Match(vartok->previous(), "return|delete %var% !!=")) || (vartok->strAt(-1) == "]" && vartok->linkAt(-1)->strAt(-1) == "delete")))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
    #####:  944:        return true;
        -:  945:
        -:  946:    // Passing variable to typeof/__alignof__
    #####:  947:    if (Token::Match(vartok->tokAt(-3), "typeof|__alignof__ ( * %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  948:        return false;
        -:  949:
        -:  950:    // Accessing Rvalue member using "." or "->"
    #####:  951:    if (Token::Match(vartok->previous(), "!!& %var% .")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  952:        // Is struct member passed to function?
    #####:  953:        if (!pointer)
branch  0 never executed
branch  1 never executed
    #####:  954:            return false;
        -:  955:
    #####:  956:        if (alloc != CTOR_CALL && Token::Match(vartok, "%name% . %name% ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  957:            return true;
        -:  958:
    #####:  959:        bool assignment = false;
    #####:  960:        const Token* parent = vartok->astParent();
call    0 never executed
    #####:  961:        while (parent) {
branch  0 never executed
branch  1 never executed
    #####:  962:            if (parent->str() == "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  963:                assignment = true;
    #####:  964:                break;
        -:  965:            }
    #####:  966:            if (alloc != NO_ALLOC && parent->str() == "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  967:                if (!mSettings->library.isFunctionConst(parent->strAt(-1), true)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  968:                    assignment = true;
    #####:  969:                    break;
        -:  970:                }
        -:  971:            }
    #####:  972:            parent = parent->astParent();
call    0 never executed
        -:  973:        }
    #####:  974:        if (!assignment)
branch  0 never executed
branch  1 never executed
    #####:  975:            return true;
        -:  976:    }
        -:  977:
        -:  978:    // Passing variable to function..
        -:  979:    {
    #####:  980:        bool unknown = false;
    #####:  981:        const Token *possibleParent = getAstParentSkipPossibleCastAndAddressOf(vartok, &unknown);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:        if (possibleParent && possibleParent->isUnaryOp("*")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####:  983:            while (possibleParent && possibleParent->isUnaryOp("*"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####:  984:                possibleParent = getAstParentSkipPossibleCastAndAddressOf(possibleParent, &unknown);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:            if (possibleParent && Token::Match(possibleParent->previous(), "decltype|sizeof ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  986:                return false;
        -:  987:        }
    #####:  988:        if (Token::Match(possibleParent, "[(,]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  989:            if (unknown)
branch  0 never executed
branch  1 never executed
    #####:  990:                return false; // TODO: output some info message?
    #####:  991:            const int use = isFunctionParUsage(vartok, pointer, alloc);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  992:            if (use >= 0)
branch  0 never executed
branch  1 never executed
    #####:  993:                return (use>0);
        -:  994:        }
        -:  995:
    #####:  996:        else if (!pointer && Token::simpleMatch(possibleParent, "=") && vartok->astParent()->str() == "&") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  997:            return false;
        -:  998:        }
        -:  999:    }
        -: 1000:
        -: 1001:    {
    #####: 1002:        const Token *parent = vartok->astParent();
call    0 never executed
    #####: 1003:        while (parent && parent->isCast())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1004:            parent = parent->astParent();
call    0 never executed
    #####: 1005:        while (parent && parent->str() == ",")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1006:            parent = parent->astParent();
call    0 never executed
    #####: 1007:        if (Token::simpleMatch(parent, "{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1008:            return true;
        -: 1009:    }
        -: 1010:
    #####: 1011:    if (Token::Match(vartok->previous(), "++|--|%cop%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1012:        if (mTokenizer->isCPP() && alloc == ARRAY && Token::Match(vartok->tokAt(-4), "& %var% =|( *"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1013:            return false;
        -: 1014:
    #####: 1015:        if (isLikelyStreamRead(mTokenizer->isCPP(), vartok->previous()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1016:            return false;
        -: 1017:
    #####: 1018:        if (mTokenizer->isCPP() && Token::simpleMatch(vartok->previous(), "<<")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1019:            const Token* tok2 = vartok->previous();
call    0 never executed
        -: 1020:
        -: 1021:            // Looks like stream operator, but could also initialize the variable. Check lhs.
    #####: 1022:            do {
    #####: 1023:                tok2 = tok2->astOperand1();
call    0 never executed
    #####: 1024:            } while (Token::simpleMatch(tok2, "<<"));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1025:            if (tok2 && tok2->strAt(-1) == "::")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1026:                tok2 = tok2->previous();
call    0 never executed
    #####: 1027:            if (tok2 && (Token::simpleMatch(tok2->previous(), "std ::") || (tok2->variable() && tok2->variable()->isStlType()) || tok2->isStandardType() || tok2->isEnumType()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
    #####: 1028:                return true;
        -: 1029:
    #####: 1030:            const Variable *var = vartok->tokAt(-2)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1031:            return (var && (var->typeStartToken()->isStandardType() || var->typeStartToken()->isEnumType()));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 1032:        }
        -: 1033:
        -: 1034:        // is there something like: ; "*((&var ..expr.. ="  => the variable is assigned
    #####: 1035:        if (vartok->previous()->str() == "&" && !vartok->previous()->astOperand2())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1036:            return false;
        -: 1037:
        -: 1038:        // bailout to avoid fp for 'int x = 2 + x();' where 'x()' is a unseen preprocessor macro (seen in linux)
    #####: 1039:        if (!pointer && vartok->next() && vartok->next()->str() == "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1040:            return false;
        -: 1041:
    #####: 1042:        if (vartok->previous()->str() != "&" || !Token::Match(vartok->tokAt(-2), "[(,=?:]")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1043:            if (alloc != NO_ALLOC && vartok->previous()->str() == "*") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1044:                // TestUninitVar::isVariableUsageDeref()
    #####: 1045:                const Token *parent = vartok->previous()->astParent();
call    0 never executed
call    1 never executed
    #####: 1046:                if (parent && parent->str() == "=" && parent->astOperand1() == vartok->previous())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1047:                    return false;
    #####: 1048:                if (vartok->variable() && vartok->variable()->dimensions().size() >= 2)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1049:                    return false;
    #####: 1050:                return true;
        -: 1051:            }
    #####: 1052:            return alloc == NO_ALLOC;
        -: 1053:        }
        -: 1054:    }
        -: 1055:
    #####: 1056:    if (alloc == NO_ALLOC && Token::Match(vartok->previous(), "%assign% %name% %cop%|;|)")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1057:        // taking reference?
    #####: 1058:        const Token *prev = vartok->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1059:        while (Token::Match(prev, "%name%|*"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1060:            prev = prev->previous();
call    0 never executed
    #####: 1061:        if (!Token::simpleMatch(prev, "&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1062:            return true;
        -: 1063:    }
        -: 1064:
    #####: 1065:    bool unknown = false;
    #####: 1066:    if (pointer && alloc == NO_ALLOC && CheckNullPointer::isPointerDeRef(vartok, unknown, mSettings)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1067:        // function parameter?
    #####: 1068:        bool functionParameter = false;
    #####: 1069:        if (Token::Match(vartok->tokAt(-2), "%name% (") || vartok->previous()->str() == ",")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1070:            functionParameter = true;
        -: 1071:
        -: 1072:        // if this is not a function parameter report this dereference as variable usage
    #####: 1073:        if (!functionParameter)
branch  0 never executed
branch  1 never executed
    #####: 1074:            return true;
    #####: 1075:    } else if (alloc != NO_ALLOC && Token::Match(vartok, "%var% [")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1076:        const Token *parent = vartok->next()->astParent();
call    0 never executed
call    1 never executed
    #####: 1077:        while (Token::Match(parent, "[|."))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1078:            parent = parent->astParent();
call    0 never executed
    #####: 1079:        if (Token::simpleMatch(parent, "&") && !parent->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1080:            return false;
    #####: 1081:        if (parent && Token::Match(parent->previous(), "if|while|switch ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1082:            return true;
    #####: 1083:        if (Token::Match(parent, "[=,(]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1084:            return false;
    #####: 1085:        return true;
        -: 1086:    }
        -: 1087:
    #####: 1088:    if (mTokenizer->isCPP() && Token::simpleMatch(vartok->next(), "<<")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1089:        // Is this calculation done in rhs?
    #####: 1090:        const Token *tok = vartok;
    #####: 1091:        while (Token::Match(tok, "%name%|.|::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1092:            tok = tok->previous();
call    0 never executed
    #####: 1093:        if (Token::Match(tok, "[;{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1094:            return false;
        -: 1095:
        -: 1096:        // Is variable a known POD type then this is a variable usage,
        -: 1097:        // otherwise we assume it's not.
    #####: 1098:        return (vartok->valueType() && vartok->valueType()->isIntegral());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1099:    }
        -: 1100:
    #####: 1101:    if (alloc == NO_ALLOC && vartok->next() && vartok->next()->isOp() && !vartok->next()->isAssignmentOp())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1102:        return true;
        -: 1103:
    #####: 1104:    if (alloc == NO_ALLOC && vartok->next()->isAssignmentOp() && vartok->next()->str() != "=")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1105:        return true;
        -: 1106:
    #####: 1107:    if (vartok->strAt(1) == "]")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1108:        return true;
        -: 1109:
    #####: 1110:    return false;
        -: 1111:}
        -: 1112:
        -: 1113:/***
        -: 1114: * Is function parameter "used" so a "usage of uninitialized variable" can
        -: 1115: * be written? If parameter is passed "by value" then it is "used". If it
        -: 1116: * is passed "by reference" then it is not necessarily "used".
        -: 1117: * @return  -1 => unknown   0 => not used   1 => used
        -: 1118: */
function _ZNK14CheckUninitVar18isFunctionParUsageEPK5TokenbNS_5AllocE called 0 returned 0% blocks executed 0%
    #####: 1119:int CheckUninitVar::isFunctionParUsage(const Token *vartok, bool pointer, Alloc alloc) const
        -: 1120:{
    #####: 1121:    bool unknown = false;
    #####: 1122:    const Token *parent = getAstParentSkipPossibleCastAndAddressOf(vartok, &unknown);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1123:    if (unknown || !Token::Match(parent, "[(,]"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1124:        return -1;
        -: 1125:
        -: 1126:    // locate start parentheses in function call..
    #####: 1127:    int argumentNumber = 0;
    #####: 1128:    const Token *start = vartok;
    #####: 1129:    while (start && !Token::Match(start, "[;{}(]")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1130:        if (start->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1131:            start = start->link();
call    0 never executed
    #####: 1132:        else if (start->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1133:            ++argumentNumber;
    #####: 1134:        start = start->previous();
call    0 never executed
        -: 1135:    }
    #####: 1136:    if (!start)
branch  0 never executed
branch  1 never executed
    #####: 1137:        return -1;
        -: 1138:
    #####: 1139:    if (Token::simpleMatch(start->link(), ") {") && Token::Match(start->previous(), "if|for|while|switch"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1140:        return (!pointer || alloc == NO_ALLOC);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1141:
        -: 1142:    // is this a function call?
    #####: 1143:    if (Token::Match(start->previous(), "%name% (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1144:        const bool address(vartok->previous()->str() == "&");
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1145:        const bool array(vartok->variable() && vartok->variable()->isArray());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1146:        // check how function handle uninitialized data arguments..
    #####: 1147:        const Function *func = start->previous()->function();
call    0 never executed
call    1 never executed
    #####: 1148:        if (func) {
branch  0 never executed
branch  1 never executed
    #####: 1149:            const Variable *arg = func->getArgumentVar(argumentNumber);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1150:            if (arg) {
branch  0 never executed
branch  1 never executed
    #####: 1151:                const Token *argStart = arg->typeStartToken();
call    0 never executed
    #####: 1152:                if (!address && !array && Token::Match(argStart, "%type% %name%| [,)]"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1153:                    return 1;
    #####: 1154:                if (pointer && !address && alloc == NO_ALLOC && Token::Match(argStart,  "%type% * %name% [,)]"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1155:                    return 1;
    #####: 1156:                while (argStart->previous() && argStart->previous()->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1157:                    argStart = argStart->previous();
call    0 never executed
    #####: 1158:                if (Token::Match(argStart, "const %type% & %name% [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1159:                    // If it's a record it's ok to pass a partially uninitialized struct.
    #####: 1160:                    if (vartok->variable() && vartok->variable()->valueType() && vartok->variable()->valueType()->type == ValueType::Type::RECORD)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1161:                        return -1;
    #####: 1162:                    return 1;
        -: 1163:                }
    #####: 1164:                if ((pointer || address) && alloc == NO_ALLOC && Token::Match(argStart, "const struct| %type% * %name% [,)]"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1165:                    return 1;
    #####: 1166:                if ((pointer || address) && Token::Match(argStart, "const %type% %name% [") && Token::Match(argStart->linkAt(3), "] [,)]"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1167:                    return 1;
        -: 1168:            }
        -: 1169:
    #####: 1170:        } else if (Token::Match(start->previous(), "if|while|for")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1171:            // control-flow statement reading the variable "by value"
    #####: 1172:            return alloc == NO_ALLOC;
        -: 1173:        } else {
    #####: 1174:            const bool isnullbad = mSettings->library.isnullargbad(start->previous(), argumentNumber + 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1175:            if (pointer && !address && isnullbad && alloc == NO_ALLOC)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1176:                return 1;
    #####: 1177:            const bool isuninitbad = mSettings->library.isuninitargbad(start->previous(), argumentNumber + 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1178:            if (alloc != NO_ALLOC)
branch  0 never executed
branch  1 never executed
    #####: 1179:                return isnullbad && isuninitbad;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1180:            return isuninitbad && (!address || isnullbad);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1181:        }
        -: 1182:    }
        -: 1183:
        -: 1184:    // unknown
    #####: 1185:    return -1;
        -: 1186:}
        -: 1187:
function _ZNK14CheckUninitVar26isMemberVariableAssignmentEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1188:bool CheckUninitVar::isMemberVariableAssignment(const Token *tok, const std::string &membervar) const
        -: 1189:{
    #####: 1190:    if (Token::Match(tok, "%name% . %name%") && tok->strAt(2) == membervar) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1191:        if (Token::Match(tok->tokAt(3), "[=.[]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1192:            return true;
    #####: 1193:        else if (Token::Match(tok->tokAt(-2), "[(,=] &"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1194:            return true;
    #####: 1195:        else if (isLikelyStreamRead(mTokenizer->isCPP(), tok->previous()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1196:            return true;
    #####: 1197:        else if ((tok->previous() && tok->previous()->isConstOp()) || Token::Match(tok->previous(), "[|="))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -: 1198:            ; // member variable usage
    #####: 1199:        else if (tok->tokAt(3)->isConstOp())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1200:            ; // member variable usage
    #####: 1201:        else if (Token::Match(tok->previous(), "[(,] %name% . %name% [,)]") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1202:                 1 == isFunctionParUsage(tok, false, NO_ALLOC)) {
call    0 never executed
    #####: 1203:            return false;
        -: 1204:        } else
    #####: 1205:            return true;
    #####: 1206:    } else if (tok->strAt(1) == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1207:        return true;
    #####: 1208:    else if (Token::Match(tok, "%var% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1209:        const Token *ftok = tok->tokAt(2);
call    0 never executed
    #####: 1210:        if (!ftok->function() || !ftok->function()->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1211:            // TODO: Try to determine if membervar is assigned in method
    #####: 1212:            return true;
    #####: 1213:    } else if (tok->strAt(-1) == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1214:        if (Token::Match(tok->tokAt(-2), "[(,] & %name%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1215:            // locate start parentheses in function call..
    #####: 1216:            int argumentNumber = 0;
    #####: 1217:            const Token *ftok = tok;
    #####: 1218:            while (ftok && !Token::Match(ftok, "[;{}(]")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1219:                if (ftok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1220:                    ftok = ftok->link();
call    0 never executed
    #####: 1221:                else if (ftok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1222:                    ++argumentNumber;
    #####: 1223:                ftok = ftok->previous();
call    0 never executed
        -: 1224:            }
        -: 1225:
        -: 1226:            // is this a function call?
    #####: 1227:            ftok = ftok ? ftok->previous() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1228:            if (Token::Match(ftok, "%name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1229:                // check how function handle uninitialized data arguments..
    #####: 1230:                const Function *function = ftok->function();
call    0 never executed
        -: 1231:
    #####: 1232:                if (!function && mSettings) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1233:                    // Function definition not seen, check if direction is specified in the library configuration
    #####: 1234:                    const Library::ArgumentChecks::Direction argDirection = mSettings->library.getArgDirection(ftok, 1 + argumentNumber);
call    0 never executed
    #####: 1235:                    if (argDirection == Library::ArgumentChecks::Direction::DIR_IN)
branch  0 never executed
branch  1 never executed
    #####: 1236:                        return false;
    #####: 1237:                    else if (argDirection == Library::ArgumentChecks::Direction::DIR_OUT)
branch  0 never executed
branch  1 never executed
    #####: 1238:                        return true;
        -: 1239:                }
        -: 1240:
    #####: 1241:                const Variable *arg      = function ? function->getArgumentVar(argumentNumber) : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1242:                const Token *argStart    = arg ? arg->typeStartToken() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1243:                while (argStart && argStart->previous() && argStart->previous()->isName())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1244:                    argStart = argStart->previous();
call    0 never executed
    #####: 1245:                if (Token::Match(argStart, "const struct| %type% * const| %name% [,)]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1246:                    return false;
        -: 1247:            }
        -: 1248:
    #####: 1249:            else if (ftok && Token::simpleMatch(ftok->previous(), "= * ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1250:                return false;
        -: 1251:        }
    #####: 1252:        return true;
        -: 1253:    }
    #####: 1254:    return false;
        -: 1255:}
        -: 1256:
function _ZNK14CheckUninitVar21isMemberVariableUsageEPK5TokenbNS_5AllocERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1257:bool CheckUninitVar::isMemberVariableUsage(const Token *tok, bool isPointer, Alloc alloc, const std::string &membervar) const
        -: 1258:{
    #####: 1259:    if (Token::Match(tok->previous(), "[(,] %name% . %name% [,)]") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1260:        tok->strAt(2) == membervar) {
call    0 never executed
call    1 never executed
    #####: 1261:        const int use = isFunctionParUsage(tok, isPointer, alloc);
call    0 never executed
    #####: 1262:        if (use == 1)
branch  0 never executed
branch  1 never executed
    #####: 1263:            return true;
        -: 1264:    }
        -: 1265:
    #####: 1266:    if (isMemberVariableAssignment(tok, membervar))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1267:        return false;
        -: 1268:
    #####: 1269:    if (Token::Match(tok, "%name% . %name%") && tok->strAt(2) == membervar && !(tok->tokAt(-2)->variable() && tok->tokAt(-2)->variable()->isReference())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1270:        const Token *parent = tok->next()->astParent();
call    0 never executed
call    1 never executed
    #####: 1271:        if (parent && parent->isUnaryOp("&"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####: 1272:            return false;
    #####: 1273:        return true;
    #####: 1274:    } else if (!isPointer && Token::Match(tok->previous(), "[(,] %name% [,)]") && isVariableUsage(tok, isPointer, alloc))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1275:        return true;
        -: 1276:
    #####: 1277:    else if (!isPointer && Token::Match(tok->previous(), "= %name% ;"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1278:        return true;
        -: 1279:
        -: 1280:    // = *(&var);
    #####: 1281:    else if (!isPointer &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1282:             Token::simpleMatch(tok->astParent(),"&") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1283:             Token::simpleMatch(tok->astParent()->astParent(),"*") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1284:             Token::Match(tok->astParent()->astParent()->astParent(), "= * (| &") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1285:             tok->astParent()->astParent()->astParent()->astOperand2() == tok->astParent()->astParent())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1286:        return true;
        -: 1287:
    #####: 1288:    else if (mSettings->experimental &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1289:             !isPointer &&
branch  0 never executed
branch  1 never executed
    #####: 1290:             Token::Match(tok->tokAt(-2), "[(,] & %name% [,)]") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1291:             isVariableUsage(tok, isPointer, alloc))
call    0 never executed
    #####: 1292:        return true;
        -: 1293:
    #####: 1294:    return false;
        -: 1295:}
        -: 1296:
function _ZN14CheckUninitVar17uninitstringErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1297:void CheckUninitVar::uninitstringError(const Token *tok, const std::string &varname, bool strncpy_)
        -: 1298:{
    #####: 1299:    reportError(tok, Severity::error, "uninitstring", "$symbol:" + varname + "\nDangerous usage of '$symbol'" + (strncpy_ ? " (strncpy doesn't always null-terminate it)." : " (not null-terminated)."), CWE676, false);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1300:}
        -: 1301:
function _ZN14CheckUninitVar15uninitdataErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1302:void CheckUninitVar::uninitdataError(const Token *tok, const std::string &varname)
        -: 1303:{
    #####: 1304:    reportError(tok, Severity::error, "uninitdata", "$symbol:" + varname + "\nMemory is allocated but not initialized: $symbol", CWE908, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1305:}
        -: 1306:
function _ZN14CheckUninitVar14uninitvarErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENSt7__debug4listISt4pairIS2_S8_ESaISE_EEE called 0 returned 0% blocks executed 0%
    #####: 1307:void CheckUninitVar::uninitvarError(const Token *tok, const std::string &varname, ErrorPath errorPath)
        -: 1308:{
    #####: 1309:    errorPath.emplace_back(tok, "");
call    0 never executed
    #####: 1310:    reportError(errorPath, Severity::error, "uninitvar", "$symbol:" + varname + "\nUninitialized variable: $symbol", CWE908, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1311:    // reportError(tok, Severity::error, "uninitvar", "$symbol:" + varname + "\nUninitialized variable: $symbol", CWE908, false);
    #####: 1312:}
        -: 1313:
function _ZN14CheckUninitVar23uninitStructMemberErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1314:void CheckUninitVar::uninitStructMemberError(const Token *tok, const std::string &membername)
        -: 1315:{
    #####: 1316:    reportError(tok,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1317:                Severity::error,
        -: 1318:                "uninitStructMember",
    #####: 1319:                "$symbol:" + membername + "\nUninitialized struct member: $symbol", CWE908, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1320:}
        -: 1321:
function _ZL9isLeafDotPK5Token called 0 returned 0% blocks executed 0%
    #####: 1322:static bool isLeafDot(const Token* tok)
        -: 1323:{
    #####: 1324:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1325:        return false;
    #####: 1326:    const Token * parent = tok->astParent();
call    0 never executed
    #####: 1327:    if (!Token::simpleMatch(parent, "."))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1328:        return false;
    #####: 1329:    if (parent->astOperand2() == tok)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1330:        return true;
    #####: 1331:    return isLeafDot(parent);
call    0 never executed
        -: 1332:}
        -: 1333:
function _ZN14CheckUninitVar15valueFlowUninitEv called 0 returned 0% blocks executed 0%
    #####: 1334:void CheckUninitVar::valueFlowUninit()
        -: 1335:{
    #####: 1336:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1337:
        -: 1338:    // check every executable scope
    #####: 1339:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1340:        if (!scope.isExecutable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1341:            continue;
    #####: 1342:        for (const Token* tok = scope.bodyStart; tok != scope.bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1343:            if (Token::simpleMatch(tok, "sizeof (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1344:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1345:                continue;
        -: 1346:            }
    #####: 1347:            if (!tok->variable() && !tok->isUnaryOp("*"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
    #####: 1348:                continue;
    #####: 1349:            auto v = std::find_if(tok->values().begin(), tok->values().end(), std::mem_fn(&ValueFlow::Value::isUninitValue));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1350:            if (v == tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1351:                continue;
    #####: 1352:            if (v->isInconclusive())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1353:                continue;
    #####: 1354:            if (v->indirect > 1 || v->indirect < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1355:                continue;
    #####: 1356:            bool uninitderef = false;
    #####: 1357:            if (tok->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1358:                if (!isVariableUsage(tok, tok->variable()->isPointer(), tok->variable()->isArray() ? ARRAY : NO_ALLOC))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1359:                    continue;
        -: 1360:                bool unknown;
    #####: 1361:                const bool deref = CheckNullPointer::isPointerDeRef(tok, unknown, mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1362:                if (v->indirect == 1 && !deref)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1363:                    continue;
    #####: 1364:                uninitderef = deref && v->indirect == 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1365:                const bool isleaf = isLeafDot(tok) || uninitderef;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1366:                if (Token::Match(tok->astParent(), ". %var%") && !isleaf)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1367:                    continue;
        -: 1368:            }
    #####: 1369:            if (!Token::Match(tok->astParent(), ". %name% (") && !uninitderef && isVariableChanged(tok, v->indirect, mSettings, mTokenizer->isCPP()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1370:                continue;
    #####: 1371:            uninitvarError(tok, tok->expressionString(), v->errorPath);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1372:            const Token * nextTok = tok;
    #####: 1373:            while (Token::simpleMatch(nextTok->astParent(), "."))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1374:                nextTok = nextTok->astParent();
call    0 never executed
    #####: 1375:            nextTok = nextAfterAstRightmostLeaf(nextTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1376:            if (nextTok == scope.bodyEnd)
branch  0 never executed
branch  1 never executed
    #####: 1377:                break;
    #####: 1378:            tok = nextTok ? nextTok : tok;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1379:        }
        -: 1380:    }
    #####: 1381:}
        -: 1382:
function _ZNK14CheckUninitVar10MyFileInfo8toStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1383:std::string CheckUninitVar::MyFileInfo::toString() const
        -: 1384:{
    #####: 1385:    return CTU::toString(unsafeUsage);
call    0 never executed
        -: 1386:}
        -: 1387:
function _ZNK14CheckUninitVar11getFileInfoEPK9TokenizerPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1388:Check::FileInfo *CheckUninitVar::getFileInfo(const Tokenizer *tokenizer, const Settings *settings) const
        -: 1389:{
    #####: 1390:    const CheckUninitVar checker(tokenizer, settings, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1391:    return checker.getFileInfo();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1392:}
        -: 1393:
function _ZL15isVariableUsagePK5CheckPK5TokenPx called 0 returned 0% blocks executed 0%
    #####: 1394:static bool isVariableUsage(const Check *check, const Token *vartok, MathLib::bigint *value)
        -: 1395:{
        -: 1396:    (void)value;
    #####: 1397:    const CheckUninitVar *c = dynamic_cast<const CheckUninitVar *>(check);
branch  0 never executed
branch  1 never executed
    #####: 1398:    return c && c->isVariableUsage(vartok, true, CheckUninitVar::Alloc::ARRAY);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1399:}
        -: 1400:
function _ZNK14CheckUninitVar11getFileInfoEv called 0 returned 0% blocks executed 0%
    #####: 1401:Check::FileInfo *CheckUninitVar::getFileInfo() const
        -: 1402:{
    #####: 1403:    const std::list<CTU::FileInfo::UnsafeUsage> &unsafeUsage = CTU::getUnsafeUsage(mTokenizer, mSettings, this, ::isVariableUsage);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1404:    if (unsafeUsage.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1405:        return nullptr;
        -: 1406:
    #####: 1407:    MyFileInfo *fileInfo = new MyFileInfo;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1408:    fileInfo->unsafeUsage = unsafeUsage     ;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1409:    return fileInfo;
        -: 1410:}
        -: 1411:
function _ZNK14CheckUninitVar19loadFileInfoFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####: 1412:Check::FileInfo * CheckUninitVar::loadFileInfoFromXml(const tinyxml2::XMLElement *xmlElement) const
        -: 1413:{
    #####: 1414:    const std::list<CTU::FileInfo::UnsafeUsage> &unsafeUsage = CTU::loadUnsafeUsageListFromXml(xmlElement);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1415:    if (unsafeUsage.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1416:        return nullptr;
        -: 1417:
    #####: 1418:    MyFileInfo *fileInfo = new MyFileInfo;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1419:    fileInfo->unsafeUsage = unsafeUsage;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1420:    return fileInfo;
        -: 1421:}
        -: 1422:
function _ZN14CheckUninitVar19analyseWholeProgramEPKN3CTU8FileInfoERKNSt7__debug4listIPN5Check8FileInfoESaIS8_EEERK8SettingsR11ErrorLogger called 0 returned 0% blocks executed 0%
    #####: 1423:bool CheckUninitVar::analyseWholeProgram(const CTU::FileInfo *ctu, const std::list<Check::FileInfo*> &fileInfo, const Settings& settings, ErrorLogger &errorLogger)
        -: 1424:{
    #####: 1425:    if (!ctu)
branch  0 never executed
branch  1 never executed
    #####: 1426:        return false;
    #####: 1427:    bool foundErrors = false;
        -: 1428:    (void)settings; // This argument is unused
        -: 1429:
    #####: 1430:    const std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> callsMap = ctu->getCallsMap();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1431:
    #####: 1432:    for (Check::FileInfo *fi1 : fileInfo) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1433:        const MyFileInfo *fi = dynamic_cast<MyFileInfo*>(fi1);
branch  0 never executed
branch  1 never executed
    #####: 1434:        if (!fi)
branch  0 never executed
branch  1 never executed
    #####: 1435:            continue;
    #####: 1436:        for (const CTU::FileInfo::UnsafeUsage &unsafeUsage : fi->unsafeUsage) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1437:            const CTU::FileInfo::FunctionCall *functionCall = nullptr;
        -: 1438:
        -: 1439:            const std::list<ErrorLogger::ErrorMessage::FileLocation> &locationList =
        -: 1440:                ctu->getErrorPath(CTU::FileInfo::InvalidValueType::uninit,
        -: 1441:                                  unsafeUsage,
        -: 1442:                                  callsMap,
        -: 1443:                                  "Using argument ARG",
        -: 1444:                                  &functionCall,
    #####: 1445:                                  false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1446:            if (locationList.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1447:                continue;
        -: 1448:
        -: 1449:            const ErrorLogger::ErrorMessage errmsg(locationList,
        -: 1450:                                                   emptyString,
        -: 1451:                                                   Severity::error,
    #####: 1452:                                                   "Using argument " + unsafeUsage.myArgumentName + " that points at uninitialized variable " + functionCall->callArgumentExpression,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 1453:                                                   "ctuuninitvar",
    #####: 1454:                                                   CWE908, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1455:            errorLogger.reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1456:
    #####: 1457:            foundErrors = true;
        -: 1458:        }
        -: 1459:    }
    #####: 1460:    return foundErrors;
function _GLOBAL__sub_I__ZN14CheckUninitVar5checkEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 1461:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
