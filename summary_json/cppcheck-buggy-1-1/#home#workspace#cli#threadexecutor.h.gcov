        -:    0:Source:/home/workspace/cli/threadexecutor.h
        -:    0:Graph:/home/workspace/build/cli/CMakeFiles/cli_objs.dir/cppcheckexecutor.gcno
        -:    0:Data:/home/workspace/build/cli/CMakeFiles/cli_objs.dir/cppcheckexecutor.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#ifndef THREADEXECUTOR_H
        -:   20:#define THREADEXECUTOR_H
        -:   21:
        -:   22:#include "errorlogger.h"
        -:   23:#include "importproject.h"
        -:   24:
        -:   25:#include <cstddef>
        -:   26:#include <list>
        -:   27:#include <map>
        -:   28:#include <string>
        -:   29:
        -:   30:#if (defined(__GNUC__) || defined(__sun)) && !defined(__MINGW32__) && !defined(__CYGWIN__)
        -:   31:#define THREADING_MODEL_FORK
        -:   32:#elif defined(_WIN32)
        -:   33:#define THREADING_MODEL_WIN
        -:   34:#include <windows.h>
        -:   35:#endif
        -:   36:
        -:   37:class Settings;
        -:   38:
        -:   39:/// @addtogroup CLI
        -:   40:/// @{
        -:   41:
        -:   42:/**
        -:   43: * This class will take a list of filenames and settings and check then
        -:   44: * all files using threads.
        -:   45: */
        -:   46:class ThreadExecutor : public ErrorLogger {
        -:   47:public:
        -:   48:    ThreadExecutor(const std::map<std::string, std::size_t> &files, Settings &settings, ErrorLogger &errorLogger);
        -:   49:    ThreadExecutor(const ThreadExecutor &) = delete;
        -:   50:    virtual ~ThreadExecutor();
        -:   51:    void operator=(const ThreadExecutor &) = delete;
        -:   52:    unsigned int check();
        -:   53:
        -:   54:    virtual void reportOut(const std::string &outmsg) OVERRIDE;
        -:   55:    virtual void reportErr(const ErrorLogger::ErrorMessage &msg) OVERRIDE;
        -:   56:    virtual void reportInfo(const ErrorLogger::ErrorMessage &msg) OVERRIDE;
        -:   57:
        -:   58:    /**
        -:   59:     * @brief Add content to a file, to be used in unit testing.
        -:   60:     *
        -:   61:     * @param path File name (used as a key to link with real file).
        -:   62:     * @param content If the file would be a real file, this should be
        -:   63:     * the content of the file.
        -:   64:     */
        -:   65:    void addFileContent(const std::string &path, const std::string &content);
        -:   66:
        -:   67:private:
        -:   68:    const std::map<std::string, std::size_t> &mFiles;
        -:   69:    Settings &mSettings;
        -:   70:    ErrorLogger &mErrorLogger;
        -:   71:    unsigned int mFileCount;
        -:   72:
        -:   73:#if defined(THREADING_MODEL_FORK)
        -:   74:
        -:   75:    /** @brief Key is file name, and value is the content of the file */
        -:   76:    std::map<std::string, std::string> mFileContents;
        -:   77:private:
        -:   78:    enum PipeSignal {REPORT_OUT='1',REPORT_ERROR='2', REPORT_INFO='3', CHILD_END='4'};
        -:   79:
        -:   80:    /**
        -:   81:     * Read from the pipe, parse and handle what ever is in there.
        -:   82:     *@return -1 in case of error
        -:   83:     *         0 if there is nothing in the pipe to be read
        -:   84:     *         1 if we did read something
        -:   85:     */
        -:   86:    int handleRead(int rpipe, unsigned int &result);
        -:   87:    void writeToPipe(PipeSignal type, const std::string &data);
        -:   88:    /**
        -:   89:     * Write end of status pipe, different for each child.
        -:   90:     * Not used in master process.
        -:   91:     */
        -:   92:    std::list<std::string> mErrorList;
        -:   93:    int mWpipe;
        -:   94:
        -:   95:    /**
        -:   96:     * @brief Check load average condition
        -:   97:     * @param nchildren - count of currently ran children
        -:   98:     * @return true - if new process can be started
        -:   99:     */
        -:  100:    bool checkLoadAverage(size_t nchildren);
        -:  101:
        -:  102:public:
        -:  103:    /**
        -:  104:     * @return true if support for threads exist.
        -:  105:     */
function _ZN14ThreadExecutor9isEnabledEv called 0 returned 0% blocks executed 0%
    #####:  106:    static bool isEnabled() {
    #####:  107:        return true;
        -:  108:    }
        -:  109:
        -:  110:#elif defined(THREADING_MODEL_WIN)
        -:  111:
        -:  112:private:
        -:  113:    enum class MessageType {REPORT_ERROR, REPORT_INFO};
        -:  114:
        -:  115:    std::map<std::string, std::string> mFileContents;
        -:  116:    std::map<std::string, std::size_t>::const_iterator mItNextFile;
        -:  117:    std::list<ImportProject::FileSettings>::const_iterator mItNextFileSettings;
        -:  118:    std::size_t mProcessedFiles;
        -:  119:    std::size_t mTotalFiles;
        -:  120:    std::size_t mProcessedSize;
        -:  121:    std::size_t mTotalFileSize;
        -:  122:    CRITICAL_SECTION mFileSync;
        -:  123:
        -:  124:    std::list<std::string> mErrorList;
        -:  125:    CRITICAL_SECTION mErrorSync;
        -:  126:
        -:  127:    CRITICAL_SECTION mReportSync;
        -:  128:
        -:  129:    void report(const ErrorLogger::ErrorMessage &msg, MessageType msgType);
        -:  130:
        -:  131:    static unsigned __stdcall threadProc(void*);
        -:  132:
        -:  133:public:
        -:  134:    /**
        -:  135:     * @return true if support for threads exist.
        -:  136:     */
        -:  137:    static bool isEnabled() {
        -:  138:        return true;
        -:  139:    }
        -:  140:#else
        -:  141:public:
        -:  142:    /**
        -:  143:     * @return true if support for threads exist.
        -:  144:     */
        -:  145:    static bool isEnabled() {
        -:  146:        return false;
        -:  147:    }
        -:  148:#endif
        -:  149:};
        -:  150:
        -:  151:/// @}
        -:  152:
        -:  153:#endif // THREADEXECUTOR_H
