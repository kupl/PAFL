        -:    0:Source:/home/workspace/lib/preprocessor.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/preprocessor.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/preprocessor.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20:#include "preprocessor.h"
        -:   21:
        -:   22:#include "errorlogger.h"
        -:   23:#include "library.h"
        -:   24:#include "path.h"
        -:   25:#include "settings.h"
        -:   26:#include "simplecpp.h"
        -:   27:#include "suppressions.h"
        -:   28:
        -:   29:#include <algorithm>
        -:   30:#include <cstdint>
        -:   31:#include <cstring>
        -:   32:#include <iterator> // back_inserter
        -:   33:#include <utility>
        -:   34:
        -:   35:/**
        -:   36: * Remove heading and trailing whitespaces from the input parameter.
        -:   37: * If string is all spaces/tabs, return empty string.
        -:   38: * @param s The string to trim.
        -:   39: */
function _ZL4trimRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   40:static std::string trim(const std::string& s)
        -:   41:{
    #####:   42:    const std::string::size_type beg = s.find_first_not_of(" \t");
call    0 never executed
    #####:   43:    if (beg == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:   44:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   45:    const std::string::size_type end = s.find_last_not_of(" \t");
call    0 never executed
    #####:   46:    return s.substr(beg, end - beg + 1);
call    0 never executed
        -:   47:}
        -:   48:
function _ZN9DirectiveC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_ called 0 returned 0% blocks executed 0%
    #####:   49:Directive::Directive(const std::string &_file, const int _linenr, const std::string &_str):
        -:   50:    file(_file),
        -:   51:    linenr(_linenr),
    #####:   52:    str(trim(_str))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   53:{
    #####:   54:}
        -:   55:
        -:   56:bool Preprocessor::missingIncludeFlag;
        -:   57:bool Preprocessor::missingSystemIncludeFlag;
        -:   58:
        -:   59:char Preprocessor::macroChar = char(1);
        -:   60:
function _ZN12PreprocessorC2ER8SettingsP11ErrorLogger called 1 returned 100% blocks executed 100%
        1:   61:Preprocessor::Preprocessor(Settings& settings, ErrorLogger *errorLogger) : mSettings(settings), mErrorLogger(errorLogger)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   62:{
        1:   63:}
        -:   64:
function _ZN12PreprocessorD0Ev called 0 returned 0% blocks executed 0%
function _ZN12PreprocessorD2Ev called 1 returned 100% blocks executed 67%
        2:   65:Preprocessor::~Preprocessor()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   66:{
        1:   67:    for (std::map<std::string, simplecpp::TokenList *>::iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 returned 100%
    #####:   68:        delete it->second;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        1:   69:}
call    0 never executed
call    1 never executed
        -:   70:
        -:   71:namespace {
function _ZN12_GLOBAL__N_120BadInlineSuppressionC2EOS0_ called 0 returned 0% blocks executed 0%
function _ZN12_GLOBAL__N_120BadInlineSuppressionD2Ev called 0 returned 0% blocks executed 0%
    #####:   72:    struct BadInlineSuppression {
call    0 never executed
call    1 never executed
call    2 never executed
function _ZN12_GLOBAL__N_120BadInlineSuppressionC2ERKN9simplecpp8LocationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   73:        BadInlineSuppression(const simplecpp::Location &l, const std::string &msg) : location(l), errmsg(msg) {}
call    0 never executed
call    1 never executed
        -:   74:        simplecpp::Location location;
        -:   75:        std::string errmsg;
        -:   76:    };
        -:   77:}
        -:   78:
function _ZL18inlineSuppressionsRKN9simplecpp9TokenListER8SettingsPNSt7__debug4listIN12_GLOBAL__N_120BadInlineSuppressionESaIS8_EEE called 0 returned 0% blocks executed 0%
    #####:   79:static void inlineSuppressions(const simplecpp::TokenList &tokens, Settings &mSettings, std::list<BadInlineSuppression> *bad)
        -:   80:{
    #####:   81:    std::list<Suppressions::Suppression> inlineSuppressions;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   82:    for (const simplecpp::Token *tok = tokens.cfront(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:        if (tok->comment) {
branch  0 never executed
branch  1 never executed
    #####:   84:            Suppressions::Suppression s;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   85:            std::string errmsg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   86:            if (!s.parseComment(tok->str(), &errmsg))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:   87:                continue;
    #####:   88:            if (!errmsg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   89:                bad->push_back(BadInlineSuppression(tok->location, errmsg));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:   90:            if (!s.errorId.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   91:                inlineSuppressions.push_back(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   92:            continue;
        -:   93:        }
        -:   94:
    #####:   95:        if (inlineSuppressions.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:            continue;
        -:   97:
        -:   98:        // Relative filename
    #####:   99:        std::string relativeFilename(tok->location.file());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  100:        if (mSettings.relativePaths) {
branch  0 never executed
branch  1 never executed
    #####:  101:            for (const std::string & basePath : mSettings.basePaths) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  102:                const std::string bp = basePath + "/";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  103:                if (relativeFilename.compare(0,bp.size(),bp)==0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  104:                    relativeFilename = relativeFilename.substr(bp.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  105:                }
        -:  106:            }
        -:  107:        }
    #####:  108:        relativeFilename = Path::simplifyPath(relativeFilename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  109:
        -:  110:        // Add the suppressions.
    #####:  111:        for (Suppressions::Suppression &suppr : inlineSuppressions) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  112:            suppr.fileName = relativeFilename;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:            suppr.lineNumber = tok->location.line;
    #####:  114:            mSettings.nomsg.addSuppression(suppr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  115:        }
    #####:  116:        inlineSuppressions.clear();
call    0 never executed
        -:  117:    }
    #####:  118:}
        -:  119:
function _ZN12Preprocessor18inlineSuppressionsERKN9simplecpp9TokenListE called 0 returned 0% blocks executed 0%
    #####:  120:void Preprocessor::inlineSuppressions(const simplecpp::TokenList &tokens)
        -:  121:{
    #####:  122:    if (!mSettings.inlineSuppressions)
branch  0 never executed
branch  1 never executed
    #####:  123:        return;
    #####:  124:    std::list<BadInlineSuppression> err;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  125:    ::inlineSuppressions(tokens, mSettings, &err);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  126:    for (std::map<std::string,simplecpp::TokenList*>::const_iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  127:        if (it->second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  128:            ::inlineSuppressions(*it->second, mSettings, &err);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  129:    }
    #####:  130:    for (const BadInlineSuppression &bad : err) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  131:        error(bad.location.file(), bad.location.line, bad.errmsg);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  132:    }
        -:  133:}
        -:  134:
function _ZN12Preprocessor13setDirectivesERKN9simplecpp9TokenListE called 0 returned 0% blocks executed 0%
    #####:  135:void Preprocessor::setDirectives(const simplecpp::TokenList &tokens)
        -:  136:{
        -:  137:    // directive list..
    #####:  138:    mDirectives.clear();
call    0 never executed
        -:  139:
    #####:  140:    std::vector<const simplecpp::TokenList *> list;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  141:    list.reserve(1U + mTokenLists.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  142:    list.push_back(&tokens);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:    for (std::map<std::string, simplecpp::TokenList *>::const_iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  144:        list.push_back(it->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  145:    }
        -:  146:
    #####:  147:    for (const simplecpp::TokenList *tokenList : list) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  148:        for (const simplecpp::Token *tok = tokenList->cfront(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:            if ((tok->op != '#') || (tok->previous && tok->previous->location.line == tok->location.line))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  150:                continue;
    #####:  151:            if (tok->next && tok->next->str() == "endfile")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  152:                continue;
    #####:  153:            Directive directive(tok->location.file(), tok->location.line, emptyString);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  154:            for (const simplecpp::Token *tok2 = tok; tok2 && tok2->location.line == directive.linenr; tok2 = tok2->next) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  155:                if (tok2->comment)
branch  0 never executed
branch  1 never executed
    #####:  156:                    continue;
    #####:  157:                if (!directive.str.empty() && (tok2->location.col > tok2->previous->location.col + tok2->previous->str().size()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  158:                    directive.str += ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  159:                if (directive.str == "#" && tok2->str() == "file")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  160:                    directive.str += "include";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  161:                else
    #####:  162:                    directive.str += tok2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  163:            }
    #####:  164:            mDirectives.push_back(directive);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  165:        }
        -:  166:    }
    #####:  167:}
        -:  168:
function _ZL8samelinePKN9simplecpp5TokenES2_ called 0 returned 0% blocks executed 0%
    #####:  169:static bool sameline(const simplecpp::Token *tok1, const simplecpp::Token *tok2)
        -:  170:{
    #####:  171:    return tok1 && tok2 && tok1->location.sameline(tok2->location);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  172:}
        -:  173:
function _ZL13readconditionPKN9simplecpp5TokenERKNSt7__debug3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessISA_ESaISA_EEESG_ called 0 returned 0% blocks executed 0%
    #####:  174:static std::string readcondition(const simplecpp::Token *iftok, const std::set<std::string> &defined, const std::set<std::string> &undefined)
        -:  175:{
    #####:  176:    const simplecpp::Token *cond = iftok->next;
    #####:  177:    if (!sameline(iftok,cond))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  178:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  179:
    #####:  180:    const simplecpp::Token *next1 = cond->next;
    #####:  181:    const simplecpp::Token *next2 = next1 ? next1->next : nullptr;
branch  0 never executed
branch  1 never executed
    #####:  182:    const simplecpp::Token *next3 = next2 ? next2->next : nullptr;
branch  0 never executed
branch  1 never executed
        -:  183:
    #####:  184:    unsigned int len = 1;
    #####:  185:    if (sameline(iftok,next1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:        len = 2;
    #####:  187:    if (sameline(iftok,next2))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  188:        len = 3;
    #####:  189:    if (sameline(iftok,next3))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  190:        len = 4;
        -:  191:
    #####:  192:    if (len == 1 && cond->str() == "0")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  193:        return "0";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  194:
    #####:  195:    if (len == 1 && cond->name) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  196:        if (defined.find(cond->str()) == defined.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  197:            return cond->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  198:    }
        -:  199:
    #####:  200:    if (len == 2 && cond->op == '!' && next1->name) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  201:        if (defined.find(next1->str()) == defined.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  202:            return next1->str() + "=0";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  203:    }
        -:  204:
    #####:  205:    if (len == 3 && cond->op == '(' && next1->name && next2->op == ')') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  206:        if (defined.find(next1->str()) == defined.end() && undefined.find(next1->str()) == undefined.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:  207:            return next1->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  208:    }
        -:  209:
    #####:  210:    if (len == 3 && cond->name && next1->str() == "==" && next2->number) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  211:        if (defined.find(cond->str()) == defined.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  212:            return cond->str() + '=' + cond->next->next->str();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
        -:  213:    }
        -:  214:
    #####:  215:    std::set<std::string> configset;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  216:    for (; sameline(iftok,cond); cond = cond->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  217:        if (cond->op == '!') {
branch  0 never executed
branch  1 never executed
    #####:  218:            if (!sameline(iftok,cond->next) || !cond->next->name)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  219:                break;
    #####:  220:            if (cond->next->str() == "defined")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  221:                continue;
    #####:  222:            configset.insert(cond->next->str() + "=0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  223:            continue;
        -:  224:        }
    #####:  225:        if (cond->str() != "defined")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:            continue;
    #####:  227:        const simplecpp::Token *dtok = cond->next;
    #####:  228:        if (!dtok)
branch  0 never executed
branch  1 never executed
    #####:  229:            break;
    #####:  230:        if (dtok->op == '(')
branch  0 never executed
branch  1 never executed
    #####:  231:            dtok = dtok->next;
    #####:  232:        if (sameline(iftok,dtok) && dtok->name && defined.find(dtok->str()) == defined.end() && undefined.find(dtok->str()) == undefined.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
    #####:  233:            configset.insert(dtok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  234:    }
    #####:  235:    std::string cfg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  236:    for (const std::string &s : configset) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  237:        if (!cfg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  238:            cfg += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  239:        cfg += s;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  240:    }
    #####:  241:    return cfg;
call    0 never executed
        -:  242:}
        -:  243:
function _ZL9hasDefineRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_ called 0 returned 0% blocks executed 0%
    #####:  244:static bool hasDefine(const std::string &userDefines, const std::string &cfg)
        -:  245:{
    #####:  246:    if (cfg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  247:        return false;
        -:  248:    }
        -:  249:
    #####:  250:    std::string::size_type pos = 0;
    #####:  251:    while (pos < userDefines.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  252:        pos = userDefines.find(cfg, pos);
call    0 never executed
    #####:  253:        if (pos == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  254:            break;
    #####:  255:        const std::string::size_type pos2 = pos + cfg.size();
call    0 never executed
    #####:  256:        if ((pos == 0 || userDefines[pos-1U] == ';') && (pos2 == userDefines.size() || userDefines[pos2] == '='))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  257:            return true;
    #####:  258:        pos = pos2;
        -:  259:    }
    #####:  260:    return false;
        -:  261:}
        -:  262:
function _ZL3cfgRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEERKS6_ called 0 returned 0% blocks executed 0%
    #####:  263:static std::string cfg(const std::vector<std::string> &configs, const std::string &userDefines)
        -:  264:{
    #####:  265:    std::set<std::string> configs2(configs.begin(), configs.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  266:    std::string ret;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  267:    for (const std::string &cfg : configs2) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:  268:        if (cfg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  269:            continue;
    #####:  270:        if (cfg == "0")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  271:            return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  272:        if (hasDefine(userDefines, cfg))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  273:            continue;
    #####:  274:        if (!ret.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  275:            ret += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  276:        ret += cfg;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  277:    }
    #####:  278:    return ret;
call    0 never executed
        -:  279:}
        -:  280:
function _ZL11isUndefinedRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug3setIS4_St4lessIS4_ESaIS4_EEE called 0 returned 0% blocks executed 0%
    #####:  281:static bool isUndefined(const std::string &cfg, const std::set<std::string> &undefined)
        -:  282:{
    #####:  283:    for (std::string::size_type pos1 = 0U; pos1 < cfg.size();) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  284:        const std::string::size_type pos2 = cfg.find(';',pos1);
call    0 never executed
    #####:  285:        const std::string def = (pos2 == std::string::npos) ? cfg.substr(pos1) : cfg.substr(pos1, pos2 - pos1);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  286:
    #####:  287:        const std::string::size_type eq = def.find('=');
call    0 never executed
    #####:  288:        if (eq == std::string::npos && undefined.find(def) != undefined.end())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####:  289:            return true;
    #####:  290:        if (eq != std::string::npos && undefined.find(def.substr(0,eq)) != undefined.end() && def.substr(eq) != "=0")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
    #####:  291:            return true;
        -:  292:
    #####:  293:        pos1 = (pos2 == std::string::npos) ? pos2 : pos2 + 1U;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  294:    }
    #####:  295:    return false;
        -:  296:}
        -:  297:
function _ZL21getConfigsElseIsFalseRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEERKS6_ called 0 returned 0% blocks executed 0%
    #####:  298:static bool getConfigsElseIsFalse(const std::vector<std::string> &configs_if, const std::string &userDefines)
        -:  299:{
    #####:  300:    return std::any_of(configs_if.cbegin(), configs_if.cend(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
function _ZZL21getConfigsElseIsFalseRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEERKS6_ENUlSC_E_C2ERKSD_ called 0 returned 0% blocks executed 0%
function _ZZL21getConfigsElseIsFalseRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEERKS6_ENUlSC_E_C2EOSD_ called 0 returned 0% blocks executed 0%
function _ZZL21getConfigsElseIsFalseRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEERKS6_ENUlSC_E_D2Ev called 0 returned 0% blocks executed 0%
function _ZZL21getConfigsElseIsFalseRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEERKS6_ENKUlSC_E_clESC_ called 0 returned 0% blocks executed 0%
    #####:  301:    [=](const std::string &cfg) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  302:        return hasDefine(userDefines, cfg);
    #####:  303:    });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  304:}
        -:  305:
function _ZL9gotoEndIfPKN9simplecpp5TokenE called 0 returned 0% blocks executed 0%
    #####:  306:static const simplecpp::Token *gotoEndIf(const simplecpp::Token *cmdtok)
        -:  307:{
    #####:  308:    int level = 0;
    #####:  309:    while (nullptr != (cmdtok = cmdtok->next)) {
branch  0 never executed
branch  1 never executed
    #####:  310:        if (cmdtok->op == '#' && !sameline(cmdtok->previous,cmdtok) && sameline(cmdtok, cmdtok->next)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  311:            if (cmdtok->next->str().compare(0,2,"if")==0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  312:                ++level;
    #####:  313:            else if (cmdtok->next->str() == "endif") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  314:                --level;
    #####:  315:                if (level < 0)
branch  0 never executed
branch  1 never executed
    #####:  316:                    return cmdtok;
        -:  317:            }
        -:  318:        }
        -:  319:    }
    #####:  320:    return nullptr;
        -:  321:}
        -:  322:
function _ZL10getConfigsRKN9simplecpp9TokenListERNSt7__debug3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessISA_ESaISA_EEERKSA_RKSE_SF_ called 0 returned 0% blocks executed 0%
    #####:  323:static void getConfigs(const simplecpp::TokenList &tokens, std::set<std::string> &defined, const std::string &userDefines, const std::set<std::string> &undefined, std::set<std::string> &ret)
        -:  324:{
    #####:  325:    std::vector<std::string> configs_if;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  326:    std::vector<std::string> configs_ifndef;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  327:    std::string elseError;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  328:
    #####:  329:    for (const simplecpp::Token *tok = tokens.cfront(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  330:        if (tok->op != '#' || sameline(tok->previous, tok))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  331:            continue;
    #####:  332:        const simplecpp::Token *cmdtok = tok->next;
    #####:  333:        if (!sameline(tok, cmdtok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:            continue;
    #####:  335:        if (cmdtok->str() == "ifdef" || cmdtok->str() == "ifndef" || cmdtok->str() == "if") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  336:            std::string config;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  337:            if (cmdtok->str() == "ifdef" || cmdtok->str() == "ifndef") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  338:                const simplecpp::Token *expr1 = cmdtok->next;
    #####:  339:                if (sameline(tok,expr1) && expr1->name && !sameline(tok,expr1->next))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  340:                    config = expr1->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  341:                if (defined.find(config) != defined.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  342:                    config.clear();
call    0 never executed
    #####:  343:            } else if (cmdtok->str() == "if") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  344:                config = readcondition(cmdtok, defined, undefined);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  345:            }
        -:  346:
        -:  347:            // skip undefined configurations..
    #####:  348:            if (isUndefined(config, undefined))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  349:                config.clear();
call    0 never executed
        -:  350:
    #####:  351:            configs_if.push_back((cmdtok->str() == "ifndef") ? std::string() : config);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  352:            configs_ifndef.push_back((cmdtok->str() == "ifndef") ? config : std::string());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  353:            ret.insert(cfg(configs_if,userDefines));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  354:        } else if (cmdtok->str() == "elif" || cmdtok->str() == "else") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  355:            if (getConfigsElseIsFalse(configs_if,userDefines)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  356:                tok = gotoEndIf(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  357:                if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  358:                    break;
    #####:  359:                tok = tok->previous;
    #####:  360:                continue;
        -:  361:            }
    #####:  362:            if (cmdtok->str() == "else" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  363:                cmdtok->next &&
branch  0 never executed
branch  1 never executed
    #####:  364:                !sameline(cmdtok,cmdtok->next) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  365:                sameline(cmdtok->next, cmdtok->next->next) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  366:                cmdtok->next->op == '#' &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  367:                cmdtok->next->next->str() == "error") {
call    0 never executed
call    1 never executed
    #####:  368:                const std::string &ifcfg = cfg(configs_if, userDefines);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  369:                if (!ifcfg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  370:                    if (!elseError.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  371:                        elseError += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  372:                    elseError += ifcfg;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  373:                }
        -:  374:            }
    #####:  375:            if (!configs_if.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  376:                configs_if.pop_back();
call    0 never executed
    #####:  377:            if (cmdtok->str() == "elif") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  378:                std::string config = readcondition(cmdtok, defined, undefined);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  379:                if (isUndefined(config,undefined))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  380:                    config.clear();
call    0 never executed
    #####:  381:                configs_if.push_back(config);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  382:                ret.insert(cfg(configs_if, userDefines));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  383:            } else if (!configs_ifndef.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  384:                configs_if.push_back(configs_ifndef.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  385:                ret.insert(cfg(configs_if, userDefines));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  386:            }
    #####:  387:        } else if (cmdtok->str() == "endif" && !sameline(tok, cmdtok->next)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  388:            if (!configs_if.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  389:                configs_if.pop_back();
call    0 never executed
    #####:  390:            if (!configs_ifndef.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  391:                configs_ifndef.pop_back();
call    0 never executed
    #####:  392:        } else if (cmdtok->str() == "error") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  393:            if (!configs_ifndef.empty() && !configs_ifndef.back().empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  394:                if (configs_ifndef.size() == 1U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  395:                    ret.erase("");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  396:                std::vector<std::string> configs(configs_if);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  397:                configs.push_back(configs_ifndef.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  398:                ret.erase(cfg(configs, userDefines));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  399:                if (!elseError.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  400:                    elseError += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  401:                elseError += cfg(configs_ifndef, userDefines);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  402:            }
    #####:  403:            if (!configs_if.empty() && !configs_if.back().empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  404:                const std::string &last = configs_if.back();
call    0 never executed
    #####:  405:                if (last.size() > 2U && last.compare(last.size()-2U,2,"=0") == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  406:                    std::vector<std::string> configs(configs_if);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  407:                    ret.erase(cfg(configs, userDefines));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  408:                    configs[configs.size() - 1U] = last.substr(0,last.size()-2U);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  409:                    if (configs.size() == 1U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  410:                        ret.erase("");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  411:                    if (!elseError.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  412:                        elseError += ';';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  413:                    elseError += cfg(configs, userDefines);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  414:                }
        -:  415:            }
    #####:  416:        } else if (cmdtok->str() == "define" && sameline(tok, cmdtok->next) && cmdtok->next->name) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  417:            defined.insert(cmdtok->next->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  418:        }
        -:  419:    }
    #####:  420:    if (!elseError.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  421:        ret.insert(elseError);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  422:}
        -:  423:
        -:  424:
function _ZNK12Preprocessor10getConfigsB5cxx11ERKN9simplecpp9TokenListE called 0 returned 0% blocks executed 0%
    #####:  425:std::set<std::string> Preprocessor::getConfigs(const simplecpp::TokenList &tokens) const
        -:  426:{
    #####:  427:    std::set<std::string> ret = { "" };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####:  428:    if (!tokens.cfront())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  429:        return ret;
        -:  430:
    #####:  431:    std::set<std::string> defined = { "__cplusplus" };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -:  432:
    #####:  433:    ::getConfigs(tokens, defined, mSettings.userDefines, mSettings.userUndefs, ret);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  434:
    #####:  435:    for (std::map<std::string, simplecpp::TokenList*>::const_iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  436:        if (!mSettings.configurationExcluded(it->first))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  437:            ::getConfigs(*(it->second), defined, mSettings.userDefines, mSettings.userUndefs, ret);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  438:    }
        -:  439:
    #####:  440:    return ret;
        -:  441:}
        -:  442:
        -:  443:
function _ZN12Preprocessor10preprocessERSiRNSt7__debug3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_St4lessIS8_ESaISt4pairIKS8_S8_EEEERSC_RKNS1_4listIS8_SaIS8_EEE called 0 returned 0% blocks executed 0%
    #####:  444:void Preprocessor::preprocess(std::istream &istr, std::map<std::string, std::string> &result, const std::string &filename, const std::list<std::string> &includePaths)
        -:  445:{
        -:  446:    (void)includePaths;
        -:  447:
    #####:  448:    simplecpp::OutputList outputList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    std::vector<std::string> files;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  450:    const simplecpp::TokenList tokens1(istr, files, filename, &outputList);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  451:
    #####:  452:    const std::set<std::string> configs = getConfigs(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  453:
    #####:  454:    for (const std::string &cfg : configs) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  455:        if (mSettings.userUndefs.find(cfg) == mSettings.userUndefs.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  456:            result[cfg] = getcode(tokens1, cfg, files, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  457:        }
        -:  458:    }
    #####:  459:}
        -:  460:
function _ZN12Preprocessor17removeSpaceNearNLERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  461:std::string Preprocessor::removeSpaceNearNL(const std::string &str)
        -:  462:{
    #####:  463:    std::string tmp;
call    0 never executed
    #####:  464:    char prev = '\n'; // treat start of file as newline
    #####:  465:    for (std::size_t i = 0; i < str.size(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  466:        if (str[i] == ' ' &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  467:            (prev == '\n' ||
branch  0 never executed
branch  1 never executed
    #####:  468:             i + 1 >= str.size() || // treat end of file as newline
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  469:             str[i+1] == '\n'
call    0 never executed
        -:  470:            )
        -:  471:           ) {
        -:  472:            // Ignore space that has new line in either side of it
        -:  473:        } else {
    #####:  474:            tmp.append(1, str[i]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  475:            prev = str[i];
call    0 never executed
        -:  476:        }
        -:  477:    }
        -:  478:
    #####:  479:    return tmp;
call    0 never executed
        -:  480:}
        -:  481:
function _ZN12Preprocessor21preprocessWhitespacesERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  482:void Preprocessor::preprocessWhitespaces(std::string &processedFile)
        -:  483:{
        -:  484:    // Replace all tabs with spaces..
    #####:  485:    std::replace(processedFile.begin(), processedFile.end(), '\t', ' ');
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  486:
        -:  487:    // Remove space characters that are after or before new line character
    #####:  488:    processedFile = removeSpaceNearNL(processedFile);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  489:}
        -:  490:
function _ZN12Preprocessor10preprocessERSiRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNSt7__debug4listIS6_SaIS6_EEERKS6_RKSB_ called 0 returned 0% blocks executed 0%
    #####:  491:void Preprocessor::preprocess(std::istream &srcCodeStream, std::string &processedFile, std::list<std::string> &resultConfigurations, const std::string &filename, const std::list<std::string> &includePaths)
        -:  492:{
        -:  493:    (void)includePaths;
        -:  494:
    #####:  495:    if (mFile0.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  496:        mFile0 = filename;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  497:
    #####:  498:    simplecpp::OutputList outputList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  499:    std::vector<std::string> files;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  500:    const simplecpp::TokenList tokens1(srcCodeStream, files, filename, &outputList);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  501:
    #####:  502:    const std::set<std::string> configs = getConfigs(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  503:    std::copy(configs.cbegin(), configs.cend(), std::back_inserter(resultConfigurations));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  504:
    #####:  505:    processedFile = tokens1.stringify();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  506:}
        -:  507:
function _ZL8splitcfgRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNSt7__debug4listIS4_SaIS4_EEES6_ called 0 returned 0% blocks executed 0%
    #####:  508:static void splitcfg(const std::string &cfg, std::list<std::string> &defines, const std::string &defaultValue)
        -:  509:{
    #####:  510:    for (std::string::size_type defineStartPos = 0U; defineStartPos < cfg.size();) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  511:        const std::string::size_type defineEndPos = cfg.find(';', defineStartPos);
call    0 never executed
    #####:  512:        std::string def = (defineEndPos == std::string::npos) ? cfg.substr(defineStartPos) : cfg.substr(defineStartPos, defineEndPos - defineStartPos);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####:  513:        if (!defaultValue.empty() && def.find('=') == std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  514:            def += '=' + defaultValue;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  515:        defines.push_back(def);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  516:        if (defineEndPos == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  517:            break;
    #####:  518:        defineStartPos = defineEndPos + 1U;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  519:    }
    #####:  520:}
        -:  521:
function _ZL9createDUIRK8SettingsRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  522:static simplecpp::DUI createDUI(const Settings &mSettings, const std::string &cfg, const std::string &filename)
        -:  523:{
    #####:  524:    simplecpp::DUI dui;
call    0 never executed
        -:  525:
    #####:  526:    splitcfg(mSettings.userDefines, dui.defines, "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  527:    if (!cfg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  528:        splitcfg(cfg, dui.defines, emptyString);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  529:
    #####:  530:    for (const std::string &def : mSettings.library.defines) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  531:        const std::string::size_type pos = def.find_first_of(" (");
call    0 never executed
    #####:  532:        if (pos == std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  533:            dui.defines.push_back(def);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  534:            continue;
        -:  535:        }
    #####:  536:        std::string s = def;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  537:        if (s[pos] == ' ') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  538:            s[pos] = '=';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  539:        } else {
    #####:  540:            s[s.find(')')+1] = '=';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  541:        }
    #####:  542:        dui.defines.push_back(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  543:    }
        -:  544:
    #####:  545:    if (Path::isCPP(filename))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  546:        dui.defines.push_back("__cplusplus");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  547:
    #####:  548:    dui.undefined = mSettings.userUndefs; // -U
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  549:    dui.includePaths = mSettings.includePaths; // -I
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  550:    dui.includes = mSettings.userIncludes;  // --include
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  551:    return dui;
        -:  552:}
        -:  553:
function _ZL9hasErrorsRKNSt7__debug4listIN9simplecpp6OutputESaIS2_EEE called 0 returned 0% blocks executed 0%
    #####:  554:static bool hasErrors(const simplecpp::OutputList &outputList)
        -:  555:{
    #####:  556:    for (simplecpp::OutputList::const_iterator it = outputList.begin(); it != outputList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  557:        switch (it->type) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  558:        case simplecpp::Output::ERROR:
        -:  559:        case simplecpp::Output::INCLUDE_NESTED_TOO_DEEPLY:
        -:  560:        case simplecpp::Output::SYNTAX_ERROR:
        -:  561:        case simplecpp::Output::UNHANDLED_CHAR_ERROR:
    #####:  562:            return true;
    #####:  563:        case simplecpp::Output::WARNING:
        -:  564:        case simplecpp::Output::MISSING_HEADER:
        -:  565:        case simplecpp::Output::PORTABILITY_BACKSLASH:
    #####:  566:            break;
        -:  567:        };
        -:  568:    }
    #####:  569:    return false;
        -:  570:}
        -:  571:
        -:  572:
function _ZN12Preprocessor9loadFilesERKN9simplecpp9TokenListERNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEE called 0 returned 0% blocks executed 0%
    #####:  573:void Preprocessor::loadFiles(const simplecpp::TokenList &rawtokens, std::vector<std::string> &files)
        -:  574:{
    #####:  575:    const simplecpp::DUI dui = createDUI(mSettings, emptyString, files[0]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  576:
    #####:  577:    mTokenLists = simplecpp::load(rawtokens, files, dui, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  578:}
        -:  579:
function _ZN12Preprocessor14removeCommentsEv called 0 returned 0% blocks executed 0%
    #####:  580:void Preprocessor::removeComments()
        -:  581:{
    #####:  582:    for (std::map<std::string, simplecpp::TokenList*>::iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  583:        if (it->second)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  584:            it->second->removeComments();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  585:    }
    #####:  586:}
        -:  587:
function _ZNK12Preprocessor15setPlatformInfoEPN9simplecpp9TokenListE called 0 returned 0% blocks executed 0%
    #####:  588:void Preprocessor::setPlatformInfo(simplecpp::TokenList *tokens) const
        -:  589:{
    #####:  590:    tokens->sizeOfType["bool"]          = mSettings.sizeof_bool;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  591:    tokens->sizeOfType["short"]         = mSettings.sizeof_short;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  592:    tokens->sizeOfType["int"]           = mSettings.sizeof_int;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  593:    tokens->sizeOfType["long"]          = mSettings.sizeof_long;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  594:    tokens->sizeOfType["long long"]     = mSettings.sizeof_long_long;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  595:    tokens->sizeOfType["float"]         = mSettings.sizeof_float;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  596:    tokens->sizeOfType["double"]        = mSettings.sizeof_double;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  597:    tokens->sizeOfType["long double"]   = mSettings.sizeof_long_double;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  598:    tokens->sizeOfType["bool *"]        = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  599:    tokens->sizeOfType["short *"]       = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  600:    tokens->sizeOfType["int *"]         = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  601:    tokens->sizeOfType["long *"]        = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  602:    tokens->sizeOfType["long long *"]   = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  603:    tokens->sizeOfType["float *"]       = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  604:    tokens->sizeOfType["double *"]      = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  605:    tokens->sizeOfType["long double *"] = mSettings.sizeof_pointer;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  606:}
        -:  607:
function _ZN12Preprocessor10preprocessERKN9simplecpp9TokenListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNSt7__debug6vectorIS9_SaIS9_EEEb called 0 returned 0% blocks executed 0%
    #####:  608:simplecpp::TokenList Preprocessor::preprocess(const simplecpp::TokenList &tokens1, const std::string &cfg, std::vector<std::string> &files, bool throwError)
        -:  609:{
    #####:  610:    const simplecpp::DUI dui = createDUI(mSettings, cfg, files[0]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  611:
    #####:  612:    simplecpp::OutputList outputList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  613:    std::list<simplecpp::MacroUsage> macroUsage;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  614:    simplecpp::TokenList tokens2(files);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  615:    simplecpp::preprocess(tokens2, tokens1, files, mTokenLists, dui, &outputList, &macroUsage);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  616:
    #####:  617:    const bool showerror = (!mSettings.userDefines.empty() && !mSettings.force);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  618:    reportOutput(outputList, showerror);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  619:    if (throwError && hasErrors(outputList)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  620:        for (const simplecpp::Output &output : outputList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  621:            switch (output.type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  622:            case simplecpp::Output::ERROR:
        -:  623:            case simplecpp::Output::INCLUDE_NESTED_TOO_DEEPLY:
        -:  624:            case simplecpp::Output::SYNTAX_ERROR:
        -:  625:            case simplecpp::Output::UNHANDLED_CHAR_ERROR:
    #####:  626:                throw output;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  627:            case simplecpp::Output::WARNING:
        -:  628:            case simplecpp::Output::MISSING_HEADER:
        -:  629:            case simplecpp::Output::PORTABILITY_BACKSLASH:
    #####:  630:                break;
        -:  631:            };
        -:  632:        }
        -:  633:    }
        -:  634:
    #####:  635:    tokens2.removeComments();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  636:
        -:  637:    // ensure that guessed define macros without value are not used in the code
    #####:  638:    if (!validateCfg(cfg, macroUsage))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  639:        return simplecpp::TokenList(files);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  640:
    #####:  641:    return tokens2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  642:}
        -:  643:
function _ZN12Preprocessor7getcodeERKN9simplecpp9TokenListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNSt7__debug6vectorIS9_SaIS9_EEEb called 0 returned 0% blocks executed 0%
    #####:  644:std::string Preprocessor::getcode(const simplecpp::TokenList &tokens1, const std::string &cfg, std::vector<std::string> &files, const bool writeLocations)
        -:  645:{
    #####:  646:    simplecpp::TokenList tokens2 = preprocess(tokens1, cfg, files, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  647:    unsigned int prevfile = 0;
    #####:  648:    unsigned int line = 1;
    #####:  649:    std::ostringstream ret;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  650:    for (const simplecpp::Token *tok = tokens2.cfront(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  651:        if (writeLocations && tok->location.fileIndex != prevfile) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  652:            ret << "\n#line " << tok->location.line << " \"" << tok->location.file() << "\"\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    #####:  653:            prevfile = tok->location.fileIndex;
    #####:  654:            line = tok->location.line;
        -:  655:        }
        -:  656:
    #####:  657:        if (tok->previous && line >= tok->location.line) // #7912
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  658:            ret << ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  659:        while (tok->location.line > line) {
branch  0 never executed
branch  1 never executed
    #####:  660:            ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  661:            line++;
        -:  662:        }
    #####:  663:        if (!tok->macro.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  664:            ret << Preprocessor::macroChar;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  665:        ret << tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  666:    }
        -:  667:
    #####:  668:    return ret.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  669:}
        -:  670:
function _ZN12Preprocessor7getcodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_ called 0 returned 0% blocks executed 0%
    #####:  671:std::string Preprocessor::getcode(const std::string &filedata, const std::string &cfg, const std::string &filename)
        -:  672:{
    #####:  673:    simplecpp::OutputList outputList;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  674:    std::vector<std::string> files;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  675:
    #####:  676:    std::istringstream istr(filedata);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  677:    simplecpp::TokenList tokens1(istr, files, Path::simplifyPath(filename), &outputList);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  678:    inlineSuppressions(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  679:    tokens1.removeComments();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  680:    removeComments();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  681:    setDirectives(tokens1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  682:
    #####:  683:    reportOutput(outputList, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:
    #####:  685:    if (hasErrors(outputList))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  686:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  687:
    #####:  688:    std::string ret;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  689:    try {
    #####:  690:        ret = getcode(tokens1, cfg, files, filedata.find("#file") != std::string::npos);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    =====:  691:    } catch (const simplecpp::Output &) {
call    0 never executed
call    1 never executed
    =====:  692:        ret.clear();
call    0 never executed
        -:  693:    }
    #####:  694:    return ret;
call    0 never executed
        -:  695:}
        -:  696:
function _ZN12Preprocessor12reportOutputERKNSt7__debug4listIN9simplecpp6OutputESaIS3_EEEb called 0 returned 0% blocks executed 0%
    #####:  697:void Preprocessor::reportOutput(const simplecpp::OutputList &outputList, bool showerror)
        -:  698:{
    #####:  699:    for (const simplecpp::Output &out : outputList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  700:        switch (out.type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  701:        case simplecpp::Output::ERROR:
    #####:  702:            if (out.msg.compare(0,6,"#error")!=0 || showerror)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  703:                error(out.location.file(), out.location.line, out.msg);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  704:            break;
    #####:  705:        case simplecpp::Output::WARNING:
        -:  706:        case simplecpp::Output::PORTABILITY_BACKSLASH:
    #####:  707:            break;
    #####:  708:        case simplecpp::Output::MISSING_HEADER: {
    #####:  709:            const std::string::size_type pos1 = out.msg.find_first_of("<\"");
call    0 never executed
    #####:  710:            const std::string::size_type pos2 = out.msg.find_first_of(">\"", pos1 + 1U);
call    0 never executed
    #####:  711:            if (pos1 < pos2 && pos2 != std::string::npos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  712:                missingInclude(out.location.file(), out.location.line, out.msg.substr(pos1+1, pos2-pos1-1), out.msg[pos1] == '\"' ? UserHeader : SystemHeader);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
        -:  713:        }
    #####:  714:        break;
    #####:  715:        case simplecpp::Output::INCLUDE_NESTED_TOO_DEEPLY:
        -:  716:        case simplecpp::Output::SYNTAX_ERROR:
        -:  717:        case simplecpp::Output::UNHANDLED_CHAR_ERROR:
    #####:  718:            error(out.location.file(), out.location.line, out.msg);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  719:            break;
        -:  720:        };
        -:  721:    }
    #####:  722:}
        -:  723:
function _ZN12Preprocessor5errorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjS7_ called 0 returned 0% blocks executed 0%
    #####:  724:void Preprocessor::error(const std::string &filename, unsigned int linenr, const std::string &msg)
        -:  725:{
    #####:  726:    std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  727:    if (!filename.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:        const ErrorLogger::ErrorMessage::FileLocation loc(filename, linenr, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  729:        locationList.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  730:    }
    #####:  731:    mErrorLogger->reportErr(ErrorLogger::ErrorMessage(locationList,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  732:                            mFile0,
        -:  733:                            Severity::error,
        -:  734:                            msg,
        -:  735:                            "preprocessorErrorDirective",
    #####:  736:                            false));
    #####:  737:}
        -:  738:
        -:  739:// Report that include is missing
function _ZN12Preprocessor14missingIncludeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjS7_NS_11HeaderTypesE called 0 returned 0% blocks executed 0%
    #####:  740:void Preprocessor::missingInclude(const std::string &filename, unsigned int linenr, const std::string &header, HeaderTypes headerType)
        -:  741:{
    #####:  742:    const std::string fname = Path::fromNativeSeparators(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  743:    Suppressions::ErrorMessage errorMessage;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  744:    errorMessage.errorId = "missingInclude";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  745:    errorMessage.setFileName(fname);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  746:    errorMessage.lineNumber = linenr;
    #####:  747:    if (mSettings.nomsg.isSuppressed(errorMessage))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  748:        return;
    #####:  749:    errorMessage.errorId = "missingIncludeSystem";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  750:    if (headerType == SystemHeader && mSettings.nomsg.isSuppressed(errorMessage))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  751:        return;
        -:  752:
    #####:  753:    if (headerType == SystemHeader)
branch  0 never executed
branch  1 never executed
    #####:  754:        missingSystemIncludeFlag = true;
        -:  755:    else
    #####:  756:        missingIncludeFlag = true;
    #####:  757:    if (mErrorLogger && mSettings.checkConfiguration) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:
    #####:  759:        std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  760:        if (!filename.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  761:            ErrorLogger::ErrorMessage::FileLocation loc;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  762:            loc.line = linenr;
    #####:  763:            loc.setfile(Path::toNativeSeparators(filename));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  764:            locationList.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  765:        }
        -:  766:        ErrorLogger::ErrorMessage errmsg(locationList, mFile0, Severity::information,
    #####:  767:                                         (headerType==SystemHeader) ?
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  768:                                         "Include file: <" + header + "> not found. Please note: Cppcheck does not need standard library headers to get proper results." :
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####:  769:                                         "Include file: \"" + header + "\" not found.",
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  770:                                         (headerType==SystemHeader) ? "missingIncludeSystem" : "missingInclude",
    #####:  771:                                         false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  772:        mErrorLogger->reportInfo(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:    }
        -:  774:}
        -:  775:
function _ZN12Preprocessor11validateCfgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug4listIN9simplecpp10MacroUsageESaISB_EEE called 0 returned 0% blocks executed 0%
    #####:  776:bool Preprocessor::validateCfg(const std::string &cfg, const std::list<simplecpp::MacroUsage> &macroUsageList)
        -:  777:{
    #####:  778:    bool ret = true;
    #####:  779:    std::list<std::string> defines;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  780:    splitcfg(cfg, defines, emptyString);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:    for (const std::string &define : defines) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  782:        if (define.find('=') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  783:            continue;
    #####:  784:        const std::string macroName(define.substr(0, define.find('(')));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  785:        for (const simplecpp::MacroUsage &mu : macroUsageList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  786:            if (mu.macroValueKnown)
branch  0 never executed
branch  1 never executed
    #####:  787:                continue;
    #####:  788:            if (mu.macroName != macroName)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  789:                continue;
    #####:  790:            bool directiveLocation = std::any_of(mDirectives.cbegin(), mDirectives.cend(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
function _ZZN12Preprocessor11validateCfgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug4listIN9simplecpp10MacroUsageESaISB_EEEENUlRK9DirectiveE_C2ERKSJ_ called 0 returned 0% blocks executed 0%
function _ZZN12Preprocessor11validateCfgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug4listIN9simplecpp10MacroUsageESaISB_EEEENUlRK9DirectiveE_C2EOSJ_ called 0 returned 0% blocks executed 0%
function _ZZN12Preprocessor11validateCfgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug4listIN9simplecpp10MacroUsageESaISB_EEEENUlRK9DirectiveE_D2Ev called 0 returned 0% blocks executed 0%
function _ZZN12Preprocessor11validateCfgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug4listIN9simplecpp10MacroUsageESaISB_EEEENKUlRK9DirectiveE_clESI_ called 0 returned 0% blocks executed 0%
    #####:  791:            [=](const Directive &dir) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  792:                return mu.useLocation.file() == dir.file && mu.useLocation.line == dir.linenr;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  793:            });
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  794:
    #####:  795:            if (!directiveLocation) {
branch  0 never executed
branch  1 never executed
    #####:  796:                if (mSettings.isEnabled(Settings::INFORMATION))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:                    validateCfgError(mu.useLocation.file(), mu.useLocation.line, cfg, macroName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  798:                ret = false;
        -:  799:            }
        -:  800:        }
        -:  801:    }
        -:  802:
    #####:  803:    return ret;
        -:  804:}
        -:  805:
function _ZN12Preprocessor16validateCfgErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjS7_S7_ called 0 returned 0% blocks executed 0%
    #####:  806:void Preprocessor::validateCfgError(const std::string &file, const unsigned int line, const std::string &cfg, const std::string &macro)
        -:  807:{
    #####:  808:    const std::string id = "ConfigurationNotChecked";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  809:    std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  810:    const ErrorLogger::ErrorMessage::FileLocation loc(file, line, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  811:    locationList.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  812:    const ErrorLogger::ErrorMessage errmsg(locationList, mFile0, Severity::information, "Skipping configuration '" + cfg + "' since the value of '" + macro + "' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.", id, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    #####:  813:    mErrorLogger->reportInfo(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  814:}
call    0 never executed
        -:  815:
function _ZN12Preprocessor16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  816:void Preprocessor::getErrorMessages(ErrorLogger *errorLogger, const Settings *settings)
        -:  817:{
    #####:  818:    Settings settings2(*settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  819:    Preprocessor preprocessor(settings2, errorLogger);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  820:    settings2.checkConfiguration = true;
    #####:  821:    preprocessor.missingInclude(emptyString, 1, emptyString, UserHeader);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:    preprocessor.missingInclude(emptyString, 1, emptyString, SystemHeader);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:    preprocessor.validateCfgError(emptyString, 1, "X", "X");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  824:    preprocessor.error(emptyString, 1, "#error message");   // #error ..
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  825:}
        -:  826:
function _ZNK12Preprocessor4dumpERSo called 0 returned 0% blocks executed 0%
    #####:  827:void Preprocessor::dump(std::ostream &out) const
        -:  828:{
        -:  829:    // Create a xml directive dump.
        -:  830:    // The idea is not that this will be readable for humans. It's a
        -:  831:    // data dump that 3rd party tools could load and get useful info from.
    #####:  832:    out << "  <directivelist>" << std::endl;
call    0 never executed
call    1 never executed
        -:  833:
    #####:  834:    for (const Directive &dir : mDirectives) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  835:        out << "    <directive "
    #####:  836:            << "file=\"" << ErrorLogger::toxml(dir.file) << "\" "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  837:            << "linenr=\"" << dir.linenr << "\" "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
        -:  838:            // str might contain characters such as '"', '<' or '>' which
        -:  839:            // could result in invalid XML, so run it through toxml().
    #####:  840:            << "str=\"" << ErrorLogger::toxml(dir.str) << "\"/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
        -:  841:    }
    #####:  842:    out << "  </directivelist>" << std::endl;
call    0 never executed
call    1 never executed
    #####:  843:}
        -:  844:
        -:  845:static const std::uint32_t crc32Table[] = {
        -:  846:    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
        -:  847:    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
        -:  848:    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
        -:  849:    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        -:  850:    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
        -:  851:    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
        -:  852:    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
        -:  853:    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        -:  854:    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
        -:  855:    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
        -:  856:    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
        -:  857:    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        -:  858:    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
        -:  859:    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
        -:  860:    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
        -:  861:    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        -:  862:    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
        -:  863:    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
        -:  864:    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
        -:  865:    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        -:  866:    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
        -:  867:    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
        -:  868:    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
        -:  869:    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        -:  870:    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
        -:  871:    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
        -:  872:    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
        -:  873:    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        -:  874:    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
        -:  875:    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
        -:  876:    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
        -:  877:    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        -:  878:    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
        -:  879:    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
        -:  880:    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
        -:  881:    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        -:  882:    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
        -:  883:    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
        -:  884:    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
        -:  885:    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        -:  886:    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
        -:  887:    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
        -:  888:    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
        -:  889:};
        -:  890:
function _ZL5crc32RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  891:static std::uint32_t crc32(const std::string &data)
        -:  892:{
    #####:  893:    std::uint32_t crc = ~0U;
    #####:  894:    for (char c : data) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  895:        crc = crc32Table[(crc ^ (unsigned char)c) & 0xFF] ^ (crc >> 8);
        -:  896:    }
    #####:  897:    return crc ^ ~0U;
        -:  898:}
        -:  899:
function _ZNK12Preprocessor17calculateChecksumERKN9simplecpp9TokenListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  900:unsigned int Preprocessor::calculateChecksum(const simplecpp::TokenList &tokens1, const std::string &toolinfo) const
        -:  901:{
    #####:  902:    std::ostringstream ostr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  903:    ostr << toolinfo << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  904:    for (const simplecpp::Token *tok = tokens1.cfront(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  905:        if (!tok->comment)
branch  0 never executed
branch  1 never executed
    #####:  906:            ostr << tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  907:    }
    #####:  908:    for (std::map<std::string, simplecpp::TokenList *>::const_iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  909:        for (const simplecpp::Token *tok = it->second->cfront(); tok; tok = tok->next) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  910:            if (!tok->comment)
branch  0 never executed
branch  1 never executed
    #####:  911:                ostr << tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  912:        }
        -:  913:    }
    #####:  914:    return crc32(ostr.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  915:}
        -:  916:
function _ZN12Preprocessor17simplifyPragmaAsmEPN9simplecpp9TokenListE called 0 returned 0% blocks executed 0%
    #####:  917:void Preprocessor::simplifyPragmaAsm(simplecpp::TokenList *tokenList)
        -:  918:{
    #####:  919:    Preprocessor::simplifyPragmaAsmPrivate(tokenList);
call    0 never executed
    #####:  920:    for (std::map<std::string, simplecpp::TokenList *>::iterator it = mTokenLists.begin(); it != mTokenLists.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  921:        Preprocessor::simplifyPragmaAsmPrivate(it->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  922:    }
    #####:  923:}
        -:  924:
function _ZN12Preprocessor24simplifyPragmaAsmPrivateEPN9simplecpp9TokenListE called 0 returned 0% blocks executed 0%
    #####:  925:void Preprocessor::simplifyPragmaAsmPrivate(simplecpp::TokenList *tokenList)
        -:  926:{
        -:  927:    // assembler code..
    #####:  928:    for (simplecpp::Token *tok = tokenList->front(); tok; tok = tok->next) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  929:        if (tok->op != '#')
branch  0 never executed
branch  1 never executed
    #####:  930:            continue;
    #####:  931:        if (sameline(tok, tok->previousSkipComments()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  932:            continue;
        -:  933:
    #####:  934:        const simplecpp::Token * const tok2 = tok->nextSkipComments();
call    0 never executed
    #####:  935:        if (!tok2 || !sameline(tok, tok2) || tok2->str() != "pragma")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  936:            continue;
        -:  937:
    #####:  938:        const simplecpp::Token * const tok3 = tok2->nextSkipComments();
call    0 never executed
    #####:  939:        if (!tok3 || !sameline(tok, tok3) || tok3->str() != "asm")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  940:            continue;
        -:  941:
    #####:  942:        const simplecpp::Token *endasm = tok3;
    #####:  943:        while ((endasm = endasm->next) != nullptr) {
branch  0 never executed
branch  1 never executed
    #####:  944:            if (endasm->op != '#' || sameline(endasm,endasm->previousSkipComments()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  945:                continue;
    #####:  946:            const simplecpp::Token * const endasm2 = endasm->nextSkipComments();
call    0 never executed
    #####:  947:            if (!endasm2 || !sameline(endasm, endasm2) || endasm2->str() != "pragma")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  948:                continue;
    #####:  949:            const simplecpp::Token * const endasm3 = endasm2->nextSkipComments();
call    0 never executed
    #####:  950:            if (!endasm3 || !sameline(endasm2, endasm3) || endasm3->str() != "endasm")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  951:                continue;
    #####:  952:            while (sameline(endasm,endasm3))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:                endasm = endasm->next;
    #####:  954:            break;
        -:  955:        }
        -:  956:
    #####:  957:        const simplecpp::Token * const tok4 = tok3->next;
    #####:  958:        tok->setstr("asm");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  959:        const_cast<simplecpp::Token *>(tok2)->setstr("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  960:        const_cast<simplecpp::Token *>(tok3)->setstr(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  961:        const_cast<simplecpp::Token *>(tok4)->setstr(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  962:        while (tok4->next != endasm)
branch  0 never executed
branch  1 never executed
    #####:  963:            tokenList->deleteToken(tok4->next);
call    0 never executed
        -:  964:    }
function _GLOBAL__sub_I__ZN9DirectiveC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_ called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  965:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
