        -:    0:Source:/home/workspace/lib/checkother.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkother.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkother.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "checkother.h"
        -:   22:#include "checkuninitvar.h" // CheckUninitVar::isVariableUsage
        -:   23:
        -:   24:#include "astutils.h"
        -:   25:#include "errorlogger.h"
        -:   26:#include "library.h"
        -:   27:#include "mathlib.h"
        -:   28:#include "settings.h"
        -:   29:#include "standards.h"
        -:   30:#include "symboldatabase.h"
        -:   31:#include "token.h"
        -:   32:#include "tokenize.h"
        -:   33:#include "utils.h"
        -:   34:
        -:   35:#include <algorithm> // find_if()
        -:   36:#include <list>
        -:   37:#include <map>
        -:   38:#include <ostream>
        -:   39:#include <set>
        -:   40:#include <utility>
        -:   41://---------------------------------------------------------------------------
        -:   42:
        -:   43:// Register this check class (by creating a static instance of it)
        -:   44:namespace {
        1:   45:    CheckOther instance;
call    0 returned 100%
call    1 returned 100%
        -:   46:}
        -:   47:
        1:   48:static const struct CWE CWE128(128U);   // Wrap-around Error
call    0 returned 100%
        1:   49:static const struct CWE CWE131(131U);   // Incorrect Calculation of Buffer Size
call    0 returned 100%
        1:   50:static const struct CWE CWE197(197U);   // Numeric Truncation Error
call    0 returned 100%
        1:   51:static const struct CWE CWE362(362U);   // Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')
call    0 returned 100%
        1:   52:static const struct CWE CWE369(369U);   // Divide By Zero
call    0 returned 100%
        1:   53:static const struct CWE CWE398(398U);   // Indicator of Poor Code Quality
call    0 returned 100%
        1:   54:static const struct CWE CWE475(475U);   // Undefined Behavior for Input to API
call    0 returned 100%
        1:   55:static const struct CWE CWE482(482U);   // Comparing instead of Assigning
call    0 returned 100%
        1:   56:static const struct CWE CWE561(561U);   // Dead Code
call    0 returned 100%
        1:   57:static const struct CWE CWE563(563U);   // Assignment to Variable without Use ('Unused Variable')
call    0 returned 100%
        1:   58:static const struct CWE CWE570(570U);   // Expression is Always False
call    0 returned 100%
        1:   59:static const struct CWE CWE571(571U);   // Expression is Always True
call    0 returned 100%
        1:   60:static const struct CWE CWE672(672U);   // Operation on a Resource after Expiration or Release
call    0 returned 100%
        1:   61:static const struct CWE CWE628(628U);   // Function Call with Incorrectly Specified Arguments
call    0 returned 100%
        1:   62:static const struct CWE CWE683(683U);   // Function Call With Incorrect Order of Arguments
call    0 returned 100%
        1:   63:static const struct CWE CWE686(686U);   // Function Call With Incorrect Argument Type
call    0 returned 100%
        1:   64:static const struct CWE CWE704(704U);   // Incorrect Type Conversion or Cast
call    0 returned 100%
        1:   65:static const struct CWE CWE758(758U);   // Reliance on Undefined, Unspecified, or Implementation-Defined Behavior
call    0 returned 100%
        1:   66:static const struct CWE CWE768(768U);   // Incorrect Short Circuit Evaluation
call    0 returned 100%
        1:   67:static const struct CWE CWE783(783U);   // Operator Precedence Logic Error
call    0 returned 100%
        -:   68:
        -:   69://----------------------------------------------------------------------------------
        -:   70:// The return value of fgetc(), getc(), ungetc(), getchar() etc. is an integer value.
        -:   71:// If this return value is stored in a character variable and then compared
        -:   72:// to EOF, which is an integer, the comparison maybe be false.
        -:   73://
        -:   74:// Reference:
        -:   75:// - Ticket #160
        -:   76:// - http://www.cplusplus.com/reference/cstdio/fgetc/
        -:   77:// - http://www.cplusplus.com/reference/cstdio/getc/
        -:   78:// - http://www.cplusplus.com/reference/cstdio/getchar/
        -:   79:// - http://www.cplusplus.com/reference/cstdio/ungetc/ ...
        -:   80://----------------------------------------------------------------------------------
function _ZN10CheckOther25checkCastIntToCharAndBackEv called 0 returned 0% blocks executed 0%
    #####:   81:void CheckOther::checkCastIntToCharAndBack()
        -:   82:{
    #####:   83:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   84:        return;
        -:   85:
    #####:   86:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:   87:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   88:        std::map<int, std::string> vars;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   89:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   90:            // Quick check to see if any of the matches below have any chances
    #####:   91:            if (!Token::Match(tok, "%var%|EOF %comp%|="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   92:                continue;
    #####:   93:            if (Token::Match(tok, "%var% = fclose|fflush|fputc|fputs|fscanf|getchar|getc|fgetc|putchar|putc|puts|scanf|sscanf|ungetc (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   94:                const Variable *var = tok->variable();
call    0 never executed
    #####:   95:                if (var && var->typeEndToken()->str() == "char" && !var->typeEndToken()->isSigned()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:   96:                    vars[tok->varId()] = tok->strAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:   97:                }
    #####:   98:            } else if (Token::Match(tok, "EOF %comp% ( %var% = fclose|fflush|fputc|fputs|fscanf|getchar|getc|fgetc|putchar|putc|puts|scanf|sscanf|ungetc (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   99:                tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  100:                const Variable *var = tok->variable();
call    0 never executed
    #####:  101:                if (var && var->typeEndToken()->str() == "char" && !var->typeEndToken()->isSigned()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  102:                    checkCastIntToCharAndBackError(tok, tok->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  103:                }
    #####:  104:            } else if (mTokenizer->isCPP() && (Token::Match(tok, "EOF %comp% ( %var% = std :: cin . get (") || Token::Match(tok, "EOF %comp% ( %var% = cin . get ("))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  105:                tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  106:                const Variable *var = tok->variable();
call    0 never executed
    #####:  107:                if (var && var->typeEndToken()->str() == "char" && !var->typeEndToken()->isSigned()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  108:                    checkCastIntToCharAndBackError(tok, "cin.get");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  109:                }
    #####:  110:            } else if (mTokenizer->isCPP() && (Token::Match(tok, "%var% = std :: cin . get (") || Token::Match(tok, "%var% = cin . get ("))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  111:                const Variable *var = tok->variable();
call    0 never executed
    #####:  112:                if (var && var->typeEndToken()->str() == "char" && !var->typeEndToken()->isSigned()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  113:                    vars[tok->varId()] = "cin.get";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  114:                }
    #####:  115:            } else if (Token::Match(tok, "%var% %comp% EOF")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  116:                if (vars.find(tok->varId()) != vars.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  117:                    checkCastIntToCharAndBackError(tok, vars[tok->varId()]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  118:                }
    #####:  119:            } else if (Token::Match(tok, "EOF %comp% %var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  120:                tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:                if (vars.find(tok->varId()) != vars.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  122:                    checkCastIntToCharAndBackError(tok, vars[tok->varId()]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  123:                }
        -:  124:            }
        -:  125:        }
        -:  126:    }
        -:  127:}
        -:  128:
function _ZN10CheckOther30checkCastIntToCharAndBackErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  129:void CheckOther::checkCastIntToCharAndBackError(const Token *tok, const std::string &strFunctionName)
        -:  130:{
    #####:  131:    reportError(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  132:        tok,
        -:  133:        Severity::warning,
        -:  134:        "checkCastIntToCharAndBack",
    #####:  135:        "$symbol:" + strFunctionName + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  136:        "Storing $symbol() return value in char variable and then comparing with EOF.\n"
        -:  137:        "When saving $symbol() return value in char variable there is loss of precision. "
        -:  138:        " When $symbol() returns EOF this value is truncated. Comparing the char "
        -:  139:        "variable with EOF can have unexpected results. For instance a loop \"while (EOF != (c = $symbol());\" "
        -:  140:        "loops forever on some compilers/platforms and on other compilers/platforms it will stop "
        -:  141:        "when the file contains a matching character.", CWE197, false
        -:  142:    );
    #####:  143:}
        -:  144:
        -:  145:
        -:  146://---------------------------------------------------------------------------
        -:  147:// Clarify calculation precedence for ternary operators.
        -:  148://---------------------------------------------------------------------------
function _ZN10CheckOther18clarifyCalculationEv called 0 returned 0% blocks executed 0%
    #####:  149:void CheckOther::clarifyCalculation()
        -:  150:{
    #####:  151:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  152:        return;
        -:  153:
    #####:  154:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  155:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  156:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  157:            // ? operator where lhs is arithmetical expression
    #####:  158:            if (tok->str() != "?" || !tok->astOperand1() || !tok->astOperand1()->isCalculation())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  159:                continue;
    #####:  160:            if (!tok->astOperand1()->isArithmeticalOp() && tok->astOperand1()->tokType() != Token::eBitOp)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  161:                continue;
        -:  162:
        -:  163:            // Is code clarified by parentheses already?
    #####:  164:            const Token *tok2 = tok->astOperand1();
call    0 never executed
    #####:  165:            for (; tok2; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  166:                if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  167:                    tok2 = tok2->link();
call    0 never executed
    #####:  168:                else if (tok2->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  169:                    break;
    #####:  170:                else if (tok2->str() == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  171:                    clarifyCalculationError(tok, tok->astOperand1()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  172:                    break;
        -:  173:                }
        -:  174:            }
        -:  175:        }
        -:  176:    }
        -:  177:}
        -:  178:
function _ZN10CheckOther23clarifyCalculationErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  179:void CheckOther::clarifyCalculationError(const Token *tok, const std::string &op)
        -:  180:{
        -:  181:    // suspicious calculation
    #####:  182:    const std::string calc("'a" + op + "b?c:d'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  183:
        -:  184:    // recommended calculation #1
    #####:  185:    const std::string s1("'(a" + op + "b)?c:d'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  186:
        -:  187:    // recommended calculation #2
    #####:  188:    const std::string s2("'a" + op + "(b?c:d)'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  189:
    #####:  190:    reportError(tok,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  191:                Severity::style,
        -:  192:                "clarifyCalculation",
    #####:  193:                "Clarify calculation precedence for '" + op + "' and '?'.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  194:                "Suspicious calculation. Please use parentheses to clarify the code. "
    #####:  195:                "The code '" + calc + "' should be written as either '" + s1 + "' or '" + s2 + "'.", CWE783, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####:  196:}
call    0 never executed
        -:  197:
        -:  198://---------------------------------------------------------------------------
        -:  199:// Clarify (meaningless) statements like *foo++; with parentheses.
        -:  200://---------------------------------------------------------------------------
function _ZN10CheckOther16clarifyStatementEv called 0 returned 0% blocks executed 0%
    #####:  201:void CheckOther::clarifyStatement()
        -:  202:{
    #####:  203:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  204:        return;
        -:  205:
    #####:  206:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  207:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  208:        for (const Token* tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  209:            if (Token::Match(tok, "* %name%") && tok->astOperand1()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  210:                const Token *tok2 = tok->previous();
call    0 never executed
        -:  211:
    #####:  212:                while (tok2 && tok2->str() == "*")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  213:                    tok2 = tok2->previous();
call    0 never executed
        -:  214:
    #####:  215:                if (tok2 && !tok2->astParent() && Token::Match(tok2, "[{};]")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  216:                    tok2 = tok->astOperand1();
call    0 never executed
    #####:  217:                    if (Token::Match(tok2, "++|-- [;,]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  218:                        clarifyStatementError(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  219:                }
        -:  220:            }
        -:  221:        }
        -:  222:    }
        -:  223:}
        -:  224:
function _ZN10CheckOther21clarifyStatementErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  225:void CheckOther::clarifyStatementError(const Token *tok)
        -:  226:{
    #####:  227:    reportError(tok, Severity::warning, "clarifyStatement", "In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'?\n"
call    0 never executed
        -:  228:                "A statement like '*A++;' might not do what you intended. Postfix 'operator++' is executed before 'operator*'. "
        -:  229:                "Thus, the dereference is meaningless. Did you intend to write '(*A)++;'?", CWE783, false);
    #####:  230:}
        -:  231:
        -:  232://---------------------------------------------------------------------------
        -:  233:// Check for suspicious occurrences of 'if(); {}'.
        -:  234://---------------------------------------------------------------------------
function _ZN10CheckOther24checkSuspiciousSemicolonEv called 0 returned 0% blocks executed 0%
    #####:  235:void CheckOther::checkSuspiciousSemicolon()
        -:  236:{
    #####:  237:    if (!mSettings->inconclusive || !mSettings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  238:        return;
        -:  239:
    #####:  240:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  241:
        -:  242:    // Look for "if(); {}", "for(); {}" or "while(); {}"
    #####:  243:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  244:        if (scope.type == Scope::eIf || scope.type == Scope::eElse || scope.type == Scope::eWhile || scope.type == Scope::eFor) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  245:            // Ensure the semicolon is at the same line number as the if/for/while statement
        -:  246:            // and the {..} block follows it without an extra empty line.
    #####:  247:            if (Token::simpleMatch(scope.bodyStart, "{ ; } {") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  248:                scope.bodyStart->previous()->linenr() == scope.bodyStart->tokAt(2)->linenr()
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  249:                && scope.bodyStart->linenr()+1 >= scope.bodyStart->tokAt(3)->linenr()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  250:                SuspiciousSemicolonError(scope.classDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  251:            }
        -:  252:        }
        -:  253:    }
        -:  254:}
        -:  255:
function _ZN10CheckOther24SuspiciousSemicolonErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  256:void CheckOther::SuspiciousSemicolonError(const Token* tok)
        -:  257:{
    #####:  258:    reportError(tok, Severity::warning, "suspiciousSemicolon",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  259:                "Suspicious use of ; at the end of '" + (tok ? tok->str() : std::string()) + "' statement.", CWE398, true);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####:  260:}
        -:  261:
        -:  262:
        -:  263://---------------------------------------------------------------------------
        -:  264:// For C++ code, warn if C-style casts are used on pointer types
        -:  265://---------------------------------------------------------------------------
function _ZN10CheckOther26warningOldStylePointerCastEv called 0 returned 0% blocks executed 0%
    #####:  266:void CheckOther::warningOldStylePointerCast()
        -:  267:{
        -:  268:    // Only valid on C++ code
    #####:  269:    if (!mSettings->isEnabled(Settings::STYLE) || !mTokenizer->isCPP())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  270:        return;
        -:  271:
    #####:  272:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  273:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  274:        const Token* tok;
    #####:  275:        if (scope->function && scope->function->isConstructor())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  276:            tok = scope->classDef;
        -:  277:        else
    #####:  278:            tok = scope->bodyStart;
    #####:  279:        for (; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  280:            // Old style pointer casting..
    #####:  281:            if (!Token::Match(tok, "( const|volatile| const|volatile| %type% * const| ) (| %name%|%num%|%bool%|%char%|%str%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  282:                continue;
        -:  283:
        -:  284:            // skip first "const" in "const Type* const"
    #####:  285:            while (Token::Match(tok->next(), "const|volatile"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  286:                tok = tok->next();
call    0 never executed
    #####:  287:            const Token* typeTok = tok->next();
call    0 never executed
        -:  288:            // skip second "const" in "const Type* const"
    #####:  289:            if (tok->strAt(3) == "const")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  290:                tok = tok->next();
call    0 never executed
        -:  291:
    #####:  292:            const Token *p = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:            if (p->hasKnownIntValue() && p->values().front().intvalue==0) // Casting nullpointers is safe
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  294:                continue;
        -:  295:
        -:  296:            // Is "type" a class?
    #####:  297:            if (typeTok->type())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  298:                cstyleCastError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  299:        }
        -:  300:    }
        -:  301:}
        -:  302:
function _ZN10CheckOther15cstyleCastErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  303:void CheckOther::cstyleCastError(const Token *tok)
        -:  304:{
    #####:  305:    reportError(tok, Severity::style, "cstyleCast",
call    0 never executed
        -:  306:                "C-style pointer casting\n"
        -:  307:                "C-style pointer casting detected. C++ offers four different kinds of casts as replacements: "
        -:  308:                "static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to "
        -:  309:                "any of those automatically, thus it is considered safer if the programmer explicitly states "
        -:  310:                "which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.", CWE398, false);
    #####:  311:}
        -:  312:
        -:  313://---------------------------------------------------------------------------
        -:  314:// float* f; double* d = (double*)f; <-- Pointer cast to a type with an incompatible binary data representation
        -:  315://---------------------------------------------------------------------------
        -:  316:
function _ZN10CheckOther18invalidPointerCastEv called 0 returned 0% blocks executed 0%
    #####:  317:void CheckOther::invalidPointerCast()
        -:  318:{
    #####:  319:    if (!mSettings->isEnabled(Settings::PORTABILITY))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  320:        return;
        -:  321:
    #####:  322:    const bool printInconclusive = mSettings->inconclusive;
    #####:  323:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  324:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  325:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  326:            const Token* toTok = nullptr;
    #####:  327:            const Token* fromTok = nullptr;
        -:  328:            // Find cast
    #####:  329:            if (Token::Match(tok, "( const|volatile| const|volatile| %type% %type%| const| * )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  330:                toTok = tok;
    #####:  331:                fromTok = tok->astOperand1();
call    0 never executed
    #####:  332:            } else if (Token::simpleMatch(tok, "reinterpret_cast <") && tok->linkAt(1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  333:                toTok = tok->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  334:                fromTok = toTok->astOperand2();
call    0 never executed
        -:  335:            }
    #####:  336:            if (!fromTok)
branch  0 never executed
branch  1 never executed
    #####:  337:                continue;
        -:  338:
    #####:  339:            const ValueType* fromType = fromTok->valueType();
call    0 never executed
    #####:  340:            const ValueType* toType = toTok->valueType();
call    0 never executed
    #####:  341:            if (!fromType || !toType || !fromType->pointer || !toType->pointer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  342:                continue;
        -:  343:
    #####:  344:            if (fromType->type != toType->type && fromType->type >= ValueType::Type::BOOL && toType->type >= ValueType::Type::BOOL && (toType->type != ValueType::Type::CHAR || printInconclusive)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  345:                if (toType->isIntegral() && fromType->isIntegral())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  346:                    continue;
    #####:  347:                std::string toStr = toType->isIntegral() ? "integer *" : toType->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####:  348:                toStr.erase(toStr.size()-2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  349:                std::string fromStr = fromType->isIntegral() ? "integer *" : fromType->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####:  350:                fromStr.erase(fromStr.size() - 2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  351:
    #####:  352:                invalidPointerCastError(tok, fromStr, toStr, toType->type == ValueType::Type::CHAR);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  353:            }
        -:  354:        }
        -:  355:    }
        -:  356:}
        -:  357:
function _ZN10CheckOther23invalidPointerCastErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####:  358:void CheckOther::invalidPointerCastError(const Token* tok, const std::string& from, const std::string& to, bool inconclusive)
        -:  359:{
    #####:  360:    if (to == "integer") { // If we cast something to int*, this can be useful to play with its binary data representation
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  361:        if (!inconclusive)
branch  0 never executed
branch  1 never executed
    #####:  362:            reportError(tok, Severity::portability, "invalidPointerCast", "Casting from " + from + "* to integer* is not portable due to different binary data representations on different platforms.", CWE704, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  363:        else
    #####:  364:            reportError(tok, Severity::portability, "invalidPointerCast", "Casting from " + from + "* to char* is not portable due to different binary data representations on different platforms.", CWE704, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  365:    } else
    #####:  366:        reportError(tok, Severity::portability, "invalidPointerCast", "Casting between " + from + "* and " + to + "* which have an incompatible binary data representation.", CWE704, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####:  367:}
        -:  368:
        -:  369://---------------------------------------------------------------------------
        -:  370:// This check detects errors on POSIX systems, when a pipe command called
        -:  371:// with a wrong dimensioned file descriptor array. The pipe command requires
        -:  372:// exactly an integer array of dimension two as parameter.
        -:  373://
        -:  374:// References:
        -:  375://  - http://linux.die.net/man/2/pipe
        -:  376://  - ticket #3521
        -:  377://---------------------------------------------------------------------------
function _ZN10CheckOther22checkPipeParameterSizeEv called 0 returned 0% blocks executed 0%
    #####:  378:void CheckOther::checkPipeParameterSize()
        -:  379:{
    #####:  380:    if (!mSettings->posix())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  381:        return;
        -:  382:
    #####:  383:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  384:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  385:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  386:            if (Token::Match(tok, "pipe ( %var% )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  387:                Token::Match(tok, "pipe2 ( %var% ,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  388:                const Token * const varTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  389:
    #####:  390:                const Variable *var = varTok->variable();
call    0 never executed
        -:  391:                MathLib::bigint dim;
    #####:  392:                if (var && var->isArray() && !var->isArgument() && ((dim=var->dimension(0U)) < 2)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  393:                    const std::string strDim = MathLib::toString(dim);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  394:                    checkPipeParameterSizeError(varTok,varTok->str(), strDim);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  395:                }
        -:  396:            }
        -:  397:        }
        -:  398:    }
        -:  399:}
        -:  400:
function _ZN10CheckOther27checkPipeParameterSizeErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####:  401:void CheckOther::checkPipeParameterSizeError(const Token *tok, const std::string &strVarName, const std::string &strDim)
        -:  402:{
    #####:  403:    reportError(tok, Severity::error,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  404:                "wrongPipeParameterSize",
    #####:  405:                "$symbol:" + strVarName + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  406:                "Buffer '$symbol' must have size of 2 integers if used as parameter of pipe().\n"
        -:  407:                "The pipe()/pipe2() system command takes an argument, which is an array of exactly two integers.\n"
    #####:  408:                "The variable '$symbol' is an array of size " + strDim + ", which does not match.", CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  409:}
        -:  410:
        -:  411://---------------------------------------------------------------------------
        -:  412:// Detect redundant assignments: x = 0; x = 4;
        -:  413://---------------------------------------------------------------------------
        -:  414:
function _ZN10CheckOther24checkRedundantAssignmentEv called 0 returned 0% blocks executed 0%
    #####:  415:void CheckOther::checkRedundantAssignment()
        -:  416:{
    #####:  417:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  418:        return;
    #####:  419:    const SymbolDatabase* symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  420:    for (const Scope *scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  421:        if (!scope->bodyStart)
branch  0 never executed
branch  1 never executed
    #####:  422:            continue;
    #####:  423:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  424:            if (Token::simpleMatch(tok, "] ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  425:                // todo: handle lambdas
    #####:  426:                break;
    #####:  427:            if (Token::simpleMatch(tok, "try {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  428:                // todo: check try blocks
    #####:  429:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  430:            if ((tok->isAssignmentOp() || Token::Match(tok, "++|--")) && tok->astOperand1()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  431:                if (tok->astParent())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  432:                    continue;
        -:  433:
        -:  434:                // Do not warn about redundant initialization when rhs is trivial
        -:  435:                // TODO : do not simplify the variable declarations
    #####:  436:                bool isInitialization = false;
    #####:  437:                if (Token::Match(tok->tokAt(-3), "%var% ; %var% =") && tok->previous()->variable() && tok->previous()->variable()->nameToken() == tok->tokAt(-3) && tok->tokAt(-3)->linenr() == tok->previous()->linenr()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
    #####:  438:                    isInitialization = true;
    #####:  439:                    bool trivial = true;
    #####:  440:                    visitAstNodes(tok->astOperand2(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
function _ZZN10CheckOther24checkRedundantAssignmentEvENKUlPK5TokenE_clES2_ called 0 returned 0% blocks executed 0%
    #####:  441:                    [&](const Token *rhs) {
    #####:  442:                        if (Token::simpleMatch(rhs, "{ 0 }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  443:                            return ChildrenToVisit::none;
    #####:  444:                        if (Token::Match(rhs, "%str%|%num%|%name%") && !rhs->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  445:                            return ChildrenToVisit::none;
    #####:  446:                        if (rhs->isCast())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  447:                            return ChildrenToVisit::op2;
    #####:  448:                        trivial = false;
    #####:  449:                        return ChildrenToVisit::done;
        -:  450:                    });
    #####:  451:                    if (trivial)
branch  0 never executed
branch  1 never executed
    #####:  452:                        continue;
        -:  453:                }
        -:  454:
        -:  455:                // Do not warn about assignment with 0 / NULL
    #####:  456:                if (Token::simpleMatch(tok->astOperand2(), "0") || FwdAnalysis::isNullOperand(tok->astOperand2()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  457:                    continue;
        -:  458:
    #####:  459:                if (tok->astOperand1()->variable() && tok->astOperand1()->variable()->isReference())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  460:                    // todo: check references
    #####:  461:                    continue;
        -:  462:
    #####:  463:                if (tok->astOperand1()->variable() && tok->astOperand1()->variable()->isStatic())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  464:                    // todo: check static variables
    #####:  465:                    continue;
        -:  466:
        -:  467:                // If there is a custom assignment operator => this is inconclusive
    #####:  468:                bool inconclusive = false;
    #####:  469:                if (mTokenizer->isCPP() && tok->astOperand1()->valueType() && tok->astOperand1()->valueType()->typeScope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  470:                    const std::string op = "operator" + tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  471:                    for (const Function &f : tok->astOperand1()->valueType()->typeScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  472:                        if (f.name() == op) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  473:                            inconclusive = true;
    #####:  474:                            break;
        -:  475:                        }
        -:  476:                    }
        -:  477:                }
    #####:  478:                if (inconclusive && !mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  479:                    continue;
        -:  480:
    #####:  481:                FwdAnalysis fwdAnalysis(mTokenizer->isCPP(), mSettings->library);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  482:                if (fwdAnalysis.hasOperand(tok->astOperand2(), tok->astOperand1()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  483:                    continue;
        -:  484:
        -:  485:                // Is there a redundant assignment?
        -:  486:                const Token *start;
    #####:  487:                if (tok->isAssignmentOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  488:                    start = tok->next();
call    0 never executed
        -:  489:                else
    #####:  490:                    start = tok->findExpressionStartEndTokens().second->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  491:
        -:  492:                // Get next assignment..
    #####:  493:                const Token *nextAssign = fwdAnalysis.reassign(tok->astOperand1(), start, scope->bodyEnd);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:
    #####:  495:                if (!nextAssign)
branch  0 never executed
branch  1 never executed
    #####:  496:                    continue;
        -:  497:
        -:  498:                // there is redundant assignment. Is there a case between the assignments?
    #####:  499:                bool hasCase = false;
    #####:  500:                for (const Token *tok2 = tok; tok2 != nextAssign; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  501:                    if (tok2->str() == "break" || tok2->str() == "return")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  502:                        break;
    #####:  503:                    if (tok2->str() == "case") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  504:                        hasCase = true;
    #####:  505:                        break;
        -:  506:                    }
        -:  507:                }
        -:  508:
        -:  509:                // warn
    #####:  510:                if (hasCase)
branch  0 never executed
branch  1 never executed
    #####:  511:                    redundantAssignmentInSwitchError(tok, nextAssign, tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  512:                else if (isInitialization)
branch  0 never executed
branch  1 never executed
    #####:  513:                    redundantInitializationError(tok, nextAssign, tok->astOperand1()->expressionString(), inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  514:                else
    #####:  515:                    redundantAssignmentError(tok, nextAssign, tok->astOperand1()->expressionString(), inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
        -:  516:            }
        -:  517:        }
        -:  518:    }
        -:  519:}
        -:  520:
function _ZN10CheckOther18redundantCopyErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  521:void CheckOther::redundantCopyError(const Token *tok1, const Token* tok2, const std::string& var)
        -:  522:{
    #####:  523:    const std::list<const Token *> callstack = { tok1, tok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  524:    reportError(callstack, Severity::performance, "redundantCopy",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  525:                "$symbol:" + var + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  526:                "Buffer '$symbol' is being written before its old content has been used.", CWE563, false);
    #####:  527:}
call    0 never executed
        -:  528:
function _ZN10CheckOther26redundantCopyInSwitchErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  529:void CheckOther::redundantCopyInSwitchError(const Token *tok1, const Token* tok2, const std::string &var)
        -:  530:{
    #####:  531:    const std::list<const Token *> callstack = { tok1, tok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  532:    reportError(callstack, Severity::warning, "redundantCopyInSwitch",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  533:                "$symbol:" + var + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  534:                "Buffer '$symbol' is being written before its old content has been used. 'break;' missing?", CWE563, false);
    #####:  535:}
call    0 never executed
        -:  536:
function _ZN10CheckOther24redundantAssignmentErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  537:void CheckOther::redundantAssignmentError(const Token *tok1, const Token* tok2, const std::string& var, bool inconclusive)
        -:  538:{
    #####:  539:    const ErrorPath errorPath = { ErrorPathItem(tok1, var + " is assigned"), ErrorPathItem(tok2, var + " is overwritten") };
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####:  540:    if (inconclusive)
branch  0 never executed
branch  1 never executed
    #####:  541:        reportError(errorPath, Severity::style, "redundantAssignment",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  542:                    "$symbol:" + var + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  543:                    "Variable '$symbol' is reassigned a value before the old one has been used if variable is no semaphore variable.\n"
        -:  544:                    "Variable '$symbol' is reassigned a value before the old one has been used. Make sure that this variable is not used like a semaphore in a threading environment before simplifying this code.", CWE563, true);
        -:  545:    else
    #####:  546:        reportError(errorPath, Severity::style, "redundantAssignment",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  547:                    "$symbol:" + var + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  548:                    "Variable '$symbol' is reassigned a value before the old one has been used.", CWE563, false);
    #####:  549:}
call    0 never executed
        -:  550:
function _ZN10CheckOther28redundantInitializationErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  551:void CheckOther::redundantInitializationError(const Token *tok1, const Token* tok2, const std::string& var, bool inconclusive)
        -:  552:{
    #####:  553:    const ErrorPath errorPath = { ErrorPathItem(tok1, var + " is initialized"), ErrorPathItem(tok2, var + " is overwritten") };
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####:  554:    reportError(errorPath, Severity::style, "redundantInitialization",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  555:                "$symbol:" + var + "\nRedundant initialization for '$symbol'. The initialized value is overwritten before it is read.",
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  556:                CWE563,
        -:  557:                inconclusive);
    #####:  558:}
call    0 never executed
        -:  559:
function _ZN10CheckOther32redundantAssignmentInSwitchErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  560:void CheckOther::redundantAssignmentInSwitchError(const Token *tok1, const Token* tok2, const std::string &var)
        -:  561:{
    #####:  562:    const ErrorPath errorPath = { ErrorPathItem(tok1, "$symbol is assigned"), ErrorPathItem(tok2, "$symbol is overwritten") };
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
    #####:  563:    reportError(errorPath, Severity::warning, "redundantAssignInSwitch",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  564:                "$symbol:" + var + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  565:                "Variable '$symbol' is reassigned a value before the old one has been used. 'break;' missing?", CWE563, false);
    #####:  566:}
call    0 never executed
        -:  567:
        -:  568:
        -:  569://---------------------------------------------------------------------------
        -:  570://    switch (x)
        -:  571://    {
        -:  572://        case 2:
        -:  573://            y = a;        // <- this assignment is redundant
        -:  574://        case 3:
        -:  575://            y = b;        // <- case 2 falls through and sets y twice
        -:  576://    }
        -:  577://---------------------------------------------------------------------------
function _ZL24isFunctionOrBreakPatternPK5Token called 0 returned 0% blocks executed 0%
    #####:  578:static inline bool isFunctionOrBreakPattern(const Token *tok)
        -:  579:{
    #####:  580:    if (Token::Match(tok, "%name% (") || Token::Match(tok, "break|continue|return|exit|goto|throw"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  581:        return true;
        -:  582:
    #####:  583:    return false;
        -:  584:}
        -:  585:
function _ZN10CheckOther32checkRedundantAssignmentInSwitchEv called 0 returned 0% blocks executed 0%
    #####:  586:void CheckOther::checkRedundantAssignmentInSwitch()
        -:  587:{
    #####:  588:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  589:        return;
        -:  590:
    #####:  591:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  592:
        -:  593:    // Find the beginning of a switch. E.g.:
        -:  594:    //   switch (var) { ...
    #####:  595:    for (const Scope &switchScope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  596:        if (switchScope.type != Scope::eSwitch || !switchScope.bodyStart)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  597:            continue;
        -:  598:
        -:  599:        // Check the contents of the switch statement
    #####:  600:        std::map<int, const Token*> varsWithBitsSet;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  601:        std::map<int, std::string> bitOperations;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  602:
    #####:  603:        for (const Token *tok2 = switchScope.bodyStart->next(); tok2 != switchScope.bodyEnd; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  604:            if (tok2->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  605:                // Inside a conditional or loop. Don't mark variable accesses as being redundant. E.g.:
        -:  606:                //   case 3: b = 1;
        -:  607:                //   case 4: if (a) { b = 2; }    // Doesn't make the b=1 redundant because it's conditional
    #####:  608:                if (Token::Match(tok2->previous(), ")|else {") && tok2->link()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  609:                    const Token* endOfConditional = tok2->link();
call    0 never executed
    #####:  610:                    for (const Token* tok3 = tok2; tok3 != endOfConditional; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  611:                        if (tok3->varId() != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  612:                            varsWithBitsSet.erase(tok3->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  613:                            bitOperations.erase(tok3->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  614:                        } else if (isFunctionOrBreakPattern(tok3)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  615:                            varsWithBitsSet.clear();
call    0 never executed
    #####:  616:                            bitOperations.clear();
call    0 never executed
        -:  617:                        }
        -:  618:                    }
    #####:  619:                    tok2 = endOfConditional;
        -:  620:                }
        -:  621:            }
        -:  622:
        -:  623:            // Variable assignment. Report an error if it's assigned to twice before a break. E.g.:
        -:  624:            //    case 3: b = 1;    // <== redundant
        -:  625:            //    case 4: b = 2;
        -:  626:
    #####:  627:            if (Token::Match(tok2->previous(), ";|{|}|: %var% = %any% ;")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  628:                varsWithBitsSet.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  629:                bitOperations.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  630:            }
        -:  631:
        -:  632:            // Bitwise operation. Report an error if it's performed twice before a break. E.g.:
        -:  633:            //    case 3: b |= 1;    // <== redundant
        -:  634:            //    case 4: b |= 1;
    #####:  635:            else if (Token::Match(tok2->previous(), ";|{|}|: %var% %assign% %num% ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  636:                     (tok2->strAt(1) == "|=" || tok2->strAt(1) == "&=") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  637:                     Token::Match(tok2->next()->astOperand2(), "%num%")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  638:                const std::string bitOp = tok2->strAt(1)[0] + tok2->strAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####:  639:                const std::map<int, const Token*>::const_iterator i2 = varsWithBitsSet.find(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  640:
        -:  641:                // This variable has not had a bit operation performed on it yet, so just make a note of it
    #####:  642:                if (i2 == varsWithBitsSet.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  643:                    varsWithBitsSet[tok2->varId()] = tok2;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  644:                    bitOperations[tok2->varId()] = bitOp;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  645:                }
        -:  646:
        -:  647:                // The same bit operation has been performed on the same variable twice, so report an error
    #####:  648:                else if (bitOperations[tok2->varId()] == bitOp)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  649:                    redundantBitwiseOperationInSwitchError(i2->second, i2->second->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  650:
        -:  651:                // A different bit operation was performed on the variable, so clear it
        -:  652:                else {
    #####:  653:                    varsWithBitsSet.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  654:                    bitOperations.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  655:                }
        -:  656:            }
        -:  657:
        -:  658:            // Bitwise operation. Report an error if it's performed twice before a break. E.g.:
        -:  659:            //    case 3: b = b | 1;    // <== redundant
        -:  660:            //    case 4: b = b | 1;
    #####:  661:            else if (Token::Match(tok2->previous(), ";|{|}|: %var% = %name% %or%|& %num% ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  662:                     tok2->varId() == tok2->tokAt(2)->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  663:                const std::string bitOp = tok2->strAt(3) + tok2->strAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####:  664:                const std::map<int, const Token*>::const_iterator i2 = varsWithBitsSet.find(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  665:
        -:  666:                // This variable has not had a bit operation performed on it yet, so just make a note of it
    #####:  667:                if (i2 == varsWithBitsSet.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  668:                    varsWithBitsSet[tok2->varId()] = tok2;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  669:                    bitOperations[tok2->varId()] = bitOp;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  670:                }
        -:  671:
        -:  672:                // The same bit operation has been performed on the same variable twice, so report an error
    #####:  673:                else if (bitOperations[tok2->varId()] == bitOp)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  674:                    redundantBitwiseOperationInSwitchError(i2->second, i2->second->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  675:
        -:  676:                // A different bit operation was performed on the variable, so clear it
        -:  677:                else {
    #####:  678:                    varsWithBitsSet.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  679:                    bitOperations.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  680:                }
        -:  681:            }
        -:  682:
        -:  683:            // Not a simple assignment so there may be good reason if this variable is assigned to twice. E.g.:
        -:  684:            //    case 3: b = 1;
        -:  685:            //    case 4: b++;
    #####:  686:            else if (tok2->varId() != 0 && tok2->strAt(1) != "|" && tok2->strAt(1) != "&") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  687:                varsWithBitsSet.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  688:                bitOperations.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  689:            }
        -:  690:
        -:  691:            // Reset our record of assignments if there is a break or function call. E.g.:
        -:  692:            //    case 3: b = 1; break;
    #####:  693:            if (isFunctionOrBreakPattern(tok2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  694:                varsWithBitsSet.clear();
call    0 never executed
    #####:  695:                bitOperations.clear();
call    0 never executed
        -:  696:            }
        -:  697:        }
        -:  698:    }
        -:  699:}
        -:  700:
function _ZN10CheckOther38redundantBitwiseOperationInSwitchErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  701:void CheckOther::redundantBitwiseOperationInSwitchError(const Token *tok, const std::string &varname)
        -:  702:{
    #####:  703:    reportError(tok, Severity::warning,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  704:                "redundantBitwiseOperationInSwitch",
    #####:  705:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  706:                "Redundant bitwise operation on '$symbol' in 'switch' statement. 'break;' missing?");
    #####:  707:}
        -:  708:
        -:  709:
        -:  710://---------------------------------------------------------------------------
        -:  711:// Check for statements like case A||B: in switch()
        -:  712://---------------------------------------------------------------------------
function _ZN10CheckOther27checkSuspiciousCaseInSwitchEv called 0 returned 0% blocks executed 0%
    #####:  713:void CheckOther::checkSuspiciousCaseInSwitch()
        -:  714:{
    #####:  715:    if (!mSettings->inconclusive || !mSettings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  716:        return;
        -:  717:
    #####:  718:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  719:
    #####:  720:    for (const Scope & scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  721:        if (scope.type != Scope::eSwitch)
branch  0 never executed
branch  1 never executed
    #####:  722:            continue;
        -:  723:
    #####:  724:        for (const Token* tok = scope.bodyStart->next(); tok != scope.bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  725:            if (tok->str() == "case") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  726:                const Token* finding = nullptr;
    #####:  727:                for (const Token* tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  728:                    if (tok2->str() == ":")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  729:                        break;
    #####:  730:                    if (Token::Match(tok2, "[;}{]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  731:                        break;
        -:  732:
    #####:  733:                    if (tok2->str() == "?")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  734:                        finding = nullptr;
    #####:  735:                    else if (Token::Match(tok2, "&&|%oror%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  736:                        finding = tok2;
        -:  737:                }
    #####:  738:                if (finding)
branch  0 never executed
branch  1 never executed
    #####:  739:                    suspiciousCaseInSwitchError(finding, finding->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:            }
        -:  741:        }
        -:  742:    }
        -:  743:}
        -:  744:
function _ZN10CheckOther27suspiciousCaseInSwitchErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  745:void CheckOther::suspiciousCaseInSwitchError(const Token* tok, const std::string& operatorString)
        -:  746:{
    #####:  747:    reportError(tok, Severity::warning, "suspiciousCase",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  748:                "Found suspicious case label in switch(). Operator '" + operatorString + "' probably doesn't work as intended.\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  749:                "Using an operator like '" + operatorString + "' in a case label is suspicious. Did you intend to use a bitwise operator, multiple case labels or if/else instead?", CWE398, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  750:}
        -:  751:
        -:  752://---------------------------------------------------------------------------
        -:  753://    Find consecutive return, break, continue, goto or throw statements. e.g.:
        -:  754://        break; break;
        -:  755://    Detect dead code, that follows such a statement. e.g.:
        -:  756://        return(0); foo();
        -:  757://---------------------------------------------------------------------------
function _ZN10CheckOther20checkUnreachableCodeEv called 0 returned 0% blocks executed 0%
    #####:  758:void CheckOther::checkUnreachableCode()
        -:  759:{
    #####:  760:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  761:        return;
    #####:  762:    const bool printInconclusive = mSettings->inconclusive;
    #####:  763:    const SymbolDatabase* symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  764:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  765:        for (const Token* tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  766:            const Token* secondBreak = nullptr;
    #####:  767:            const Token* labelName = nullptr;
    #####:  768:            if (tok->link() && Token::Match(tok, "(|[|<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  769:                tok = tok->link();
call    0 never executed
    #####:  770:            else if (Token::Match(tok, "break|continue ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  771:                secondBreak = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  772:            else if (Token::Match(tok, "[;{}:] return|throw")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  773:                if (Token::simpleMatch(tok->astParent(), "?"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  774:                    continue;
    #####:  775:                tok = tok->next(); // tok should point to return or throw
call    0 never executed
    #####:  776:                for (const Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  777:                    if (tok2->str() == "(" || tok2->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  778:                        tok2 = tok2->link();
call    0 never executed
    #####:  779:                    if (tok2->str() == ";") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  780:                        secondBreak = tok2->next();
call    0 never executed
    #####:  781:                        break;
        -:  782:                    }
        -:  783:                }
    #####:  784:            } else if (Token::Match(tok, "goto %any% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  785:                secondBreak = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  786:                labelName = tok->next();
call    0 never executed
    #####:  787:            } else if (Token::Match(tok, "%name% (") && mSettings->library.isnoreturn(tok) && !Token::Match(tok->next()->astParent(), "?|:")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  788:                if ((!tok->function() || (tok->function()->token != tok && tok->function()->tokenDef != tok)) && tok->linkAt(1)->strAt(1) != "{")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  789:                    secondBreak = tok->linkAt(1)->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  790:            }
        -:  791:
        -:  792:            // Statements follow directly, no line between them. (#3383)
        -:  793:            // TODO: Try to find a better way to avoid false positives due to preprocessor configurations.
    #####:  794:            const bool inconclusive = secondBreak && (secondBreak->linenr() - 1 > secondBreak->previous()->linenr());
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  795:
    #####:  796:            if (secondBreak && (printInconclusive || !inconclusive)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  797:                if (Token::Match(secondBreak, "continue|goto|throw") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  798:                    (secondBreak->str() == "return" && (tok->str() == "return" || secondBreak->strAt(1) == ";"))) { // return with value after statements like throw can be necessary to make a function compile
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  799:                    duplicateBreakError(secondBreak, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  800:                    tok = Token::findmatch(secondBreak, "[}:]");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  801:                } else if (secondBreak->str() == "break") { // break inside switch as second break statement should not issue a warning
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  802:                    if (tok->str() == "break") // If the previous was a break, too: Issue warning
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  803:                        duplicateBreakError(secondBreak, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:                    else {
    #####:  805:                        if (tok->scope()->type != Scope::eSwitch) // Check, if the enclosing scope is a switch
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  806:                            duplicateBreakError(secondBreak, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  807:                    }
    #####:  808:                    tok = Token::findmatch(secondBreak, "[}:]");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:                } else if (!Token::Match(secondBreak, "return|}|case|default") && secondBreak->strAt(1) != ":") { // TODO: No bailout for unconditional scopes
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -:  810:                    // If the goto label is followed by a loop construct in which the label is defined it's quite likely
        -:  811:                    // that the goto jump was intended to skip some code on the first loop iteration.
    #####:  812:                    bool labelInFollowingLoop = false;
    #####:  813:                    if (labelName && Token::Match(secondBreak, "while|do|for")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  814:                        const Token *scope2 = Token::findsimplematch(secondBreak, "{");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:                        if (scope2) {
branch  0 never executed
branch  1 never executed
    #####:  816:                            for (const Token *tokIter = scope2; tokIter != scope2->link() && tokIter; tokIter = tokIter->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  817:                                if (Token::Match(tokIter, "[;{}] %any% :") && labelName->str() == tokIter->strAt(1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  818:                                    labelInFollowingLoop = true;
    #####:  819:                                    break;
        -:  820:                                }
        -:  821:                            }
        -:  822:                        }
        -:  823:                    }
        -:  824:
        -:  825:                    // hide FP for statements that just hide compiler warnings about unused function arguments
    #####:  826:                    bool silencedCompilerWarningOnly = false;
    #####:  827:                    const Token *silencedWarning = secondBreak;
        -:  828:                    for (;;) {
    #####:  829:                        if (Token::Match(silencedWarning, "( void ) %name% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  830:                            silencedWarning = silencedWarning->tokAt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:                            continue;
    #####:  832:                        } else if (silencedWarning && silencedWarning == scope->bodyEnd)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  833:                            silencedCompilerWarningOnly = true;
        -:  834:
    #####:  835:                        break;
        -:  836:                    }
    #####:  837:                    if (silencedWarning)
branch  0 never executed
branch  1 never executed
    #####:  838:                        secondBreak = silencedWarning;
        -:  839:
    #####:  840:                    if (!labelInFollowingLoop && !silencedCompilerWarningOnly)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  841:                        unreachableCodeError(secondBreak, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:                    tok = Token::findmatch(secondBreak, "[}:]");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  843:                } else
    #####:  844:                    tok = secondBreak;
        -:  845:
    #####:  846:                if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  847:                    break;
    #####:  848:                tok = tok->previous(); // Will be advanced again by for loop
call    0 never executed
        -:  849:            }
        -:  850:        }
        -:  851:    }
        -:  852:}
        -:  853:
function _ZN10CheckOther19duplicateBreakErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  854:void CheckOther::duplicateBreakError(const Token *tok, bool inconclusive)
        -:  855:{
    #####:  856:    reportError(tok, Severity::style, "duplicateBreak",
call    0 never executed
        -:  857:                "Consecutive return, break, continue, goto or throw statements are unnecessary.\n"
        -:  858:                "Consecutive return, break, continue, goto or throw statements are unnecessary. "
        -:  859:                "The second statement can never be executed, and so should be removed.", CWE561, inconclusive);
    #####:  860:}
        -:  861:
function _ZN10CheckOther20unreachableCodeErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  862:void CheckOther::unreachableCodeError(const Token *tok, bool inconclusive)
        -:  863:{
    #####:  864:    reportError(tok, Severity::style, "unreachableCode",
call    0 never executed
        -:  865:                "Statements following return, break, continue, goto or throw will never be executed.", CWE561, inconclusive);
    #####:  866:}
        -:  867:
        -:  868://---------------------------------------------------------------------------
        -:  869:// Check scope of variables..
        -:  870://---------------------------------------------------------------------------
function _ZN10CheckOther18checkVariableScopeEv called 0 returned 0% blocks executed 0%
    #####:  871:void CheckOther::checkVariableScope()
        -:  872:{
    #####:  873:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  874:        return;
        -:  875:
    #####:  876:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  877:
    #####:  878:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  879:        if (!var || !var->isLocal() || (!var->isPointer() && !var->isReference() && !var->typeStartToken()->isStandardType()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####:  880:            continue;
        -:  881:
    #####:  882:        if (var->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  883:            continue;
        -:  884:
        -:  885:        // reference of range for loop variable..
    #####:  886:        if (Token::Match(var->nameToken()->previous(), "& %var% = %var% .")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  887:            const Token *otherVarToken = var->nameToken()->tokAt(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  888:            const Variable *otherVar = otherVarToken->variable();
call    0 never executed
    #####:  889:            if (otherVar && Token::Match(otherVar->nameToken(), "%var% :") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  890:                otherVar->nameToken()->next()->astParent() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  891:                Token::simpleMatch(otherVar->nameToken()->next()->astParent()->previous(), "for ("))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  892:                continue;
        -:  893:        }
        -:  894:
    #####:  895:        bool forHead = false; // Don't check variables declared in header of a for loop
    #####:  896:        for (const Token* tok = var->typeStartToken(); tok; tok = tok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  897:            if (tok->str() == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  898:                forHead = true;
    #####:  899:                break;
    #####:  900:            } else if (Token::Match(tok, "[;{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  901:                break;
        -:  902:        }
    #####:  903:        if (forHead)
branch  0 never executed
branch  1 never executed
    #####:  904:            continue;
        -:  905:
    #####:  906:        const Token* tok = var->nameToken()->next();
call    0 never executed
call    1 never executed
    #####:  907:        if (Token::Match(tok, "; %varid% = %any% ;", var->declarationId())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  908:            tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:            if (!tok->isNumber() && tok->tokType() != Token::eString && tok->tokType() != Token::eChar && !tok->isBoolean())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  910:                continue;
        -:  911:        }
        -:  912:        // bailout if initialized with function call that has possible side effects
    #####:  913:        if (Token::Match(tok, "[(=]") && Token::simpleMatch(tok->astOperand2(), "("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  914:            continue;
    #####:  915:        bool reduce = true;
    #####:  916:        bool used = false; // Don't warn about unused variables
    #####:  917:        for (; tok && tok != var->scope()->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  918:            if (tok->str() == "{" && tok->scope() != tok->previous()->scope() && !tok->isExpandedMacro() && tok->scope()->type != Scope::eLambda) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  919:                if (used) {
branch  0 never executed
branch  1 never executed
    #####:  920:                    bool used2 = false;
    #####:  921:                    if (!checkInnerScope(tok, var, used2) || used2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  922:                        reduce = false;
    #####:  923:                        break;
        -:  924:                    }
    #####:  925:                } else if (!checkInnerScope(tok, var, used)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  926:                    reduce = false;
    #####:  927:                    break;
        -:  928:                }
        -:  929:
    #####:  930:                tok = tok->link();
call    0 never executed
        -:  931:
        -:  932:                // parse else if blocks..
    #####:  933:            } else if (Token::simpleMatch(tok, "else { if (") && Token::simpleMatch(tok->linkAt(3), ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  934:                const Token *endif = tok->linkAt(3)->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  935:                bool elseif = false;
    #####:  936:                if (Token::simpleMatch(endif, "} }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  937:                    elseif = true;
    #####:  938:                else if (Token::simpleMatch(endif, "} else {") && Token::simpleMatch(endif->linkAt(2),"} }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  939:                    elseif = true;
    #####:  940:                if (elseif && Token::findmatch(tok->next(), "%varid%", tok->linkAt(1), var->declarationId())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  941:                    reduce = false;
    #####:  942:                    break;
        -:  943:                }
    #####:  944:            } else if (tok->varId() == var->declarationId() || tok->str() == "goto") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  945:                reduce = false;
    #####:  946:                break;
        -:  947:            }
        -:  948:        }
        -:  949:
    #####:  950:        if (reduce && used)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  951:            variableScopeError(var->nameToken(), var->name());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  952:    }
        -:  953:}
        -:  954:
function _ZN10CheckOther15checkInnerScopeEPK5TokenPK8VariableRb called 0 returned 0% blocks executed 0%
    #####:  955:bool CheckOther::checkInnerScope(const Token *tok, const Variable* var, bool& used)
        -:  956:{
    #####:  957:    const Scope* scope = tok->next()->scope();
call    0 never executed
call    1 never executed
    #####:  958:    bool loopVariable = scope->type == Scope::eFor || scope->type == Scope::eWhile || scope->type == Scope::eDo;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  959:    bool noContinue = true;
    #####:  960:    const Token* forHeadEnd = nullptr;
    #####:  961:    const Token* end = tok->link();
call    0 never executed
    #####:  962:    if (scope->type == Scope::eUnconditional && (tok->strAt(-1) == ")" || tok->previous()->isName())) // Might be an unknown macro like BOOST_FOREACH
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  963:        loopVariable = true;
        -:  964:
    #####:  965:    if (scope->type == Scope::eDo) {
branch  0 never executed
branch  1 never executed
    #####:  966:        end = end->linkAt(2);
call    0 never executed
    #####:  967:    } else if (loopVariable && tok->strAt(-1) == ")") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  968:        tok = tok->linkAt(-1); // Jump to opening ( of for/while statement
call    0 never executed
    #####:  969:    } else if (scope->type == Scope::eSwitch) {
branch  0 never executed
branch  1 never executed
    #####:  970:        for (const Scope* innerScope : scope->nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:  971:            if (used) {
branch  0 never executed
branch  1 never executed
    #####:  972:                bool used2 = false;
    #####:  973:                if (!checkInnerScope(innerScope->bodyStart, var, used2) || used2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  974:                    return false;
        -:  975:                }
    #####:  976:            } else if (!checkInnerScope(innerScope->bodyStart, var, used)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  977:                return false;
        -:  978:            }
        -:  979:        }
        -:  980:    }
        -:  981:
    #####:  982:    bool bFirstAssignment=false;
    #####:  983:    for (; tok && tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  984:        if (tok->str() == "goto")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  985:            return false;
    #####:  986:        if (tok->str() == "continue")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  987:            noContinue = false;
        -:  988:
    #####:  989:        if (Token::simpleMatch(tok, "for ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  990:            forHeadEnd = tok->linkAt(1);
call    0 never executed
    #####:  991:        if (tok == forHeadEnd)
branch  0 never executed
branch  1 never executed
    #####:  992:            forHeadEnd = nullptr;
        -:  993:
    #####:  994:        if (loopVariable && noContinue && tok->scope() == scope && !forHeadEnd && scope->type != Scope::eSwitch && Token::Match(tok, "%varid% =", var->declarationId())) { // Assigned in outer scope.
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  995:            loopVariable = false;
    #####:  996:            int indent = 0;
    #####:  997:            for (const Token* tok2 = tok->tokAt(2); tok2; tok2 = tok2->next()) { // Ensure that variable isn't used on right side of =, too
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  998:                if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  999:                    indent++;
    #####: 1000:                else if (tok2->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1001:                    if (indent == 0)
branch  0 never executed
branch  1 never executed
    #####: 1002:                        break;
    #####: 1003:                    indent--;
    #####: 1004:                } else if (tok2->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1005:                    break;
    #####: 1006:                else if (tok2->varId() == var->declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1007:                    loopVariable = true;
    #####: 1008:                    break;
        -: 1009:                }
        -: 1010:            }
        -: 1011:        }
        -: 1012:
    #####: 1013:        if (loopVariable && Token::Match(tok, "%varid% !!=", var->declarationId())) // Variable used in loop
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1014:            return false;
        -: 1015:
    #####: 1016:        if (Token::Match(tok, "& %varid%", var->declarationId())) // Taking address of variable
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1017:            return false;
        -: 1018:
    #####: 1019:        if (Token::Match(tok, "%varid% =", var->declarationId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1020:            bFirstAssignment = true;
        -: 1021:
    #####: 1022:        if (!bFirstAssignment && Token::Match(tok, "* %varid%", var->declarationId())) // dereferencing means access to previous content
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1023:            return false;
        -: 1024:
    #####: 1025:        if (Token::Match(tok, "= %varid%", var->declarationId()) && (var->isArray() || var->isPointer())) // Create a copy of array/pointer. Bailout, because the memory it points to might be necessary in outer scope
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1026:            return false;
        -: 1027:
    #####: 1028:        if (tok->varId() == var->declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1029:            used = true;
    #####: 1030:            if (scope->type == Scope::eSwitch && scope == tok->scope())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1031:                return false; // Used in outer switch scope - unsafe or impossible to reduce scope
        -: 1032:        }
        -: 1033:    }
        -: 1034:
    #####: 1035:    return true;
        -: 1036:}
        -: 1037:
function _ZN10CheckOther18variableScopeErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1038:void CheckOther::variableScopeError(const Token *tok, const std::string &varname)
        -: 1039:{
    #####: 1040:    reportError(tok,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1041:                Severity::style,
        -: 1042:                "variableScope",
    #####: 1043:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1044:                "The scope of the variable '$symbol' can be reduced.\n"
        -: 1045:                "The scope of the variable '$symbol' can be reduced. Warning: Be careful "
        -: 1046:                "when fixing this message, especially when there are inner loops. Here is an "
        -: 1047:                "example where cppcheck will write that the scope for 'i' can be reduced:\n"
        -: 1048:                "void f(int x)\n"
        -: 1049:                "{\n"
        -: 1050:                "    int i = 0;\n"
        -: 1051:                "    if (x) {\n"
        -: 1052:                "        // it's safe to move 'int i = 0;' here\n"
        -: 1053:                "        for (int n = 0; n < 10; ++n) {\n"
        -: 1054:                "            // it is possible but not safe to move 'int i = 0;' here\n"
        -: 1055:                "            do_something(&i);\n"
        -: 1056:                "        }\n"
        -: 1057:                "    }\n"
        -: 1058:                "}\n"
        -: 1059:                "When you see this message it is always safe to reduce the variable scope 1 level.", CWE398, false);
    #####: 1060:}
        -: 1061:
        -: 1062://---------------------------------------------------------------------------
        -: 1063:// Comma in return statement: return a+1, b++;. (experimental)
        -: 1064://---------------------------------------------------------------------------
function _ZN10CheckOther25checkCommaSeparatedReturnEv called 0 returned 0% blocks executed 0%
    #####: 1065:void CheckOther::checkCommaSeparatedReturn()
        -: 1066:{
        -: 1067:    // This is experimental for now. See #5076
    #####: 1068:    if (!mSettings->experimental)
branch  0 never executed
branch  1 never executed
    #####: 1069:        return;
        -: 1070:
    #####: 1071:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:        return;
        -: 1073:
    #####: 1074:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1075:        if (tok->str() == "return") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1076:            tok = tok->next();
call    0 never executed
    #####: 1077:            while (tok && tok->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1078:                if (tok->link() && Token::Match(tok, "[([{<]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1079:                    tok = tok->link();
call    0 never executed
        -: 1080:
    #####: 1081:                if (!tok->isExpandedMacro() && tok->str() == "," && tok->linenr() != tok->next()->linenr())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1082:                    commaSeparatedReturnError(tok);
call    0 never executed
        -: 1083:
    #####: 1084:                tok = tok->next();
call    0 never executed
        -: 1085:            }
        -: 1086:            // bailout: missing semicolon (invalid code / bad tokenizer)
    #####: 1087:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1088:                break;
        -: 1089:        }
        -: 1090:    }
        -: 1091:}
        -: 1092:
function _ZN10CheckOther25commaSeparatedReturnErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1093:void CheckOther::commaSeparatedReturnError(const Token *tok)
        -: 1094:{
    #####: 1095:    reportError(tok,
call    0 never executed
        -: 1096:                Severity::style,
        -: 1097:                "commaSeparatedReturn",
        -: 1098:                "Comma is used in return statement. The comma can easily be misread as a ';'.\n"
        -: 1099:                "Comma is used in return statement. When comma is used in a return statement it can "
        -: 1100:                "easily be misread as a semicolon. For example in the code below the value "
        -: 1101:                "of 'b' is returned if the condition is true, but it is easy to think that 'a+1' is "
        -: 1102:                "returned:\n"
        -: 1103:                "    if (x)\n"
        -: 1104:                "        return a + 1,\n"
        -: 1105:                "    b++;\n"
        -: 1106:                "However it can be useful to use comma in macros. Cppcheck does not warn when such a "
        -: 1107:                "macro is then used in a return statement, it is less likely such code is misunderstood.", CWE398, false);
    #####: 1108:}
        -: 1109:
        -: 1110://---------------------------------------------------------------------------
        -: 1111:// Check for function parameters that should be passed by const reference
        -: 1112://---------------------------------------------------------------------------
function _ZL12estimateSizePK4TypePK8SettingsPK14SymbolDatabasei called 0 returned 0% blocks executed 0%
    #####: 1113:static int estimateSize(const Type* type, const Settings* settings, const SymbolDatabase* symbolDatabase, int recursionDepth = 0)
        -: 1114:{
    #####: 1115:    if (recursionDepth > 20)
branch  0 never executed
branch  1 never executed
    #####: 1116:        return 0;
        -: 1117:
    #####: 1118:    int cumulatedSize = 0;
    #####: 1119:    for (const Variable&var : type->classScope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1120:        int size = 0;
    #####: 1121:        if (var.isStatic())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1122:            continue;
    #####: 1123:        if (var.isPointer() || var.isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1124:            size = settings->sizeof_pointer;
    #####: 1125:        else if (var.type() && var.type()->classScope)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1126:            size = estimateSize(var.type(), settings, symbolDatabase, recursionDepth+1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1127:        else if (var.valueType()->type == ValueType::Type::CONTAINER)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:            size = 3 * settings->sizeof_pointer; // Just guess
        -: 1129:        else
    #####: 1130:            size = symbolDatabase->sizeOfType(var.typeStartToken());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1131:
    #####: 1132:        if (var.isArray())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1133:            cumulatedSize += size * var.dimension(0);
call    0 never executed
        -: 1134:        else
    #####: 1135:            cumulatedSize += size;
        -: 1136:    }
    #####: 1137:    for (const Type::BaseInfo &baseInfo : type->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1138:        if (baseInfo.type && baseInfo.type->classScope)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1139:            cumulatedSize += estimateSize(baseInfo.type, settings, symbolDatabase, recursionDepth+1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1140:    }
    #####: 1141:    return cumulatedSize;
        -: 1142:}
        -: 1143:
function _ZL10canBeConstPK8Variable called 0 returned 0% blocks executed 0%
    #####: 1144:static bool canBeConst(const Variable *var)
        -: 1145:{
        -: 1146:    {
        -: 1147:        // check initializer list. If variable is moved from it can't be const.
    #####: 1148:        const Function* func_scope = var->scope()->function;
call    0 never executed
    #####: 1149:        if (func_scope->type == Function::Type::eConstructor) {
branch  0 never executed
branch  1 never executed
        -: 1150:            //could be initialized in initializer list
    #####: 1151:            if (func_scope->arg->link()->next()->str() == ":") {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1152:                for (const Token* tok2 = func_scope->arg->link()->next()->next(); tok2 != var->scope()->bodyStart; tok2 = tok2->next()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 1153:                    if (tok2->varId() != var->declarationId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1154:                        continue;
    #####: 1155:                    const Token* parent = tok2->astParent();
call    0 never executed
    #####: 1156:                    if (parent && Token::simpleMatch(parent->previous(), "move ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1157:                        return false;
        -: 1158:                }
        -: 1159:            }
        -: 1160:        }
        -: 1161:    }
    #####: 1162:    for (const Token* tok2 = var->scope()->bodyStart; tok2 != var->scope()->bodyEnd; tok2 = tok2->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1163:        if (tok2->varId() != var->declarationId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1164:            continue;
        -: 1165:
    #####: 1166:        const Token* parent = tok2->astParent();
call    0 never executed
    #####: 1167:        if (!parent)
branch  0 never executed
branch  1 never executed
    #####: 1168:            continue;
    #####: 1169:        if (parent->str() == "<<" || isLikelyStreamRead(true, parent)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1170:            if (parent->str() == "<<" && parent->astOperand1() == tok2)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1171:                return false;
    #####: 1172:            if (parent->str() == ">>" && parent->astOperand2() == tok2)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1173:                return false;
    #####: 1174:        } else if (parent->str() == "," || parent->str() == "(") { // function argument
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1175:            const Token* tok3 = tok2->previous();
call    0 never executed
    #####: 1176:            int argNr = 0;
    #####: 1177:            while (tok3 && tok3->str() != "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1178:                if (tok3->link() && Token::Match(tok3, ")|]|}|>"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1179:                    tok3 = tok3->link();
call    0 never executed
    #####: 1180:                else if (tok3->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1181:                    break;
    #####: 1182:                else if (tok3->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1183:                    break;
    #####: 1184:                else if (tok3->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1185:                    argNr++;
    #####: 1186:                tok3 = tok3->previous();
call    0 never executed
        -: 1187:            }
    #####: 1188:            if (!tok3 || tok3->str() != "(" || !tok3->astOperand1() || !tok3->astOperand1()->function())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1189:                return false;
        -: 1190:            else {
    #####: 1191:                const Variable* argVar = tok3->astOperand1()->function()->getArgumentVar(argNr);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1192:                if (!argVar|| (!argVar->isConst() && argVar->isReference()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1193:                    return false;
        -: 1194:            }
    #####: 1195:        } else if (parent->isUnaryOp("&")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
        -: 1196:            // TODO: check how pointer is used
    #####: 1197:            return false;
    #####: 1198:        } else if (parent->isConstOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1199:            continue;
    #####: 1200:        else if (parent->isAssignmentOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1201:            if (parent->astOperand1() == tok2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1202:                return false;
    #####: 1203:            else if (parent->astOperand1()->str() == "&") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1204:                const Variable* assignedVar = parent->previous()->variable();
call    0 never executed
call    1 never executed
    #####: 1205:                if (!assignedVar || !assignedVar->isConst())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1206:                    return false;
        -: 1207:            }
    #####: 1208:        } else if (Token::Match(tok2, "%var% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1209:            const Function* func = tok2->tokAt(2)->function();
call    0 never executed
call    1 never executed
    #####: 1210:            if (func && (func->isConst() || func->isStatic()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1211:                continue;
        -: 1212:            else
    #####: 1213:                return false;
        -: 1214:        } else
    #####: 1215:            return false;
        -: 1216:    }
        -: 1217:
    #####: 1218:    return true;
        -: 1219:}
        -: 1220:
function _ZN10CheckOther20checkPassByReferenceEv called 0 returned 0% blocks executed 0%
    #####: 1221:void CheckOther::checkPassByReference()
        -: 1222:{
    #####: 1223:    if (!mSettings->isEnabled(Settings::PERFORMANCE) || mTokenizer->isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1224:        return;
        -: 1225:
    #####: 1226:    const SymbolDatabase * const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1227:
    #####: 1228:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1229:        if (!var || !var->isArgument() || !var->isClass() || var->isPointer() || var->isArray() || var->isReference() || var->isEnumType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
    #####: 1230:            continue;
        -: 1231:
    #####: 1232:        if (var->scope() && var->scope()->function->arg->link()->strAt(-1) == "...")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1233:            continue; // references could not be used as va_start parameters (#5824)
        -: 1234:
    #####: 1235:        bool inconclusive = false;
        -: 1236:
    #####: 1237:        if (var->valueType()->type == ValueType::Type::CONTAINER) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1238:        } else if (var->type() && !var->type()->isEnumType()) { // Check if type is a struct or class.
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1239:            // Ensure that it is a large object.
    #####: 1240:            if (!var->type()->classScope)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1241:                inconclusive = true;
    #####: 1242:            else if (estimateSize(var->type(), mSettings, symbolDatabase) <= 2 * mSettings->sizeof_pointer)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1243:                continue;
        -: 1244:        } else
    #####: 1245:            continue;
        -: 1246:
    #####: 1247:        if (inconclusive && !mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1248:            continue;
        -: 1249:
    #####: 1250:        const bool isConst = var->isConst();
call    0 never executed
    #####: 1251:        if (isConst) {
branch  0 never executed
branch  1 never executed
    #####: 1252:            passedByValueError(var->nameToken(), var->name(), inconclusive);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1253:            continue;
        -: 1254:        }
        -: 1255:
        -: 1256:        // Check if variable could be const
    #####: 1257:        if (!var->scope() || var->scope()->function->hasVirtualSpecifier())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1258:            continue;
        -: 1259:
    #####: 1260:        if (canBeConst(var)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1261:            passedByValueError(var->nameToken(), var->name(), inconclusive);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1262:        }
        -: 1263:    }
        -: 1264:}
        -: 1265:
function _ZN10CheckOther18passedByValueErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1266:void CheckOther::passedByValueError(const Token *tok, const std::string &parname, bool inconclusive)
        -: 1267:{
    #####: 1268:    reportError(tok, Severity::performance, "passedByValue",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1269:                "$symbol:" + parname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1270:                "Function parameter '$symbol' should be passed by const reference.\n"
        -: 1271:                "Parameter '$symbol' is passed by value. It could be passed "
        -: 1272:                "as a const reference which is usually faster and recommended in C++.", CWE398, inconclusive);
    #####: 1273:}
        -: 1274:
function _ZL16isUnusedVariablePK8Variable called 0 returned 0% blocks executed 0%
    #####: 1275:static bool isUnusedVariable(const Variable *var)
        -: 1276:{
    #####: 1277:    if (!var)
branch  0 never executed
branch  1 never executed
    #####: 1278:        return false;
    #####: 1279:    if (!var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1280:        return false;
    #####: 1281:    const Token *start = var->declEndToken();
call    0 never executed
    #####: 1282:    if (!start)
branch  0 never executed
branch  1 never executed
    #####: 1283:        return false;
    #####: 1284:    if (Token::Match(start, "; %varid% =", var->declarationId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1285:        start = start->tokAt(2);
call    0 never executed
    #####: 1286:    return !Token::findmatch(start->next(), "%varid%", var->scope()->bodyEnd, var->declarationId());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1287:}
        -: 1288:
function _ZL30isVariableMutableInInitializerPK5TokenS1_i called 0 returned 0% blocks executed 0%
    #####: 1289:static bool isVariableMutableInInitializer(const Token* start, const Token * end, nonneg int varid)
        -: 1290:{
    #####: 1291:    if (!start)
branch  0 never executed
branch  1 never executed
    #####: 1292:        return false;
    #####: 1293:    if (!end)
branch  0 never executed
branch  1 never executed
    #####: 1294:        return false;
    #####: 1295:    for (const Token *tok = start; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1296:        if (tok->varId() != varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1297:            continue;
    #####: 1298:        if (tok->astParent()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1299:            const Token * memberTok = tok->astParent()->previous();
call    0 never executed
call    1 never executed
    #####: 1300:            if (Token::Match(memberTok, "%var% (") && memberTok->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1301:                const Variable * memberVar = memberTok->variable();
call    0 never executed
    #####: 1302:                if (!memberVar->isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1303:                    continue;
    #####: 1304:                if (memberVar->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1305:                    continue;
        -: 1306:            }
    #####: 1307:            return true;
        -: 1308:        } else {
    #####: 1309:            return true;
        -: 1310:        }
        -: 1311:    }
    #####: 1312:    return false;
        -: 1313:}
        -: 1314:
function _ZN10CheckOther18checkConstVariableEv called 0 returned 0% blocks executed 0%
    #####: 1315:void CheckOther::checkConstVariable()
        -: 1316:{
    #####: 1317:    if (!mSettings->isEnabled(Settings::STYLE) || mTokenizer->isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1318:        return;
        -: 1319:
    #####: 1320:    const SymbolDatabase *const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1321:
    #####: 1322:    for (const Variable *var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1323:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 1324:            continue;
    #####: 1325:        if (!var->isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1326:            continue;
    #####: 1327:        if (var->isRValueReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1328:            continue;
    #####: 1329:        if (var->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1330:            continue;
    #####: 1331:        if (!var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1332:            continue;
    #####: 1333:        const Scope *scope = var->scope();
call    0 never executed
    #####: 1334:        if (!scope->function)
branch  0 never executed
branch  1 never executed
    #####: 1335:            continue;
    #####: 1336:        Function *function = scope->function;
    #####: 1337:        if (var->isArgument()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1338:            if (function->isImplicitlyVirtual() || function->templateDef)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1339:                continue;
    #####: 1340:            if (isUnusedVariable(var))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1341:                continue;
    #####: 1342:            if (function->isConstructor() && isVariableMutableInInitializer(function->constructorMemberInitialization(), scope->bodyStart, var->declarationId()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1343:                continue;
        -: 1344:        }
    #####: 1345:        if (var->isGlobal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1346:            continue;
    #####: 1347:        if (var->isStatic())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1348:            continue;
    #####: 1349:        if (var->isArray())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1350:            continue;
    #####: 1351:        if (var->isEnumType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1352:            continue;
    #####: 1353:        if (var->isVolatile())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1354:            continue;
    #####: 1355:        if (isAliased(var))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1356:            continue;
    #####: 1357:        if (isVariableChanged(var, mSettings, mTokenizer->isCPP()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1358:            continue;
    #####: 1359:        if (Function::returnsReference(function) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1360:            Token::findmatch(var->nameToken(), "return %varid% ;|[", scope->bodyEnd, var->declarationId()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1361:            continue;
        -: 1362:        // Skip if address is taken
    #####: 1363:        if (Token::findmatch(var->nameToken(), "& %varid%", scope->bodyEnd, var->declarationId()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1364:            continue;
    #####: 1365:        constVariableError(var);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1366:    }
        -: 1367:}
        -: 1368:
function _ZN10CheckOther18constVariableErrorEPK8Variable called 0 returned 0% blocks executed 0%
    #####: 1369:void CheckOther::constVariableError(const Variable *var)
        -: 1370:{
    #####: 1371:    const Token *tok = nullptr;
    #####: 1372:    std::string name = "x";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1373:    std::string id = "Variable";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1374:    if (var) {
branch  0 never executed
branch  1 never executed
    #####: 1375:        tok = var->nameToken();
call    0 never executed
    #####: 1376:        name = var->name();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1377:        if (var->isArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1378:            id = "Parameter";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1379:    }
    #####: 1380:    reportError(tok, Severity::style, "const" + id, id + " '" + name + "' can be declared with const", CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####: 1381:}
call    0 never executed
        -: 1382:
        -: 1383://---------------------------------------------------------------------------
        -: 1384:// Check usage of char variables..
        -: 1385://---------------------------------------------------------------------------
        -: 1386:
function _ZN10CheckOther17checkCharVariableEv called 0 returned 0% blocks executed 0%
    #####: 1387:void CheckOther::checkCharVariable()
        -: 1388:{
    #####: 1389:    const bool warning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 1390:    const bool portability = mSettings->isEnabled(Settings::PORTABILITY);
call    0 never executed
    #####: 1391:    if (!warning && !portability)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1392:        return;
        -: 1393:
    #####: 1394:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1395:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1396:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1397:            if (Token::Match(tok, "%var% [")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1398:                if (!tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1399:                    continue;
    #####: 1400:                if (!tok->variable()->isArray() && !tok->variable()->isPointer())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1401:                    continue;
    #####: 1402:                const Token *index = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 1403:                if (warning && tok->variable()->isArray() && astIsSignedChar(index) && index->getValueGE(0x80, mSettings))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1404:                    signedCharArrayIndexError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1405:                if (portability && astIsUnknownSignChar(index) && index->getValueGE(0x80, mSettings))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1406:                    unknownSignCharArrayIndexError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1407:            } else if (warning && Token::Match(tok, "[&|^]") && tok->isBinaryOp()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1408:                bool warn = false;
    #####: 1409:                if (astIsSignedChar(tok->astOperand1())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1410:                    const ValueFlow::Value *v1 = tok->astOperand1()->getValueLE(-1, mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1411:                    const ValueFlow::Value *v2 = tok->astOperand2()->getMaxValue(false);
call    0 never executed
call    1 never executed
    #####: 1412:                    if (!v1)
branch  0 never executed
branch  1 never executed
    #####: 1413:                        v1 = tok->astOperand1()->getValueGE(0x80, mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1414:                    if (v1 && !(tok->str() == "&" && v2 && v2->isKnown() && v2->intvalue >= 0 && v2->intvalue < 0x100))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1415:                        warn = true;
    #####: 1416:                } else if (astIsSignedChar(tok->astOperand2())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1417:                    const ValueFlow::Value *v1 = tok->astOperand2()->getValueLE(-1, mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1418:                    const ValueFlow::Value *v2 = tok->astOperand1()->getMaxValue(false);
call    0 never executed
call    1 never executed
    #####: 1419:                    if (!v1)
branch  0 never executed
branch  1 never executed
    #####: 1420:                        v1 = tok->astOperand2()->getValueGE(0x80, mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1421:                    if (v1 && !(tok->str() == "&" && v2 && v2->isKnown() && v2->intvalue >= 0 && v2->intvalue < 0x100))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1422:                        warn = true;
        -: 1423:                }
        -: 1424:
        -: 1425:                // is the result stored in a short|int|long?
    #####: 1426:                if (warn && Token::simpleMatch(tok->astParent(), "=")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1427:                    const Token *lhs = tok->astParent()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1428:                    if (lhs && lhs->valueType() && lhs->valueType()->type >= ValueType::Type::SHORT)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1429:                        charBitOpError(tok); // This is an error..
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1430:                }
        -: 1431:            }
        -: 1432:        }
        -: 1433:    }
        -: 1434:}
        -: 1435:
function _ZN10CheckOther25signedCharArrayIndexErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1436:void CheckOther::signedCharArrayIndexError(const Token *tok)
        -: 1437:{
    #####: 1438:    reportError(tok,
call    0 never executed
        -: 1439:                Severity::warning,
        -: 1440:                "signedCharArrayIndex",
        -: 1441:                "Signed 'char' type used as array index.\n"
        -: 1442:                "Signed 'char' type used as array index. If the value "
        -: 1443:                "can be greater than 127 there will be a buffer underflow "
        -: 1444:                "because of sign extension.", CWE128, false);
    #####: 1445:}
        -: 1446:
function _ZN10CheckOther30unknownSignCharArrayIndexErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1447:void CheckOther::unknownSignCharArrayIndexError(const Token *tok)
        -: 1448:{
    #####: 1449:    reportError(tok,
call    0 never executed
        -: 1450:                Severity::portability,
        -: 1451:                "unknownSignCharArrayIndex",
        -: 1452:                "'char' type used as array index.\n"
        -: 1453:                "'char' type used as array index. Values greater than 127 will be "
        -: 1454:                "treated depending on whether 'char' is signed or unsigned on target platform.", CWE758, false);
    #####: 1455:}
        -: 1456:
function _ZN10CheckOther14charBitOpErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1457:void CheckOther::charBitOpError(const Token *tok)
        -: 1458:{
    #####: 1459:    reportError(tok,
call    0 never executed
        -: 1460:                Severity::warning,
        -: 1461:                "charBitOp",
        -: 1462:                "When using 'char' variables in bit operations, sign extension can generate unexpected results.\n"
        -: 1463:                "When using 'char' variables in bit operations, sign extension can generate unexpected results. For example:\n"
        -: 1464:                "    char c = 0x80;\n"
        -: 1465:                "    int i = 0 | c;\n"
        -: 1466:                "    if (i & 0x8000)\n"
        -: 1467:                "        printf(\"not expected\");\n"
        -: 1468:                "The \"not expected\" will be printed on the screen.", CWE398, false);
    #####: 1469:}
        -: 1470:
        -: 1471://---------------------------------------------------------------------------
        -: 1472:// Incomplete statement..
        -: 1473://---------------------------------------------------------------------------
        -: 1474:
function _ZL6isTypePK5Tokenb called 0 returned 0% blocks executed 0%
    #####: 1475:static bool isType(const Token * tok, bool unknown)
        -: 1476:{
    #####: 1477:    if (Token::Match(tok, "%type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1478:        return true;
    #####: 1479:    if (Token::simpleMatch(tok, "::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1480:        return isType(tok->astOperand2(), unknown);
call    0 never executed
call    1 never executed
    #####: 1481:    if (Token::simpleMatch(tok, "<") && tok->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1482:        return true;
    #####: 1483:    if (unknown && Token::Match(tok, "%name% !!("))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1484:        return true;
    #####: 1485:    return false;
        -: 1486:}
        -: 1487:
function _ZL11isVarDeclOpPK5Token called 0 returned 0% blocks executed 0%
    #####: 1488:static bool isVarDeclOp(const Token* tok)
        -: 1489:{
    #####: 1490:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1491:        return false;
    #####: 1492:    const Token * vartok = tok->astOperand2();
call    0 never executed
    #####: 1493:    if (vartok && vartok->variable() && vartok->variable()->nameToken() == vartok)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1494:        return true;
    #####: 1495:    const Token * typetok = tok->astOperand1();
call    0 never executed
    #####: 1496:    return isType(typetok, Token::Match(vartok, "%var%"));
call    0 never executed
call    1 never executed
        -: 1497:}
        -: 1498:
function _ZL16isConstStatementPK5Token called 0 returned 0% blocks executed 0%
    #####: 1499:static bool isConstStatement(const Token *tok)
        -: 1500:{
    #####: 1501:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1502:        return false;
    #####: 1503:    if (tok->isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1504:        return false;
    #####: 1505:    if (Token::Match(tok, "%bool%|%num%|%str%|%char%|nullptr|NULL"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1506:        return true;
    #####: 1507:    if (Token::Match(tok, "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1508:        return true;
    #####: 1509:    if (Token::Match(tok, "*|&|&&") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1510:        (Token::Match(tok->previous(), "::|.|const|volatile|restrict") || isVarDeclOp(tok)))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1511:        return false;
    #####: 1512:    if (Token::Match(tok, "<<|>>") && !astIsIntegral(tok, false))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1513:        return false;
    #####: 1514:    if (Token::Match(tok, "!|~|%cop%") && (tok->astOperand1() || tok->astOperand2()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1515:        return true;
    #####: 1516:    if (Token::simpleMatch(tok->previous(), "sizeof ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1517:        return true;
    #####: 1518:    if (isCPPCast(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1519:        return isConstStatement(tok->astOperand2());
call    0 never executed
call    1 never executed
    #####: 1520:    if (Token::Match(tok, "( %type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1521:        return isConstStatement(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####: 1522:    if (Token::simpleMatch(tok, ","))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1523:        return isConstStatement(tok->astOperand2());
call    0 never executed
call    1 never executed
    #####: 1524:    return false;
        -: 1525:}
        -: 1526:
function _ZL10isVoidStmtPK5Token called 0 returned 0% blocks executed 0%
    #####: 1527:static bool isVoidStmt(const Token *tok)
        -: 1528:{
    #####: 1529:    if (Token::simpleMatch(tok, "( void"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1530:        return true;
    #####: 1531:    const Token *tok2 = tok;
    #####: 1532:    while (tok2->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1533:        tok2 = tok2->astOperand1();
call    0 never executed
    #####: 1534:    if (Token::simpleMatch(tok2->previous(), ")") && Token::simpleMatch(tok2->previous()->link(), "( void"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1535:        return true;
    #####: 1536:    if (Token::simpleMatch(tok2, "( void"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1537:        return true;
    #####: 1538:    return Token::Match(tok2->previous(), "delete|throw|return");
call    0 never executed
call    1 never executed
        -: 1539:}
        -: 1540:
function _ZL10isConstTopPK5Token called 0 returned 0% blocks executed 0%
    #####: 1541:static bool isConstTop(const Token *tok)
        -: 1542:{
    #####: 1543:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1544:        return false;
    #####: 1545:    if (tok == tok->astTop())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1546:        return true;
    #####: 1547:    if (Token::simpleMatch(tok->astParent(), ";") && tok->astTop() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1548:        Token::Match(tok->astTop()->previous(), "for|if (") && Token::simpleMatch(tok->astTop()->astOperand2(), ";")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1549:        if (Token::simpleMatch(tok->astParent()->astParent(), ";"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1550:            return tok->astParent()->astOperand2() == tok;
call    0 never executed
call    1 never executed
        -: 1551:        else
    #####: 1552:            return tok->astParent()->astOperand1() == tok;
call    0 never executed
call    1 never executed
        -: 1553:    }
    #####: 1554:    return false;
        -: 1555:}
        -: 1556:
function _ZN10CheckOther24checkIncompleteStatementEv called 0 returned 0% blocks executed 0%
    #####: 1557:void CheckOther::checkIncompleteStatement()
        -: 1558:{
    #####: 1559:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1560:        return;
        -: 1561:
    #####: 1562:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1563:        const Scope *scope = tok->scope();
call    0 never executed
    #####: 1564:        if (scope && !scope->isExecutable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1565:            continue;
    #####: 1566:        if (!isConstTop(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1567:            continue;
    #####: 1568:        const Token *rtok = nextAfterAstRightmostLeaf(tok);
call    0 never executed
    #####: 1569:        if (!Token::simpleMatch(tok->astParent(), ";") && !Token::simpleMatch(rtok, ";") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1570:            !Token::Match(tok->previous(), ";|}|{ %any% ;"))
call    0 never executed
call    1 never executed
    #####: 1571:            continue;
        -: 1572:        // Skipe statement expressions
    #####: 1573:        if (Token::simpleMatch(rtok, "; } )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1574:            continue;
    #####: 1575:        if (!isConstStatement(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1576:            continue;
    #####: 1577:        if (isVoidStmt(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1578:            continue;
    #####: 1579:        if (mTokenizer->isCPP() && tok->str() == "&" && !(tok->astOperand1()->valueType() && tok->astOperand1()->valueType()->isIntegral()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 1580:            // Possible archive
    #####: 1581:            continue;
    #####: 1582:        bool inconclusive = Token::Match(tok, "%cop%");
call    0 never executed
    #####: 1583:        if (mSettings->inconclusive || !inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1584:            constStatementError(tok, tok->isNumber() ? "numeric" : "string", inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 1585:    }
        -: 1586:}
        -: 1587:
function _ZN10CheckOther19constStatementErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1588:void CheckOther::constStatementError(const Token *tok, const std::string &type, bool inconclusive)
        -: 1589:{
    #####: 1590:    std::string msg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1591:    if (Token::simpleMatch(tok, "=="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1592:        msg = "Found suspicious equality comparison. Did you intend to assign a value instead?";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1593:    else if (Token::Match(tok, ",|!|~|%cop%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1594:        msg = "Found suspicious operator '" + tok->str() + "'";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1595:    else if (Token::Match(tok, "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1596:        msg = "Unused variable value '" + tok->str() + "'";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1597:    else
    #####: 1598:        msg = "Redundant code: Found a statement that begins with " + type + " constant.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1599:    reportError(tok, Severity::warning, "constStatement", msg, CWE398, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1600:}
        -: 1601:
        -: 1602://---------------------------------------------------------------------------
        -: 1603:// Detect division by zero.
        -: 1604://---------------------------------------------------------------------------
function _ZN10CheckOther17checkZeroDivisionEv called 0 returned 0% blocks executed 0%
    #####: 1605:void CheckOther::checkZeroDivision()
        -: 1606:{
    #####: 1607:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1608:        if (!tok->astOperand2() || !tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1609:            continue;
    #####: 1610:        if (tok->str() != "%" && tok->str() != "/" && tok->str() != "%=" && tok->str() != "/=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1611:            continue;
    #####: 1612:        if (!tok->valueType() || !tok->valueType()->isIntegral())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1613:            continue;
    #####: 1614:        if (tok->astOperand1()->isNumber()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1615:            if (MathLib::isFloat(tok->astOperand1()->str()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1616:                continue;
    #####: 1617:        } else if (tok->astOperand1()->isName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1618:            if (!tok->astOperand1()->valueType()->isIntegral())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1619:                continue;
    #####: 1620:        } else if (!tok->astOperand1()->isArithmeticalOp())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1621:            continue;
        -: 1622:
        -: 1623:        // Value flow..
    #####: 1624:        const ValueFlow::Value *value = tok->astOperand2()->getValue(0LL);
call    0 never executed
call    1 never executed
    #####: 1625:        if (value && mSettings->isEnabled(value, false))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1626:            zerodivError(tok, value);
call    0 never executed
        -: 1627:    }
    #####: 1628:}
        -: 1629:
function _ZN10CheckOther12zerodivErrorEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 1630:void CheckOther::zerodivError(const Token *tok, const ValueFlow::Value *value)
        -: 1631:{
    #####: 1632:    if (!tok && !value) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1633:        reportError(tok, Severity::error, "zerodiv", "Division by zero.", CWE369, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1634:        reportError(tok, Severity::error, "zerodivcond", ValueFlow::eitherTheConditionIsRedundant(nullptr) + " or there is division by zero.", CWE369, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1635:        return;
        -: 1636:    }
        -: 1637:
    #####: 1638:    const ErrorPath errorPath = getErrorPath(tok, value, "Division by zero");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1639:
    #####: 1640:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1641:    if (value->condition) {
branch  0 never executed
branch  1 never executed
    #####: 1642:        const int line = tok ? tok->linenr() : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1643:        errmsg << ValueFlow::eitherTheConditionIsRedundant(value->condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1644:               << " or there is division by zero at line " << line << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 1645:    } else
    #####: 1646:        errmsg << "Division by zero.";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1647:
    #####: 1648:    reportError(errorPath,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1649:                value->errorSeverity() ? Severity::error : Severity::warning,
call    0 never executed
    #####: 1650:                value->condition ? "zerodivcond" : "zerodiv",
    #####: 1651:                errmsg.str(), CWE369, value->isInconclusive());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1652:}
        -: 1653:
        -: 1654://---------------------------------------------------------------------------
        -: 1655:// Check for NaN (not-a-number) in an arithmetic expression, e.g.
        -: 1656:// double d = 1.0 / 0.0 + 100.0;
        -: 1657://---------------------------------------------------------------------------
        -: 1658:
function _ZN10CheckOther30checkNanInArithmeticExpressionEv called 0 returned 0% blocks executed 0%
    #####: 1659:void CheckOther::checkNanInArithmeticExpression()
        -: 1660:{
    #####: 1661:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1662:        return;
    #####: 1663:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1664:        if (tok->str() != "/")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1665:            continue;
    #####: 1666:        if (!Token::Match(tok->astParent(), "[+-]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1667:            continue;
    #####: 1668:        if (Token::simpleMatch(tok->astOperand2(), "0.0"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1669:            nanInArithmeticExpressionError(tok);
call    0 never executed
        -: 1670:    }
        -: 1671:}
        -: 1672:
function _ZN10CheckOther30nanInArithmeticExpressionErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1673:void CheckOther::nanInArithmeticExpressionError(const Token *tok)
        -: 1674:{
    #####: 1675:    reportError(tok, Severity::style, "nanInArithmeticExpression",
call    0 never executed
        -: 1676:                "Using NaN/Inf in a computation.\n"
        -: 1677:                "Using NaN/Inf in a computation. "
        -: 1678:                "Although nothing bad really happens, it is suspicious.", CWE369, false);
    #####: 1679:}
        -: 1680:
        -: 1681://---------------------------------------------------------------------------
        -: 1682:// Creating instance of classes which are destroyed immediately
        -: 1683://---------------------------------------------------------------------------
function _ZN10CheckOther24checkMisusedScopedObjectEv called 0 returned 0% blocks executed 0%
    #####: 1684:void CheckOther::checkMisusedScopedObject()
        -: 1685:{
        -: 1686:    // Skip this check for .c files
    #####: 1687:    if (mTokenizer->isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1688:        return;
        -: 1689:
    #####: 1690:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1691:        return;
        -: 1692:
    #####: 1693:    const SymbolDatabase * const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1694:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1695:        for (const Token *tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1696:            if ((tok->next()->type() || (tok->next()->function() && tok->next()->function()->isConstructor())) // TODO: The rhs of || should be removed; It is a workaround for a symboldatabase bug
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1697:                && Token::Match(tok, "[;{}] %name% (")
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1698:                && Token::Match(tok->linkAt(2), ") ; !!}")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1699:                && (!tok->next()->function() || // is not a function on this scope
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1700:                    tok->next()->function()->isConstructor())) { // or is function in this scope and it's a ctor
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1701:                tok = tok->next();
call    0 never executed
    #####: 1702:                misusedScopeObjectError(tok, tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1703:                tok = tok->next();
call    0 never executed
        -: 1704:            }
        -: 1705:        }
        -: 1706:    }
        -: 1707:}
        -: 1708:
function _ZN10CheckOther23misusedScopeObjectErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1709:void CheckOther::misusedScopeObjectError(const Token *tok, const std::string& varname)
        -: 1710:{
    #####: 1711:    reportError(tok, Severity::style,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1712:                "unusedScopedObject",
    #####: 1713:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1714:                "Instance of '$symbol' object is destroyed immediately.", CWE563, false);
    #####: 1715:}
        -: 1716:
function _ZL26getSingleExpressionInBlockPK5Token called 0 returned 0% blocks executed 0%
    #####: 1717:static const Token * getSingleExpressionInBlock(const Token * tok)
        -: 1718:{
    #####: 1719:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1720:        return nullptr;
    #####: 1721:    const Token * top = tok->astTop();
call    0 never executed
    #####: 1722:    if (!top)
branch  0 never executed
branch  1 never executed
    #####: 1723:        return nullptr;
    #####: 1724:    const Token * nextExpression = nextAfterAstRightmostLeaf(top);
call    0 never executed
    #####: 1725:    if (!Token::simpleMatch(nextExpression, "; }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1726:        return nullptr;
    #####: 1727:    return top;
        -: 1728:}
        -: 1729:
        -: 1730://-----------------------------------------------------------------------------
        -: 1731:// check for duplicate code in if and else branches
        -: 1732:// if (a) { b = true; } else { b = true; }
        -: 1733://-----------------------------------------------------------------------------
function _ZN10CheckOther20checkDuplicateBranchEv called 0 returned 0% blocks executed 0%
    #####: 1734:void CheckOther::checkDuplicateBranch()
        -: 1735:{
        -: 1736:    // This is inconclusive since in practice most warnings are noise:
        -: 1737:    // * There can be unfixed low-priority todos. The code is fine as it
        -: 1738:    //   is but it could be possible to enhance it. Writing a warning
        -: 1739:    //   here is noise since the code is fine (see cppcheck, abiword, ..)
        -: 1740:    // * There can be overspecified code so some conditions can't be true
        -: 1741:    //   and their conditional code is a duplicate of the condition that
        -: 1742:    //   is always true just in case it would be false. See for instance
        -: 1743:    //   abiword.
    #####: 1744:    if (!mSettings->isEnabled(Settings::STYLE) || !mSettings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1745:        return;
        -: 1746:
    #####: 1747:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1748:
    #####: 1749:    for (const Scope & scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1750:        if (scope.type != Scope::eIf)
branch  0 never executed
branch  1 never executed
    #####: 1751:            continue;
        -: 1752:
        -: 1753:        // check all the code in the function for if (..) else
    #####: 1754:        if (Token::simpleMatch(scope.bodyEnd, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1755:            // Make sure there are no macros (different macros might be expanded
        -: 1756:            // to the same code)
    #####: 1757:            bool macro = false;
    #####: 1758:            for (const Token *tok = scope.bodyStart; tok != scope.bodyEnd->linkAt(2); tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 1759:                if (tok->isExpandedMacro()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1760:                    macro = true;
    #####: 1761:                    break;
        -: 1762:                }
        -: 1763:            }
    #####: 1764:            if (macro)
branch  0 never executed
branch  1 never executed
    #####: 1765:                continue;
        -: 1766:
        -: 1767:            // save if branch code
    #####: 1768:            const std::string branch1 = scope.bodyStart->next()->stringifyList(scope.bodyEnd);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1769:
    #####: 1770:            if (branch1.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1771:                continue;
        -: 1772:
        -: 1773:            // save else branch code
    #####: 1774:            const std::string branch2 = scope.bodyEnd->tokAt(3)->stringifyList(scope.bodyEnd->linkAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
        -: 1775:
    #####: 1776:            ErrorPath errorPath;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1777:            // check for duplicates
    #####: 1778:            if (branch1 == branch2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1779:                duplicateBranchError(scope.classDef, scope.bodyEnd->next(), errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1780:                continue;
        -: 1781:            }
        -: 1782:
        -: 1783:            // check for duplicates using isSameExpression
    #####: 1784:            const Token * branchTop1 = getSingleExpressionInBlock(scope.bodyStart->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1785:            const Token * branchTop2 = getSingleExpressionInBlock(scope.bodyEnd->tokAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1786:            if (!branchTop1 || !branchTop2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1787:                continue;
    #####: 1788:            if (branchTop1->str() != branchTop2->str())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1789:                continue;
    #####: 1790:            if (isSameExpression(mTokenizer->isCPP(), false, branchTop1->astOperand1(), branchTop2->astOperand1(), mSettings->library, true, true, &errorPath) &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1791:                isSameExpression(mTokenizer->isCPP(), false, branchTop1->astOperand2(), branchTop2->astOperand2(), mSettings->library, true, true, &errorPath))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1792:                duplicateBranchError(scope.classDef, scope.bodyEnd->next(), errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
        -: 1793:        }
        -: 1794:    }
        -: 1795:}
        -: 1796:
function _ZN10CheckOther20duplicateBranchErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####: 1797:void CheckOther::duplicateBranchError(const Token *tok1, const Token *tok2, ErrorPath errors)
        -: 1798:{
    #####: 1799:    errors.emplace_back(tok2, "");
call    0 never executed
    #####: 1800:    errors.emplace_back(tok1, "");
call    0 never executed
        -: 1801:
    #####: 1802:    reportError(errors, Severity::style, "duplicateBranch", "Found duplicate branches for 'if' and 'else'.\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1803:                "Finding the same code in an 'if' and related 'else' branch is suspicious and "
        -: 1804:                "might indicate a cut and paste or logic error. Please examine this code "
        -: 1805:                "carefully to determine if it is correct.", CWE398, true);
    #####: 1806:}
        -: 1807:
        -: 1808:
        -: 1809://-----------------------------------------------------------------------------
        -: 1810:// Check for a free() of an invalid address
        -: 1811:// char* p = malloc(100);
        -: 1812:// free(p + 10);
        -: 1813://-----------------------------------------------------------------------------
function _ZN10CheckOther16checkInvalidFreeEv called 0 returned 0% blocks executed 0%
    #####: 1814:void CheckOther::checkInvalidFree()
        -: 1815:{
    #####: 1816:    std::map<int, bool> inconclusive;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1817:    std::map<int, std::string> allocation;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1818:
    #####: 1819:    const bool printInconclusive = mSettings->inconclusive;
    #####: 1820:    const SymbolDatabase* symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1821:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1822:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1823:
        -: 1824:            // Keep track of which variables were assigned addresses to newly-allocated memory
    #####: 1825:            if (Token::Match(tok, "%var% = malloc|g_malloc|new")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1826:                allocation.insert(std::make_pair(tok->varId(), tok->strAt(2)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1827:                inconclusive.insert(std::make_pair(tok->varId(), false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
        -: 1828:            }
        -: 1829:
        -: 1830:            // If a previously-allocated pointer is incremented or decremented, any subsequent
        -: 1831:            // free involving pointer arithmetic may or may not be invalid, so we should only
        -: 1832:            // report an inconclusive result.
    #####: 1833:            else if (Token::Match(tok, "%var% = %name% +|-") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1834:                     tok->varId() == tok->tokAt(2)->varId() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1835:                     allocation.find(tok->varId()) != allocation.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
    #####: 1836:                if (printInconclusive)
branch  0 never executed
branch  1 never executed
    #####: 1837:                    inconclusive[tok->varId()] = true;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1838:                else {
    #####: 1839:                    allocation.erase(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1840:                    inconclusive.erase(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1841:                }
        -: 1842:            }
        -: 1843:
        -: 1844:            // If a previously-allocated pointer is assigned a completely new value,
        -: 1845:            // we can't know if any subsequent free() on that pointer is valid or not.
    #####: 1846:            else if (Token::Match(tok, "%var% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1847:                allocation.erase(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1848:                inconclusive.erase(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1849:            }
        -: 1850:
        -: 1851:            // If a variable that was previously assigned a newly-allocated memory location is
        -: 1852:            // added or subtracted from when used to free the memory, report an error.
    #####: 1853:            else if (Token::Match(tok, "free|g_free|delete ( %any% +|-") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1854:                     Token::Match(tok, "delete [ ] ( %any% +|-") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1855:                     Token::Match(tok, "delete %any% +|- %any%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1856:
    #####: 1857:                const int varIndex = tok->strAt(1) == "(" ? 2 :
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1858:                                     tok->strAt(3) == "(" ? 4 : 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1859:                const int var1 = tok->tokAt(varIndex)->varId();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1860:                const int var2 = tok->tokAt(varIndex + 2)->varId();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1861:                const std::map<int, bool>::const_iterator alloc1 = inconclusive.find(var1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1862:                const std::map<int, bool>::const_iterator alloc2 = inconclusive.find(var2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1863:                if (alloc1 != inconclusive.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1864:                    invalidFreeError(tok, allocation[var1], alloc1->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1865:                } else if (alloc2 != inconclusive.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1866:                    invalidFreeError(tok, allocation[var2], alloc2->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1867:                }
        -: 1868:            }
        -: 1869:
        -: 1870:            // If the previously-allocated variable is passed in to another function
        -: 1871:            // as a parameter, it might be modified, so we shouldn't report an error
        -: 1872:            // if it is later used to free memory
    #####: 1873:            else if (Token::Match(tok, "%name% (") && !mSettings->library.isFunctionConst(tok->str(), true)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1874:                const Token* tok2 = Token::findmatch(tok->next(), "%var%", tok->linkAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1875:                while (tok2 != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 1876:                    allocation.erase(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1877:                    inconclusive.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1878:                    tok2 = Token::findmatch(tok2->next(), "%var%", tok->linkAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1879:                }
        -: 1880:            }
        -: 1881:        }
        -: 1882:    }
    #####: 1883:}
        -: 1884:
function _ZN10CheckOther16invalidFreeErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1885:void CheckOther::invalidFreeError(const Token *tok, const std::string &allocation, bool inconclusive)
        -: 1886:{
    #####: 1887:    std::string alloc = allocation;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1888:    if (alloc != "new")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1889:        alloc += "()";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1890:    std::string deallocated = (alloc == "new") ? "deleted" : "freed";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1891:    reportError(tok, Severity::error, "invalidFree", "Mismatching address is " + deallocated + ". The address you get from " + alloc + " must be " + deallocated + " without offset.", CWE(0U), inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
    #####: 1892:}
call    0 never executed
        -: 1893:
        -: 1894:
        -: 1895://---------------------------------------------------------------------------
        -: 1896:// check for the same expression on both sides of an operator
        -: 1897:// (x == x), (x && x), (x || x)
        -: 1898:// (x.y == x.y), (x.y && x.y), (x.y || x.y)
        -: 1899://---------------------------------------------------------------------------
        -: 1900:
        -: 1901:namespace {
function _ZN12_GLOBAL__N_18notconstEPK8Function called 0 returned 0% blocks executed 0%
    #####: 1902:    bool notconst(const Function* func)
        -: 1903:    {
    #####: 1904:        return !func->isConst();
call    0 never executed
        -: 1905:    }
        -: 1906:
function _ZN12_GLOBAL__N_117getConstFunctionsEPK14SymbolDatabaseRNSt7__debug4listIPK8FunctionSaIS7_EEE called 0 returned 0% blocks executed 0%
    #####: 1907:    void getConstFunctions(const SymbolDatabase *symbolDatabase, std::list<const Function*> &constFunctions)
        -: 1908:    {
    #####: 1909:        for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1910:            // only add const functions that do not have a non-const overloaded version
        -: 1911:            // since it is pretty much impossible to tell which is being called.
        -: 1912:            typedef std::map<std::string, std::list<const Function*> > StringFunctionMap;
    #####: 1913:            StringFunctionMap functionsByName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1914:            for (const Function &func : scope.functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1915:                functionsByName[func.tokenDef->str()].push_back(&func);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1916:            }
    #####: 1917:            for (StringFunctionMap::iterator it = functionsByName.begin();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1918:                 it != functionsByName.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1919:                const std::list<const Function*>::const_iterator nc = std::find_if(it->second.begin(), it->second.end(), notconst);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1920:                if (nc == it->second.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1921:                    // ok to add all of them
    #####: 1922:                    constFunctions.splice(constFunctions.end(), it->second);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1923:                }
        -: 1924:            }
        -: 1925:        }
    #####: 1926:    }
        -: 1927:}
        -: 1928:
function _ZN10CheckOther24checkDuplicateExpressionEv called 0 returned 0% blocks executed 0%
    #####: 1929:void CheckOther::checkDuplicateExpression()
        -: 1930:{
    #####: 1931:    const bool styleEnabled = mSettings->isEnabled(Settings::STYLE);
call    0 never executed
    #####: 1932:    const bool warningEnabled = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 1933:    if (!styleEnabled && !warningEnabled)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1934:        return;
        -: 1935:
        -: 1936:    // Parse all executing scopes..
    #####: 1937:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1938:
    #####: 1939:    std::list<const Function*> constFunctions;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1940:    getConstFunctions(symbolDatabase, constFunctions);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1941:
    #####: 1942:    for (const Scope *scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1943:        for (const Token *tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1944:            if (tok->str() == "=" && Token::Match(tok->astOperand1(), "%var%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1945:                const Token * endStatement = Token::findsimplematch(tok, ";");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1946:                if (Token::Match(endStatement, "; %type% %var% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1947:                    endStatement = endStatement->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1948:                }
    #####: 1949:                if (Token::Match(endStatement, "%var% %assign%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1950:                    const Token * nextAssign = endStatement->tokAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1951:                    const Token * var1 = tok->astOperand1();
call    0 never executed
    #####: 1952:                    const Token * var2 = nextAssign->astOperand1();
call    0 never executed
    #####: 1953:                    if (var1 && var2 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1954:                        Token::Match(var1->previous(), ";|{|} %var%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1955:                        Token::Match(var2->previous(), ";|{|} %var%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1956:                        var2->valueType() && var1->valueType() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1957:                        var2->valueType()->originalTypeName == var1->valueType()->originalTypeName &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1958:                        var2->valueType()->pointer == var1->valueType()->pointer &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1959:                        var2->valueType()->constness == var1->valueType()->constness &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1960:                        var2->varId() != var1->varId() && (
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1961:                            tok->astOperand2()->isArithmeticalOp() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1962:                            tok->astOperand2()->str() == "." ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1963:                            Token::Match(tok->astOperand2()->previous(), "%name% (")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1964:                        ) &&
branch  0 never executed
branch  1 never executed
    #####: 1965:                        tok->next()->tokType() != Token::eType &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1966:                        isSameExpression(mTokenizer->isCPP(), true, tok->next(), nextAssign->next(), mSettings->library, true, false) &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1967:                        isSameExpression(mTokenizer->isCPP(), true, tok->astOperand2(), nextAssign->astOperand2(), mSettings->library, true, false) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1968:                        tok->astOperand2()->expressionString() == nextAssign->astOperand2()->expressionString()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
    #####: 1969:                        bool assigned = false;
    #####: 1970:                        const Scope * varScope = var1->scope() ? var1->scope() : scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1971:                        for (const Token *assignTok = Token::findsimplematch(var2, ";"); assignTok && assignTok != varScope->bodyEnd; assignTok = assignTok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1972:                            if (Token::Match(assignTok, "%varid% = %var%", var1->varId()) && Token::Match(assignTok, "%var% = %varid%", var2->varId())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1973:                                assigned = true;
        -: 1974:                            }
    #####: 1975:                            if (Token::Match(assignTok, "%varid% = %var%", var2->varId()) && Token::Match(assignTok, "%var% = %varid%", var1->varId())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1976:                                assigned = true;
        -: 1977:                            }
        -: 1978:                        }
    #####: 1979:                        if (!assigned && !isUniqueExpression(tok->astOperand2()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1980:                            duplicateAssignExpressionError(var1, var2, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1981:                        else if (mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
    #####: 1982:                            duplicateAssignExpressionError(var1, var2, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1983:                    }
        -: 1984:                }
        -: 1985:            }
    #####: 1986:            ErrorPath errorPath;
call    0 never executed
call    1 never executed
    #####: 1987:            if (tok->isOp() && tok->astOperand1() && !Token::Match(tok, "+|*|<<|>>|+=|*=|<<=|>>=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1988:                if (Token::Match(tok, "==|!=|-") && astIsFloat(tok->astOperand1(), true))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1989:                    continue;
    #####: 1990:                if (isSameExpression(mTokenizer->isCPP(), true, tok->astOperand1(), tok->astOperand2(), mSettings->library, true, true, &errorPath)) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1991:                    if (isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand1())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1992:                        const bool assignment = tok->str() == "=";
call    0 never executed
call    1 never executed
    #####: 1993:                        if (assignment && warningEnabled)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1994:                            selfAssignmentError(tok, tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1995:                        else if (styleEnabled) {
branch  0 never executed
branch  1 never executed
    #####: 1996:                            if (mTokenizer->isCPP() && mSettings->standards.cpp==Standards::CPP11 && tok->str() == "==") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1997:                                const Token* parent = tok->astParent();
call    0 never executed
    #####: 1998:                                while (parent && parent->astParent()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1999:                                    parent = parent->astParent();
call    0 never executed
        -: 2000:                                }
    #####: 2001:                                if (parent && parent->previous() && parent->previous()->str() == "static_assert") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2002:                                    continue;
        -: 2003:                                }
        -: 2004:                            }
    #####: 2005:                            duplicateExpressionError(tok->astOperand1(), tok->astOperand2(), tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
        -: 2006:                        }
        -: 2007:                    }
    #####: 2008:                } else if (tok->str() == "=" && Token::simpleMatch(tok->astOperand2(), "=") && isSameExpression(mTokenizer->isCPP(), false, tok->astOperand1(), tok->astOperand2()->astOperand1(), mSettings->library, true, false)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####: 2009:                    if (warningEnabled && isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand1())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2010:                        selfAssignmentError(tok, tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 2011:                    }
    #####: 2012:                } else if (styleEnabled &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2013:                           isOppositeExpression(mTokenizer->isCPP(), tok->astOperand1(), tok->astOperand2(), mSettings->library, false, true, &errorPath) &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2014:                           !Token::Match(tok, "=|-|-=|/|/=") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2015:                           isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand1())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2016:                    oppositeExpressionError(tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2017:                } else if (!Token::Match(tok, "[-/%]")) { // These operators are not associative
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2018:                    if (styleEnabled && tok->astOperand2() && tok->str() == tok->astOperand1()->str() && isSameExpression(mTokenizer->isCPP(), true, tok->astOperand2(), tok->astOperand1()->astOperand2(), mSettings->library, true, true, &errorPath) && isWithoutSideEffects(mTokenizer->isCPP(), tok->astOperand2()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
    #####: 2019:                        duplicateExpressionError(tok->astOperand2(), tok->astOperand1()->astOperand2(), tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 2020:                    else if (tok->astOperand2() && isConstExpression(tok->astOperand1(), mSettings->library, true, mTokenizer->isCPP())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2021:                        const Token *ast1 = tok->astOperand1();
call    0 never executed
    #####: 2022:                        while (ast1 && tok->str() == ast1->str()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2023:                            if (isSameExpression(mTokenizer->isCPP(), true, ast1->astOperand1(), tok->astOperand2(), mSettings->library, true, true, &errorPath) &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2024:                                isWithoutSideEffects(mTokenizer->isCPP(), ast1->astOperand1()) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2025:                                isWithoutSideEffects(mTokenizer->isCPP(), ast1->astOperand2()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2026:                                // Probably the message should be changed to 'duplicate expressions X in condition or something like that'.
    #####: 2027:                                duplicateExpressionError(ast1->astOperand1(), tok->astOperand2(), tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 2028:                            ast1 = ast1->astOperand1();
call    0 never executed
        -: 2029:                        }
        -: 2030:                    }
        -: 2031:                }
    #####: 2032:            } else if (styleEnabled && tok->astOperand1() && tok->astOperand2() && tok->str() == ":" && tok->astParent() && tok->astParent()->str() == "?") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####: 2033:                if (!tok->astOperand1()->values().empty() && !tok->astOperand2()->values().empty() && isEqualKnownValue(tok->astOperand1(), tok->astOperand2()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 2034:                    duplicateValueTernaryError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2035:                else if (isSameExpression(mTokenizer->isCPP(), true, tok->astOperand1(), tok->astOperand2(), mSettings->library, false, true, &errorPath))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2036:                    duplicateExpressionTernaryError(tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 2037:            }
        -: 2038:        }
        -: 2039:    }
        -: 2040:}
        -: 2041:
function _ZN10CheckOther23oppositeExpressionErrorEPK5TokenNSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####: 2042:void CheckOther::oppositeExpressionError(const Token *opTok, ErrorPath errors)
        -: 2043:{
    #####: 2044:    errors.emplace_back(opTok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2045:
    #####: 2046:    const std::string& op = opTok ? opTok->str() : "&&";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
        -: 2047:
    #####: 2048:    reportError(errors, Severity::style, "oppositeExpression", "Opposite expression on both sides of \'" + op + "\'.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 2049:                "Finding the opposite expression on both sides of an operator is suspicious and might "
        -: 2050:                "indicate a cut and paste or logic error. Please examine this code carefully to "
        -: 2051:                "determine if it is correct.", CWE398, false);
    #####: 2052:}
        -: 2053:
function _ZN10CheckOther24duplicateExpressionErrorEPK5TokenS2_S2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####: 2054:void CheckOther::duplicateExpressionError(const Token *tok1, const Token *tok2, const Token *opTok, ErrorPath errors)
        -: 2055:{
    #####: 2056:    errors.emplace_back(opTok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2057:
    #####: 2058:    const std::string& expr1 = tok1 ? tok1->expressionString() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####: 2059:    const std::string& expr2 = tok2 ? tok2->expressionString() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
        -: 2060:
    #####: 2061:    const std::string& op = opTok ? opTok->str() : "&&";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####: 2062:    std::string msg = "Same expression on both sides of \'" + op + "\'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2063:    std::string id = "duplicateExpression";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2064:    if (expr1 != expr2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2065:        id = "knownConditionTrueFalse";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2066:        std::string exprMsg = "The expression \'" + expr1 + " " + op +  " " + expr2 + "\' is always ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    #####: 2067:        if (Token::Match(opTok, "==|>=|<="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2068:            msg = exprMsg + "true";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2069:        else if (Token::Match(opTok, "!=|>|<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2070:            msg = exprMsg + "false";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2071:        if (!Token::Match(tok1, "%num%|NULL|nullptr") && !Token::Match(tok2, "%num%|NULL|nullptr"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2072:            msg += " because '" + expr1 + "' and '" + expr2 + "' represent the same value";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -: 2073:    }
        -: 2074:
    #####: 2075:    reportError(errors, Severity::style, id.c_str(), msg + ".\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 2076:                "Finding the same expression on both sides of an operator is suspicious and might "
        -: 2077:                "indicate a cut and paste or logic error. Please examine this code carefully to "
        -: 2078:                "determine if it is correct.", CWE398, false);
    #####: 2079:}
        -: 2080:
function _ZN10CheckOther30duplicateAssignExpressionErrorEPK5TokenS2_b called 0 returned 0% blocks executed 0%
    #####: 2081:void CheckOther::duplicateAssignExpressionError(const Token *tok1, const Token *tok2, bool inconclusive)
        -: 2082:{
    #####: 2083:    const std::list<const Token *> toks = { tok2, tok1 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 2084:
    #####: 2085:    const std::string& var1 = tok1 ? tok1->str() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####: 2086:    const std::string& var2 = tok2 ? tok2->str() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
        -: 2087:
    #####: 2088:    reportError(toks, Severity::style, "duplicateAssignExpression",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2089:                "Same expression used in consecutive assignments of '" + var1 + "' and '" + var2 + "'.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 2090:                "Finding variables '" + var1 + "' and '" + var2 + "' that are assigned the same expression "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 2091:                "is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to "
        -: 2092:                "determine if it is correct.", CWE398, inconclusive);
    #####: 2093:}
call    0 never executed
        -: 2094:
function _ZN10CheckOther31duplicateExpressionTernaryErrorEPK5TokenNSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####: 2095:void CheckOther::duplicateExpressionTernaryError(const Token *tok, ErrorPath errors)
        -: 2096:{
    #####: 2097:    errors.emplace_back(tok, "");
call    0 never executed
    #####: 2098:    reportError(errors, Severity::style, "duplicateExpressionTernary", "Same expression in both branches of ternary operator.\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2099:                "Finding the same expression in both branches of ternary operator is suspicious as "
        -: 2100:                "the same code is executed regardless of the condition.", CWE398, false);
    #####: 2101:}
        -: 2102:
function _ZN10CheckOther26duplicateValueTernaryErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2103:void CheckOther::duplicateValueTernaryError(const Token *tok)
        -: 2104:{
    #####: 2105:    reportError(tok, Severity::style, "duplicateValueTernary", "Same value in both branches of ternary operator.\n"
call    0 never executed
        -: 2106:                "Finding the same value in both branches of ternary operator is suspicious as "
        -: 2107:                "the same code is executed regardless of the condition.", CWE398, false);
    #####: 2108:}
        -: 2109:
function _ZN10CheckOther19selfAssignmentErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2110:void CheckOther::selfAssignmentError(const Token *tok, const std::string &varname)
        -: 2111:{
    #####: 2112:    reportError(tok, Severity::warning,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2113:                "selfAssignment",
    #####: 2114:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 2115:                "Redundant assignment of '$symbol' to itself.", CWE398, false);
    #####: 2116:}
        -: 2117:
        -: 2118://-----------------------------------------------------------------------------
        -: 2119:// Check is a comparison of two variables leads to condition, which is
        -: 2120:// always true or false.
        -: 2121:// For instance: int a = 1; if(isless(a,a)){...}
        -: 2122:// In this case isless(a,a) always evaluates to false.
        -: 2123://
        -: 2124:// Reference:
        -: 2125:// - http://www.cplusplus.com/reference/cmath/
        -: 2126://-----------------------------------------------------------------------------
function _ZN10CheckOther42checkComparisonFunctionIsAlwaysTrueOrFalseEv called 0 returned 0% blocks executed 0%
    #####: 2127:void CheckOther::checkComparisonFunctionIsAlwaysTrueOrFalse()
        -: 2128:{
    #####: 2129:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2130:        return;
        -: 2131:
    #####: 2132:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2133:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2134:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2135:            if (tok->isName() && Token::Match(tok, "isgreater|isless|islessgreater|isgreaterequal|islessequal ( %var% , %var% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2136:                const int varidLeft = tok->tokAt(2)->varId();// get the left varid
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2137:                const int varidRight = tok->tokAt(4)->varId();// get the right varid
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 2138:                // compare varids: if they are not zero but equal
        -: 2139:                // --> the comparison function is called with the same variables
    #####: 2140:                if (varidLeft == varidRight) {
branch  0 never executed
branch  1 never executed
    #####: 2141:                    const std::string& functionName = tok->str(); // store function name
call    0 never executed
    #####: 2142:                    const std::string& varNameLeft = tok->strAt(2); // get the left variable name
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2143:                    if (functionName == "isgreater" || functionName == "isless" || functionName == "islessgreater") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 2144:                        // e.g.: isgreater(x,x) --> (x)>(x) --> false
    #####: 2145:                        checkComparisonFunctionIsAlwaysTrueOrFalseError(tok, functionName, varNameLeft, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2146:                    } else { // functionName == "isgreaterequal" || functionName == "islessequal"
        -: 2147:                        // e.g.: isgreaterequal(x,x) --> (x)>=(x) --> true
    #####: 2148:                        checkComparisonFunctionIsAlwaysTrueOrFalseError(tok, functionName, varNameLeft, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2149:                    }
        -: 2150:                }
        -: 2151:            }
        -: 2152:        }
        -: 2153:    }
        -: 2154:}
function _ZN10CheckOther47checkComparisonFunctionIsAlwaysTrueOrFalseErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 2155:void CheckOther::checkComparisonFunctionIsAlwaysTrueOrFalseError(const Token* tok, const std::string &functionName, const std::string &varName, const bool result)
        -: 2156:{
    #####: 2157:    const std::string strResult = result ? "true" : "false";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2158:    const struct CWE cweResult = result ? CWE571 : CWE570;
branch  0 never executed
branch  1 never executed
        -: 2159:
    #####: 2160:    reportError(tok, Severity::warning, "comparisonFunctionIsAlwaysTrueOrFalse",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2161:                "$symbol:" + functionName + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2162:                "Comparison of two identical variables with $symbol(" + varName + "," + varName + ") always evaluates to " + strResult + ".\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2163:                "The function $symbol is designed to compare two variables. Calling this function with one variable (" + varName + ") "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2164:                "for both parameters leads to a statement which is always " + strResult + ".", cweResult, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2165:}
call    0 never executed
        -: 2166:
        -: 2167://---------------------------------------------------------------------------
        -: 2168:// Check testing sign of unsigned variables and pointers.
        -: 2169://---------------------------------------------------------------------------
function _ZN10CheckOther27checkSignOfUnsignedVariableEv called 0 returned 0% blocks executed 0%
    #####: 2170:void CheckOther::checkSignOfUnsignedVariable()
        -: 2171:{
    #####: 2172:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2173:        return;
        -: 2174:
    #####: 2175:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 2176:
    #####: 2177:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2178:        // check all the code in the function
    #####: 2179:        for (const Token *tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2180:            if (!tok->isComparisonOp() || !tok->astOperand1() || !tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2181:                continue;
        -: 2182:
    #####: 2183:            const ValueFlow::Value *v1 = tok->astOperand1()->getValue(0);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2184:            const ValueFlow::Value *v2 = tok->astOperand2()->getValue(0);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2185:
    #####: 2186:            if (Token::Match(tok, "<|<=") && v2 && v2->isKnown()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2187:                const ValueType* vt = tok->astOperand1()->valueType();
call    0 never executed
call    1 never executed
    #####: 2188:                if (vt && vt->pointer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2189:                    pointerLessThanZeroError(tok, v2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2190:                if (vt && vt->sign == ValueType::UNSIGNED)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2191:                    unsignedLessThanZeroError(tok, v2, tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2192:            } else if (Token::Match(tok, ">|>=") && v1 && v1->isKnown()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2193:                const ValueType* vt = tok->astOperand2()->valueType();
call    0 never executed
call    1 never executed
    #####: 2194:                if (vt && vt->pointer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2195:                    pointerLessThanZeroError(tok, v1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2196:                if (vt && vt->sign == ValueType::UNSIGNED)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2197:                    unsignedLessThanZeroError(tok, v1, tok->astOperand2()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2198:            } else if (Token::simpleMatch(tok, ">=") && v2 && v2->isKnown()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2199:                const ValueType* vt = tok->astOperand1()->valueType();
call    0 never executed
call    1 never executed
    #####: 2200:                if (vt && vt->pointer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2201:                    pointerPositiveError(tok, v2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2202:                if (vt && vt->sign == ValueType::UNSIGNED)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2203:                    unsignedPositiveError(tok, v2, tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2204:            } else if (Token::simpleMatch(tok, "<=") && v1 && v1->isKnown()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2205:                const ValueType* vt = tok->astOperand2()->valueType();
call    0 never executed
call    1 never executed
    #####: 2206:                if (vt && vt->pointer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2207:                    pointerPositiveError(tok, v1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2208:                if (vt && vt->sign == ValueType::UNSIGNED)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2209:                    unsignedPositiveError(tok, v1, tok->astOperand2()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 2210:            }
        -: 2211:        }
        -: 2212:    }
        -: 2213:}
        -: 2214:
function _ZN10CheckOther25unsignedLessThanZeroErrorEPK5TokenPKN9ValueFlow5ValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2215:void CheckOther::unsignedLessThanZeroError(const Token *tok, const ValueFlow::Value * v, const std::string &varname)
        -: 2216:{
    #####: 2217:    reportError(getErrorPath(tok, v, "Unsigned less than zero"), Severity::style, "unsignedLessThanZero",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 2218:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 2219:                "Checking if unsigned expression '$symbol' is less than zero.\n"
        -: 2220:                "The unsigned expression '$symbol' will never be negative so it "
        -: 2221:                "is either pointless or an error to check if it is.", CWE570, false);
    #####: 2222:}
        -: 2223:
function _ZN10CheckOther24pointerLessThanZeroErrorEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 2224:void CheckOther::pointerLessThanZeroError(const Token *tok, const ValueFlow::Value *v)
        -: 2225:{
    #####: 2226:    reportError(getErrorPath(tok, v, "Pointer less than zero"), Severity::style, "pointerLessThanZero",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
        -: 2227:                "A pointer can not be negative so it is either pointless or an error to check if it is.", CWE570, false);
    #####: 2228:}
        -: 2229:
function _ZN10CheckOther21unsignedPositiveErrorEPK5TokenPKN9ValueFlow5ValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2230:void CheckOther::unsignedPositiveError(const Token *tok, const ValueFlow::Value * v, const std::string &varname)
        -: 2231:{
    #####: 2232:    reportError(getErrorPath(tok, v, "Unsigned positive"), Severity::style, "unsignedPositive",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 2233:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 2234:                "Unsigned expression '$symbol' can't be negative so it is unnecessary to test it.", CWE570, false);
    #####: 2235:}
        -: 2236:
function _ZN10CheckOther20pointerPositiveErrorEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 2237:void CheckOther::pointerPositiveError(const Token *tok, const ValueFlow::Value * v)
        -: 2238:{
    #####: 2239:    reportError(getErrorPath(tok, v, "Pointer positive"), Severity::style, "pointerPositive",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
        -: 2240:                "A pointer can not be negative so it is either pointless or an error to check if it is not.", CWE570, false);
    #####: 2241:}
        -: 2242:
        -: 2243:/* check if a constructor in given class scope takes a reference */
function _ZL25constructorTakesReferencePK5Scope called 0 returned 0% blocks executed 0%
    #####: 2244:static bool constructorTakesReference(const Scope * const classScope)
        -: 2245:{
    #####: 2246:    for (const Function &constructor : classScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2247:        if (constructor.isConstructor()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2248:            for (int argnr = 0U; argnr < constructor.argCount(); argnr++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2249:                const Variable * const argVar = constructor.getArgumentVar(argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2250:                if (argVar && argVar->isReference()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2251:                    return true;
        -: 2252:                }
        -: 2253:            }
        -: 2254:        }
        -: 2255:    }
    #####: 2256:    return false;
        -: 2257:}
        -: 2258:
        -: 2259://---------------------------------------------------------------------------
        -: 2260:// This check rule works for checking the "const A a = getA()" usage when getA() returns "const A &" or "A &".
        -: 2261:// In most scenarios, "const A & a = getA()" will be more efficient.
        -: 2262://---------------------------------------------------------------------------
function _ZN10CheckOther18checkRedundantCopyEv called 0 returned 0% blocks executed 0%
    #####: 2263:void CheckOther::checkRedundantCopy()
        -: 2264:{
    #####: 2265:    if (!mSettings->isEnabled(Settings::PERFORMANCE) || mTokenizer->isC() || !mSettings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2266:        return;
        -: 2267:
    #####: 2268:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 2269:
    #####: 2270:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2271:        if (!var || var->isReference() || !var->isConst() || var->isPointer() || (!var->type() && !var->isStlType())) // bailout if var is of standard type, if it is a pointer or non-const
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 2272:            continue;
        -: 2273:
    #####: 2274:        const Token* startTok = var->nameToken();
call    0 never executed
    #####: 2275:        if (startTok->strAt(1) == "=") // %type% %name% = ... ;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2276:            ;
    #####: 2277:        else if (startTok->strAt(1) == "(" && var->isClass() && var->typeScope()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 2278:            // Object is instantiated. Warn if constructor takes arguments by value.
    #####: 2279:            if (constructorTakesReference(var->typeScope()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2280:                continue;
        -: 2281:        } else
    #####: 2282:            continue;
        -: 2283:
    #####: 2284:        const Token* tok = startTok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 2285:        if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 2286:            continue;
    #####: 2287:        if (!Token::Match(tok->previous(), "%name% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2288:            continue;
    #####: 2289:        if (!Token::Match(tok->link(), ") )| ;")) // bailout for usage like "const A a = getA()+3"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2290:            continue;
        -: 2291:
    #####: 2292:        const Function* func = tok->previous()->function();
call    0 never executed
call    1 never executed
    #####: 2293:        if (func && func->tokenDef->strAt(-1) == "&") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2294:            redundantCopyError(startTok, startTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2295:        }
        -: 2296:    }
        -: 2297:}
function _ZN10CheckOther18redundantCopyErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2298:void CheckOther::redundantCopyError(const Token *tok,const std::string& varname)
        -: 2299:{
    #####: 2300:    reportError(tok, Severity::performance, "redundantCopyLocalConst",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2301:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 2302:                "Use const reference for '$symbol' to avoid unnecessary data copying.\n"
        -: 2303:                "The const variable '$symbol' is assigned a copy of the data. You can avoid "
        -: 2304:                "the unnecessary data copying by converting '$symbol' to const reference.",
        -: 2305:                CWE398,
        -: 2306:                true); // since #5618 that check became inconclusive
    #####: 2307:}
        -: 2308:
        -: 2309://---------------------------------------------------------------------------
        -: 2310:// Checking for shift by negative values
        -: 2311://---------------------------------------------------------------------------
        -: 2312:
function _ZL10isNegativePK5TokenPK8Settings called 0 returned 0% blocks executed 0%
    #####: 2313:static bool isNegative(const Token *tok, const Settings *settings)
        -: 2314:{
    #####: 2315:    return tok->valueType() && tok->valueType()->sign == ValueType::SIGNED && tok->getValueLE(-1LL, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2316:}
        -: 2317:
function _ZN10CheckOther25checkNegativeBitwiseShiftEv called 0 returned 0% blocks executed 0%
    #####: 2318:void CheckOther::checkNegativeBitwiseShift()
        -: 2319:{
    #####: 2320:    const bool portability = mSettings->isEnabled(Settings::PORTABILITY);
call    0 never executed
        -: 2321:
    #####: 2322:    for (const Token* tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2323:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2324:            continue;
        -: 2325:
    #####: 2326:        if (!Token::Match(tok, "<<|>>|<<=|>>="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2327:            continue;
        -: 2328:
        -: 2329:        // don't warn if lhs is a class. this is an overloaded operator then
    #####: 2330:        if (mTokenizer->isCPP()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2331:            const ValueType * lhsType = tok->astOperand1()->valueType();
call    0 never executed
call    1 never executed
    #####: 2332:            if (!lhsType || !lhsType->isIntegral())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2333:                continue;
        -: 2334:        }
        -: 2335:
        -: 2336:        // bailout if operation is protected by ?:
    #####: 2337:        bool ternary = false;
    #####: 2338:        for (const Token *parent = tok; parent; parent = parent->astParent()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2339:            if (Token::Match(parent, "?|:")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2340:                ternary = true;
    #####: 2341:                break;
        -: 2342:            }
        -: 2343:        }
    #####: 2344:        if (ternary)
branch  0 never executed
branch  1 never executed
    #####: 2345:            continue;
        -: 2346:
        -: 2347:        // Get negative rhs value. preferably a value which doesn't have 'condition'.
    #####: 2348:        if (portability && isNegative(tok->astOperand1(), mSettings))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2349:            negativeBitwiseShiftError(tok, 1);
call    0 never executed
    #####: 2350:        else if (isNegative(tok->astOperand2(), mSettings))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2351:            negativeBitwiseShiftError(tok, 2);
call    0 never executed
        -: 2352:    }
    #####: 2353:}
        -: 2354:
        -: 2355:
function _ZN10CheckOther25negativeBitwiseShiftErrorEPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 2356:void CheckOther::negativeBitwiseShiftError(const Token *tok, int op)
        -: 2357:{
    #####: 2358:    if (op == 1)
branch  0 never executed
branch  1 never executed
        -: 2359:        // LHS - this is used by intention in various software, if it
        -: 2360:        // is used often in a project and works as expected then this is
        -: 2361:        // a portability issue
    #####: 2362:        reportError(tok, Severity::portability, "shiftNegativeLHS", "Shifting a negative value is technically undefined behaviour", CWE758, false);
call    0 never executed
        -: 2363:    else // RHS
    #####: 2364:        reportError(tok, Severity::error, "shiftNegative", "Shifting by a negative value is undefined behaviour", CWE758, false);
call    0 never executed
    #####: 2365:}
        -: 2366:
        -: 2367://---------------------------------------------------------------------------
        -: 2368:// Check for incompletely filled buffers.
        -: 2369://---------------------------------------------------------------------------
function _ZN10CheckOther24checkIncompleteArrayFillEv called 0 returned 0% blocks executed 0%
    #####: 2370:void CheckOther::checkIncompleteArrayFill()
        -: 2371:{
    #####: 2372:    if (!mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
    #####: 2373:        return;
    #####: 2374:    const bool printWarning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 2375:    const bool printPortability = mSettings->isEnabled(Settings::PORTABILITY);
call    0 never executed
    #####: 2376:    if (!printPortability && !printWarning)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2377:        return;
        -: 2378:
    #####: 2379:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 2380:
    #####: 2381:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2382:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2383:            if (Token::Match(tok, "memset|memcpy|memmove ( %var% ,") && Token::Match(tok->linkAt(1)->tokAt(-2), ", %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 2384:                const Variable *var = tok->tokAt(2)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2385:                if (!var || !var->isArray() || var->dimensions().empty() || !var->dimension(0))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2386:                    continue;
        -: 2387:
    #####: 2388:                if (MathLib::toLongNumber(tok->linkAt(1)->strAt(-1)) == var->dimension(0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2389:                    int size = mTokenizer->sizeOfType(var->typeStartToken());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2390:                    if (size == 0 && var->valueType()->pointer)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2391:                        size = mSettings->sizeof_pointer;
    #####: 2392:                    if ((size != 1 && size != 100 && size != 0) || var->isPointer()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2393:                        if (printWarning)
branch  0 never executed
branch  1 never executed
    #####: 2394:                            incompleteArrayFillError(tok, var->name(), tok->str(), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2395:                    } else if (var->valueType()->type == ValueType::Type::BOOL && printPortability) // sizeof(bool) is not 1 on all platforms
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2396:                        incompleteArrayFillError(tok, var->name(), tok->str(), true);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2397:                }
        -: 2398:            }
        -: 2399:        }
        -: 2400:    }
        -: 2401:}
        -: 2402:
function _ZN10CheckOther24incompleteArrayFillErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 2403:void CheckOther::incompleteArrayFillError(const Token* tok, const std::string& buffer, const std::string& function, bool boolean)
        -: 2404:{
    #####: 2405:    if (boolean)
branch  0 never executed
branch  1 never executed
    #####: 2406:        reportError(tok, Severity::portability, "incompleteArrayFill",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2407:                    "$symbol:" + buffer + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2408:                    "$symbol:" + function + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2409:                    "Array '" + buffer + "' might be filled incompletely. Did you forget to multiply the size given to '" + function + "()' with 'sizeof(*" + buffer + ")'?\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2410:                    "The array '" + buffer + "' is filled incompletely. The function '" + function + "()' needs the size given in bytes, but the type 'bool' is larger than 1 on some platforms. Did you forget to multiply the size with 'sizeof(*" + buffer + ")'?", CWE131, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2411:    else
    #####: 2412:        reportError(tok, Severity::warning, "incompleteArrayFill",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2413:                    "$symbol:" + buffer + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2414:                    "$symbol:" + function + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2415:                    "Array '" + buffer + "' is filled incompletely. Did you forget to multiply the size given to '" + function + "()' with 'sizeof(*" + buffer + ")'?\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2416:                    "The array '" + buffer + "' is filled incompletely. The function '" + function + "()' needs the size given in bytes, but an element of the given array is larger than one byte. Did you forget to multiply the size with 'sizeof(*" + buffer + ")'?", CWE131, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2417:}
        -: 2418:
        -: 2419://---------------------------------------------------------------------------
        -: 2420:// Detect NULL being passed to variadic function.
        -: 2421://---------------------------------------------------------------------------
        -: 2422:
function _ZN10CheckOther18checkVarFuncNullUBEv called 0 returned 0% blocks executed 0%
    #####: 2423:void CheckOther::checkVarFuncNullUB()
        -: 2424:{
    #####: 2425:    if (!mSettings->isEnabled(Settings::PORTABILITY))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2426:        return;
        -: 2427:
    #####: 2428:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2429:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2430:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2431:            // Is NULL passed to a function?
    #####: 2432:            if (Token::Match(tok,"[(,] NULL [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 2433:                // Locate function name in this function call.
    #####: 2434:                const Token *ftok = tok;
    #####: 2435:                int argnr = 1;
    #####: 2436:                while (ftok && ftok->str() != "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2437:                    if (ftok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2438:                        ftok = ftok->link();
call    0 never executed
    #####: 2439:                    else if (ftok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2440:                        ++argnr;
    #####: 2441:                    ftok = ftok->previous();
call    0 never executed
        -: 2442:                }
    #####: 2443:                ftok = ftok ? ftok->previous() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2444:                if (ftok && ftok->isName()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 2445:                    // If this is a variadic function then report error
    #####: 2446:                    const Function *f = ftok->function();
call    0 never executed
    #####: 2447:                    if (f && f->argCount() <= argnr) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2448:                        const Token *tok2 = f->argDef;
    #####: 2449:                        tok2 = tok2 ? tok2->link() : nullptr; // goto ')'
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2450:                        if (tok2 && Token::simpleMatch(tok2->tokAt(-1), "..."))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2451:                            varFuncNullUBError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2452:                    }
        -: 2453:                }
        -: 2454:            }
        -: 2455:        }
        -: 2456:    }
        -: 2457:}
        -: 2458:
function _ZN10CheckOther18varFuncNullUBErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2459:void CheckOther::varFuncNullUBError(const Token *tok)
        -: 2460:{
    #####: 2461:    reportError(tok,
call    0 never executed
        -: 2462:                Severity::portability,
        -: 2463:                "varFuncNullUB",
        -: 2464:                "Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\n"
        -: 2465:                "Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\n"
        -: 2466:                "The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\n"
        -: 2467:                "The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\n"
        -: 2468:                "In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\n"
        -: 2469:                "To reproduce you might be able to use this little code example on 64bit platforms. If the output includes \"ERROR\", the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the \"ERROR\" output go away.\n"
        -: 2470:                "#include <stdarg.h>\n"
        -: 2471:                "#include <stdio.h>\n"
        -: 2472:                "\n"
        -: 2473:                "void f(char *s, ...) {\n"
        -: 2474:                "    va_list ap;\n"
        -: 2475:                "    va_start(ap,s);\n"
        -: 2476:                "    for (;;) {\n"
        -: 2477:                "        char *p = va_arg(ap,char*);\n"
        -: 2478:                "        printf(\"%018p, %s\\n\", p, (long)p & 255 ? p : \"\");\n"
        -: 2479:                "        if(!p) break;\n"
        -: 2480:                "    }\n"
        -: 2481:                "    va_end(ap);\n"
        -: 2482:                "}\n"
        -: 2483:                "\n"
        -: 2484:                "void g() {\n"
        -: 2485:                "    char *s2 = \"x\";\n"
        -: 2486:                "    char *s3 = \"ERROR\";\n"
        -: 2487:                "\n"
        -: 2488:                "    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\n"
        -: 2489:                "    f(\"first\", s2, s2, s2, s2, s2, 0, s3, (char*)0);\n"
        -: 2490:                "}\n"
        -: 2491:                "\n"
        -: 2492:                "void h() {\n"
        -: 2493:                "    int i;\n"
        -: 2494:                "    volatile unsigned char a[1000];\n"
        -: 2495:                "    for (i = 0; i<sizeof(a); i++)\n"
        -: 2496:                "        a[i] = -1;\n"
        -: 2497:                "}\n"
        -: 2498:                "\n"
        -: 2499:                "int main() {\n"
        -: 2500:                "    h();\n"
        -: 2501:                "    g();\n"
        -: 2502:                "    return 0;\n"
        -: 2503:                "}", CWE475, false);
    #####: 2504:}
        -: 2505:
function _ZN10CheckOther23checkRedundantPointerOpEv called 0 returned 0% blocks executed 0%
    #####: 2506:void CheckOther::checkRedundantPointerOp()
        -: 2507:{
    #####: 2508:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2509:        return;
        -: 2510:
    #####: 2511:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2512:        if (!tok->isUnaryOp("&") || !tok->astOperand1()->isUnaryOp("*"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
    #####: 2513:            continue;
        -: 2514:
        -: 2515:        // variable
    #####: 2516:        const Token *varTok = tok->astOperand1()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 2517:        if (!varTok || varTok->isExpandedMacro())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2518:            continue;
        -: 2519:
    #####: 2520:        const Variable *var = varTok->variable();
call    0 never executed
    #####: 2521:        if (!var || !var->isPointer())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2522:            continue;
        -: 2523:
    #####: 2524:        redundantPointerOpError(tok, var->name(), false);
call    0 never executed
call    1 never executed
        -: 2525:    }
        -: 2526:}
        -: 2527:
function _ZN10CheckOther23redundantPointerOpErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 2528:void CheckOther::redundantPointerOpError(const Token* tok, const std::string &varname, bool inconclusive)
        -: 2529:{
    #####: 2530:    reportError(tok, Severity::style, "redundantPointerOp",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2531:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 2532:                "Redundant pointer operation on '$symbol' - it's already a pointer.", CWE398, inconclusive);
    #####: 2533:}
        -: 2534:
function _ZN10CheckOther25checkInterlockedDecrementEv called 0 returned 0% blocks executed 0%
    #####: 2535:void CheckOther::checkInterlockedDecrement()
        -: 2536:{
    #####: 2537:    if (!mSettings->isWindowsPlatform()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2538:        return;
        -: 2539:    }
        -: 2540:
    #####: 2541:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2542:        if (tok->isName() && Token::Match(tok, "InterlockedDecrement ( & %name% ) ; if ( %name%|!|0")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2543:            const Token* interlockedVarTok = tok->tokAt(3);
call    0 never executed
    #####: 2544:            const Token* checkStartTok =  interlockedVarTok->tokAt(5);
call    0 never executed
    #####: 2545:            if ((Token::Match(checkStartTok, "0 %comp% %name% )") && checkStartTok->strAt(2) == interlockedVarTok->str()) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2546:                (Token::Match(checkStartTok, "! %name% )") && checkStartTok->strAt(1) == interlockedVarTok->str()) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2547:                (Token::Match(checkStartTok, "%name% )") && checkStartTok->str() == interlockedVarTok->str()) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2548:                (Token::Match(checkStartTok, "%name% %comp% 0 )") && checkStartTok->str() == interlockedVarTok->str())) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2549:                raceAfterInterlockedDecrementError(checkStartTok);
call    0 never executed
        -: 2550:            }
    #####: 2551:        } else if (Token::Match(tok, "if ( ::| InterlockedDecrement ( & %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2552:            const Token* condEnd = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 2553:            const Token* funcTok = tok->tokAt(2);
call    0 never executed
    #####: 2554:            const Token* firstAccessTok = funcTok->str() == "::" ? funcTok->tokAt(4) : funcTok->tokAt(3);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2555:            if (condEnd && condEnd->next() && condEnd->next()->link()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2556:                const Token* ifEndTok = condEnd->next()->link();
call    0 never executed
call    1 never executed
    #####: 2557:                if (Token::Match(ifEndTok, "} return %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2558:                    const Token* secondAccessTok = ifEndTok->tokAt(2);
call    0 never executed
    #####: 2559:                    if (secondAccessTok->str() == firstAccessTok->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2560:                        raceAfterInterlockedDecrementError(secondAccessTok);
call    0 never executed
        -: 2561:                    }
    #####: 2562:                } else if (Token::Match(ifEndTok, "} else { return %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2563:                    const Token* secondAccessTok = ifEndTok->tokAt(4);
call    0 never executed
    #####: 2564:                    if (secondAccessTok->str() == firstAccessTok->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2565:                        raceAfterInterlockedDecrementError(secondAccessTok);
call    0 never executed
        -: 2566:                    }
        -: 2567:                }
        -: 2568:            }
        -: 2569:        }
        -: 2570:    }
        -: 2571:}
        -: 2572:
function _ZN10CheckOther34raceAfterInterlockedDecrementErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2573:void CheckOther::raceAfterInterlockedDecrementError(const Token* tok)
        -: 2574:{
    #####: 2575:    reportError(tok, Severity::error, "raceAfterInterlockedDecrement",
call    0 never executed
        -: 2576:                "Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.", CWE362, false);
    #####: 2577:}
        -: 2578:
function _ZN10CheckOther16checkUnusedLabelEv called 0 returned 0% blocks executed 0%
    #####: 2579:void CheckOther::checkUnusedLabel()
        -: 2580:{
    #####: 2581:    if (!mSettings->isEnabled(Settings::STYLE) && !mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2582:        return;
        -: 2583:
    #####: 2584:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2585:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2586:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2587:            if (!tok->scope()->isExecutable())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2588:                tok = tok->scope()->bodyEnd;
call    0 never executed
        -: 2589:
    #####: 2590:            if (Token::Match(tok, "{|}|; %name% :") && tok->strAt(1) != "default") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2591:                if (!Token::findsimplematch(scope->bodyStart->next(), ("goto " + tok->strAt(1)).c_str(), scope->bodyEnd->previous()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
    #####: 2592:                    unusedLabelError(tok->next(), tok->next()->scope()->type == Scope::eSwitch);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2593:            }
        -: 2594:        }
        -: 2595:    }
        -: 2596:}
        -: 2597:
function _ZN10CheckOther16unusedLabelErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####: 2598:void CheckOther::unusedLabelError(const Token* tok, bool inSwitch)
        -: 2599:{
    #####: 2600:    if (inSwitch) {
branch  0 never executed
branch  1 never executed
    #####: 2601:        if (!tok || mSettings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2602:            reportError(tok, Severity::warning, "unusedLabelSwitch",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2603:                        "$symbol:" + (tok ? tok->str() : emptyString) + "\n"
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2604:                        "Label '$symbol' is not used. Should this be a 'case' of the enclosing switch()?", CWE398, false);
        -: 2605:    } else {
    #####: 2606:        if (!tok || mSettings->isEnabled(Settings::STYLE))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2607:            reportError(tok, Severity::style, "unusedLabel",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2608:                        "$symbol:" + (tok ? tok->str() : emptyString) + "\n"
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2609:                        "Label '$symbol' is not used.", CWE398, false);
        -: 2610:    }
    #####: 2611:}
        -: 2612:
        -: 2613:
function _ZN10CheckOther20checkEvaluationOrderEv called 0 returned 0% blocks executed 0%
    #####: 2614:void CheckOther::checkEvaluationOrder()
        -: 2615:{
        -: 2616:    // This checker is not written according to C++11 sequencing rules
    #####: 2617:    if (mTokenizer->isCPP() && mSettings->standards.cpp >= Standards::CPP11)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2618:        return;
        -: 2619:
    #####: 2620:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2621:    for (const Scope * functionScope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2622:        for (const Token* tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2623:            if (!Token::Match(tok, "++|--") && !tok->isAssignmentOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2624:                continue;
    #####: 2625:            if (!tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2626:                continue;
    #####: 2627:            for (const Token *tok2 = tok;; tok2 = tok2->astParent()) {
call    0 never executed
        -: 2628:                // If ast parent is a sequence point then break
    #####: 2629:                const Token * const parent = tok2->astParent();
call    0 never executed
    #####: 2630:                if (!parent)
branch  0 never executed
branch  1 never executed
    #####: 2631:                    break;
    #####: 2632:                if (Token::Match(parent, "%oror%|&&|?|:|;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2633:                    break;
    #####: 2634:                if (parent->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2635:                    const Token *par = parent;
    #####: 2636:                    while (Token::simpleMatch(par,","))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2637:                        par = par->astParent();
call    0 never executed
        -: 2638:                    // not function or in a while clause => break
    #####: 2639:                    if (!(par && par->str() == "(" && par->astOperand2() && par->strAt(-1) != "while"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 2640:                        break;
        -: 2641:                    // control flow (if|while|etc) => break
    #####: 2642:                    if (Token::simpleMatch(par->link(),") {"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2643:                        break;
        -: 2644:                    // sequence point in function argument: dostuff((1,2),3) => break
    #####: 2645:                    par = par->next();
call    0 never executed
    #####: 2646:                    while (par && (par->previous() != parent))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2647:                        par = par->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2648:                    if (!par)
branch  0 never executed
branch  1 never executed
    #####: 2649:                        break;
        -: 2650:                }
    #####: 2651:                if (parent->str() == "(" && parent->astOperand2())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2652:                    break;
        -: 2653:
        -: 2654:                // self assignment..
    #####: 2655:                if (tok2 == tok &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2656:                    tok->str() == "=" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2657:                    parent->str() == "=" &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2658:                    isSameExpression(mTokenizer->isCPP(), false, tok->astOperand1(), parent->astOperand1(), mSettings->library, true, false)) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2659:                    if (mSettings->isEnabled(Settings::WARNING) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2660:                        isSameExpression(mTokenizer->isCPP(), true, tok->astOperand1(), parent->astOperand1(), mSettings->library, true, false))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2661:                        selfAssignmentError(parent, tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2662:                    break;
        -: 2663:                }
        -: 2664:
        -: 2665:                // Is expression used?
    #####: 2666:                bool foundError = false;
    #####: 2667:                visitAstNodes((parent->astOperand1() != tok2) ? parent->astOperand1() : parent->astOperand2(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
function _ZZN10CheckOther20checkEvaluationOrderEvENKUlPK5TokenE_clES2_ called 0 returned 0% blocks executed 0%
    #####: 2668:                [&](const Token *tok3) {
    #####: 2669:                    if (tok3->str() == "&" && !tok3->astOperand2())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2670:                        return ChildrenToVisit::none; // don't handle address-of for now
    #####: 2671:                    if (tok3->str() == "(" && Token::simpleMatch(tok3->previous(), "sizeof"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2672:                        return ChildrenToVisit::none; // don't care about sizeof usage
    #####: 2673:                    if (isSameExpression(mTokenizer->isCPP(), false, tok->astOperand1(), tok3, mSettings->library, true, false))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2674:                        foundError = true;
    #####: 2675:                    return foundError ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 never executed
branch  1 never executed
        -: 2676:                });
        -: 2677:
    #####: 2678:                if (foundError) {
branch  0 never executed
branch  1 never executed
    #####: 2679:                    unknownEvaluationOrder(parent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2680:                    break;
        -: 2681:                }
    #####: 2682:            }
        -: 2683:        }
        -: 2684:    }
        -: 2685:}
        -: 2686:
function _ZN10CheckOther22unknownEvaluationOrderEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2687:void CheckOther::unknownEvaluationOrder(const Token* tok)
        -: 2688:{
    #####: 2689:    reportError(tok, Severity::error, "unknownEvaluationOrder",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2690:                "Expression '" + (tok ? tok->expressionString() : std::string("x = x++;")) + "' depends on order of evaluation of side effects", CWE768, false);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 2691:}
        -: 2692:
function _ZN10CheckOther26checkAccessOfMovedVariableEv called 0 returned 0% blocks executed 0%
    #####: 2693:void CheckOther::checkAccessOfMovedVariable()
        -: 2694:{
    #####: 2695:    if (!mTokenizer->isCPP() || mSettings->standards.cpp < Standards::CPP11 || !mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2696:        return;
    #####: 2697:    CheckUninitVar checkUninitVar(mTokenizer, mSettings, mErrorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2698:    const bool reportInconclusive = mSettings->inconclusive;
    #####: 2699:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2700:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2701:        const Token * scopeStart = scope->bodyStart;
    #####: 2702:        if (scope->function) {
branch  0 never executed
branch  1 never executed
    #####: 2703:            const Token * memberInitializationStart = scope->function->constructorMemberInitialization();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2704:            if (memberInitializationStart)
branch  0 never executed
branch  1 never executed
    #####: 2705:                scopeStart = memberInitializationStart;
        -: 2706:        }
    #####: 2707:        for (const Token* tok = scopeStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2708:            const ValueFlow::Value * movedValue = tok->getMovedValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2709:            if (!movedValue || movedValue->moveKind == ValueFlow::Value::MoveKind::NonMovedVariable)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2710:                continue;
    #####: 2711:            if (movedValue->isInconclusive() && !reportInconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2712:                continue;
        -: 2713:
    #####: 2714:            bool inconclusive = false;
    #####: 2715:            bool accessOfMoved = false;
    #####: 2716:            if (tok->strAt(1) == ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2717:                if (tok->next()->originalName() == "->")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2718:                    accessOfMoved = true;
        -: 2719:                else
    #####: 2720:                    inconclusive = true;
        -: 2721:            } else {
    #####: 2722:                const bool isVariableChanged = isVariableChangedByFunctionCall(tok, 0, mSettings, &inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2723:                accessOfMoved = !isVariableChanged && checkUninitVar.isVariableUsage(tok, false, CheckUninitVar::NO_ALLOC);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2724:                if (inconclusive) {
branch  0 never executed
branch  1 never executed
    #####: 2725:                    accessOfMoved = !isMovedParameterAllowedForInconclusiveFunction(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2726:                    if (accessOfMoved)
branch  0 never executed
branch  1 never executed
    #####: 2727:                        inconclusive = false;
        -: 2728:                }
        -: 2729:            }
    #####: 2730:            if (accessOfMoved || (inconclusive && reportInconclusive))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2731:                accessMovedError(tok, tok->str(), movedValue, inconclusive || movedValue->isInconclusive());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2732:        }
        -: 2733:    }
        -: 2734:}
        -: 2735:
function _ZN10CheckOther46isMovedParameterAllowedForInconclusiveFunctionEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2736:bool CheckOther::isMovedParameterAllowedForInconclusiveFunction(const Token * tok)
        -: 2737:{
    #####: 2738:    if (Token::simpleMatch(tok->tokAt(-4), "std :: move ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2739:        return false;
    #####: 2740:    const Token * tokAtM2 = tok->tokAt(-2);
call    0 never executed
    #####: 2741:    if (Token::simpleMatch(tokAtM2, "> (") && tokAtM2->link()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2742:        const Token * leftAngle = tokAtM2->link();
call    0 never executed
    #####: 2743:        if (Token::simpleMatch(leftAngle->tokAt(-3), "std :: forward <"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2744:            return false;
        -: 2745:    }
    #####: 2746:    return true;
        -: 2747:}
        -: 2748:
function _ZN10CheckOther16accessMovedErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKN9ValueFlow5ValueEb called 0 returned 0% blocks executed 0%
    #####: 2749:void CheckOther::accessMovedError(const Token *tok, const std::string &varname, const ValueFlow::Value *value, bool inconclusive)
        -: 2750:{
    #####: 2751:    if (!tok) {
branch  0 never executed
branch  1 never executed
    #####: 2752:        reportError(tok, Severity::warning, "accessMoved", "Access of moved variable 'v'.", CWE672, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2753:        reportError(tok, Severity::warning, "accessForwarded", "Access of forwarded variable 'v'.", CWE672, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2754:        return;
call    0 never executed
        -: 2755:    }
        -: 2756:
    #####: 2757:    const char * errorId = nullptr;
    #####: 2758:    std::string kindString;
call    0 never executed
call    1 never executed
    #####: 2759:    switch (value->moveKind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2760:    case ValueFlow::Value::MoveKind::MovedVariable:
    #####: 2761:        errorId = "accessMoved";
    #####: 2762:        kindString = "moved";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2763:        break;
    #####: 2764:    case ValueFlow::Value::MoveKind::ForwardedVariable:
    #####: 2765:        errorId = "accessForwarded";
    #####: 2766:        kindString = "forwarded";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2767:        break;
    #####: 2768:    default:
    #####: 2769:        return;
        -: 2770:    }
    #####: 2771:    const std::string errmsg("$symbol:" + varname + "\nAccess of " + kindString + " variable '$symbol'.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 2772:    const ErrorPath errorPath = getErrorPath(tok, value, errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2773:    reportError(errorPath, Severity::warning, errorId, errmsg, CWE672, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2774:}
        -: 2775:
        -: 2776:
        -: 2777:
function _ZN10CheckOther26checkFuncArgNamesDifferentEv called 0 returned 0% blocks executed 0%
    #####: 2778:void CheckOther::checkFuncArgNamesDifferent()
        -: 2779:{
    #####: 2780:    const bool style = mSettings->isEnabled(Settings::STYLE);
call    0 never executed
    #####: 2781:    const bool inconclusive = mSettings->inconclusive;
    #####: 2782:    const bool warning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
        -: 2783:
    #####: 2784:    if (!(warning || (style && inconclusive)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2785:        return;
        -: 2786:
    #####: 2787:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 2788:    // check every function
    #####: 2789:    for (const Scope *scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2790:        const Function * function = scope->function;
        -: 2791:        // only check functions with arguments
    #####: 2792:        if (!function || function->argCount() == 0)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2793:            continue;
        -: 2794:
        -: 2795:        // only check functions with separate declarations and definitions
    #####: 2796:        if (function->argDef == function->arg)
branch  0 never executed
branch  1 never executed
    #####: 2797:            continue;
        -: 2798:
        -: 2799:        // get the function argument name tokens
    #####: 2800:        std::vector<const Token *>  declarations(function->argCount());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2801:        std::vector<const Token *>  definitions(function->argCount());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 2802:        const Token * decl = function->argDef->next();
call    0 never executed
    #####: 2803:        for (int j = 0; j < function->argCount(); ++j) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2804:            declarations[j] = nullptr;
call    0 never executed
    #####: 2805:            definitions[j] = nullptr;
call    0 never executed
        -: 2806:            // get the definition
    #####: 2807:            const Variable * variable = function->getArgumentVar(j);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2808:            if (variable) {
branch  0 never executed
branch  1 never executed
    #####: 2809:                definitions[j] = variable->nameToken();
call    0 never executed
call    1 never executed
        -: 2810:            }
        -: 2811:            // get the declaration (search for first token with varId)
    #####: 2812:            while (decl && !Token::Match(decl, ",|)|;")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 2813:                // skip everything after the assignment because
        -: 2814:                // it could also have a varId or be the first
        -: 2815:                // token with a varId if there is no name token
    #####: 2816:                if (decl->str() == "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2817:                    decl = decl->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2818:                    break;
        -: 2819:                }
        -: 2820:                // skip over template
    #####: 2821:                if (decl->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2822:                    decl = decl->link();
call    0 never executed
    #####: 2823:                else if (decl->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2824:                    declarations[j] = decl;
call    0 never executed
    #####: 2825:                decl = decl->next();
call    0 never executed
        -: 2826:            }
    #####: 2827:            if (Token::simpleMatch(decl, ","))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2828:                decl = decl->next();
call    0 never executed
        -: 2829:        }
        -: 2830:        // check for different argument order
    #####: 2831:        if (warning) {
branch  0 never executed
branch  1 never executed
    #####: 2832:            bool order_different = false;
    #####: 2833:            for (int j = 0; j < function->argCount(); ++j) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2834:                if (!declarations[j] || !definitions[j] || declarations[j]->str() == definitions[j]->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 2835:                    continue;
        -: 2836:
    #####: 2837:                for (int k = 0; k < function->argCount(); ++k) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2838:                    if (j != k && definitions[k] && declarations[j]->str() == definitions[k]->str()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2839:                        order_different = true;
    #####: 2840:                        break;
        -: 2841:                    }
        -: 2842:                }
        -: 2843:            }
    #####: 2844:            if (order_different) {
branch  0 never executed
branch  1 never executed
    #####: 2845:                funcArgOrderDifferent(function->name(), function->argDef->next(), function->arg->next(), declarations, definitions);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2846:                continue;
        -: 2847:            }
        -: 2848:        }
        -: 2849:        // check for different argument names
    #####: 2850:        if (style && inconclusive) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2851:            for (int j = 0; j < function->argCount(); ++j) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2852:                if (declarations[j] && definitions[j] && declarations[j]->str() != definitions[j]->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 2853:                    funcArgNamesDifferent(function->name(), j, declarations[j], definitions[j]);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2854:            }
        -: 2855:        }
        -: 2856:    }
        -: 2857:}
        -: 2858:
function _ZN10CheckOther21funcArgNamesDifferentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiPK5TokenSA_ called 0 returned 0% blocks executed 0%
    #####: 2859:void CheckOther::funcArgNamesDifferent(const std::string & functionName, nonneg int index,
        -: 2860:                                       const Token* declaration, const Token* definition)
        -: 2861:{
    #####: 2862:    std::list<const Token *> tokens = { declaration,definition };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2863:    reportError(tokens, Severity::style, "funcArgNamesDifferent",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2864:                "$symbol:" + functionName + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2865:                "Function '$symbol' argument " + MathLib::toString(index + 1) + " names different: declaration '" +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 2866:                (declaration ? declaration->str() : std::string("A")) + "' definition '" +
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
    #####: 2867:                (definition ? definition->str() : std::string("B")) + "'.", CWE628, true);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####: 2868:}
call    0 never executed
        -: 2869:
function _ZN10CheckOther21funcArgOrderDifferentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK5TokenSA_RKNSt7__debug6vectorISA_SaISA_EEESG_ called 0 returned 0% blocks executed 0%
    #####: 2870:void CheckOther::funcArgOrderDifferent(const std::string & functionName,
        -: 2871:                                       const Token* declaration, const Token* definition,
        -: 2872:                                       const std::vector<const Token *> & declarations,
        -: 2873:                                       const std::vector<const Token *> & definitions)
        -: 2874:{
        -: 2875:    std::list<const Token *> tokens = {
    #####: 2876:        declarations.size() ? declarations[0] ? declarations[0] : declaration : nullptr,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 2877:        definitions.size() ? definitions[0] ? definitions[0] : definition : nullptr
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 2878:    };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2879:    std::string msg = "$symbol:" + functionName + "\nFunction '$symbol' argument order different: declaration '";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2880:    for (int i = 0; i < declarations.size(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2881:        if (i != 0)
branch  0 never executed
branch  1 never executed
    #####: 2882:            msg += ", ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2883:        if (declarations[i])
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2884:            msg += declarations[i]->str();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2885:    }
    #####: 2886:    msg += "' definition '";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2887:    for (int i = 0; i < definitions.size(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2888:        if (i != 0)
branch  0 never executed
branch  1 never executed
    #####: 2889:            msg += ", ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2890:        if (definitions[i])
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2891:            msg += definitions[i]->str();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2892:    }
    #####: 2893:    msg += "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2894:    reportError(tokens, Severity::warning, "funcArgOrderDifferent", msg, CWE683, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2895:}
call    0 never executed
        -: 2896:
function _ZL12findShadowedPK5ScopeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2897:static const Token *findShadowed(const Scope *scope, const std::string &varname, int linenr)
        -: 2898:{
    #####: 2899:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 2900:        return nullptr;
    #####: 2901:    for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2902:        if (scope->isExecutable() && var.nameToken()->linenr() > linenr)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2903:            continue;
    #####: 2904:        if (var.name() == varname)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2905:            return var.nameToken();
call    0 never executed
        -: 2906:    }
    #####: 2907:    for (const Function &f : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2908:        if (f.name() == varname)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2909:            return f.tokenDef;
        -: 2910:    }
    #####: 2911:    if (scope->type == Scope::eLambda)
branch  0 never executed
branch  1 never executed
    #####: 2912:        return nullptr;
    #####: 2913:    return findShadowed(scope->nestedIn, varname, linenr);
call    0 never executed
        -: 2914:}
        -: 2915:
function _ZN10CheckOther20checkShadowVariablesEv called 0 returned 0% blocks executed 0%
    #####: 2916:void CheckOther::checkShadowVariables()
        -: 2917:{
    #####: 2918:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2919:        return;
    #####: 2920:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2921:    for (const Scope & scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2922:        if (!scope.isExecutable() || scope.type == Scope::eLambda)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2923:            continue;
    #####: 2924:        const Scope *functionScope = &scope;
    #####: 2925:        while (functionScope && functionScope->type != Scope::ScopeType::eFunction && functionScope->type != Scope::ScopeType::eLambda)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2926:            functionScope = functionScope->nestedIn;
    #####: 2927:        for (const Variable &var : scope.varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2928:            if (functionScope && functionScope->type == Scope::ScopeType::eFunction && functionScope->function) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2929:                bool shadowArg = false;
    #####: 2930:                for (const Variable &arg : functionScope->function->argumentList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2931:                    if (arg.nameToken() && var.name() == arg.name()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2932:                        shadowError(var.nameToken(), arg.nameToken(), "argument");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2933:                        shadowArg = true;
    #####: 2934:                        break;
        -: 2935:                    }
        -: 2936:                }
    #####: 2937:                if (shadowArg)
branch  0 never executed
branch  1 never executed
    #####: 2938:                    continue;
        -: 2939:            }
        -: 2940:
    #####: 2941:            const Token *shadowed = findShadowed(scope.nestedIn, var.name(), var.nameToken()->linenr());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2942:            if (!shadowed)
branch  0 never executed
branch  1 never executed
    #####: 2943:                continue;
    #####: 2944:            if (scope.type == Scope::eFunction && scope.className == var.name())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2945:                continue;
    #####: 2946:            shadowError(var.nameToken(), shadowed, (shadowed->varId() != 0) ? "variable" : "function");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 2947:        }
        -: 2948:    }
        -: 2949:}
        -: 2950:
function _ZN10CheckOther11shadowErrorEPK5TokenS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2951:void CheckOther::shadowError(const Token *var, const Token *shadowed, std::string type)
        -: 2952:{
    #####: 2953:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2954:    errorPath.push_back(ErrorPathItem(shadowed, "Shadowed declaration"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2955:    errorPath.push_back(ErrorPathItem(var, "Shadow variable"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2956:    const std::string &varname = var ? var->str() : type;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2957:    const std::string Type = char(std::toupper(type[0])) + type.substr(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2958:    const std::string id = "shadow" + Type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2959:    const std::string message = "$symbol:" + varname + "\nLocal variable \'$symbol\' shadows outer " + type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 2960:    reportError(errorPath, Severity::style, id.c_str(), message, CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2961:}
        -: 2962:
function _ZL20isVariableExpressionPK5Token called 0 returned 0% blocks executed 0%
    #####: 2963:static bool isVariableExpression(const Token* tok)
        -: 2964:{
    #####: 2965:    if (Token::Match(tok, "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2966:        return true;
    #####: 2967:    if (Token::simpleMatch(tok, "."))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2968:        return isVariableExpression(tok->astOperand1()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2969:               isVariableExpression(tok->astOperand2());
call    0 never executed
call    1 never executed
    #####: 2970:    return false;
        -: 2971:}
        -: 2972:
function _ZN10CheckOther18checkConstArgumentEv called 0 returned 0% blocks executed 0%
    #####: 2973:void CheckOther::checkConstArgument()
        -: 2974:{
    #####: 2975:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2976:        return;
    #####: 2977:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 2978:    for (const Scope *functionScope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2979:        for (const Token *tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2980:            if (!Token::simpleMatch(tok->astParent(), "("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2981:                continue;
    #####: 2982:            if (!Token::Match(tok->astParent()->previous(), "%name%"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2983:                continue;
    #####: 2984:            if (Token::Match(tok->astParent()->previous(), "if|while|switch|sizeof"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2985:                continue;
    #####: 2986:            if (tok == tok->astParent()->previous())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2987:                continue;
    #####: 2988:            if (!tok->hasKnownIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2989:                continue;
    #####: 2990:            if (Token::Match(tok, "++|--"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2991:                continue;
    #####: 2992:            if (isConstVarExpression(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2993:                continue;
    #####: 2994:            const Token * tok2 = tok;
    #####: 2995:            if (isCPPCast(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2996:                tok2 = tok2->astOperand2();
call    0 never executed
    #####: 2997:            if (isVariableExpression(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2998:                continue;
    #####: 2999:            constArgumentError(tok, tok->astParent()->previous(), &tok->values().front());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3000:        }
        -: 3001:    }
        -: 3002:}
        -: 3003:
function _ZN10CheckOther18constArgumentErrorEPK5TokenS2_PKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 3004:void CheckOther::constArgumentError(const Token *tok, const Token *ftok, const ValueFlow::Value *value)
        -: 3005:{
    #####: 3006:    MathLib::bigint intvalue = value ? value->intvalue : 0;
branch  0 never executed
branch  1 never executed
    #####: 3007:    const std::string expr = tok ? tok->expressionString() : std::string("x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####: 3008:    const std::string fun = ftok ? ftok->str() : std::string("f");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 3009:
    #####: 3010:    const std::string errmsg = "Argument '" + expr + "' to function " + fun + " is always " + std::to_string(intvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    #####: 3011:    const ErrorPath errorPath = getErrorPath(tok, value, errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3012:    reportError(errorPath, Severity::style, "constArgument", errmsg, CWE570, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3013:}
        -: 3014:
function _ZN10CheckOther20checkComparePointersEv called 0 returned 0% blocks executed 0%
    #####: 3015:void CheckOther::checkComparePointers()
        -: 3016:{
    #####: 3017:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 3018:    for (const Scope *functionScope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3019:        for (const Token *tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3020:            if (!Token::Match(tok, "<|>|<=|>=|-"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3021:                continue;
    #####: 3022:            const Token *tok1 = tok->astOperand1();
call    0 never executed
    #####: 3023:            const Token *tok2 = tok->astOperand2();
call    0 never executed
    #####: 3024:            if (!astIsPointer(tok1) || !astIsPointer(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3025:                continue;
    #####: 3026:            ValueFlow::Value v1 = getLifetimeObjValue(tok1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3027:            ValueFlow::Value v2 = getLifetimeObjValue(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 3028:            if (!v1.isLocalLifetimeValue() || !v2.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3029:                continue;
    #####: 3030:            const Variable *var1 = v1.tokvalue->variable();
call    0 never executed
    #####: 3031:            const Variable *var2 = v2.tokvalue->variable();
call    0 never executed
    #####: 3032:            if (!var1 || !var2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3033:                continue;
    #####: 3034:            if (v1.tokvalue->varId() == v2.tokvalue->varId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3035:                continue;
    #####: 3036:            if (var1->isReference() || var2->isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3037:                continue;
    #####: 3038:            if (var1->isRValueReference() || var2->isRValueReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3039:                continue;
    #####: 3040:            comparePointersError(tok, &v1, &v2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3041:        }
        -: 3042:    }
    #####: 3043:}
        -: 3044:
function _ZN10CheckOther20comparePointersErrorEPK5TokenPKN9ValueFlow5ValueES6_ called 0 returned 0% blocks executed 0%
    #####: 3045:void CheckOther::comparePointersError(const Token *tok, const ValueFlow::Value *v1, const ValueFlow::Value *v2)
        -: 3046:{
    #####: 3047:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3048:    std::string verb = "Comparing";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 3049:    if (Token::simpleMatch(tok, "-"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3050:        verb = "Subtracting";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3051:    if (v1) {
branch  0 never executed
branch  1 never executed
    #####: 3052:        errorPath.emplace_back(v1->tokvalue->variable()->nameToken(), "Variable declared here.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3053:        errorPath.insert(errorPath.end(), v1->errorPath.begin(), v1->errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3054:    }
    #####: 3055:    if (v2) {
branch  0 never executed
branch  1 never executed
    #####: 3056:        errorPath.emplace_back(v2->tokvalue->variable()->nameToken(), "Variable declared here.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3057:        errorPath.insert(errorPath.end(), v2->errorPath.begin(), v2->errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3058:    }
    #####: 3059:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3060:    reportError(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3061:        errorPath, Severity::error, "comparePointers", verb + " pointers that point to different objects", CWE570, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
function _GLOBAL__sub_I__ZN10CheckOther25checkCastIntToCharAndBackEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 3062:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
