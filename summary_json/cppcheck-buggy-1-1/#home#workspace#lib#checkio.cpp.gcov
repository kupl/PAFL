        -:    0:Source:/home/workspace/lib/checkio.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkio.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkio.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#include "checkio.h"
        -:   21:
        -:   22:#include "library.h"
        -:   23:#include "mathlib.h"
        -:   24:#include "settings.h"
        -:   25:#include "symboldatabase.h"
        -:   26:#include "token.h"
        -:   27:#include "tokenize.h"
        -:   28:#include "utils.h"
        -:   29:#include "valueflow.h"
        -:   30:
        -:   31:#include <cctype>
        -:   32:#include <cstdlib>
        -:   33:#include <list>
        -:   34:#include <map>
        -:   35:#include <set>
        -:   36:#include <utility>
        -:   37:#include <vector>
        -:   38:
        -:   39://---------------------------------------------------------------------------
        -:   40:
        -:   41:// Register CheckIO..
        -:   42:namespace {
        1:   43:    CheckIO instance;
call    0 returned 100%
call    1 returned 100%
        -:   44:}
        -:   45:
        -:   46:// CVE ID used:
        1:   47:static const CWE CWE119(119U);  // Improper Restriction of Operations within the Bounds of a Memory Buffer
call    0 returned 100%
        1:   48:static const CWE CWE398(398U);  // Indicator of Poor Code Quality
call    0 returned 100%
        1:   49:static const CWE CWE664(664U);  // Improper Control of a Resource Through its Lifetime
call    0 returned 100%
        1:   50:static const CWE CWE685(685U);  // Function Call With Incorrect Number of Arguments
call    0 returned 100%
        1:   51:static const CWE CWE686(686U);  // Function Call With Incorrect Argument Type
call    0 returned 100%
        1:   52:static const CWE CWE687(687U);  // Function Call With Incorrectly Specified Argument Value
call    0 returned 100%
        1:   53:static const CWE CWE704(704U);  // Incorrect Type Conversion or Cast
call    0 returned 100%
        1:   54:static const CWE CWE910(910U);  // Use of Expired File Descriptor
call    0 returned 100%
        -:   55:
        -:   56://---------------------------------------------------------------------------
        -:   57://    std::cout << std::cout;
        -:   58://---------------------------------------------------------------------------
function _ZN7CheckIO21checkCoutCerrMisusageEv called 0 returned 0% blocks executed 0%
    #####:   59:void CheckIO::checkCoutCerrMisusage()
        -:   60:{
    #####:   61:    if (mTokenizer->isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:        return;
        -:   63:
    #####:   64:    const SymbolDatabase * const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:   65:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   66:        for (const Token *tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   67:            if (Token::Match(tok, "std :: cout|cerr !!.") && tok->next()->astParent() && tok->next()->astParent()->astOperand1() == tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:   68:                const Token* tok2 = tok->next();
call    0 never executed
    #####:   69:                while (tok2->astParent() && tok2->astParent()->str() == "<<") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:   70:                    tok2 = tok2->astParent();
call    0 never executed
    #####:   71:                    if (tok2->astOperand2() && Token::Match(tok2->astOperand2()->previous(), "std :: cout|cerr"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   72:                        coutCerrMisusageError(tok, tok2->astOperand2()->strAt(1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:   73:                }
        -:   74:            }
        -:   75:        }
        -:   76:    }
        -:   77:}
        -:   78:
function _ZN7CheckIO21coutCerrMisusageErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   79:void CheckIO::coutCerrMisusageError(const Token* tok, const std::string& streamName)
        -:   80:{
    #####:   81:    reportError(tok, Severity::error, "coutCerrMisusage", "Invalid usage of output stream: '<< std::" + streamName + "'.", CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   82:}
        -:   83:
        -:   84://---------------------------------------------------------------------------
        -:   85:// fflush(stdin) <- fflush only applies to output streams in ANSI C
        -:   86:// fread(); fwrite(); <- consecutive read/write statements require repositioning in between
        -:   87:// fopen("","r"); fwrite(); <- write to read-only file (or vice versa)
        -:   88:// fclose(); fread(); <- Use closed file
        -:   89://---------------------------------------------------------------------------
        -:   90:enum OpenMode { CLOSED, READ_MODE, WRITE_MODE, RW_MODE, UNKNOWN_OM };
function _ZL7getModeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   91:static OpenMode getMode(const std::string& str)
        -:   92:{
    #####:   93:    if (str.find('+', 1) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   94:        return RW_MODE;
    #####:   95:    else if (str.find('w') != std::string::npos || str.find('a') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   96:        return WRITE_MODE;
    #####:   97:    else if (str.find('r') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:        return READ_MODE;
    #####:   99:    return UNKNOWN_OM;
        -:  100:}
        -:  101:
        -:  102:struct Filepointer {
        -:  103:    OpenMode mode;
        -:  104:    nonneg int mode_indent;
        -:  105:    enum Operation {NONE, UNIMPORTANT, READ, WRITE, POSITIONING, OPEN, CLOSE, UNKNOWN_OP} lastOperation;
        -:  106:    nonneg int op_indent;
        -:  107:    enum AppendMode { UNKNOWN_AM, APPEND, APPEND_EX };
        -:  108:    AppendMode append_mode;
function _ZN11FilepointerC2E8OpenMode called 0 returned 0% blocks executed 0%
    #####:  109:    explicit Filepointer(OpenMode mode_ = UNKNOWN_OM)
    #####:  110:        : mode(mode_), mode_indent(0), lastOperation(NONE), op_indent(0), append_mode(UNKNOWN_AM) {
    #####:  111:    }
        -:  112:};
        -:  113:
        -:  114:namespace {
        1:  115:    const std::set<std::string> whitelist = { "clearerr", "feof", "ferror", "fgetpos", "ftell", "setbuf", "setvbuf", "ungetc", "ungetwc" };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
branch 41 taken 90% (fallthrough)
branch 42 taken 10%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
call   50 returned 100%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
        -:  116:}
        -:  117:
function _ZN7CheckIO14checkFileUsageEv called 0 returned 0% blocks executed 0%
    #####:  118:void CheckIO::checkFileUsage()
        -:  119:{
    #####:  120:    const bool windows = mSettings->isWindowsPlatform();
call    0 never executed
    #####:  121:    const bool printPortability = mSettings->isEnabled(Settings::PORTABILITY);
call    0 never executed
    #####:  122:    const bool printWarnings = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
        -:  123:
    #####:  124:    std::map<int, Filepointer> filepointers;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  125:
    #####:  126:    const SymbolDatabase* symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  127:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  128:        if (!var || !var->declarationId() || var->isArray() || !Token::simpleMatch(var->typeStartToken(), "FILE *"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  129:            continue;
        -:  130:
    #####:  131:        if (var->isLocal()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  132:            if (var->nameToken()->strAt(1) == "(") // initialize by calling "ctor"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  133:                filepointers.insert(std::make_pair(var->declarationId(), Filepointer(UNKNOWN_OM)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  134:            else
    #####:  135:                filepointers.insert(std::make_pair(var->declarationId(), Filepointer(CLOSED)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  136:        } else {
    #####:  137:            filepointers.insert(std::make_pair(var->declarationId(), Filepointer(UNKNOWN_OM)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  138:            // TODO: If all fopen calls we find open the file in the same type, we can set Filepointer::mode
        -:  139:        }
        -:  140:    }
        -:  141:
    #####:  142:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  143:        int indent = 0;
    #####:  144:        for (const Token *tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  145:            if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  146:                indent++;
    #####:  147:            else if (tok->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  148:                indent--;
    #####:  149:                for (std::map<int, Filepointer>::iterator i = filepointers.begin(); i != filepointers.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  150:                    if (indent < i->second.mode_indent) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  151:                        i->second.mode_indent = 0;
call    0 never executed
    #####:  152:                        i->second.mode = UNKNOWN_OM;
call    0 never executed
        -:  153:                    }
    #####:  154:                    if (indent < i->second.op_indent) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  155:                        i->second.op_indent = 0;
call    0 never executed
    #####:  156:                        i->second.lastOperation = Filepointer::UNKNOWN_OP;
call    0 never executed
        -:  157:                    }
        -:  158:                }
    #####:  159:            } else if (tok->str() == "return" || tok->str() == "continue" || tok->str() == "break" || mSettings->library.isnoreturn(tok)) { // Reset upon return, continue or break
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  160:                for (std::map<int, Filepointer>::iterator i = filepointers.begin(); i != filepointers.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  161:                    i->second.mode_indent = 0;
call    0 never executed
    #####:  162:                    i->second.mode = UNKNOWN_OM;
call    0 never executed
    #####:  163:                    i->second.op_indent = 0;
call    0 never executed
    #####:  164:                    i->second.lastOperation = Filepointer::UNKNOWN_OP;
call    0 never executed
        -:  165:                }
    #####:  166:            } else if (Token::Match(tok, "%var% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  167:                       (tok->strAt(2) != "fopen" && tok->strAt(2) != "freopen" && tok->strAt(2) != "tmpfile" &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  168:                        (windows ? (tok->str() != "_wfopen" && tok->str() != "_wfreopen") : true))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  169:                std::map<int, Filepointer>::iterator i = filepointers.find(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  170:                if (i != filepointers.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  171:                    i->second.mode = UNKNOWN_OM;
call    0 never executed
    #####:  172:                    i->second.lastOperation = Filepointer::UNKNOWN_OP;
call    0 never executed
        -:  173:                }
    #####:  174:            } else if (Token::Match(tok, "%name% (") && tok->previous() && (!tok->previous()->isName() || Token::Match(tok->previous(), "return|throw"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####:  175:                std::string mode;
call    0 never executed
call    1 never executed
    #####:  176:                const Token* fileTok = nullptr;
    #####:  177:                Filepointer::Operation operation = Filepointer::NONE;
        -:  178:
    #####:  179:                if ((tok->str() == "fopen" || tok->str() == "freopen" || tok->str() == "tmpfile" ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  180:                     (windows && (tok->str() == "_wfopen" || tok->str() == "_wfreopen"))) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  181:                    tok->strAt(-1) == "=") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  182:                    if (tok->str() != "tmpfile") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  183:                        const Token* modeTok = tok->tokAt(2)->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  184:                        if (modeTok && modeTok->tokType() == Token::eString)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  185:                            mode = modeTok->strValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  186:                    } else
    #####:  187:                        mode = "wb+";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  188:                    fileTok = tok->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  189:                    operation = Filepointer::OPEN;
    #####:  190:                } else if (windows && Token::Match(tok, "fopen_s|freopen_s|_wfopen_s|_wfreopen_s ( & %name%")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  191:                    const Token* modeTok = tok->tokAt(2)->nextArgument()->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  192:                    if (modeTok && modeTok->tokType() == Token::eString)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  193:                        mode = modeTok->strValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  194:                    fileTok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:                    operation = Filepointer::OPEN;
    #####:  196:                } else if ((tok->str() == "rewind" || tok->str() == "fseek" || tok->str() == "fsetpos" || tok->str() == "fflush") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  197:                           (windows && tok->str() == "_fseeki64")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  198:                    fileTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:                    if (printPortability && fileTok && tok->str() == "fflush") {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  200:                        if (fileTok->str() == "stdin")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  201:                            fflushOnInputStreamError(tok, fileTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  202:                        else {
    #####:  203:                            const Filepointer& f = filepointers[fileTok->varId()];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  204:                            if (f.mode == READ_MODE)
branch  0 never executed
branch  1 never executed
    #####:  205:                                fflushOnInputStreamError(tok, fileTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  206:                        }
        -:  207:                    }
    #####:  208:                    operation = Filepointer::POSITIONING;
    #####:  209:                } else if (tok->str() == "fgetc" || tok->str() == "fgetwc" ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  210:                           tok->str() == "fgets" || tok->str() == "fgetws" || tok->str() == "fread" ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  211:                           tok->str() == "fscanf" || tok->str() == "fwscanf" || tok->str() == "getc" ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  212:                           (windows && (tok->str() == "fscanf_s" || tok->str() == "fwscanf_s"))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  213:                    if (tok->str().find("scanf") != std::string::npos)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  214:                        fileTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  215:                    else
    #####:  216:                        fileTok = tok->linkAt(1)->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  217:                    operation = Filepointer::READ;
    #####:  218:                } else if (tok->str() == "fputc" || tok->str() == "fputwc" ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  219:                           tok->str() == "fputs" || tok->str() == "fputws" || tok->str() == "fwrite" ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  220:                           tok->str() == "fprintf" || tok->str() == "fwprintf" || tok->str() == "putcc" ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  221:                           (windows && (tok->str() == "fprintf_s" || tok->str() == "fwprintf_s"))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  222:                    if (tok->str().find("printf") != std::string::npos)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  223:                        fileTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  224:                    else
    #####:  225:                        fileTok = tok->linkAt(1)->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  226:                    operation = Filepointer::WRITE;
    #####:  227:                } else if (tok->str() == "fclose") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  228:                    fileTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  229:                    operation = Filepointer::CLOSE;
    #####:  230:                } else if (whitelist.find(tok->str()) != whitelist.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  231:                    fileTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  232:                    if ((tok->str() == "ungetc" || tok->str() == "ungetwc") && fileTok)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  233:                        fileTok = fileTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:                    operation = Filepointer::UNIMPORTANT;
    #####:  235:                } else if (!Token::Match(tok, "if|for|while|catch|switch") && !mSettings->library.isFunctionConst(tok->str(), true)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  236:                    const Token* const end2 = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:                    if (scope->functionOf && scope->functionOf->isClassOrStruct() && !scope->function->isStatic() && ((tok->strAt(-1) != "::" && tok->strAt(-1) != ".") || tok->strAt(-2) == "this")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  238:                        if (!tok->function() || (tok->function()->nestedIn && tok->function()->nestedIn->isClassOrStruct())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  239:                            for (std::map<int, Filepointer>::iterator i = filepointers.begin(); i != filepointers.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  240:                                const Variable* var = symbolDatabase->getVariableFromVarId(i->first);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  241:                                if (!var || !(var->isLocal() || var->isGlobal() || var->isStatic())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  242:                                    i->second.mode = UNKNOWN_OM;
call    0 never executed
    #####:  243:                                    i->second.mode_indent = 0;
call    0 never executed
    #####:  244:                                    i->second.op_indent = indent;
call    0 never executed
    #####:  245:                                    i->second.lastOperation = Filepointer::UNKNOWN_OP;
call    0 never executed
        -:  246:                                }
        -:  247:                            }
    #####:  248:                            continue;
        -:  249:                        }
        -:  250:                    }
    #####:  251:                    for (const Token* tok2 = tok->tokAt(2); tok2 != end2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  252:                        if (tok2->varId() && filepointers.find(tok2->varId()) != filepointers.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####:  253:                            fileTok = tok2;
    #####:  254:                            operation = Filepointer::UNKNOWN_OP; // Assume that repositioning was last operation and that the file is opened now
    #####:  255:                            break;
        -:  256:                        }
        -:  257:                    }
        -:  258:                }
        -:  259:
    #####:  260:                while (Token::Match(fileTok, "%name% ."))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  261:                    fileTok = fileTok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:
    #####:  263:                if (!fileTok || !fileTok->varId() || fileTok->strAt(1) == "[")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  264:                    continue;
        -:  265:
    #####:  266:                if (filepointers.find(fileTok->varId()) == filepointers.end()) { // function call indicates: Its a File
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  267:                    filepointers.insert(std::make_pair(fileTok->varId(), Filepointer(UNKNOWN_OM)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  268:                }
    #####:  269:                Filepointer& f = filepointers[fileTok->varId()];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  270:
    #####:  271:                switch (operation) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  272:                case Filepointer::OPEN:
    #####:  273:                    f.mode = getMode(mode);
call    0 never executed
    #####:  274:                    if (mode.find('a') != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  275:                        if (f.mode == RW_MODE)
branch  0 never executed
branch  1 never executed
    #####:  276:                            f.append_mode = Filepointer::APPEND_EX;
        -:  277:                        else
    #####:  278:                            f.append_mode = Filepointer::APPEND;
        -:  279:                    } else
    #####:  280:                        f.append_mode = Filepointer::UNKNOWN_AM;
    #####:  281:                    f.mode_indent = indent;
    #####:  282:                    break;
    #####:  283:                case Filepointer::POSITIONING:
    #####:  284:                    if (f.mode == CLOSED)
branch  0 never executed
branch  1 never executed
    #####:  285:                        useClosedFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  286:                    else if (f.append_mode == Filepointer::APPEND && tok->str() != "fflush" && printWarnings)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  287:                        seekOnAppendedFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  288:                    break;
    #####:  289:                case Filepointer::READ:
    #####:  290:                    if (f.mode == CLOSED)
branch  0 never executed
branch  1 never executed
    #####:  291:                        useClosedFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  292:                    else if (f.mode == WRITE_MODE)
branch  0 never executed
branch  1 never executed
    #####:  293:                        readWriteOnlyFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  294:                    else if (f.lastOperation == Filepointer::WRITE)
branch  0 never executed
branch  1 never executed
    #####:  295:                        ioWithoutPositioningError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  296:                    break;
    #####:  297:                case Filepointer::WRITE:
    #####:  298:                    if (f.mode == CLOSED)
branch  0 never executed
branch  1 never executed
    #####:  299:                        useClosedFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  300:                    else if (f.mode == READ_MODE)
branch  0 never executed
branch  1 never executed
    #####:  301:                        writeReadOnlyFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  302:                    else if (f.lastOperation == Filepointer::READ)
branch  0 never executed
branch  1 never executed
    #####:  303:                        ioWithoutPositioningError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  304:                    break;
    #####:  305:                case Filepointer::CLOSE:
    #####:  306:                    if (f.mode == CLOSED)
branch  0 never executed
branch  1 never executed
    #####:  307:                        useClosedFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  308:                    else
    #####:  309:                        f.mode = CLOSED;
    #####:  310:                    f.mode_indent = indent;
    #####:  311:                    break;
    #####:  312:                case Filepointer::UNIMPORTANT:
    #####:  313:                    if (f.mode == CLOSED)
branch  0 never executed
branch  1 never executed
    #####:  314:                        useClosedFileError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  315:                    break;
    #####:  316:                case Filepointer::UNKNOWN_OP:
    #####:  317:                    f.mode = UNKNOWN_OM;
    #####:  318:                    f.mode_indent = 0;
    #####:  319:                    break;
    #####:  320:                default:
    #####:  321:                    break;
        -:  322:                }
    #####:  323:                if (operation != Filepointer::NONE && operation != Filepointer::UNIMPORTANT) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  324:                    f.op_indent = indent;
    #####:  325:                    f.lastOperation = operation;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  326:                }
        -:  327:            }
        -:  328:        }
    #####:  329:        for (std::map<int, Filepointer>::iterator i = filepointers.begin(); i != filepointers.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  330:            i->second.op_indent = 0;
call    0 never executed
    #####:  331:            i->second.mode = UNKNOWN_OM;
call    0 never executed
    #####:  332:            i->second.lastOperation = Filepointer::UNKNOWN_OP;
call    0 never executed
        -:  333:        }
        -:  334:    }
    #####:  335:}
        -:  336:
function _ZN7CheckIO24fflushOnInputStreamErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  337:void CheckIO::fflushOnInputStreamError(const Token *tok, const std::string &varname)
        -:  338:{
    #####:  339:    reportError(tok, Severity::portability,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  340:                "fflushOnInputStream", "fflush() called on input stream '" + varname + "' may result in undefined behaviour on non-linux systems.", CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  341:}
        -:  342:
function _ZN7CheckIO25ioWithoutPositioningErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  343:void CheckIO::ioWithoutPositioningError(const Token *tok)
        -:  344:{
    #####:  345:    reportError(tok, Severity::error,
call    0 never executed
        -:  346:                "IOWithoutPositioning", "Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.", CWE664, false);
    #####:  347:}
        -:  348:
function _ZN7CheckIO22readWriteOnlyFileErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  349:void CheckIO::readWriteOnlyFileError(const Token *tok)
        -:  350:{
    #####:  351:    reportError(tok, Severity::error,
call    0 never executed
        -:  352:                "readWriteOnlyFile", "Read operation on a file that was opened only for writing.", CWE664, false);
    #####:  353:}
        -:  354:
function _ZN7CheckIO22writeReadOnlyFileErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  355:void CheckIO::writeReadOnlyFileError(const Token *tok)
        -:  356:{
    #####:  357:    reportError(tok, Severity::error,
call    0 never executed
        -:  358:                "writeReadOnlyFile", "Write operation on a file that was opened only for reading.", CWE664, false);
    #####:  359:}
        -:  360:
function _ZN7CheckIO18useClosedFileErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  361:void CheckIO::useClosedFileError(const Token *tok)
        -:  362:{
    #####:  363:    reportError(tok, Severity::error,
call    0 never executed
        -:  364:                "useClosedFile", "Used file that is not opened.", CWE910, false);
    #####:  365:}
        -:  366:
function _ZN7CheckIO23seekOnAppendedFileErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  367:void CheckIO::seekOnAppendedFileError(const Token *tok)
        -:  368:{
    #####:  369:    reportError(tok, Severity::warning,
call    0 never executed
        -:  370:                "seekOnAppendedFile", "Repositioning operation performed on a file opened in append mode has no effect.", CWE398, false);
    #####:  371:}
        -:  372:
        -:  373:
        -:  374://---------------------------------------------------------------------------
        -:  375:// scanf without field width limits can crash with huge input data
        -:  376://---------------------------------------------------------------------------
function _ZN7CheckIO12invalidScanfEv called 0 returned 0% blocks executed 0%
    #####:  377:void CheckIO::invalidScanf()
        -:  378:{
    #####:  379:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  380:        return;
        -:  381:
    #####:  382:    const SymbolDatabase * const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  383:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  384:        for (const Token *tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  385:            const Token *formatToken = nullptr;
    #####:  386:            if (Token::Match(tok, "scanf|vscanf ( %str% ,"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  387:                formatToken = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  388:            else if (Token::Match(tok, "sscanf|vsscanf|fscanf|vfscanf (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  389:                const Token* nextArg = tok->tokAt(2)->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  390:                if (nextArg && nextArg->tokType() == Token::eString)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  391:                    formatToken = nextArg;
        -:  392:                else
    #####:  393:                    continue;
        -:  394:            } else
    #####:  395:                continue;
        -:  396:
    #####:  397:            bool format = false;
        -:  398:
        -:  399:            // scan the string backwards, so we do not need to keep states
    #####:  400:            const std::string &formatstr(formatToken->str());
call    0 never executed
    #####:  401:            for (std::size_t i = 1; i < formatstr.length(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  402:                if (formatstr[i] == '%')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  403:                    format = !format;
        -:  404:
    #####:  405:                else if (!format)
branch  0 never executed
branch  1 never executed
    #####:  406:                    continue;
        -:  407:
    #####:  408:                else if (std::isdigit(formatstr[i]) || formatstr[i] == '*') {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  409:                    format = false;
        -:  410:                }
        -:  411:
    #####:  412:                else if (std::isalpha((unsigned char)formatstr[i]) || formatstr[i] == '[') {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  413:                    if (formatstr[i] == 's' || formatstr[i] == '[' || formatstr[i] == 'S' || (formatstr[i] == 'l' && formatstr[i+1] == 's'))  // #3490 - field width limits are only necessary for string input
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  414:                        invalidScanfError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  415:                    format = false;
        -:  416:                }
        -:  417:            }
        -:  418:        }
        -:  419:    }
        -:  420:}
        -:  421:
function _ZN7CheckIO17invalidScanfErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  422:void CheckIO::invalidScanfError(const Token *tok)
        -:  423:{
    #####:  424:    const std::string fname = (tok ? tok->str() : std::string("scanf"));
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####:  425:    reportError(tok, Severity::warning,
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  426:                "invalidscanf", fname + "() without field width limits can crash with huge input data.\n" +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  427:                fname + "() without field width limits can crash with huge input data. Add a field width "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  428:                "specifier to fix this problem.\n"
        -:  429:                "\n"
        -:  430:                "Sample program that can crash:\n"
        -:  431:                "\n"
        -:  432:                "#include <stdio.h>\n"
        -:  433:                "int main()\n"
        -:  434:                "{\n"
        -:  435:                "    char c[5];\n"
        -:  436:                "    scanf(\"%s\", c);\n"
        -:  437:                "    return 0;\n"
        -:  438:                "}\n"
        -:  439:                "\n"
        -:  440:                "Typing in 5 or more characters may make the program crash. The correct usage "
        -:  441:                "here is 'scanf(\"%4s\", c);', as the maximum field width does not include the "
        -:  442:                "terminating null byte.\n"
        -:  443:                "Source: http://linux.die.net/man/3/scanf\n"
        -:  444:                "Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c",
        -:  445:                CWE119, false);
    #####:  446:}
        -:  447:
        -:  448://---------------------------------------------------------------------------
        -:  449://    printf("%u", "xyz"); // Wrong argument type
        -:  450://    printf("%u%s", 1); // Too few arguments
        -:  451://    printf("", 1); // Too much arguments
        -:  452://---------------------------------------------------------------------------
        -:  453:
function _ZL10findFormatiPK5TokenPS1_S2_ called 0 returned 0% blocks executed 0%
    #####:  454:static bool findFormat(nonneg int arg, const Token *firstArg,
        -:  455:                       const Token **formatStringTok, const Token **formatArgTok)
        -:  456:{
    #####:  457:    const Token* argTok = firstArg;
        -:  458:
    #####:  459:    for (int i = 0; i < arg && argTok; ++i)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  460:        argTok = argTok->nextArgument();
call    0 never executed
        -:  461:
    #####:  462:    if (Token::Match(argTok, "%str% [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  463:        *formatArgTok = argTok->nextArgument();
call    0 never executed
    #####:  464:        *formatStringTok = argTok;
    #####:  465:        return true;
    #####:  466:    } else if (Token::Match(argTok, "%var% [,)]") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  467:               argTok->variable() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  468:               Token::Match(argTok->variable()->typeStartToken(), "char|wchar_t") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  469:               (argTok->variable()->isPointer() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  470:                (argTok->variable()->dimensions().size() == 1 &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  471:                 argTok->variable()->dimensionKnown(0) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  472:                 argTok->variable()->dimension(0) != 0))) {
call    0 never executed
call    1 never executed
    #####:  473:        *formatArgTok = argTok->nextArgument();
call    0 never executed
    #####:  474:        if (!argTok->values().empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  475:            std::list<ValueFlow::Value>::const_iterator value = std::find_if(
    #####:  476:                        argTok->values().begin(), argTok->values().end(), std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  477:            if (value != argTok->values().end() && value->isTokValue() && value->tokvalue &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    #####:  478:                value->tokvalue->tokType() == Token::eString) {
call    0 never executed
call    1 never executed
    #####:  479:                *formatStringTok = value->tokvalue;
call    0 never executed
        -:  480:            }
        -:  481:        }
    #####:  482:        return true;
        -:  483:    }
    #####:  484:    return false;
call    0 never executed
        -:  485:}
        -:  486:
        -:  487:// Utility function returning whether iToTest equals iTypename or iOptionalPrefix+iTypename
function _ZL10typesMatchRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_ called 0 returned 0% blocks executed 0%
    #####:  488:static inline bool typesMatch(const std::string& iToTest, const std::string& iTypename, const std::string& iOptionalPrefix = "std::")
        -:  489:{
    #####:  490:    return (iToTest == iTypename) || (iToTest == iOptionalPrefix + iTypename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
        -:  491:}
        -:  492:
function _ZN7CheckIO30checkWrongPrintfScanfArgumentsEv called 0 returned 0% blocks executed 0%
    #####:  493:void CheckIO::checkWrongPrintfScanfArguments()
        -:  494:{
    #####:  495:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  496:    const bool isWindows = mSettings->isWindowsPlatform();
call    0 never executed
        -:  497:
    #####:  498:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  499:        for (const Token *tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  500:            if (!tok->isName()) continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  501:
    #####:  502:            const Token* argListTok = nullptr; // Points to first va_list argument
    #####:  503:            const Token* formatStringTok = nullptr; // Points to format string token
        -:  504:
    #####:  505:            bool scan = false;
    #####:  506:            bool scanf_s = false;
    #####:  507:            int formatStringArgNo = -1;
        -:  508:
    #####:  509:            if (tok->strAt(1) == "(" && mSettings->library.formatstr_function(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  510:                formatStringArgNo = mSettings->library.formatstr_argno(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  511:                scan = mSettings->library.formatstr_scan(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  512:                scanf_s = mSettings->library.formatstr_secure(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  513:            }
        -:  514:
    #####:  515:            if (formatStringArgNo >= 0) {
branch  0 never executed
branch  1 never executed
        -:  516:                // formatstring found in library. Find format string and first argument belonging to format string.
    #####:  517:                if (!findFormat(formatStringArgNo, tok->tokAt(2), &formatStringTok, &argListTok))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  518:                    continue;
    #####:  519:            } else if (Token::simpleMatch(tok, "swprintf (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  520:                if (Token::Match(tok->tokAt(2)->nextArgument(), "%str%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  521:                    // Find third parameter and format string
    #####:  522:                    if (!findFormat(1, tok->tokAt(2), &formatStringTok, &argListTok))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  523:                        continue;
        -:  524:                } else {
        -:  525:                    // Find fourth parameter and format string
    #####:  526:                    if (!findFormat(2, tok->tokAt(2), &formatStringTok, &argListTok))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  527:                        continue;
        -:  528:                }
    #####:  529:            } else if (isWindows && Token::Match(tok, "sprintf_s|swprintf_s (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  530:                // template <size_t size> int sprintf_s(char (&buffer)[size], const char *format, ...);
    #####:  531:                if (findFormat(1, tok->tokAt(2), &formatStringTok, &argListTok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  532:                    if (!formatStringTok)
branch  0 never executed
branch  1 never executed
    #####:  533:                        continue;
        -:  534:                }
        -:  535:                // int sprintf_s(char *buffer, size_t sizeOfBuffer, const char *format, ...);
    #####:  536:                else if (findFormat(2, tok->tokAt(2), &formatStringTok, &argListTok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  537:                    if (!formatStringTok)
branch  0 never executed
branch  1 never executed
    #####:  538:                        continue;
        -:  539:                }
    #####:  540:            } else if (isWindows && Token::Match(tok, "_snprintf_s|_snwprintf_s (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  541:                // template <size_t size> int _snprintf_s(char (&buffer)[size], size_t count, const char *format, ...);
    #####:  542:                if (findFormat(2, tok->tokAt(2), &formatStringTok, &argListTok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  543:                    if (!formatStringTok)
branch  0 never executed
branch  1 never executed
    #####:  544:                        continue;
        -:  545:                }
        -:  546:                // int _snprintf_s(char *buffer, size_t sizeOfBuffer, size_t count, const char *format, ...);
    #####:  547:                else if (findFormat(3, tok->tokAt(2), &formatStringTok, &argListTok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  548:                    if (!formatStringTok)
branch  0 never executed
branch  1 never executed
    #####:  549:                        continue;
        -:  550:                }
        -:  551:            } else {
    #####:  552:                continue;
        -:  553:            }
        -:  554:
    #####:  555:            if (!formatStringTok)
branch  0 never executed
branch  1 never executed
    #####:  556:                continue;
        -:  557:
    #####:  558:            checkFormatString(tok, formatStringTok, argListTok, scan, scanf_s);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  559:        }
        -:  560:    }
    #####:  561:}
        -:  562:
function _ZN7CheckIO17checkFormatStringEPK5TokenS2_S2_bb called 0 returned 0% blocks executed 0%
    #####:  563:void CheckIO::checkFormatString(const Token * const tok,
        -:  564:                                const Token * const formatStringTok,
        -:  565:                                const Token *       argListTok,
        -:  566:                                const bool scan,
        -:  567:                                const bool scanf_s)
        -:  568:{
    #####:  569:    const bool printWarning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####:  570:    const std::string &formatString = formatStringTok->str();
call    0 never executed
        -:  571:
        -:  572:    // Count format string parameters..
    #####:  573:    int numFormat = 0;
    #####:  574:    int numSecure = 0;
    #####:  575:    bool percent = false;
    #####:  576:    const Token* argListTok2 = argListTok;
    #####:  577:    std::set<int> parameterPositionsUsed;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  578:    for (std::string::const_iterator i = formatString.begin(); i != formatString.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  579:        if (*i == '%') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  580:            percent = !percent;
    #####:  581:        } else if (percent && *i == '[') {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  582:            while (i != formatString.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  583:                if (*i == ']') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  584:                    numFormat++;
    #####:  585:                    if (argListTok)
branch  0 never executed
branch  1 never executed
    #####:  586:                        argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  587:                    percent = false;
    #####:  588:                    break;
        -:  589:                }
    #####:  590:                ++i;
call    0 never executed
        -:  591:            }
    #####:  592:            if (scanf_s) {
branch  0 never executed
branch  1 never executed
    #####:  593:                numSecure++;
    #####:  594:                if (argListTok) {
branch  0 never executed
branch  1 never executed
    #####:  595:                    argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  596:                }
        -:  597:            }
    #####:  598:            if (i == formatString.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  599:                break;
    #####:  600:        } else if (percent) {
branch  0 never executed
branch  1 never executed
    #####:  601:            percent = false;
        -:  602:
    #####:  603:            bool _continue = false;
    #####:  604:            bool skip = false;
    #####:  605:            std::string width;
call    0 never executed
call    1 never executed
    #####:  606:            int parameterPosition = 0;
    #####:  607:            bool hasParameterPosition = false;
    #####:  608:            while (i != formatString.end() && *i != '[' && !std::isalpha((unsigned char)*i)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  609:                if (*i == '*') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  610:                    skip = true;
    #####:  611:                    if (scan)
branch  0 never executed
branch  1 never executed
    #####:  612:                        _continue = true;
        -:  613:                    else {
    #####:  614:                        numFormat++;
    #####:  615:                        if (argListTok)
branch  0 never executed
branch  1 never executed
    #####:  616:                            argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  617:                    }
    #####:  618:                } else if (std::isdigit(*i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  619:                    width += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  620:                } else if (*i == '$') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  621:                    parameterPosition = std::atoi(width.c_str());
call    0 never executed
    #####:  622:                    hasParameterPosition = true;
    #####:  623:                    width.clear();
call    0 never executed
        -:  624:                }
    #####:  625:                ++i;
call    0 never executed
        -:  626:            }
    #####:  627:            if (i != formatString.end() && *i == '[') {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  628:                while (i != formatString.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  629:                    if (*i == ']') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  630:                        if (!skip) {
branch  0 never executed
branch  1 never executed
    #####:  631:                            numFormat++;
    #####:  632:                            if (argListTok)
branch  0 never executed
branch  1 never executed
    #####:  633:                                argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  634:                        }
    #####:  635:                        break;
        -:  636:                    }
    #####:  637:                    ++i;
call    0 never executed
        -:  638:                }
    #####:  639:                if (scanf_s && !skip) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  640:                    numSecure++;
    #####:  641:                    if (argListTok) {
branch  0 never executed
branch  1 never executed
    #####:  642:                        argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  643:                    }
        -:  644:                }
    #####:  645:                _continue = true;
        -:  646:            }
    #####:  647:            if (i == formatString.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  648:                break;
    #####:  649:            if (_continue)
branch  0 never executed
branch  1 never executed
    #####:  650:                continue;
        -:  651:
    #####:  652:            if (scan || *i != 'm') { // %m is a non-standard extension that requires no parameter on print functions.
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  653:                ++numFormat;
        -:  654:
        -:  655:                // Handle parameter positions (POSIX extension) - Ticket #4900
    #####:  656:                if (hasParameterPosition) {
branch  0 never executed
branch  1 never executed
    #####:  657:                    if (parameterPositionsUsed.find(parameterPosition) == parameterPositionsUsed.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  658:                        parameterPositionsUsed.insert(parameterPosition);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  659:                    else // Parameter already referenced, hence don't consider it a new format
    #####:  660:                        --numFormat;
        -:  661:                }
        -:  662:
        -:  663:                // Perform type checks
    #####:  664:                ArgumentInfo argInfo(argListTok, mSettings, mTokenizer->isCPP());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  665:
    #####:  666:                if (argInfo.typeToken && !argInfo.isLibraryType(mSettings)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  667:                    if (scan) {
branch  0 never executed
branch  1 never executed
    #####:  668:                        std::string specifier;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  669:                        bool done = false;
    #####:  670:                        while (!done) {
branch  0 never executed
branch  1 never executed
    #####:  671:                            switch (*i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  672:                            case 's':
    #####:  673:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  674:                                if (argInfo.variableInfo && argInfo.isKnownType() && argInfo.variableInfo->isArray() && (argInfo.variableInfo->dimensions().size() == 1) && argInfo.variableInfo->dimensions()[0].known) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  675:                                    if (!width.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  676:                                        const int numWidth = std::atoi(width.c_str());
call    0 never executed
    #####:  677:                                        if (numWidth != (argInfo.variableInfo->dimension(0) - 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  678:                                            invalidScanfFormatWidthError(tok, numFormat, numWidth, argInfo.variableInfo, 's');
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  679:                                    }
        -:  680:                                }
    #####:  681:                                if (argListTok && argListTok->tokType() != Token::eString &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  682:                                    argInfo.isKnownType() && argInfo.isArrayOrPointer() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  683:                                    (!Token::Match(argInfo.typeToken, "char|wchar_t") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  684:                                     argInfo.typeToken->strAt(-1) == "const")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  685:                                    if (!(argInfo.isArrayOrPointer() && argInfo.element && !argInfo.typeToken->isStandardType()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  686:                                        invalidScanfArgTypeError_s(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  687:                                }
    #####:  688:                                if (scanf_s) {
branch  0 never executed
branch  1 never executed
    #####:  689:                                    numSecure++;
    #####:  690:                                    if (argListTok) {
branch  0 never executed
branch  1 never executed
    #####:  691:                                        argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:                                    }
        -:  693:                                }
    #####:  694:                                done = true;
    #####:  695:                                break;
    #####:  696:                            case 'c':
    #####:  697:                                if (argInfo.variableInfo && argInfo.isKnownType() && argInfo.variableInfo->isArray() && (argInfo.variableInfo->dimensions().size() == 1) && argInfo.variableInfo->dimensions()[0].known) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  698:                                    if (!width.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  699:                                        const int numWidth = std::atoi(width.c_str());
call    0 never executed
    #####:  700:                                        if (numWidth > argInfo.variableInfo->dimension(0))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  701:                                            invalidScanfFormatWidthError(tok, numFormat, numWidth, argInfo.variableInfo, 'c');
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  702:                                    }
        -:  703:                                }
    #####:  704:                                if (scanf_s) {
branch  0 never executed
branch  1 never executed
    #####:  705:                                    numSecure++;
    #####:  706:                                    if (argListTok) {
branch  0 never executed
branch  1 never executed
    #####:  707:                                        argListTok = argListTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  708:                                    }
        -:  709:                                }
    #####:  710:                                done = true;
    #####:  711:                                break;
    #####:  712:                            case 'x':
        -:  713:                            case 'X':
        -:  714:                            case 'u':
        -:  715:                            case 'o':
    #####:  716:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  717:                                if (argInfo.typeToken->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  719:                                else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  720:                                    if (!Token::Match(argInfo.typeToken, "char|short|int|long")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  721:                                        if (argInfo.typeToken->isStandardType() || !argInfo.element)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  722:                                            invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  723:                                    } else if (!argInfo.typeToken->isUnsigned() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  724:                                               !argInfo.isArrayOrPointer() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  725:                                               argInfo.typeToken->strAt(-1) == "const") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  726:                                        invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  727:                                    } else {
    #####:  728:                                        switch (specifier[0]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  729:                                        case 'h':
    #####:  730:                                            if (specifier[1] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  731:                                                if (argInfo.typeToken->str() != "char")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  732:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:                                            } else if (argInfo.typeToken->str() != "short")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  734:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  735:                                            break;
    #####:  736:                                        case 'l':
    #####:  737:                                            if (specifier[1] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  738:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  739:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  740:                                                else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
    #####:  741:                                                         typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
    #####:  742:                                                         typesMatch(argInfo.typeToken->originalName(), "uintmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  743:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  744:                                            } else if (argInfo.typeToken->str() != "long" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  745:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  746:                                            else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
    #####:  747:                                                     typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
    #####:  748:                                                     typesMatch(argInfo.typeToken->originalName(), "uintmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  749:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  750:                                            break;
    #####:  751:                                        case 'I':
    #####:  752:                                            if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  753:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  754:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  755:                                            } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  756:                                                if (argInfo.typeToken->str() != "int" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  757:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  758:                                            } else if (!typesMatch(argInfo.typeToken->originalName(), "size_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  759:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  760:                                            break;
    #####:  761:                                        case 'j':
    #####:  762:                                            if (!typesMatch(argInfo.typeToken->originalName(), "uintmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  763:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  764:                                            break;
    #####:  765:                                        case 'z':
    #####:  766:                                            if (!typesMatch(argInfo.typeToken->originalName(), "size_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  767:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  768:                                            break;
    #####:  769:                                        case 't':
    #####:  770:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  771:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  772:                                            break;
    #####:  773:                                        case 'L':
    #####:  774:                                            if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  775:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  776:                                            else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:  777:                                                     typesMatch(argInfo.typeToken->originalName(), "uintmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  778:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  779:                                            break;
    #####:  780:                                        default:
    #####:  781:                                            if (argInfo.typeToken->str() != "int")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  782:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  783:                                            else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
    #####:  784:                                                     typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
    #####:  785:                                                     typesMatch(argInfo.typeToken->originalName(), "uintmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  786:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  787:                                            break;
        -:  788:                                        }
        -:  789:                                    }
        -:  790:                                }
    #####:  791:                                done = true;
    #####:  792:                                break;
    #####:  793:                            case 'n':
        -:  794:                            case 'd':
        -:  795:                            case 'i':
    #####:  796:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  797:                                if (argInfo.typeToken->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  799:                                else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  800:                                    if (!Token::Match(argInfo.typeToken, "char|short|int|long")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  801:                                        if (argInfo.typeToken->isStandardType() || !argInfo.element)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  802:                                            invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  803:                                    } else if (argInfo.typeToken->isUnsigned() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  804:                                               !argInfo.isArrayOrPointer() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  805:                                               argInfo.typeToken->strAt(-1) == "const") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  806:                                        invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  807:                                    } else {
    #####:  808:                                        switch (specifier[0]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  809:                                        case 'h':
    #####:  810:                                            if (specifier[1] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  811:                                                if (argInfo.typeToken->str() != "char")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  812:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:                                            } else if (argInfo.typeToken->str() != "short")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  814:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:                                            break;
    #####:  816:                                        case 'l':
    #####:  817:                                            if (specifier[1] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  818:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  819:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  820:                                                else if (typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:  821:                                                         typesMatch(argInfo.typeToken->originalName(), "intmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  822:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:                                            } else if (argInfo.typeToken->str() != "long" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  824:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:                                            else if (typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:  826:                                                     typesMatch(argInfo.typeToken->originalName(), "intmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  827:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  828:                                            break;
    #####:  829:                                        case 'I':
    #####:  830:                                            if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  832:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:                                            } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  834:                                                if (argInfo.typeToken->str() != "int" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  835:                                                    invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:                                            } else if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  837:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  838:                                            break;
    #####:  839:                                        case 'j':
    #####:  840:                                            if (!typesMatch(argInfo.typeToken->originalName(), "intmax_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  841:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:                                            break;
    #####:  843:                                        case 'z':
    #####:  844:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ssize_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  845:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  846:                                            break;
    #####:  847:                                        case 't':
    #####:  848:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  849:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:                                            break;
    #####:  851:                                        case 'L':
    #####:  852:                                            if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  853:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:                                            break;
    #####:  855:                                        default:
    #####:  856:                                            if (argInfo.typeToken->str() != "int")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  857:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  858:                                            else if (typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:  859:                                                     argInfo.typeToken->originalName() == "intmax_t")
call    0 never executed
call    1 never executed
    #####:  860:                                                invalidScanfArgTypeError_int(tok, numFormat, specifier, &argInfo, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:                                            break;
        -:  862:                                        }
        -:  863:                                    }
        -:  864:                                }
    #####:  865:                                done = true;
    #####:  866:                                break;
    #####:  867:                            case 'e':
        -:  868:                            case 'E':
        -:  869:                            case 'f':
        -:  870:                            case 'g':
        -:  871:                            case 'G':
        -:  872:                            case 'a':
    #####:  873:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  874:                                if (argInfo.typeToken->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  875:                                    invalidScanfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:                                else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  877:                                    if (!Token::Match(argInfo.typeToken, "float|double")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  878:                                        if (argInfo.typeToken->isStandardType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  879:                                            invalidScanfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  880:                                    } else if (!argInfo.isArrayOrPointer() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  881:                                               argInfo.typeToken->strAt(-1) == "const") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  882:                                        invalidScanfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  883:                                    } else {
    #####:  884:                                        switch (specifier[0]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  885:                                        case 'l':
    #####:  886:                                            if (argInfo.typeToken->str() != "double" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  887:                                                invalidScanfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  888:                                            break;
    #####:  889:                                        case 'L':
    #####:  890:                                            if (argInfo.typeToken->str() != "double" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  891:                                                invalidScanfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  892:                                            break;
    #####:  893:                                        default:
    #####:  894:                                            if (argInfo.typeToken->str() != "float")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  895:                                                invalidScanfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:                                            break;
        -:  897:                                        }
        -:  898:                                    }
        -:  899:                                }
    #####:  900:                                done = true;
    #####:  901:                                break;
    #####:  902:                            case 'I':
    #####:  903:                                if ((i+1 != formatString.end() && *(i+1) == '6' &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  904:                                     i+2 != formatString.end() && *(i+2) == '4') ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  905:                                    (i+1 != formatString.end() && *(i+1) == '3' &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  906:                                     i+2 != formatString.end() && *(i+2) == '2')) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  907:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  908:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  909:                                    if ((i+1) != formatString.end() && !isalpha(*(i+1))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  910:                                        specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  911:                                        invalidLengthModifierError(tok, numFormat, specifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  912:                                        done = true;
        -:  913:                                    } else {
    #####:  914:                                        specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  915:                                    }
        -:  916:                                } else {
    #####:  917:                                    if ((i+1) != formatString.end() && !isalpha(*(i+1))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  918:                                        specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  919:                                        invalidLengthModifierError(tok, numFormat, specifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:                                        done = true;
        -:  921:                                    } else {
    #####:  922:                                        specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  923:                                    }
        -:  924:                                }
    #####:  925:                                break;
    #####:  926:                            case 'h':
        -:  927:                            case 'l':
    #####:  928:                                if (i+1 != formatString.end() && *(i+1) == *i)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  929:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  930:                            // fallthrough
        -:  931:                            case 'j':
        -:  932:                            case 'q':
        -:  933:                            case 't':
        -:  934:                            case 'z':
        -:  935:                            case 'L':
        -:  936:                                // Expect an alphabetical character after these specifiers
    #####:  937:                                if (i != formatString.end() && !isalpha(*(i+1))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  938:                                    specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  939:                                    invalidLengthModifierError(tok, numFormat, specifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:                                    done = true;
        -:  941:                                } else {
    #####:  942:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  943:                                }
    #####:  944:                                break;
    #####:  945:                            default:
    #####:  946:                                done = true;
    #####:  947:                                break;
        -:  948:                            }
        -:  949:                        }
    #####:  950:                    } else if (printWarning) {
branch  0 never executed
branch  1 never executed
    #####:  951:                        std::string specifier;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  952:                        bool done = false;
    #####:  953:                        while (!done) {
branch  0 never executed
branch  1 never executed
    #####:  954:                            switch (*i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  955:                            case 's':
    #####:  956:                                if (argListTok->tokType() != Token::eString &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  957:                                    argInfo.isKnownType() && !argInfo.isArrayOrPointer()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  958:                                    if (!Token::Match(argInfo.typeToken, "char|wchar_t")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  959:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  960:                                            invalidPrintfArgTypeError_s(tok, numFormat, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:                                    }
        -:  962:                                }
    #####:  963:                                done = true;
    #####:  964:                                break;
    #####:  965:                            case 'n':
    #####:  966:                                if ((argInfo.isKnownType() && (!argInfo.isArrayOrPointer() || argInfo.typeToken->strAt(-1) == "const")) || argListTok->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####:  967:                                    invalidPrintfArgTypeError_n(tok, numFormat, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:                                done = true;
    #####:  969:                                break;
    #####:  970:                            case 'c':
        -:  971:                            case 'x':
        -:  972:                            case 'X':
        -:  973:                            case 'o':
    #####:  974:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  975:                                if (argInfo.typeToken->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:                                else if (argInfo.isArrayOrPointer() && !argInfo.element) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  978:                                    // use %p on pointers and arrays
    #####:  979:                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  980:                                } else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  981:                                    if (!Token::Match(argInfo.typeToken, "bool|short|long|int|char|wchar_t")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  982:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  983:                                            invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  984:                                    } else {
    #####:  985:                                        switch (specifier[0]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  986:                                        case 'h':
    #####:  987:                                            if (specifier[1] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  988:                                                if (!(argInfo.typeToken->str() == "char" && argInfo.typeToken->isUnsigned()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  989:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  990:                                            } else if (!(argInfo.typeToken->str() == "short" && argInfo.typeToken->isUnsigned()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  991:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  992:                                            break;
    #####:  993:                                        case 'l':
    #####:  994:                                            if (specifier[1] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  995:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  996:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  997:                                                else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:  998:                                                         argInfo.typeToken->originalName() == "uintmax_t")
call    0 never executed
call    1 never executed
    #####:  999:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:                                            } else if (argInfo.typeToken->str() != "long" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1001:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:                                            else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1003:                                                     argInfo.typeToken->originalName() == "uintmax_t")
call    0 never executed
call    1 never executed
    #####: 1004:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1005:                                            break;
    #####: 1006:                                        case 'j':
    #####: 1007:                                            if (argInfo.typeToken->originalName() != "uintmax_t")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1008:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1009:                                            break;
    #####: 1010:                                        case 'z':
    #####: 1011:                                            if (!typesMatch(argInfo.typeToken->originalName(), "size_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1012:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1013:                                            break;
    #####: 1014:                                        case 't':
    #####: 1015:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1016:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1017:                                            break;
    #####: 1018:                                        case 'I':
    #####: 1019:                                            if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1020:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1021:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1022:                                            } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1023:                                                if (argInfo.typeToken->str() != "int" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1024:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1025:                                            } else if (!(typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
    #####: 1026:                                                         argInfo.typeToken->originalName() == "WPARAM" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1027:                                                         argInfo.typeToken->originalName() == "UINT_PTR" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1028:                                                         argInfo.typeToken->originalName() == "LONG_PTR" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1029:                                                         argInfo.typeToken->originalName() == "LPARAM" ||
call    0 never executed
call    1 never executed
    #####: 1030:                                                         argInfo.typeToken->originalName() == "LRESULT"))
call    0 never executed
call    1 never executed
    #####: 1031:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1032:                                            break;
    #####: 1033:                                        default:
    #####: 1034:                                            if (!Token::Match(argInfo.typeToken, "bool|char|short|wchar_t|int"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1035:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1036:                                            break;
        -: 1037:                                        }
        -: 1038:                                    }
        -: 1039:                                }
    #####: 1040:                                done = true;
    #####: 1041:                                break;
    #####: 1042:                            case 'd':
        -: 1043:                            case 'i':
    #####: 1044:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1045:                                if (argInfo.typeToken->tokType() == Token::eString) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1046:                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1047:                                } else if (argInfo.isArrayOrPointer() && !argInfo.element) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1048:                                    // use %p on pointers and arrays
    #####: 1049:                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:                                } else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1051:                                    if (argInfo.typeToken->isUnsigned() && !Token::Match(argInfo.typeToken, "char|short")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1052:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1053:                                            invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:                                    } else if (!Token::Match(argInfo.typeToken, "bool|char|short|int|long")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1055:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1056:                                            invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1057:                                    } else {
    #####: 1058:                                        switch (specifier[0]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1059:                                        case 'h':
    #####: 1060:                                            if (specifier[1] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1061:                                                if (!(argInfo.typeToken->str() == "char" && !argInfo.typeToken->isUnsigned()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1062:                                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1063:                                            } else if (!(argInfo.typeToken->str() == "short" && !argInfo.typeToken->isUnsigned()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1064:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1065:                                            break;
    #####: 1066:                                        case 'l':
    #####: 1067:                                            if (specifier[1] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1068:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1069:                                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:                                                else if (typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1071:                                                         argInfo.typeToken->originalName() == "intmax_t")
call    0 never executed
call    1 never executed
    #####: 1072:                                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1073:                                            } else if (argInfo.typeToken->str() != "long" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1074:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1075:                                            else if (typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1076:                                                     argInfo.typeToken->originalName() == "intmax_t")
call    0 never executed
call    1 never executed
    #####: 1077:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1078:                                            break;
    #####: 1079:                                        case 'j':
    #####: 1080:                                            if (argInfo.typeToken->originalName() != "intmax_t")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1081:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1082:                                            break;
    #####: 1083:                                        case 't':
    #####: 1084:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1085:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1086:                                            break;
    #####: 1087:                                        case 'I':
    #####: 1088:                                            if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1089:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1090:                                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1091:                                            } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1092:                                                if (argInfo.typeToken->str() != "int" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1093:                                                    invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1094:                                            } else if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1095:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1096:                                            break;
    #####: 1097:                                        case 'z':
    #####: 1098:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ssize_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1099:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1100:                                            break;
    #####: 1101:                                        case 'L':
    #####: 1102:                                            if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1103:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1104:                                            break;
    #####: 1105:                                        default:
    #####: 1106:                                            if (!Token::Match(argInfo.typeToken, "bool|char|short|int"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1107:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1108:                                            else if (typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1109:                                                     argInfo.typeToken->originalName() == "intmax_t")
call    0 never executed
call    1 never executed
    #####: 1110:                                                invalidPrintfArgTypeError_sint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1111:                                            break;
        -: 1112:                                        }
        -: 1113:                                    }
        -: 1114:                                }
    #####: 1115:                                done = true;
    #####: 1116:                                break;
    #####: 1117:                            case 'u':
    #####: 1118:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1119:                                if (argInfo.typeToken->tokType() == Token::eString) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1120:                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1121:                                } else if (argInfo.isArrayOrPointer() && !argInfo.element) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1122:                                    // use %p on pointers and arrays
    #####: 1123:                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1124:                                } else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1125:                                    if (!argInfo.typeToken->isUnsigned() && !Token::Match(argInfo.typeToken, "bool|_Bool")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1126:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1127:                                            invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:                                    } else if (!Token::Match(argInfo.typeToken, "bool|char|short|long|int")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1129:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1130:                                            invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1131:                                    } else {
    #####: 1132:                                        switch (specifier[0]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1133:                                        case 'h':
    #####: 1134:                                            if (specifier[1] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1135:                                                if (!(argInfo.typeToken->str() == "char" && argInfo.typeToken->isUnsigned()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1136:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1137:                                            } else if (!(argInfo.typeToken->str() == "short" && argInfo.typeToken->isUnsigned()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1138:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1139:                                            break;
    #####: 1140:                                        case 'l':
    #####: 1141:                                            if (specifier[1] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1142:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1143:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1144:                                                else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1145:                                                         argInfo.typeToken->originalName() == "uintmax_t")
call    0 never executed
call    1 never executed
    #####: 1146:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1147:                                            } else if (argInfo.typeToken->str() != "long" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1148:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1149:                                            else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1150:                                                     argInfo.typeToken->originalName() == "uintmax_t")
call    0 never executed
call    1 never executed
    #####: 1151:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1152:                                            break;
    #####: 1153:                                        case 'j':
    #####: 1154:                                            if (argInfo.typeToken->originalName() != "uintmax_t")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1155:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1156:                                            break;
    #####: 1157:                                        case 'z':
    #####: 1158:                                            if (!typesMatch(argInfo.typeToken->originalName(), "size_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1159:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1160:                                            break;
    #####: 1161:                                        case 't':
    #####: 1162:                                            if (!typesMatch(argInfo.typeToken->originalName(), "ptrdiff_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1163:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1164:                                            break;
    #####: 1165:                                        case 'I':
    #####: 1166:                                            if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1167:                                                if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1168:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1169:                                            } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1170:                                                if (argInfo.typeToken->str() != "int" || argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1171:                                                    invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1172:                                            } else if (!typesMatch(argInfo.typeToken->originalName(), "size_t"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1173:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1174:                                            break;
    #####: 1175:                                        case 'L':
    #####: 1176:                                            if (argInfo.typeToken->str() != "long" || !argInfo.typeToken->isLong())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1177:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1178:                                            break;
    #####: 1179:                                        default:
    #####: 1180:                                            if (!Token::Match(argInfo.typeToken, "bool|char|short|int"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1181:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1182:                                            else if (typesMatch(argInfo.typeToken->originalName(), "size_t") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####: 1183:                                                     argInfo.typeToken->originalName() == "intmax_t")
call    0 never executed
call    1 never executed
    #####: 1184:                                                invalidPrintfArgTypeError_uint(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1185:                                            break;
        -: 1186:                                        }
        -: 1187:                                    }
        -: 1188:                                }
    #####: 1189:                                done = true;
    #####: 1190:                                break;
    #####: 1191:                            case 'p':
    #####: 1192:                                if (argInfo.typeToken->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1193:                                    ;// string literals are passed as pointers to literal start, okay
    #####: 1194:                                else if (argInfo.isKnownType() && !argInfo.isArrayOrPointer())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1195:                                    invalidPrintfArgTypeError_p(tok, numFormat, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1196:                                done = true;
    #####: 1197:                                break;
    #####: 1198:                            case 'e':
        -: 1199:                            case 'E':
        -: 1200:                            case 'f':
        -: 1201:                            case 'g':
        -: 1202:                            case 'G':
    #####: 1203:                                specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1204:                                if (argInfo.typeToken->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1205:                                    invalidPrintfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1206:                                else if (argInfo.isArrayOrPointer() && !argInfo.element) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1207:                                    // use %p on pointers and arrays
    #####: 1208:                                    invalidPrintfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1209:                                } else if (argInfo.isKnownType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1210:                                    if (!Token::Match(argInfo.typeToken, "float|double")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1211:                                        if (!(!argInfo.isArrayOrPointer() && argInfo.element))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1212:                                            invalidPrintfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1213:                                    } else if ((specifier[0] == 'L' && (!argInfo.typeToken->isLong() || argInfo.typeToken->str() != "double")) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1214:                                               (specifier[0] != 'L' && argInfo.typeToken->isLong()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1215:                                        invalidPrintfArgTypeError_float(tok, numFormat, specifier, &argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1216:                                }
    #####: 1217:                                done = true;
    #####: 1218:                                break;
    #####: 1219:                            case 'h': // Can be 'hh' (signed char or unsigned char) or 'h' (short int or unsigned short int)
        -: 1220:                            case 'l': { // Can be 'll' (long long int or unsigned long long int) or 'l' (long int or unsigned long int)
        -: 1221:                                // If the next character is the same (which makes 'hh' or 'll') then expect another alphabetical character
    #####: 1222:                                const bool isSecondCharAvailable = ((i + 1) != formatString.end());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1223:                                if (i != formatString.end() && isSecondCharAvailable && *(i + 1) == *i) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1224:                                    if (!isalpha(*(i + 2))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1225:                                        std::string modifier;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1226:                                        modifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1227:                                        modifier += *(i + 1);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1228:                                        invalidLengthModifierError(tok, numFormat, modifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1229:                                        done = true;
        -: 1230:                                    } else {
    #####: 1231:                                        specifier = *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1232:                                        specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1233:                                    }
        -: 1234:                                } else {
    #####: 1235:                                    if (i != formatString.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1236:                                        if ((i + 1) != formatString.end() && !isalpha(*(i + 1))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1237:                                            std::string modifier;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1238:                                            modifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1239:                                            invalidLengthModifierError(tok, numFormat, modifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1240:                                            done = true;
        -: 1241:                                        } else {
    #####: 1242:                                            specifier = *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1243:                                        }
        -: 1244:                                    } else {
    #####: 1245:                                        done = true;
        -: 1246:                                    }
        -: 1247:                                }
        -: 1248:                            }
    #####: 1249:                            break;
    #####: 1250:                            case 'I': // Microsoft extension: I for size_t and ptrdiff_t, I32 for __int32, and I64 for __int64
    #####: 1251:                                if ((*(i+1) == '3' && *(i+2) == '2') ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1252:                                    (*(i+1) == '6' && *(i+2) == '4')) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1253:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1254:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1255:                                }
        -: 1256:                            // fallthrough
        -: 1257:                            case 'j': // intmax_t or uintmax_t
        -: 1258:                            case 'z': // size_t
        -: 1259:                            case 't': // ptrdiff_t
        -: 1260:                            case 'L': // long double
        -: 1261:                                // Expect an alphabetical character after these specifiers
    #####: 1262:                                if (i != formatString.end() && !isalpha(*(i+1))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1263:                                    specifier += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1264:                                    invalidLengthModifierError(tok, numFormat, specifier);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1265:                                    done = true;
        -: 1266:                                } else {
    #####: 1267:                                    specifier += *i++;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1268:                                }
    #####: 1269:                                break;
    #####: 1270:                            default:
    #####: 1271:                                done = true;
    #####: 1272:                                break;
        -: 1273:                            }
        -: 1274:                        }
        -: 1275:                    }
        -: 1276:                }
        -: 1277:
    #####: 1278:                if (argListTok)
branch  0 never executed
branch  1 never executed
    #####: 1279:                    argListTok = argListTok->nextArgument(); // Find next argument
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1280:            }
        -: 1281:        }
        -: 1282:    }
        -: 1283:
        -: 1284:    // Count printf/scanf parameters..
    #####: 1285:    int numFunction = 0;
    #####: 1286:    while (argListTok2) {
branch  0 never executed
branch  1 never executed
    #####: 1287:        numFunction++;
    #####: 1288:        argListTok2 = argListTok2->nextArgument(); // Find next argument
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1289:    }
        -: 1290:
    #####: 1291:    if (printWarning) {
branch  0 never executed
branch  1 never executed
        -: 1292:        // Check that all parameter positions reference an actual parameter
    #####: 1293:        for (int i : parameterPositionsUsed) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1294:            if ((i == 0) || (i > numFormat))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1295:                wrongPrintfScanfPosixParameterPositionError(tok, tok->str(), i, numFormat);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1296:        }
        -: 1297:    }
        -: 1298:
        -: 1299:    // Mismatching number of parameters => warning
    #####: 1300:    if ((numFormat + numSecure) != numFunction)
branch  0 never executed
branch  1 never executed
    #####: 1301:        wrongPrintfScanfArgumentsError(tok, tok->originalName().empty() ? tok->str() : tok->originalName(), numFormat + numSecure, numFunction);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1302:}
        -: 1303:
        -: 1304:// We currently only support string literals, variables, and functions.
        -: 1305:/// @todo add non-string literals, and generic expressions
        -: 1306:
function _ZN7CheckIO12ArgumentInfoC2EPK5TokenPK8Settingsb called 0 returned 0% blocks executed 0%
    #####: 1307:CheckIO::ArgumentInfo::ArgumentInfo(const Token * arg, const Settings *settings, bool _isCPP)
        -: 1308:    : variableInfo(nullptr)
        -: 1309:    , typeToken(nullptr)
        -: 1310:    , functionInfo(nullptr)
        -: 1311:    , tempToken(nullptr)
        -: 1312:    , element(false)
        -: 1313:    , _template(false)
        -: 1314:    , address(false)
    #####: 1315:    , isCPP(_isCPP)
        -: 1316:{
    #####: 1317:    if (!arg)
branch  0 never executed
branch  1 never executed
    #####: 1318:        return;
        -: 1319:
        -: 1320:    // Use AST type info
        -: 1321:    // TODO: This is a bailout so that old code is used in simple cases. Remove the old code and always use the AST type.
    #####: 1322:    if (!Token::Match(arg, "%str% ,|)") && !(Token::Match(arg,"%var%") && arg->variable() && arg->variable()->isArray())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1323:        const Token *top = arg;
    #####: 1324:        while (top->astParent() && top->astParent()->str() != "," && top->astParent() != arg->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1325:            top = top->astParent();
call    0 never executed
    #####: 1326:        const ValueType *valuetype = top->argumentType();
call    0 never executed
    #####: 1327:        if (valuetype && valuetype->type >= ValueType::Type::BOOL) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1328:            typeToken = tempToken = new Token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1329:            if (valuetype->pointer && valuetype->constness & 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1330:                tempToken->str("const");
call    0 never executed
    #####: 1331:                tempToken->insertToken("a");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1332:                tempToken = tempToken->next();
call    0 never executed
        -: 1333:            }
    #####: 1334:            if (valuetype->type == ValueType::BOOL)
branch  0 never executed
branch  1 never executed
    #####: 1335:                tempToken->str("bool");
call    0 never executed
    #####: 1336:            else if (valuetype->type == ValueType::CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1337:                tempToken->str("char");
call    0 never executed
    #####: 1338:            else if (valuetype->type == ValueType::SHORT)
branch  0 never executed
branch  1 never executed
    #####: 1339:                tempToken->str("short");
call    0 never executed
    #####: 1340:            else if (valuetype->type == ValueType::WCHAR_T)
branch  0 never executed
branch  1 never executed
    #####: 1341:                tempToken->str("wchar_t");
call    0 never executed
    #####: 1342:            else if (valuetype->type == ValueType::INT)
branch  0 never executed
branch  1 never executed
    #####: 1343:                tempToken->str("int");
call    0 never executed
    #####: 1344:            else if (valuetype->type == ValueType::LONG)
branch  0 never executed
branch  1 never executed
    #####: 1345:                tempToken->str("long");
call    0 never executed
    #####: 1346:            else if (valuetype->type == ValueType::LONGLONG) {
branch  0 never executed
branch  1 never executed
    #####: 1347:                tempToken->str("long");
call    0 never executed
    #####: 1348:                tempToken->isLong(true);
call    0 never executed
    #####: 1349:            } else if (valuetype->type == ValueType::FLOAT)
branch  0 never executed
branch  1 never executed
    #####: 1350:                tempToken->str("float");
call    0 never executed
    #####: 1351:            else if (valuetype->type == ValueType::DOUBLE)
branch  0 never executed
branch  1 never executed
    #####: 1352:                tempToken->str("double");
call    0 never executed
    #####: 1353:            else if (valuetype->type == ValueType::LONGDOUBLE) {
branch  0 never executed
branch  1 never executed
    #####: 1354:                tempToken->str("double");
call    0 never executed
    #####: 1355:                tempToken->isLong(true);
call    0 never executed
        -: 1356:            }
    #####: 1357:            if (valuetype->isIntegral()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1358:                if (valuetype->sign == ValueType::Sign::UNSIGNED)
branch  0 never executed
branch  1 never executed
    #####: 1359:                    tempToken->isUnsigned(true);
call    0 never executed
    #####: 1360:                else if (valuetype->sign == ValueType::Sign::SIGNED)
branch  0 never executed
branch  1 never executed
    #####: 1361:                    tempToken->isSigned(true);
call    0 never executed
        -: 1362:            }
    #####: 1363:            if (!valuetype->originalTypeName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1364:                tempToken->originalName(valuetype->originalTypeName);
call    0 never executed
    #####: 1365:            for (int p = 0; p < valuetype->pointer; p++)
branch  0 never executed
branch  1 never executed
    #####: 1366:                tempToken->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1367:            tempToken = const_cast<Token*>(typeToken);
    #####: 1368:            return;
        -: 1369:        }
        -: 1370:    }
        -: 1371:
        -: 1372:
    #####: 1373:    if (arg->tokType() == Token::eString) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1374:        typeToken = arg;
    #####: 1375:        return;
    #####: 1376:    } else if (arg->str() == "&" || arg->tokType() == Token::eVariable ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1377:               arg->tokType() == Token::eFunction || Token::Match(arg, "%type% ::") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1378:               (Token::Match(arg, "static_cast|reinterpret_cast|const_cast <") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1379:                Token::simpleMatch(arg->linkAt(1), "> (") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1380:                Token::Match(arg->linkAt(1)->linkAt(1), ") ,|)"))) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1381:        if (Token::Match(arg, "static_cast|reinterpret_cast|const_cast")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1382:            typeToken = arg->tokAt(2);
call    0 never executed
    #####: 1383:            while (typeToken->str() == "const" || typeToken->str() == "extern")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1384:                typeToken = typeToken->next();
call    0 never executed
    #####: 1385:            return;
        -: 1386:        }
    #####: 1387:        if (arg->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1388:            address = true;
    #####: 1389:            arg = arg->next();
call    0 never executed
        -: 1390:        }
    #####: 1391:        while (Token::Match(arg, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1392:            arg = arg->tokAt(2);
call    0 never executed
    #####: 1393:        if (!arg || !(arg->tokType() == Token::eVariable || arg->tokType() == Token::eFunction))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1394:            return;
    #####: 1395:        const Token *varTok = nullptr;
    #####: 1396:        const Token *tok1 = arg->next();
call    0 never executed
    #####: 1397:        for (; tok1; tok1 = tok1->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1398:            if (tok1->str() == "," || tok1->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1399:                if (tok1->previous()->str() == "]") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1400:                    varTok = tok1->linkAt(-1)->previous();
call    0 never executed
call    1 never executed
    #####: 1401:                    if (varTok->str() == ")" && varTok->link()->previous()->tokType() == Token::eFunction) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1402:                        const Function * function = varTok->link()->previous()->function();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1403:                        if (function && function->retType && function->retType->isEnumType()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1404:                            if (function->retType->classScope->enumType)
branch  0 never executed
branch  1 never executed
    #####: 1405:                                typeToken = function->retType->classScope->enumType;
        -: 1406:                            else {
    #####: 1407:                                tempToken = new Token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1408:                                tempToken->fileIndex(tok1->fileIndex());
call    0 never executed
call    1 never executed
    #####: 1409:                                tempToken->linenr(tok1->linenr());
call    0 never executed
call    1 never executed
    #####: 1410:                                tempToken->str("int");
call    0 never executed
    #####: 1411:                                typeToken = tempToken;
        -: 1412:                            }
    #####: 1413:                        } else if (function && function->retDef) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1414:                            typeToken = function->retDef;
    #####: 1415:                            while (typeToken->str() == "const" || typeToken->str() == "extern")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1416:                                typeToken = typeToken->next();
call    0 never executed
    #####: 1417:                            functionInfo = function;
    #####: 1418:                            element = true;
        -: 1419:                        }
    #####: 1420:                        return;
        -: 1421:                    }
    #####: 1422:                } else if (tok1->previous()->str() == ")" && tok1->linkAt(-1)->previous()->tokType() == Token::eFunction) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1423:                    const Function * function = tok1->linkAt(-1)->previous()->function();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1424:                    if (function && function->retType && function->retType->isEnumType()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1425:                        if (function->retType->classScope->enumType)
branch  0 never executed
branch  1 never executed
    #####: 1426:                            typeToken = function->retType->classScope->enumType;
        -: 1427:                        else {
    #####: 1428:                            tempToken = new Token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1429:                            tempToken->fileIndex(tok1->fileIndex());
call    0 never executed
call    1 never executed
    #####: 1430:                            tempToken->linenr(tok1->linenr());
call    0 never executed
call    1 never executed
    #####: 1431:                            tempToken->str("int");
call    0 never executed
    #####: 1432:                            typeToken = tempToken;
        -: 1433:                        }
    #####: 1434:                    } else if (function && function->retDef) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1435:                        typeToken = function->retDef;
    #####: 1436:                        while (typeToken->str() == "const" || typeToken->str() == "extern")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1437:                            typeToken = typeToken->next();
call    0 never executed
    #####: 1438:                        functionInfo = function;
    #####: 1439:                        element = false;
        -: 1440:                    }
    #####: 1441:                    return;
        -: 1442:                } else
    #####: 1443:                    varTok = tok1->previous();
call    0 never executed
    #####: 1444:                break;
    #####: 1445:            } else if (tok1->str() == "(" || tok1->str() == "{" || tok1->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1446:                tok1 = tok1->link();
call    0 never executed
    #####: 1447:            else if (tok1->link() && tok1->str() == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1448:                tok1 = tok1->link();
call    0 never executed
        -: 1449:
        -: 1450:            // check for some common well known functions
    #####: 1451:            else if (isCPP && ((Token::Match(tok1->previous(), "%var% . size|empty|c_str ( ) [,)]") && isStdContainer(tok1->previous())) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1452:                               (Token::Match(tok1->previous(), "] . size|empty|c_str ( ) [,)]") && isStdContainer(tok1->previous()->link()->previous())))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1453:                tempToken = new Token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1454:                tempToken->fileIndex(tok1->fileIndex());
call    0 never executed
call    1 never executed
    #####: 1455:                tempToken->linenr(tok1->linenr());
call    0 never executed
call    1 never executed
    #####: 1456:                if (tok1->next()->str() == "size") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1457:                    // size_t is platform dependent
    #####: 1458:                    if (settings->sizeof_size_t == 8) {
branch  0 never executed
branch  1 never executed
    #####: 1459:                        tempToken->str("long");
call    0 never executed
    #####: 1460:                        if (settings->sizeof_long != 8)
branch  0 never executed
branch  1 never executed
    #####: 1461:                            tempToken->isLong(true);
call    0 never executed
    #####: 1462:                    } else if (settings->sizeof_size_t == 4) {
branch  0 never executed
branch  1 never executed
    #####: 1463:                        if (settings->sizeof_long == 4) {
branch  0 never executed
branch  1 never executed
    #####: 1464:                            tempToken->str("long");
call    0 never executed
        -: 1465:                        } else {
    #####: 1466:                            tempToken->str("int");
call    0 never executed
        -: 1467:                        }
        -: 1468:                    }
        -: 1469:
    #####: 1470:                    tempToken->originalName("size_t");
call    0 never executed
    #####: 1471:                    tempToken->isUnsigned(true);
call    0 never executed
    #####: 1472:                } else if (tok1->next()->str() == "empty") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1473:                    tempToken->str("bool");
call    0 never executed
    #####: 1474:                } else if (tok1->next()->str() == "c_str") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1475:                    tempToken->str("const");
call    0 never executed
    #####: 1476:                    tempToken->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1477:                    if (typeToken->strAt(2) == "string")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1478:                        tempToken->insertToken("char");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1479:                    else
    #####: 1480:                        tempToken->insertToken("wchar_t");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1481:                }
    #####: 1482:                typeToken = tempToken;
    #####: 1483:                return;
        -: 1484:            }
        -: 1485:
        -: 1486:            // check for std::vector::at() and std::string::at()
    #####: 1487:            else if (Token::Match(tok1->previous(), "%var% . at (") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1488:                     Token::Match(tok1->linkAt(2), ") [,)]")) {
call    0 never executed
call    1 never executed
    #####: 1489:                varTok = tok1->previous();
call    0 never executed
    #####: 1490:                variableInfo = varTok->variable();
call    0 never executed
        -: 1491:
    #####: 1492:                if (!variableInfo || !isStdVectorOrString()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1493:                    variableInfo = nullptr;
    #####: 1494:                    typeToken = nullptr;
        -: 1495:                }
        -: 1496:
    #####: 1497:                return;
    #####: 1498:            } else if (!(tok1->str() == "." || tok1->tokType() == Token::eVariable || tok1->tokType() == Token::eFunction))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1499:                return;
        -: 1500:        }
        -: 1501:
    #####: 1502:        if (varTok) {
branch  0 never executed
branch  1 never executed
    #####: 1503:            variableInfo = varTok->variable();
call    0 never executed
    #####: 1504:            element = tok1->previous()->str() == "]";
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1505:
        -: 1506:            // look for std::vector operator [] and use template type as return type
    #####: 1507:            if (variableInfo) {
branch  0 never executed
branch  1 never executed
    #####: 1508:                if (element && isStdVectorOrString()) { // isStdVectorOrString sets type token if true
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1509:                    element = false;    // not really an array element
    #####: 1510:                } else if (variableInfo->isEnumType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1511:                    if (variableInfo->type() && variableInfo->type()->classScope && variableInfo->type()->classScope->enumType)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1512:                        typeToken = variableInfo->type()->classScope->enumType;
call    0 never executed
        -: 1513:                    else {
    #####: 1514:                        tempToken = new Token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1515:                        tempToken->fileIndex(tok1->fileIndex());
call    0 never executed
call    1 never executed
    #####: 1516:                        tempToken->linenr(tok1->linenr());
call    0 never executed
call    1 never executed
    #####: 1517:                        tempToken->str("int");
call    0 never executed
    #####: 1518:                        typeToken = tempToken;
        -: 1519:                    }
        -: 1520:                } else
    #####: 1521:                    typeToken = variableInfo->typeStartToken();
call    0 never executed
        -: 1522:            }
        -: 1523:
    #####: 1524:            return;
        -: 1525:        }
        -: 1526:    }
        -: 1527:}
        -: 1528:
function _ZN7CheckIO12ArgumentInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 1529:CheckIO::ArgumentInfo::~ArgumentInfo()
        -: 1530:{
    #####: 1531:    if (tempToken) {
branch  0 never executed
branch  1 never executed
    #####: 1532:        while (tempToken->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1533:            tempToken->deleteNext();
call    0 never executed
        -: 1534:
    #####: 1535:        delete tempToken;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1536:    }
    #####: 1537:}
        -: 1538:
        -: 1539:namespace {
        1: 1540:    const std::set<std::string> stl_vector = { "array", "vector" };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 67% (fallthrough)
branch 14 taken 33%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        1: 1541:    const std::set<std::string> stl_string = { "string", "u16string", "u32string", "wstring" };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 80% (fallthrough)
branch 22 taken 20%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
        -: 1542:}
        -: 1543:
function _ZN7CheckIO12ArgumentInfo19isStdVectorOrStringEv called 0 returned 0% blocks executed 0%
    #####: 1544:bool CheckIO::ArgumentInfo::isStdVectorOrString()
        -: 1545:{
    #####: 1546:    if (!isCPP)
branch  0 never executed
branch  1 never executed
    #####: 1547:        return false;
    #####: 1548:    if (variableInfo->isStlType(stl_vector)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1549:        typeToken = variableInfo->typeStartToken()->tokAt(4);
call    0 never executed
call    1 never executed
    #####: 1550:        _template = true;
    #####: 1551:        return true;
    #####: 1552:    } else if (variableInfo->isStlType(stl_string)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1553:        tempToken = new Token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1554:        tempToken->fileIndex(variableInfo->typeStartToken()->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1555:        tempToken->linenr(variableInfo->typeStartToken()->linenr());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1556:        if (variableInfo->typeStartToken()->strAt(2) == "string")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1557:            tempToken->str("char");
call    0 never executed
        -: 1558:        else
    #####: 1559:            tempToken->str("wchar_t");
call    0 never executed
    #####: 1560:        typeToken = tempToken;
    #####: 1561:        return true;
    #####: 1562:    } else if (variableInfo->type() && !variableInfo->type()->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1563:        const std::vector<Type::BaseInfo>& derivedFrom = variableInfo->type()->derivedFrom;
call    0 never executed
    #####: 1564:        for (const Type::BaseInfo & i : derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1565:            const Token* nameTok = i.nameTok;
    #####: 1566:            if (Token::Match(nameTok, "std :: vector|array <")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1567:                typeToken = nameTok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1568:                _template = true;
    #####: 1569:                return true;
    #####: 1570:            } else if (Token::Match(nameTok, "std :: string|wstring")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1571:                tempToken = new Token();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 1572:                tempToken->fileIndex(variableInfo->typeStartToken()->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1573:                tempToken->linenr(variableInfo->typeStartToken()->linenr());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1574:                if (nameTok->strAt(2) == "string")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1575:                    tempToken->str("char");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1576:                else
    #####: 1577:                    tempToken->str("wchar_t");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1578:                typeToken = tempToken;
    #####: 1579:                return true;
        -: 1580:            }
        -: 1581:        }
    #####: 1582:    } else if (variableInfo->type()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1583:        const Scope * classScope = variableInfo->type()->classScope;
call    0 never executed
    #####: 1584:        if (classScope) {
branch  0 never executed
branch  1 never executed
    #####: 1585:            for (const Function &func : classScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1586:                if (func.name() == "operator[]") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1587:                    if (Token::Match(func.retDef, "%type% &")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1588:                        typeToken = func.retDef;
    #####: 1589:                        return true;
        -: 1590:                    }
        -: 1591:                }
        -: 1592:            }
        -: 1593:        }
        -: 1594:    }
        -: 1595:
    #####: 1596:    return false;
        -: 1597:}
        -: 1598:
       21: 1599:static const std::set<std::string> stl_container = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
branch 85 taken 95% (fallthrough)
branch 86 taken 5%
call   87 returned 100%
call   88 returned 100%
call   89 returned 100%
call   90 returned 100%
call   91 returned 100%
call   92 returned 100%
call   93 returned 100%
call   94 returned 100%
call   95 returned 100%
call   96 returned 100%
call   97 returned 100%
call   98 returned 100%
call   99 returned 100%
call   100 returned 100%
call   101 returned 100%
call   102 returned 100%
call   103 returned 100%
call   104 returned 100%
call   105 returned 100%
call   106 returned 100%
call   107 returned 100%
call   108 never executed
branch 109 never executed
branch 110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
        -: 1600:    "array", "bitset", "deque", "forward_list",
        -: 1601:    "hash_map", "hash_multimap", "hash_set",
        -: 1602:    "list", "map", "multimap", "multiset",
        -: 1603:    "priority_queue", "queue", "set", "stack",
        -: 1604:    "unordered_map", "unordered_multimap", "unordered_multiset", "unordered_set", "vector"
       20: 1605:};
call    0 returned 100%
call    1 never executed
        -: 1606:
function _ZN7CheckIO12ArgumentInfo14isStdContainerEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1607:bool CheckIO::ArgumentInfo::isStdContainer(const Token *tok)
        -: 1608:{
    #####: 1609:    if (!isCPP)
branch  0 never executed
branch  1 never executed
    #####: 1610:        return false;
    #####: 1611:    if (tok && tok->variable()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1612:        const Variable* variable = tok->variable();
call    0 never executed
    #####: 1613:        if (variable->isStlType(stl_container)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1614:            typeToken = variable->typeStartToken()->tokAt(4);
call    0 never executed
call    1 never executed
    #####: 1615:            return true;
    #####: 1616:        } else if (variable->isStlType(stl_string)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1617:            typeToken = variable->typeStartToken();
call    0 never executed
    #####: 1618:            return true;
    #####: 1619:        } else if (variable->type() && !variable->type()->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1620:            for (const Type::BaseInfo &baseInfo : variable->type()->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####: 1621:                const Token* nameTok = baseInfo.nameTok;
    #####: 1622:                if (Token::Match(nameTok, "std :: vector|array|bitset|deque|list|forward_list|map|multimap|multiset|priority_queue|queue|set|stack|hash_map|hash_multimap|hash_set|unordered_map|unordered_multimap|unordered_set|unordered_multiset <")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1623:                    typeToken = nameTok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1624:                    return true;
    #####: 1625:                } else if (Token::Match(nameTok, "std :: string|wstring")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1626:                    typeToken = nameTok;
    #####: 1627:                    return true;
        -: 1628:                }
        -: 1629:            }
        -: 1630:        }
        -: 1631:    }
        -: 1632:
    #####: 1633:    return false;
        -: 1634:}
        -: 1635:
function _ZNK7CheckIO12ArgumentInfo16isArrayOrPointerEv called 0 returned 0% blocks executed 0%
    #####: 1636:bool CheckIO::ArgumentInfo::isArrayOrPointer() const
        -: 1637:{
    #####: 1638:    if (address)
branch  0 never executed
branch  1 never executed
    #####: 1639:        return true;
    #####: 1640:    else if (variableInfo && !_template) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1641:        return variableInfo->isArrayOrPointer();
call    0 never executed
        -: 1642:    } else {
    #####: 1643:        const Token *tok = typeToken;
    #####: 1644:        while (Token::Match(tok, "const|struct"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1645:            tok = tok->next();
call    0 never executed
    #####: 1646:        if (tok && tok->strAt(1) == "*")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1647:            return true;
        -: 1648:    }
    #####: 1649:    return false;
        -: 1650:}
        -: 1651:
function _ZNK7CheckIO12ArgumentInfo13isComplexTypeEv called 0 returned 0% blocks executed 0%
    #####: 1652:bool CheckIO::ArgumentInfo::isComplexType() const
        -: 1653:{
    #####: 1654:    if (variableInfo->type())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1655:        return (true);
        -: 1656:
    #####: 1657:    const Token* varTypeTok = typeToken;
    #####: 1658:    if (varTypeTok->str() == "std")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1659:        varTypeTok = varTypeTok->tokAt(2);
call    0 never executed
        -: 1660:
    #####: 1661:    return ((variableInfo->isStlStringType() || (varTypeTok->strAt(1) == "<" && varTypeTok->linkAt(1) && varTypeTok->linkAt(1)->strAt(1) != "::")) && !variableInfo->isArrayOrPointer());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1662:}
        -: 1663:
function _ZNK7CheckIO12ArgumentInfo11isKnownTypeEv called 0 returned 0% blocks executed 0%
    #####: 1664:bool CheckIO::ArgumentInfo::isKnownType() const
        -: 1665:{
    #####: 1666:    if (variableInfo)
branch  0 never executed
branch  1 never executed
    #####: 1667:        return (typeToken->isStandardType() || typeToken->next()->isStandardType() || isComplexType());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1668:    else if (functionInfo)
branch  0 never executed
branch  1 never executed
    #####: 1669:        return (typeToken->isStandardType() || functionInfo->retType || Token::Match(typeToken, "std :: string|wstring"));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1670:
    #####: 1671:    return typeToken->isStandardType() || Token::Match(typeToken, "std :: string|wstring");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1672:}
        -: 1673:
function _ZNK7CheckIO12ArgumentInfo13isLibraryTypeEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1674:bool CheckIO::ArgumentInfo::isLibraryType(const Settings *settings) const
        -: 1675:{
    #####: 1676:    return typeToken && typeToken->isStandardType() && settings->library.podtype(typeToken->str());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1677:}
        -: 1678:
function _ZN7CheckIO30wrongPrintfScanfArgumentsErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii called 0 returned 0% blocks executed 0%
    #####: 1679:void CheckIO::wrongPrintfScanfArgumentsError(const Token* tok,
        -: 1680:        const std::string &functionName,
        -: 1681:        nonneg int numFormat,
        -: 1682:        nonneg int numFunction)
        -: 1683:{
    #####: 1684:    const Severity::SeverityType severity = numFormat > numFunction ? Severity::error : Severity::warning;
branch  0 never executed
branch  1 never executed
    #####: 1685:    if (severity != Severity::error && !mSettings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1686:        return;
        -: 1687:
    #####: 1688:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1689:    errmsg << functionName
    #####: 1690:           << " format string requires "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1691:           << numFormat
        -: 1692:           << " parameter" << (numFormat != 1 ? "s" : "") << " but "
    #####: 1693:           << (numFormat > numFunction ? "only " : "")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
        -: 1694:           << numFunction
        -: 1695:           << (numFunction != 1 ? " are" : " is")
    #####: 1696:           << " given.";
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1697:
    #####: 1698:    reportError(tok, severity, "wrongPrintfScanfArgNum", errmsg.str(), CWE685, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1699:}
        -: 1700:
function _ZN7CheckIO43wrongPrintfScanfPosixParameterPositionErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii called 0 returned 0% blocks executed 0%
    #####: 1701:void CheckIO::wrongPrintfScanfPosixParameterPositionError(const Token* tok, const std::string& functionName,
        -: 1702:        nonneg int index, nonneg int numFunction)
        -: 1703:{
    #####: 1704:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1705:        return;
    #####: 1706:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1707:    errmsg << functionName << ": ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1708:    if (index == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1709:        errmsg << "parameter positions start at 1, not 0";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1710:    } else {
    #####: 1711:        errmsg << "referencing parameter " << index << " while " << numFunction << " arguments given";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1712:    }
    #####: 1713:    reportError(tok, Severity::warning, "wrongPrintfScanfParameterPositionError", errmsg.str(), CWE685, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1714:}
        -: 1715:
function _ZN7CheckIO26invalidScanfArgTypeError_sEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1716:void CheckIO::invalidScanfArgTypeError_s(const Token* tok, nonneg int numFormat, const std::string& specifier, const ArgumentInfo* argInfo)
        -: 1717:{
    #####: 1718:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1719:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1720:        return;
    #####: 1721:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1722:    errmsg << "%" << specifier << " in format string (no. " << numFormat << ") requires a \'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1723:    if (specifier[0] == 's')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1724:        errmsg << "char";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1725:    else if (specifier[0] == 'S')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1726:        errmsg << "wchar_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1727:    errmsg << " *\' but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1728:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1729:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1730:    reportError(tok, severity, "invalidScanfArgType_s", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1731:}
function _ZN7CheckIO28invalidScanfArgTypeError_intEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_12ArgumentInfoEb called 0 returned 0% blocks executed 0%
    #####: 1732:void CheckIO::invalidScanfArgTypeError_int(const Token* tok, nonneg int numFormat, const std::string& specifier, const ArgumentInfo* argInfo, bool isUnsigned)
        -: 1733:{
    #####: 1734:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1735:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1736:        return;
    #####: 1737:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1738:    errmsg << "%" << specifier << " in format string (no. " << numFormat << ") requires \'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1739:    if (specifier[0] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1740:        if (specifier[1] == 'h')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1741:            errmsg << (isUnsigned ? "unsigned " : "") << "char";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1742:        else
    #####: 1743:            errmsg << (isUnsigned ? "unsigned " : "") << "short";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1744:    } else if (specifier[0] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1745:        if (specifier[1] == 'l')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1746:            errmsg << (isUnsigned ? "unsigned " : "") << "long long";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1747:        else
    #####: 1748:            errmsg << (isUnsigned ? "unsigned " : "") << "long";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1749:    } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1750:        errmsg << (isUnsigned ? "unsigned " : "") << "__int32";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1751:    } else if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1752:        errmsg << (isUnsigned ? "unsigned " : "") << "__int64";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1753:    } else if (specifier[0] == 'I') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1754:        errmsg << (isUnsigned ? "size_t" : "ptrdiff_t");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1755:    } else if (specifier[0] == 'j') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1756:        if (isUnsigned)
branch  0 never executed
branch  1 never executed
    #####: 1757:            errmsg << "uintmax_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1758:        else
    #####: 1759:            errmsg << "intmax_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1760:    } else if (specifier[0] == 'z') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1761:        if (specifier[1] == 'd')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1762:            errmsg << "ssize_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1763:        else
    #####: 1764:            errmsg << "size_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1765:    } else if (specifier[0] == 't') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1766:        errmsg << (isUnsigned ? "unsigned " : "") << "ptrdiff_t";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1767:    } else if (specifier[0] == 'L') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1768:        errmsg << (isUnsigned ? "unsigned " : "") << "long long";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1769:    } else {
    #####: 1770:        errmsg << (isUnsigned ? "unsigned " : "") << "int";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1771:    }
    #####: 1772:    errmsg << " *\' but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1773:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1774:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1775:    reportError(tok, severity, "invalidScanfArgType_int", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1776:}
function _ZN7CheckIO30invalidScanfArgTypeError_floatEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1777:void CheckIO::invalidScanfArgTypeError_float(const Token* tok, nonneg int numFormat, const std::string& specifier, const ArgumentInfo* argInfo)
        -: 1778:{
    #####: 1779:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1780:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1781:        return;
    #####: 1782:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1783:    errmsg << "%" << specifier << " in format string (no. " << numFormat << ") requires \'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1784:    if (specifier[0] == 'l' && specifier[1] != 'l')
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1785:        errmsg << "double";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1786:    else if (specifier[0] == 'L')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1787:        errmsg << "long double";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1788:    else
    #####: 1789:        errmsg << "float";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1790:    errmsg << " *\' but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1791:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1792:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1793:    reportError(tok, severity, "invalidScanfArgType_float", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1794:}
        -: 1795:
function _ZN7CheckIO27invalidPrintfArgTypeError_sEPK5TokeniPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1796:void CheckIO::invalidPrintfArgTypeError_s(const Token* tok, nonneg int numFormat, const ArgumentInfo* argInfo)
        -: 1797:{
    #####: 1798:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1799:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1800:        return;
    #####: 1801:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1802:    errmsg << "%s in format string (no. " << numFormat << ") requires \'char *\' but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1803:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1804:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1805:    reportError(tok, severity, "invalidPrintfArgType_s", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1806:}
function _ZN7CheckIO27invalidPrintfArgTypeError_nEPK5TokeniPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1807:void CheckIO::invalidPrintfArgTypeError_n(const Token* tok, nonneg int numFormat, const ArgumentInfo* argInfo)
        -: 1808:{
    #####: 1809:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1810:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1811:        return;
    #####: 1812:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1813:    errmsg << "%n in format string (no. " << numFormat << ") requires \'int *\' but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1814:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1815:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1816:    reportError(tok, severity, "invalidPrintfArgType_n", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1817:}
function _ZN7CheckIO27invalidPrintfArgTypeError_pEPK5TokeniPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1818:void CheckIO::invalidPrintfArgTypeError_p(const Token* tok, nonneg int numFormat, const ArgumentInfo* argInfo)
        -: 1819:{
    #####: 1820:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1821:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1822:        return;
    #####: 1823:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1824:    errmsg << "%p in format string (no. " << numFormat << ") requires an address but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1825:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1826:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1827:    reportError(tok, severity, "invalidPrintfArgType_p", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1828:}
function _ZL16printfFormatTypeRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1829:static void printfFormatType(std::ostream& os, const std::string& specifier, bool isUnsigned)
        -: 1830:{
    #####: 1831:    os << "\'";
call    0 never executed
    #####: 1832:    if (specifier[0] == 'l') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1833:        if (specifier[1] == 'l')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1834:            os << (isUnsigned ? "unsigned " : "") << "long long";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1835:        else
    #####: 1836:            os << (isUnsigned ? "unsigned " : "") << "long";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1837:    } else if (specifier[0] == 'h') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1838:        if (specifier[1] == 'h')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1839:            os << (isUnsigned ? "unsigned " : "") << "char";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1840:        else
    #####: 1841:            os << (isUnsigned ? "unsigned " : "") << "short";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1842:    } else if (specifier.find("I32") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1843:        os << (isUnsigned ? "unsigned " : "") << "__int32";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1844:    } else if (specifier.find("I64") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1845:        os << (isUnsigned ? "unsigned " : "") << "__int64";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1846:    } else if (specifier[0] == 'I') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1847:        os << (isUnsigned ? "size_t" : "ptrdiff_t");
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1848:    } else if (specifier[0] == 'j') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1849:        if (isUnsigned)
branch  0 never executed
branch  1 never executed
    #####: 1850:            os << "uintmax_t";
call    0 never executed
        -: 1851:        else
    #####: 1852:            os << "intmax_t";
call    0 never executed
    #####: 1853:    } else if (specifier[0] == 'z') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1854:        if (specifier[1] == 'd')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1855:            os << "ssize_t";
call    0 never executed
        -: 1856:        else
    #####: 1857:            os << "size_t";
call    0 never executed
    #####: 1858:    } else if (specifier[0] == 't') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1859:        os << (isUnsigned ? "unsigned " : "") << "ptrdiff_t";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 1860:    } else if (specifier[0] == 'L') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1861:        os << (isUnsigned ? "unsigned " : "") << "long long";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1862:    } else {
    #####: 1863:        os << (isUnsigned ? "unsigned " : "") << "int";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1864:    }
    #####: 1865:    os << "\'";
call    0 never executed
    #####: 1866:}
        -: 1867:
function _ZN7CheckIO30invalidPrintfArgTypeError_uintEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1868:void CheckIO::invalidPrintfArgTypeError_uint(const Token* tok, nonneg int numFormat, const std::string& specifier, const ArgumentInfo* argInfo)
        -: 1869:{
    #####: 1870:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1871:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1872:        return;
    #####: 1873:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1874:    errmsg << "%" << specifier << " in format string (no. " << numFormat << ") requires ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1875:    printfFormatType(errmsg, specifier, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1876:    errmsg << " but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1877:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1878:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1879:    reportError(tok, severity, "invalidPrintfArgType_uint", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1880:}
        -: 1881:
function _ZN7CheckIO30invalidPrintfArgTypeError_sintEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1882:void CheckIO::invalidPrintfArgTypeError_sint(const Token* tok, nonneg int numFormat, const std::string& specifier, const ArgumentInfo* argInfo)
        -: 1883:{
    #####: 1884:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1885:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1886:        return;
    #####: 1887:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1888:    errmsg << "%" << specifier << " in format string (no. " << numFormat << ") requires ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1889:    printfFormatType(errmsg, specifier, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1890:    errmsg << " but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1891:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1892:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1893:    reportError(tok, severity, "invalidPrintfArgType_sint", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1894:}
function _ZN7CheckIO31invalidPrintfArgTypeError_floatEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1895:void CheckIO::invalidPrintfArgTypeError_float(const Token* tok, nonneg int numFormat, const std::string& specifier, const ArgumentInfo* argInfo)
        -: 1896:{
    #####: 1897:    const Severity::SeverityType severity = getSeverity(argInfo);
call    0 never executed
    #####: 1898:    if (!mSettings->isEnabled(severity))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1899:        return;
    #####: 1900:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1901:    errmsg << "%" << specifier << " in format string (no. " << numFormat << ") requires \'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1902:    if (specifier[0] == 'L')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1903:        errmsg << "long ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1904:    errmsg << "double\' but the argument type is ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1905:    argumentType(errmsg, argInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1906:    errmsg << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1907:    reportError(tok, severity, "invalidPrintfArgType_float", errmsg.str(), CWE686, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1908:}
        -: 1909:
function _ZN7CheckIO11getSeverityEPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1910:Severity::SeverityType CheckIO::getSeverity(const CheckIO::ArgumentInfo *argInfo)
        -: 1911:{
    #####: 1912:    return (argInfo && argInfo->typeToken && !argInfo->typeToken->originalName().empty()) ? Severity::portability : Severity::warning;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1913:}
        -: 1914:
function _ZN7CheckIO12argumentTypeERSoPKNS_12ArgumentInfoE called 0 returned 0% blocks executed 0%
    #####: 1915:void CheckIO::argumentType(std::ostream& os, const ArgumentInfo * argInfo)
        -: 1916:{
    #####: 1917:    if (argInfo) {
branch  0 never executed
branch  1 never executed
    #####: 1918:        os << "\'";
call    0 never executed
    #####: 1919:        const Token *type = argInfo->typeToken;
    #####: 1920:        if (type->tokType() == Token::eString) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1921:            if (type->isLong())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1922:                os << "const wchar_t *";
call    0 never executed
        -: 1923:            else
    #####: 1924:                os << "const char *";
call    0 never executed
        -: 1925:        } else {
    #####: 1926:            if (type->originalName().empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1927:                if (type->strAt(-1) == "const")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1928:                    os << "const ";
call    0 never executed
    #####: 1929:                while (Token::Match(type, "const|struct")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1930:                    os << type->str() << " ";
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1931:                    type = type->next();
call    0 never executed
        -: 1932:                }
    #####: 1933:                while (Token::Match(type, "%any% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1934:                    os << type->str() << "::";
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1935:                    type = type->tokAt(2);
call    0 never executed
        -: 1936:                }
    #####: 1937:                type->stringify(os, false, true, false);
call    0 never executed
    #####: 1938:                if (type->strAt(1) == "*" && !argInfo->element)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1939:                    os << " *";
call    0 never executed
    #####: 1940:                else if (argInfo->variableInfo && !argInfo->element && argInfo->variableInfo->isArray())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1941:                    os << " *";
call    0 never executed
    #####: 1942:                else if (type->strAt(1) == "*" && argInfo->variableInfo && argInfo->element && argInfo->variableInfo->isArray())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1943:                    os << " *";
call    0 never executed
    #####: 1944:                if (argInfo->address)
branch  0 never executed
branch  1 never executed
    #####: 1945:                    os << " *";
call    0 never executed
        -: 1946:            } else {
    #####: 1947:                if (type->isUnsigned()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1948:                    if (type->originalName() == "__int64" || type->originalName() == "__int32" || type->originalName() == "ptrdiff_t")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1949:                        os << "unsigned ";
call    0 never executed
        -: 1950:                }
    #####: 1951:                os << type->originalName();
call    0 never executed
call    1 never executed
    #####: 1952:                if (type->strAt(1) == "*" || argInfo->address)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1953:                    os << " *";
call    0 never executed
    #####: 1954:                os << " {aka ";
call    0 never executed
    #####: 1955:                type->stringify(os, false, true, false);
call    0 never executed
    #####: 1956:                if (type->strAt(1) == "*" || argInfo->address)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1957:                    os << " *";
call    0 never executed
    #####: 1958:                os << "}";
call    0 never executed
        -: 1959:            }
        -: 1960:        }
    #####: 1961:        os << "\'";
call    0 never executed
        -: 1962:    } else
    #####: 1963:        os << "Unknown";
call    0 never executed
    #####: 1964:}
        -: 1965:
function _ZN7CheckIO26invalidLengthModifierErrorEPK5TokeniRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1966:void CheckIO::invalidLengthModifierError(const Token* tok, nonneg int numFormat, const std::string& modifier)
        -: 1967:{
    #####: 1968:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1969:        return;
    #####: 1970:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1971:    errmsg << "'" << modifier << "' in format string (no. " << numFormat << ") is a length modifier and cannot be used without a conversion specifier.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1972:    reportError(tok, Severity::warning, "invalidLengthModifierError", errmsg.str(), CWE704, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1973:}
        -: 1974:
function _ZN7CheckIO28invalidScanfFormatWidthErrorEPK5TokeniiPK8Variablec called 0 returned 0% blocks executed 0%
    #####: 1975:void CheckIO::invalidScanfFormatWidthError(const Token* tok, nonneg int numFormat, int width, const Variable *var, char c)
        -: 1976:{
    #####: 1977:    MathLib::bigint arrlen = 0;
    #####: 1978:    std::string varname;
call    0 never executed
call    1 never executed
        -: 1979:
    #####: 1980:    if (var) {
branch  0 never executed
branch  1 never executed
    #####: 1981:        arrlen = var->dimension(0);
call    0 never executed
    #####: 1982:        varname = var->name();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1983:    }
        -: 1984:
    #####: 1985:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 1986:    if (arrlen > width) {
branch  0 never executed
branch  1 never executed
    #####: 1987:        if (tok != nullptr && (!mSettings->inconclusive || !mSettings->isEnabled(Settings::WARNING)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1988:            return;
    #####: 1989:        errmsg << "Width " << width << " given in format string (no. " << numFormat << ") is smaller than destination buffer"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1990:               << " '" << varname << "[" << arrlen << "]'.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    #####: 1991:        reportError(tok, Severity::warning, "invalidScanfFormatWidth_smaller", errmsg.str(), CWE(0U), true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1992:    } else {
    #####: 1993:        errmsg << "Width " << width << " given in format string (no. " << numFormat << ") is larger than destination buffer '"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1994:               << varname << "[" << arrlen << "]', use %" << (c == 'c' ? arrlen : (arrlen - 1)) << c << " to prevent overflowing it.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
    #####: 1995:        reportError(tok, Severity::error, "invalidScanfFormatWidth", errmsg.str(), CWE687, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 1996:    }
function _GLOBAL__sub_I__ZN7CheckIO21checkCoutCerrMisusageEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 52%
        3: 1997:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
