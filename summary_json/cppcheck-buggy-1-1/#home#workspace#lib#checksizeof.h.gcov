        -:    0:Source:/home/workspace/lib/checksizeof.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checksizeof.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checksizeof.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checksizeofH
        -:   22:#define checksizeofH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:
        -:   28:#include <string>
        -:   29:
        -:   30:class ErrorLogger;
        -:   31:class Settings;
        -:   32:class Token;
        -:   33:class Tokenizer;
        -:   34:
        -:   35:/// @addtogroup Checks
        -:   36:/// @{
        -:   37:
        -:   38:
        -:   39:/** @brief checks on usage of sizeof() operator */
        -:   40:
function _ZN11CheckSizeofD0Ev called 0 returned 0% blocks executed 0%
function _ZN11CheckSizeofD2Ev called 0 returned 0% blocks executed 0%
    #####:   41:class CPPCHECKLIB CheckSizeof : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   42:public:
        -:   43:    /** @brief This constructor is used when registering the CheckClass */
function _ZN11CheckSizeofC2Ev called 1 returned 100% blocks executed 71%
        1:   44:    CheckSizeof() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   45:    }
        -:   46:
        -:   47:    /** @brief This constructor is used when running checks. */
function _ZN11CheckSizeofC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   48:    CheckSizeof(const Tokenizer* tokenizer, const Settings* settings, ErrorLogger* errorLogger)
    #####:   49:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   50:    }
        -:   51:
        -:   52:    /** @brief Run checks against the normal token list */
function _ZN11CheckSizeof9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   53:    void runChecks(const Tokenizer* tokenizer, const Settings* settings, ErrorLogger* errorLogger) OVERRIDE {
    #####:   54:        CheckSizeof checkSizeof(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   55:
        -:   56:        // Checks
    #####:   57:        checkSizeof.sizeofsizeof();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:        checkSizeof.sizeofCalculation();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:        checkSizeof.sizeofFunction();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:        checkSizeof.suspiciousSizeofCalculation();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:        checkSizeof.checkSizeofForArrayParameter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:        checkSizeof.checkSizeofForPointerSize();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:        checkSizeof.checkSizeofForNumericParameter();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:        checkSizeof.sizeofVoid();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:    }
        -:   66:
        -:   67:    /** @brief %Check for 'sizeof sizeof ..' */
        -:   68:    void sizeofsizeof();
        -:   69:
        -:   70:    /** @brief %Check for calculations inside sizeof */
        -:   71:    void sizeofCalculation();
        -:   72:
        -:   73:    /** @brief %Check for function call inside sizeof */
        -:   74:    void sizeofFunction();
        -:   75:
        -:   76:    /** @brief %Check for suspicious calculations with sizeof results */
        -:   77:    void suspiciousSizeofCalculation();
        -:   78:
        -:   79:    /** @brief %Check for using sizeof with array given as function argument */
        -:   80:    void checkSizeofForArrayParameter();
        -:   81:
        -:   82:    /** @brief %Check for using sizeof of a variable when allocating it */
        -:   83:    void checkSizeofForPointerSize();
        -:   84:
        -:   85:    /** @brief %Check for using sizeof with numeric given as function argument */
        -:   86:    void checkSizeofForNumericParameter();
        -:   87:
        -:   88:    /** @brief %Check for using sizeof(void) */
        -:   89:    void sizeofVoid();
        -:   90:
        -:   91:private:
        -:   92:    // Error messages..
        -:   93:    void sizeofsizeofError(const Token* tok);
        -:   94:    void sizeofCalculationError(const Token* tok, bool inconclusive);
        -:   95:    void sizeofFunctionError(const Token* tok);
        -:   96:    void multiplySizeofError(const Token* tok);
        -:   97:    void divideSizeofError(const Token* tok);
        -:   98:    void sizeofForArrayParameterError(const Token* tok);
        -:   99:    void sizeofForPointerError(const Token* tok, const std::string &varname);
        -:  100:    void divideBySizeofError(const Token* tok, const std::string &memfunc);
        -:  101:    void sizeofForNumericParameterError(const Token* tok);
        -:  102:    void sizeofVoidError(const Token *tok);
        -:  103:    void sizeofDereferencedVoidPointerError(const Token *tok, const std::string &varname);
        -:  104:    void arithOperationsOnVoidPointerError(const Token* tok, const std::string &varname, const std::string &vartype);
        -:  105:
function _ZNK11CheckSizeof16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  106:    void getErrorMessages(ErrorLogger* errorLogger, const Settings* settings) const OVERRIDE {
    #####:  107:        CheckSizeof c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  108:
    #####:  109:        c.sizeofForArrayParameterError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:        c.sizeofForPointerError(nullptr, "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  111:        c.divideBySizeofError(nullptr, "memset");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  112:        c.sizeofForNumericParameterError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:        c.sizeofsizeofError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  114:        c.sizeofCalculationError(nullptr, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  115:        c.sizeofFunctionError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:        c.multiplySizeofError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  117:        c.divideSizeofError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:        c.sizeofVoidError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  119:        c.sizeofDereferencedVoidPointerError(nullptr, "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  120:        c.arithOperationsOnVoidPointerError(nullptr, "varname", "vartype");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  121:    }
        -:  122:
function _ZN11CheckSizeof6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  123:    static std::string myName() {
    #####:  124:        return "Sizeof";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  125:    }
        -:  126:
function _ZNK11CheckSizeof9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  127:    std::string classInfo() const OVERRIDE {
        -:  128:        return "sizeof() usage checks\n"
        -:  129:               "- sizeof for array given as function argument\n"
        -:  130:               "- sizeof for numeric given as function argument\n"
        -:  131:               "- using sizeof(pointer) instead of the size of pointed data\n"
        -:  132:               "- look for 'sizeof sizeof ..'\n"
        -:  133:               "- look for calculations inside sizeof()\n"
        -:  134:               "- look for function calls inside sizeof()\n"
        -:  135:               "- look for suspicious calculations with sizeof()\n"
    #####:  136:               "- using 'sizeof(void)' which is undefined\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  137:    }
        -:  138:};
        -:  139:/// @}
        -:  140://---------------------------------------------------------------------------
        -:  141:#endif // checksizeofH
