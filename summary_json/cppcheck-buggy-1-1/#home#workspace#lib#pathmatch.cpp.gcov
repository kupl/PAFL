        -:    0:Source:/home/workspace/lib/pathmatch.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/pathmatch.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/pathmatch.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2018 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "pathmatch.h"
        -:   20:
        -:   21:#include "path.h"
        -:   22:#include "utils.h"
        -:   23:
        -:   24:#include <algorithm>
        -:   25:#include <cctype>
        -:   26:#include <cstddef>
        -:   27:
function _ZN9PathMatchC2ERKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEb called 4 returned 100% blocks executed 25%
        4:   28:PathMatch::PathMatch(const std::vector<std::string> &excludedPaths, bool caseSensitive)
        4:   29:    : mExcludedPaths(excludedPaths), mCaseSensitive(caseSensitive)
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   30:{
        4:   31:    if (!mCaseSensitive)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:        for (std::vector<std::string>::iterator i = mExcludedPaths.begin(); i != mExcludedPaths.end(); ++i)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   33:            std::transform(i->begin(), i->end(), i->begin(), ::tolower);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        4:   34:    mWorkingDirectory.push_back(Path::getCurrentPath());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        4:   35:}
        -:   36:
function _ZNK9PathMatch5matchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   37:bool PathMatch::match(const std::string &path) const
        -:   38:{
    #####:   39:    if (path.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   40:        return false;
        -:   41:
    #####:   42:    for (std::vector<std::string>::const_iterator i = mExcludedPaths.begin(); i != mExcludedPaths.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:   43:        const std::string excludedPath((!Path::isAbsolute(path) && Path::isAbsolute(*i)) ? Path::getRelativePath(*i, mWorkingDirectory) : *i);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
        -:   44:
    #####:   45:        std::string findpath = Path::fromNativeSeparators(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####:   46:        if (!mCaseSensitive)
branch  0 never executed
branch  1 never executed
    #####:   47:            std::transform(findpath.begin(), findpath.end(), findpath.begin(), ::tolower);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   48:
        -:   49:        // Filtering directory name
    #####:   50:        if (endsWith(excludedPath,'/')) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:            if (!endsWith(findpath,'/'))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   52:                findpath = removeFilename(findpath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   53:
    #####:   54:            if (excludedPath.length() > findpath.length())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   55:                continue;
        -:   56:            // Match relative paths starting with mask
        -:   57:            // -isrc matches src/foo.cpp
    #####:   58:            if (findpath.compare(0, excludedPath.size(), excludedPath) == 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   59:                return true;
        -:   60:            // Match only full directory name in middle or end of the path
        -:   61:            // -isrc matches myproject/src/ but does not match
        -:   62:            // myproject/srcfiles/ or myproject/mysrc/
    #####:   63:            if (findpath.find("/" + excludedPath) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   64:                return true;
        -:   65:        }
        -:   66:        // Filtering filename
        -:   67:        else {
    #####:   68:            if (excludedPath.length() > findpath.length())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   69:                continue;
        -:   70:            // Check if path ends with mask
        -:   71:            // -ifoo.cpp matches (./)foo.c, src/foo.cpp and proj/src/foo.cpp
        -:   72:            // -isrc/file.cpp matches src/foo.cpp and proj/src/foo.cpp
    #####:   73:            if (findpath.compare(findpath.size() - excludedPath.size(), findpath.size(), excludedPath) == 0)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   74:                return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   75:
        -:   76:        }
        -:   77:    }
    #####:   78:    return false;
call    0 never executed
        -:   79:}
        -:   80:
function _ZN9PathMatch14removeFilenameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   81:std::string PathMatch::removeFilename(const std::string &path)
        -:   82:{
    #####:   83:    const std::size_t ind = path.find_last_of('/');
call    0 never executed
    #####:   84:    return path.substr(0, ind + 1);
call    0 never executed
function _GLOBAL__sub_I__ZN9PathMatchC2ERKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEb called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:   85:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
