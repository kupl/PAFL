        -:    0:Source:/home/workspace/lib/checktype.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checktype.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checktype.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checktypeH
        -:   22:#define checktypeH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:#include "valueflow.h"
        -:   28:
        -:   29:class ErrorLogger;
        -:   30:class Settings;
        -:   31:class Token;
        -:   32:class Tokenizer;
        -:   33:
        -:   34:/// @addtogroup Checks
        -:   35:/// @{
        -:   36:
        -:   37:
        -:   38:/** @brief Various small checks */
        -:   39:
function _ZN9CheckTypeD0Ev called 0 returned 0% blocks executed 0%
function _ZN9CheckTypeD2Ev called 0 returned 0% blocks executed 0%
    #####:   40:class CPPCHECKLIB CheckType : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   41:public:
        -:   42:    /** @brief This constructor is used when registering the CheckClass */
function _ZN9CheckTypeC2Ev called 1 returned 100% blocks executed 71%
        1:   43:    CheckType() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   44:    }
        -:   45:
        -:   46:    /** @brief This constructor is used when running checks. */
function _ZN9CheckTypeC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   47:    CheckType(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   48:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   49:    }
        -:   50:
        -:   51:    /** @brief Run checks against the normal token list */
function _ZN9CheckType9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   52:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
        -:   53:        // These are not "simplified" because casts can't be ignored
    #####:   54:        CheckType checkType(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   55:        checkType.checkTooBigBitwiseShift();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:        checkType.checkIntegerOverflow();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:        checkType.checkSignConversion();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   58:        checkType.checkLongCast();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:        checkType.checkFloatToIntegerOverflow();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    }
        -:   61:
        -:   62:    /** @brief %Check for bitwise shift with too big right operand */
        -:   63:    void checkTooBigBitwiseShift();
        -:   64:
        -:   65:    /** @brief %Check for integer overflow */
        -:   66:    void checkIntegerOverflow();
        -:   67:
        -:   68:    /** @brief %Check for dangerous sign conversion */
        -:   69:    void checkSignConversion();
        -:   70:
        -:   71:    /** @brief %Check for implicit long cast of int result */
        -:   72:    void checkLongCast();
        -:   73:
        -:   74:    /** @brief %Check for float to integer overflow */
        -:   75:    void checkFloatToIntegerOverflow();
        -:   76:    void checkFloatToIntegerOverflow(const Token *tok, const ValueType *vtint, const ValueType *vtfloat, const std::list<ValueFlow::Value> *floatValues);
        -:   77:
        -:   78:private:
        -:   79:
        -:   80:    // Error messages..
        -:   81:    void tooBigBitwiseShiftError(const Token *tok, int lhsbits, const ValueFlow::Value &rhsbits);
        -:   82:    void tooBigSignedBitwiseShiftError(const Token *tok, int lhsbits, const ValueFlow::Value &rhsbits);
        -:   83:    void integerOverflowError(const Token *tok, const ValueFlow::Value &value);
        -:   84:    void signConversionError(const Token *tok, const ValueFlow::Value *negativeValue, const bool constvalue);
        -:   85:    void longCastAssignError(const Token *tok);
        -:   86:    void longCastReturnError(const Token *tok);
        -:   87:    void floatToIntegerOverflowError(const Token *tok, const ValueFlow::Value &value);
        -:   88:
function _ZNK9CheckType16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:   89:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:   90:        CheckType c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   91:        c.tooBigBitwiseShiftError(nullptr, 32, ValueFlow::Value(64));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   92:        c.tooBigSignedBitwiseShiftError(nullptr, 31, ValueFlow::Value(31));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   93:        c.integerOverflowError(nullptr, ValueFlow::Value(1LL<<32));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   94:        c.signConversionError(nullptr, nullptr, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:        c.longCastAssignError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   96:        c.longCastReturnError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   97:        ValueFlow::Value f;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   98:        f.valueType = ValueFlow::Value::ValueType::FLOAT;
    #####:   99:        f.floatValue = 1E100;
    #####:  100:        c.floatToIntegerOverflowError(nullptr, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:    }
        -:  102:
function _ZN9CheckType6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  103:    static std::string myName() {
    #####:  104:        return "Type";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  105:    }
        -:  106:
function _ZNK9CheckType9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  107:    std::string classInfo() const OVERRIDE {
        -:  108:        return "Type checks\n"
        -:  109:               "- bitwise shift by too many bits (only enabled when --platform is used)\n"
        -:  110:               "- signed integer overflow (only enabled when --platform is used)\n"
        -:  111:               "- dangerous sign conversion, when signed value can be negative\n"
        -:  112:               "- possible loss of information when assigning int result to long variable\n"
        -:  113:               "- possible loss of information when returning int result as long return value\n"
    #####:  114:               "- float conversion overflow\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  115:    }
        -:  116:};
        -:  117:/// @}
        -:  118://---------------------------------------------------------------------------
        -:  119:#endif // checktypeH
