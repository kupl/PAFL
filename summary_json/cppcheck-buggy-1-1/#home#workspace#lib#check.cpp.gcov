        -:    0:Source:/home/workspace/lib/check.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/check.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/check.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:
        -:   21:#include "check.h"
        -:   22:
        -:   23:#include <iostream>
        -:   24:
        -:   25://---------------------------------------------------------------------------
        -:   26:
function _ZN5CheckC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 221 returned 100% blocks executed 76%
      221:   27:Check::Check(const std::string &aname)
      221:   28:    : mTokenizer(nullptr), mSettings(nullptr), mErrorLogger(nullptr), mName(aname)
call    0 returned 100%
call    1 never executed
        -:   29:{
     2885:   30:    for (std::list<Check*>::iterator i = instances().begin(); i != instances().end(); ++i) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 8%
branch 11 taken 92%
call   12 never executed
     2868:   31:        if ((*i)->name() > aname) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
      204:   32:            instances().insert(i, this);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
      204:   33:            return;
        -:   34:        }
        -:   35:    }
       17:   36:    instances().push_back(this);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   37:}
        -:   38:
function _ZN5Check11reportErrorERKN11ErrorLogger12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:   39:void Check::reportError(const ErrorLogger::ErrorMessage &errmsg)
        -:   40:{
    #####:   41:    std::cout << errmsg.toXML() << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:   42:}
        -:   43:
function _ZN5Check9wrongDataEPK5TokenbPKc called 0 returned 0% blocks executed 0%
    #####:   44:bool Check::wrongData(const Token *tok, bool condition, const char *str)
        -:   45:{
        -:   46:#if defined(DACA2) || defined(UNSTABLE)
        -:   47:    if (condition) {
        -:   48:        reportError(tok, Severity::debug, "DacaWrongData", "Wrong data detected by condition " + std::string(str));
        -:   49:    }
        -:   50:#else
        -:   51:    (void)tok;
        -:   52:    (void)str;
        -:   53:#endif
    #####:   54:    return condition;
        -:   55:}
        -:   56:
function _ZN5Check9instancesEv called 3548 returned 100% blocks executed 100%
     3548:   57:std::list<Check *> &Check::instances()
        -:   58:{
        -:   59:#ifdef __SVR4
        -:   60:    // Under Solaris, destructors are called in wrong order which causes a segmentation fault.
        -:   61:    // This fix ensures pointer remains valid and reachable until program terminates.
        -:   62:    static std::list<Check *> *_instances= new std::list<Check *>;
        -:   63:    return *_instances;
        -:   64:#else
     3548:   65:    static std::list<Check *> _instances;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
     3548:   66:    return _instances;
        -:   67:#endif
        -:   68:}
        -:   69:
function _ZN5Check12getMessageIdB5cxx11ERKN9ValueFlow5ValueEPKc called 0 returned 0% blocks executed 0%
    #####:   70:std::string Check::getMessageId(const ValueFlow::Value &value, const char id[])
        -:   71:{
    #####:   72:    if (value.condition != nullptr)
branch  0 never executed
branch  1 never executed
    #####:   73:        return id + std::string("Cond");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   74:    if (value.safe)
branch  0 never executed
branch  1 never executed
    #####:   75:        return std::string("safe") + (char)std::toupper(id[0]) + (id + 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####:   76:    return id;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
function _GLOBAL__sub_I__ZN5CheckC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:   77:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
