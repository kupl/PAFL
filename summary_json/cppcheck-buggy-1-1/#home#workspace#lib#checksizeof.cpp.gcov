        -:    0:Source:/home/workspace/lib/checksizeof.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checksizeof.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checksizeof.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "checksizeof.h"
        -:   22:
        -:   23:#include "errorlogger.h"
        -:   24:#include "settings.h"
        -:   25:#include "symboldatabase.h"
        -:   26:#include "token.h"
        -:   27:#include "tokenize.h"
        -:   28:
        -:   29:#include <cstddef>
        -:   30://---------------------------------------------------------------------------
        -:   31:
        -:   32:// Register this check class (by creating a static instance of it)
        -:   33:namespace {
        1:   34:    CheckSizeof instance;
call    0 returned 100%
call    1 returned 100%
        -:   35:}
        -:   36:
        -:   37:// CWE IDs used:
        1:   38:static const struct CWE CWE398(398U);   // Indicator of Poor Code Quality
call    0 returned 100%
        1:   39:static const struct CWE CWE467(467U);   // Use of sizeof() on a Pointer Type
call    0 returned 100%
        1:   40:static const struct CWE CWE682(682U);   // Incorrect Calculation
call    0 returned 100%
        -:   41://---------------------------------------------------------------------------
        -:   42://---------------------------------------------------------------------------
function _ZN11CheckSizeof30checkSizeofForNumericParameterEv called 0 returned 0% blocks executed 0%
    #####:   43:void CheckSizeof::checkSizeofForNumericParameter()
        -:   44:{
    #####:   45:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   46:        return;
        -:   47:
    #####:   48:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:   49:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   50:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   51:            if (Token::Match(tok, "sizeof ( %num% )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   52:                Token::Match(tok, "sizeof %num%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:                sizeofForNumericParameterError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   54:            }
        -:   55:        }
        -:   56:    }
        -:   57:}
        -:   58:
function _ZN11CheckSizeof30sizeofForNumericParameterErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:   59:void CheckSizeof::sizeofForNumericParameterError(const Token *tok)
        -:   60:{
    #####:   61:    reportError(tok, Severity::warning,
call    0 never executed
        -:   62:                "sizeofwithnumericparameter", "Suspicious usage of 'sizeof' with a numeric constant as parameter.\n"
        -:   63:                "It is unusual to use a constant value with sizeof. For example, 'sizeof(10)'"
        -:   64:                " returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 10. 'sizeof('A')'"
        -:   65:                " and 'sizeof(char)' can return different results.", CWE682, false);
    #####:   66:}
        -:   67:
        -:   68:
        -:   69://---------------------------------------------------------------------------
        -:   70://---------------------------------------------------------------------------
function _ZN11CheckSizeof28checkSizeofForArrayParameterEv called 0 returned 0% blocks executed 0%
    #####:   71:void CheckSizeof::checkSizeofForArrayParameter()
        -:   72:{
    #####:   73:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:        return;
    #####:   75:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:   76:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   77:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   78:            if (Token::Match(tok, "sizeof ( %var% )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   79:                Token::Match(tok, "sizeof %var% !![")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:                const Token* varTok = tok->next();
call    0 never executed
    #####:   81:                if (varTok->str() == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   82:                    varTok = varTok->next();
call    0 never executed
        -:   83:                }
        -:   84:
    #####:   85:                const Variable *var = varTok->variable();
call    0 never executed
    #####:   86:                if (var && var->isArray() && var->isArgument() && !var->isReference())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:   87:                    sizeofForArrayParameterError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   88:            }
        -:   89:        }
        -:   90:    }
        -:   91:}
        -:   92:
function _ZN11CheckSizeof28sizeofForArrayParameterErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:   93:void CheckSizeof::sizeofForArrayParameterError(const Token *tok)
        -:   94:{
    #####:   95:    reportError(tok, Severity::warning,
call    0 never executed
        -:   96:                "sizeofwithsilentarraypointer", "Using 'sizeof' on array given as function argument "
        -:   97:                "returns size of a pointer.\n"
        -:   98:                "Using 'sizeof' for array given as function argument returns the size of a pointer. "
        -:   99:                "It does not return the size of the whole array in bytes as might be "
        -:  100:                "expected. For example, this code:\n"
        -:  101:                "     int f(char a[100]) {\n"
        -:  102:                "         return sizeof(a);\n"
        -:  103:                "     }\n"
        -:  104:                "returns 4 (in 32-bit systems) or 8 (in 64-bit systems) instead of 100 (the "
        -:  105:                "size of the array in bytes).", CWE467, false
        -:  106:               );
    #####:  107:}
        -:  108:
function _ZN11CheckSizeof25checkSizeofForPointerSizeEv called 0 returned 0% blocks executed 0%
    #####:  109:void CheckSizeof::checkSizeofForPointerSize()
        -:  110:{
    #####:  111:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:        return;
        -:  113:
    #####:  114:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  115:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  116:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  117:            const Token* tokSize;
        -:  118:            const Token* tokFunc;
    #####:  119:            const Token *variable = nullptr;
    #####:  120:            const Token *variable2 = nullptr;
        -:  121:
        -:  122:            // Find any function that may use sizeof on a pointer
        -:  123:            // Once leaving those tests, it is mandatory to have:
        -:  124:            // - variable matching the used pointer
        -:  125:            // - tokVar pointing on the argument where sizeof may be used
    #####:  126:            if (Token::Match(tok->tokAt(2), "malloc|alloca|calloc (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  127:                if (Token::Match(tok, "%var% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  128:                    variable = tok;
    #####:  129:                else if (tok->strAt(1) == ")" && Token::Match(tok->linkAt(1)->tokAt(-2), "%var% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  130:                    variable = tok->linkAt(1)->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  131:                else if (tok->link() && Token::Match(tok, "> ( malloc|alloca|calloc (") && Token::Match(tok->link()->tokAt(-3), "%var% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  132:                    variable = tok->link()->tokAt(-3);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  133:                tokSize = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  134:                tokFunc = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:            } else if (Token::simpleMatch(tok, "memset (") && tok->strAt(-1) != ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  136:                variable = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  137:                tokSize = variable->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  138:                if (tokSize)
branch  0 never executed
branch  1 never executed
    #####:  139:                    tokSize = tokSize->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  140:                tokFunc = tok;
    #####:  141:            } else if (Token::Match(tok, "memcpy|memcmp|memmove|strncpy|strncmp|strncat (") && tok->strAt(-1) != ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  142:                variable = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  143:                variable2 = variable->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  144:                if (!variable2)
branch  0 never executed
branch  1 never executed
    #####:  145:                    continue;
    #####:  146:                tokSize = variable2->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  147:                tokFunc = tok;
        -:  148:            } else {
    #####:  149:                continue;
        -:  150:            }
        -:  151:
    #####:  152:            if (tokSize && tokFunc->str() == "calloc")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  153:                tokSize = tokSize->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  154:
    #####:  155:            if (tokSize) {
branch  0 never executed
branch  1 never executed
    #####:  156:                const Token * const paramsListEndTok = tokFunc->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  157:                for (const Token* tok2 = tokSize; tok2 != paramsListEndTok; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  158:                    if (Token::simpleMatch(tok2, "/ sizeof")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  159:                        // Allow division with sizeof(char)
    #####:  160:                        if (Token::simpleMatch(tok2->next(), "sizeof (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  161:                            const Token *sztok = tok2->tokAt(2)->astOperand2();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  162:                            const ValueType *vt = ((sztok != nullptr) ? sztok->valueType() : nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  163:                            if (vt && vt->type == ValueType::CHAR && vt->pointer == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  164:                                continue;
        -:  165:                        }
        -:  166:
    #####:  167:                        divideBySizeofError(tok2, tokFunc->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  168:                    }
        -:  169:                }
        -:  170:            }
        -:  171:
    #####:  172:            if (!variable || !tokSize)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  173:                continue;
        -:  174:
    #####:  175:            while (Token::Match(variable, "%var% ::|."))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  176:                variable = variable->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  177:
    #####:  178:            while (Token::Match(variable2, "%var% ::|."))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  179:                variable2 = variable2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  180:
        -:  181:            // Ensure the variables are in the symbol database
        -:  182:            // Also ensure the variables are pointers
        -:  183:            // Only keep variables which are pointers
    #####:  184:            const Variable *var = variable->variable();
call    0 never executed
    #####:  185:            if (!var || !var->isPointer() || var->isArray()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  186:                variable = nullptr;
        -:  187:            }
        -:  188:
    #####:  189:            if (variable2) {
branch  0 never executed
branch  1 never executed
    #####:  190:                var = variable2->variable();
call    0 never executed
    #####:  191:                if (!var || !var->isPointer() || var->isArray()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  192:                    variable2 = nullptr;
        -:  193:                }
        -:  194:            }
        -:  195:
        -:  196:            // If there are no pointer variable at this point, there is
        -:  197:            // no need to continue
    #####:  198:            if (variable == nullptr && variable2 == nullptr) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  199:                continue;
        -:  200:            }
        -:  201:
        -:  202:            // Jump to the next sizeof token in the function and in the parameter
        -:  203:            // This is to allow generic operations with sizeof
    #####:  204:            for (; tokSize && tokSize->str() != ")" && tokSize->str() != "," && tokSize->str() != "sizeof"; tokSize = tokSize->next()) {}
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
        -:  205:
    #####:  206:            if (tokSize->str() != "sizeof")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:                continue;
        -:  208:
        -:  209:            // Now check for the sizeof usage: Does the level of pointer indirection match?
    #####:  210:            if (tokSize->linkAt(1)->strAt(-1) == "*") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  211:                if (variable && variable->valueType() && variable->valueType()->pointer == 1 && variable->valueType()->type != ValueType::VOID)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  212:                    sizeofForPointerError(variable, variable->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  213:                else if (variable2 && variable2->valueType() && variable2->valueType()->pointer == 1 && variable2->valueType()->type != ValueType::VOID)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  214:                    sizeofForPointerError(variable2, variable2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  215:            }
        -:  216:
    #####:  217:            if (Token::simpleMatch(tokSize, "sizeof ( &"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  218:                tokSize = tokSize->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:            else if (Token::Match(tokSize, "sizeof (|&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  220:                tokSize = tokSize->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  221:            else
    #####:  222:                tokSize = tokSize->next();
call    0 never executed
        -:  223:
    #####:  224:            while (Token::Match(tokSize, "%var% ::|."))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  225:                tokSize = tokSize->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  226:
    #####:  227:            if (Token::Match(tokSize, "%var% [|("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  228:                continue;
        -:  229:
        -:  230:            // Now check for the sizeof usage again. Once here, everything using sizeof(varid) or sizeof(&varid)
        -:  231:            // looks suspicious
    #####:  232:            if (variable && tokSize->varId() == variable->varId())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  233:                sizeofForPointerError(variable, variable->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  234:            if (variable2 && tokSize->varId() == variable2->varId())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  235:                sizeofForPointerError(variable2, variable2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  236:        }
        -:  237:    }
        -:  238:}
        -:  239:
function _ZN11CheckSizeof21sizeofForPointerErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  240:void CheckSizeof::sizeofForPointerError(const Token *tok, const std::string &varname)
        -:  241:{
    #####:  242:    reportError(tok, Severity::warning, "pointerSize",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:                "Size of pointer '" + varname + "' used instead of size of its data.\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  244:                "Size of pointer '" + varname + "' used instead of size of its data. "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  245:                "This is likely to lead to a buffer overflow. You probably intend to "
    #####:  246:                "write 'sizeof(*" + varname + ")'.", CWE467, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  247:}
        -:  248:
function _ZN11CheckSizeof19divideBySizeofErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  249:void CheckSizeof::divideBySizeofError(const Token *tok, const std::string &memfunc)
        -:  250:{
    #####:  251:    reportError(tok, Severity::warning, "sizeofDivisionMemfunc",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  252:                "Division by result of sizeof(). " + memfunc + "() expects a size in bytes, did you intend to multiply instead?", CWE682, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  253:}
        -:  254:
        -:  255://-----------------------------------------------------------------------------
        -:  256://-----------------------------------------------------------------------------
function _ZN11CheckSizeof12sizeofsizeofEv called 0 returned 0% blocks executed 0%
    #####:  257:void CheckSizeof::sizeofsizeof()
        -:  258:{
    #####:  259:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  260:        return;
        -:  261:
    #####:  262:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  263:        if (Token::Match(tok, "sizeof (| sizeof")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  264:            sizeofsizeofError(tok);
call    0 never executed
    #####:  265:            tok = tok->next();
call    0 never executed
        -:  266:        }
        -:  267:    }
        -:  268:}
        -:  269:
function _ZN11CheckSizeof17sizeofsizeofErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  270:void CheckSizeof::sizeofsizeofError(const Token *tok)
        -:  271:{
    #####:  272:    reportError(tok, Severity::warning,
call    0 never executed
        -:  273:                "sizeofsizeof", "Calling 'sizeof' on 'sizeof'.\n"
        -:  274:                "Calling sizeof for 'sizeof looks like a suspicious code and "
        -:  275:                "most likely there should be just one 'sizeof'. The current "
        -:  276:                "code is equivalent to 'sizeof(size_t)'", CWE682, false);
    #####:  277:}
        -:  278:
        -:  279://-----------------------------------------------------------------------------
        -:  280:
function _ZN11CheckSizeof17sizeofCalculationEv called 0 returned 0% blocks executed 0%
    #####:  281:void CheckSizeof::sizeofCalculation()
        -:  282:{
    #####:  283:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  284:        return;
        -:  285:
    #####:  286:    const bool printInconclusive = mSettings->inconclusive;
        -:  287:
    #####:  288:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  289:        if (!Token::simpleMatch(tok, "sizeof ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  290:            continue;
        -:  291:
        -:  292:        // ignore if the `sizeof` result is cast to void inside a macro, i.e. the calculation is
        -:  293:        // expected to be parsed but skipped, such as in a disabled custom ASSERT() macro
    #####:  294:        if (tok->isExpandedMacro() && tok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  295:            const Token *cast_end = (tok->previous()->str() == "(") ? tok->previous() : tok;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  296:            if (Token::simpleMatch(cast_end->tokAt(-3), "( void )") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  297:                Token::simpleMatch(cast_end->previous(), "static_cast<void>")) {
call    0 never executed
call    1 never executed
    #####:  298:                continue;
        -:  299:            }
        -:  300:        }
        -:  301:
    #####:  302:        const Token *argument = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  303:        if (!argument || !argument->isCalculation())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  304:            continue;
        -:  305:
    #####:  306:        bool inconclusive = false;
    #####:  307:        if (argument->isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  308:            inconclusive = true;
    #####:  309:        else if (tok->next()->isExpandedMacro())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  310:            inconclusive = true;
        -:  311:
    #####:  312:        if (!inconclusive || printInconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  313:            sizeofCalculationError(argument, inconclusive);
call    0 never executed
        -:  314:    }
        -:  315:}
        -:  316:
function _ZN11CheckSizeof22sizeofCalculationErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  317:void CheckSizeof::sizeofCalculationError(const Token *tok, bool inconclusive)
        -:  318:{
    #####:  319:    reportError(tok, Severity::warning,
call    0 never executed
        -:  320:                "sizeofCalculation", "Found calculation inside sizeof().", CWE682, inconclusive);
    #####:  321:}
        -:  322:
        -:  323://-----------------------------------------------------------------------------
        -:  324:
function _ZN11CheckSizeof14sizeofFunctionEv called 0 returned 0% blocks executed 0%
    #####:  325:void CheckSizeof::sizeofFunction()
        -:  326:{
    #####:  327:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  328:        return;
        -:  329:
    #####:  330:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  331:        if (Token::simpleMatch(tok, "sizeof (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  332:
        -:  333:            // ignore if the `sizeof` result is cast to void inside a macro, i.e. the calculation is
        -:  334:            // expected to be parsed but skipped, such as in a disabled custom ASSERT() macro
    #####:  335:            if (tok->isExpandedMacro() && tok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  336:                const Token *cast_end = (tok->previous()->str() == "(") ? tok->previous() : tok;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  337:                if (Token::simpleMatch(cast_end->tokAt(-3), "( void )") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  338:                    Token::simpleMatch(cast_end->previous(), "static_cast<void>")) {
call    0 never executed
call    1 never executed
    #####:  339:                    continue;
        -:  340:                }
        -:  341:            }
        -:  342:
    #####:  343:            if (const Token *argument = tok->next()->astOperand2()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  344:                const Token *checkToken = argument->previous();
call    0 never executed
    #####:  345:                if (checkToken->tokType() == Token::eName)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  346:                    break;
    #####:  347:                const Function * fun = checkToken->function();
call    0 never executed
        -:  348:                // Don't report error if the function is overloaded
    #####:  349:                if (fun && fun->nestedIn->functionMap.count(checkToken->str()) == 1) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  350:                    sizeofFunctionError(tok);
call    0 never executed
        -:  351:                }
        -:  352:            }
        -:  353:        }
        -:  354:    }
        -:  355:}
        -:  356:
function _ZN11CheckSizeof19sizeofFunctionErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  357:void CheckSizeof::sizeofFunctionError(const Token *tok)
        -:  358:{
    #####:  359:    reportError(tok, Severity::warning,
call    0 never executed
        -:  360:                "sizeofFunctionCall", "Found function call inside sizeof().", CWE682, false);
    #####:  361:}
        -:  362:
        -:  363://-----------------------------------------------------------------------------
        -:  364:// Check for code like sizeof()*sizeof() or sizeof(ptr)/value
        -:  365://-----------------------------------------------------------------------------
function _ZN11CheckSizeof27suspiciousSizeofCalculationEv called 0 returned 0% blocks executed 0%
    #####:  366:void CheckSizeof::suspiciousSizeofCalculation()
        -:  367:{
    #####:  368:    if (!mSettings->isEnabled(Settings::WARNING) || !mSettings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  369:        return;
        -:  370:
        -:  371:    // TODO: Use AST here. This should be possible as soon as sizeof without brackets is correctly parsed
    #####:  372:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  373:        if (Token::simpleMatch(tok, "sizeof (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  374:            const Token* const end = tok->linkAt(1);
call    0 never executed
    #####:  375:            const Variable* var = end->previous()->variable();
call    0 never executed
call    1 never executed
    #####:  376:            if (end->strAt(-1) == "*" || (var && var->isPointer() && !var->isArray())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  377:                if (end->strAt(1) == "/")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  378:                    divideSizeofError(tok);
call    0 never executed
    #####:  379:            } else if (Token::simpleMatch(end, ") * sizeof") && end->next()->astOperand1() == tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  380:                multiplySizeofError(tok);
call    0 never executed
        -:  381:        }
        -:  382:    }
        -:  383:}
        -:  384:
function _ZN11CheckSizeof19multiplySizeofErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  385:void CheckSizeof::multiplySizeofError(const Token *tok)
        -:  386:{
    #####:  387:    reportError(tok, Severity::warning,
call    0 never executed
        -:  388:                "multiplySizeof", "Multiplying sizeof() with sizeof() indicates a logic error.", CWE682, true);
    #####:  389:}
        -:  390:
function _ZN11CheckSizeof17divideSizeofErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  391:void CheckSizeof::divideSizeofError(const Token *tok)
        -:  392:{
    #####:  393:    reportError(tok, Severity::warning,
call    0 never executed
        -:  394:                "divideSizeof", "Division of result of sizeof() on pointer type.\n"
        -:  395:                "Division of result of sizeof() on pointer type. sizeof() returns the size of the pointer, "
        -:  396:                "not the size of the memory area it points to.", CWE682, true);
    #####:  397:}
        -:  398:
function _ZN11CheckSizeof10sizeofVoidEv called 0 returned 0% blocks executed 0%
    #####:  399:void CheckSizeof::sizeofVoid()
        -:  400:{
    #####:  401:    if (!mSettings->isEnabled(Settings::PORTABILITY))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  402:        return;
        -:  403:
    #####:  404:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  405:        if (Token::simpleMatch(tok, "sizeof ( )")) { // "sizeof(void)" gets simplified to sizeof ( )
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  406:            sizeofVoidError(tok);
call    0 never executed
    #####:  407:        } else if (Token::simpleMatch(tok, "sizeof (") && tok->next()->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  408:            const ValueType *vt = tok->next()->astOperand2()->valueType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  409:            if (vt && vt->type == ValueType::Type::VOID && vt->pointer == 0U)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  410:                sizeofDereferencedVoidPointerError(tok, tok->strAt(3));
call    0 never executed
call    1 never executed
    #####:  411:        } else if (tok->str() == "-") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  412:            // only warn for: 'void *' - 'integral'
    #####:  413:            const ValueType *vt1  = tok->astOperand1() ? tok->astOperand1()->valueType() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  414:            const ValueType *vt2  = tok->astOperand2() ? tok->astOperand2()->valueType() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  415:            const bool op1IsvoidPointer = (vt1 && vt1->type == ValueType::Type::VOID && vt1->pointer == 1U);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  416:            const bool op2IsIntegral    = (vt2 && vt2->isIntegral() && vt2->pointer == 0U);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  417:            if (op1IsvoidPointer && op2IsIntegral)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  418:                arithOperationsOnVoidPointerError(tok, tok->astOperand1()->expressionString(), vt1->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  419:        } else if (Token::Match(tok, "+|++|--|+=|-=")) { // Arithmetic operations on variable of type "void*"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  420:            const ValueType *vt1 = tok->astOperand1() ? tok->astOperand1()->valueType() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  421:            const ValueType *vt2 = tok->astOperand2() ? tok->astOperand2()->valueType() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  422:
    #####:  423:            const bool voidpointer1 = (vt1 && vt1->type == ValueType::Type::VOID && vt1->pointer == 1U);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  424:            const bool voidpointer2 = (vt2 && vt2->type == ValueType::Type::VOID && vt2->pointer == 1U);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  425:
    #####:  426:            if (voidpointer1)
branch  0 never executed
branch  1 never executed
    #####:  427:                arithOperationsOnVoidPointerError(tok, tok->astOperand1()->expressionString(), vt1->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  428:
    #####:  429:            if (!tok->isAssignmentOp() && voidpointer2)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  430:                arithOperationsOnVoidPointerError(tok, tok->astOperand2()->expressionString(), vt2->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  431:        }
        -:  432:    }
        -:  433:}
        -:  434:
function _ZN11CheckSizeof15sizeofVoidErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  435:void CheckSizeof::sizeofVoidError(const Token *tok)
        -:  436:{
    #####:  437:    const std::string message = "Behaviour of 'sizeof(void)' is not covered by the ISO C standard.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  438:    const std::string verbose = message + " A value for 'sizeof(void)' is defined only as part of a GNU C extension, which defines 'sizeof(void)' to be 1.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  439:    reportError(tok, Severity::portability, "sizeofVoid", message + "\n" + verbose, CWE682, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  440:}
call    0 never executed
        -:  441:
function _ZN11CheckSizeof34sizeofDereferencedVoidPointerErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  442:void CheckSizeof::sizeofDereferencedVoidPointerError(const Token *tok, const std::string &varname)
        -:  443:{
    #####:  444:    const std::string message = "'*" + varname + "' is of type 'void', the behaviour of 'sizeof(void)' is not covered by the ISO C standard.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  445:    const std::string verbose = message + " A value for 'sizeof(void)' is defined only as part of a GNU C extension, which defines 'sizeof(void)' to be 1.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  446:    reportError(tok, Severity::portability, "sizeofDereferencedVoidPointer", message + "\n" + verbose, CWE682, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  447:}
call    0 never executed
        -:  448:
function _ZN11CheckSizeof33arithOperationsOnVoidPointerErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####:  449:void CheckSizeof::arithOperationsOnVoidPointerError(const Token* tok, const std::string &varname, const std::string &vartype)
        -:  450:{
    #####:  451:    const std::string message = "'$symbol' is of type '" + vartype + "'. When using void pointers in calculations, the behaviour is undefined.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  452:    const std::string verbose = message + " Arithmetic operations on 'void *' is a GNU C extension, which defines the 'sizeof(void)' to be 1.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  453:    reportError(tok, Severity::portability, "arithOperationsOnVoidPointer", "$symbol:" + varname + '\n' + message + '\n' + verbose, CWE467, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
function _GLOBAL__sub_I__ZN11CheckSizeof30checkSizeofForNumericParameterEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  454:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
