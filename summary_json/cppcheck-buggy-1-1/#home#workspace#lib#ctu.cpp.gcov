        -:    0:Source:/home/workspace/lib/ctu.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/ctu.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/ctu.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "ctu.h"
        -:   22:#include "astutils.h"
        -:   23:#include "symboldatabase.h"
        -:   24:#include <tinyxml2.h>
        -:   25:#include <iterator>  // back_inserter
        -:   26://---------------------------------------------------------------------------
        -:   27:
        -:   28:static const char ATTR_CALL_ID[] = "call-id";
        -:   29:static const char ATTR_CALL_FUNCNAME[] = "call-funcname";
        -:   30:static const char ATTR_CALL_ARGNR[] = "call-argnr";
        -:   31:static const char ATTR_CALL_ARGEXPR[] = "call-argexpr";
        -:   32:static const char ATTR_CALL_ARGVALUETYPE[] = "call-argvaluetype";
        -:   33:static const char ATTR_CALL_ARGVALUE[] = "call-argvalue";
        -:   34:static const char ATTR_WARNING[] = "warning";
        -:   35:static const char ATTR_LOC_FILENAME[] = "file";
        -:   36:static const char ATTR_LOC_LINENR[] = "line";
        -:   37:static const char ATTR_LOC_COLUMN[] = "col";
        -:   38:static const char ATTR_INFO[] = "info";
        -:   39:static const char ATTR_MY_ID[] = "my-id";
        -:   40:static const char ATTR_MY_ARGNR[] = "my-argnr";
        -:   41:static const char ATTR_MY_ARGNAME[] = "my-argname";
        -:   42:static const char ATTR_VALUE[] = "value";
        -:   43:
        -:   44:int CTU::maxCtuDepth = 2;
        -:   45:
function _ZN3CTU13getFunctionIdB5cxx11EPK9TokenizerPK8Function called 0 returned 0% blocks executed 0%
    #####:   46:std::string CTU::getFunctionId(const Tokenizer *tokenizer, const Function *function)
        -:   47:{
    #####:   48:    return tokenizer->list.file(function->tokenDef) + ':' + MathLib::toString(function->tokenDef->linenr()) + ':' + MathLib::toString(function->tokenDef->column());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
        -:   49:}
        -:   50:
function _ZN3CTU8FileInfo8LocationC2EPK9TokenizerPK5Token called 0 returned 0% blocks executed 0%
    #####:   51:CTU::FileInfo::Location::Location(const Tokenizer *tokenizer, const Token *tok)
    #####:   52:    : fileName(tokenizer->list.file(tok))
call    0 never executed
    #####:   53:    , lineNumber(tok->linenr())
call    0 never executed
    #####:   54:    , column(tok->column())
call    0 never executed
call    1 never executed
        -:   55:{
    #####:   56:}
        -:   57:
function _ZNK3CTU8FileInfo8toStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   58:std::string CTU::FileInfo::toString() const
        -:   59:{
    #####:   60:    std::ostringstream out;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   61:
        -:   62:    // Function calls..
    #####:   63:    for (const CTU::FileInfo::FunctionCall &functionCall : functionCalls) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   64:        out << functionCall.toXmlString();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:   65:    }
        -:   66:
        -:   67:    // Nested calls..
    #####:   68:    for (const CTU::FileInfo::NestedCall &nestedCall : nestedCalls) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   69:        out << nestedCall.toXmlString() << "\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -:   70:    }
        -:   71:
    #####:   72:    return out.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   73:}
        -:   74:
function _ZNK3CTU8FileInfo8CallBase15toBaseXmlStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   75:std::string CTU::FileInfo::CallBase::toBaseXmlString() const
        -:   76:{
    #####:   77:    std::ostringstream out;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   78:    out << " " << ATTR_CALL_ID << "=\"" << callId << "\""
        -:   79:        << " " << ATTR_CALL_FUNCNAME << "=\"" << callFunctionName << "\""
    #####:   80:        << " " << ATTR_CALL_ARGNR << "=\"" << callArgNr << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
        -:   81:        << " " << ATTR_LOC_FILENAME << "=\"" << location.fileName << "\""
    #####:   82:        << " " << ATTR_LOC_LINENR << "=\"" << location.lineNumber << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####:   83:        << " " << ATTR_LOC_COLUMN << "=\"" << location.column << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    #####:   84:    return out.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   85:}
        -:   86:
function _ZNK3CTU8FileInfo12FunctionCall11toXmlStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   87:std::string CTU::FileInfo::FunctionCall::toXmlString() const
        -:   88:{
    #####:   89:    std::ostringstream out;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   90:    out << "<function-call"
    #####:   91:        << toBaseXmlString()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   92:        << " " << ATTR_CALL_ARGEXPR << "=\"" << callArgumentExpression << "\""
    #####:   93:        << " " << ATTR_CALL_ARGVALUETYPE << "=\"" << callValueType << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####:   94:        << " " << ATTR_CALL_ARGVALUE << "=\"" << callArgValue << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    #####:   95:    if (warning)
branch  0 never executed
branch  1 never executed
    #####:   96:        out << " " << ATTR_WARNING << "=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   97:    if (callValuePath.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:        out << "/>";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   99:    else {
    #####:  100:        out << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:        for (const ErrorLogger::ErrorMessage::FileLocation &loc : callValuePath)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  102:            out << "  <path"
    #####:  103:                << " " << ATTR_LOC_FILENAME << "=\"" << loc.getfile() << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  104:                << " " << ATTR_LOC_LINENR << "=\"" << loc.line << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
    #####:  105:                << " " << ATTR_LOC_COLUMN << "=\"" << loc.column << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####:  106:                << " " << ATTR_INFO << "=\"" << loc.getinfo() << "\"/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
    #####:  107:        out << "</function-call>";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  108:    }
    #####:  109:    return out.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  110:}
        -:  111:
function _ZNK3CTU8FileInfo10NestedCall11toXmlStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  112:std::string CTU::FileInfo::NestedCall::toXmlString() const
        -:  113:{
    #####:  114:    std::ostringstream out;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  115:    out << "<function-call"
    #####:  116:        << toBaseXmlString()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  117:        << " " << ATTR_MY_ID << "=\"" << myId << "\""
    #####:  118:        << " " << ATTR_MY_ARGNR << "=\"" << myArgNr << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####:  119:        << "/>";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  120:    return out.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  121:}
        -:  122:
function _ZNK3CTU8FileInfo11UnsafeUsage8toStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  123:std::string CTU::FileInfo::UnsafeUsage::toString() const
        -:  124:{
    #####:  125:    std::ostringstream out;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  126:    out << "    <unsafe-usage"
        -:  127:        << " " << ATTR_MY_ID << "=\"" << myId << '\"'
    #####:  128:        << " " << ATTR_MY_ARGNR << "=\"" << myArgNr << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
        -:  129:        << " " << ATTR_MY_ARGNAME << "=\"" << myArgumentName << '\"'
        -:  130:        << " " << ATTR_LOC_FILENAME << "=\"" << location.fileName << '\"'
    #####:  131:        << " " << ATTR_LOC_LINENR << "=\"" << location.lineNumber << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
    #####:  132:        << " " << ATTR_LOC_COLUMN << "=\"" << location.column << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  133:        << " " << ATTR_VALUE << "=\"" << value << "\""
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####:  134:        << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  135:    return out.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  136:}
        -:  137:
function _ZN3CTU8toStringB5cxx11ERKNSt7__debug4listINS_8FileInfo11UnsafeUsageESaIS3_EEE called 0 returned 0% blocks executed 0%
    #####:  138:std::string CTU::toString(const std::list<CTU::FileInfo::UnsafeUsage> &unsafeUsage)
        -:  139:{
    #####:  140:    std::ostringstream ret;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  141:    for (const CTU::FileInfo::UnsafeUsage &u : unsafeUsage)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  142:        ret << u.toString();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  143:    return ret.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  144:}
        -:  145:
function _ZN3CTU8FileInfo8CallBaseC2EPK9TokenizerPK5Token called 0 returned 0% blocks executed 0%
    #####:  146:CTU::FileInfo::CallBase::CallBase(const Tokenizer *tokenizer, const Token *callToken)
        -:  147:    : callId(getFunctionId(tokenizer, callToken->function()))
        -:  148:    , callArgNr(0)
        -:  149:    , callFunctionName(callToken->next()->astOperand1()->expressionString())
    #####:  150:    , location(CTU::FileInfo::Location(tokenizer, callToken))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
        -:  151:{
    #####:  152:}
        -:  153:
function _ZN3CTU8FileInfo10NestedCallC2EPK9TokenizerPK8FunctionPK5Token called 0 returned 0% blocks executed 0%
    #####:  154:CTU::FileInfo::NestedCall::NestedCall(const Tokenizer *tokenizer, const Function *myFunction, const Token *callToken)
        -:  155:    : CallBase(tokenizer, callToken)
        -:  156:    , myId(getFunctionId(tokenizer, myFunction))
    #####:  157:    , myArgNr(0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  158:{
    #####:  159:}
        -:  160:
function _ZL14readAttrStringPKN8tinyxml210XMLElementEPKcPb called 0 returned 0% blocks executed 0%
    #####:  161:static std::string readAttrString(const tinyxml2::XMLElement *e, const char *attr, bool *error)
        -:  162:{
    #####:  163:    const char *value = e->Attribute(attr);
call    0 never executed
    #####:  164:    if (!value && error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  165:        *error = true;
    #####:  166:    return value ? value : "";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  167:}
        -:  168:
function _ZL11readAttrIntPKN8tinyxml210XMLElementEPKcPb called 0 returned 0% blocks executed 0%
    #####:  169:static long long readAttrInt(const tinyxml2::XMLElement *e, const char *attr, bool *error)
        -:  170:{
    #####:  171:    const char *value = e->Attribute(attr);
call    0 never executed
    #####:  172:    if (!value && error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  173:        *error = true;
    #####:  174:    return value ? std::atoi(value) : 0;
branch  0 never executed
branch  1 never executed
        -:  175:}
        -:  176:
function _ZN3CTU8FileInfo8CallBase15loadBaseFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  177:bool CTU::FileInfo::CallBase::loadBaseFromXml(const tinyxml2::XMLElement *xmlElement)
        -:  178:{
    #####:  179:    bool error = false;
    #####:  180:    callId = readAttrString(xmlElement, ATTR_CALL_ID, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  181:    callFunctionName = readAttrString(xmlElement, ATTR_CALL_FUNCNAME, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  182:    callArgNr = readAttrInt(xmlElement, ATTR_CALL_ARGNR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  183:    location.fileName = readAttrString(xmlElement, ATTR_LOC_FILENAME, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  184:    location.lineNumber = readAttrInt(xmlElement, ATTR_LOC_LINENR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:    location.column = readAttrInt(xmlElement, ATTR_LOC_COLUMN, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:    return !error;
        -:  187:}
        -:  188:
function _ZN3CTU8FileInfo12FunctionCall11loadFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  189:bool CTU::FileInfo::FunctionCall::loadFromXml(const tinyxml2::XMLElement *xmlElement)
        -:  190:{
    #####:  191:    if (!loadBaseFromXml(xmlElement))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  192:        return false;
    #####:  193:    bool error=false;
    #####:  194:    callArgumentExpression = readAttrString(xmlElement, ATTR_CALL_ARGEXPR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  195:    callValueType = (ValueFlow::Value::ValueType)readAttrInt(xmlElement, ATTR_CALL_ARGVALUETYPE, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  196:    callArgValue = readAttrInt(xmlElement, ATTR_CALL_ARGVALUE, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  197:    const char *w = xmlElement->Attribute(ATTR_WARNING);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:    warning = w && std::strcmp(w, "true") == 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  199:    for (const tinyxml2::XMLElement *e2 = xmlElement->FirstChildElement(); !error && e2; e2 = e2->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  200:        if (std::strcmp(e2->Name(), "path") != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  201:            continue;
    #####:  202:        ErrorLogger::ErrorMessage::FileLocation loc;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  203:        loc.setfile(readAttrString(e2, ATTR_LOC_FILENAME, &error));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  204:        loc.line = readAttrInt(e2, ATTR_LOC_LINENR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  205:        loc.column = readAttrInt(e2, ATTR_LOC_COLUMN, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  206:        loc.setinfo(readAttrString(e2, ATTR_INFO, &error));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  207:    }
    #####:  208:    return !error;
        -:  209:}
        -:  210:
function _ZN3CTU8FileInfo10NestedCall11loadFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  211:bool CTU::FileInfo::NestedCall::loadFromXml(const tinyxml2::XMLElement *xmlElement)
        -:  212:{
    #####:  213:    if (!loadBaseFromXml(xmlElement))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  214:        return false;
    #####:  215:    bool error = false;
    #####:  216:    myId = readAttrString(xmlElement, ATTR_MY_ID, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  217:    myArgNr = readAttrInt(xmlElement, ATTR_MY_ARGNR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  218:    return !error;
        -:  219:}
        -:  220:
function _ZN3CTU8FileInfo11loadFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  221:void CTU::FileInfo::loadFromXml(const tinyxml2::XMLElement *xmlElement)
        -:  222:{
    #####:  223:    for (const tinyxml2::XMLElement *e = xmlElement->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  224:        if (std::strcmp(e->Name(), "function-call") == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:            FunctionCall functionCall;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  226:            if (functionCall.loadFromXml(e))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  227:                functionCalls.push_back(functionCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  228:        } else if (std::strcmp(e->Name(), "nested-call") == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  229:            NestedCall nestedCall;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  230:            if (nestedCall.loadFromXml(e))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  231:                nestedCalls.push_back(nestedCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  232:        }
        -:  233:    }
    #####:  234:}
        -:  235:
function _ZNK3CTU8FileInfo11getCallsMapB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  236:std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> CTU::FileInfo::getCallsMap() const
        -:  237:{
    #####:  238:    std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> ret;
call    0 never executed
    #####:  239:    for (const CTU::FileInfo::NestedCall &nc : nestedCalls)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  240:        ret[nc.callId].push_back(&nc);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  241:    for (const CTU::FileInfo::FunctionCall &fc : functionCalls)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  242:        ret[fc.callId].push_back(&fc);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  243:    return ret;
        -:  244:}
        -:  245:
function _ZN3CTU26loadUnsafeUsageListFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  246:std::list<CTU::FileInfo::UnsafeUsage> CTU::loadUnsafeUsageListFromXml(const tinyxml2::XMLElement *xmlElement)
        -:  247:{
    #####:  248:    std::list<CTU::FileInfo::UnsafeUsage> ret;
call    0 never executed
    #####:  249:    for (const tinyxml2::XMLElement *e = xmlElement->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  250:        if (std::strcmp(e->Name(), "unsafe-usage") != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  251:            continue;
    #####:  252:        bool error = false;
    #####:  253:        FileInfo::UnsafeUsage unsafeUsage;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  254:        unsafeUsage.myId = readAttrString(e, ATTR_MY_ID, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  255:        unsafeUsage.myArgNr = readAttrInt(e, ATTR_MY_ARGNR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  256:        unsafeUsage.myArgumentName = readAttrString(e, ATTR_MY_ARGNAME, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  257:        unsafeUsage.location.fileName = readAttrString(e, ATTR_LOC_FILENAME, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  258:        unsafeUsage.location.lineNumber = readAttrInt(e, ATTR_LOC_LINENR, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  259:        unsafeUsage.location.column = readAttrInt(e, ATTR_LOC_COLUMN, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  260:        unsafeUsage.value = readAttrInt(e, ATTR_VALUE, &error);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:
    #####:  262:        if (!error)
branch  0 never executed
branch  1 never executed
    #####:  263:            ret.push_back(unsafeUsage);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  264:    }
    #####:  265:    return ret;
        -:  266:}
        -:  267:
function _ZL14isCallFunctionPK5ScopeiPPK5Token called 0 returned 0% blocks executed 0%
    #####:  268:static int isCallFunction(const Scope *scope, int argnr, const Token **tok)
        -:  269:{
    #####:  270:    const Variable * const argvar = scope->function->getArgumentVar(argnr);
call    0 never executed
    #####:  271:    if (!argvar->isPointer())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  272:        return -1;
    #####:  273:    for (const Token *tok2 = scope->bodyStart; tok2 != scope->bodyEnd; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  274:        if (tok2->variable() != argvar)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  275:            continue;
    #####:  276:        if (!Token::Match(tok2->previous(), "[(,] %var% [,)]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  277:            break;
    #####:  278:        int argnr2 = 1;
    #####:  279:        const Token *prev = tok2;
    #####:  280:        while (prev && prev->str() != "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  281:            if (Token::Match(prev,"]|)"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  282:                prev = prev->link();
call    0 never executed
    #####:  283:            else if (prev->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  284:                ++argnr2;
    #####:  285:            prev = prev->previous();
call    0 never executed
        -:  286:        }
    #####:  287:        if (!prev || !Token::Match(prev->previous(), "%name% ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  288:            break;
    #####:  289:        if (!prev->astOperand1() || !prev->astOperand1()->function())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  290:            break;
    #####:  291:        *tok = prev->previous();
call    0 never executed
    #####:  292:        return argnr2;
        -:  293:    }
    #####:  294:    return -1;
        -:  295:}
        -:  296:
        -:  297:
function _ZN3CTU11getFileInfoEPK9Tokenizer called 0 returned 0% blocks executed 0%
    #####:  298:CTU::FileInfo *CTU::getFileInfo(const Tokenizer *tokenizer)
        -:  299:{
    #####:  300:    const SymbolDatabase * const symbolDatabase = tokenizer->getSymbolDatabase();
call    0 never executed
        -:  301:
    #####:  302:    FileInfo *fileInfo = new FileInfo;
call    0 never executed
call    1 never executed
        -:  303:
        -:  304:    // Parse all functions in TU
    #####:  305:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  306:        if (!scope.isExecutable() || scope.type != Scope::eFunction || !scope.function)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  307:            continue;
    #####:  308:        const Function *const function = scope.function;
        -:  309:
        -:  310:        // source function calls
    #####:  311:        for (const Token *tok = scope.bodyStart; tok != scope.bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  312:            if (tok->str() != "(" || !tok->astOperand1() || !tok->astOperand2())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  313:                continue;
    #####:  314:            if (!tok->astOperand1()->function())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  315:                continue;
    #####:  316:            const std::vector<const Token *> args(getArguments(tok->previous()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  317:            for (int argnr = 0; argnr < args.size(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:                const Token *argtok = args[argnr];
call    0 never executed
    #####:  319:                if (!argtok)
branch  0 never executed
branch  1 never executed
    #####:  320:                    continue;
    #####:  321:                for (const ValueFlow::Value &value : argtok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  322:                    if ((!value.isIntValue() || value.intvalue != 0 || value.isInconclusive()) && !value.isBufferSizeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  323:                        continue;
        -:  324:                    // Skip impossible values since they cannot be represented
    #####:  325:                    if (value.isImpossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  326:                        continue;
    #####:  327:                    FileInfo::FunctionCall functionCall;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  328:                    functionCall.callValueType = value.valueType;
    #####:  329:                    functionCall.callId = getFunctionId(tokenizer, tok->astOperand1()->function());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  330:                    functionCall.callFunctionName = tok->astOperand1()->expressionString();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  331:                    functionCall.location = FileInfo::Location(tokenizer,tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  332:                    functionCall.callArgNr = argnr + 1;
    #####:  333:                    functionCall.callArgumentExpression = argtok->expressionString();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  334:                    functionCall.callArgValue = value.intvalue;
    #####:  335:                    functionCall.warning = !value.errorSeverity();
call    0 never executed
    #####:  336:                    for (const ErrorPathItem &i : value.errorPath) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  337:                        ErrorLogger::ErrorMessage::FileLocation loc;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  338:                        loc.setfile(tokenizer->list.file(i.first));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  339:                        loc.line = i.first->linenr();
call    0 never executed
    #####:  340:                        loc.column = i.first->column();
call    0 never executed
    #####:  341:                        loc.setinfo(i.second);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  342:                        functionCall.callValuePath.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  343:                    }
    #####:  344:                    fileInfo->functionCalls.push_back(functionCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  345:                }
        -:  346:                // array
    #####:  347:                if (argtok->variable() && argtok->variable()->isArray() && argtok->variable()->dimensions().size()==1 && argtok->variable()->dimension(0)>1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  348:                    FileInfo::FunctionCall functionCall;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  349:                    functionCall.callValueType = ValueFlow::Value::ValueType::BUFFER_SIZE;
    #####:  350:                    functionCall.callId = getFunctionId(tokenizer, tok->astOperand1()->function());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  351:                    functionCall.callFunctionName = tok->astOperand1()->expressionString();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  352:                    functionCall.location = FileInfo::Location(tokenizer, tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  353:                    functionCall.callArgNr = argnr + 1;
    #####:  354:                    functionCall.callArgumentExpression = argtok->expressionString();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  355:                    functionCall.callArgValue = argtok->variable()->dimension(0) * argtok->valueType()->typeSize(*tokenizer->getSettings());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  356:                    functionCall.warning = false;
    #####:  357:                    fileInfo->functionCalls.push_back(functionCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  358:                }
        -:  359:                // &var => buffer
    #####:  360:                if (argtok->isUnaryOp("&") && argtok->astOperand1()->variable() && argtok->astOperand1()->valueType() && !argtok->astOperand1()->variable()->isArray()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:  361:                    FileInfo::FunctionCall functionCall;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  362:                    functionCall.callValueType = ValueFlow::Value::ValueType::BUFFER_SIZE;
    #####:  363:                    functionCall.callId = getFunctionId(tokenizer, tok->astOperand1()->function());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  364:                    functionCall.callFunctionName = tok->astOperand1()->expressionString();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  365:                    functionCall.location = FileInfo::Location(tokenizer, tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  366:                    functionCall.callArgNr = argnr + 1;
    #####:  367:                    functionCall.callArgumentExpression = argtok->expressionString();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  368:                    functionCall.callArgValue = argtok->astOperand1()->valueType()->typeSize(*tokenizer->getSettings());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  369:                    functionCall.warning = false;
    #####:  370:                    fileInfo->functionCalls.push_back(functionCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  371:                }
        -:  372:                // pointer to uninitialized data..
    #####:  373:                if (!argtok->isUnaryOp("&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  374:                    continue;
    #####:  375:                argtok = argtok->astOperand1();
call    0 never executed
    #####:  376:                if (!argtok || !argtok->valueType() || argtok->valueType()->pointer != 0)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  377:                    continue;
    #####:  378:                if (argtok->values().size() != 1U)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  379:                    continue;
    #####:  380:                const ValueFlow::Value &v = argtok->values().front();
call    0 never executed
call    1 never executed
    #####:  381:                if (v.valueType == ValueFlow::Value::ValueType::UNINIT && !v.isInconclusive()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  382:                    FileInfo::FunctionCall functionCall;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  383:                    functionCall.callValueType = ValueFlow::Value::ValueType::UNINIT;
    #####:  384:                    functionCall.callId = getFunctionId(tokenizer, tok->astOperand1()->function());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  385:                    functionCall.callFunctionName = tok->astOperand1()->expressionString();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  386:                    functionCall.location = FileInfo::Location(tokenizer, tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  387:                    functionCall.callArgNr = argnr + 1;
    #####:  388:                    functionCall.callArgValue = 0;
    #####:  389:                    functionCall.callArgumentExpression = argtok->expressionString();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  390:                    functionCall.warning = false;
    #####:  391:                    fileInfo->functionCalls.push_back(functionCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  392:                    continue;
        -:  393:                }
        -:  394:            }
        -:  395:        }
        -:  396:
        -:  397:        // Nested function calls
    #####:  398:        for (int argnr = 0; argnr < function->argCount(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  399:            const Token *tok;
    #####:  400:            const int argnr2 = isCallFunction(&scope, argnr, &tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  401:            if (argnr2 > 0) {
branch  0 never executed
branch  1 never executed
    #####:  402:                FileInfo::NestedCall nestedCall(tokenizer, function, tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  403:                nestedCall.myArgNr = argnr + 1;
    #####:  404:                nestedCall.callArgNr = argnr2;
    #####:  405:                fileInfo->nestedCalls.push_back(nestedCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  406:            }
        -:  407:        }
        -:  408:    }
        -:  409:
    #####:  410:    return fileInfo;
        -:  411:}
        -:  412:
function _ZL17getUnsafeFunctionPK9TokenizerPK8SettingsPK5ScopeiPK5CheckPFbSA_PK5TokenPxE called 0 returned 0% blocks executed 0%
    #####:  413:static std::list<std::pair<const Token *, MathLib::bigint>> getUnsafeFunction(const Tokenizer *tokenizer, const Settings *settings, const Scope *scope, int argnr, const Check *check, bool (*isUnsafeUsage)(const Check *check, const Token *argtok, MathLib::bigint *value))
        -:  414:{
    #####:  415:    std::list<std::pair<const Token *, MathLib::bigint>> ret;
call    0 never executed
    #####:  416:    const Variable * const argvar = scope->function->getArgumentVar(argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  417:    if (!argvar->isPointer())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  418:        return ret;
    #####:  419:    for (const Token *tok2 = scope->bodyStart; tok2 != scope->bodyEnd; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  420:        if (Token::Match(tok2, ")|else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  421:            tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  422:            if (Token::findmatch(tok2->link(), "return|throw", tok2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  423:                return ret;
    #####:  424:            if (isVariableChanged(tok2->link(), tok2, argvar->declarationId(), false, settings, tokenizer->isCPP()))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  425:                return ret;
        -:  426:        }
    #####:  427:        if (Token::Match(tok2, "%oror%|&&|?")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  428:            tok2 = tok2->findExpressionStartEndTokens().second;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  429:            continue;
        -:  430:        }
    #####:  431:        if (tok2->variable() != argvar)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  432:            continue;
    #####:  433:        MathLib::bigint value = 0;
    #####:  434:        if (!isUnsafeUsage(check, tok2, &value))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  435:            return ret; // TODO: Is this a read? then continue..
    #####:  436:        ret.emplace_back(tok2, value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  437:        return ret;
        -:  438:    }
    #####:  439:    return ret;
call    0 never executed
        -:  440:}
        -:  441:
function _ZN3CTU14getUnsafeUsageEPK9TokenizerPK8SettingsPK5CheckPFbS8_PK5TokenPxE called 0 returned 0% blocks executed 0%
    #####:  442:std::list<CTU::FileInfo::UnsafeUsage> CTU::getUnsafeUsage(const Tokenizer *tokenizer, const Settings *settings, const Check *check, bool (*isUnsafeUsage)(const Check *check, const Token *argtok, MathLib::bigint *_value))
        -:  443:{
    #####:  444:    std::list<CTU::FileInfo::UnsafeUsage> unsafeUsage;
call    0 never executed
        -:  445:
        -:  446:    // Parse all functions in TU
    #####:  447:    const SymbolDatabase * const symbolDatabase = tokenizer->getSymbolDatabase();
call    0 never executed
        -:  448:
    #####:  449:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  450:        if (!scope.isExecutable() || scope.type != Scope::eFunction || !scope.function)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  451:            continue;
    #####:  452:        const Function *const function = scope.function;
        -:  453:
        -:  454:        // "Unsafe" functions unconditionally reads data before it is written..
    #####:  455:        for (int argnr = 0; argnr < function->argCount(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  456:            for (const std::pair<const Token *, MathLib::bigint> &v : getUnsafeFunction(tokenizer, settings, &scope, argnr, check, isUnsafeUsage)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  457:                const Token *tok = v.first;
    #####:  458:                MathLib::bigint value = v.second;
    #####:  459:                unsafeUsage.emplace_back(CTU::getFunctionId(tokenizer, function), argnr+1, tok->str(), CTU::FileInfo::Location(tokenizer,tok), value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  460:            }
        -:  461:        }
        -:  462:    }
        -:  463:
    #####:  464:    return unsafeUsage;
        -:  465:}
        -:  466:
function _ZL8findPathRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEixN3CTU8FileInfo16InvalidValueTypeERKNSt7__debug3mapIS4_NSA_4listIPKNS8_8CallBaseESaISF_EEESt4lessIS4_ESaISt4pairIS5_SH_EEEEPSF_ib called 0 returned 0% blocks executed 0%
    #####:  467:static bool findPath(const std::string &callId,
        -:  468:                     nonneg int callArgNr,
        -:  469:                     MathLib::bigint unsafeValue,
        -:  470:                     CTU::FileInfo::InvalidValueType invalidValue,
        -:  471:                     const std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> &callsMap,
        -:  472:                     const CTU::FileInfo::CallBase *path[10],
        -:  473:                     int index,
        -:  474:                     bool warning)
        -:  475:{
    #####:  476:    if (index >= CTU::maxCtuDepth || index >= 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  477:        return false;
        -:  478:
    #####:  479:    const std::map<std::string, std::list<const CTU::FileInfo::CallBase *>>::const_iterator it = callsMap.find(callId);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  480:    if (it == callsMap.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  481:        return false;
        -:  482:
    #####:  483:    for (const CTU::FileInfo::CallBase *c : it->second) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####:  484:        if (c->callArgNr != callArgNr)
branch  0 never executed
branch  1 never executed
    #####:  485:            continue;
        -:  486:
    #####:  487:        const CTU::FileInfo::FunctionCall *functionCall = dynamic_cast<const CTU::FileInfo::FunctionCall *>(c);
branch  0 never executed
branch  1 never executed
    #####:  488:        if (functionCall) {
branch  0 never executed
branch  1 never executed
    #####:  489:            if (!warning && functionCall->warning)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  490:                continue;
    #####:  491:            switch (invalidValue) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  492:            case CTU::FileInfo::InvalidValueType::null:
    #####:  493:                if (functionCall->callValueType != ValueFlow::Value::ValueType::INT || functionCall->callArgValue != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  494:                    continue;
    #####:  495:                break;
    #####:  496:            case CTU::FileInfo::InvalidValueType::uninit:
    #####:  497:                if (functionCall->callValueType != ValueFlow::Value::ValueType::UNINIT)
branch  0 never executed
branch  1 never executed
    #####:  498:                    continue;
    #####:  499:                break;
    #####:  500:            case CTU::FileInfo::InvalidValueType::bufferOverflow:
    #####:  501:                if (functionCall->callValueType != ValueFlow::Value::ValueType::BUFFER_SIZE)
branch  0 never executed
branch  1 never executed
    #####:  502:                    continue;
    #####:  503:                if (unsafeValue < 0 || unsafeValue >= functionCall->callArgValue)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  504:                    break;
    #####:  505:                continue;
        -:  506:            };
    #####:  507:            path[index] = functionCall;
    #####:  508:            return true;
        -:  509:        }
        -:  510:
    #####:  511:        const CTU::FileInfo::NestedCall *nestedCall = dynamic_cast<const CTU::FileInfo::NestedCall *>(c);
branch  0 never executed
branch  1 never executed
    #####:  512:        if (!nestedCall)
branch  0 never executed
branch  1 never executed
    #####:  513:            continue;
        -:  514:
    #####:  515:        if (findPath(nestedCall->myId, nestedCall->myArgNr, unsafeValue, invalidValue, callsMap, path, index + 1, warning)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  516:            path[index] = nestedCall;
    #####:  517:            return true;
        -:  518:        }
        -:  519:    }
        -:  520:
    #####:  521:    return false;
        -:  522:}
        -:  523:
function _ZNK3CTU8FileInfo12getErrorPathENS0_16InvalidValueTypeERKNS0_11UnsafeUsageERKNSt7__debug3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS5_4listIPKNS0_8CallBaseESaISG_EEESt4lessISC_ESaISt4pairIKSC_SI_EEEEPKcPPKNS0_12FunctionCallEb called 0 returned 0% blocks executed 0%
    #####:  524:std::list<ErrorLogger::ErrorMessage::FileLocation> CTU::FileInfo::getErrorPath(InvalidValueType invalidValue,
        -:  525:        const CTU::FileInfo::UnsafeUsage &unsafeUsage,
        -:  526:        const std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> &callsMap,
        -:  527:        const char info[],
        -:  528:        const FunctionCall * * const functionCallPtr,
        -:  529:        bool warning) const
        -:  530:{
    #####:  531:    std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
        -:  532:
    #####:  533:    const CTU::FileInfo::CallBase *path[10] = {nullptr};
        -:  534:
    #####:  535:    if (!findPath(unsafeUsage.myId, unsafeUsage.myArgNr, unsafeUsage.value, invalidValue, callsMap, path, 0, warning))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  536:        return locationList;
        -:  537:
    #####:  538:    const std::string value1 = (invalidValue == InvalidValueType::null) ? "null" : "uninitialized";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  539:
    #####:  540:    for (int index = 9; index >= 0; index--) {
branch  0 never executed
branch  1 never executed
    #####:  541:        if (!path[index])
branch  0 never executed
branch  1 never executed
    #####:  542:            continue;
        -:  543:
    #####:  544:        const CTU::FileInfo::FunctionCall *functionCall = dynamic_cast<const CTU::FileInfo::FunctionCall *>(path[index]);
branch  0 never executed
branch  1 never executed
        -:  545:
    #####:  546:        if (functionCall) {
branch  0 never executed
branch  1 never executed
    #####:  547:            if (functionCallPtr)
branch  0 never executed
branch  1 never executed
    #####:  548:                *functionCallPtr = functionCall;
    #####:  549:            std::copy(functionCall->callValuePath.cbegin(), functionCall->callValuePath.cend(), std::back_inserter(locationList));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  550:        }
        -:  551:
    #####:  552:        ErrorLogger::ErrorMessage::FileLocation fileLoc(path[index]->location.fileName, path[index]->location.lineNumber, path[index]->location.column);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  553:        fileLoc.setinfo("Calling function " + path[index]->callFunctionName + ", " + MathLib::toString(path[index]->callArgNr) + getOrdinalText(path[index]->callArgNr) + " argument is " + value1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
    #####:  554:        locationList.push_back(fileLoc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  555:    }
        -:  556:
    #####:  557:    ErrorLogger::ErrorMessage::FileLocation fileLoc2(unsafeUsage.location.fileName, unsafeUsage.location.lineNumber, unsafeUsage.location.column);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  558:    fileLoc2.setinfo(replaceStr(info, "ARG", unsafeUsage.myArgumentName));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    #####:  559:    locationList.push_back(fileLoc2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  560:
    #####:  561:    return locationList;
function _GLOBAL__sub_I__ZN3CTU11maxCtuDepthE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  562:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
