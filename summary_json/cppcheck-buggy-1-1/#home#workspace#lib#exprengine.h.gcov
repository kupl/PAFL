        -:    0:Source:/home/workspace/lib/exprengine.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/exprengine.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/exprengine.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#ifndef exprengineH
        -:   21:#define exprengineH
        -:   22://---------------------------------------------------------------------------
        -:   23:
        -:   24:#include "config.h"
        -:   25:
        -:   26:#include <functional>
        -:   27:#include <map>
        -:   28:#include <memory>
        -:   29:#include <set>
        -:   30:#include <string>
        -:   31:#include <vector>
        -:   32:#include <stdint.h>
        -:   33:
        -:   34:class ErrorLogger;
        -:   35:class Tokenizer;
        -:   36:class Scope;
        -:   37:class Settings;
        -:   38:class Token;
        -:   39:
        -:   40:#ifdef __GNUC__
        -:   41:typedef __int128_t   int128_t;
        -:   42:#else
        -:   43:typedef long long    int128_t;
        -:   44:#ifdef _MSC_VER
        -:   45:#pragma message(__FILE__ "(" _CRT_STRINGIZE(__LINE__) ")" ": warning: TODO No 128-bit integer type is available => Limited analysis of large integers...")
        -:   46:#else
        -:   47:#warning TODO No 128-bit integer type is available => Limited analysis of large integers
        -:   48:#endif
        -:   49:#endif
        -:   50:
        -:   51:namespace ExprEngine {
        -:   52:    std::string str(int128_t);
        -:   53:
        -:   54:    // TODO we need to handle floats, containers, pointers, aliases and structs and stuff
        -:   55:    enum class ValueType { UninitValue, IntRange, PointerValue, ArrayValue, StructValue, AddressOfValue, BinOpResult };
        -:   56:
        -:   57:    class Value;
        -:   58:    typedef std::shared_ptr<Value> ValuePtr;
        -:   59:
        -:   60:    class Value {
        -:   61:    public:
function _ZN10ExprEngine5ValueC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   62:        Value(const std::string &name) : name(name) {}
call    0 never executed
function _ZN10ExprEngine5ValueD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine5ValueD2Ev called 0 returned 0% blocks executed 0%
    #####:   63:        virtual ~Value() {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:   64:        virtual ValueType type() const = 0;
        -:   65:        virtual std::string getRange() const = 0;
function _ZNK10ExprEngine5Value17isIntValueInRangeEi called 0 returned 0% blocks executed 0%
    #####:   66:        virtual bool isIntValueInRange(int value) const {
        -:   67:            (void)value;
    #####:   68:            return false;
        -:   69:        }
        -:   70:        const std::string name;
        -:   71:    };
        -:   72:
function _ZN10ExprEngine11UninitValueD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine11UninitValueD2Ev called 0 returned 0% blocks executed 0%
    #####:   73:    class UninitValue: public Value {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   74:    public:
function _ZN10ExprEngine11UninitValueC2Ev called 0 returned 0% blocks executed 0%
    #####:   75:        UninitValue() : Value("?") {}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
function _ZNK10ExprEngine11UninitValue4typeEv called 0 returned 0% blocks executed 0%
    #####:   76:        ValueType type() const override {
    #####:   77:            return ValueType::UninitValue;
        -:   78:        }
function _ZNK10ExprEngine11UninitValue8getRangeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   79:        std::string getRange() const override {
    #####:   80:            return "?";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   81:        }
        -:   82:    };
        -:   83:
        -:   84:    class IntRange : public Value {
        -:   85:    public:
function _ZN10ExprEngine8IntRangeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEnn called 0 returned 0% blocks executed 0%
    #####:   86:        IntRange(const std::string &name, int128_t minValue, int128_t maxValue)
    #####:   87:            : Value(name)
        -:   88:            , minValue(minValue)
    #####:   89:            , maxValue(maxValue) {
call    0 never executed
    #####:   90:        }
function _ZN10ExprEngine8IntRangeD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine8IntRangeD2Ev called 0 returned 0% blocks executed 0%
    #####:   91:        ~IntRange() {}
call    0 never executed
call    1 never executed
call    2 never executed
        -:   92:
function _ZNK10ExprEngine8IntRange4typeEv called 0 returned 0% blocks executed 0%
    #####:   93:        ValueType type() const override {
    #####:   94:            return ValueType::IntRange;
        -:   95:        }
function _ZNK10ExprEngine8IntRange8getRangeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   96:        std::string getRange() const override {
    #####:   97:            return "[" + str(minValue) + ":" + str(maxValue) + "]";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        -:   98:        }
function _ZNK10ExprEngine8IntRange17isIntValueInRangeEi called 0 returned 0% blocks executed 0%
    #####:   99:        bool isIntValueInRange(int value) const override {
    #####:  100:            return value >= minValue && value <= maxValue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  101:        }
        -:  102:
        -:  103:        int128_t minValue;
        -:  104:        int128_t maxValue;
        -:  105:    };
        -:  106:
function _ZN10ExprEngine12PointerValueD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine12PointerValueD2Ev called 0 returned 0% blocks executed 0%
    #####:  107:    class PointerValue: public Value {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  108:    public:
function _ZN10ExprEngine12PointerValueC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_5ValueEE called 0 returned 0% blocks executed 0%
    #####:  109:        PointerValue(const std::string &name, ValuePtr data) : Value(name), data(data) {}
call    0 never executed
call    1 never executed
function _ZNK10ExprEngine12PointerValue4typeEv called 0 returned 0% blocks executed 0%
    #####:  110:        ValueType type() const override {
    #####:  111:            return ValueType::PointerValue;
        -:  112:        }
function _ZNK10ExprEngine12PointerValue8getRangeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  113:        std::string getRange() const override {
    #####:  114:            return "*" + data->getRange();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:  115:        }
        -:  116:        ValuePtr data;
        -:  117:    };
        -:  118:
function _ZN10ExprEngine10ArrayValueD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine10ArrayValueD2Ev called 0 returned 0% blocks executed 0%
    #####:  119:    class ArrayValue: public Value {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  120:    public:
        -:  121:        const int MAXSIZE = 0x100000;
        -:  122:
function _ZN10ExprEngine10ArrayValueC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm called 0 returned 0% blocks executed 0%
    #####:  123:        ArrayValue(const std::string &name, size_t size)
    #####:  124:            : Value(name) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  125:            data.resize((size < MAXSIZE) ? size : MAXSIZE,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  126:                        std::make_shared<UninitValue>());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  127:        }
        -:  128:
function _ZNK10ExprEngine10ArrayValue4typeEv called 0 returned 0% blocks executed 0%
    #####:  129:        ValueType type() const override {
    #####:  130:            return ValueType::ArrayValue;
        -:  131:        }
function _ZNK10ExprEngine10ArrayValue8getRangeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  132:        std::string getRange() const override {
    #####:  133:            return "[" + std::to_string(data.size()) + "]";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  134:        }
        -:  135:
        -:  136:        void assign(ValuePtr index, ValuePtr value);
        -:  137:        ValuePtr read(ValuePtr index);
        -:  138:
        -:  139:        std::vector<ValuePtr> data;
        -:  140:    };
        -:  141:
function _ZN10ExprEngine11StructValueD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine11StructValueD2Ev called 0 returned 0% blocks executed 0%
    #####:  142:    class StructValue: public Value {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  143:    public:
function _ZN10ExprEngine11StructValueC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  144:        explicit StructValue(const std::string &name) : Value(name) {}
call    0 never executed
call    1 never executed
function _ZNK10ExprEngine11StructValue4typeEv called 0 returned 0% blocks executed 0%
    #####:  145:        ValueType type() const override {
    #####:  146:            return ValueType::StructValue;
        -:  147:        }
function _ZNK10ExprEngine11StructValue8getRangeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  148:        std::string getRange() const override {
    #####:  149:            return name;
call    0 never executed
        -:  150:        }
function _ZNK10ExprEngine11StructValue16getValueOfMemberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  151:        ValuePtr getValueOfMember(const std::string &name) const {
    #####:  152:            auto it = member.find(name);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  153:            return (it == member.end()) ? ValuePtr() : it->second;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  154:        }
        -:  155:        std::map<std::string, ValuePtr> member;
        -:  156:    };
        -:  157:
function _ZN10ExprEngine14AddressOfValueD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine14AddressOfValueD2Ev called 0 returned 0% blocks executed 0%
    #####:  158:    class AddressOfValue: public Value {
call    0 never executed
call    1 never executed
call    2 never executed
        -:  159:    public:
function _ZN10ExprEngine14AddressOfValueC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####:  160:        AddressOfValue(const std::string &name, int varId)
    #####:  161:            : Value(name)
    #####:  162:            , varId(varId)
call    0 never executed
    #####:  163:        {}
        -:  164:
function _ZNK10ExprEngine14AddressOfValue4typeEv called 0 returned 0% blocks executed 0%
    #####:  165:        ValueType type() const override {
    #####:  166:            return ValueType::AddressOfValue;
        -:  167:        }
function _ZNK10ExprEngine14AddressOfValue8getRangeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  168:        std::string getRange() const override {
    #####:  169:            return "(&@" + std::to_string(varId);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  170:        }
        -:  171:
        -:  172:        int varId;
        -:  173:    };
        -:  174:
function _ZN10ExprEngine11BinOpResultD0Ev called 0 returned 0% blocks executed 0%
function _ZN10ExprEngine11BinOpResultD2Ev called 0 returned 0% blocks executed 0%
    #####:  175:    class BinOpResult : public Value {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  176:    public:
function _ZN10ExprEngine11BinOpResultC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_5ValueEESB_ called 0 returned 0% blocks executed 0%
    #####:  177:        BinOpResult(const std::string &binop, ValuePtr op1, ValuePtr op2)
    #####:  178:            : Value("(" + op1->name + ")" + binop + "(" + op2->name + ")")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
        -:  179:            , binop(binop)
        -:  180:            , op1(op1)
    #####:  181:            , op2(op2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  182:            auto b1 = std::dynamic_pointer_cast<BinOpResult>(op1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  183:            if (b1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  184:                mLeafs = b1->mLeafs;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  185:            else
    #####:  186:                mLeafs.insert(op1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  187:
    #####:  188:            auto b2 = std::dynamic_pointer_cast<BinOpResult>(op2);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  189:            if (b2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  190:                mLeafs.insert(b2->mLeafs.begin(), b2->mLeafs.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  191:            else
    #####:  192:                mLeafs.insert(op2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  193:        }
        -:  194:
function _ZNK10ExprEngine11BinOpResult4typeEv called 0 returned 0% blocks executed 0%
    #####:  195:        ValueType type() const override {
    #####:  196:            return ValueType::BinOpResult;
        -:  197:        }
        -:  198:        std::string getRange() const override;
        -:  199:        void getRange(int128_t *minValue, int128_t *maxValue) const;
        -:  200:        bool isIntValueInRange(int value) const override;
        -:  201:
        -:  202:        std::string binop;
        -:  203:        ValuePtr op1;
        -:  204:        ValuePtr op2;
        -:  205:    private:
        -:  206:        int128_t evaluate(int test, const std::map<ValuePtr, int> &valueBit) const;
        -:  207:        int128_t evaluateOperand(int test, const std::map<ValuePtr, int> &valueBit, ValuePtr value) const;
        -:  208:        std::set<ValuePtr> mLeafs;
        -:  209:    };
        -:  210:
        -:  211:    typedef std::function<void(const Token *, const ExprEngine::Value &)> Callback;
        -:  212:
        -:  213:    /** Execute all functions */
        -:  214:    void CPPCHECKLIB executeAllFunctions(const Tokenizer *tokenizer, const Settings *settings, const std::vector<Callback> &callbacks);
        -:  215:    void executeFunction(const Scope *functionScope, const Tokenizer *tokenizer, const Settings *settings, const std::vector<Callback> &callbacks);
        -:  216:
        -:  217:    void runChecks(ErrorLogger *errorLogger, const Tokenizer *tokenizer, const Settings *settings);
        -:  218:}
        -:  219:#endif // exprengineH
