        -:    0:Source:/home/workspace/lib/suppressions.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/suppressions.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/suppressions.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "suppressions.h"
        -:   20:
        -:   21:#include "errorlogger.h"
        -:   22:#include "mathlib.h"
        -:   23:#include "path.h"
        -:   24:
        -:   25:#include <tinyxml2.h>
        -:   26:
        -:   27:#include <algorithm>
        -:   28:#include <cctype>   // std::isdigit, std::isalnum, etc
        -:   29:#include <stack>
        -:   30:#include <sstream>
        -:   31:#include <utility>
        -:   32:
        -:   33:class ErrorLogger;
        -:   34:
function _ZL18isValidGlobPatternRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   35:static bool isValidGlobPattern(const std::string &pattern)
        -:   36:{
    #####:   37:    for (std::string::const_iterator i = pattern.begin(); i != pattern.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   38:        if (*i == '*' || *i == '?') {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   39:            std::string::const_iterator j = i + 1;
call    0 never executed
    #####:   40:            if (j != pattern.end() && (*j == '*' || *j == '?')) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   41:                return false;
        -:   42:            }
        -:   43:        }
        -:   44:    }
    #####:   45:    return true;
        -:   46:}
        -:   47:
function _ZL21isAcceptedErrorIdCharc called 0 returned 0% blocks executed 0%
    #####:   48:static bool isAcceptedErrorIdChar(char c)
        -:   49:{
    #####:   50:    switch (c) {
branch  0 never executed
branch  1 never executed
    #####:   51:    case '_':
        -:   52:    case '-':
        -:   53:    case '.':
    #####:   54:        return true;
    #####:   55:    default:
    #####:   56:        return std::isalnum(c);
        -:   57:    }
        -:   58:}
        -:   59:
function _ZN12Suppressions9parseFileB5cxx11ERSi called 0 returned 0% blocks executed 0%
    #####:   60:std::string Suppressions::parseFile(std::istream &istr)
        -:   61:{
        -:   62:    // Change '\r' to '\n' in the istr
    #####:   63:    std::string filedata;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   64:    std::string line;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   65:    while (std::getline(istr, line))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   66:        filedata += line + "\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:   67:    std::replace(filedata.begin(), filedata.end(), '\r', '\n');
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   68:
        -:   69:    // Parse filedata..
    #####:   70:    std::istringstream istr2(filedata);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   71:    while (std::getline(istr2, line)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:   72:        // Skip empty lines
    #####:   73:        if (line.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:            continue;
        -:   75:
        -:   76:        // Skip comments
    #####:   77:        if (line.length() > 1 && line[0] == '#')
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:   78:            continue;
    #####:   79:        if (line.length() >= 2 && line[0] == '/' && line[1] == '/')
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:   80:            continue;
        -:   81:
    #####:   82:        const std::string errmsg(addSuppressionLine(line));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   83:        if (!errmsg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   84:            return errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   85:    }
        -:   86:
    #####:   87:    return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   88:}
        -:   89:
        -:   90:
function _ZN12Suppressions12parseXmlFileB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####:   91:std::string Suppressions::parseXmlFile(const char *filename)
        -:   92:{
    #####:   93:    tinyxml2::XMLDocument doc;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   94:    const tinyxml2::XMLError error = doc.LoadFile(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:    if (error == tinyxml2::XML_ERROR_FILE_NOT_FOUND)
branch  0 never executed
branch  1 never executed
    #####:   96:        return "File not found";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   97:    if (error != tinyxml2::XML_SUCCESS)
branch  0 never executed
branch  1 never executed
    #####:   98:        return "Failed to parse XML file";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   99:
    #####:  100:    const tinyxml2::XMLElement * const rootnode = doc.FirstChildElement();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:    for (const tinyxml2::XMLElement * e = rootnode->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  102:        if (std::strcmp(e->Name(), "suppress") != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  103:            return "Invalid suppression xml file format, expected <suppress> element but got a <" + std::string(e->Name()) + '>';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  104:
    #####:  105:        Suppression s;
call    0 never executed
call    1 never executed
    #####:  106:        for (const tinyxml2::XMLElement * e2 = e->FirstChildElement(); e2; e2 = e2->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  107:            const char *text = e2->GetText() ? e2->GetText() : "";
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  108:            if (std::strcmp(e2->Name(), "id") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  109:                s.errorId = text;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  110:            else if (std::strcmp(e2->Name(), "fileName") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  111:                s.fileName = text;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  112:            else if (std::strcmp(e2->Name(), "lineNumber") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  113:                s.lineNumber = std::atoi(text);
    #####:  114:            else if (std::strcmp(e2->Name(), "symbolName") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  115:                s.symbolName = text;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  116:            else
    #####:  117:                return "Unknown suppression element <" + std::string(e2->Name()) + ">, expected <id>/<fileName>/<lineNumber>/<symbolName>";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  118:        }
        -:  119:
    #####:  120:        const std::string err = addSuppression(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  121:        if (!err.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  122:            return err;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  123:    }
        -:  124:
    #####:  125:    return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  126:}
        -:  127:
function _ZN12Suppressions18addSuppressionLineERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  128:std::string Suppressions::addSuppressionLine(const std::string &line)
        -:  129:{
    #####:  130:    std::istringstream lineStream(line);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  131:    Suppressions::Suppression suppression;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  132:    if (std::getline(lineStream, suppression.errorId, ':')) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  133:        if (std::getline(lineStream, suppression.fileName)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  134:            // If there is not a dot after the last colon in "file" then
        -:  135:            // the colon is a separator and the contents after the colon
        -:  136:            // is a line number..
        -:  137:
        -:  138:            // Get position of last colon
    #####:  139:            const std::string::size_type pos = suppression.fileName.rfind(':');
call    0 never executed
        -:  140:
        -:  141:            // if a colon is found and there is no dot after it..
    #####:  142:            if (pos != std::string::npos &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  143:                suppression.fileName.find('.', pos) == std::string::npos) {
call    0 never executed
        -:  144:                // Try to parse out the line number
        -:  145:                try {
    #####:  146:                    std::istringstream istr1(suppression.fileName.substr(pos+1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  147:                    istr1 >> suppression.lineNumber;
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  148:                } catch (...) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    =====:  149:                    suppression.lineNumber = Suppressions::Suppression::NO_LINE;
        -:  150:                }
        -:  151:
    #####:  152:                if (suppression.lineNumber != Suppressions::Suppression::NO_LINE) {
branch  0 never executed
branch  1 never executed
    #####:  153:                    suppression.fileName.erase(pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  154:                }
        -:  155:            }
        -:  156:        }
        -:  157:    }
        -:  158:
    #####:  159:    suppression.fileName = Path::simplifyPath(suppression.fileName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  160:
    #####:  161:    return addSuppression(suppression);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  162:}
        -:  163:
function _ZN12Suppressions14addSuppressionB5cxx11ERKNS_11SuppressionE called 0 returned 0% blocks executed 0%
    #####:  164:std::string Suppressions::addSuppression(const Suppressions::Suppression &suppression)
        -:  165:{
        -:  166:    // Check that errorId is valid..
    #####:  167:    if (suppression.errorId.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:        return "Failed to add suppression. No id.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  169:    }
    #####:  170:    if (suppression.errorId != "*") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  171:        for (std::string::size_type pos = 0; pos < suppression.errorId.length(); ++pos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  172:            if (suppression.errorId[pos] < 0 || !isAcceptedErrorIdChar(suppression.errorId[pos])) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  173:                return "Failed to add suppression. Invalid id \"" + suppression.errorId + "\"";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  174:            }
    #####:  175:            if (pos == 0 && std::isdigit(suppression.errorId[pos])) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  176:                return "Failed to add suppression. Invalid id \"" + suppression.errorId + "\"";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  177:            }
        -:  178:        }
        -:  179:    }
        -:  180:
    #####:  181:    if (!isValidGlobPattern(suppression.errorId))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  182:        return "Failed to add suppression. Invalid glob pattern '" + suppression.errorId + "'.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  183:    if (!isValidGlobPattern(suppression.fileName))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  184:        return "Failed to add suppression. Invalid glob pattern '" + suppression.fileName + "'.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  185:
    #####:  186:    mSuppressions.push_back(suppression);
call    0 never executed
        -:  187:
    #####:  188:    return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  189:}
        -:  190:
function _ZN12Suppressions12ErrorMessage11setFileNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  191:void Suppressions::ErrorMessage::setFileName(const std::string &s)
        -:  192:{
    #####:  193:    mFileName = Path::simplifyPath(s);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  194:}
        -:  195:
function _ZN12Suppressions11Suppression12parseCommentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS6_ called 0 returned 0% blocks executed 0%
    #####:  196:bool Suppressions::Suppression::parseComment(std::string comment, std::string *errorMessage)
        -:  197:{
    #####:  198:    if (comment.size() < 2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:        return false;
        -:  200:
    #####:  201:    if (comment.find(';') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  202:        comment.erase(comment.find(';'));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  203:
    #####:  204:    if (comment.find("//", 2) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  205:        comment.erase(comment.find("//",2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  206:
    #####:  207:    if (comment.compare(comment.size() - 2, 2, "*/") == 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  208:        comment.erase(comment.size() - 2, 2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  209:
    #####:  210:    std::istringstream iss(comment.substr(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  211:    std::string word;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  212:    iss >> word;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  213:    if (word != "cppcheck-suppress")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  214:        return false;
    #####:  215:    iss >> errorId;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:    if (!iss)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  217:        return false;
    #####:  218:    while (iss) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  219:        iss >> word;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  220:        if (!iss)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  221:            break;
    #####:  222:        if (word.find_first_not_of("+-*/%#;") == std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  223:            break;
    #####:  224:        if (word.compare(0,11,"symbolName=")==0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  225:            symbolName = word.substr(11);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  226:        else if (errorMessage && errorMessage->empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  227:            *errorMessage = "Bad suppression attribute '" + word + "'. You can write comments in the comment after a ; or //. Valid suppression attributes; symbolName=sym";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  228:    }
    #####:  229:    return true;
        -:  230:}
        -:  231:
function _ZNK12Suppressions11Suppression12isSuppressedERKNS_12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  232:bool Suppressions::Suppression::isSuppressed(const Suppressions::ErrorMessage &errmsg) const
        -:  233:{
    #####:  234:    if (!errorId.empty() && !matchglob(errorId, errmsg.errorId))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  235:        return false;
    #####:  236:    if (!fileName.empty() && !matchglob(fileName, errmsg.getFileName()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  237:        return false;
    #####:  238:    if (lineNumber != NO_LINE && lineNumber != errmsg.lineNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  239:        return false;
    #####:  240:    if (!symbolName.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  241:        for (std::string::size_type pos = 0; pos < errmsg.symbolNames.size();) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  242:            const std::string::size_type pos2 = errmsg.symbolNames.find('\n',pos);
call    0 never executed
    #####:  243:            std::string symname;
call    0 never executed
call    1 never executed
    #####:  244:            if (pos2 == std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  245:                symname = errmsg.symbolNames.substr(pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  246:                pos = pos2;
        -:  247:            } else {
    #####:  248:                symname = errmsg.symbolNames.substr(pos,pos2-pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  249:                pos = pos2+1;
        -:  250:            }
    #####:  251:            if (matchglob(symbolName, symname))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  252:                return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  253:        }
    #####:  254:        return false;
        -:  255:    }
    #####:  256:    return true;
        -:  257:}
        -:  258:
function _ZN12Suppressions11Suppression7isMatchERKNS_12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  259:bool Suppressions::Suppression::isMatch(const Suppressions::ErrorMessage &errmsg)
        -:  260:{
    #####:  261:    if (!isSuppressed(errmsg))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  262:        return false;
    #####:  263:    matched = true;
    #####:  264:    return true;
        -:  265:}
        -:  266:
function _ZNK12Suppressions11Suppression7getTextB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  267:std::string Suppressions::Suppression::getText() const
        -:  268:{
    #####:  269:    std::string ret;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  270:    if (!errorId.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  271:        ret = errorId;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  272:    if (!fileName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  273:        ret += " fileName=" + fileName;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  274:    if (lineNumber != NO_LINE)
branch  0 never executed
branch  1 never executed
    #####:  275:        ret += " lineNumber=" + MathLib::toString(lineNumber);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  276:    if (!symbolName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  277:        ret += " symbolName=" + symbolName;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  278:    if (ret.compare(0,1," ")==0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  279:        return ret.substr(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:    return ret;
call    0 never executed
        -:  281:}
        -:  282:
function _ZN12Suppressions12isSuppressedERKNS_12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  283:bool Suppressions::isSuppressed(const Suppressions::ErrorMessage &errmsg)
        -:  284:{
    #####:  285:    const bool unmatchedSuppression(errmsg.errorId == "unmatchedSuppression");
call    0 never executed
    #####:  286:    for (Suppression &s : mSuppressions) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:  287:        if (unmatchedSuppression && s.errorId != errmsg.errorId)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  288:            continue;
    #####:  289:        if (s.isMatch(errmsg))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  290:            return true;
        -:  291:    }
    #####:  292:    return false;
        -:  293:}
        -:  294:
function _ZN12Suppressions17isSuppressedLocalERKNS_12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  295:bool Suppressions::isSuppressedLocal(const Suppressions::ErrorMessage &errmsg)
        -:  296:{
    #####:  297:    const bool unmatchedSuppression(errmsg.errorId == "unmatchedSuppression");
call    0 never executed
    #####:  298:    for (Suppression &s : mSuppressions) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:  299:        if (!s.isLocal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  300:            continue;
    #####:  301:        if (unmatchedSuppression && s.errorId != errmsg.errorId)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  302:            continue;
    #####:  303:        if (s.isMatch(errmsg))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  304:            return true;
        -:  305:    }
    #####:  306:    return false;
        -:  307:}
        -:  308:
function _ZNK12Suppressions4dumpERSo called 0 returned 0% blocks executed 0%
    #####:  309:void Suppressions::dump(std::ostream & out) const
        -:  310:{
    #####:  311:    out << "  <suppressions>" << std::endl;
call    0 never executed
call    1 never executed
    #####:  312:    for (const Suppression &suppression : mSuppressions) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  313:        out << "    <suppression";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  314:        out << " errorId=\"" << ErrorLogger::toxml(suppression.errorId) << '"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  315:        if (!suppression.fileName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  316:            out << " fileName=\"" << ErrorLogger::toxml(suppression.fileName) << '"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  317:        if (suppression.lineNumber != Suppression::NO_LINE)
branch  0 never executed
branch  1 never executed
    #####:  318:            out << " lineNumber=\"" << suppression.lineNumber << '"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  319:        if (!suppression.symbolName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  320:            out << " symbolName=\"" << ErrorLogger::toxml(suppression.symbolName) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  321:        out << " />" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  322:    }
    #####:  323:    out << "  </suppressions>" << std::endl;
call    0 never executed
call    1 never executed
    #####:  324:}
        -:  325:
        -:  326:#include <iostream>
        -:  327:
function _ZNK12Suppressions29getUnmatchedLocalSuppressionsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  328:std::list<Suppressions::Suppression> Suppressions::getUnmatchedLocalSuppressions(const std::string &file, const bool unusedFunctionChecking) const
        -:  329:{
    #####:  330:    std::list<Suppression> result;
call    0 never executed
    #####:  331:    for (const Suppression &s : mSuppressions) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  332:        if (s.matched)
branch  0 never executed
branch  1 never executed
    #####:  333:            continue;
    #####:  334:        if (!unusedFunctionChecking && s.errorId == "unusedFunction")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  335:            continue;
    #####:  336:        if (file.empty() || !s.isLocal() || s.fileName != file)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  337:            continue;
    #####:  338:        result.push_back(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  339:    }
    #####:  340:    return result;
        -:  341:}
        -:  342:
function _ZNK12Suppressions30getUnmatchedGlobalSuppressionsEb called 0 returned 0% blocks executed 0%
    #####:  343:std::list<Suppressions::Suppression> Suppressions::getUnmatchedGlobalSuppressions(const bool unusedFunctionChecking) const
        -:  344:{
    #####:  345:    std::list<Suppression> result;
call    0 never executed
    #####:  346:    for (const Suppression &s : mSuppressions) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  347:        if (s.matched)
branch  0 never executed
branch  1 never executed
    #####:  348:            continue;
    #####:  349:        if (!unusedFunctionChecking && s.errorId == "unusedFunction")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  350:            continue;
    #####:  351:        if (s.isLocal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  352:            continue;
    #####:  353:        result.push_back(s);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  354:    }
    #####:  355:    return result;
        -:  356:}
        -:  357:
function _ZN12Suppressions9matchglobERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:  358:bool Suppressions::matchglob(const std::string &pattern, const std::string &name)
        -:  359:{
    #####:  360:    const char *p = pattern.c_str();
call    0 never executed
    #####:  361:    const char *n = name.c_str();
call    0 never executed
    #####:  362:    std::stack<std::pair<const char *, const char *> > backtrack;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  363:
        -:  364:    for (;;) {
    #####:  365:        bool matching = true;
    #####:  366:        while (*p != '\0' && matching) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  367:            switch (*p) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  368:            case '*':
        -:  369:                // Step forward until we match the next character after *
    #####:  370:                while (*n != '\0' && *n != p[1]) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  371:                    n++;
        -:  372:                }
    #####:  373:                if (*n != '\0') {
branch  0 never executed
branch  1 never executed
        -:  374:                    // If this isn't the last possibility, save it for later
    #####:  375:                    backtrack.push(std::make_pair(p, n));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  376:                }
    #####:  377:                break;
    #####:  378:            case '?':
        -:  379:                // Any character matches unless we're at the end of the name
    #####:  380:                if (*n != '\0') {
branch  0 never executed
branch  1 never executed
    #####:  381:                    n++;
        -:  382:                } else {
    #####:  383:                    matching = false;
        -:  384:                }
    #####:  385:                break;
    #####:  386:            default:
        -:  387:                // Non-wildcard characters match literally
    #####:  388:                if (*n == *p) {
branch  0 never executed
branch  1 never executed
    #####:  389:                    n++;
    #####:  390:                } else if (*n == '\\' && *p == '/') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  391:                    n++;
    #####:  392:                } else if (*n == '/' && *p == '\\') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  393:                    n++;
        -:  394:                } else {
    #####:  395:                    matching = false;
        -:  396:                }
    #####:  397:                break;
        -:  398:            }
    #####:  399:            p++;
        -:  400:        }
        -:  401:
        -:  402:        // If we haven't failed matching and we've reached the end of the name, then success
    #####:  403:        if (matching && *n == '\0') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  404:            return true;
        -:  405:        }
        -:  406:
        -:  407:        // If there are no other paths to try, then fail
    #####:  408:        if (backtrack.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  409:            return false;
        -:  410:        }
        -:  411:
        -:  412:        // Restore pointers from backtrack stack
    #####:  413:        p = backtrack.top().first;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  414:        n = backtrack.top().second;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  415:        backtrack.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  416:
        -:  417:        // Advance name pointer by one because the current position didn't work
    #####:  418:        n++;
    #####:  419:    }
function _GLOBAL__sub_I__ZN12Suppressions9parseFileB5cxx11ERSi called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  420:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
