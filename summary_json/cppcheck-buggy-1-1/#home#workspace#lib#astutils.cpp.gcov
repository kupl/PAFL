        -:    0:Source:/home/workspace/lib/astutils.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/astutils.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/astutils.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "astutils.h"
        -:   22:
        -:   23:#include "library.h"
        -:   24:#include "mathlib.h"
        -:   25:#include "settings.h"
        -:   26:#include "symboldatabase.h"
        -:   27:#include "token.h"
        -:   28:#include "valueflow.h"
        -:   29:
        -:   30:#include <list>
        -:   31:#include <stack>
        -:   32:
        -:   33:
function _Z13visitAstNodesPK5TokenSt8functionIF15ChildrenToVisitS1_EE called 31 returned 100% blocks executed 83%
       31:   34:void visitAstNodes(const Token *ast, std::function<ChildrenToVisit(const Token *)> visitor)
        -:   35:{
       62:   36:    std::stack<const Token *> tokens;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       31:   37:    tokens.push(ast);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      233:   38:    while (!tokens.empty()) {
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
      101:   39:        const Token *tok = tokens.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      101:   40:        tokens.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      101:   41:        if (!tok)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
       63:   42:            continue;
        -:   43:
       38:   44:        ChildrenToVisit c = visitor(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   45:
       38:   46:        if (c == ChildrenToVisit::done)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:            break;
       38:   48:        if (c == ChildrenToVisit::op1 || c == ChildrenToVisit::op1_and_op2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
       35:   49:            tokens.push(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       38:   50:        if (c == ChildrenToVisit::op2 || c == ChildrenToVisit::op1_and_op2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
       35:   51:            tokens.push(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   52:    }
       31:   53:}
        -:   54:
function _ZL19astFlattenRecursivePK5TokenPNSt7__debug6vectorIS1_SaIS1_EEEPKci called 1621 returned 100% blocks executed 100%
     1621:   55:static void astFlattenRecursive(const Token *tok, std::vector<const Token *> *result, const char* op, nonneg int depth = 0)
        -:   56:{
     1621:   57:    ++depth;
     1621:   58:    if (!tok || depth >= 100)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      333:   59:        return;
     1288:   60:    if (tok->str() == op) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
      147:   61:        astFlattenRecursive(tok->astOperand1(), result, op, depth);
call    0 returned 100%
call    1 returned 100%
      147:   62:        astFlattenRecursive(tok->astOperand2(), result, op, depth);
call    0 returned 100%
call    1 returned 100%
        -:   63:    } else {
     1141:   64:        result->push_back(tok);
call    0 returned 100%
        -:   65:    }
        -:   66:}
        -:   67:
function _Z10astFlattenPK5TokenPKc called 1327 returned 100% blocks executed 83%
     1327:   68:std::vector<const Token*> astFlatten(const Token* tok, const char* op)
        -:   69:{
     1327:   70:    std::vector<const Token*> result;
call    0 returned 100%
     1327:   71:    astFlattenRecursive(tok, &result, op);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1327:   72:    return result;
call    0 never executed
        -:   73:}
        -:   74:
        -:   75:
function _Z11astHasTokenPK5TokenS1_ called 0 returned 0% blocks executed 0%
    #####:   76:bool astHasToken(const Token* root, const Token * tok)
        -:   77:{
    #####:   78:    if (!root)
branch  0 never executed
branch  1 never executed
    #####:   79:        return false;
    #####:   80:    if (root == tok)
branch  0 never executed
branch  1 never executed
    #####:   81:        return true;
    #####:   82:    return astHasToken(root->astOperand1(), tok) || astHasToken(root->astOperand2(), tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   83:}
        -:   84:
function _Z9astHasVarPK5Tokeni called 12 returned 100% blocks executed 87%
       12:   85:bool astHasVar(const Token * tok, nonneg int varid)
        -:   86:{
       12:   87:    if (!tok)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        8:   88:        return false;
        4:   89:    if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   90:        return true;
        4:   91:    return astHasVar(tok->astOperand1(), varid) || astHasVar(tok->astOperand2(), varid);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:   92:}
        -:   93:
function _ZL17astIsCharWithSignPK5TokenN9ValueType4SignE called 0 returned 0% blocks executed 0%
    #####:   94:static bool astIsCharWithSign(const Token *tok, ValueType::Sign sign)
        -:   95:{
    #####:   96:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:   97:        return false;
    #####:   98:    const ValueType *valueType = tok->valueType();
call    0 never executed
    #####:   99:    if (!valueType)
branch  0 never executed
branch  1 never executed
    #####:  100:        return false;
    #####:  101:    return valueType->type == ValueType::Type::CHAR && valueType->pointer == 0U && valueType->sign == sign;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  102:}
        -:  103:
function _Z15astIsSignedCharPK5Token called 0 returned 0% blocks executed 0%
    #####:  104:bool astIsSignedChar(const Token *tok)
        -:  105:{
    #####:  106:    return astIsCharWithSign(tok, ValueType::Sign::SIGNED);
call    0 never executed
        -:  107:}
        -:  108:
function _Z20astIsUnknownSignCharPK5Token called 0 returned 0% blocks executed 0%
    #####:  109:bool astIsUnknownSignChar(const Token *tok)
        -:  110:{
    #####:  111:    return astIsCharWithSign(tok, ValueType::Sign::UNKNOWN_SIGN);
call    0 never executed
        -:  112:}
        -:  113:
function _Z13astIsIntegralPK5Tokenb called 1843 returned 100% blocks executed 92%
     1843:  114:bool astIsIntegral(const Token *tok, bool unknown)
        -:  115:{
     1843:  116:    const ValueType *vt = tok ? tok->valueType() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     1843:  117:    if (!vt)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
     1070:  118:        return unknown;
      773:  119:    return vt->isIntegral() && vt->pointer == 0U;
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
        -:  120:}
        -:  121:
function _Z10astIsFloatPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  122:bool astIsFloat(const Token *tok, bool unknown)
        -:  123:{
    #####:  124:    const ValueType *vt = tok ? tok->valueType() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  125:    if (!vt)
branch  0 never executed
branch  1 never executed
    #####:  126:        return unknown;
    #####:  127:    return vt->type >= ValueType::Type::FLOAT && vt->pointer == 0U;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  128:}
        -:  129:
function _Z9astIsBoolPK5Token called 0 returned 0% blocks executed 0%
    #####:  130:bool astIsBool(const Token *tok)
        -:  131:{
    #####:  132:    return tok && (tok->isBoolean() || (tok->valueType() && tok->valueType()->type == ValueType::Type::BOOL && !tok->valueType()->pointer));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -:  133:}
        -:  134:
function _Z12astIsPointerPK5Token called 2101 returned 100% blocks executed 100%
     2101:  135:bool astIsPointer(const Token *tok)
        -:  136:{
     2101:  137:    return tok && tok->valueType() && tok->valueType()->pointer;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
call    2 returned 100%
branch  3 taken 65% (fallthrough)
branch  4 taken 35%
call    5 returned 100%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
        -:  138:}
        -:  139:
function _Z13astIsIteratorPK5Token called 0 returned 0% blocks executed 0%
    #####:  140:bool astIsIterator(const Token *tok)
        -:  141:{
    #####:  142:    return tok && tok->valueType() && tok->valueType()->type == ValueType::Type::ITERATOR;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  143:}
        -:  144:
function _Z14astIsContainerPK5Token called 37058 returned 100% blocks executed 63%
    37058:  145:bool astIsContainer(const Token *tok)
        -:  146:{
    37058:  147:    return getLibraryContainer(tok) != nullptr && tok->valueType()->type != ValueType::Type::ITERATOR;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  148:}
        -:  149:
function _Z16astCanonicalTypeB5cxx11PK5Token called 58 returned 100% blocks executed 70%
       58:  150:std::string astCanonicalType(const Token *expr)
        -:  151:{
       58:  152:    if (!expr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  153:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
       58:  154:    if (expr->variable()) {
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
       33:  155:        const Variable *var = expr->variable();
call    0 returned 100%
       66:  156:        std::string ret;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
      120:  157:        for (const Token *type = var->typeStartToken(); Token::Match(type,"%name%|::") && type != var->nameToken(); type = type->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 73% (fallthrough)
branch  5 taken 28%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 73% (fallthrough)
branch 10 taken 28%
call   11 returned 100%
       87:  158:            if (!Token::Match(type, "const|static"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       87:  159:                ret += type->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  160:        }
       33:  161:        return ret;
call    0 returned 100%
        -:  162:
        -:  163:    }
        -:  164:    // TODO: handle expressions
       25:  165:    return "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  166:}
        -:  167:
function _ZL5matchPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 144 returned 100% blocks executed 88%
      144:  168:static bool match(const Token *tok, const std::string &rhs)
        -:  169:{
      144:  170:    if (tok->str() == rhs)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        8:  171:        return true;
      136:  172:    if (!tok->varId() && tok->hasKnownIntValue() && MathLib::toString(tok->values().front().intvalue) == rhs)
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 43% (fallthrough)
branch  7 taken 58%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 38% (fallthrough)
branch 15 taken 62%
branch 16 taken 25% (fallthrough)
branch 17 taken 75%
call   18 returned 100%
branch 19 taken 10% (fallthrough)
branch 20 taken 90%
branch 21 never executed
branch 22 never executed
call   23 never executed
       13:  173:        return true;
      123:  174:    return false;
        -:  175:}
        -:  176:
function _Z23astIsVariableComparisonPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_PS1_ called 15230 returned 100% blocks executed 74%
    15230:  177:const Token * astIsVariableComparison(const Token *tok, const std::string &comp, const std::string &rhs, const Token **vartok)
        -:  178:{
    15230:  179:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  180:        return nullptr;
        -:  181:
    15230:  182:    const Token *ret = nullptr;
    15230:  183:    if (tok->isComparisonOp()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      104:  184:        if (tok->astOperand1() && match(tok->astOperand1(), rhs)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
branch  9 taken 2% (fallthrough)
branch 10 taken 98%
        -:  185:            // Invert comparator
        4:  186:            std::string s = tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        2:  187:            if (s[0] == '>')
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  188:                s[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
        2:  189:            else if (s[0] == '<')
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  190:                s[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        2:  191:            if (s == comp) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  192:                ret = tok->astOperand2();
call    0 returned 100%
        -:  193:            }
      102:  194:        } else if (tok->str() == comp && tok->astOperand2() && match(tok->astOperand2(), rhs)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 48% (fallthrough)
branch 12 taken 52%
branch 13 taken 19% (fallthrough)
branch 14 taken 81%
       19:  195:            ret = tok->astOperand1();
call    0 returned 100%
        -:  196:        }
    15126:  197:    } else if (comp == "!=" && rhs == std::string("0")) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 20% (fallthrough)
branch 11 taken 80%
call   12 returned 100%
branch 13 taken 20% (fallthrough)
branch 14 taken 80%
call   15 returned 100%
branch 16 taken 20% (fallthrough)
branch 17 taken 80%
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
     3056:  198:        ret = tok;
    12070:  199:    } else if (comp == "==" && rhs == std::string("0")) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
call   12 returned 100%
branch 13 taken 50% (fallthrough)
branch 14 taken 50%
call   15 returned 100%
branch 16 taken 25% (fallthrough)
branch 17 taken 75%
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
     3025:  200:        if (tok->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       11:  201:            ret = tok->astOperand1();
call    0 returned 100%
        -:  202:            // handle (!(x!=0)) as (x==0)
       11:  203:            astIsVariableComparison(ret, "!=", "0", &ret);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  204:        }
        -:  205:    }
    15230:  206:    while (ret && ret->str() == ".")
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  207:        ret = ret->astOperand2();
call    0 never executed
    15230:  208:    if (ret && ret->str() == "=" && ret->astOperand1() && ret->astOperand1()->varId())
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 92% (fallthrough)
branch 12 taken 8%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
       12:  209:        ret = ret->astOperand1();
call    0 returned 100%
    15218:  210:    else if (ret && ret->varId() == 0U)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
     3027:  211:        ret = nullptr;
    15230:  212:    if (vartok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    15230:  213:        *vartok = ret;
    15230:  214:    return ret;
        -:  215:}
        -:  216:
function _ZL14isFunctionCallPK5Token called 0 returned 0% blocks executed 0%
    #####:  217:static bool isFunctionCall(const Token* tok)
        -:  218:{
    #####:  219:    if (Token::Match(tok, "%name% ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  220:        return true;
    #####:  221:    if (Token::Match(tok, "%name% <") && Token::simpleMatch(tok->next()->link(), "> ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  222:        return true;
    #####:  223:    if (Token::Match(tok, "%name% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  224:        return isFunctionCall(tok->tokAt(2));
call    0 never executed
call    1 never executed
    #####:  225:    return false;
        -:  226:}
        -:  227:
function _ZL8hasTokenPK5TokenS1_S1_ called 12 returned 100% blocks executed 100%
       12:  228:static bool hasToken(const Token * startTok, const Token * stopTok, const Token * tok)
        -:  229:{
       16:  230:    for (const Token * tok2 = startTok; tok2 != stopTok; tok2 = tok2->next()) {
branch  0 taken 88% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
       14:  231:        if (tok2 == tok)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
       10:  232:            return true;
        -:  233:    }
        2:  234:    return false;
        -:  235:}
        -:  236:
function _Z25nextAfterAstRightmostLeafPK5Token called 37 returned 100% blocks executed 82%
       37:  237:const Token * nextAfterAstRightmostLeaf(const Token * tok)
        -:  238:{
       37:  239:    const Token * rightmostLeaf = tok;
       37:  240:    if (!rightmostLeaf || !rightmostLeaf->astOperand1())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  241:        return nullptr;
        2:  242:    do {
       39:  243:        if (rightmostLeaf->astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       39:  244:            rightmostLeaf = rightmostLeaf->astOperand2();
call    0 returned 100%
        -:  245:        else
    #####:  246:            rightmostLeaf = rightmostLeaf->astOperand1();
call    0 never executed
       39:  247:    } while (rightmostLeaf->astOperand1());
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        2:  248:    while (Token::Match(rightmostLeaf->next(), "]|)") && !hasToken(rightmostLeaf->next()->link(), rightmostLeaf->next(), tok))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 17% (fallthrough)
branch  9 taken 83%
branch 10 taken 5% (fallthrough)
branch 11 taken 95%
        2:  249:        rightmostLeaf = rightmostLeaf->next();
call    0 returned 100%
       37:  250:    if (rightmostLeaf->str() == "{" && rightmostLeaf->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  251:        rightmostLeaf = rightmostLeaf->link();
call    0 never executed
       37:  252:    return rightmostLeaf->next();
call    0 returned 100%
        -:  253:}
        -:  254:
function _Z19astParentSkipParensPK5Token called 0 returned 0% blocks executed 0%
    #####:  255:const Token* astParentSkipParens(const Token* tok)
        -:  256:{
    #####:  257:    return astParentSkipParens(const_cast<Token*>(tok));
call    0 never executed
        -:  258:}
function _Z19astParentSkipParensP5Token called 0 returned 0% blocks executed 0%
    #####:  259:Token* astParentSkipParens(Token* tok)
        -:  260:{
    #####:  261:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  262:        return nullptr;
    #####:  263:    Token * parent = tok->astParent();
call    0 never executed
    #####:  264:    if (!Token::simpleMatch(parent, "("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  265:        return parent;
    #####:  266:    if (parent->link() != nextAfterAstRightmostLeaf(tok))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  267:        return parent;
    #####:  268:    return astParentSkipParens(parent);
call    0 never executed
        -:  269:}
        -:  270:
function _ZL25getVariableInitExpressionPK8Variable called 0 returned 0% blocks executed 0%
    #####:  271:static const Token * getVariableInitExpression(const Variable * var)
        -:  272:{
    #####:  273:    if (!var || !var->declEndToken())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  274:        return nullptr;
    #####:  275:    if (Token::Match(var->declEndToken(), "; %varid% =", var->declarationId()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  276:        return var->declEndToken()->tokAt(2)->astOperand2();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  277:    return var->declEndToken()->astOperand2();
call    0 never executed
call    1 never executed
        -:  278:}
        -:  279:
function _ZL17isInLoopConditionPK5Token called 0 returned 0% blocks executed 0%
    #####:  280:static bool isInLoopCondition(const Token * tok)
        -:  281:{
    #####:  282:    return Token::Match(tok->astTop()->previous(), "for|while (");
call    0 never executed
call    1 never executed
call    2 never executed
        -:  283:}
        -:  284:
        -:  285:/// If tok2 comes after tok1
function _Z8precedesPK5TokenS1_ called 309 returned 100% blocks executed 75%
      309:  286:bool precedes(const Token * tok1, const Token * tok2)
        -:  287:{
      309:  288:    if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  289:        return false;
      309:  290:    if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  291:        return false;
      309:  292:    return tok1->index() < tok2->index();
call    0 returned 100%
call    1 returned 100%
        -:  293:}
        -:  294:
function _Z9isAliasOfPK5Tokeni called 45 returned 100% blocks executed 71%
       45:  295:bool isAliasOf(const Token *tok, nonneg int varid)
        -:  296:{
       45:  297:    if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  298:        return false;
       45:  299:    if (tok->varId() == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  300:        return false;
       49:  301:    for (const ValueFlow::Value &val : tok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 8% (fallthrough)
branch  5 taken 92%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100%
branch 10 taken 0%
call   11 returned 100%
branch 12 taken 100%
branch 13 taken 0%
        4:  302:        if (!val.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  303:            continue;
    #####:  304:        if (val.isInconclusive())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  305:            continue;
    #####:  306:        if (val.tokvalue->varId() == varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  307:            return true;
        -:  308:    }
       45:  309:    return false;
        -:  310:}
        -:  311:
function _ZL9isAliasedPK5TokenS1_i called 0 returned 0% blocks executed 0%
    #####:  312:static bool isAliased(const Token *startTok, const Token *endTok, nonneg int varid)
        -:  313:{
    #####:  314:    if (!precedes(startTok, endTok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  315:        return false;
    #####:  316:    for (const Token *tok = startTok; tok != endTok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  317:        if (Token::Match(tok, "= & %varid% ;", varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:            return true;
    #####:  319:        if (isAliasOf(tok, varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  320:            return true;
        -:  321:    }
    #####:  322:    return false;
        -:  323:}
        -:  324:
function _Z9isAliasedPK8Variable called 0 returned 0% blocks executed 0%
    #####:  325:bool isAliased(const Variable *var)
        -:  326:{
    #####:  327:    if (!var)
branch  0 never executed
branch  1 never executed
    #####:  328:        return false;
    #####:  329:    if (!var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  330:        return false;
    #####:  331:    const Token *start = var->declEndToken();
call    0 never executed
    #####:  332:    if (!start)
branch  0 never executed
branch  1 never executed
    #####:  333:        return false;
    #####:  334:    return isAliased(start, var->scope()->bodyEnd, var->declarationId());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  335:}
        -:  336:
function _ZL17exprDependsOnThisPK5Tokeni called 0 returned 0% blocks executed 0%
    #####:  337:static bool exprDependsOnThis(const Token *expr, nonneg int depth)
        -:  338:{
    #####:  339:    if (!expr)
branch  0 never executed
branch  1 never executed
    #####:  340:        return false;
    #####:  341:    if (depth >= 1000)
branch  0 never executed
branch  1 never executed
        -:  342:        // Abort recursion to avoid stack overflow
    #####:  343:        return true;
    #####:  344:    ++depth;
        -:  345:    // calling nonstatic method?
    #####:  346:    if (Token::Match(expr->previous(), "!!:: %name% (") && expr->function() && expr->function()->nestedIn && expr->function()->nestedIn->isClassOrStruct()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  347:        // is it a method of this?
    #####:  348:        const Scope *nestedIn = expr->scope()->functionOf;
call    0 never executed
    #####:  349:        if (nestedIn && nestedIn->function)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  350:            nestedIn = nestedIn->function->token->scope();
call    0 never executed
    #####:  351:        while (nestedIn && nestedIn != expr->function()->nestedIn) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  352:            nestedIn = nestedIn->nestedIn;
        -:  353:        }
    #####:  354:        return nestedIn == expr->function()->nestedIn;
call    0 never executed
        -:  355:    }
    #####:  356:    return exprDependsOnThis(expr->astOperand1(), depth) || exprDependsOnThis(expr->astOperand2(), depth);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  357:}
        -:  358:
        -:  359:/// This takes a token that refers to a variable and it will return the token
        -:  360:/// to the expression that the variable is assigned to. If its not valid to
        -:  361:/// make such substitution then it will return the original token.
function _ZL24followVariableExpressionPK5TokenbS1_ called 0 returned 0% blocks executed 0%
    #####:  362:static const Token * followVariableExpression(const Token * tok, bool cpp, const Token * end = nullptr)
        -:  363:{
    #####:  364:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  365:        return tok;
        -:  366:    // Skip following variables that is across multiple files
    #####:  367:    if (end && end->fileIndex() != tok->fileIndex())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  368:        return tok;
        -:  369:    // Skip array access
    #####:  370:    if (Token::Match(tok, "%var% ["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  371:        return tok;
        -:  372:    // Skip pointer indirection
    #####:  373:    if (tok->astParent() && tok->isUnaryOp("*"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####:  374:        return tok;
        -:  375:    // Skip following variables if it is used in an assignment
    #####:  376:    if (Token::Match(tok->next(), "%assign%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  377:        return tok;
    #####:  378:    const Variable * var = tok->variable();
call    0 never executed
    #####:  379:    const Token * varTok = getVariableInitExpression(var);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  380:    if (!varTok)
branch  0 never executed
branch  1 never executed
    #####:  381:        return tok;
        -:  382:    // Bailout. If variable value depends on value of "this".
    #####:  383:    if (exprDependsOnThis(varTok, 0))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  384:        return tok;
        -:  385:    // Skip array access
    #####:  386:    if (Token::simpleMatch(varTok, "["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  387:        return tok;
    #####:  388:    if (var->isVolatile())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  389:        return tok;
    #####:  390:    if (!var->isLocal() && !var->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  391:        return tok;
    #####:  392:    if (var->isStatic() && !var->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  393:        return tok;
    #####:  394:    if (var->isArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  395:        return tok;
    #####:  396:    const Token * lastTok = precedes(tok, end) ? end : tok;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  397:    // If this is in a loop then check if variables are modified in the entire scope
    #####:  398:    const Token * endToken = (isInLoopCondition(tok) || isInLoopCondition(varTok) || var->scope() != tok->scope()) ? var->scope()->bodyEnd : lastTok;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
    #####:  399:    if (!var->isConst() && (!precedes(varTok, endToken) || isVariableChanged(varTok, endToken, tok->varId(), false, nullptr, cpp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  400:        return tok;
    #####:  401:    if (precedes(varTok, endToken) && isAliased(varTok, endToken, tok->varId()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  402:        return tok;
        -:  403:    // Start at beginning of initialization
    #####:  404:    const Token * startToken = varTok;
    #####:  405:    while (Token::Match(startToken, "%op%|.|(|{") && startToken->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  406:        startToken = startToken->astOperand1();
call    0 never executed
        -:  407:    // Skip if the variable its referring to is modified
    #####:  408:    for (const Token * tok2 = startToken; tok2 != endToken; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  409:        if (Token::simpleMatch(tok2, ";"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  410:            break;
    #####:  411:        if (tok2->astParent() && tok2->isUnaryOp("*"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####:  412:            return tok;
    #####:  413:        if (tok2->tokType() == Token::eIncDecOp ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  414:            tok2->isAssignmentOp() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  415:            Token::Match(tok2, "%name% .|[|++|--|%assign%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  416:            return tok;
        -:  417:        }
        -:  418:
    #####:  419:        if (const Variable * var2 = tok2->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  420:            if (!var2->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  421:                return tok;
    #####:  422:            const Token * endToken2 = var2->scope() != tok->scope() ? var2->scope()->bodyEnd : endToken;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  423:            if (!var2->isLocal() && !var2->isConst() && !var2->isArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  424:                return tok;
    #####:  425:            if (var2->isStatic() && !var2->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  426:                return tok;
    #####:  427:            if (!var2->isConst() && (!precedes(tok2, endToken2) || isVariableChanged(tok2, endToken2, tok2->varId(), false, nullptr, cpp)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  428:                return tok;
    #####:  429:            if (precedes(tok2, endToken2) && isAliased(tok2, endToken2, tok2->varId()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  430:                return tok;
        -:  431:            // Recognized as a variable but the declaration is unknown
    #####:  432:        } else if (tok2->varId() > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  433:            return tok;
    #####:  434:        } else if (tok2->tokType() == Token::eName && !Token::Match(tok2, "sizeof|decltype|typeof") && !tok2->function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  435:            return tok;
        -:  436:        }
        -:  437:    }
    #####:  438:    return varTok;
        -:  439:}
        -:  440:
function _ZL29followVariableExpressionErrorPK5TokenS1_PNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEE called 0 returned 0% blocks executed 0%
    #####:  441:static void followVariableExpressionError(const Token *tok1, const Token *tok2, ErrorPath* errors)
        -:  442:{
    #####:  443:    if (!errors)
branch  0 never executed
branch  1 never executed
    #####:  444:        return;
call    0 never executed
    #####:  445:    if (!tok1)
branch  0 never executed
branch  1 never executed
    #####:  446:        return;
    #####:  447:    if (!tok2)
branch  0 never executed
branch  1 never executed
    #####:  448:        return;
    #####:  449:    ErrorPathItem item = std::make_pair(tok2, "'" + tok1->str() + "' is assigned value '" + tok2->expressionString() + "' here.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
    #####:  450:    if (std::find(errors->begin(), errors->end(), item) != errors->end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  451:        return;
    #####:  452:    errors->push_back(item);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  453:}
        -:  454:
        -:  455:template<class Predicate, class F>
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZ22isDifferentKnownValuesPK5TokenS8_EUlRKS2_E_EvS8_T_T0_ called 14 returned 100% blocks executed 69%
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZZ22isDifferentKnownValuesPK5TokenS8_ENKUlRKS2_E_clESA_EUlSA_E_EvS8_T_T0_ called 6 returned 100% blocks executed 74%
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZ17isEqualKnownValuePK5TokenS8_EUlRKS2_E_EvS8_T_T0_ called 0 returned 0% blocks executed 0%
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZZ17isEqualKnownValuePK5TokenS8_ENKUlRKS2_E_clESA_EUlSA_E_EvS8_T_T0_ called 0 returned 0% blocks executed 0%
       20:  456:static void findTokenValue(const Token* const tok, Predicate pred, F f)
        -:  457:{
       40:  458:    auto x = std::find_if(tok->values().begin(), tok->values().end(), pred);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
       20:  459:    if (x != tok->values().end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 33% (fallthrough)
branch 11 taken 67%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
        8:  460:        f(*x);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
       20:  461:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  462:
function _Z17isEqualKnownValuePK5TokenS1_ called 0 returned 0% blocks executed 0%
    #####:  463:bool isEqualKnownValue(const Token * const tok1, const Token * const tok2)
        -:  464:{
    #####:  465:    bool result = false;
function _ZZ17isEqualKnownValuePK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ called 0 returned 0% blocks executed 0%
    #####:  466:    findTokenValue(tok1, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v1) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
function _ZZZ17isEqualKnownValuePK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ENKUlS5_E_clES5_ called 0 returned 0% blocks executed 0%
    #####:  467:        findTokenValue(tok2, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v2) {
call    0 never executed
call    1 never executed
    #####:  468:            result = v1.equalValue(v2);
call    0 never executed
    #####:  469:        });
    #####:  470:    });
    #####:  471:    return result;
        -:  472:}
        -:  473:
function _Z22isDifferentKnownValuesPK5TokenS1_ called 14 returned 100% blocks executed 100%
       14:  474:bool isDifferentKnownValues(const Token * const tok1, const Token * const tok2)
        -:  475:{
       14:  476:    bool result = false;
function _ZZ22isDifferentKnownValuesPK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ called 6 returned 100% blocks executed 100%
       20:  477:    findTokenValue(tok1, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v1) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
function _ZZZ22isDifferentKnownValuesPK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ENKUlS5_E_clES5_ called 2 returned 100% blocks executed 100%
        8:  478:        findTokenValue(tok2, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v2) {
call    0 returned 100%
call    1 returned 100%
        8:  479:            result = !v1.equalValue(v2);
call    0 returned 100%
        2:  480:        });
        6:  481:    });
       14:  482:    return result;
        -:  483:}
        -:  484:
function _Z16isSameExpressionbbPK5TokenS1_RK7LibrarybbPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 74 returned 100% blocks executed 32%
       74:  485:bool isSameExpression(bool cpp, bool macro, const Token *tok1, const Token *tok2, const Library& library, bool pure, bool followVar, ErrorPath* errors)
        -:  486:{
       74:  487:    if (tok1 == nullptr && tok2 == nullptr)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       40:  488:        return true;
       34:  489:    if (tok1 == nullptr || tok2 == nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  490:        return false;
       34:  491:    if (cpp) {
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        8:  492:        if (tok1->str() == "." && tok1->astOperand1() && tok1->astOperand1()->str() == "this")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  493:            tok1 = tok1->astOperand2();
call    0 never executed
        8:  494:        if (tok2->str() == "." && tok2->astOperand1() && tok2->astOperand1()->str() == "this")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  495:            tok2 = tok2->astOperand2();
call    0 never executed
        -:  496:    }
        -:  497:    // Skip double not
       34:  498:    if (Token::simpleMatch(tok1, "!") && Token::simpleMatch(tok1->astOperand1(), "!") && !Token::simpleMatch(tok1->astParent(), "=")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  499:        return isSameExpression(cpp, macro, tok1->astOperand1()->astOperand1(), tok2, library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  500:    }
       34:  501:    if (Token::simpleMatch(tok2, "!") && Token::simpleMatch(tok2->astOperand1(), "!") && !Token::simpleMatch(tok2->astParent(), "=")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  502:        return isSameExpression(cpp, macro, tok1, tok2->astOperand1()->astOperand1(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  503:    }
       34:  504:    if (tok1->str() != tok2->str() && isDifferentKnownValues(tok1, tok2))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
call    5 returned 100%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
branch  8 taken 6% (fallthrough)
branch  9 taken 94%
        2:  505:        return false;
        -:  506:    // Follow variable
       32:  507:    if (followVar && tok1->str() != tok2->str() && (Token::Match(tok1, "%var%") || Token::Match(tok2, "%var%"))) {
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####:  508:        const Token * varTok1 = followVariableExpression(tok1, cpp, tok2);
call    0 never executed
    #####:  509:        if (varTok1->str() == tok2->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  510:            followVariableExpressionError(tok1, varTok1, errors);
call    0 never executed
    #####:  511:            return isSameExpression(cpp, macro, varTok1, tok2, library, true, followVar, errors);
call    0 never executed
        -:  512:        }
    #####:  513:        const Token * varTok2 = followVariableExpression(tok2, cpp, tok1);
call    0 never executed
    #####:  514:        if (tok1->str() == varTok2->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  515:            followVariableExpressionError(tok2, varTok2, errors);
call    0 never executed
    #####:  516:            return isSameExpression(cpp, macro, tok1, varTok2, library, true, followVar, errors);
call    0 never executed
        -:  517:        }
    #####:  518:        if (varTok1->str() == varTok2->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  519:            followVariableExpressionError(tok1, varTok1, errors);
call    0 never executed
    #####:  520:            followVariableExpressionError(tok2, varTok2, errors);
call    0 never executed
    #####:  521:            return isSameExpression(cpp, macro, varTok1, varTok2, library, true, followVar, errors);
call    0 never executed
        -:  522:        }
        -:  523:    }
       32:  524:    if (tok1->varId() != tok2->varId() || tok1->str() != tok2->str() || tok1->originalName() != tok2->originalName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 91% (fallthrough)
branch  8 taken 9%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 38% (fallthrough)
branch 15 taken 63%
       24:  525:        if ((Token::Match(tok1,"<|>")   && Token::Match(tok2,"<|>")) ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
       12:  526:            (Token::Match(tok1,"<=|>=") && Token::Match(tok2,"<=|>="))) {
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  527:            return isSameExpression(cpp, macro, tok1->astOperand1(), tok2->astOperand2(), library, pure, followVar, errors) &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  528:                   isSameExpression(cpp, macro, tok1->astOperand2(), tok2->astOperand1(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  529:        }
       12:  530:        return false;
        -:  531:    }
       20:  532:    if (macro && (tok1->isExpandedMacro() || tok2->isExpandedMacro() || tok1->isTemplateArg() || tok2->isTemplateArg()))
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####:  533:        return false;
       20:  534:    if (tok1->isComplex() != tok2->isComplex())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  535:        return false;
       20:  536:    if (tok1->isLong() != tok2->isLong())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  537:        return false;
       20:  538:    if (tok1->isUnsigned() != tok2->isUnsigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  539:        return false;
       20:  540:    if (tok1->isSigned() != tok2->isSigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  541:        return false;
       20:  542:    if (pure && tok1->isName() && tok1->next()->str() == "(" && tok1->str() != "sizeof") {
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####:  543:        if (!tok1->function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  544:            if (Token::simpleMatch(tok1->previous(), ".")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  545:                const Token *lhs = tok1->previous();
call    0 never executed
    #####:  546:                while (Token::Match(lhs, "(|.|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  547:                    lhs = lhs->astOperand1();
call    0 never executed
    #####:  548:                const bool lhsIsConst = (lhs->variable() && lhs->variable()->isConst()) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  549:                                        (lhs->valueType() && lhs->valueType()->constness > 0) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  550:                                        (Token::Match(lhs, "%var% . %name% (") && library.isFunctionConst(lhs->tokAt(2)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  551:                if (!lhsIsConst)
branch  0 never executed
branch  1 never executed
    #####:  552:                    return false;
        -:  553:            } else {
    #####:  554:                const Token * ftok = tok1;
    #####:  555:                if (Token::simpleMatch(tok1->previous(), "::"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  556:                    ftok = tok1->previous();
call    0 never executed
    #####:  557:                if (!library.isFunctionConst(ftok) && !ftok->isAttributeConst() && !ftok->isAttributePure())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  558:                    return false;
        -:  559:            }
        -:  560:        } else {
    #####:  561:            if (tok1->function() && !tok1->function()->isConst() && !tok1->function()->isAttributeConst() && !tok1->function()->isAttributePure())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  562:                return false;
        -:  563:        }
        -:  564:    }
        -:  565:    // templates/casts
       40:  566:    if ((Token::Match(tok1, "%name% <") && tok1->next()->link()) ||
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 5% (fallthrough)
branch  8 taken 95%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
       21:  567:        (Token::Match(tok2, "%name% <") && tok2->next()->link())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  568:
        -:  569:        // non-const template function that is not a dynamic_cast => return false
    #####:  570:        if (pure && Token::simpleMatch(tok1->next()->link(), "> (") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  571:            !(tok1->function() && tok1->function()->isConst()) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  572:            tok1->str() != "dynamic_cast")
call    0 never executed
call    1 never executed
    #####:  573:            return false;
        -:  574:
        -:  575:        // some template/cast stuff.. check that the template arguments are same
    #####:  576:        const Token *t1 = tok1->next();
call    0 never executed
    #####:  577:        const Token *t2 = tok2->next();
call    0 never executed
    #####:  578:        const Token *end1 = t1->link();
call    0 never executed
    #####:  579:        const Token *end2 = t2->link();
call    0 never executed
    #####:  580:        while (t1 && t2 && t1 != end1 && t2 != end2) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  581:            if (t1->str() != t2->str())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  582:                return false;
    #####:  583:            t1 = t1->next();
call    0 never executed
    #####:  584:            t2 = t2->next();
call    0 never executed
        -:  585:        }
    #####:  586:        if (t1 != end1 || t2 != end2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  587:            return false;
        -:  588:    }
       20:  589:    if (tok1->tokType() == Token::eIncDecOp || tok1->isAssignmentOp())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  590:        return false;
        -:  591:    // bailout when we see ({..})
       20:  592:    if (tok1->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  593:        return false;
        -:  594:    // cast => assert that the casts are equal
       40:  595:    if (tok1->str() == "(" && tok1->previous() &&
call    0 returned 100%
call    1 returned 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
       20:  596:        !tok1->previous()->isName() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  597:        !(tok1->previous()->str() == ">" && tok1->previous()->link())) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  598:        const Token *t1 = tok1->next();
call    0 never executed
    #####:  599:        const Token *t2 = tok2->next();
call    0 never executed
    #####:  600:        while (t1 && t2 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  601:               t1->str() == t2->str() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  602:               t1->isLong() == t2->isLong() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  603:               t1->isUnsigned() == t2->isUnsigned() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  604:               t1->isSigned() == t2->isSigned() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  605:               (t1->isName() || t1->str() == "*")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  606:            t1 = t1->next();
call    0 never executed
    #####:  607:            t2 = t2->next();
call    0 never executed
        -:  608:        }
    #####:  609:        if (!t1 || !t2 || t1->str() != ")" || t2->str() != ")")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  610:            return false;
        -:  611:    }
        -:  612:    bool noncommutativeEquals =
       20:  613:        isSameExpression(cpp, macro, tok1->astOperand1(), tok2->astOperand1(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       40:  614:    noncommutativeEquals = noncommutativeEquals &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       20:  615:                           isSameExpression(cpp, macro, tok1->astOperand2(), tok2->astOperand2(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  616:
       20:  617:    if (noncommutativeEquals)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       20:  618:        return true;
        -:  619:
        -:  620:    // in c++, a+b might be different to b+a, depending on the type of a and b
    #####:  621:    if (cpp && tok1->str() == "+" && tok1->isBinaryOp()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  622:        const ValueType* vt1 = tok1->astOperand1()->valueType();
call    0 never executed
call    1 never executed
    #####:  623:        const ValueType* vt2 = tok1->astOperand2()->valueType();
call    0 never executed
call    1 never executed
    #####:  624:        if (!(vt1 && (vt1->type >= ValueType::VOID || vt1->pointer) && vt2 && (vt2->type >= ValueType::VOID || vt2->pointer)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  625:            return false;
        -:  626:    }
        -:  627:
    #####:  628:    const bool commutative = tok1->isBinaryOp() && Token::Match(tok1, "%or%|%oror%|+|*|&|&&|^|==|!=");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  629:    bool commutativeEquals = commutative &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  630:                             isSameExpression(cpp, macro, tok1->astOperand2(), tok2->astOperand1(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  631:    commutativeEquals = commutativeEquals &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  632:                        isSameExpression(cpp, macro, tok1->astOperand1(), tok2->astOperand2(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  633:
        -:  634:
    #####:  635:    return commutativeEquals;
        -:  636:}
        -:  637:
function _ZL15isZeroBoundCondPK5Token called 0 returned 0% blocks executed 0%
    #####:  638:static bool isZeroBoundCond(const Token * const cond)
        -:  639:{
    #####:  640:    if (cond == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  641:        return false;
        -:  642:    // Assume unsigned
        -:  643:    // TODO: Handle reverse conditions
    #####:  644:    const bool isZero = cond->astOperand2()->getValue(0);
call    0 never executed
call    1 never executed
    #####:  645:    if (cond->str() == "==" || cond->str() == ">=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  646:        return isZero;
    #####:  647:    if (cond->str() == "<=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  648:        return true;
    #####:  649:    if (cond->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  650:        return !isZero;
    #####:  651:    if (cond->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  652:        return false;
    #####:  653:    return false;
        -:  654:}
        -:  655:
function _Z14isOppositeCondbbPK5TokenS1_RK7LibrarybbPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 2 returned 100% blocks executed 16%
        2:  656:bool isOppositeCond(bool isNot, bool cpp, const Token * const cond1, const Token * const cond2, const Library& library, bool pure, bool followVar, ErrorPath* errors)
        -:  657:{
        2:  658:    if (!cond1 || !cond2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  659:        return false;
        -:  660:
        2:  661:    if (cond1->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  662:        if (cond2->str() == "!=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  663:            if (cond2->astOperand1() && cond2->astOperand1()->str() == "0")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  664:                return isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand2(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  665:            if (cond2->astOperand2() && cond2->astOperand2()->str() == "0")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  666:                return isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand1(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  667:        }
    #####:  668:        return isSameExpression(cpp, true, cond1->astOperand1(), cond2, library, pure, followVar, errors);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  669:    }
        -:  670:
        2:  671:    if (cond2->str() == "!")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  672:        return isOppositeCond(isNot, cpp, cond2, cond1, library, pure, followVar, errors);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  673:
        2:  674:    if (!isNot) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  675:        if (cond1->str() == "==" && cond2->str() == "==") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  676:            if (isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand1(), library, pure, followVar, errors))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  677:                return isDifferentKnownValues(cond1->astOperand2(), cond2->astOperand2());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  678:            if (isSameExpression(cpp, true, cond1->astOperand2(), cond2->astOperand2(), library, pure, followVar, errors))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  679:                return isDifferentKnownValues(cond1->astOperand1(), cond2->astOperand1());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  680:        }
        -:  681:        // TODO: Handle reverse conditions
    #####:  682:        if (Library::isContainerYield(cond1, Library::Container::Yield::EMPTY, "empty") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####:  683:            Library::isContainerYield(cond2->astOperand1(), Library::Container::Yield::SIZE, "size") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  684:            cond1->astOperand1()->astOperand1()->varId() == cond2->astOperand1()->astOperand1()->astOperand1()->varId()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  685:            return !isZeroBoundCond(cond2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  686:        }
        -:  687:
    #####:  688:        if (Library::isContainerYield(cond2, Library::Container::Yield::EMPTY, "empty") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####:  689:            Library::isContainerYield(cond1->astOperand1(), Library::Container::Yield::SIZE, "size") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  690:            cond2->astOperand1()->astOperand1()->varId() == cond1->astOperand1()->astOperand1()->astOperand1()->varId()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  691:            return !isZeroBoundCond(cond1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:        }
        -:  693:    }
        -:  694:
        -:  695:
        2:  696:    if (!cond1->isComparisonOp() || !cond2->isComparisonOp())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  697:        return false;
        -:  698:
        2:  699:    const std::string &comp1 = cond1->str();
call    0 returned 100%
        -:  700:
        -:  701:    // condition found .. get comparator
        4:  702:    std::string comp2;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4:  703:    if (isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand1(), library, pure, followVar, errors) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        2:  704:        isSameExpression(cpp, true, cond1->astOperand2(), cond2->astOperand2(), library, pure, followVar, errors)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
    #####:  705:        comp2 = cond2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        2:  706:    } else if (isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand2(), library, pure, followVar, errors) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  707:               isSameExpression(cpp, true, cond1->astOperand2(), cond2->astOperand1(), library, pure, followVar, errors)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  708:        comp2 = cond2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  709:        if (comp2[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  710:            comp2[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  711:        else if (comp2[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  712:            comp2[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  713:    }
        -:  714:
        2:  715:    if (!isNot && comp2.empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  716:        const Token *expr1 = nullptr, *value1 = nullptr, *expr2 = nullptr, *value2 = nullptr;
    #####:  717:        std::string op1 = cond1->str(), op2 = cond2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  718:        if (cond1->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  719:            expr1 = cond1->astOperand1();
call    0 never executed
    #####:  720:            value1 = cond1->astOperand2();
call    0 never executed
    #####:  721:        } else if (cond1->astOperand1()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  722:            expr1 = cond1->astOperand2();
call    0 never executed
    #####:  723:            value1 = cond1->astOperand1();
call    0 never executed
    #####:  724:            if (op1[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  725:                op1[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  726:            else if (op1[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  727:                op1[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:        }
    #####:  729:        if (cond2->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  730:            expr2 = cond2->astOperand1();
call    0 never executed
    #####:  731:            value2 = cond2->astOperand2();
call    0 never executed
    #####:  732:        } else if (cond2->astOperand1()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  733:            expr2 = cond2->astOperand2();
call    0 never executed
    #####:  734:            value2 = cond2->astOperand1();
call    0 never executed
    #####:  735:            if (op2[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  736:                op2[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:            else if (op2[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  738:                op2[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  739:        }
    #####:  740:        if (!expr1 || !value1 || !expr2 || !value2) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  741:            return false;
        -:  742:        }
    #####:  743:        if (!isSameExpression(cpp, true, expr1, expr2, library, pure, followVar, errors))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  744:            return false;
        -:  745:
    #####:  746:        const ValueFlow::Value &rhsValue1 = value1->values().front();
call    0 never executed
call    1 never executed
    #####:  747:        const ValueFlow::Value &rhsValue2 = value2->values().front();
call    0 never executed
call    1 never executed
        -:  748:
    #####:  749:        if (op1 == "<" || op1 == "<=")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  750:            return (op2 == "==" || op2 == ">" || op2 == ">=") && (rhsValue1.intvalue < rhsValue2.intvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  751:        else if (op1 == ">=" || op1 == ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  752:            return (op2 == "==" || op2 == "<" || op2 == "<=") && (rhsValue1.intvalue > rhsValue2.intvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  753:
    #####:  754:        return false;
        -:  755:    }
        -:  756:
        -:  757:    // is condition opposite?
        4:  758:    return ((comp1 == "==" && comp2 == "!=") ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  759:            (comp1 == "!=" && comp2 == "==") ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6:  760:            (comp1 == "<"  && comp2 == ">=") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  761:            (comp1 == "<=" && comp2 == ">") ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  762:            (comp1 == ">"  && comp2 == "<=") ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6:  763:            (comp1 == ">=" && comp2 == "<") ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        2:  764:            (!isNot && ((comp1 == "<" && comp2 == ">") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  765:                        (comp1 == ">" && comp2 == "<") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  766:                        (comp1 == "==" && (comp2 == "!=" || comp2 == ">" || comp2 == "<")) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  767:                        ((comp1 == "!=" || comp1 == ">" || comp1 == "<") && comp2 == "==")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        2:  768:                       )));
        -:  769:}
        -:  770:
function _Z20isOppositeExpressionbPK5TokenS1_RK7LibrarybbPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 0 returned 0% blocks executed 0%
    #####:  771:bool isOppositeExpression(bool cpp, const Token * const tok1, const Token * const tok2, const Library& library, bool pure, bool followVar, ErrorPath* errors)
        -:  772:{
    #####:  773:    if (!tok1 || !tok2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  774:        return false;
    #####:  775:    if (isOppositeCond(true, cpp, tok1, tok2, library, pure, followVar, errors))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  776:        return true;
    #####:  777:    if (tok1->isUnaryOp("-"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  778:        return isSameExpression(cpp, true, tok1->astOperand1(), tok2, library, pure, followVar, errors);
call    0 never executed
call    1 never executed
    #####:  779:    if (tok2->isUnaryOp("-"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  780:        return isSameExpression(cpp, true, tok2->astOperand1(), tok1, library, pure, followVar, errors);
call    0 never executed
call    1 never executed
    #####:  781:    return false;
        -:  782:}
        -:  783:
function _Z17isConstExpressionPK5TokenRK7Librarybb called 0 returned 0% blocks executed 0%
    #####:  784:bool isConstExpression(const Token *tok, const Library& library, bool pure, bool cpp)
        -:  785:{
    #####:  786:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  787:        return true;
    #####:  788:    if (tok->isName() && tok->next()->str() == "(") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  789:        if (!tok->function() && !Token::Match(tok->previous(), ".|::") && !library.isFunctionConst(tok->str(), pure))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  790:            return false;
    #####:  791:        else if (tok->function() && !tok->function()->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  792:            return false;
        -:  793:    }
    #####:  794:    if (tok->tokType() == Token::eIncDecOp)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:        return false;
    #####:  796:    if (tok->isAssignmentOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:        return false;
    #####:  798:    if (isLikelyStreamRead(cpp, tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  799:        return false;
        -:  800:    // bailout when we see ({..})
    #####:  801:    if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  802:        return false;
    #####:  803:    return isConstExpression(tok->astOperand1(), library, pure, cpp) && isConstExpression(tok->astOperand2(), library, pure, cpp);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  804:}
        -:  805:
function _Z20isWithoutSideEffectsbPK5Token called 0 returned 0% blocks executed 0%
    #####:  806:bool isWithoutSideEffects(bool cpp, const Token* tok)
        -:  807:{
    #####:  808:    if (!cpp)
branch  0 never executed
branch  1 never executed
    #####:  809:        return true;
        -:  810:
    #####:  811:    while (tok && tok->astOperand2() && tok->astOperand2()->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  812:        tok = tok->astOperand2();
call    0 never executed
    #####:  813:    if (tok && tok->varId()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  814:        const Variable* var = tok->variable();
call    0 never executed
    #####:  815:        return var && (!var->isClass() || var->isPointer() || var->isStlType());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:  816:    }
    #####:  817:    return true;
        -:  818:}
        -:  819:
function _Z18isUniqueExpressionPK5Token called 0 returned 0% blocks executed 0%
    #####:  820:bool isUniqueExpression(const Token* tok)
        -:  821:{
    #####:  822:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  823:        return true;
    #####:  824:    if (tok->function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:        const Function * fun = tok->function();
call    0 never executed
    #####:  826:        const Scope * scope = fun->nestedIn;
    #####:  827:        if (!scope)
branch  0 never executed
branch  1 never executed
    #####:  828:            return true;
    #####:  829:        const std::string returnType = fun->retType ? fun->retType->name() : fun->retDef->stringifyList(fun->tokenDef);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  830:        for (const Function& f:scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####:  831:            if (f.type != Function::eFunction)
branch  0 never executed
branch  1 never executed
    #####:  832:                continue;
        -:  833:
    #####:  834:            const std::string freturnType = f.retType ? f.retType->name() : f.retDef->stringifyList(f.tokenDef);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####:  835:            if (f.argumentList.size() == fun->argumentList.size() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  836:                returnType == freturnType &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  837:                f.name() != fun->name()) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  838:                return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:            }
        -:  840:        }
    #####:  841:    } else if (tok->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:        const Variable * var = tok->variable();
call    0 never executed
    #####:  843:        const Scope * scope = var->scope();
call    0 never executed
    #####:  844:        if (!scope)
branch  0 never executed
branch  1 never executed
    #####:  845:            return true;
    #####:  846:        const Type * varType = var->type();
call    0 never executed
        -:  847:        // Iterate over the variables in scope and the parameters of the function if possible
    #####:  848:        const Function * fun = scope->function;
    #####:  849:        const std::list<Variable>* setOfVars[] = {&scope->varlist, fun ? &fun->argumentList : nullptr};
branch  0 never executed
branch  1 never executed
        -:  850:
    #####:  851:        for (const std::list<Variable>* vars:setOfVars) {
branch  0 never executed
branch  1 never executed
    #####:  852:            if (!vars)
branch  0 never executed
branch  1 never executed
    #####:  853:                continue;
function _ZZ18isUniqueExpressionPK5TokenENKUlRK8VariableE_clES4_ called 0 returned 0% blocks executed 0%
    #####:  854:            bool other = std::any_of(vars->cbegin(), vars->cend(), [=](const Variable &v) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  855:                if (varType)
branch  0 never executed
branch  1 never executed
    #####:  856:                    return v.type() && v.type()->name() == varType->name() && v.name() != var->name();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####:  857:                return v.isFloatingType() == var->isFloatingType() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  858:                       v.isEnumType() == var->isEnumType() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  859:                       v.isClass() == var->isClass() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  860:                       v.isArray() == var->isArray() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  861:                       v.isPointer() == var->isPointer() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  862:                       v.name() != var->name();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  863:            });
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:            if (other)
branch  0 never executed
branch  1 never executed
    #####:  865:                return false;
        -:  866:        }
    #####:  867:    } else if (!isUniqueExpression(tok->astOperand1())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  868:        return false;
        -:  869:    }
        -:  870:
    #####:  871:    return isUniqueExpression(tok->astOperand2());
call    0 never executed
call    1 never executed
        -:  872:}
        -:  873:
function _ZL9isEscapedPK5Tokenb called 258 returned 100% blocks executed 100%
      258:  874:static bool isEscaped(const Token* tok, bool functionsScope)
        -:  875:{
      258:  876:    if (functionsScope)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      164:  877:        return Token::simpleMatch(tok, "throw");
call    0 returned 100%
        -:  878:    else
       94:  879:        return Token::Match(tok, "return|throw");
call    0 returned 100%
        -:  880:}
        -:  881:
function _ZL15isEscapedOrJumpPK5Tokenb called 657 returned 100% blocks executed 100%
      657:  882:static bool isEscapedOrJump(const Token* tok, bool functionsScope)
        -:  883:{
      657:  884:    if (functionsScope)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
      501:  885:        return Token::simpleMatch(tok, "throw");
call    0 returned 100%
        -:  886:    else
      156:  887:        return Token::Match(tok, "return|goto|throw|continue|break");
call    0 returned 100%
        -:  888:}
        -:  889:
function _Z13isReturnScopePK5TokenPK8Settingsb called 2316 returned 100% blocks executed 79%
     2316:  890:bool isReturnScope(const Token * const endToken, const Settings * settings, bool functionScope)
        -:  891:{
     2316:  892:    if (!endToken || endToken->str() != "}")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  893:        return false;
        -:  894:
     2316:  895:    const Token *prev = endToken->previous();
call    0 returned 100%
     2316:  896:    while (prev && Token::simpleMatch(prev->previous(), "; ;"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  897:        prev = prev->previous();
call    0 never executed
     2316:  898:    if (prev && Token::simpleMatch(prev->previous(), "} ;"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       13:  899:        prev = prev->previous();
call    0 returned 100%
        -:  900:
     2316:  901:    if (Token::simpleMatch(prev, "}")) {
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
     2040:  902:        if (Token::simpleMatch(prev->link()->tokAt(-2), "} else {"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
     2005:  903:            return isReturnScope(prev, settings, functionScope) && isReturnScope(prev->link()->tokAt(-2), settings, functionScope);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
       92:  904:        if (Token::simpleMatch(prev->link()->previous(), ") {") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       35:  905:            Token::simpleMatch(prev->link()->linkAt(-1)->previous(), "switch (") &&
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 never executed
branch  7 never executed
    #####:  906:            !Token::findsimplematch(prev->link(), "break", prev)) {
call    0 never executed
call    1 never executed
    #####:  907:            return true;
        -:  908:        }
       35:  909:        if (isEscaped(prev->link()->astTop(), functionScope))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  910:            return true;
       35:  911:        if (Token::Match(prev->link()->previous(), "[;{}] {"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  912:            return isReturnScope(prev, settings, functionScope);
call    0 never executed
      276:  913:    } else if (Token::simpleMatch(prev, ";")) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
      253:  914:        if (Token::simpleMatch(prev->previous(), ") ;") && Token::Match(prev->linkAt(-1)->tokAt(-2), "[;{}] %name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 43% (fallthrough)
branch  3 taken 57%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 64% (fallthrough)
branch  8 taken 36%
branch  9 taken 27% (fallthrough)
branch 10 taken 73%
       69:  915:            const Token * ftok = prev->linkAt(-1)->previous();
call    0 returned 100%
call    1 returned 100%
       69:  916:            const Function * function = ftok->function();
call    0 returned 100%
       69:  917:            if (function) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  918:                if (function->isEscapeFunction())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:                    return true;
    #####:  920:                if (function->isAttributeNoreturn())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  921:                    return true;
       69:  922:            } else if (settings) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       69:  923:                if (settings->library.isnoreturn(ftok))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  924:                    return true;
        -:  925:            }
       69:  926:            return false;
        -:  927:        }
      223:  928:        if (Token::simpleMatch(prev->previous(), ") ;") && prev->previous()->link() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
       39:  929:            isEscaped(prev->previous()->link()->astTop(), functionScope))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
    #####:  930:            return true;
      184:  931:        if (isEscaped(prev->previous()->astTop(), functionScope))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 21% (fallthrough)
branch  4 taken 79%
       39:  932:            return true;
        -:  933:        // return/goto statement
      145:  934:        prev = prev->previous();
call    0 returned 100%
     1459:  935:        while (prev && !Token::Match(prev, ";|{|}") && !isEscapedOrJump(prev, functionScope))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 82% (fallthrough)
branch  4 taken 18%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 82% (fallthrough)
branch  9 taken 18%
      657:  936:            prev = prev->previous();
call    0 returned 100%
      145:  937:        return prev && prev->isName();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  938:    }
       58:  939:    return false;
        -:  940:}
        -:  941:
function _Z31isVariableChangedByFunctionCallPK5TokeniiPK8SettingsPb called 0 returned 0% blocks executed 0%
    #####:  942:bool isVariableChangedByFunctionCall(const Token *tok, int indirect, nonneg int varid, const Settings *settings, bool *inconclusive)
        -:  943:{
    #####:  944:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  945:        return false;
    #####:  946:    if (tok->varId() == varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:        return isVariableChangedByFunctionCall(tok, indirect, settings, inconclusive);
call    0 never executed
    #####:  948:    return isVariableChangedByFunctionCall(tok->astOperand1(), indirect, varid, settings, inconclusive) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  949:           isVariableChangedByFunctionCall(tok->astOperand2(), indirect, varid, settings, inconclusive);
call    0 never executed
call    1 never executed
        -:  950:}
        -:  951:
function _Z14isScopeBracketPK5Token called 131 returned 100% blocks executed 61%
      131:  952:bool isScopeBracket(const Token* tok)
        -:  953:{
      131:  954:    if (!Token::Match(tok, "{|}"))
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      128:  955:        return false;
        3:  956:    if (!tok->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  957:        return false;
        3:  958:    if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        3:  959:        return tok->scope()->bodyStart == tok;
call    0 returned 100%
    #####:  960:    if (tok->str() == "}")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  961:        return tok->scope()->bodyEnd == tok;
call    0 never executed
    #####:  962:    return false;
        -:  963:}
        -:  964:
function _Z24getTokenArgumentFunctionPK5TokenRi called 93 returned 100% blocks executed 57%
       93:  965:const Token * getTokenArgumentFunction(const Token * tok, int& argn)
        -:  966:{
       93:  967:    argn = -1;
        -:  968:    {
       93:  969:        const Token *parent = tok->astParent();
call    0 returned 100%
       93:  970:        if (parent && parent->isUnaryOp("&"))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 99% (fallthrough)
branch 12 taken 1%
call   13 returned 100%
branch 14 taken 99% (fallthrough)
branch 15 taken 1%
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####:  971:            parent = parent->astParent();
call    0 never executed
       93:  972:        while (parent && parent->isCast())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  973:            parent = parent->astParent();
call    0 never executed
        -:  974:
        -:  975:        // passing variable to subfunction?
       93:  976:        if (Token::Match(parent, "[(,{]"))
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
        -:  977:            ;
       29:  978:        else if (Token::simpleMatch(parent, ":")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  979:            while (Token::Match(parent, "[?:]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  980:                parent = parent->astParent();
call    0 never executed
    #####:  981:            while (Token::simpleMatch(parent, ","))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:                parent = parent->astParent();
call    0 never executed
    #####:  983:            if (!parent || parent->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  984:                return nullptr;
        -:  985:        } else
       29:  986:            return nullptr;
        -:  987:    }
        -:  988:
        -:  989:    // goto start of function call and get argn
       64:  990:    argn = 0;
      192:  991:    while (tok && !Token::simpleMatch(tok, ";") && !isScopeBracket(tok)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
      128:  992:        if (tok->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  993:            ++argn;
      128:  994:        else if (Token::Match(tok, ")|}"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  995:            tok = tok->link();
call    0 never executed
      128:  996:        else if (Token::Match(tok->previous(), "%name% (|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
       64:  997:            break;
       64:  998:        else if (Token::Match(tok->previous(), "> (|{") && tok->previous()->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  999:            break;
       64: 1000:        tok = tok->previous();
call    0 returned 100%
        -: 1001:    }
       64: 1002:    if (!Token::Match(tok, "{|("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1003:        return nullptr;
       64: 1004:    tok = tok->previous();
call    0 returned 100%
       64: 1005:    if (tok && tok->link() && tok->str() == ">")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1006:        tok = tok->link()->previous();
call    0 never executed
call    1 never executed
       64: 1007:    if (!Token::Match(tok, "%name% [({<]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1008:        return nullptr;
       64: 1009:    return tok;
        -: 1010:}
        -: 1011:
function _Z31isVariableChangedByFunctionCallPK5TokeniPK8SettingsPb called 93 returned 100% blocks executed 31%
       93: 1012:bool isVariableChangedByFunctionCall(const Token *tok, int indirect, const Settings *settings, bool *inconclusive)
        -: 1013:{
       93: 1014:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1015:        return false;
        -: 1016:
       93: 1017:    const Token * const tok1 = tok;
        -: 1018:
        -: 1019:    // address of variable
       93: 1020:    const bool addressOf = tok->astParent() && tok->astParent()->isUnaryOp("&");
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 99% (fallthrough)
branch 14 taken 1%
call   15 returned 100%
branch 16 taken 99% (fallthrough)
branch 17 taken 1%
call   18 returned 100%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
        -: 1021:
        -: 1022:    int argnr;
       93: 1023:    tok = getTokenArgumentFunction(tok, argnr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       93: 1024:    if (!tok)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
       29: 1025:        return false; // not a function => variable not changed
       64: 1026:    const Token * parenTok = tok->next();
call    0 returned 100%
       64: 1027:    if (Token::simpleMatch(parenTok, "<") && parenTok->link())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1028:        parenTok = parenTok->link()->next();
call    0 never executed
call    1 never executed
       64: 1029:    const bool possiblyPassedByReference = (parenTok->next() == tok1 || Token::Match(tok1->previous(), ", %name% [,)}]"));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1030:
        -: 1031:    // Constructor call
       64: 1032:    if (tok->variable() && tok->variable()->nameToken() == tok) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -: 1033:        // Find constructor..
    #####: 1034:        const int argCount = numberOfArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1035:        const Scope *typeScope = tok->variable()->typeScope();
call    0 never executed
call    1 never executed
    #####: 1036:        if (typeScope) {
branch  0 never executed
branch  1 never executed
    #####: 1037:            for (const Function &function : typeScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1038:                if (!function.isConstructor() || function.argCount() < argCount)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1039:                    continue;
    #####: 1040:                const Variable *arg = function.getArgumentVar(argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1041:                if (arg && arg->isReference() && !arg->isConst())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1042:                    return true;
        -: 1043:            }
    #####: 1044:            return false;
        -: 1045:        }
    #####: 1046:        if (inconclusive)
branch  0 never executed
branch  1 never executed
    #####: 1047:            *inconclusive = true;
    #####: 1048:        return false;
        -: 1049:    }
        -: 1050:
       64: 1051:    if (!tok->function()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1052:        // Check if direction (in, out, inout) is specified in the library configuration and use that
       64: 1053:        if (!addressOf && settings) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       64: 1054:            const Library::ArgumentChecks::Direction argDirection = settings->library.getArgDirection(tok, 1 + argnr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       64: 1055:            if (argDirection == Library::ArgumentChecks::Direction::DIR_IN)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1056:                return false;
       64: 1057:            else if (argDirection == Library::ArgumentChecks::Direction::DIR_OUT ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1058:                     argDirection == Library::ArgumentChecks::Direction::DIR_INOUT) {
        -: 1059:                // With out or inout the direction of the content is specified, not a pointer itself, so ignore pointers for now
    #####: 1060:                const ValueType * const valueType = tok1->valueType();
call    0 never executed
    #####: 1061:                if (valueType && valueType->pointer == indirect) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1062:                    return true;
        -: 1063:                }
        -: 1064:            }
        -: 1065:        }
        -: 1066:
        -: 1067:        // if the library says 0 is invalid
        -: 1068:        // => it is assumed that parameter is an in parameter (TODO: this is a bad heuristic)
       64: 1069:        if (!addressOf && settings && settings->library.isnullargbad(tok, 1+argnr))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1070:            return false;
        -: 1071:        // possible pass-by-reference => inconclusive
       64: 1072:        if (possiblyPassedByReference) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       64: 1073:            if (inconclusive != nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       64: 1074:                *inconclusive = true;
       64: 1075:            return false;
        -: 1076:        }
        -: 1077:        // Safe guess: Assume that parameter is changed by function call
    #####: 1078:        return true;
        -: 1079:    }
        -: 1080:
    #####: 1081:    const Variable *arg = tok->function()->getArgumentVar(argnr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1082:
    #####: 1083:    if (addressOf || (indirect > 0 && arg && arg->isPointer())) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1084:        if (!(arg && arg->isConst()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1085:            return true;
        -: 1086:        // If const is applied to the pointer, then the value can still be modified
    #####: 1087:        if (arg && Token::simpleMatch(arg->typeEndToken(), "* const"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1088:            return true;
        -: 1089:    }
        -: 1090:
    #####: 1091:    return arg && !arg->isConst() && arg->isReference();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1092:}
        -: 1093:
function _Z17isVariableChangedPK5TokeniPK8Settingsbi called 208 returned 100% blocks executed 52%
      208: 1094:bool isVariableChanged(const Token *tok, int indirect, const Settings *settings, bool cpp, int depth)
        -: 1095:{
      208: 1096:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1097:        return false;
      208: 1098:    const Token *tok2 = tok;
      426: 1099:    while (Token::simpleMatch(tok2->astParent(), "*") || (Token::simpleMatch(tok2->astParent(), ".") && !Token::simpleMatch(tok2->astParent()->astParent(), "(")) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
branch 15 taken 1% (fallthrough)
branch 16 taken 99%
      211: 1100:           (Token::simpleMatch(tok2->astParent(), "[") && tok2 == tok2->astParent()->astOperand1()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        3: 1101:        tok2 = tok2->astParent();
call    0 returned 100%
        -: 1102:
    #####: 1103:    while (Token::simpleMatch(tok2->astParent(), "?") || (Token::simpleMatch(tok2->astParent(), ":") && Token::simpleMatch(tok2->astParent()->astParent(), "?")))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 1104:        tok2 = tok2->astParent();
call    0 never executed
        -: 1105:
      208: 1106:    if (Token::Match(tok2->astParent(), "++|--"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 1107:        return true;
        -: 1108:
      207: 1109:    if (tok2->astParent() && tok2->astParent()->isAssignmentOp()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 45% (fallthrough)
branch  6 taken 55%
branch  7 taken 43% (fallthrough)
branch  8 taken 57%
       89: 1110:        if (tok2 == tok2->astParent()->astOperand1())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
       82: 1111:            return true;
        -: 1112:        // Check if assigning to a non-const lvalue
        7: 1113:        const Variable * var = getLHSVariable(tok2->astParent());
call    0 returned 100%
call    1 returned 100%
        7: 1114:        if (var && var->isReference() && !var->isConst() && var->nameToken() && var->nameToken()->next() == tok2->astParent()) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
    #####: 1115:            if (!var->isLocal() || isVariableChanged(var, settings, cpp, depth - 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1116:                return true;
        -: 1117:        }
        -: 1118:    }
        -: 1119:
      125: 1120:    if (isLikelyStreamRead(cpp, tok->previous()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1121:        return true;
        -: 1122:
      125: 1123:    if (isLikelyStream(cpp, tok2))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1124:        return true;
        -: 1125:
        -: 1126:    // Member function call
      125: 1127:    if (tok->variable() && Token::Match(tok2->astParent(), ". %name%") && isFunctionCall(tok2->astParent()->next()) && tok2->astParent()->astOperand1() == tok2) {
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
    #####: 1128:        const Variable * var = tok->variable();
call    0 never executed
    #####: 1129:        bool isConst = var && var->isConst();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1130:        if (!isConst && var) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1131:            const ValueType * valueType = var->valueType();
call    0 never executed
    #####: 1132:            isConst = (valueType && valueType->pointer == 1 && valueType->constness == 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1133:        }
        -: 1134:
    #####: 1135:        const Token *ftok = tok->tokAt(2);
call    0 never executed
    #####: 1136:        const Function * fun = ftok->function();
call    0 never executed
    #####: 1137:        if (!isConst && (!fun || !fun->isConst()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1138:            return true;
        -: 1139:        else
    #####: 1140:            return false;
        -: 1141:    }
        -: 1142:
      125: 1143:    const Token *ftok = tok2;
      571: 1144:    while (ftok && (!Token::Match(ftok, "[({]") || ftok->isCast()))
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
branch  3 taken 26% (fallthrough)
branch  4 taken 74%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 64% (fallthrough)
branch  9 taken 36%
      223: 1145:        ftok = ftok->astParent();
call    0 returned 100%
        -: 1146:
      125: 1147:    if (ftok && Token::Match(ftok->link(), ")|} !!{")) {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 37% (fallthrough)
branch  5 taken 63%
branch  6 taken 23% (fallthrough)
branch  7 taken 77%
       29: 1148:        const Token * ptok = tok2;
       29: 1149:        while (Token::Match(ptok->astParent(), ".|::|["))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1150:            ptok = ptok->astParent();
call    0 never executed
       29: 1151:        bool inconclusive = false;
       29: 1152:        bool isChanged = isVariableChangedByFunctionCall(ptok, indirect, settings, &inconclusive);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       29: 1153:        isChanged |= inconclusive;
       29: 1154:        if (isChanged)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       28: 1155:            return true;
        -: 1156:    }
        -: 1157:
       97: 1158:    const Token *parent = tok2->astParent();
call    0 returned 100%
       97: 1159:    while (Token::Match(parent, ".|::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1160:        parent = parent->astParent();
call    0 never executed
       97: 1161:    if (parent && parent->tokType() == Token::eIncDecOp)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1162:        return true;
        -: 1163:
       97: 1164:    if (Token::simpleMatch(tok2->astParent(), ":") && tok2->astParent()->astParent() && Token::simpleMatch(tok2->astParent()->astParent()->previous(), "for (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 1165:        const Token * varTok = tok2->astParent()->previous();
call    0 never executed
call    1 never executed
    #####: 1166:        if (!varTok)
branch  0 never executed
branch  1 never executed
    #####: 1167:            return false;
    #####: 1168:        const Variable * loopVar = varTok->variable();
call    0 never executed
    #####: 1169:        if (!loopVar)
branch  0 never executed
branch  1 never executed
    #####: 1170:            return false;
    #####: 1171:        if (!loopVar->isConst() && loopVar->isReference() && isVariableChanged(loopVar, settings, cpp, depth - 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1172:            return true;
    #####: 1173:        return false;
        -: 1174:    }
       97: 1175:    return false;
        -: 1176:}
        -: 1177:
function _Z17isVariableChangedPK5TokenS1_ibPK8Settingsbi called 254 returned 100% blocks executed 100%
      254: 1178:bool isVariableChanged(const Token *start, const Token *end, const nonneg int varid, bool globalvar, const Settings *settings, bool cpp, int depth)
        -: 1179:{
      254: 1180:    return findVariableChanged(start, end, 0, varid, globalvar, settings, cpp, depth) != nullptr;
call    0 returned 100%
        -: 1181:}
        -: 1182:
function _Z19findVariableChangedP5TokenPKS_iibPK8Settingsbi called 309 returned 100% blocks executed 83%
      309: 1183:Token* findVariableChanged(Token *start, const Token *end, int indirect, const nonneg int varid, bool globalvar, const Settings *settings, bool cpp, int depth)
        -: 1184:{
      309: 1185:    if (!precedes(start, end))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1186:        return nullptr;
      309: 1187:    if (depth < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1188:        return start;
     1945: 1189:    for (Token *tok = start; tok != end; tok = tok->next()) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
call    2 returned 100%
     3304: 1190:        if (tok->varId() != varid) {
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
     1557: 1191:            if (globalvar && Token::Match(tok, "%name% ("))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -: 1192:                // TODO: Is global variable really changed by function call?
    #####: 1193:                return tok;
     1557: 1194:            continue;
        -: 1195:        }
      190: 1196:        if (isVariableChanged(tok, indirect, settings, cpp, depth))
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
      111: 1197:            return tok;
        -: 1198:    }
      198: 1199:    return nullptr;
        -: 1200:}
        -: 1201:
function _Z19findVariableChangedPK5TokenS1_iibPK8Settingsbi called 254 returned 100% blocks executed 100%
      254: 1202:const Token* findVariableChanged(const Token *start, const Token *end, int indirect, const nonneg int varid, bool globalvar, const Settings *settings, bool cpp, int depth)
        -: 1203:{
      254: 1204:    return findVariableChanged(const_cast<Token*>(start), end, indirect, varid, globalvar, settings, cpp, depth);
call    0 returned 100%
        -: 1205:}
        -: 1206:
function _Z17isVariableChangedPK8VariablePK8Settingsbi called 0 returned 0% blocks executed 0%
    #####: 1207:bool isVariableChanged(const Variable * var, const Settings *settings, bool cpp, int depth)
        -: 1208:{
    #####: 1209:    if (!var)
branch  0 never executed
branch  1 never executed
    #####: 1210:        return false;
    #####: 1211:    if (!var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1212:        return false;
    #####: 1213:    const Token * start = var->declEndToken();
call    0 never executed
    #####: 1214:    if (!start)
branch  0 never executed
branch  1 never executed
    #####: 1215:        return false;
    #####: 1216:    if (Token::Match(start, "; %varid% =", var->declarationId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1217:        start = start->tokAt(2);
call    0 never executed
    #####: 1218:    return isVariableChanged(start->next(), var->scope()->bodyEnd, var->declarationId(), var->isGlobal(), settings, cpp, depth);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 1219:}
        -: 1220:
function _Z17numberOfArgumentsPK5Token called 19317 returned 100% blocks executed 100%
    19317: 1221:int numberOfArguments(const Token *start)
        -: 1222:{
    19317: 1223:    int arguments=0;
    19317: 1224:    const Token* const openBracket = start->next();
call    0 returned 100%
    19317: 1225:    if (openBracket && openBracket->str()=="(" && openBracket->next() && openBracket->next()->str()!=")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 98% (fallthrough)
branch 13 taken 2%
branch 14 taken 98% (fallthrough)
branch 15 taken 2%
    18888: 1226:        const Token* argument=openBracket->next();
call    0 returned 100%
    57390: 1227:        while (argument) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    19251: 1228:            ++arguments;
    19251: 1229:            argument = argument->nextArgument();
call    0 returned 100%
        -: 1230:        }
        -: 1231:    }
    19317: 1232:    return arguments;
        -: 1233:}
        -: 1234:
function _Z12getArgumentsPK5Token called 1327 returned 100% blocks executed 94%
     1327: 1235:std::vector<const Token *> getArguments(const Token *ftok)
        -: 1236:{
     1327: 1237:    const Token* tok = ftok;
     1327: 1238:    if (Token::Match(tok, "%name% (|{"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     1326: 1239:        tok = ftok->next();
call    0 returned 100%
     1327: 1240:    if (!Token::Match(tok, "(|{|["))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1241:        return std::vector<const Token *> {};
call    0 never executed
     1327: 1242:    const Token *startTok = tok->astOperand2();
call    0 returned 100%
     1327: 1243:    if (!startTok && tok->next() != tok->link())
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        9: 1244:        startTok = tok->astOperand1();
call    0 returned 100%
     1327: 1245:    return astFlatten(startTok, ",");
call    0 returned 100%
        -: 1246:}
        -: 1247:
function _Z20findLambdaStartTokenPK5Token called 0 returned 0% blocks executed 0%
    #####: 1248:const Token *findLambdaStartToken(const Token *last)
        -: 1249:{
    #####: 1250:    if (!last || last->str() != "}")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1251:        return nullptr;
    #####: 1252:    const Token* tok = last->link();
call    0 never executed
    #####: 1253:    if (Token::simpleMatch(tok->astParent(), "("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1254:        tok = tok->astParent();
call    0 never executed
    #####: 1255:    if (Token::simpleMatch(tok->astParent(), "["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1256:        return tok->astParent();
call    0 never executed
    #####: 1257:    return nullptr;
        -: 1258:}
        -: 1259:
function _Z18findLambdaEndTokenPK5Token called 3686 returned 100% blocks executed 45%
     3686: 1260:const Token *findLambdaEndToken(const Token *first)
        -: 1261:{
     3686: 1262:    if (!first || first->str() != "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
     3627: 1263:        return nullptr;
       59: 1264:    if (!Token::Match(first->link(), "] (|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
       58: 1265:        return nullptr;
        1: 1266:    if (first->astOperand1() != first->link()->next())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 1267:        return nullptr;
    #####: 1268:    const Token * tok = first;
        -: 1269:
    #####: 1270:    if (tok->astOperand1() && tok->astOperand1()->str() == "(")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1271:        tok = tok->astOperand1();
call    0 never executed
    #####: 1272:    if (tok->astOperand1() && tok->astOperand1()->str() == "{")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1273:        return tok->astOperand1()->link();
call    0 never executed
call    1 never executed
    #####: 1274:    return nullptr;
        -: 1275:}
        -: 1276:
function _Z14isLikelyStreambPK5Token called 175 returned 100% blocks executed 48%
      175: 1277:bool isLikelyStream(bool cpp, const Token *stream)
        -: 1278:{
      175: 1279:    if (!cpp)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       91: 1280:        return false;
        -: 1281:
       84: 1282:    if (!stream)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1283:        return false;
        -: 1284:
       84: 1285:    if (!Token::Match(stream->astParent(), "&|<<|>>") || !stream->astParent()->isBinaryOp())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
       84: 1286:        return false;
        -: 1287:
    #####: 1288:    if (stream->astParent()->astOperand1() != stream)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1289:        return false;
        -: 1290:
    #####: 1291:    return !astIsIntegral(stream, false);
call    0 never executed
        -: 1292:}
        -: 1293:
function _Z18isLikelyStreamReadbPK5Token called 757 returned 100% blocks executed 11%
      757: 1294:bool isLikelyStreamRead(bool cpp, const Token *op)
        -: 1295:{
      757: 1296:    if (!cpp)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
      395: 1297:        return false;
        -: 1298:
      362: 1299:    if (!Token::Match(op, "&|>>") || !op->isBinaryOp())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      362: 1300:        return false;
        -: 1301:
    #####: 1302:    if (!Token::Match(op->astOperand2(), "%name%|.|*|[") && op->str() != op->astOperand2()->str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1303:        return false;
        -: 1304:
    #####: 1305:    const Token *parent = op;
    #####: 1306:    while (parent->astParent() && parent->astParent()->str() == op->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1307:        parent = parent->astParent();
call    0 never executed
    #####: 1308:    if (parent->astParent() && !Token::Match(parent->astParent(), "%oror%|&&|(|,|!"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1309:        return false;
    #####: 1310:    if (op->str() == "&" && parent->astParent())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1311:        return false;
    #####: 1312:    if (!parent->astOperand1() || !parent->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1313:        return false;
    #####: 1314:    return (!parent->astOperand1()->valueType() || !parent->astOperand1()->valueType()->isIntegral());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1315:}
        -: 1316:
function _Z9isCPPCastPK5Token called 0 returned 0% blocks executed 0%
    #####: 1317:bool isCPPCast(const Token* tok)
        -: 1318:{
    #####: 1319:    return tok && Token::simpleMatch(tok->previous(), "> (") && tok->astOperand2() && tok->astOperand1() && tok->astOperand1()->str().find("_cast") != std::string::npos;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
        -: 1320:}
        -: 1321:
function _Z20isConstVarExpressionPK5Token called 0 returned 0% blocks executed 0%
    #####: 1322:bool isConstVarExpression(const Token *tok)
        -: 1323:{
    #####: 1324:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1325:        return false;
    #####: 1326:    if (Token::simpleMatch(tok->previous(), "sizeof ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1327:        return true;
    #####: 1328:    if (Token::Match(tok->previous(), "%name% (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1329:        std::vector<const Token *> args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1330:        return std::all_of(args.begin(), args.end(), &isConstVarExpression);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 1331:    }
    #####: 1332:    if (isCPPCast(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1333:        return isConstVarExpression(tok->astOperand2());
call    0 never executed
call    1 never executed
        -: 1334:    }
    #####: 1335:    if (Token::Match(tok, "( %type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1336:        return isConstVarExpression(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####: 1337:    if (Token::Match(tok, "%cop%|[|.")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1338:        if (tok->astOperand1() && !isConstVarExpression(tok->astOperand1()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1339:            return false;
    #####: 1340:        if (tok->astOperand2() && !isConstVarExpression(tok->astOperand2()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1341:            return false;
    #####: 1342:        return true;
        -: 1343:    }
    #####: 1344:    if (Token::Match(tok, "%bool%|%num%|%str%|%char%|nullptr|NULL"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1345:        return true;
    #####: 1346:    if (tok->isEnumerator())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1347:        return true;
    #####: 1348:    if (tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1349:        return tok->variable()->isConst();
call    0 never executed
call    1 never executed
    #####: 1350:    return false;
        -: 1351:}
        -: 1352:
function _ZL23getLHSVariableRecursivePK5Token called 7 returned 100% blocks executed 35%
        7: 1353:static const Variable *getLHSVariableRecursive(const Token *tok)
        -: 1354:{
        7: 1355:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1356:        return nullptr;
        7: 1357:    if (Token::Match(tok, "*|&|&&|[")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1358:        const Variable *var = getLHSVariableRecursive(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####: 1359:        if (var || Token::simpleMatch(tok, "["))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1360:            return var;
    #####: 1361:        return getLHSVariableRecursive(tok->astOperand2());
call    0 never executed
call    1 never executed
        -: 1362:    }
        7: 1363:    if (Token::Match(tok->previous(), "this . %var%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1364:        return tok->next()->variable();
call    0 never executed
call    1 never executed
        7: 1365:    return tok->variable();
call    0 returned 100%
        -: 1366:}
        -: 1367:
function _Z14getLHSVariablePK5Token called 8 returned 100% blocks executed 90%
        8: 1368:const Variable *getLHSVariable(const Token *tok)
        -: 1369:{
        8: 1370:    if (!Token::Match(tok, "%assign%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1371:        return nullptr;
        8: 1372:    if (!tok->astOperand1())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1373:        return nullptr;
        8: 1374:    if (tok->astOperand1()->varId() > 0 && tok->astOperand1()->variable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 88%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 13% (fallthrough)
branch  9 taken 88%
        1: 1375:        return tok->astOperand1()->variable();
call    0 returned 100%
call    1 returned 100%
        7: 1376:    return getLHSVariableRecursive(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
        -: 1377:}
        -: 1378:
function _ZL8nonLocalPK8Variableb called 28 returned 100% blocks executed 100%
       28: 1379:static bool nonLocal(const Variable* var, bool deref)
        -: 1380:{
       28: 1381:    return !var || (!var->isLocal() && !var->isArgument()) || (deref && var->isArgument() && var->isPointer()) || var->isStatic() || var->isReference() || var->isExtern();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 18% (fallthrough)
branch  9 taken 82%
call   10 returned 100%
branch 11 taken 40% (fallthrough)
branch 12 taken 60%
call   13 returned 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 returned 100%
branch 17 taken 96% (fallthrough)
branch 18 taken 4%
call   19 returned 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
call   22 returned 100%
branch 23 taken 0% (fallthrough)
branch 24 taken 100%
        -: 1382:}
        -: 1383:
function _ZL23hasGccCompoundStatementPK5Token called 24 returned 100% blocks executed 73%
       24: 1384:static bool hasGccCompoundStatement(const Token *tok)
        -: 1385:{
       24: 1386:    if (!tok)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
       14: 1387:        return false;
       10: 1388:    if (tok->str() == "{" && Token::simpleMatch(tok->previous(), "( {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1389:        return true;
       10: 1390:    return hasGccCompoundStatement(tok->astOperand1()) || hasGccCompoundStatement(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 1391:}
        -: 1392:
function _ZL15hasFunctionCallPK5Token called 0 returned 0% blocks executed 0%
    #####: 1393:static bool hasFunctionCall(const Token *tok)
        -: 1394:{
    #####: 1395:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1396:        return false;
    #####: 1397:    if (Token::Match(tok, "%name% ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1398:        // todo, const/pure function?
    #####: 1399:        return true;
    #####: 1400:    return hasFunctionCall(tok->astOperand1()) || hasFunctionCall(tok->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1401:}
        -: 1402:
function _ZN12PathAnalysis14findOuterScopeEPK5Scope called 0 returned 0% blocks executed 0%
    #####: 1403:const Scope* PathAnalysis::findOuterScope(const Scope * scope)
        -: 1404:{
    #####: 1405:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 1406:        return nullptr;
    #####: 1407:    if (scope->isLocal() && scope->type != Scope::eSwitch)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1408:        return findOuterScope(scope->nestedIn);
call    0 never executed
    #####: 1409:    return scope;
        -: 1410:}
        -: 1411:
function _ZL10getCondTokPK5Token called 0 returned 0% blocks executed 0%
    #####: 1412:static const Token* getCondTok(const Token* tok)
        -: 1413:{
    #####: 1414:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1415:        return nullptr;
    #####: 1416:    if (Token::simpleMatch(tok, "("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1417:        return getCondTok(tok->previous());
call    0 never executed
call    1 never executed
    #####: 1418:    if (Token::simpleMatch(tok, "for") && Token::simpleMatch(tok->next()->astOperand2(), ";") && tok->next()->astOperand2()->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1419:        return tok->next()->astOperand2()->astOperand2()->astOperand1();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1420:    if (Token::simpleMatch(tok->next()->astOperand2(), ";"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1421:        return tok->next()->astOperand2()->astOperand1();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1422:    return tok->next()->astOperand2();
call    0 never executed
call    1 never executed
        -: 1423:}
        -: 1424:
function _ZN12PathAnalysis9checkCondEPK5TokenRb called 0 returned 0% blocks executed 0%
    #####: 1425:std::pair<bool, bool> PathAnalysis::checkCond(const Token * tok, bool& known)
        -: 1426:{
    #####: 1427:    if (tok->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1428:        known = true;
    #####: 1429:        return std::make_pair(tok->values().front().intvalue, !tok->values().front().intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1430:    }
function _ZZN12PathAnalysis9checkCondEPK5TokenRbENKUlRKN9ValueFlow5ValueEE_clES7_ called 0 returned 0% blocks executed 0%
    #####: 1431:    auto it = std::find_if(tok->values().begin(), tok->values().end(), [](const ValueFlow::Value& v) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1432:        return v.isIntValue();
    #####: 1433:    });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 1434:    // If all possible values are the same, then assume all paths have the same value
function _ZZN12PathAnalysis9checkCondEPK5TokenRbENKUlRKN9ValueFlow5ValueEE0_clES7_ called 0 returned 0% blocks executed 0%
    #####: 1435:    if (it != tok->values().end() && std::all_of(it, tok->values().end(), [&](const ValueFlow::Value& v) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
    #####: 1436:    if (v.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1437:            return v.intvalue == it->intvalue;
call    0 never executed
    #####: 1438:        return true;
        -: 1439:    })) {
    #####: 1440:        known = false;
    #####: 1441:        return std::make_pair(it->intvalue, !it->intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -: 1442:    }
    #####: 1443:    return std::make_pair(true, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1444:}
        -: 1445:
function _ZNK12PathAnalysis16forwardRecursiveEPK5TokenNS_4InfoERKSt8functionIFNS_8ProgressERKS3_EE called 0 returned 0% blocks executed 0%
    #####: 1446:PathAnalysis::Progress PathAnalysis::forwardRecursive(const Token* tok, Info info, const std::function<PathAnalysis::Progress(const Info&)>& f) const
        -: 1447:{
    #####: 1448:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1449:        return Progress::Continue;
    #####: 1450:    if (tok->astOperand1() && forwardRecursive(tok->astOperand1(), info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
    #####: 1451:        return Progress::Break;
    #####: 1452:    info.tok = tok;
    #####: 1453:    if (f(info) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1454:        return Progress::Break;
    #####: 1455:    if (tok->astOperand2() && forwardRecursive(tok->astOperand2(), info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 1456:        return Progress::Break;
    #####: 1457:    return Progress::Continue;
        -: 1458:}
        -: 1459:
function _ZNK12PathAnalysis12forwardRangeEPK5TokenS2_NS_4InfoERKSt8functionIFNS_8ProgressERKS3_EE called 0 returned 0% blocks executed 0%
    #####: 1460:PathAnalysis::Progress PathAnalysis::forwardRange(const Token* startToken, const Token* endToken, Info info, const std::function<PathAnalysis::Progress(const Info&)>& f) const
        -: 1461:{
    #####: 1462:    for (const Token *tok = startToken; tok && tok != endToken; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1463:        if (Token::Match(tok, "asm|goto|break|continue"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1464:            return Progress::Break;
    #####: 1465:        if (Token::Match(tok, "return|throw")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1466:            forwardRecursive(tok, info, f);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1467:            return Progress::Break;
        -: 1468:        }
    #####: 1469:        if (Token::simpleMatch(tok, "}") && Token::simpleMatch(tok->link()->previous(), ") {") && Token::Match(tok->link()->linkAt(-1)->previous(), "if|while|for (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1470:            const Token * blockStart = tok->link()->linkAt(-1)->previous();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1471:            const Token * condTok = getCondTok(blockStart);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1472:            if (!condTok)
branch  0 never executed
branch  1 never executed
    #####: 1473:                continue;
    #####: 1474:            info.errorPath.emplace_back(condTok, "Assuming condition is true.");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1475:            // Traverse a loop a second time
    #####: 1476:            if (Token::Match(blockStart, "for|while (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1477:                const Token* endCond = blockStart->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1478:                bool traverseLoop = true;
        -: 1479:                // Only traverse simple for loops
    #####: 1480:                if (Token::simpleMatch(blockStart, "for") && !Token::Match(endCond->tokAt(-3), "; ++|--|%var% %var%|++|-- ) {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1481:                    traverseLoop = false;
        -: 1482:                // Traverse loop a second time
    #####: 1483:                if (traverseLoop) {
branch  0 never executed
branch  1 never executed
        -: 1484:                    // Traverse condition
    #####: 1485:                    if (forwardRecursive(condTok, info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1486:                        return Progress::Break;
        -: 1487:                    // TODO: Should we traverse the body: forwardRange(tok->link(), tok, info, f)?
        -: 1488:                }
        -: 1489:            }
        -: 1490:        }
    #####: 1491:        if (Token::Match(tok, "if|while|for (") && Token::simpleMatch(tok->next()->link(), ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1492:            const Token * endCond = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 1493:            const Token * endBlock = endCond->next()->link();
call    0 never executed
call    1 never executed
    #####: 1494:            const Token * condTok = getCondTok(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1495:            if (!condTok)
branch  0 never executed
branch  1 never executed
    #####: 1496:                continue;
        -: 1497:            // Traverse condition
    #####: 1498:            if (forwardRange(tok->next(), tok->next()->link(), info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####: 1499:                return Progress::Break;
    #####: 1500:            Info i = info;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1501:            i.known = false;
    #####: 1502:            i.errorPath.emplace_back(condTok, "Assuming condition is true.");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1503:
        -: 1504:            // Check if condition is true or false
    #####: 1505:            bool checkThen = false;
    #####: 1506:            bool checkElse = false;
    #####: 1507:            std::tie(checkThen, checkElse) = checkCond(condTok, i.known);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1508:
        -: 1509:            // Traverse then block
    #####: 1510:            if (checkThen) {
branch  0 never executed
branch  1 never executed
    #####: 1511:                if (forwardRange(endCond->next(), endBlock, i, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1512:                    return Progress::Break;
        -: 1513:            }
        -: 1514:            // Traverse else block
    #####: 1515:            if (Token::simpleMatch(endBlock, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1516:                if (checkElse) {
branch  0 never executed
branch  1 never executed
    #####: 1517:                    i.errorPath.back().second = "Assuming condition is false.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1518:                    Progress result = forwardRange(endCond->next(), endBlock, i, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1519:                    if (result == Progress::Break)
branch  0 never executed
branch  1 never executed
    #####: 1520:                        return Progress::Break;
        -: 1521:                }
    #####: 1522:                tok = endBlock->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1523:            } else {
    #####: 1524:                tok = endBlock;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1525:            }
    #####: 1526:        } else if (Token::simpleMatch(tok, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1527:            tok = tok->linkAt(2);
call    0 never executed
        -: 1528:        } else {
    #####: 1529:            info.tok = tok;
    #####: 1530:            if (f(info) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1531:                return Progress::Break;
        -: 1532:        }
        -: 1533:        // Prevent infinite recursion
    #####: 1534:        if (tok->next() == start)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1535:            break;
        -: 1536:    }
    #####: 1537:    return Progress::Continue;
        -: 1538:}
        -: 1539:
function _ZNK12PathAnalysis7forwardERKSt8functionIFNS_8ProgressERKNS_4InfoEEE called 0 returned 0% blocks executed 0%
    #####: 1540:void PathAnalysis::forward(const std::function<Progress(const Info&)>& f) const
        -: 1541:{
    #####: 1542:    const Scope * endScope = findOuterScope(start->scope());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1543:    if (!endScope)
branch  0 never executed
branch  1 never executed
    #####: 1544:        return;
    #####: 1545:    const Token * endToken = endScope->bodyEnd;
    #####: 1546:    Info info{start, ErrorPath{}, true};
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1547:    forwardRange(start, endToken, info, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1548:}
        -: 1549:
function _Z7reachesPK5TokenS1_RK7LibraryPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 0 returned 0% blocks executed 0%
    #####: 1550:bool reaches(const Token * start, const Token * dest, const Library& library, ErrorPath* errorPath)
        -: 1551:{
function _ZZ7reachesPK5TokenS1_RK7LibraryPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEEENKUlRKN12PathAnalysis4InfoEE_clESL_ called 0 returned 0% blocks executed 0%
    #####: 1552:    PathAnalysis::Info info = PathAnalysis{start, library} .forwardFind([&](const PathAnalysis::Info& i) {
call    0 never executed
    #####: 1553:        return (i.tok == dest);
    #####: 1554:    });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1555:    if (!info.tok)
branch  0 never executed
branch  1 never executed
    #####: 1556:        return false;
    #####: 1557:    if (errorPath)
branch  0 never executed
branch  1 never executed
    #####: 1558:        errorPath->insert(errorPath->end(), info.errorPath.begin(), info.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1559:    return true;
        -: 1560:}
        -: 1561:
function _ZL11isUnchangedPK5TokenS1_RKNSt7__debug3setIiSt4lessIiESaIiEEEb called 12 returned 100% blocks executed 50%
       12: 1562:static bool isUnchanged(const Token *startToken, const Token *endToken, const std::set<int> &exprVarIds, bool local)
        -: 1563:{
       45: 1564:    for (const Token *tok = startToken; tok != endToken; tok = tok->next()) {
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
       39: 1565:        if (!local && Token::Match(tok, "%name% (") && !Token::simpleMatch(tok->linkAt(1), ") {"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -: 1566:            // TODO: this is a quick bailout
    #####: 1567:            return false;
       39: 1568:        if (tok->varId() <= 0 || exprVarIds.find(tok->varId()) == exprVarIds.end())
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 33% (fallthrough)
branch 10 taken 67%
branch 11 taken 23% (fallthrough)
branch 12 taken 77%
call   13 returned 100%
branch 14 taken 23% (fallthrough)
branch 15 taken 77%
call   16 returned 100%
branch 17 taken 85% (fallthrough)
branch 18 taken 15%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
       33: 1569:            continue;
        6: 1570:        const Token *parent = tok;
        6: 1571:        while (parent->astParent() && !parent->astParent()->isAssignmentOp() && parent->astParent()->tokType() != Token::Type::eIncDecOp) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1572:            if (parent->str() == "," || parent->isUnaryOp("&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
        -: 1573:                // TODO: This is a quick bailout
    #####: 1574:                return false;
    #####: 1575:            parent = parent->astParent();
call    0 never executed
        -: 1576:        }
        6: 1577:        if (parent->astParent()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 1578:            if (parent->astParent()->tokType() == Token::Type::eIncDecOp)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1579:                return false;
        6: 1580:            else if (parent->astParent()->isAssignmentOp() && parent == parent->astParent()->astOperand1())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        6: 1581:                return false;
        -: 1582:        }
        -: 1583:    }
        6: 1584:    return true;
        -: 1585:}
        -: 1586:
function _ZN11FwdAnalysis14checkRecursiveEPK5TokenS2_S2_RKNSt7__debug3setIiSt4lessIiESaIiEEEbb called 34 returned 100% blocks executed 48%
       34: 1587:struct FwdAnalysis::Result FwdAnalysis::checkRecursive(const Token *expr, const Token *startToken, const Token *endToken, const std::set<int> &exprVarIds, bool local, bool inInnerClass)
        -: 1588:{
        -: 1589:    // Parse the given tokens
      117: 1590:    for (const Token *tok = startToken; tok != endToken; tok = tok->next()) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
      107: 1591:        if (Token::simpleMatch(tok, "try {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1592:            // TODO: handle try
        1: 1593:            return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1594:        }
        -: 1595:
      106: 1596:        if (Token::simpleMatch(tok, "break ;")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1597:            return Result(Result::Type::BREAK, tok);
call    0 never executed
        -: 1598:        }
        -: 1599:
      106: 1600:        if (Token::simpleMatch(tok, "goto"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1601:            return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1602:
      106: 1603:        if (!inInnerClass && tok->str() == "{" && tok->scope()->isClassOrStruct()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -: 1604:            // skip returns from local class definition
    #####: 1605:            FwdAnalysis::Result result = checkRecursive(expr, tok, tok->link(), exprVarIds, local, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1606:            if (result.type != Result::Type::NONE)
branch  0 never executed
branch  1 never executed
    #####: 1607:                return result;
    #####: 1608:            tok=tok->link();
call    0 never executed
        -: 1609:        }
        -: 1610:
      106: 1611:        if (tok->str() == "continue")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1612:            // TODO
    #####: 1613:            return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1614:
      106: 1615:        if (const Token *lambdaEndToken = findLambdaEndToken(tok)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1616:            tok = lambdaEndToken;
    #####: 1617:            const Result lambdaResult = checkRecursive(expr, lambdaEndToken->link()->next(), lambdaEndToken, exprVarIds, local, inInnerClass);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1618:            if (lambdaResult.type == Result::Type::READ || lambdaResult.type == Result::Type::BAILOUT)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1619:                return lambdaResult;
        -: 1620:        }
        -: 1621:
      106: 1622:        if (Token::Match(tok, "return|throw")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -: 1623:            // TODO: Handle these better
        -: 1624:            // Is expr variable used in expression?
        2: 1625:            const Token *end = tok->findExpressionStartEndTokens().second->next();
call    0 returned 100%
call    1 returned 100%
        6: 1626:            for (const Token *tok2 = tok; tok2 != end; tok2 = tok2->next()) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
        4: 1627:                if (!local && Token::Match(tok2, "%name% ("))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1628:                    return Result(Result::Type::READ);
call    0 never executed
        4: 1629:                if (tok2->varId() && exprVarIds.find(tok2->varId()) != exprVarIds.end())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
    #####: 1630:                    return Result(Result::Type::READ);
call    0 never executed
        -: 1631:            }
        -: 1632:
        -: 1633:            // #9167: if the return is inside an inner class, it does not tell us anything
        2: 1634:            if (!inInnerClass) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1635:                if (!local && mWhat == What::Reassign)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 1636:                    return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1637:
        2: 1638:                return Result(Result::Type::RETURN);
call    0 returned 100%
        -: 1639:            }
        -: 1640:        }
        -: 1641:
      104: 1642:        if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
        -: 1643:            // Known value => possible value
        9: 1644:            if (tok->scope() == expr->scope())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
        8: 1645:                mValueFlowKnown = false;
        -: 1646:
        9: 1647:            Scope::ScopeType scopeType = tok->scope()->type;
call    0 returned 100%
        9: 1648:            if (scopeType == Scope::eWhile || scopeType == Scope::eFor || scopeType == Scope::eDo) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1649:                // check condition
    #####: 1650:                const Token *conditionStart = nullptr;
    #####: 1651:                const Token *conditionEnd = nullptr;
    #####: 1652:                if (Token::simpleMatch(tok->link()->previous(), ") {")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1653:                    conditionEnd = tok->link()->previous();
call    0 never executed
call    1 never executed
    #####: 1654:                    conditionStart = conditionEnd->link();
call    0 never executed
    #####: 1655:                } else if (Token::simpleMatch(tok->link()->previous(), "do {") && Token::simpleMatch(tok, "} while (")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1656:                    conditionStart = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1657:                    conditionEnd = conditionStart->link();
call    0 never executed
        -: 1658:                }
    #####: 1659:                if (conditionStart && conditionEnd) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1660:                    bool used = false;
    #####: 1661:                    for (const Token *condTok = conditionStart; condTok != conditionEnd; condTok = condTok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1662:                        if (exprVarIds.find(condTok->varId()) != exprVarIds.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####: 1663:                            used = true;
        -: 1664:                    }
    #####: 1665:                    if (used)
branch  0 never executed
branch  1 never executed
    #####: 1666:                        return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1667:                }
        -: 1668:
        -: 1669:                // check loop body again..
    #####: 1670:                const struct FwdAnalysis::Result &result = checkRecursive(expr, tok->link(), tok, exprVarIds, local, inInnerClass);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1671:                if (result.type == Result::Type::BAILOUT || result.type == Result::Type::READ)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1672:                    return result;
        -: 1673:            }
        -: 1674:        }
        -: 1675:
      104: 1676:        if (Token::simpleMatch(tok, "else {"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1677:            tok = tok->linkAt(1);
call    0 never executed
        -: 1678:
      104: 1679:        if (Token::simpleMatch(tok, "asm ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1680:            return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1681:
      104: 1682:        if (mWhat == What::ValueFlow && (Token::Match(tok, "while|for (") || Token::simpleMatch(tok, "do {"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 95% (fallthrough)
branch  4 taken 5%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 6% (fallthrough)
branch  9 taken 94%
        6: 1683:            const Token *bodyStart = nullptr;
        6: 1684:            const Token *conditionStart = nullptr;
        6: 1685:            if (Token::simpleMatch(tok, "do {")) {
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        1: 1686:                bodyStart = tok->next();
call    0 returned 100%
        1: 1687:                if (Token::simpleMatch(bodyStart->link(), "} while ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 1688:                    conditionStart = bodyStart->link()->tokAt(2);
call    0 returned 100%
call    1 returned 100%
        -: 1689:            } else {
        5: 1690:                conditionStart = tok->next();
call    0 returned 100%
        5: 1691:                if (Token::simpleMatch(conditionStart->link(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        5: 1692:                    bodyStart = conditionStart->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 1693:            }
        -: 1694:
        6: 1695:            if (!bodyStart || !conditionStart)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1696:                return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1697:
        -: 1698:            // Is expr changed in condition?
        6: 1699:            if (!isUnchanged(conditionStart, conditionStart->link(), exprVarIds, local))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1700:                return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1701:
        -: 1702:            // Is expr changed in loop body?
        6: 1703:            if (!isUnchanged(bodyStart, bodyStart->link(), exprVarIds, local))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        6: 1704:                return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1705:        }
        -: 1706:
       98: 1707:        if (!local && Token::Match(tok, "%name% (") && !Token::simpleMatch(tok->linkAt(1), ") {")) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -: 1708:            // TODO: this is a quick bailout
    #####: 1709:            return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1710:        }
        -: 1711:
       98: 1712:        if (expr->isName() && Token::Match(tok, "%name% (") && tok->str().find("<") != std::string::npos && tok->str().find(expr->str()) != std::string::npos)
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 1713:            return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1714:
       98: 1715:        if (exprVarIds.find(tok->varId()) != exprVarIds.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 14% (fallthrough)
branch  9 taken 86%
call   10 never executed
call   11 never executed
call   12 never executed
       14: 1716:            const Token *parent = tok;
       14: 1717:            bool other = false;
       14: 1718:            bool same = tok->astParent() && isSameExpression(mCpp, false, expr, tok, mLibrary, false, false, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       14: 1719:            while (!same && Token::Match(parent->astParent(), "*|.|::|[")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1720:                parent = parent->astParent();
call    0 never executed
    #####: 1721:                if (parent && isSameExpression(mCpp, false, expr, parent, mLibrary, false, false, nullptr)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1722:                    same = true;
    #####: 1723:                    if (mWhat == What::ValueFlow) {
branch  0 never executed
branch  1 never executed
        -: 1724:                        KnownAndToken v;
    #####: 1725:                        v.known = mValueFlowKnown;
    #####: 1726:                        v.token = parent;
    #####: 1727:                        mValueFlow.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1728:                    }
        -: 1729:                }
    #####: 1730:                if (Token::Match(parent, ". %var%") && parent->next()->varId() && exprVarIds.find(parent->next()->varId()) == exprVarIds.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
    #####: 1731:                    other = true;
    #####: 1732:                    break;
        -: 1733:                }
        -: 1734:            }
       14: 1735:            if (mWhat != What::ValueFlow && same && Token::simpleMatch(parent->astParent(), "[") && parent == parent->astParent()->astOperand2()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 1736:                return Result(Result::Type::READ);
call    0 never executed
        -: 1737:            }
       14: 1738:            if (other)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1739:                continue;
       14: 1740:            if (Token::simpleMatch(parent->astParent(), "=") && parent == parent->astParent()->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 29% (fallthrough)
branch  9 taken 71%
        4: 1741:                if (!local && hasFunctionCall(parent->astParent()->astOperand2())) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -: 1742:                    // TODO: this is a quick bailout
    #####: 1743:                    return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1744:                }
        4: 1745:                if (hasOperand(parent->astParent()->astOperand2(), expr)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1746:                    if (mWhat == What::Reassign)
branch  0 never executed
branch  1 never executed
    #####: 1747:                        return Result(Result::Type::READ);
call    0 never executed
    #####: 1748:                    continue;
        -: 1749:                }
        -: 1750:                // ({ .. })
        4: 1751:                if (hasGccCompoundStatement(parent->astParent()->astOperand2()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1752:                    return Result(Result::Type::BAILOUT);
call    0 never executed
        4: 1753:                const bool reassign = isSameExpression(mCpp, false, expr, parent, mLibrary, false, false, nullptr);
call    0 returned 100%
        4: 1754:                if (reassign)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 1755:                    return Result(Result::Type::WRITE, parent->astParent());
call    0 returned 100%
call    1 returned 100%
    #####: 1756:                return Result(Result::Type::READ);
call    0 never executed
       10: 1757:            } else if (mWhat == What::Reassign && parent->valueType() && parent->valueType()->pointer && Token::Match(parent->astParent(), "%assign%") && parent == parent->astParent()->astOperand1()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
    #####: 1758:                return Result(Result::Type::READ);
call    0 never executed
       10: 1759:            } else if (Token::Match(parent->astParent(), "%assign%") && !parent->astParent()->astParent() && parent == parent->astParent()->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 1760:                continue;
        -: 1761:            } else {
        -: 1762:                // TODO: this is a quick bailout
       10: 1763:                return Result(Result::Type::BAILOUT, parent->astParent());
call    0 returned 100%
call    1 returned 100%
        -: 1764:            }
        -: 1765:        }
        -: 1766:
       84: 1767:        if (Token::simpleMatch(tok, ") {")) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
        5: 1768:            if (Token::simpleMatch(tok->link()->previous(), "switch ("))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
        -: 1769:                // TODO: parse switch
        1: 1770:                return Result(Result::Type::BAILOUT);
call    0 returned 100%
        4: 1771:            const Result &result1 = checkRecursive(expr, tok->tokAt(2), tok->linkAt(1), exprVarIds, local, inInnerClass);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        4: 1772:            if (result1.type == Result::Type::READ || result1.type == Result::Type::BAILOUT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1773:                return result1;
        4: 1774:            if (mWhat == What::ValueFlow && result1.type == Result::Type::WRITE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 1775:                mValueFlowKnown = false;
        4: 1776:            if (Token::simpleMatch(tok->linkAt(1), "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        2: 1777:                const Token *elseStart = tok->linkAt(1)->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 1778:                const Result &result2 = checkRecursive(expr, elseStart, elseStart->link(), exprVarIds, local, inInnerClass);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 1779:                if (mWhat == What::ValueFlow && result2.type == Result::Type::WRITE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1780:                    mValueFlowKnown = false;
        2: 1781:                if (result2.type == Result::Type::READ || result2.type == Result::Type::BAILOUT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1782:                    return result2;
        2: 1783:                if (result1.type == Result::Type::WRITE && result2.type == Result::Type::WRITE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1784:                    return result1;
        2: 1785:                tok = elseStart->link();
call    0 returned 100%
        -: 1786:            } else {
        2: 1787:                tok = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1788:            }
        -: 1789:        }
        -: 1790:    }
        -: 1791:
       10: 1792:    return Result(Result::Type::NONE);
call    0 returned 100%
call    1 never executed
call    2 never executed
        -: 1793:}
        -: 1794:
function _ZNK11FwdAnalysis12isGlobalDataEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1795:bool FwdAnalysis::isGlobalData(const Token *expr) const
        -: 1796:{
    #####: 1797:    bool globalData = false;
    #####: 1798:    visitAstNodes(expr,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
function _ZZNK11FwdAnalysis12isGlobalDataEPK5TokenENKUlS2_E_clES2_ called 0 returned 0% blocks executed 0%
    #####: 1799:    [&](const Token *tok) {
    #####: 1800:        if (tok->varId() && !tok->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1801:            // Bailout, this is probably global
    #####: 1802:            globalData = true;
    #####: 1803:            return ChildrenToVisit::none;
        -: 1804:        }
    #####: 1805:        if (tok->originalName() == "->") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1806:            // TODO check if pointer points at local data
    #####: 1807:            globalData = true;
    #####: 1808:            return ChildrenToVisit::none;
    #####: 1809:        } else if (Token::Match(tok, "[*[]") && tok->astOperand1() && tok->astOperand1()->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -: 1810:            // TODO check if pointer points at local data
    #####: 1811:            const Variable *lhsvar = tok->astOperand1()->variable();
call    0 never executed
call    1 never executed
    #####: 1812:            const ValueType *lhstype = tok->astOperand1()->valueType();
call    0 never executed
call    1 never executed
    #####: 1813:            if (lhsvar->isPointer()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1814:                globalData = true;
    #####: 1815:                return ChildrenToVisit::none;
    #####: 1816:            } else if (lhsvar->isArgument() && lhsvar->isArray()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1817:                globalData = true;
    #####: 1818:                return ChildrenToVisit::none;
    #####: 1819:            } else if (lhsvar->isArgument() && (!lhstype || (lhstype->type <= ValueType::Type::VOID && !lhstype->container))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1820:                globalData = true;
    #####: 1821:                return ChildrenToVisit::none;
        -: 1822:            }
        -: 1823:        }
    #####: 1824:        if (tok->varId() == 0 && tok->isName() && tok->previous()->str() != ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1825:            globalData = true;
    #####: 1826:            return ChildrenToVisit::none;
        -: 1827:        }
    #####: 1828:        if (tok->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1829:            // TODO : Check references
    #####: 1830:            if (tok->variable()->isReference() && tok != tok->variable()->nameToken()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1831:                globalData = true;
    #####: 1832:                return ChildrenToVisit::none;
        -: 1833:            }
    #####: 1834:            if (tok->variable()->isExtern()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1835:                globalData = true;
    #####: 1836:                return ChildrenToVisit::none;
        -: 1837:            }
    #####: 1838:            if (tok->previous()->str() != "." && !tok->variable()->isLocal() && !tok->variable()->isArgument()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1839:                globalData = true;
    #####: 1840:                return ChildrenToVisit::none;
        -: 1841:            }
    #####: 1842:            if (tok->variable()->isArgument() && tok->variable()->isPointer() && tok != expr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1843:                globalData = true;
    #####: 1844:                return ChildrenToVisit::none;
        -: 1845:            }
    #####: 1846:            if (tok->variable()->isPointerArray()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1847:                globalData = true;
    #####: 1848:                return ChildrenToVisit::none;
        -: 1849:            }
        -: 1850:        }
        -: 1851:        // Unknown argument type => it might be some reference type..
    #####: 1852:        if (mCpp && tok->str() == "." && tok->astOperand1() && tok->astOperand1()->variable() && !tok->astOperand1()->valueType()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1853:            globalData = true;
    #####: 1854:            return ChildrenToVisit::none;
        -: 1855:        }
    #####: 1856:        if (Token::Match(tok, ".|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1857:            return ChildrenToVisit::op1;
    #####: 1858:        return ChildrenToVisit::op1_and_op2;
        -: 1859:    });
    #####: 1860:    return globalData;
        -: 1861:}
        -: 1862:
function _ZN11FwdAnalysis5checkEPK5TokenS2_S2_ called 31 returned 100% blocks executed 44%
       31: 1863:FwdAnalysis::Result FwdAnalysis::check(const Token *expr, const Token *startToken, const Token *endToken)
        -: 1864:{
        -: 1865:    // all variable ids in expr.
       62: 1866:    std::set<int> exprVarIds;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       31: 1867:    bool local = true;
       31: 1868:    bool unknownVarId = false;
       31: 1869:    visitAstNodes(expr,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
function _ZZN11FwdAnalysis5checkEPK5TokenS2_S2_ENKUlS2_E_clES2_ called 38 returned 100% blocks executed 68%
       38: 1870:    [&](const Token *tok) {
       38: 1871:        if (tok->varId() == 0 && tok->isName() && tok->previous()->str() != ".") {
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
call    3 returned 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 8% (fallthrough)
branch 12 taken 92%
        -: 1872:            // unknown variable
        3: 1873:            unknownVarId = true;
        3: 1874:            return ChildrenToVisit::none;
        -: 1875:        }
       35: 1876:        if (tok->varId() > 0) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
       29: 1877:            exprVarIds.insert(tok->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       29: 1878:            if (!Token::simpleMatch(tok->previous(), ".")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
       28: 1879:                const Variable *var = tok->variable();
call    0 returned 100%
       28: 1880:                if (var && var->isReference() && var->isLocal() && Token::Match(var->nameToken(), "%var% [=(]") && !isGlobalData(var->nameToken()->next()->astOperand2()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
    #####: 1881:                    return ChildrenToVisit::none;
       28: 1882:                const bool deref = tok->astParent() && (tok->astParent()->isUnaryOp("*") || (tok->astParent()->str() == "[" && tok == tok->astParent()->astOperand1()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 82% (fallthrough)
branch 12 taken 18%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
branch 22 taken 100% (fallthrough)
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0%
call   27 returned 100%
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
       28: 1883:                local &= !nonLocal(tok->variable(), deref);
call    0 returned 100%
call    1 returned 100%
        -: 1884:            }
        -: 1885:        }
       35: 1886:        return ChildrenToVisit::op1_and_op2;
        -: 1887:    });
        -: 1888:
       31: 1889:    if (unknownVarId)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        3: 1890:        return Result(FwdAnalysis::Result::Type::BAILOUT);
call    0 returned 100%
        -: 1891:
       28: 1892:    if (mWhat == What::Reassign && isGlobalData(expr))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1893:        local = false;
        -: 1894:
        -: 1895:    // In unused values checking we do not want to check assignments to
        -: 1896:    // global data.
       28: 1897:    if (mWhat == What::UnusedValue && isGlobalData(expr))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1898:        return Result(FwdAnalysis::Result::Type::BAILOUT);
call    0 never executed
        -: 1899:
       28: 1900:    Result result = checkRecursive(expr, startToken, endToken, exprVarIds, local, false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1901:
        -: 1902:    // Break => continue checking in outer scope
       28: 1903:    while (mWhat!=What::ValueFlow && result.type == FwdAnalysis::Result::Type::BREAK) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 1904:        const Scope *s = result.token->scope();
call    0 never executed
    #####: 1905:        while (s->type == Scope::eIf)
branch  0 never executed
branch  1 never executed
    #####: 1906:            s = s->nestedIn;
    #####: 1907:        if (s->type != Scope::eSwitch && s->type != Scope::eWhile && s->type != Scope::eFor)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1908:            break;
    #####: 1909:        result = checkRecursive(expr, s->bodyEnd->next(), endToken, exprVarIds, local, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1910:    }
        -: 1911:
       28: 1912:    return result;
        -: 1913:}
        -: 1914:
function _ZNK11FwdAnalysis10hasOperandEPK5TokenS2_ called 24 returned 100% blocks executed 87%
       24: 1915:bool FwdAnalysis::hasOperand(const Token *tok, const Token *lhs) const
        -: 1916:{
       24: 1917:    if (!tok)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
       14: 1918:        return false;
       10: 1919:    if (isSameExpression(mCpp, false, tok, lhs, mLibrary, false, false, nullptr))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1920:        return true;
       10: 1921:    return hasOperand(tok->astOperand1(), lhs) || hasOperand(tok->astOperand2(), lhs);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 1922:}
        -: 1923:
function _ZN11FwdAnalysis8reassignEPK5TokenS2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1924:const Token *FwdAnalysis::reassign(const Token *expr, const Token *startToken, const Token *endToken)
        -: 1925:{
    #####: 1926:    mWhat = What::Reassign;
    #####: 1927:    Result result = check(expr, startToken, endToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1928:    return result.type == FwdAnalysis::Result::Type::WRITE ? result.token : nullptr;
branch  0 never executed
branch  1 never executed
        -: 1929:}
        -: 1930:
function _ZN11FwdAnalysis11unusedValueEPK5TokenS2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1931:bool FwdAnalysis::unusedValue(const Token *expr, const Token *startToken, const Token *endToken)
        -: 1932:{
    #####: 1933:    if (isEscapedAlias(expr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1934:        return false;
    #####: 1935:    mWhat = What::UnusedValue;
    #####: 1936:    Result result = check(expr, startToken, endToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1937:    return (result.type == FwdAnalysis::Result::Type::NONE || result.type == FwdAnalysis::Result::Type::RETURN) && !possiblyAliased(expr, startToken);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1938:}
        -: 1939:
function _ZN11FwdAnalysis9valueFlowEPK5TokenS2_S2_ called 31 returned 100% blocks executed 100%
       31: 1940:std::vector<FwdAnalysis::KnownAndToken> FwdAnalysis::valueFlow(const Token *expr, const Token *startToken, const Token *endToken)
        -: 1941:{
       31: 1942:    mWhat = What::ValueFlow;
       31: 1943:    mValueFlowKnown = true;
       31: 1944:    check(expr, startToken, endToken);
call    0 returned 100%
       31: 1945:    return mValueFlow;
call    0 returned 100%
        -: 1946:}
        -: 1947:
function _ZNK11FwdAnalysis15possiblyAliasedEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####: 1948:bool FwdAnalysis::possiblyAliased(const Token *expr, const Token *startToken) const
        -: 1949:{
    #####: 1950:    if (expr->isUnaryOp("*"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1951:        return true;
        -: 1952:
    #####: 1953:    const bool macro = false;
    #####: 1954:    const bool pure = false;
    #####: 1955:    const bool followVar = false;
    #####: 1956:    for (const Token *tok = startToken; tok; tok = tok->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1957:        if (tok->str() == "{" && tok->scope()->type == Scope::eFunction)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1958:            break;
        -: 1959:
    #####: 1960:        if (Token::Match(tok, "%name% (") && !Token::Match(tok, "if|while|for")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1961:            // Is argument passed by reference?
    #####: 1962:            const std::vector<const Token*> args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1963:            for (int argnr = 0; argnr < args.size(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1964:                if (!Token::Match(args[argnr], "%name%|.|::"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1965:                    continue;
    #####: 1966:                if (tok->function() && tok->function()->getArgumentVar(argnr) && !tok->function()->getArgumentVar(argnr)->isReference() && !tok->function()->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####: 1967:                    continue;
    #####: 1968:                for (const Token *subexpr = expr; subexpr; subexpr = subexpr->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1969:                    if (isSameExpression(mCpp, macro, subexpr, args[argnr], mLibrary, pure, followVar))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1970:                        return true;
        -: 1971:                }
        -: 1972:            }
    #####: 1973:            continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1974:        }
        -: 1975:
    #####: 1976:        const Token *addrOf = nullptr;
    #####: 1977:        if (Token::Match(tok, "& %name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1978:            addrOf = tok->tokAt(2)->astOperand2();
call    0 never executed
call    1 never executed
    #####: 1979:        else if (tok->isUnaryOp("&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####: 1980:            addrOf = tok->astOperand1();
call    0 never executed
    #####: 1981:        else if (Token::simpleMatch(tok, "std :: ref ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1982:            addrOf = tok->tokAt(3)->astOperand2();
call    0 never executed
call    1 never executed
        -: 1983:        else
    #####: 1984:            continue;
        -: 1985:
    #####: 1986:        for (const Token *subexpr = expr; subexpr; subexpr = subexpr->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1987:            if (isSameExpression(mCpp, macro, subexpr, addrOf, mLibrary, pure, followVar))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1988:                return true;
        -: 1989:        }
        -: 1990:    }
    #####: 1991:    return false;
        -: 1992:}
        -: 1993:
function _ZN11FwdAnalysis14isEscapedAliasEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1994:bool FwdAnalysis::isEscapedAlias(const Token* expr)
        -: 1995:{
    #####: 1996:    for (const Token *subexpr = expr; subexpr; subexpr = subexpr->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1997:        for (const ValueFlow::Value &val : subexpr->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####: 1998:            if (!val.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1999:                continue;
    #####: 2000:            const Variable* var = val.tokvalue->variable();
call    0 never executed
    #####: 2001:            if (!var)
branch  0 never executed
branch  1 never executed
    #####: 2002:                continue;
    #####: 2003:            if (!var->isLocal())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2004:                return true;
    #####: 2005:            if (var->isArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2006:                return true;
        -: 2007:
        -: 2008:        }
        -: 2009:    }
    #####: 2010:    return false;
        -: 2011:}
        -: 2012:
function _ZN11FwdAnalysis13isNullOperandEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2013:bool FwdAnalysis::isNullOperand(const Token *expr)
        -: 2014:{
    #####: 2015:    if (!expr)
branch  0 never executed
branch  1 never executed
    #####: 2016:        return false;
    #####: 2017:    if (Token::Match(expr, "( %name% %name%| * )") && Token::Match(expr->astOperand1(), "0|NULL|nullptr"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2018:        return true;
    #####: 2019:    return Token::Match(expr, "NULL|nullptr");
call    0 never executed
function _GLOBAL__sub_I__Z13visitAstNodesPK5TokenSt8functionIF15ChildrenToVisitS1_EE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 2020:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
