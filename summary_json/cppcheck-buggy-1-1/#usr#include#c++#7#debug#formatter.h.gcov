        -:    0:Source:/usr/include/c++/7/debug/formatter.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Debug-mode error formatting implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2003-2017 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file debug/formatter.h
        -:   26: *  This file is a GNU debug extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_DEBUG_FORMATTER_H
        -:   30:#define _GLIBCXX_DEBUG_FORMATTER_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <bits/cpp_type_traits.h>
        -:   34:
        -:   35:#if __cpp_rtti
        -:   36:# include <typeinfo>
        -:   37:# define _GLIBCXX_TYPEID(_Type) &typeid(_Type)
        -:   38:#else
        -:   39:namespace std
        -:   40:{
        -:   41:  class type_info;
        -:   42:}
        -:   43:# define _GLIBCXX_TYPEID(_Type) 0
        -:   44:#endif
        -:   45:
        -:   46:namespace __gnu_debug
        -:   47:{
        -:   48:  using std::type_info;
        -:   49:
        -:   50:  template<typename _Iterator>
        -:   51:    bool __check_singular(const _Iterator&);
        -:   52:
        -:   53:  class _Safe_sequence_base;
        -:   54:
        -:   55:  template<typename _Iterator, typename _Sequence>
        -:   56:    class _Safe_iterator;
        -:   57:
        -:   58:  template<typename _Iterator, typename _Sequence>
        -:   59:    class _Safe_local_iterator;
        -:   60:
        -:   61:  template<typename _Sequence>
        -:   62:    class _Safe_sequence;
        -:   63:
        -:   64:  enum _Debug_msg_id
        -:   65:  {
        -:   66:    // General checks
        -:   67:    __msg_valid_range,
        -:   68:    __msg_insert_singular,
        -:   69:    __msg_insert_different,
        -:   70:    __msg_erase_bad,
        -:   71:    __msg_erase_different,
        -:   72:    __msg_subscript_oob,
        -:   73:    __msg_empty,
        -:   74:    __msg_unpartitioned,
        -:   75:    __msg_unpartitioned_pred,
        -:   76:    __msg_unsorted,
        -:   77:    __msg_unsorted_pred,
        -:   78:    __msg_not_heap,
        -:   79:    __msg_not_heap_pred,
        -:   80:    // std::bitset checks
        -:   81:    __msg_bad_bitset_write,
        -:   82:    __msg_bad_bitset_read,
        -:   83:    __msg_bad_bitset_flip,
        -:   84:    // std::list checks
        -:   85:    __msg_self_splice,
        -:   86:    __msg_splice_alloc,
        -:   87:    __msg_splice_bad,
        -:   88:    __msg_splice_other,
        -:   89:    __msg_splice_overlap,
        -:   90:    // iterator checks
        -:   91:    __msg_init_singular,
        -:   92:    __msg_init_copy_singular,
        -:   93:    __msg_init_const_singular,
        -:   94:    __msg_copy_singular,
        -:   95:    __msg_bad_deref,
        -:   96:    __msg_bad_inc,
        -:   97:    __msg_bad_dec,
        -:   98:    __msg_iter_subscript_oob,
        -:   99:    __msg_advance_oob,
        -:  100:    __msg_retreat_oob,
        -:  101:    __msg_iter_compare_bad,
        -:  102:    __msg_compare_different,
        -:  103:    __msg_iter_order_bad,
        -:  104:    __msg_order_different,
        -:  105:    __msg_distance_bad,
        -:  106:    __msg_distance_different,
        -:  107:    // istream_iterator
        -:  108:    __msg_deref_istream,
        -:  109:    __msg_inc_istream,
        -:  110:    // ostream_iterator
        -:  111:    __msg_output_ostream,
        -:  112:    // istreambuf_iterator
        -:  113:    __msg_deref_istreambuf,
        -:  114:    __msg_inc_istreambuf,
        -:  115:    // forward_list
        -:  116:    __msg_insert_after_end,
        -:  117:    __msg_erase_after_bad,
        -:  118:    __msg_valid_range2,
        -:  119:    // unordered container local iterators
        -:  120:    __msg_local_iter_compare_bad,
        -:  121:    __msg_non_empty_range,
        -:  122:    // self move assign
        -:  123:    __msg_self_move_assign,
        -:  124:    // unordered container buckets
        -:  125:    __msg_bucket_index_oob,
        -:  126:    __msg_valid_load_factor,
        -:  127:    // others
        -:  128:    __msg_equal_allocs,
        -:  129:    __msg_insert_range_from_self,
        -:  130:    __msg_irreflexive_ordering
        -:  131:  };
        -:  132:
        -:  133:  class _Error_formatter
        -:  134:  {
        -:  135:    // Tags denoting the type of parameter for construction
        -:  136:    struct _Is_iterator { };
        -:  137:    struct _Is_iterator_value_type { };
        -:  138:    struct _Is_sequence { };
        -:  139:    struct _Is_instance { };
        -:  140:
        -:  141:  public:
        -:  142:    /// Whether an iterator is constant, mutable, or unknown
        -:  143:    enum _Constness
        -:  144:    {
        -:  145:      __unknown_constness,
        -:  146:      __const_iterator,
        -:  147:      __mutable_iterator,
        -:  148:      __last_constness
        -:  149:    };
        -:  150:
        -:  151:    // The state of the iterator (fine-grained), if we know it.
        -:  152:    enum _Iterator_state
        -:  153:    {
        -:  154:      __unknown_state,
        -:  155:      __singular,	// singular, may still be attached to a sequence
        -:  156:      __begin,		// dereferenceable, and at the beginning
        -:  157:      __middle,		// dereferenceable, not at the beginning
        -:  158:      __end,		// past-the-end, may be at beginning if sequence empty
        -:  159:      __before_begin,	// before begin
        -:  160:      __last_state
        -:  161:    };
        -:  162:
        -:  163:    // A parameter that may be referenced by an error message
        -:  164:    struct _Parameter
        -:  165:    {
        -:  166:      enum
        -:  167:      {
        -:  168:	__unused_param,
        -:  169:	__iterator,
        -:  170:	__sequence,
        -:  171:	__integer,
        -:  172:	__string,
        -:  173:	__instance,
        -:  174:	__iterator_value_type
        -:  175:      } _M_kind;
        -:  176:
        -:  177:      struct _Type
        -:  178:      {
        -:  179:	const char*		_M_name;
        -:  180:	const type_info*	_M_type;
        -:  181:      };
        -:  182:
        -:  183:      struct _Instance : _Type
        -:  184:      {
        -:  185:	const void*		_M_address;
        -:  186:      };
        -:  187:
        -:  188:      union
        -:  189:      {
        -:  190:	// When _M_kind == __iterator
        -:  191:	struct : _Instance
        -:  192:	{
        -:  193:	  _Constness		_M_constness;
        -:  194:	  _Iterator_state	_M_state;
        -:  195:	  const void*		_M_sequence;
        -:  196:	  const type_info*	_M_seq_type;
        -:  197:	} _M_iterator;
        -:  198:
        -:  199:	// When _M_kind == __sequence
        -:  200:	_Instance _M_sequence;
        -:  201:
        -:  202:	// When _M_kind == __integer
        -:  203:	struct
        -:  204:	{
        -:  205:	  const char*		_M_name;
        -:  206:	  long			_M_value;
        -:  207:	} _M_integer;
        -:  208:
        -:  209:	// When _M_kind == __string
        -:  210:	struct
        -:  211:	{
        -:  212:	  const char*		_M_name;
        -:  213:	  const char*		_M_value;
        -:  214:	} _M_string;
        -:  215:
        -:  216:	// When _M_kind == __instance
        -:  217:	_Instance _M_instance;
        -:  218:
        -:  219:	// When _M_kind == __iterator_value_type
        -:  220:	_Type _M_iterator_value_type;
        -:  221:      } _M_variant;
        -:  222:
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2Ev called 0 returned 0% blocks executed 0%
    #####:  223:      _Parameter() : _M_kind(__unused_param), _M_variant() { }
        -:  224:
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ElPKc called 0 returned 0% blocks executed 0%
    #####:  225:      _Parameter(long __value, const char* __name)
    #####:  226:      : _M_kind(__integer), _M_variant()
        -:  227:      {
    #####:  228:	_M_variant._M_integer._M_name = __name;
    #####:  229:	_M_variant._M_integer._M_value = __value;
    #####:  230:      }
        -:  231:
        -:  232:      _Parameter(const char* __value, const char* __name)
        -:  233:      : _M_kind(__string), _M_variant()
        -:  234:      {
        -:  235:	_M_variant._M_string._M_name = __name;
        -:  236:	_M_variant._M_string._M_value = __value;
        -:  237:      }
        -:  238:
        -:  239:      template<typename _Iterator, typename _Sequence>
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorIPK5ScopeENSt7__debug3setIS6_St4lessIS6_ESaIS6_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPxNSt9__cxx19986vectorIxSaIxEEEEENSt7__debug6vectorIxS8_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPN11FwdAnalysis13KnownAndTokenENSt9__cxx19986vectorIS6_SaIS6_EEEEENSt7__debug6vectorIS6_SA_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPKPK8VariableNSt9__cxx19986vectorIS7_SaIS7_EEEEENSt7__debug6vectorIS7_SC_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorIjENSt7__debug3setIjSt4lessIjESaIjEEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPK13LifetimeTokenNSt9__cxx19986vectorIS5_SaIS5_EEEEENSt7__debug6vectorIS5_SA_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPPK5TokenNSt9__cxx19986vectorIS7_SaIS7_EEEEENSt7__debug6vectorIS7_SB_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx199820_List_const_iteratorI8VariableEENSt7__debug4listIS5_SaIS5_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorIiENSt7__debug3setIiSt4lessIiESaIiEEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt17_Rb_tree_iteratorISt4pairIKPK8VariableN9ValueFlow5ValueEEENSt7__debug3mapIS7_SA_St4lessIS7_ESaISB_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorISt4pairIKPK8VariableN9ValueFlow5ValueEEENSt7__debug3mapIS7_SA_St4lessIS7_ESaISB_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx199814_List_iteratorI5ScopeEENSt7__debug4listIS5_SaIS5_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPSt4pairIPK5TokenPK5ScopeENSt9__cxx19986vectorISC_SaISC_EEEEENSt7__debug6vectorISC_SG_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIPPK5ScopeNSt9__cxx19986vectorIS7_SaIS7_EEEEENSt7__debug6vectorIS7_SB_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx199814_List_iteratorISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt7__debug4listISF_SaISF_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx199820_List_const_iteratorISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt7__debug4listISF_SaISF_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt17_Rb_tree_iteratorISt4pairIKiPK5TokenEENSt7__debug3mapIiS8_St4lessIiESaIS9_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorISt4pairIKiPK5TokenEENSt7__debug3mapIiS8_St4lessIiESaIS9_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx199820_List_const_iteratorIN9ValueFlow5ValueEEENSt7__debug4listIS6_SaIS6_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt8__detail14_Node_iteratorISt4pairIKiN9ValueFlow5ValueEELb0ELb0EEENSt7__debug13unordered_mapIiS8_St4hashIiESt8equal_toIiESaIS9_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt17_Rb_tree_iteratorISt4pairIKiN9ValueFlow5ValueEEENSt7__debug3mapIiS7_St4lessIiESaIS8_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorISt4pairIKiN9ValueFlow5ValueEEENSt7__debug3mapIiS7_St4lessIiESaIS8_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx199814_List_iteratorIN9ValueFlow5ValueEEENSt7__debug4listIS6_SaIS6_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt7__debug3setIS9_St4lessIS9_ESaIS9_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7Library9Container8FunctionEEENSt7__debug3mapISA_SE_St4lessISA_ESaISF_EEEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIP13LifetimeTokenNSt9__cxx19986vectorIS5_SaIS5_EEEEENSt7__debug6vectorIS5_S9_EEEERKNS_14_Safe_iteratorIT_T0_EEPKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
    #####:  240:	_Parameter(_Safe_iterator<_Iterator, _Sequence> const& __it,
        -:  241:		   const char* __name, _Is_iterator)
    #####:  242:	: _M_kind(__iterator),  _M_variant()
        -:  243:	{
    #####:  244:	  _M_variant._M_iterator._M_name = __name;
    #####:  245:	  _M_variant._M_iterator._M_address = std::__addressof(__it);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####:  246:	  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);
    #####:  247:	  _M_variant._M_iterator._M_constness =
        -:  248:	    std::__are_same<_Safe_iterator<_Iterator, _Sequence>,
        -:  249:			    typename _Sequence::iterator>::
        -:  250:	      __value ? __mutable_iterator : __const_iterator;
    #####:  251:	  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####:  252:	  _M_variant._M_iterator._M_seq_type = _GLIBCXX_TYPEID(_Sequence);
        -:  253:
    #####:  254:	  if (__it._M_singular())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
    #####:  255:	    _M_variant._M_iterator._M_state = __singular;
        -:  256:	  else
        -:  257:	    {
    #####:  258:	      if (__it._M_is_before_begin())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
branch 61 never executed
branch 62 never executed
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
branch 67 never executed
branch 68 never executed
call   69 never executed
branch 70 never executed
branch 71 never executed
call   72 never executed
branch 73 never executed
branch 74 never executed
call   75 never executed
branch 76 never executed
branch 77 never executed
    #####:  259:		_M_variant._M_iterator._M_state = __before_begin;
    #####:  260:	      else if (__it._M_is_end())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
branch 61 never executed
branch 62 never executed
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
branch 67 never executed
branch 68 never executed
call   69 never executed
branch 70 never executed
branch 71 never executed
call   72 never executed
branch 73 never executed
branch 74 never executed
call   75 never executed
branch 76 never executed
branch 77 never executed
    #####:  261:		_M_variant._M_iterator._M_state = __end;
    #####:  262:	      else if (__it._M_is_begin())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
branch 61 never executed
branch 62 never executed
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
branch 67 never executed
branch 68 never executed
call   69 never executed
branch 70 never executed
branch 71 never executed
call   72 never executed
branch 73 never executed
branch 74 never executed
call   75 never executed
branch 76 never executed
branch 77 never executed
    #####:  263:		_M_variant._M_iterator._M_state = __begin;
        -:  264:	      else
    #####:  265:		_M_variant._M_iterator._M_state = __middle;
        -:  266:	    }
    #####:  267:	}
        -:  268:
        -:  269:      template<typename _Iterator, typename _Sequence>
        -:  270:	_Parameter(_Safe_local_iterator<_Iterator, _Sequence> const& __it,
        -:  271:		   const char* __name, _Is_iterator)
        -:  272:	: _M_kind(__iterator),  _M_variant()
        -:  273:	{
        -:  274:	  _M_variant._M_iterator._M_name = __name;
        -:  275:	  _M_variant._M_iterator._M_address = std::__addressof(__it);
        -:  276:	  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);
        -:  277:	  _M_variant._M_iterator._M_constness =
        -:  278:	    std::__are_same<_Safe_local_iterator<_Iterator, _Sequence>,
        -:  279:			    typename _Sequence::local_iterator>::
        -:  280:	      __value ? __mutable_iterator : __const_iterator;
        -:  281:	  _M_variant._M_iterator._M_sequence = __it._M_get_sequence();
        -:  282:	  _M_variant._M_iterator._M_seq_type = _GLIBCXX_TYPEID(_Sequence);
        -:  283:
        -:  284:	  if (__it._M_singular())
        -:  285:	    _M_variant._M_iterator._M_state = __singular;
        -:  286:	  else
        -:  287:	    {
        -:  288:	      if (__it._M_is_end())
        -:  289:		_M_variant._M_iterator._M_state = __end;
        -:  290:	      else if (__it._M_is_begin())
        -:  291:		_M_variant._M_iterator._M_state = __begin;
        -:  292:	      else
        -:  293:		_M_variant._M_iterator._M_state = __middle;
        -:  294:	    }
        -:  295:	}
        -:  296:
        -:  297:      template<typename _Type>
        -:  298:	_Parameter(const _Type* const& __it, const char* __name, _Is_iterator)
        -:  299:	: _M_kind(__iterator), _M_variant()
        -:  300:	{
        -:  301:	  _M_variant._M_iterator._M_name = __name;
        -:  302:	  _M_variant._M_iterator._M_address = std::__addressof(__it);
        -:  303:	  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);
        -:  304:	  _M_variant._M_iterator._M_constness = __const_iterator;
        -:  305:	  _M_variant._M_iterator._M_state = __it ? __unknown_state : __singular;
        -:  306:	  _M_variant._M_iterator._M_sequence = 0;
        -:  307:	  _M_variant._M_iterator._M_seq_type = 0;
        -:  308:	}
        -:  309:
        -:  310:      template<typename _Type>
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IPP5TokenEERKPT_PKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2I13LifetimeTokenEERKPT_PKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
    #####:  311:	_Parameter(_Type* const& __it, const char* __name, _Is_iterator)
    #####:  312:	: _M_kind(__iterator), _M_variant()
        -:  313:	{
    #####:  314:	  _M_variant._M_iterator._M_name = __name;
    #####:  315:	  _M_variant._M_iterator._M_address = std::__addressof(__it);
call    0 never executed
call    1 never executed
    #####:  316:	  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);
    #####:  317:	  _M_variant._M_iterator._M_constness = __mutable_iterator;
    #####:  318:	  _M_variant._M_iterator._M_state = __it ? __unknown_state : __singular;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  319:	  _M_variant._M_iterator._M_sequence = 0;
    #####:  320:	  _M_variant._M_iterator._M_seq_type = 0;
    #####:  321:	}
        -:  322:
        -:  323:      template<typename _Iterator>
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt13move_iteratorIPxEEERKT_PKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2ISt13move_iteratorIPPK5TokenEEERKT_PKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2IN9__gnu_cxx17__normal_iteratorIP13LifetimeTokenNSt9__cxx19986vectorIS5_SaIS5_EEEEEEERKT_PKcNS0_12_Is_iteratorE called 0 returned 0% blocks executed 0%
    #####:  324:	_Parameter(_Iterator const& __it, const char* __name, _Is_iterator)
    #####:  325:	: _M_kind(__iterator), _M_variant()
        -:  326:	{
    #####:  327:	  _M_variant._M_iterator._M_name = __name;
    #####:  328:	  _M_variant._M_iterator._M_address = std::__addressof(__it);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  329:	  _M_variant._M_iterator._M_type = _GLIBCXX_TYPEID(__it);
    #####:  330:	  _M_variant._M_iterator._M_constness = __unknown_constness;
    #####:  331:	  _M_variant._M_iterator._M_state =
    #####:  332:	    __gnu_debug::__check_singular(__it) ? __singular : __unknown_state;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  333:	  _M_variant._M_iterator._M_sequence = 0;
    #####:  334:	  _M_variant._M_iterator._M_seq_type = 0;
    #####:  335:	}
        -:  336:
        -:  337:      template<typename _Sequence>
        -:  338:	_Parameter(const _Safe_sequence<_Sequence>& __seq,
        -:  339:		   const char* __name, _Is_sequence)
        -:  340:	: _M_kind(__sequence), _M_variant()
        -:  341:	{
        -:  342:	  _M_variant._M_sequence._M_name = __name;
        -:  343:	  _M_variant._M_sequence._M_address =
        -:  344:	    static_cast<const _Sequence*>(std::__addressof(__seq));
        -:  345:	  _M_variant._M_sequence._M_type = _GLIBCXX_TYPEID(_Sequence);
        -:  346:	}
        -:  347:
        -:  348:      template<typename _Sequence>
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug3setIiSt4lessIiESaIiEEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx19987__cxx114listIN9ValueFlow5ValueESaIS7_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug5dequeIP5TokenSaIS6_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt9__cxx19983mapIiN9ValueFlow5ValueESt4lessIiESaISt4pairIKiS6_EEEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug6vectorIxSaIxEEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug6vectorINS3_4listIN9ValueFlow5ValueESaIS7_EEESaIS9_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug6vectorIPK5TokenSaIS7_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug6vectorI13LifetimeTokenSaIS5_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug4listISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISF_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INS_15_Safe_containerINSt7__debug4listISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISG_EEESH_NS_19_Safe_node_sequenceELb1EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug6vectorI9DimensionSaIS5_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter10_ParameterC2INSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEERKT_PKcNS0_12_Is_sequenceE called 0 returned 0% blocks executed 0%
    #####:  349:	_Parameter(const _Sequence& __seq, const char* __name, _Is_sequence)
    #####:  350:	: _M_kind(__sequence), _M_variant()
        -:  351:	{
    #####:  352:	  _M_variant._M_sequence._M_name = __name;
    #####:  353:	  _M_variant._M_sequence._M_address = std::__addressof(__seq);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  354:	  _M_variant._M_sequence._M_type = _GLIBCXX_TYPEID(_Sequence);
    #####:  355:	}
        -:  356:
        -:  357:      template<typename _Iterator>
        -:  358:	_Parameter(const _Iterator& __it, const char* __name,
        -:  359:		   _Is_iterator_value_type)
        -:  360:	: _M_kind(__iterator_value_type), _M_variant()
        -:  361:	{
        -:  362:	  _M_variant._M_iterator_value_type._M_name = __name;
        -:  363:	  _M_variant._M_iterator_value_type._M_type =
        -:  364:	    _GLIBCXX_TYPEID(typename std::iterator_traits<_Iterator>::value_type);
        -:  365:	}
        -:  366:
        -:  367:      template<typename _Type>
        -:  368:	_Parameter(const _Type& __inst, const char* __name, _Is_instance)
        -:  369:	: _M_kind(__instance), _M_variant()
        -:  370:	{
        -:  371:	  _M_variant._M_instance._M_name = __name;
        -:  372:	  _M_variant._M_instance._M_address = &__inst;
        -:  373:	  _M_variant._M_instance._M_type = _GLIBCXX_TYPEID(_Type);
        -:  374:	}
        -:  375:
        -:  376:      void
        -:  377:      _M_print_field(const _Error_formatter* __formatter,
        -:  378:		     const char* __name) const _GLIBCXX_DEPRECATED;
        -:  379:
        -:  380:      void
        -:  381:      _M_print_description(const _Error_formatter* __formatter)
        -:  382:	const _GLIBCXX_DEPRECATED;
        -:  383:    };
        -:  384:
        -:  385:    template<typename _Iterator>
        -:  386:      _Error_formatter&
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorISt13move_iteratorIPxEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorISt13move_iteratorIPPK5TokenEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorIPPP5TokenEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorIN9__gnu_cxx17__normal_iteratorIP13LifetimeTokenNSt9__cxx19986vectorIS4_SaIS4_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorIP13LifetimeTokenEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorIPK5ScopeENSt7__debug3setIS6_St4lessIS6_ESaIS6_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPxNSt9__cxx19986vectorIxSaIxEEEEENSt7__debug6vectorIxS8_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPN11FwdAnalysis13KnownAndTokenENSt9__cxx19986vectorIS6_SaIS6_EEEEENSt7__debug6vectorIS6_SA_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPKPK8VariableNSt9__cxx19986vectorIS7_SaIS7_EEEEENSt7__debug6vectorIS7_SC_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorIjENSt7__debug3setIjSt4lessIjESaIjEEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPK13LifetimeTokenNSt9__cxx19986vectorIS5_SaIS5_EEEEENSt7__debug6vectorIS5_SA_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPPK5TokenNSt9__cxx19986vectorIS7_SaIS7_EEEEENSt7__debug6vectorIS7_SB_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt9__cxx199820_List_const_iteratorI8VariableEENSt7__debug4listIS5_SaIS5_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorIiENSt7__debug3setIiSt4lessIiESaIiEEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt17_Rb_tree_iteratorISt4pairIKPK8VariableN9ValueFlow5ValueEEENSt7__debug3mapIS7_SA_St4lessIS7_ESaISB_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorISt4pairIKPK8VariableN9ValueFlow5ValueEEENSt7__debug3mapIS7_SA_St4lessIS7_ESaISB_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt9__cxx199814_List_iteratorI5ScopeEENSt7__debug4listIS5_SaIS5_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPSt4pairIPK5TokenPK5ScopeENSt9__cxx19986vectorISC_SaISC_EEEEENSt7__debug6vectorISC_SG_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIPPK5ScopeNSt9__cxx19986vectorIS7_SaIS7_EEEEENSt7__debug6vectorIS7_SB_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt9__cxx199814_List_iteratorISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt7__debug4listISF_SaISF_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt9__cxx199820_List_const_iteratorISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt7__debug4listISF_SaISF_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt17_Rb_tree_iteratorISt4pairIKiPK5TokenEENSt7__debug3mapIiS8_St4lessIiESaIS9_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorISt4pairIKiPK5TokenEENSt7__debug3mapIiS8_St4lessIiESaIS9_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt9__cxx199820_List_const_iteratorIN9ValueFlow5ValueEEENSt7__debug4listIS6_SaIS6_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt8__detail14_Node_iteratorISt4pairIKiN9ValueFlow5ValueEELb0ELb0EEENSt7__debug13unordered_mapIiS8_St4hashIiESt8equal_toIiESaIS9_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt17_Rb_tree_iteratorISt4pairIKiN9ValueFlow5ValueEEENSt7__debug3mapIiS7_St4lessIiESaIS8_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorISt4pairIKiN9ValueFlow5ValueEEENSt7__debug3mapIiS7_St4lessIiESaIS8_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorINSt9__cxx199814_List_iteratorIN9ValueFlow5ValueEEENSt7__debug4listIS6_SaIS6_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENSt7__debug3setIS9_St4lessIS9_ESaIS9_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorISt23_Rb_tree_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7Library9Container8FunctionEEENSt7__debug3mapISA_SE_St4lessISA_ESaISF_EEEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_iteratorINS_14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIP13LifetimeTokenNSt9__cxx19986vectorIS5_SaIS5_EEEEENSt7__debug6vectorIS5_S9_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
    #####:  387:      _M_iterator(const _Iterator& __it, const char* __name = 0)
        -:  388:      {
    #####:  389:	if (_M_num_parameters < std::size_t(__max_parameters))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
branch 46 never executed
branch 47 never executed
branch 48 never executed
branch 49 never executed
branch 50 never executed
branch 51 never executed
branch 52 never executed
branch 53 never executed
branch 54 never executed
branch 55 never executed
branch 56 never executed
branch 57 never executed
branch 58 never executed
branch 59 never executed
branch 60 never executed
branch 61 never executed
    #####:  390:	  _M_parameters[_M_num_parameters++] = _Parameter(__it, __name,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
branch 48 never executed
branch 49 never executed
call   50 never executed
branch 51 never executed
branch 52 never executed
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
branch 57 never executed
branch 58 never executed
call   59 never executed
branch 60 never executed
branch 61 never executed
call   62 never executed
branch 63 never executed
branch 64 never executed
call   65 never executed
branch 66 never executed
branch 67 never executed
call   68 never executed
branch 69 never executed
branch 70 never executed
call   71 never executed
branch 72 never executed
branch 73 never executed
call   74 never executed
branch 75 never executed
branch 76 never executed
call   77 never executed
branch 78 never executed
branch 79 never executed
call   80 never executed
branch 81 never executed
branch 82 never executed
call   83 never executed
branch 84 never executed
branch 85 never executed
call   86 never executed
branch 87 never executed
branch 88 never executed
        -:  391:							  _Is_iterator());
    #####:  392:	return *this;
        -:  393:      }
        -:  394:
        -:  395:    template<typename _Iterator>
        -:  396:      _Error_formatter&
        -:  397:      _M_iterator_value_type(const _Iterator& __it,
        -:  398:			     const char* __name = 0)
        -:  399:      {
        -:  400:	if (_M_num_parameters < __max_parameters)
        -:  401:	  _M_parameters[_M_num_parameters++] =
        -:  402:	    _Parameter(__it, __name, _Is_iterator_value_type());
        -:  403:	return *this;
        -:  404:      }
        -:  405:
        -:  406:    _Error_formatter&
function _ZN11__gnu_debug16_Error_formatter10_M_integerElPKc called 0 returned 0% blocks executed 0%
    #####:  407:    _M_integer(long __value, const char* __name = 0)
        -:  408:    {
    #####:  409:      if (_M_num_parameters < __max_parameters)
branch  0 never executed
branch  1 never executed
    #####:  410:	_M_parameters[_M_num_parameters++] = _Parameter(__value, __name);
call    0 never executed
    #####:  411:      return *this;
        -:  412:    }
        -:  413:
        -:  414:    _Error_formatter&
        -:  415:    _M_string(const char* __value, const char* __name = 0)
        -:  416:    {
        -:  417:      if (_M_num_parameters < __max_parameters)
        -:  418:	_M_parameters[_M_num_parameters++] = _Parameter(__value, __name);
        -:  419:      return *this;
        -:  420:    }
        -:  421:
        -:  422:    template<typename _Sequence>
        -:  423:      _Error_formatter&
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug3setIiSt4lessIiESaIiEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt9__cxx19987__cxx114listIN9ValueFlow5ValueESaIS6_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug5dequeIP5TokenSaIS5_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt9__cxx19983mapIiN9ValueFlow5ValueESt4lessIiESaISt4pairIKiS5_EEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug6vectorIxSaIxEEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug6vectorINS2_4listIN9ValueFlow5ValueESaIS6_EEESaIS8_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug6vectorIPK5TokenSaIS6_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug6vectorI13LifetimeTokenSaIS4_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug4listISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINS_15_Safe_containerINSt7__debug4listISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISF_EEESG_NS_19_Safe_node_sequenceELb1EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug6vectorI9DimensionSaIS4_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
function _ZN11__gnu_debug16_Error_formatter11_M_sequenceINSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEEERS0_RKT_PKc called 0 returned 0% blocks executed 0%
    #####:  424:      _M_sequence(const _Sequence& __seq, const char* __name = 0)
        -:  425:      {
    #####:  426:	if (_M_num_parameters < __max_parameters)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
    #####:  427:	  _M_parameters[_M_num_parameters++] = _Parameter(__seq, __name,
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  428:							  _Is_sequence());
    #####:  429:	return *this;
        -:  430:      }
        -:  431:
        -:  432:    template<typename _Type>
        -:  433:      _Error_formatter&
        -:  434:      _M_instance(const _Type& __inst, const char* __name = 0)
        -:  435:      {
        -:  436:	if (_M_num_parameters < __max_parameters)
        -:  437:	  _M_parameters[_M_num_parameters++] = _Parameter(__inst, __name,
        -:  438:							  _Is_instance());
        -:  439:	return *this;
        -:  440:      }
        -:  441:
        -:  442:    _Error_formatter&
        -:  443:    _M_message(const char* __text)
        -:  444:    { _M_text = __text; return *this; }
        -:  445:
        -:  446:    // Kept const qualifier for backward compatibility, to keep the same
        -:  447:    // exported symbol.
        -:  448:    _Error_formatter&
        -:  449:    _M_message(_Debug_msg_id __id) const throw ();
        -:  450:
        -:  451:    _GLIBCXX_NORETURN void
        -:  452:    _M_error() const;
        -:  453:
        -:  454:    template<typename _Tp>
        -:  455:      void
        -:  456:      _M_format_word(char*, int, const char*, _Tp)
        -:  457:      const throw () _GLIBCXX_DEPRECATED;
        -:  458:
        -:  459:    void
        -:  460:    _M_print_word(const char* __word) const _GLIBCXX_DEPRECATED;
        -:  461:
        -:  462:    void
        -:  463:    _M_print_string(const char* __string) const _GLIBCXX_DEPRECATED;
        -:  464:
        -:  465:  private:
function _ZN11__gnu_debug16_Error_formatterC2EPKcj called 0 returned 0% blocks executed 0%
    #####:  466:    _Error_formatter(const char* __file, unsigned int __line)
    #####:  467:    : _M_file(__file), _M_line(__line), _M_num_parameters(0), _M_text(0)
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  468:    { }
        -:  469:
        -:  470:    void
        -:  471:    _M_get_max_length() const throw () _GLIBCXX_DEPRECATED;
        -:  472:
        -:  473:    enum { __max_parameters = 9 };
        -:  474:
        -:  475:    const char*		_M_file;
        -:  476:    unsigned int	_M_line;
        -:  477:    _Parameter		_M_parameters[__max_parameters];
        -:  478:    unsigned int	_M_num_parameters;
        -:  479:    const char*		_M_text;
        -:  480:
        -:  481:  public:
        -:  482:    static _Error_formatter&
function _ZN11__gnu_debug16_Error_formatter5_M_atEPKcj called 0 returned 0% blocks executed 0%
    #####:  483:    _M_at(const char* __file, unsigned int __line)
        -:  484:    {
    #####:  485:      static _Error_formatter __formatter(__file, __line);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  486:      return __formatter;
        -:  487:    }
        -:  488:  };
        -:  489:} // namespace __gnu_debug
        -:  490:
        -:  491:#undef _GLIBCXX_TYPEID
        -:  492:
        -:  493:#endif
