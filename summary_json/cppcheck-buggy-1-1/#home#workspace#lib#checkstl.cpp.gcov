        -:    0:Source:/home/workspace/lib/checkstl.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkstl.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkstl.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "checkstl.h"
        -:   20:
        -:   21:#include "checknullpointer.h"
        -:   22:#include "errorlogger.h"
        -:   23:#include "settings.h"
        -:   24:#include "standards.h"
        -:   25:#include "symboldatabase.h"
        -:   26:#include "token.h"
        -:   27:#include "utils.h"
        -:   28:#include "astutils.h"
        -:   29:
        -:   30:#include <cstddef>
        -:   31:#include <list>
        -:   32:#include <map>
        -:   33:#include <set>
        -:   34:#include <sstream>
        -:   35:#include <utility>
        -:   36:
        -:   37:// Register this check class (by creating a static instance of it)
        -:   38:namespace {
        1:   39:    CheckStl instance;
call    0 returned 100%
call    1 returned 100%
        -:   40:}
        -:   41:
        -:   42:// CWE IDs used:
        1:   43:static const struct CWE CWE398(398U);   // Indicator of Poor Code Quality
call    0 returned 100%
        1:   44:static const struct CWE CWE597(597U);   // Use of Wrong Operator in String Comparison
call    0 returned 100%
        1:   45:static const struct CWE CWE628(628U);   // Function Call with Incorrectly Specified Arguments
call    0 returned 100%
        1:   46:static const struct CWE CWE664(664U);   // Improper Control of a Resource Through its Lifetime
call    0 returned 100%
        1:   47:static const struct CWE CWE704(704U);   // Incorrect Type Conversion or Cast
call    0 returned 100%
        1:   48:static const struct CWE CWE762(762U);   // Mismatched Memory Management Routines
call    0 returned 100%
        1:   49:static const struct CWE CWE786(786U);   // Access of Memory Location Before Start of Buffer
call    0 returned 100%
        1:   50:static const struct CWE CWE788(788U);   // Access of Memory Location After End of Buffer
call    0 returned 100%
        1:   51:static const struct CWE CWE825(825U);   // Expired Pointer Dereference
call    0 returned 100%
        1:   52:static const struct CWE CWE834(834U);   // Excessive Iteration
call    0 returned 100%
        -:   53:
function _ZN8CheckStl11outOfBoundsEv called 0 returned 0% blocks executed 0%
    #####:   54:void CheckStl::outOfBounds()
        -:   55:{
    #####:   56:    for (const Scope *function : mTokenizer->getSymbolDatabase()->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   57:        for (const Token *tok = function->bodyStart; tok != function->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   58:            const Library::Container *container = getLibraryContainer(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:            if (!container)
branch  0 never executed
branch  1 never executed
    #####:   60:                continue;
    #####:   61:            const Token * parent = astParentSkipParens(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:            for (const ValueFlow::Value &value : tok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   63:                if (!value.isContainerSizeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:                    continue;
    #####:   65:                if (value.isImpossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   66:                    continue;
    #####:   67:                if (value.isInconclusive() && !mSettings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   68:                    continue;
    #####:   69:                if (!value.errorSeverity() && !mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   70:                    continue;
    #####:   71:                if (value.intvalue == 0 && Token::Match(parent, ". %name% (") && container->getYield(parent->strAt(1)) == Library::Container::Yield::ITEM) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:   72:                    outOfBoundsError(parent->tokAt(2), tok->expressionString(), &value, parent->strAt(1), nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:   73:                    continue;
        -:   74:                }
    #####:   75:                if (Token::Match(tok, "%name% . %name% (") && container->getYield(tok->strAt(2)) == Library::Container::Yield::START_ITERATOR) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:   76:                    const Token *fparent = tok->tokAt(3)->astParent();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   77:                    const Token *other = nullptr;
    #####:   78:                    if (Token::simpleMatch(fparent, "+") && fparent->astOperand1() == tok->tokAt(3))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:   79:                        other = fparent->astOperand2();
call    0 never executed
    #####:   80:                    else if (Token::simpleMatch(fparent, "+") && fparent->astOperand2() == tok->tokAt(3))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:   81:                        other = fparent->astOperand1();
call    0 never executed
    #####:   82:                    if (other && other->hasKnownIntValue() && other->getKnownIntValue() > value.intvalue) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   83:                        outOfBoundsError(fparent, tok->expressionString(), &value, other->expressionString(), &other->values().back());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:   84:                        continue;
    #####:   85:                    } else if (other && !other->hasKnownIntValue() && value.isKnown() && value.intvalue==0) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:   86:                        outOfBoundsError(fparent, tok->expressionString(), &value, other->expressionString(), nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:   87:                        continue;
        -:   88:                    }
        -:   89:                }
    #####:   90:                if (!container->arrayLike_indexOp && !container->stdStringLike)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   91:                    continue;
    #####:   92:                if (value.intvalue == 0 && Token::Match(parent, "[") && tok == parent->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   93:                    outOfBoundsError(parent, tok->expressionString(), &value, "", nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:   94:                    continue;
        -:   95:                }
    #####:   96:                if (container->arrayLike_indexOp && Token::Match(parent, "[")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   97:                    const ValueFlow::Value *indexValue = parent->astOperand2() ? parent->astOperand2()->getMaxValue(false) : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   98:                    if (indexValue && indexValue->intvalue >= value.intvalue) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   99:                        outOfBoundsError(parent, tok->expressionString(), &value, parent->astOperand2()->expressionString(), indexValue);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  100:                        continue;
        -:  101:                    }
    #####:  102:                    if (mSettings->isEnabled(Settings::WARNING)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  103:                        indexValue = parent->astOperand2() ? parent->astOperand2()->getMaxValue(true) : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  104:                        if (indexValue && indexValue->intvalue >= value.intvalue) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  105:                            outOfBoundsError(parent, tok->expressionString(), &value, parent->astOperand2()->expressionString(), indexValue);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  106:                            continue;
        -:  107:                        }
        -:  108:                    }
        -:  109:                }
        -:  110:            }
        -:  111:        }
        -:  112:    }
    #####:  113:}
        -:  114:
function _ZN8CheckStl16outOfBoundsErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKN9ValueFlow5ValueESA_SE_ called 0 returned 0% blocks executed 0%
    #####:  115:void CheckStl::outOfBoundsError(const Token *tok, const std::string &containerName, const ValueFlow::Value *containerSize, const std::string &index, const ValueFlow::Value *indexValue)
        -:  116:{
        -:  117:    // Do not warn if both the container size and index value are possible
    #####:  118:    if (containerSize && indexValue && containerSize->isPossible() && indexValue->isPossible())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  119:        return;
        -:  120:
    #####:  121:    const std::string expression = tok ? tok->expressionString() : (containerName+"[x]");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
        -:  122:
    #####:  123:    std::string errmsg;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  124:    if (!containerSize)
branch  0 never executed
branch  1 never executed
    #####:  125:        errmsg = "Out of bounds access in expression '" + expression + "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  126:    else if (containerSize->intvalue == 0) {
branch  0 never executed
branch  1 never executed
    #####:  127:        if (containerSize->condition)
branch  0 never executed
branch  1 never executed
    #####:  128:            errmsg = ValueFlow::eitherTheConditionIsRedundant(containerSize->condition) + " or expression '" + expression + "' cause access out of bounds.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  129:        else if (indexValue == nullptr && !index.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  130:            errmsg = "Out of bounds access in expression '" + expression + "' because '$symbol' is empty and '" + index + "' may be non-zero.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  131:        else
    #####:  132:            errmsg = "Out of bounds access in expression '" + expression + "' because '$symbol' is empty.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  133:    } else if (indexValue) {
branch  0 never executed
branch  1 never executed
    #####:  134:        if (containerSize->condition)
branch  0 never executed
branch  1 never executed
    #####:  135:            errmsg = ValueFlow::eitherTheConditionIsRedundant(containerSize->condition) + " or $symbol size can be " + MathLib::toString(containerSize->intvalue) + ". Expression '" + expression + "' cause access out of bounds.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
    #####:  136:        else if (indexValue->condition)
branch  0 never executed
branch  1 never executed
    #####:  137:            errmsg = ValueFlow::eitherTheConditionIsRedundant(indexValue->condition) + " or '" + index + "' can have the value " + MathLib::toString(indexValue->intvalue) + ". Expression '" + expression + "' cause access out of bounds.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
        -:  138:        else
    #####:  139:            errmsg = "Out of bounds access in '" + expression + "', if '$symbol' size is " + MathLib::toString(containerSize->intvalue) + " and '" + index + "' is " + MathLib::toString(indexValue->intvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
        -:  140:    } else {
        -:  141:        // should not happen
    #####:  142:        return;
        -:  143:    }
        -:  144:
    #####:  145:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  146:    if (!indexValue)
branch  0 never executed
branch  1 never executed
    #####:  147:        errorPath = getErrorPath(tok, containerSize, "Access out of bounds");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  148:    else {
    #####:  149:        ErrorPath errorPath1 = getErrorPath(tok, containerSize, "Access out of bounds");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  150:        ErrorPath errorPath2 = getErrorPath(tok, indexValue, "Access out of bounds");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  151:        if (errorPath1.size() <= 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  152:            errorPath = errorPath2;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  153:        else if (errorPath2.size() <= 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  154:            errorPath = errorPath1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  155:        else {
    #####:  156:            errorPath = errorPath1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  157:            errorPath.splice(errorPath.end(), errorPath2);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  158:        }
        -:  159:    }
        -:  160:
    #####:  161:    reportError(errorPath,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  162:                (containerSize && !containerSize->errorSeverity()) || (indexValue && !indexValue->errorSeverity()) ? Severity::warning : Severity::error,
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  163:                "containerOutOfBounds",
    #####:  164:                "$symbol:" + containerName +"\n" + errmsg,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  165:                CWE398,
    #####:  166:                (containerSize && containerSize->isInconclusive()) || (indexValue && indexValue->isInconclusive()));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:  167:}
        -:  168:
function _ZNK8CheckStl15isContainerSizeEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  169:bool CheckStl::isContainerSize(const Token *containerToken, const Token *expr) const
        -:  170:{
    #####:  171:    if (!Token::simpleMatch(expr, "( )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  172:        return false;
    #####:  173:    if (!Token::Match(expr->astOperand1(), ". %name% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  174:        return false;
    #####:  175:    if (!isSameExpression(mTokenizer->isCPP(), false, containerToken, expr->astOperand1()->astOperand1(), mSettings->library, false, false))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  176:        return false;
    #####:  177:    return containerToken->valueType()->container->getYield(expr->previous()->str()) == Library::Container::Yield::SIZE;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  178:}
        -:  179:
function _ZNK8CheckStl17isContainerSizeGEEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  180:bool CheckStl::isContainerSizeGE(const Token * containerToken, const Token *expr) const
        -:  181:{
    #####:  182:    if (!expr)
branch  0 never executed
branch  1 never executed
    #####:  183:        return false;
    #####:  184:    if (isContainerSize(containerToken, expr))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:        return true;
    #####:  186:    if (expr->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  187:        const Token *mul;
    #####:  188:        if (isContainerSize(containerToken, expr->astOperand1()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  189:            mul = expr->astOperand2();
call    0 never executed
    #####:  190:        else if (isContainerSize(containerToken, expr->astOperand2()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  191:            mul = expr->astOperand1();
call    0 never executed
        -:  192:        else
    #####:  193:            return false;
    #####:  194:        return mul && (!mul->hasKnownIntValue() || mul->values().front().intvalue != 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  195:    }
    #####:  196:    if (expr->str() == "+") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  197:        const Token *op;
    #####:  198:        if (isContainerSize(containerToken, expr->astOperand1()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  199:            op = expr->astOperand2();
call    0 never executed
    #####:  200:        else if (isContainerSize(containerToken, expr->astOperand2()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  201:            op = expr->astOperand1();
call    0 never executed
        -:  202:        else
    #####:  203:            return false;
    #####:  204:        return op && op->getValueGE(0, mSettings);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  205:    }
    #####:  206:    return false;
        -:  207:}
        -:  208:
function _ZN8CheckStl26outOfBoundsIndexExpressionEv called 0 returned 0% blocks executed 0%
    #####:  209:void CheckStl::outOfBoundsIndexExpression()
        -:  210:{
    #####:  211:    for (const Scope *function : mTokenizer->getSymbolDatabase()->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  212:        for (const Token *tok = function->bodyStart; tok != function->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  213:            if (!tok->isName() || !tok->valueType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  214:                continue;
    #####:  215:            const Library::Container *container = tok->valueType()->container;
call    0 never executed
    #####:  216:            if (!container)
branch  0 never executed
branch  1 never executed
    #####:  217:                continue;
    #####:  218:            if (!container->arrayLike_indexOp && !container->stdStringLike)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  219:                continue;
    #####:  220:            if (!Token::Match(tok, "%name% ["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  221:                continue;
    #####:  222:            if (isContainerSizeGE(tok, tok->next()->astOperand2()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  223:                outOfBoundsIndexExpressionError(tok, tok->next()->astOperand2());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  224:        }
        -:  225:    }
    #####:  226:}
        -:  227:
function _ZN8CheckStl31outOfBoundsIndexExpressionErrorEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  228:void CheckStl::outOfBoundsIndexExpressionError(const Token *tok, const Token *index)
        -:  229:{
    #####:  230:    const std::string varname = tok ? tok->str() : std::string("var");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  231:    const std::string i = index ? index->expressionString() : std::string(varname + ".size()");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
        -:  232:
    #####:  233:    std::string errmsg = "Out of bounds access of $symbol, index '" + i + "' is out of bounds.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  234:
    #####:  235:    reportError(tok,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  236:                Severity::error,
        -:  237:                "containerOutOfBoundsIndexExpression",
    #####:  238:                "$symbol:" + varname +"\n" + errmsg,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  239:                CWE398,
        -:  240:                false);
    #####:  241:}
        -:  242:
        -:  243:
        -:  244:
        -:  245:// Error message for bad iterator usage..
function _ZN8CheckStl20invalidIteratorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  246:void CheckStl::invalidIteratorError(const Token *tok, const std::string &iteratorName)
        -:  247:{
    #####:  248:    reportError(tok, Severity::error, "invalidIterator1", "$symbol:"+iteratorName+"\nInvalid iterator: $symbol", CWE664, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  249:}
        -:  250:
function _ZN8CheckStl14iteratorsErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####:  251:void CheckStl::iteratorsError(const Token* tok, const std::string& containerName1, const std::string& containerName2)
        -:  252:{
    #####:  253:    reportError(tok, Severity::error, "iterators1",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  254:                "$symbol:" + containerName1 + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  255:                "$symbol:" + containerName2 + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  256:                "Same iterator is used with different containers '" + containerName1 + "' and '" + containerName2 + "'.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  257:}
        -:  258:
function _ZN8CheckStl14iteratorsErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####:  259:void CheckStl::iteratorsError(const Token* tok, const Token* containerTok, const std::string& containerName1, const std::string& containerName2)
        -:  260:{
    #####:  261:    std::list<const Token*> callstack = { tok, containerTok };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  262:    reportError(callstack, Severity::error, "iterators2",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  263:                "$symbol:" + containerName1 + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  264:                "$symbol:" + containerName2 + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  265:                "Same iterator is used with different containers '" + containerName1 + "' and '" + containerName2 + "'.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  266:}
call    0 never executed
        -:  267:
function _ZN8CheckStl14iteratorsErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  268:void CheckStl::iteratorsError(const Token* tok, const Token* containerTok, const std::string& containerName)
        -:  269:{
    #####:  270:    std::list<const Token*> callstack = { tok, containerTok };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  271:    reportError(callstack, Severity::error, "iterators3",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  272:                "$symbol:" + containerName + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  273:                "Same iterator is used with containers '" + containerName + "' that are defined in different scopes.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  274:}
call    0 never executed
        -:  275:
function _ZN8CheckStl17iteratorsCmpErrorEPK5TokenS2_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####:  276:void CheckStl::iteratorsCmpError(const Token* cmpOperatorTok, const Token* containerTok1, const Token* containerTok2, const std::string& containerName1, const std::string& containerName2)
        -:  277:{
    #####:  278:    std::list<const Token*> callstack = { cmpOperatorTok, containerTok1, containerTok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  279:    reportError(callstack, Severity::error, "iteratorsCmp1",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:                "$symbol:" + containerName1 + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  281:                "$symbol:" + containerName2 + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  282:                "Comparison of iterators from containers '" + containerName1 + "' and '" + containerName2 + "'.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  283:}
call    0 never executed
        -:  284:
function _ZN8CheckStl17iteratorsCmpErrorEPK5TokenS2_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  285:void CheckStl::iteratorsCmpError(const Token* cmpOperatorTok, const Token* containerTok1, const Token* containerTok2, const std::string& containerName)
        -:  286:{
    #####:  287:    std::list<const Token*> callstack = { cmpOperatorTok, containerTok1, containerTok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  288:    reportError(callstack, Severity::error, "iteratorsCmp2",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  289:                "$symbol:" + containerName + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  290:                "Comparison of iterators from containers '" + containerName + "' that are defined in different scopes.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  291:}
call    0 never executed
        -:  292:
        -:  293:// Error message used when dereferencing an iterator that has been erased..
function _ZN8CheckStl22dereferenceErasedErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  294:void CheckStl::dereferenceErasedError(const Token *erased, const Token* deref, const std::string &itername, bool inconclusive)
        -:  295:{
    #####:  296:    if (erased) {
branch  0 never executed
branch  1 never executed
    #####:  297:        std::list<const Token*> callstack = { deref, erased };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  298:        reportError(callstack, Severity::error, "eraseDereference",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  299:                    "$symbol:" + itername + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  300:                    "Iterator '$symbol' used after element has been erased.\n"
        -:  301:                    "The iterator '$symbol' is invalid after the element it pointed to has been erased. "
        -:  302:                    "Dereferencing or comparing it with another iterator is invalid operation.", CWE664, inconclusive);
        -:  303:    } else {
    #####:  304:        reportError(deref, Severity::error, "eraseDereference",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  305:                    "$symbol:" + itername + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  306:                    "Invalid iterator '$symbol' used.\n"
        -:  307:                    "The iterator '$symbol' is invalid before being assigned. "
        -:  308:                    "Dereferencing or comparing it with another iterator is invalid operation.", CWE664, inconclusive);
        -:  309:    }
    #####:  310:}
call    0 never executed
        -:  311:
function _ZL11skipMembersPK5Token called 0 returned 0% blocks executed 0%
    #####:  312:static const Token *skipMembers(const Token *tok)
        -:  313:{
    #####:  314:    while (Token::Match(tok, "%name% ."))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  315:        tok = tok->tokAt(2);
call    0 never executed
    #####:  316:    return tok;
        -:  317:}
        -:  318:
function _ZL10isIteratorPK8VariableRb called 0 returned 0% blocks executed 0%
    #####:  319:static bool isIterator(const Variable *var, bool& inconclusiveType)
        -:  320:{
        -:  321:    // Check that its an iterator
    #####:  322:    if (!var || !var->isLocal() || !Token::Match(var->typeEndToken(), "iterator|const_iterator|reverse_iterator|const_reverse_iterator|auto"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  323:        return false;
        -:  324:
    #####:  325:    inconclusiveType = false;
    #####:  326:    if (var->typeEndToken()->str() == "auto")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  327:        return (var->nameToken()->valueType() && var->nameToken()->valueType()->type == ValueType::Type::ITERATOR);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  328:
    #####:  329:    if (var->type()) { // If it is defined, ensure that it is defined like an iterator
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  330:        // look for operator* and operator++
    #####:  331:        const Function* end = var->type()->getFunction("operator*");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  332:        const Function* incOperator = var->type()->getFunction("operator++");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  333:        if (!end || end->argCount() > 0 || !incOperator) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  334:            return false;
        -:  335:        } else {
    #####:  336:            inconclusiveType = true; // heuristics only
        -:  337:        }
        -:  338:    }
        -:  339:
    #####:  340:    return true;
        -:  341:}
        -:  342:
function _ZL16getContainerNamePK5Token called 0 returned 0% blocks executed 0%
    #####:  343:static std::string getContainerName(const Token *containerToken)
        -:  344:{
    #####:  345:    if (!containerToken)
branch  0 never executed
branch  1 never executed
    #####:  346:        return std::string();
call    0 never executed
    #####:  347:    std::string ret(containerToken->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  348:    for (const Token *nametok = containerToken; nametok; nametok = nametok->tokAt(-2)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  349:        if (!Token::Match(nametok->tokAt(-2), "%name% ."))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  350:            break;
    #####:  351:        ret = nametok->strAt(-2) + '.' + ret;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  352:    }
    #####:  353:    return ret;
call    0 never executed
        -:  354:}
        -:  355:
        -:  356:enum OperandPosition {
        -:  357:    Left,
        -:  358:    Right
        -:  359:};
        -:  360:
function _ZL21findIteratorContainerPK5TokenS1_i called 0 returned 0% blocks executed 0%
    #####:  361:static const Token* findIteratorContainer(const Token* start, const Token* end, nonneg int id)
        -:  362:{
    #####:  363:    const Token* containerToken = nullptr;
    #####:  364:    for (const Token* tok = start; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  365:        if (Token::Match(tok, "%varid% = %name% . %name% (", id)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  366:            // Iterator is assigned to value
    #####:  367:            if (tok->tokAt(5)->valueType() && tok->tokAt(5)->valueType()->type == ValueType::Type::ITERATOR) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  368:                containerToken = tok->tokAt(2);
call    0 never executed
        -:  369:            }
    #####:  370:        } else if (Token::Match(tok, "%varid% = %name% (", id)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  371:            // Prevent FP: iterator is assigned to something
        -:  372:            // TODO: Fix it in future
    #####:  373:            containerToken = nullptr;
        -:  374:        }
        -:  375:    }
    #####:  376:    return containerToken;
        -:  377:}
        -:  378:
function _ZL8isVectorPK5Token called 0 returned 0% blocks executed 0%
    #####:  379:static bool isVector(const Token* tok)
        -:  380:{
    #####:  381:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  382:        return false;
    #####:  383:    const Variable *var = tok->variable();
call    0 never executed
    #####:  384:    const Token *decltok = var ? var->typeStartToken() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  385:    return Token::simpleMatch(decltok, "std :: vector");
call    0 never executed
        -:  386:}
        -:  387:
function _ZN8CheckStl9iteratorsEv called 0 returned 0% blocks executed 0%
    #####:  388:void CheckStl::iterators()
        -:  389:{
    #####:  390:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  391:
        -:  392:    // Filling map of iterators id and their scope begin
    #####:  393:    std::map<int, const Token*> iteratorScopeBeginInfo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  394:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  395:        bool inconclusiveType=false;
    #####:  396:        if (!isIterator(var, inconclusiveType))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  397:            continue;
    #####:  398:        const int iteratorId = var->declarationId();
call    0 never executed
    #####:  399:        if (iteratorId != 0)
branch  0 never executed
branch  1 never executed
    #####:  400:            iteratorScopeBeginInfo[iteratorId] = var->nameToken();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  401:    }
        -:  402:    // Storage to save found comparison problems to avoid duplicate error messages
    #####:  403:    std::set<const Token*> foundOperatorErrors;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  404:
    #####:  405:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  406:        bool inconclusiveType=false;
    #####:  407:        if (!isIterator(var, inconclusiveType))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  408:            continue;
    #####:  409:        if (inconclusiveType && !mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  410:            continue;
        -:  411:
    #####:  412:        const int iteratorId = var->declarationId();
call    0 never executed
        -:  413:
        -:  414:        // the validIterator flag says if the iterator has a valid value or not
    #####:  415:        bool validIterator = Token::Match(var->nameToken()->next(), "[(=:{]");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  416:        const Scope* invalidationScope = nullptr;
        -:  417:
        -:  418:        // The container this iterator can be used with
    #####:  419:        const Token* containerToken = nullptr;
    #####:  420:        const Scope* containerAssignScope = nullptr;
        -:  421:
        -:  422:        // When "validatingToken" is reached the validIterator is set to true
    #####:  423:        const Token* validatingToken = nullptr;
        -:  424:
    #####:  425:        const Token* eraseToken = nullptr;
        -:  426:
        -:  427:        // Scan through the rest of the code and see if the iterator is
        -:  428:        // used against other containers.
    #####:  429:        for (const Token *tok2 = var->nameToken(); tok2 && tok2 != var->scope()->bodyEnd; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####:  430:            if (invalidationScope && tok2 == invalidationScope->bodyEnd)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  431:                validIterator = true; // Assume that the iterator becomes valid again
    #####:  432:            if (containerAssignScope && tok2 == containerAssignScope->bodyEnd)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  433:                containerToken = nullptr; // We don't know which containers might be used with the iterator
        -:  434:
    #####:  435:            if (tok2 == validatingToken) {
branch  0 never executed
branch  1 never executed
    #####:  436:                validIterator = true;
    #####:  437:                eraseToken = nullptr;
    #####:  438:                invalidationScope = nullptr;
        -:  439:            }
        -:  440:
        -:  441:            // Is comparison expression?
        -:  442:            // Check whether iterator compared against different container or iterator of different container?
    #####:  443:            if (tok2->isComparisonOp() && tok2->astOperand1() && tok2->astOperand2() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  444:                (foundOperatorErrors.find(tok2) == foundOperatorErrors.end()) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
    #####:  445:                compareIteratorAgainstDifferentContainer(tok2, containerToken, iteratorId, iteratorScopeBeginInfo)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  446:                foundOperatorErrors.insert(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  447:            }
        -:  448:
        -:  449:            // Is the iterator used in a insert/erase operation?
    #####:  450:            else if (Token::Match(tok2, "%name% . insert|erase ( *| %varid% )|,", iteratorId) && !isVector(tok2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  451:                const Token* itTok = tok2->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  452:                if (itTok->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  453:                    if (tok2->strAt(2) == "insert")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  454:                        continue;
        -:  455:
    #####:  456:                    itTok = itTok->next();
call    0 never executed
        -:  457:                }
        -:  458:                // It is bad to insert/erase an invalid iterator
    #####:  459:                if (!validIterator)
branch  0 never executed
branch  1 never executed
    #####:  460:                    invalidIteratorError(tok2, itTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  461:
        -:  462:                // If insert/erase is used on different container then
        -:  463:                // report an error
    #####:  464:                if (containerToken && tok2->varId() != containerToken->varId()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  465:                    // skip error message if container is a set..
    #####:  466:                    const Variable *variableInfo = tok2->variable();
call    0 never executed
    #####:  467:                    const Token *decltok = variableInfo ? variableInfo->typeStartToken() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  468:
    #####:  469:                    if (Token::simpleMatch(decltok, "std :: set"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  470:                        continue; // No warning
        -:  471:
        -:  472:                    // skip error message if the iterator is erased/inserted by value
    #####:  473:                    if (itTok->previous()->str() == "*")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  474:                        continue;
        -:  475:
        -:  476:                    // inserting iterator range..
    #####:  477:                    if (tok2->strAt(2) == "insert") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  478:                        const Token *par2 = itTok->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  479:                        if (!par2 || par2->nextArgument())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  480:                            continue;
    #####:  481:                        while (par2->str() != ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  482:                            if (par2->varId() == containerToken->varId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  483:                                break;
    #####:  484:                            bool inconclusiveType2=false;
    #####:  485:                            if (isIterator(par2->variable(), inconclusiveType2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  486:                                break;  // TODO: check if iterator points at same container
    #####:  487:                            if (par2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  488:                                par2 = par2->link();
call    0 never executed
    #####:  489:                            par2 = par2->next();
call    0 never executed
        -:  490:                        }
    #####:  491:                        if (par2->str() != ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  492:                            continue;
        -:  493:                    }
        -:  494:
        -:  495:                    // Show error message, mismatching iterator is used.
    #####:  496:                    iteratorsError(tok2, getContainerName(containerToken), getContainerName(tok2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  497:                }
        -:  498:
        -:  499:                // invalidate the iterator if it is erased
    #####:  500:                else if (tok2->strAt(2) == "erase" && (tok2->strAt(4) != "*" || (containerToken && tok2->varId() == containerToken->varId()))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  501:                    validIterator = false;
    #####:  502:                    eraseToken = tok2;
    #####:  503:                    invalidationScope = tok2->scope();
call    0 never executed
        -:  504:                }
        -:  505:
        -:  506:                // skip the operation
    #####:  507:                tok2 = itTok->next();
call    0 never executed
        -:  508:            }
        -:  509:
        -:  510:            // it = foo.erase(..
        -:  511:            // taking the result of an erase is ok
    #####:  512:            else if (Token::Match(tok2, "%varid% = %name% .", iteratorId) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  513:                     Token::simpleMatch(skipMembers(tok2->tokAt(2)), "erase (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  514:                // the returned iterator is valid
    #####:  515:                validatingToken = skipMembers(tok2->tokAt(2))->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  516:                tok2 = validatingToken->link();
call    0 never executed
        -:  517:            }
        -:  518:
        -:  519:            // Reassign the iterator
    #####:  520:            else if (Token::Match(tok2, "%varid% = %name% .", iteratorId) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  521:                     Token::Match(skipMembers(tok2->tokAt(2)), "begin|rbegin|cbegin|crbegin|find (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  522:                validatingToken = skipMembers(tok2->tokAt(2))->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  523:                containerToken = skipMembers(tok2->tokAt(2))->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  524:                if (containerToken->varId() == 0 || Token::simpleMatch(validatingToken, ") ."))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  525:                    containerToken = nullptr;
    #####:  526:                containerAssignScope = tok2->scope();
call    0 never executed
        -:  527:
        -:  528:                // skip ahead
    #####:  529:                tok2 = validatingToken->link();
call    0 never executed
        -:  530:            }
        -:  531:
        -:  532:            // Reassign the iterator
    #####:  533:            else if (Token::Match(tok2, "%varid% =", iteratorId)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  534:                break;
        -:  535:            }
        -:  536:
        -:  537:            // Passing iterator to function. Iterator might be initialized
    #####:  538:            else if (Token::Match(tok2, "%varid% ,|)", iteratorId)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  539:                validIterator = true;
        -:  540:            }
        -:  541:
        -:  542:            // Dereferencing invalid iterator?
    #####:  543:            else if (!validIterator && Token::Match(tok2, "* %varid%", iteratorId)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  544:                dereferenceErasedError(eraseToken, tok2, tok2->strAt(1), inconclusiveType);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  545:                tok2 = tok2->next();
call    0 never executed
    #####:  546:            } else if (!validIterator && Token::Match(tok2, "%varid% . %name%", iteratorId)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  547:                dereferenceErasedError(eraseToken, tok2, tok2->str(), inconclusiveType);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  548:                tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  549:            }
        -:  550:
        -:  551:            // bailout handling. Assume that the iterator becomes valid if we see return/break.
        -:  552:            // TODO: better handling
    #####:  553:            else if (tok2->scope() == invalidationScope && Token::Match(tok2, "return|break|continue")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  554:                validatingToken = Token::findsimplematch(tok2->next(), ";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  555:            }
        -:  556:
        -:  557:            // bailout handling. Assume that the iterator becomes valid if we see else.
        -:  558:            // TODO: better handling
    #####:  559:            else if (tok2->str() == "else") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  560:                validIterator = true;
        -:  561:            }
        -:  562:        }
        -:  563:    }
    #####:  564:}
        -:  565:
function _ZN8CheckStl40compareIteratorAgainstDifferentContainerEPK5TokenS2_iRKNSt7__debug3mapIiS2_St4lessIiESaISt4pairIKiS2_EEEE called 0 returned 0% blocks executed 0%
    #####:  566:bool CheckStl::compareIteratorAgainstDifferentContainer(const Token* operatorTok, const Token* containerTok, const nonneg int iteratorId, const std::map<int, const Token*>& iteratorScopeBeginInfo)
        -:  567:{
    #####:  568:    if (!containerTok)
branch  0 never executed
branch  1 never executed
    #####:  569:        return false;
        -:  570:
    #####:  571:    const Token *otherOperand = nullptr;
        -:  572:    OperandPosition operandPosition;
    #####:  573:    if (operatorTok->astOperand1()->varId() == iteratorId) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  574:        otherOperand = operatorTok->astOperand2();
call    0 never executed
    #####:  575:        operandPosition = OperandPosition::Right;
    #####:  576:    } else if (operatorTok->astOperand2()->varId() == iteratorId) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  577:        otherOperand = operatorTok->astOperand1();
call    0 never executed
    #####:  578:        operandPosition = OperandPosition::Left;
        -:  579:    }
        -:  580:
    #####:  581:    if (!otherOperand)
branch  0 never executed
branch  1 never executed
    #####:  582:        return false;
        -:  583:
    #####:  584:    const Token * const otherExprPart = otherOperand->tokAt(-3);
call    0 never executed
    #####:  585:    if (Token::Match(otherExprPart, "%name% . end|rend|cend|crend ( )") && otherExprPart->varId() != containerTok->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  586:        const std::string& firstContainerName = getContainerName(containerTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  587:        const std::string& secondContainerName = getContainerName(otherExprPart);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  588:        if (firstContainerName != secondContainerName) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  589:            if (operandPosition == OperandPosition::Right)
branch  0 never executed
branch  1 never executed
    #####:  590:                iteratorsError(operatorTok, containerTok, firstContainerName, secondContainerName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  591:            else
    #####:  592:                iteratorsError(operatorTok, containerTok, secondContainerName, firstContainerName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  593:        } else {
    #####:  594:            iteratorsError(operatorTok, containerTok, firstContainerName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  595:        }
    #####:  596:        return true;
        -:  597:    } else {
    #####:  598:        const int otherId = otherOperand->varId();
call    0 never executed
    #####:  599:        auto it = iteratorScopeBeginInfo.find(otherId);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  600:        if (it != iteratorScopeBeginInfo.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  601:            const Token* otherContainerToken = findIteratorContainer(it->second, operatorTok->astOperand1(), otherId);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  602:            if (otherContainerToken && otherContainerToken->varId() != containerTok->varId()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  603:                const std::string& firstContainerName = getContainerName(containerTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####:  604:                const std::string& secondContainerName = getContainerName(otherContainerToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  605:                if (firstContainerName != secondContainerName) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  606:                    if (operandPosition == OperandPosition::Right)
branch  0 never executed
branch  1 never executed
    #####:  607:                        iteratorsCmpError(operatorTok, containerTok, otherContainerToken, firstContainerName, secondContainerName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  608:                    else
    #####:  609:                        iteratorsCmpError(operatorTok, containerTok, otherContainerToken, secondContainerName, firstContainerName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  610:                } else {
    #####:  611:                    iteratorsCmpError(operatorTok, containerTok, otherContainerToken, firstContainerName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  612:                }
    #####:  613:                return true;
        -:  614:            }
        -:  615:        }
        -:  616:    }
        -:  617:
    #####:  618:    return false;
        -:  619:}
        -:  620:
        -:  621:// Error message for bad iterator usage..
function _ZN8CheckStl26mismatchingContainersErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  622:void CheckStl::mismatchingContainersError(const Token *tok)
        -:  623:{
    #####:  624:    reportError(tok, Severity::error, "mismatchingContainers", "Iterators of different containers are used together.", CWE664, false);
call    0 never executed
    #####:  625:}
        -:  626:
function _ZN8CheckStl35mismatchingContainerExpressionErrorEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  627:void CheckStl::mismatchingContainerExpressionError(const Token *tok1, const Token *tok2)
        -:  628:{
    #####:  629:    const std::string expr1(tok1 ? tok1->expressionString() : std::string("v1"));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  630:    const std::string expr2(tok2 ? tok2->expressionString() : std::string("v2"));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  631:    reportError(tok1, Severity::warning, "mismatchingContainerExpression",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  632:                "Iterators to containers from different expressions '" +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  633:                expr1 + "' and '" + expr2 + "' are used together.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  634:}
        -:  635:
function _ZN8CheckStl27sameIteratorExpressionErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  636:void CheckStl::sameIteratorExpressionError(const Token *tok)
        -:  637:{
    #####:  638:    reportError(tok, Severity::style, "sameIteratorExpression", "Same iterators expression are used for algorithm.", CWE664, false);
call    0 never executed
    #####:  639:}
        -:  640:
       52:  641:static const std::set<std::string> algorithm2 = { // func(begin1, end1
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
call   101 returned 100%
branch 102 taken 100% (fallthrough)
branch 103 taken 0% (throw)
call   104 returned 100%
call   105 returned 100%
branch 106 taken 100% (fallthrough)
branch 107 taken 0% (throw)
call   108 returned 100%
call   109 returned 100%
branch 110 taken 100% (fallthrough)
branch 111 taken 0% (throw)
call   112 returned 100%
call   113 returned 100%
branch 114 taken 100% (fallthrough)
branch 115 taken 0% (throw)
call   116 returned 100%
call   117 returned 100%
branch 118 taken 100% (fallthrough)
branch 119 taken 0% (throw)
call   120 returned 100%
call   121 returned 100%
branch 122 taken 100% (fallthrough)
branch 123 taken 0% (throw)
call   124 returned 100%
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0% (throw)
call   136 returned 100%
call   137 returned 100%
branch 138 taken 100% (fallthrough)
branch 139 taken 0% (throw)
call   140 returned 100%
call   141 returned 100%
branch 142 taken 100% (fallthrough)
branch 143 taken 0% (throw)
call   144 returned 100%
call   145 returned 100%
branch 146 taken 100% (fallthrough)
branch 147 taken 0% (throw)
call   148 returned 100%
call   149 returned 100%
branch 150 taken 100% (fallthrough)
branch 151 taken 0% (throw)
call   152 returned 100%
call   153 returned 100%
branch 154 taken 100% (fallthrough)
branch 155 taken 0% (throw)
call   156 returned 100%
call   157 returned 100%
branch 158 taken 100% (fallthrough)
branch 159 taken 0% (throw)
call   160 returned 100%
call   161 returned 100%
branch 162 taken 100% (fallthrough)
branch 163 taken 0% (throw)
call   164 returned 100%
call   165 returned 100%
branch 166 taken 100% (fallthrough)
branch 167 taken 0% (throw)
call   168 returned 100%
call   169 returned 100%
branch 170 taken 100% (fallthrough)
branch 171 taken 0% (throw)
call   172 returned 100%
call   173 returned 100%
branch 174 taken 100% (fallthrough)
branch 175 taken 0% (throw)
call   176 returned 100%
call   177 returned 100%
branch 178 taken 100% (fallthrough)
branch 179 taken 0% (throw)
call   180 returned 100%
call   181 returned 100%
branch 182 taken 100% (fallthrough)
branch 183 taken 0% (throw)
call   184 returned 100%
call   185 returned 100%
branch 186 taken 100% (fallthrough)
branch 187 taken 0% (throw)
call   188 returned 100%
call   189 returned 100%
branch 190 taken 100% (fallthrough)
branch 191 taken 0% (throw)
call   192 returned 100%
call   193 returned 100%
branch 194 taken 100% (fallthrough)
branch 195 taken 0% (throw)
call   196 returned 100%
call   197 returned 100%
branch 198 taken 100% (fallthrough)
branch 199 taken 0% (throw)
call   200 returned 100%
call   201 returned 100%
branch 202 taken 100% (fallthrough)
branch 203 taken 0% (throw)
call   204 returned 100%
call   205 returned 100%
branch 206 taken 100% (fallthrough)
branch 207 taken 0% (throw)
call   208 returned 100%
branch 209 taken 98% (fallthrough)
branch 210 taken 2%
call   211 returned 100%
call   212 returned 100%
call   213 returned 100%
call   214 returned 100%
call   215 returned 100%
call   216 returned 100%
call   217 returned 100%
call   218 returned 100%
call   219 returned 100%
call   220 returned 100%
call   221 returned 100%
call   222 returned 100%
call   223 returned 100%
call   224 returned 100%
call   225 returned 100%
call   226 returned 100%
call   227 returned 100%
call   228 returned 100%
call   229 returned 100%
call   230 returned 100%
call   231 returned 100%
call   232 returned 100%
call   233 returned 100%
call   234 returned 100%
call   235 returned 100%
call   236 returned 100%
call   237 returned 100%
call   238 returned 100%
call   239 returned 100%
call   240 returned 100%
call   241 returned 100%
call   242 returned 100%
call   243 returned 100%
call   244 returned 100%
call   245 returned 100%
call   246 returned 100%
call   247 returned 100%
call   248 returned 100%
call   249 returned 100%
call   250 returned 100%
call   251 returned 100%
call   252 returned 100%
call   253 returned 100%
call   254 returned 100%
call   255 returned 100%
call   256 returned 100%
call   257 returned 100%
call   258 returned 100%
call   259 returned 100%
call   260 returned 100%
call   261 returned 100%
call   262 returned 100%
call   263 never executed
branch 264 never executed
branch 265 never executed
call   266 never executed
call   267 never executed
call   268 never executed
call   269 never executed
call   270 never executed
call   271 never executed
call   272 never executed
call   273 never executed
call   274 never executed
call   275 never executed
call   276 never executed
call   277 never executed
call   278 never executed
call   279 never executed
call   280 never executed
call   281 never executed
call   282 never executed
call   283 never executed
call   284 never executed
call   285 never executed
call   286 never executed
call   287 never executed
call   288 never executed
call   289 never executed
call   290 never executed
call   291 never executed
call   292 never executed
call   293 never executed
call   294 never executed
call   295 never executed
call   296 never executed
call   297 never executed
call   298 never executed
call   299 never executed
call   300 never executed
call   301 never executed
call   302 never executed
call   303 never executed
call   304 never executed
call   305 never executed
call   306 never executed
call   307 never executed
call   308 never executed
call   309 never executed
call   310 never executed
call   311 never executed
call   312 never executed
call   313 never executed
call   314 never executed
call   315 never executed
call   316 never executed
call   317 never executed
        -:  642:    "binary_search", "copy", "copy_if", "equal_range"
        -:  643:    , "generate", "is_heap", "is_heap_until", "is_partitioned"
        -:  644:    , "is_permutation", "is_sorted", "is_sorted_until", "lower_bound", "make_heap", "max_element", "minmax_element"
        -:  645:    , "min_element", "mismatch", "move", "move_backward", "next_permutation", "partition", "partition_copy"
        -:  646:    , "partition_point", "pop_heap", "prev_permutation", "push_heap", "random_shuffle", "remove", "remove_copy"
        -:  647:    , "remove_copy_if", "remove_if", "replace", "replace_copy", "replace_copy_if", "replace_if", "reverse", "reverse_copy"
        -:  648:    , "shuffle", "sort", "sort_heap", "stable_partition", "stable_sort", "swap_ranges", "transform", "unique"
        -:  649:    , "unique_copy", "upper_bound", "string", "wstring", "u16string", "u32string"
       51:  650:};
call    0 returned 100%
call    1 never executed
        9:  651:static const std::set<std::string> algorithm22 = { // func(begin1, end1, begin2, end2
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 89% (fallthrough)
branch 38 taken 11%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
        -:  652:    "includes", "lexicographical_compare", "merge", "partial_sort_copy"
        -:  653:    , "set_difference", "set_intersection", "set_symmetric_difference", "set_union"
        8:  654:};
call    0 returned 100%
call    1 never executed
        5:  655:static const std::set<std::string> algorithm1x1 = {  // func(begin1, x, end1
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 80% (fallthrough)
branch 22 taken 20%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
        -:  656:    "nth_element", "partial_sort", "rotate", "rotate_copy"
        4:  657:};
call    0 returned 100%
call    1 never executed
        -:  658:
        1:  659:static const std::string iteratorBeginFuncPattern = "begin|cbegin|rbegin|crbegin";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        1:  660:static const std::string iteratorEndFuncPattern = "end|cend|rend|crend";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        -:  661:
        1:  662:static const std::string pattern1x1_1 = "%name% . " + iteratorBeginFuncPattern + " ( ) , ";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        1:  663:static const std::string pattern1x1_2 = "%name% . " + iteratorEndFuncPattern + " ( ) ,|)";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        1:  664:static const std::string pattern2 = pattern1x1_1 + pattern1x1_2;
call    0 returned 100%
call    1 returned 100%
        -:  665:
function _ZL12getContainerPK5Token called 0 returned 0% blocks executed 0%
    #####:  666:static const Variable *getContainer(const Token *argtok)
        -:  667:{
    #####:  668:    while (argtok && argtok->astOperand1())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  669:        argtok = argtok->astOperand1();
call    0 never executed
    #####:  670:    if (!Token::Match(argtok, "%var% . begin|end|rbegin|rend ( )")) // TODO: use Library yield
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  671:        return nullptr;
    #####:  672:    const Variable *var = argtok->variable();
call    0 never executed
    #####:  673:    if (var && Token::simpleMatch(var->typeStartToken(), "std ::"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  674:        return var;
    #####:  675:    return nullptr;
        -:  676:}
        -:  677:
function _ZL21getIteratorExpressionPK5Token called 0 returned 0% blocks executed 0%
    #####:  678:static const Token * getIteratorExpression(const Token * tok)
        -:  679:{
    #####:  680:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  681:        return nullptr;
    #####:  682:    if (tok->isUnaryOp("*"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  683:        return nullptr;
    #####:  684:    if (!tok->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  685:        const Token *iter1 = getIteratorExpression(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####:  686:        if (iter1)
branch  0 never executed
branch  1 never executed
    #####:  687:            return iter1;
    #####:  688:        if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  689:            return nullptr;
    #####:  690:        const Token *iter2 = getIteratorExpression(tok->astOperand2());
call    0 never executed
call    1 never executed
    #####:  691:        if (iter2)
branch  0 never executed
branch  1 never executed
    #####:  692:            return iter2;
    #####:  693:    } else if (Token::Match(tok, "begin|cbegin|rbegin|crbegin|end|cend|rend|crend (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  694:        if (Token::Match(tok->previous(), ". %name% ( ) !!."))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  695:            return tok->previous()->astOperand1();
call    0 never executed
call    1 never executed
    #####:  696:        if (!Token::simpleMatch(tok->previous(), ".") && Token::Match(tok, "%name% ( !!)") && !Token::simpleMatch(tok->linkAt(1), ") ."))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  697:            return tok->next()->astOperand2();
call    0 never executed
call    1 never executed
        -:  698:    }
    #####:  699:    return nullptr;
        -:  700:}
        -:  701:
function _ZN8CheckStl21mismatchingContainersEv called 0 returned 0% blocks executed 0%
    #####:  702:void CheckStl::mismatchingContainers()
        -:  703:{
        -:  704:    // Check if different containers are used in various calls of standard functions
    #####:  705:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  706:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  707:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  708:            if (Token::Match(tok, "%comp%|-")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  709:                const Token * iter1 = getIteratorExpression(tok->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  710:                const Token * iter2 = getIteratorExpression(tok->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  711:                if (iter1 && iter2 && !isSameExpression(true, false, iter1, iter2, mSettings->library, false, false)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  712:                    mismatchingContainerExpressionError(iter1, iter2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  713:                    continue;
        -:  714:                }
        -:  715:            }
    #####:  716:            if (!Token::Match(tok, "%name% ( !!)"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  717:                continue;
    #####:  718:            const Token * const ftok = tok;
    #####:  719:            const Token * firstArg = nullptr;
        -:  720:
    #####:  721:            const std::vector<const Token *> args = getArguments(ftok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  722:            if (args.size() < 2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  723:                continue;
        -:  724:
    #####:  725:            std::map<const Variable *, int> containerNr;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  726:            for (int argnr = 1; argnr <= args.size(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  727:                const Library::ArgumentChecks::IteratorInfo *i = mSettings->library.getArgIteratorInfo(ftok, argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  728:                if (!i)
branch  0 never executed
branch  1 never executed
    #####:  729:                    continue;
    #####:  730:                const Token * const argTok = args[argnr - 1];
call    0 never executed
    #####:  731:                if (i->first) {
branch  0 never executed
branch  1 never executed
    #####:  732:                    firstArg = argTok;
        -:  733:                }
    #####:  734:                if (i->last && firstArg && argTok && isSameExpression(true, false, firstArg, argTok, mSettings->library, false, false)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  735:                    sameIteratorExpressionError(firstArg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  736:                }
    #####:  737:                const Variable *c = getContainer(argTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  738:                if (c) {
branch  0 never executed
branch  1 never executed
    #####:  739:                    std::map<const Variable *, int>::const_iterator it = containerNr.find(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  740:                    if (it == containerNr.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  741:                        for (it = containerNr.begin(); it != containerNr.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  742:                            if (it->second == i->container) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  743:                                mismatchingContainersError(argTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  744:                                break;
        -:  745:                            }
        -:  746:                        }
    #####:  747:                        containerNr[c] = i->container;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  748:                    } else if (it->second != i->container) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:                        mismatchingContainersError(argTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  750:                    }
        -:  751:                } else {
    #####:  752:                    if (i->last && firstArg && argTok) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  753:                        const Token * iter1 = getIteratorExpression(firstArg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  754:                        const Token * iter2 = getIteratorExpression(argTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  755:                        if (iter1 && iter2 && !isSameExpression(true, false, iter1, iter2, mSettings->library, false, false)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  756:                            mismatchingContainerExpressionError(iter1, iter2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  757:                        }
        -:  758:                    }
        -:  759:                }
        -:  760:            }
    #####:  761:            const int ret = mSettings->library.returnValueContainer(ftok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  762:            if (ret != -1 && Token::Match(ftok->next()->astParent(), "==|!=")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  763:                const Token *parent = ftok->next()->astParent();
call    0 never executed
call    1 never executed
    #####:  764:                const Token *other = (parent->astOperand1() == ftok->next()) ? parent->astOperand2() : parent->astOperand1();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  765:                const Variable *c = getContainer(other);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  766:                if (c) {
branch  0 never executed
branch  1 never executed
    #####:  767:                    const std::map<const Variable *, int>::const_iterator it = containerNr.find(c);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  768:                    if (it == containerNr.end() || it->second != ret)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  769:                        mismatchingContainersError(other);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  770:                }
        -:  771:            }
        -:  772:        }
        -:  773:    }
    #####:  774:    for (const Variable *var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  775:        if (var && var->isStlStringType() && Token::Match(var->nameToken(), "%var% (") && Token::Match(var->nameToken()->tokAt(2), pattern2.c_str())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
    #####:  776:            if (var->nameToken()->strAt(2) != var->nameToken()->strAt(8)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####:  777:                mismatchingContainersError(var->nameToken());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:            }
        -:  779:        }
        -:  780:    }
    #####:  781:}
        -:  782:
function _ZL15isInvalidMethodPK5Token called 0 returned 0% blocks executed 0%
    #####:  783:static bool isInvalidMethod(const Token * tok)
        -:  784:{
    #####:  785:    if (Token::Match(tok->next(), ". assign|clear"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  786:        return true;
    #####:  787:    if (Token::Match(tok->next(), "%assign%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  788:        return true;
    #####:  789:    if (isVector(tok) && Token::Match(tok->next(), ". insert|emplace|emplace_back|push_back|erase|pop_back|reserve ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  790:        return true;
    #####:  791:    return false;
        -:  792:}
        -:  793:
function _ZL14isVariableDeclPK5Token called 0 returned 0% blocks executed 0%
    #####:  794:static bool isVariableDecl(const Token* tok)
        -:  795:{
    #####:  796:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  797:        return false;
    #####:  798:    const Variable* var = tok->variable();
call    0 never executed
    #####:  799:    if (!var)
branch  0 never executed
branch  1 never executed
    #####:  800:        return false;
    #####:  801:    if (var->nameToken() == tok)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:        return true;
    #####:  803:    if (Token::Match(var->declEndToken(), "; %var%") && var->declEndToken()->next() == tok)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  804:        return true;
    #####:  805:    return false;
        -:  806:}
        -:  807:
function _ZN8CheckStl16invalidContainerEv called 0 returned 0% blocks executed 0%
    #####:  808:void CheckStl::invalidContainer()
        -:  809:{
    #####:  810:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  811:    const Library& library = mSettings->library;
    #####:  812:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  813:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  814:            if (!Token::Match(tok, "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  815:                continue;
    #####:  816:            if (tok->varId() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  817:                continue;
    #####:  818:            if (!astIsContainer(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  819:                continue;
    #####:  820:            if (!isInvalidMethod(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  821:                continue;
        -:  822:            // Skip if the variable is assigned to
    #####:  823:            unsigned int skipVarId = 0;
    #####:  824:            if (Token::Match(tok->astTop(), "%assign%") && Token::Match(tok->astTop()->previous(), "%var%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  825:                skipVarId = tok->astTop()->previous()->varId();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  826:            const Token * endToken = nextAfterAstRightmostLeaf(tok->next()->astParent());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  827:            if (!endToken)
branch  0 never executed
branch  1 never executed
    #####:  828:                endToken = tok->next();
call    0 never executed
    #####:  829:            const ValueFlow::Value* v = nullptr;
    #####:  830:            ErrorPath errorPath;
call    0 never executed
call    1 never executed
function _ZZN8CheckStl16invalidContainerEvENKUlRKN12PathAnalysis4InfoEE_clES3_ called 0 returned 0% blocks executed 0%
    #####:  831:            PathAnalysis::Info info = PathAnalysis{endToken, library} .forwardFind([&](const PathAnalysis::Info& info) {
call    0 never executed
    #####:  832:                if (!info.tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:                    return false;
    #####:  834:                if (info.tok->varId() == skipVarId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  835:                    return false;
    #####:  836:                if (info.tok->variable()->isReference() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  837:                    !isVariableDecl(info.tok) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  838:                    reaches(info.tok->variable()->nameToken(), tok, library, nullptr)) {
call    0 never executed
call    1 never executed
call    2 never executed
        -:  839:
    #####:  840:                    ErrorPath ep;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  841:                    bool addressOf = false;
    #####:  842:                    const Variable* var = getLifetimeVariable(info.tok, ep, &addressOf);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  843:                    // Check the reference is created before the change
    #####:  844:                    if (var && var->declarationId() == tok->varId() && !addressOf) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  845:                        // An argument always reaches
    #####:  846:                        if (var->isArgument() || (!var->isReference() && !var->isRValueReference() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  847:                                                  !isVariableDecl(tok) && reaches(var->nameToken(), tok, library, &ep))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  848:                            errorPath = ep;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  849:                            return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  850:                        }
        -:  851:                    }
        -:  852:                }
    #####:  853:                for (const ValueFlow::Value& val:info.tok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####:  854:                    if (!val.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  855:                        continue;
    #####:  856:                    if (val.lifetimeKind == ValueFlow::Value::LifetimeKind::Address)
branch  0 never executed
branch  1 never executed
    #####:  857:                        continue;
    #####:  858:                    if (!val.tokvalue->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  859:                        continue;
    #####:  860:                    if (val.tokvalue->varId() != tok->varId())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  861:                        continue;
    #####:  862:                    ErrorPath ep;
call    0 never executed
call    1 never executed
        -:  863:                    // Check the iterator is created before the change
    #####:  864:                    if (reaches(val.tokvalue, tok, library, &ep)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  865:                        v = &val;
    #####:  866:                        errorPath = ep;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:                        return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  868:                    }
        -:  869:                }
    #####:  870:                return false;
    #####:  871:            });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  872:            if (!info.tok)
branch  0 never executed
branch  1 never executed
    #####:  873:                continue;
    #####:  874:            errorPath.insert(errorPath.end(), info.errorPath.begin(), info.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  875:            if (v) {
branch  0 never executed
branch  1 never executed
    #####:  876:                invalidContainerError(info.tok, tok, v, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  877:            } else {
    #####:  878:                invalidContainerReferenceError(info.tok, tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:  879:            }
        -:  880:        }
        -:  881:    }
    #####:  882:}
        -:  883:
function _ZN8CheckStl21invalidContainerErrorEPK5TokenS2_PKN9ValueFlow5ValueENSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISG_EEE called 0 returned 0% blocks executed 0%
    #####:  884:void CheckStl::invalidContainerError(const Token *tok, const Token * contTok, const ValueFlow::Value *val, ErrorPath errorPath)
        -:  885:{
    #####:  886:    const bool inconclusive = val ? val->isInconclusive() : false;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  887:    std::string method = contTok ? contTok->strAt(2) : "erase";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
    #####:  888:    errorPath.emplace_back(contTok, "After calling '" + method + "', iterators or references to the container's data may be invalid .");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  889:    if (val)
branch  0 never executed
branch  1 never executed
    #####:  890:        errorPath.insert(errorPath.begin(), val->errorPath.begin(), val->errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####:  891:    std::string msg = "Using " + lifetimeMessage(tok, val, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  892:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:    reportError(errorPath, Severity::error, "invalidContainer", msg + " that may be invalid.", CWE664, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  894:}
        -:  895:
function _ZN8CheckStl30invalidContainerReferenceErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####:  896:void CheckStl::invalidContainerReferenceError(const Token* tok, const Token* contTok, ErrorPath errorPath)
        -:  897:{
    #####:  898:    std::string method = contTok ? contTok->strAt(2) : "erase";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
    #####:  899:    std::string name = contTok ? contTok->expressionString() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  900:    errorPath.emplace_back(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  901:        contTok, "After calling '" + method + "', iterators or references to the container's data may be invalid .");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  902:    std::string msg = "Reference to " + name;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  903:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:    reportError(errorPath, Severity::error, "invalidContainerReference", msg + " that may be invalid.", CWE664, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  905:}
        -:  906:
function _ZN8CheckStl14stlOutOfBoundsEv called 0 returned 0% blocks executed 0%
    #####:  907:void CheckStl::stlOutOfBounds()
        -:  908:{
    #####:  909:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  910:
        -:  911:    // Scan through all scopes..
    #####:  912:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  913:        const Token* tok = scope.classDef;
        -:  914:        // only interested in conditions
    #####:  915:        if ((scope.type != Scope::eFor && scope.type != Scope::eWhile && scope.type != Scope::eIf && scope.type != Scope::eDo) || !tok)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  916:            continue;
        -:  917:
    #####:  918:        const Token *condition = nullptr;
    #####:  919:        if (scope.type == Scope::eFor) {
branch  0 never executed
branch  1 never executed
    #####:  920:            if (Token::simpleMatch(tok->next()->astOperand2(), ";") && Token::simpleMatch(tok->next()->astOperand2()->astOperand2(), ";"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  921:                condition = tok->next()->astOperand2()->astOperand2()->astOperand1();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  922:        } else if (Token::simpleMatch(tok, "do {") && Token::simpleMatch(tok->linkAt(1), "} while ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  923:            condition = tok->linkAt(1)->tokAt(2)->astOperand2();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  924:        else
    #####:  925:            condition = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
        -:  926:
    #####:  927:        if (!condition)
branch  0 never executed
branch  1 never executed
    #####:  928:            continue;
        -:  929:
    #####:  930:        std::vector<const Token *> conds;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  931:
    #####:  932:        visitAstNodes(condition,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
function _ZZN8CheckStl14stlOutOfBoundsEvENKUlPK5TokenE_clES2_ called 0 returned 0% blocks executed 0%
    #####:  933:        [&](const Token *cond) {
    #####:  934:            if (Token::Match(cond, "%oror%|&&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:                return ChildrenToVisit::op1_and_op2;
    #####:  936:            if (cond->isComparisonOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  937:                conds.emplace_back(cond);
call    0 never executed
    #####:  938:            return ChildrenToVisit::none;
        -:  939:        });
        -:  940:
    #####:  941:        for (const Token *cond : conds) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  942:            const Token *vartok;
        -:  943:            const Token *containerToken;
    #####:  944:            if (Token::Match(cond, "<= %var% . %name% ( )") && Token::Match(cond->astOperand1(), "%var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  945:                vartok = cond->astOperand1();
call    0 never executed
    #####:  946:                containerToken = cond->next();
call    0 never executed
        -:  947:            } else {
    #####:  948:                continue;
        -:  949:            }
        -:  950:
        -:  951:            // Is it a array like container?
    #####:  952:            const Library::Container* container = containerToken->valueType() ? containerToken->valueType()->container : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  953:            if (!container)
branch  0 never executed
branch  1 never executed
    #####:  954:                continue;
    #####:  955:            if (container->getYield(containerToken->strAt(2)) != Library::Container::Yield::SIZE)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  956:                continue;
        -:  957:
        -:  958:            // variable id for loop variable.
    #####:  959:            const int numId = vartok->varId();
call    0 never executed
        -:  960:
        -:  961:            // variable id for the container variable
    #####:  962:            const int declarationId = containerToken->varId();
call    0 never executed
    #####:  963:            const std::string &containerName = containerToken->str();
call    0 never executed
        -:  964:
    #####:  965:            for (const Token *tok3 = scope.bodyStart; tok3 && tok3 != scope.bodyEnd; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  966:                if (tok3->varId() == declarationId) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  967:                    tok3 = tok3->next();
call    0 never executed
    #####:  968:                    if (Token::Match(tok3, ". %name% ( )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  969:                        if (container->getYield(tok3->strAt(1)) == Library::Container::Yield::SIZE)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  970:                            break;
    #####:  971:                    } else if (container->arrayLike_indexOp && Token::Match(tok3, "[ %varid% ]", numId))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  972:                        stlOutOfBoundsError(tok3, tok3->strAt(1), containerName, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  973:                    else if (Token::Match(tok3, ". %name% ( %varid% )", numId)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  974:                        const Library::Container::Yield yield = container->getYield(tok3->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  975:                        if (yield == Library::Container::Yield::AT_INDEX)
branch  0 never executed
branch  1 never executed
    #####:  976:                            stlOutOfBoundsError(tok3, tok3->strAt(3), containerName, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  977:                    }
        -:  978:                }
        -:  979:            }
        -:  980:        }
        -:  981:    }
    #####:  982:}
        -:  983:
function _ZN8CheckStl19stlOutOfBoundsErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####:  984:void CheckStl::stlOutOfBoundsError(const Token *tok, const std::string &num, const std::string &var, bool at)
        -:  985:{
    #####:  986:    if (at)
branch  0 never executed
branch  1 never executed
    #####:  987:        reportError(tok, Severity::error, "stlOutOfBounds", "$symbol:" + var + "\nWhen " + num + "==$symbol.size(), $symbol.at(" + num + ") is out of bounds.", CWE788, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
        -:  988:    else
    #####:  989:        reportError(tok, Severity::error, "stlOutOfBounds", "$symbol:" + var + "\nWhen " + num + "==$symbol.size(), $symbol[" + num + "] is out of bounds.", CWE788, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
    #####:  990:}
        -:  991:
function _ZN8CheckStl13negativeIndexEv called 0 returned 0% blocks executed 0%
    #####:  992:void CheckStl::negativeIndex()
        -:  993:{
        -:  994:    // Negative index is out of bounds..
    #####:  995:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  996:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  997:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  998:            if (!Token::Match(tok, "%var% [") || WRONG_DATA(!tok->next()->astOperand2(), tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  999:                continue;
    #####: 1000:            const Variable * const var = tok->variable();
call    0 never executed
    #####: 1001:            if (!var || tok == var->nameToken())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1002:                continue;
    #####: 1003:            const Library::Container * const container = mSettings->library.detectContainer(var->typeStartToken());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1004:            if (!container || !container->arrayLike_indexOp)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1005:                continue;
    #####: 1006:            const ValueFlow::Value *index = tok->next()->astOperand2()->getValueLE(-1, mSettings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1007:            if (!index)
branch  0 never executed
branch  1 never executed
    #####: 1008:                continue;
    #####: 1009:            negativeIndexError(tok, *index);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1010:        }
        -: 1011:    }
    #####: 1012:}
        -: 1013:
function _ZN8CheckStl18negativeIndexErrorEPK5TokenRKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 1014:void CheckStl::negativeIndexError(const Token *tok, const ValueFlow::Value &index)
        -: 1015:{
    #####: 1016:    const ErrorPath errorPath = getErrorPath(tok, &index, "Negative array index");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1017:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1018:    if (index.condition)
branch  0 never executed
branch  1 never executed
    #####: 1019:        errmsg << ValueFlow::eitherTheConditionIsRedundant(index.condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1020:               << ", otherwise there is negative array index " << index.intvalue << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 1021:    else
    #####: 1022:        errmsg << "Array index " << index.intvalue << " is out of bounds.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1023:    reportError(errorPath, index.errorSeverity() ? Severity::error : Severity::warning, "negativeContainerIndex", errmsg.str(), CWE786, index.isInconclusive());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####: 1024:}
call    0 never executed
        -: 1025:
function _ZN8CheckStl5eraseEv called 0 returned 0% blocks executed 0%
    #####: 1026:void CheckStl::erase()
        -: 1027:{
    #####: 1028:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1029:
    #####: 1030:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1031:        if (scope.type == Scope::eFor && Token::simpleMatch(scope.classDef, "for (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1032:            const Token *tok = scope.classDef->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1033:            if (!Token::Match(tok->tokAt(-3), "; ++| %var% ++| ) {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1034:                continue;
    #####: 1035:            tok = tok->previous();
call    0 never executed
    #####: 1036:            if (!tok->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1037:                tok = tok->previous();
call    0 never executed
    #####: 1038:            eraseCheckLoopVar(scope, tok->variable());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1039:        } else if (scope.type == Scope::eWhile && Token::Match(scope.classDef, "while ( %var% !=")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1040:            eraseCheckLoopVar(scope, scope.classDef->tokAt(2)->variable());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1041:        }
        -: 1042:    }
    #####: 1043:}
        -: 1044:
function _ZN8CheckStl17eraseCheckLoopVarERK5ScopePK8Variable called 0 returned 0% blocks executed 0%
    #####: 1045:void CheckStl::eraseCheckLoopVar(const Scope &scope, const Variable *var)
        -: 1046:{
    #####: 1047:    bool inconclusiveType=false;
    #####: 1048:    if (!isIterator(var, inconclusiveType))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1049:        return;
    #####: 1050:    for (const Token *tok = scope.bodyStart; tok != scope.bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1051:        if (tok->str() != "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1052:            continue;
    #####: 1053:        if (!Token::Match(tok->tokAt(-2), ". erase ( ++| %varid% )", var->declarationId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1054:            continue;
        -: 1055:        // Vector erases are handled by invalidContainer check
    #####: 1056:        if (isVector(tok->tokAt(-3)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1057:            continue;
    #####: 1058:        if (Token::simpleMatch(tok->astParent(), "="))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1059:            continue;
        -: 1060:        // Iterator is invalid..
    #####: 1061:        int indentlevel = 0U;
    #####: 1062:        const Token *tok2 = tok->link();
call    0 never executed
    #####: 1063:        for (; tok2 != scope.bodyEnd; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1064:            if (tok2->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1065:                ++indentlevel;
    #####: 1066:                continue;
        -: 1067:            }
    #####: 1068:            if (tok2->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1069:                if (indentlevel > 0U)
branch  0 never executed
branch  1 never executed
    #####: 1070:                    --indentlevel;
    #####: 1071:                else if (Token::simpleMatch(tok2, "} else {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1072:                    tok2 = tok2->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1073:                continue;
        -: 1074:            }
    #####: 1075:            if (tok2->varId() == var->declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1076:                if (Token::simpleMatch(tok2->next(), "="))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1077:                    break;
    #####: 1078:                dereferenceErasedError(tok, tok2, tok2->str(), inconclusiveType);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1079:                break;
        -: 1080:            }
    #####: 1081:            if (indentlevel == 0U && Token::Match(tok2, "break|return|goto"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1082:                break;
        -: 1083:        }
    #####: 1084:        if (tok2 == scope.bodyEnd)
branch  0 never executed
branch  1 never executed
    #####: 1085:            dereferenceErasedError(tok, scope.classDef, var->nameToken()->str(), inconclusiveType);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1086:    }
        -: 1087:}
        -: 1088:
function _ZN8CheckStl13stlBoundariesEv called 0 returned 0% blocks executed 0%
    #####: 1089:void CheckStl::stlBoundaries()
        -: 1090:{
    #####: 1091:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1092:    for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1093:        if (!var || !var->scope() || !var->scope()->isExecutable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1094:            continue;
        -: 1095:
    #####: 1096:        const Library::Container* container = mSettings->library.detectContainer(var->typeStartToken(), true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1097:        if (!container || container->opLessAllowed)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1098:            continue;
        -: 1099:
    #####: 1100:        const Token* const end = var->scope()->bodyEnd;
call    0 never executed
    #####: 1101:        for (const Token *tok = var->nameToken(); tok != end; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1102:            if (Token::Match(tok, "!!* %varid% <", var->declarationId())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1103:                stlBoundariesError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1104:            } else if (Token::Match(tok, "> %varid% !!.", var->declarationId())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1105:                stlBoundariesError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1106:            }
        -: 1107:        }
        -: 1108:    }
    #####: 1109:}
        -: 1110:
        -: 1111:// Error message for bad boundary usage..
function _ZN8CheckStl18stlBoundariesErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1112:void CheckStl::stlBoundariesError(const Token *tok)
        -: 1113:{
    #####: 1114:    reportError(tok, Severity::error, "stlBoundaries",
call    0 never executed
        -: 1115:                "Dangerous comparison using operator< on iterator.\n"
        -: 1116:                "Iterator compared with operator<. This is dangerous since the order of items in the "
        -: 1117:                "container is not guaranteed. One should use operator!= instead to compare iterators.", CWE664, false);
    #####: 1118:}
        -: 1119:
function _ZL14if_findComparePK5Token called 0 returned 0% blocks executed 0%
    #####: 1120:static bool if_findCompare(const Token * const tokBack)
        -: 1121:{
    #####: 1122:    const Token *tok = tokBack->astParent();
call    0 never executed
    #####: 1123:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1124:        return true;
    #####: 1125:    if (tok->isComparisonOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1126:        return (!tok->astOperand1()->isNumber() && !tok->astOperand2()->isNumber());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1127:    if (tok->isArithmeticalOp()) // result is used in some calculation
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1128:        return true;  // TODO: check if there is a comparison of the result somewhere
    #####: 1129:    if (tok->str() == ".")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1130:        return true; // Dereferencing is OK, the programmer might know that the element exists - TODO: An inconclusive warning might be appropriate
    #####: 1131:    if (tok->isAssignmentOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1132:        return if_findCompare(tok); // Go one step upwards in the AST
call    0 never executed
    #####: 1133:    return false;
        -: 1134:}
        -: 1135:
function _ZN8CheckStl7if_findEv called 0 returned 0% blocks executed 0%
    #####: 1136:void CheckStl::if_find()
        -: 1137:{
    #####: 1138:    const bool printWarning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 1139:    const bool printPerformance = mSettings->isEnabled(Settings::PERFORMANCE);
call    0 never executed
    #####: 1140:    if (!printWarning && !printPerformance)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1141:        return;
        -: 1142:
    #####: 1143:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1144:
    #####: 1145:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1146:        if ((scope.type != Scope::eIf && scope.type != Scope::eWhile) || !scope.classDef)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1147:            continue;
        -: 1148:
    #####: 1149:        for (const Token *tok = scope.classDef->next(); tok->str() != "{"; tok = tok->next()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 1150:            const Token* funcTok = nullptr;
    #####: 1151:            const Library::Container* container = nullptr;
        -: 1152:
    #####: 1153:            if (Token::Match(tok, "%name% ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1154:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1155:
    #####: 1156:            else if (tok->variable() && Token::Match(tok, "%var% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1157:                container = mSettings->library.detectContainer(tok->variable()->typeStartToken());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1158:                funcTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1159:            }
        -: 1160:
        -: 1161:            // check also for vector-like or pointer containers
    #####: 1162:            else if (tok->variable() && tok->astParent() && (tok->astParent()->str() == "*" || tok->astParent()->str() == "[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1163:                const Token *tok2 = tok->astParent();
call    0 never executed
        -: 1164:
    #####: 1165:                if (!Token::Match(tok2->astParent(), ". %name% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1166:                    continue;
        -: 1167:
    #####: 1168:                funcTok = tok2->astParent()->next();
call    0 never executed
call    1 never executed
        -: 1169:
    #####: 1170:                if (tok->variable()->isArrayOrPointer())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1171:                    container = mSettings->library.detectContainer(tok->variable()->typeStartToken());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1172:                else { // Container of container - find the inner container
    #####: 1173:                    container = mSettings->library.detectContainer(tok->variable()->typeStartToken()); // outer container
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1174:                    tok2 = Token::findsimplematch(tok->variable()->typeStartToken(), "<", tok->variable()->typeEndToken());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1175:                    if (container && container->type_templateArgNo >= 0 && tok2) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1176:                        tok2 = tok2->next();
call    0 never executed
    #####: 1177:                        for (int j = 0; j < container->type_templateArgNo; j++)
branch  0 never executed
branch  1 never executed
    #####: 1178:                            tok2 = tok2->nextTemplateArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1179:
    #####: 1180:                        container = mSettings->library.detectContainer(tok2); // innner container
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1181:                    } else
    #####: 1182:                        container = nullptr;
        -: 1183:                }
        -: 1184:            }
        -: 1185:
    #####: 1186:            if (container && container->getAction(funcTok->str()) == Library::Container::Action::FIND) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1187:                if (if_findCompare(funcTok->next()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1188:                    continue;
        -: 1189:
    #####: 1190:                if (printWarning && container->getYield(funcTok->str()) == Library::Container::Yield::ITERATOR)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1191:                    if_findError(tok, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1192:                else if (printPerformance && container->stdStringLike && funcTok->str() == "find")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1193:                    if_findError(tok, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1194:            } else if (printWarning && Token::Match(tok, "std :: find|find_if (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1195:                // check that result is checked properly
    #####: 1196:                if (!if_findCompare(tok->tokAt(3))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1197:                    if_findError(tok, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1198:                }
        -: 1199:            }
        -: 1200:        }
        -: 1201:    }
        -: 1202:}
        -: 1203:
        -: 1204:
function _ZN8CheckStl12if_findErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####: 1205:void CheckStl::if_findError(const Token *tok, bool str)
        -: 1206:{
    #####: 1207:    if (str && mSettings->standards.cpp >= Standards::CPP20)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1208:        reportError(tok, Severity::performance, "stlIfStrFind",
call    0 never executed
        -: 1209:                    "Inefficient usage of string::find() in condition; string::starts_with() could be faster.\n"
        -: 1210:                    "Either inefficient or wrong usage of string::find(). string::starts_with() will be faster if "
        -: 1211:                    "string::find's result is compared with 0, because it will not scan the whole "
        -: 1212:                    "string. If your intention is to check that there are no findings in the string, "
        -: 1213:                    "you should compare with std::string::npos.", CWE597, false);
    #####: 1214:    if (!str)
branch  0 never executed
branch  1 never executed
    #####: 1215:        reportError(tok, Severity::warning, "stlIfFind", "Suspicious condition. The result of find() is an iterator, but it is not properly checked.", CWE398, false);
call    0 never executed
    #####: 1216:}
        -: 1217:
function _ZL9isMapFindPK5Token called 0 returned 0% blocks executed 0%
    #####: 1218:static std::pair<const Token *, const Token *> isMapFind(const Token *tok)
        -: 1219:{
    #####: 1220:    if (!Token::simpleMatch(tok, "("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1221:        return {};
call    0 never executed
    #####: 1222:    if (!Token::simpleMatch(tok->astOperand1(), "."))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1223:        return {};
call    0 never executed
    #####: 1224:    if (!astIsContainer(tok->astOperand1()->astOperand1()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1225:        return {};
call    0 never executed
    #####: 1226:    const Token * contTok = tok->astOperand1()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1227:    const Library::Container * container = contTok->valueType()->container;
call    0 never executed
    #####: 1228:    if (!container)
branch  0 never executed
branch  1 never executed
    #####: 1229:        return {};
call    0 never executed
    #####: 1230:    if (!container->stdAssociativeLike)
branch  0 never executed
branch  1 never executed
    #####: 1231:        return {};
call    0 never executed
    #####: 1232:    if (!Token::Match(tok->astOperand1(), ". find|count ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1233:        return {};
call    0 never executed
    #####: 1234:    if (!tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1235:        return {};
call    0 never executed
    #####: 1236:    return {contTok, tok->astOperand2()};
call    0 never executed
call    1 never executed
        -: 1237:}
        -: 1238:
function _ZL13skipLocalVarsPK5Token called 0 returned 0% blocks executed 0%
    #####: 1239:static const Token *skipLocalVars(const Token *tok)
        -: 1240:{
    #####: 1241:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1242:        return tok;
    #####: 1243:    if (Token::simpleMatch(tok, "{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1244:        return skipLocalVars(tok->next());
call    0 never executed
call    1 never executed
    #####: 1245:    const Scope *scope = tok->scope();
call    0 never executed
        -: 1246:
    #####: 1247:    const Token *top = tok->astTop();
call    0 never executed
    #####: 1248:    if (!top) {
branch  0 never executed
branch  1 never executed
    #####: 1249:        const Token *semi = Token::findsimplematch(tok, ";");
call    0 never executed
    #####: 1250:        if (!semi)
branch  0 never executed
branch  1 never executed
    #####: 1251:            return tok;
    #####: 1252:        if (!Token::Match(semi->previous(), "%var% ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1253:            return tok;
    #####: 1254:        const Token *varTok = semi->previous();
call    0 never executed
    #####: 1255:        const Variable *var = varTok->variable();
call    0 never executed
    #####: 1256:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 1257:            return tok;
    #####: 1258:        if (var->nameToken() != varTok)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1259:            return tok;
    #####: 1260:        return skipLocalVars(semi->next());
call    0 never executed
call    1 never executed
        -: 1261:    }
    #####: 1262:    if (Token::Match(top, "%assign%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1263:        const Token *varTok = top->astOperand1();
call    0 never executed
    #####: 1264:        if (!Token::Match(varTok, "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1265:            return tok;
    #####: 1266:        const Variable *var = varTok->variable();
call    0 never executed
    #####: 1267:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 1268:            return tok;
    #####: 1269:        if (var->scope() != scope)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1270:            return tok;
    #####: 1271:        const Token *endTok = nextAfterAstRightmostLeaf(top);
call    0 never executed
    #####: 1272:        if (!endTok)
branch  0 never executed
branch  1 never executed
    #####: 1273:            return tok;
    #####: 1274:        return skipLocalVars(endTok->next());
call    0 never executed
call    1 never executed
        -: 1275:    }
    #####: 1276:    return tok;
        -: 1277:}
        -: 1278:
function _ZL15findInsertValuePK5TokenS1_S1_RK7Library called 0 returned 0% blocks executed 0%
    #####: 1279:static const Token *findInsertValue(const Token *tok, const Token *containerTok, const Token *keyTok, const Library &library)
        -: 1280:{
    #####: 1281:    const Token *startTok = skipLocalVars(tok);
call    0 never executed
    #####: 1282:    const Token *top = startTok->astTop();
call    0 never executed
        -: 1283:
    #####: 1284:    const Token *icontainerTok = nullptr;
    #####: 1285:    const Token *ikeyTok = nullptr;
    #####: 1286:    const Token *ivalueTok = nullptr;
    #####: 1287:    if (Token::simpleMatch(top, "=") && Token::simpleMatch(top->astOperand1(), "[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1288:        icontainerTok = top->astOperand1()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1289:        ikeyTok = top->astOperand1()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 1290:        ivalueTok = top->astOperand2();
call    0 never executed
        -: 1291:    }
    #####: 1292:    if (Token::simpleMatch(top, "(") && Token::Match(top->astOperand1(), ". insert|emplace (") && !astIsIterator(top->astOperand1()->tokAt(2))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1293:        icontainerTok = top->astOperand1()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1294:        const Token *itok = top->astOperand1()->tokAt(2)->astOperand2();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1295:        if (Token::simpleMatch(itok, ",")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1296:            ikeyTok = itok->astOperand1();
call    0 never executed
    #####: 1297:            ivalueTok = itok->astOperand2();
call    0 never executed
        -: 1298:        } else {
    #####: 1299:            ikeyTok = itok;
        -: 1300:        }
        -: 1301:    }
    #####: 1302:    if (!ikeyTok || !icontainerTok)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1303:        return nullptr;
    #####: 1304:    if (isSameExpression(true, true, containerTok, icontainerTok, library, true, false) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1305:        isSameExpression(true, true, keyTok, ikeyTok, library, true, true)) {
call    0 never executed
    #####: 1306:        if (ivalueTok)
branch  0 never executed
branch  1 never executed
    #####: 1307:            return ivalueTok;
        -: 1308:        else
    #####: 1309:            return ikeyTok;
        -: 1310:    }
    #####: 1311:    return nullptr;
        -: 1312:}
        -: 1313:
function _ZN8CheckStl15checkFindInsertEv called 0 returned 0% blocks executed 0%
    #####: 1314:void CheckStl::checkFindInsert()
        -: 1315:{
    #####: 1316:    if (!mSettings->isEnabled(Settings::PERFORMANCE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1317:        return;
        -: 1318:
    #####: 1319:    const SymbolDatabase *const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1320:    for (const Scope *scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1321:        for (const Token *tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1322:            if (!Token::simpleMatch(tok, "if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1323:                continue;
    #####: 1324:            if (!Token::simpleMatch(tok->next()->link(), ") {"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1325:                continue;
    #####: 1326:            if (!Token::Match(tok->next()->astOperand2(), "%comp%"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1327:                continue;
    #####: 1328:            const Token *condTok = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
        -: 1329:            const Token *containerTok;
        -: 1330:            const Token *keyTok;
    #####: 1331:            std::tie(containerTok, keyTok) = isMapFind(condTok->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1332:            if (!containerTok)
branch  0 never executed
branch  1 never executed
    #####: 1333:                continue;
        -: 1334:
    #####: 1335:            const Token *thenTok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1336:            const Token *valueTok = findInsertValue(thenTok, containerTok, keyTok, mSettings->library);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1337:            if (!valueTok)
branch  0 never executed
branch  1 never executed
    #####: 1338:                continue;
        -: 1339:
    #####: 1340:            if (Token::simpleMatch(thenTok->link(), "} else {")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1341:                const Token *valueTok2 =
    #####: 1342:                    findInsertValue(thenTok->link()->tokAt(2), containerTok, keyTok, mSettings->library);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1343:                if (!valueTok2)
branch  0 never executed
branch  1 never executed
    #####: 1344:                    continue;
    #####: 1345:                if (isSameExpression(true, true, valueTok, valueTok2, mSettings->library, true, true)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1346:                    checkFindInsertError(valueTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1347:                }
        -: 1348:            } else {
    #####: 1349:                checkFindInsertError(valueTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1350:            }
        -: 1351:        }
        -: 1352:    }
        -: 1353:}
        -: 1354:
function _ZN8CheckStl20checkFindInsertErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1355:void CheckStl::checkFindInsertError(const Token *tok)
        -: 1356:{
    #####: 1357:    reportError(
call    0 never executed
        -: 1358:        tok, Severity::performance, "stlFindInsert", "Searching before insertion is not necessary.", CWE398, false);
    #####: 1359:}
        -: 1360:
        -: 1361:/**
        -: 1362: * Is container.size() slow?
        -: 1363: */
function _ZL24isCpp03ContainerSizeSlowPK5Token called 0 returned 0% blocks executed 0%
    #####: 1364:static bool isCpp03ContainerSizeSlow(const Token *tok)
        -: 1365:{
    #####: 1366:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1367:        return false;
    #####: 1368:    const Variable* var = tok->variable();
call    0 never executed
    #####: 1369:    return var && var->isStlType("list");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
        -: 1370:}
        -: 1371:
function _ZN8CheckStl4sizeEv called 0 returned 0% blocks executed 0%
    #####: 1372:void CheckStl::size()
        -: 1373:{
    #####: 1374:    if (!mSettings->isEnabled(Settings::PERFORMANCE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1375:        return;
        -: 1376:
    #####: 1377:    if (mSettings->standards.cpp >= Standards::CPP11)
branch  0 never executed
branch  1 never executed
    #####: 1378:        return;
        -: 1379:
    #####: 1380:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1381:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1382:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1383:            if (Token::Match(tok, "%var% . size ( )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1384:                Token::Match(tok, "%name% . %var% . size ( )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1385:                // get the variable
    #####: 1386:                const Token *varTok = tok;
    #####: 1387:                if (tok->strAt(2) != "size")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1388:                    varTok = varTok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1389:
    #####: 1390:                const Token* const end = varTok->tokAt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1391:
        -: 1392:                // check for comparison to zero
    #####: 1393:                if ((tok->previous() && !tok->previous()->isArithmeticalOp() && Token::Match(end, "==|<=|!=|> 0")) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1394:                    (end->next() && !end->next()->isArithmeticalOp() && Token::Match(tok->tokAt(-2), "0 ==|>=|!=|<"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1395:                    if (isCpp03ContainerSizeSlow(varTok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1396:                        sizeError(varTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1397:                        continue;
        -: 1398:                    }
        -: 1399:                }
        -: 1400:
        -: 1401:                // check for comparison to one
    #####: 1402:                if ((tok->previous() && !tok->previous()->isArithmeticalOp() && Token::Match(end, ">=|< 1") && !end->tokAt(2)->isArithmeticalOp()) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####: 1403:                    (end->next() && !end->next()->isArithmeticalOp() && Token::Match(tok->tokAt(-2), "1 <=|>") && !tok->tokAt(-3)->isArithmeticalOp())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1404:                    if (isCpp03ContainerSizeSlow(varTok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1405:                        sizeError(varTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1406:                }
        -: 1407:
        -: 1408:                // check for using as boolean expression
    #####: 1409:                else if ((Token::Match(tok->tokAt(-2), "if|while (") && end->str() == ")") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1410:                         (tok->previous()->tokType() == Token::eLogicalOp && Token::Match(end, "&&|)|,|;|%oror%"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1411:                    if (isCpp03ContainerSizeSlow(varTok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1412:                        sizeError(varTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1413:                }
        -: 1414:            }
        -: 1415:        }
        -: 1416:    }
        -: 1417:}
        -: 1418:
function _ZN8CheckStl9sizeErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1419:void CheckStl::sizeError(const Token *tok)
        -: 1420:{
    #####: 1421:    const std::string varname = tok ? tok->str() : std::string("list");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####: 1422:    reportError(tok, Severity::performance, "stlSize",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1423:                "$symbol:" + varname + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1424:                "Possible inefficient checking for '$symbol' emptiness.\n"
        -: 1425:                "Checking for '$symbol' emptiness might be inefficient. "
        -: 1426:                "Using $symbol.empty() instead of $symbol.size() can be faster. "
        -: 1427:                "$symbol.size() can take linear time but $symbol.empty() is "
        -: 1428:                "guaranteed to take constant time.", CWE398, false);
    #####: 1429:}
        -: 1430:
function _ZN8CheckStl18redundantConditionEv called 0 returned 0% blocks executed 0%
    #####: 1431:void CheckStl::redundantCondition()
        -: 1432:{
    #####: 1433:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1434:        return;
        -: 1435:
    #####: 1436:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1437:
    #####: 1438:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1439:        if (scope.type != Scope::eIf)
branch  0 never executed
branch  1 never executed
    #####: 1440:            continue;
        -: 1441:
    #####: 1442:        const Token* tok = scope.classDef->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1443:        if (!Token::Match(tok, "%name% . find ( %any% ) != %name% . end|rend|cend|crend ( ) ) { %name% . remove|erase ( %any% ) ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1444:            continue;
        -: 1445:
        -: 1446:        // Get tokens for the fields %name% and %any%
    #####: 1447:        const Token *var1 = tok;
    #####: 1448:        const Token *any1 = var1->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1449:        const Token *var2 = any1->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1450:        const Token *var3 = var2->tokAt(7);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1451:        const Token *any2 = var3->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1452:
        -: 1453:        // Check if all the "%name%" fields are the same and if all the "%any%" are the same..
    #####: 1454:        if (var1->str() == var2->str() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1455:            var2->str() == var3->str() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1456:            any1->str() == any2->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1457:            redundantIfRemoveError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1458:        }
        -: 1459:    }
        -: 1460:}
        -: 1461:
function _ZN8CheckStl22redundantIfRemoveErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1462:void CheckStl::redundantIfRemoveError(const Token *tok)
        -: 1463:{
    #####: 1464:    reportError(tok, Severity::style, "redundantIfRemove",
call    0 never executed
        -: 1465:                "Redundant checking of STL container element existence before removing it.\n"
        -: 1466:                "Redundant checking of STL container element existence before removing it. "
        -: 1467:                "It is safe to call the remove method on a non-existing element.", CWE398, false);
    #####: 1468:}
        -: 1469:
function _ZN8CheckStl17missingComparisonEv called 0 returned 0% blocks executed 0%
    #####: 1470:void CheckStl::missingComparison()
        -: 1471:{
    #####: 1472:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1473:        return;
        -: 1474:
    #####: 1475:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1476:
    #####: 1477:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1478:        if (scope.type != Scope::eFor || !scope.classDef)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1479:            continue;
        -: 1480:
    #####: 1481:        for (const Token *tok2 = scope.classDef->tokAt(2); tok2 != scope.bodyStart; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 1482:            if (tok2->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1483:                break;
        -: 1484:
    #####: 1485:            if (!Token::Match(tok2, "%var% = %name% . begin|rbegin|cbegin|crbegin ( ) ; %name% != %name% . end|rend|cend|crend ( ) ; ++| %name% ++| ) {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1486:                continue;
        -: 1487:
        -: 1488:            // same container
    #####: 1489:            if (tok2->strAt(2) != tok2->strAt(10))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1490:                break;
        -: 1491:
    #####: 1492:            const int iteratorId(tok2->varId());
call    0 never executed
        -: 1493:
        -: 1494:            // same iterator
    #####: 1495:            if (iteratorId == tok2->tokAt(10)->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1496:                break;
        -: 1497:
        -: 1498:            // increment iterator
    #####: 1499:            if (!Token::Match(tok2->tokAt(16), "++ %varid% )", iteratorId) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1500:                !Token::Match(tok2->tokAt(16), "%varid% ++ )", iteratorId)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1501:                break;
        -: 1502:            }
        -: 1503:
    #####: 1504:            const Token *incrementToken = nullptr;
        -: 1505:
        -: 1506:            // Parse loop..
    #####: 1507:            for (const Token *tok3 = scope.bodyStart; tok3 != scope.bodyEnd; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1508:                if (Token::Match(tok3, "%varid% ++", iteratorId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1509:                    incrementToken = tok3;
    #####: 1510:                else if (Token::Match(tok3->previous(), "++ %varid% !!.", iteratorId))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1511:                    incrementToken = tok3;
    #####: 1512:                else if (Token::Match(tok3, "%varid% !=|==", iteratorId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1513:                    incrementToken = nullptr;
    #####: 1514:                else if (tok3->str() == "break" || tok3->str() == "return")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1515:                    incrementToken = nullptr;
    #####: 1516:                else if (Token::Match(tok3, "%varid% = %name% . insert ( ++| %varid% ++| ,", iteratorId)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1517:                    // skip insertion..
    #####: 1518:                    tok3 = tok3->linkAt(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1519:                    if (!tok3)
branch  0 never executed
branch  1 never executed
    #####: 1520:                        break;
        -: 1521:                }
        -: 1522:            }
    #####: 1523:            if (incrementToken)
branch  0 never executed
branch  1 never executed
    #####: 1524:                missingComparisonError(incrementToken, tok2->tokAt(16));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1525:        }
        -: 1526:    }
        -: 1527:}
        -: 1528:
function _ZN8CheckStl22missingComparisonErrorEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####: 1529:void CheckStl::missingComparisonError(const Token *incrementToken1, const Token *incrementToken2)
        -: 1530:{
    #####: 1531:    std::list<const Token*> callstack = { incrementToken1,incrementToken2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 1532:
    #####: 1533:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1534:    errmsg << "Missing bounds check for extra iterator increment in loop.\n"
    #####: 1535:           << "The iterator incrementing is suspicious - it is incremented at line ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1536:    if (incrementToken1)
branch  0 never executed
branch  1 never executed
    #####: 1537:        errmsg << incrementToken1->linenr();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1538:    errmsg << " and then at line ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1539:    if (incrementToken2)
branch  0 never executed
branch  1 never executed
    #####: 1540:        errmsg << incrementToken2->linenr();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1541:    errmsg << ". The loop might unintentionally skip an element in the container. "
        -: 1542:           << "There is no comparison between these increments to prevent that the iterator is "
    #####: 1543:           << "incremented beyond the end.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1544:
    #####: 1545:    reportError(callstack, Severity::warning, "StlMissingComparison", errmsg.str(), CWE834, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1546:}
call    0 never executed
        -: 1547:
        -: 1548:
function _ZL7isLocalPK5Token called 0 returned 0% blocks executed 0%
    #####: 1549:static bool isLocal(const Token *tok)
        -: 1550:{
    #####: 1551:    const Variable *var = tok->variable();
call    0 never executed
    #####: 1552:    return var && !var->isStatic() && var->isLocal();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1553:}
        -: 1554:
        -: 1555:namespace {
        5: 1556:    const std::set<std::string> stl_string_stream = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 80% (fallthrough)
branch 22 taken 20%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
        -: 1557:        "istringstream", "ostringstream", "stringstream", "wstringstream"
        4: 1558:    };
call    0 returned 100%
call    1 never executed
        -: 1559:}
        -: 1560:
function _ZN8CheckStl12string_c_strEv called 0 returned 0% blocks executed 0%
    #####: 1561:void CheckStl::string_c_str()
        -: 1562:{
    #####: 1563:    const bool printInconclusive = mSettings->inconclusive;
    #####: 1564:    const bool printPerformance = mSettings->isEnabled(Settings::PERFORMANCE);
call    0 never executed
        -: 1565:
    #####: 1566:    const SymbolDatabase* symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1567:
        -: 1568:    // Find all functions that take std::string as argument
    #####: 1569:    std::multimap<std::string, int> c_strFuncParam;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1570:    if (printPerformance) {
branch  0 never executed
branch  1 never executed
    #####: 1571:        for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1572:            for (const Function &func : scope.functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1573:                if (c_strFuncParam.erase(func.tokenDef->str()) != 0) { // Check if function with this name was already found
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1574:                    c_strFuncParam.insert(std::make_pair(func.tokenDef->str(), 0)); // Disable, because there are overloads. TODO: Handle overloads
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1575:                    continue;
        -: 1576:                }
        -: 1577:
    #####: 1578:                int numpar = 0;
    #####: 1579:                c_strFuncParam.insert(std::make_pair(func.tokenDef->str(), numpar)); // Insert function as dummy, to indicate that there is at least one function with that name
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1580:                for (const Variable &var : func.argumentList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1581:                    numpar++;
    #####: 1582:                    if (var.isStlStringType() && (!var.isReference() || var.isConst()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1583:                        c_strFuncParam.insert(std::make_pair(func.tokenDef->str(), numpar));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1584:                }
        -: 1585:            }
        -: 1586:        }
        -: 1587:    }
        -: 1588:
        -: 1589:    // Try to detect common problems when using string::c_str()
    #####: 1590:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1591:        if (scope.type != Scope::eFunction || !scope.function)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1592:            continue;
        -: 1593:
    #####: 1594:        enum {charPtr, stdString, stdStringConstRef, Other} returnType = Other;
    #####: 1595:        if (Token::Match(scope.function->tokenDef->tokAt(-2), "char|wchar_t *"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1596:            returnType = charPtr;
    #####: 1597:        else if (Token::Match(scope.function->tokenDef->tokAt(-5), "const std :: string|wstring &"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1598:            returnType = stdStringConstRef;
    #####: 1599:        else if (Token::Match(scope.function->tokenDef->tokAt(-3), "std :: string|wstring !!&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1600:            returnType = stdString;
        -: 1601:
    #####: 1602:        for (const Token *tok = scope.bodyStart; tok && tok != scope.bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1603:            // Invalid usage..
    #####: 1604:            if (Token::Match(tok, "throw %var% . c_str|data ( ) ;") && isLocal(tok->next()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1605:                tok->next()->variable() && tok->next()->variable()->isStlStringType()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1606:                string_c_strThrowError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1607:            } else if (Token::Match(tok, "[;{}] %name% = %var% . str ( ) . c_str|data ( ) ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1608:                const Variable* var = tok->next()->variable();
call    0 never executed
call    1 never executed
    #####: 1609:                const Variable* var2 = tok->tokAt(3)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1610:                if (var && var->isPointer() && var2 && var2->isStlType(stl_string_stream))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1611:                    string_c_strError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1612:            } else if (Token::Match(tok, "[;{}] %var% = %name% (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1613:                       Token::Match(tok->linkAt(4), ") . c_str|data ( ) ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1614:                       tok->tokAt(3)->function() && Token::Match(tok->tokAt(3)->function()->retDef, "std :: string|wstring %name%")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1615:                const Variable* var = tok->next()->variable();
call    0 never executed
call    1 never executed
    #####: 1616:                if (var && var->isPointer())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1617:                    string_c_strError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1618:            } else if (printPerformance && Token::Match(tok, "%name% ( !!)") && c_strFuncParam.find(tok->str()) != c_strFuncParam.end() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 1619:                       !Token::Match(tok->previous(), "::|.") && tok->varId() == 0 && tok->str() != scope.className) { // calling function. TODO: Add support for member functions
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1620:                const std::pair<std::multimap<std::string, int>::const_iterator, std::multimap<std::string, int>::const_iterator> range = c_strFuncParam.equal_range(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1621:                for (std::multimap<std::string, int>::const_iterator i = range.first; i != range.second; ++i) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1622:                    if (i->second == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1623:                        continue;
        -: 1624:
    #####: 1625:                    const Token* tok2 = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1626:                    int j;
    #####: 1627:                    for (j = 0; tok2 && j < i->second-1; j++)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1628:                        tok2 = tok2->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1629:                    if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 1630:                        tok2 = tok2->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1631:                    else
    #####: 1632:                        break;
    #####: 1633:                    if (!tok2 && j == i->second-1)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1634:                        tok2 = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 1635:                    else if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 1636:                        tok2 = tok2->previous();
call    0 never executed
        -: 1637:                    else
    #####: 1638:                        break;
    #####: 1639:                    if (tok2 && Token::Match(tok2->tokAt(-4), ". c_str|data ( )")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1640:                        const Variable* var = tok2->tokAt(-5)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1641:                        if (var && var->isStlStringType()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1642:                            string_c_strParam(tok, i->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1643:                        } else if (Token::Match(tok2->tokAt(-9), "%name% . str ( )")) { // Check ss.str().c_str() as parameter
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1644:                            const Variable* ssVar = tok2->tokAt(-9)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1645:                            if (ssVar && ssVar->isStlType(stl_string_stream))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1646:                                string_c_strParam(tok, i->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1647:                        }
        -: 1648:
        -: 1649:                    }
        -: 1650:                }
        -: 1651:            }
        -: 1652:
        -: 1653:            // Using c_str() to get the return value is only dangerous if the function returns a char*
    #####: 1654:            if ((returnType == charPtr || (printPerformance && (returnType == stdString || returnType == stdStringConstRef))) && tok->str() == "return") {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1655:                bool err = false;
        -: 1656:
    #####: 1657:                const Token* tok2 = tok->next();
call    0 never executed
    #####: 1658:                if (Token::Match(tok2, "std :: string|wstring (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1659:                    Token::Match(tok2->linkAt(3), ") . c_str|data ( ) ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1660:                    err = true;
    #####: 1661:                } else if (Token::simpleMatch(tok2, "(") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1662:                           Token::Match(tok2->link(), ") . c_str|data ( ) ;")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1663:                    // Check for "+ localvar" or "+ std::string(" inside the bracket
    #####: 1664:                    bool is_implicit_std_string = printInconclusive;
    #####: 1665:                    const Token *search_end = tok2->link();
call    0 never executed
    #####: 1666:                    for (const Token *search_tok = tok2->next(); search_tok != search_end; search_tok = search_tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1667:                        if (Token::Match(search_tok, "+ %var%") && isLocal(search_tok->next()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1668:                            search_tok->next()->variable() && search_tok->next()->variable()->isStlStringType()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1669:                            is_implicit_std_string = true;
    #####: 1670:                            break;
    #####: 1671:                        } else if (Token::Match(search_tok, "+ std :: string|wstring (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1672:                            is_implicit_std_string = true;
    #####: 1673:                            break;
        -: 1674:                        }
        -: 1675:                    }
        -: 1676:
    #####: 1677:                    if (is_implicit_std_string)
branch  0 never executed
branch  1 never executed
    #####: 1678:                        err = true;
        -: 1679:                }
        -: 1680:
    #####: 1681:                bool local = false;
    #####: 1682:                bool ptrOrRef = false;
    #####: 1683:                const Variable* lastVar = nullptr;
    #####: 1684:                const Function* lastFunc = nullptr;
    #####: 1685:                bool funcStr = false;
    #####: 1686:                if (Token::Match(tok2, "%var% .")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1687:                    local = isLocal(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1688:                    bool refToNonLocal = false;
    #####: 1689:                    if (tok2->variable() && tok2->variable()->isReference()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1690:                        const Token *refTok = tok2->variable()->nameToken();
call    0 never executed
call    1 never executed
    #####: 1691:                        refToNonLocal = true; // safe assumption is default to avoid FPs
    #####: 1692:                        if (Token::Match(refTok, "%var% = %var% .|;|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1693:                            refToNonLocal = !isLocal(refTok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1694:                    }
    #####: 1695:                    ptrOrRef = refToNonLocal || (tok2->variable() && tok2->variable()->isPointer());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1696:                }
    #####: 1697:                while (tok2) {
branch  0 never executed
branch  1 never executed
    #####: 1698:                    if (Token::Match(tok2, "%var% .|::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1699:                        if (ptrOrRef)
branch  0 never executed
branch  1 never executed
    #####: 1700:                            local = false;
    #####: 1701:                        lastVar = tok2->variable();
call    0 never executed
    #####: 1702:                        tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1703:                    } else if (Token::Match(tok2, "%name% (") && Token::simpleMatch(tok2->linkAt(1), ") .")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1704:                        lastFunc = tok2->function();
call    0 never executed
    #####: 1705:                        local = false;
    #####: 1706:                        funcStr = tok2->str() == "str";
call    0 never executed
call    1 never executed
    #####: 1707:                        tok2 = tok2->linkAt(1)->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1708:                    } else
    #####: 1709:                        break;
        -: 1710:                }
        -: 1711:
    #####: 1712:                if (Token::Match(tok2, "c_str|data ( ) ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1713:                    if ((local || returnType != charPtr) && lastVar && lastVar->isStlStringType())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1714:                        err = true;
    #####: 1715:                    else if (funcStr && lastVar && lastVar->isStlType(stl_string_stream))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1716:                        err = true;
    #####: 1717:                    else if (lastFunc && Token::Match(lastFunc->tokenDef->tokAt(-3), "std :: string|wstring"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1718:                        err = true;
        -: 1719:                }
        -: 1720:
    #####: 1721:                if (err) {
branch  0 never executed
branch  1 never executed
    #####: 1722:                    if (returnType == charPtr)
branch  0 never executed
branch  1 never executed
    #####: 1723:                        string_c_strError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1724:                    else
    #####: 1725:                        string_c_strReturn(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1726:                }
        -: 1727:            }
        -: 1728:        }
        -: 1729:    }
    #####: 1730:}
        -: 1731:
function _ZN8CheckStl22string_c_strThrowErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1732:void CheckStl::string_c_strThrowError(const Token* tok)
        -: 1733:{
    #####: 1734:    reportError(tok, Severity::error, "stlcstrthrow", "Dangerous usage of c_str(). The value returned by c_str() is invalid after throwing exception.\n"
call    0 never executed
        -: 1735:                "Dangerous usage of c_str(). The string is destroyed after the c_str() call so the thrown pointer is invalid.");
    #####: 1736:}
        -: 1737:
function _ZN8CheckStl17string_c_strErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1738:void CheckStl::string_c_strError(const Token* tok)
        -: 1739:{
    #####: 1740:    reportError(tok, Severity::error, "stlcstr", "Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.\n"
call    0 never executed
        -: 1741:                "Dangerous usage of c_str(). The c_str() return value is only valid until its string is deleted.", CWE664, false);
    #####: 1742:}
        -: 1743:
function _ZN8CheckStl18string_c_strReturnEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1744:void CheckStl::string_c_strReturn(const Token* tok)
        -: 1745:{
    #####: 1746:    reportError(tok, Severity::performance, "stlcstrReturn", "Returning the result of c_str() in a function that returns std::string is slow and redundant.\n"
call    0 never executed
        -: 1747:                "The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly returning the string.", CWE704, false);
    #####: 1748:}
        -: 1749:
function _ZN8CheckStl17string_c_strParamEPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 1750:void CheckStl::string_c_strParam(const Token* tok, nonneg int number)
        -: 1751:{
    #####: 1752:    std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1753:    oss << "Passing the result of c_str() to a function that takes std::string as argument no. " << number << " is slow and redundant.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1754:        "The conversion from const char* as returned by c_str() to std::string creates an unnecessary string copy. Solve that by directly passing the string.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1755:    reportError(tok, Severity::performance, "stlcstrParam", oss.str(), CWE704, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1756:}
        -: 1757:
        -: 1758://---------------------------------------------------------------------------
        -: 1759://
        -: 1760://---------------------------------------------------------------------------
        -: 1761:
        -: 1762:namespace {
       15: 1763:    const std::set<std::string> stl_containers_with_empty_and_clear = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
branch 61 taken 93% (fallthrough)
branch 62 taken 7%
call   63 returned 100%
call   64 returned 100%
call   65 returned 100%
call   66 returned 100%
call   67 returned 100%
call   68 returned 100%
call   69 returned 100%
call   70 returned 100%
call   71 returned 100%
call   72 returned 100%
call   73 returned 100%
call   74 returned 100%
call   75 returned 100%
call   76 returned 100%
call   77 returned 100%
call   78 never executed
branch 79 never executed
branch 80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
call   85 never executed
call   86 never executed
call   87 never executed
call   88 never executed
call   89 never executed
call   90 never executed
call   91 never executed
call   92 never executed
call   93 never executed
call   94 never executed
        -: 1764:        "deque",  "forward_list",  "list",
        -: 1765:        "map",  "multimap",  "multiset",  "set",  "string",
        -: 1766:        "unordered_map",  "unordered_multimap",  "unordered_multiset",
        -: 1767:        "unordered_set",  "vector",  "wstring"
       14: 1768:    };
call    0 returned 100%
call    1 never executed
        -: 1769:
        -: 1770:}
        -: 1771:
function _ZN8CheckStl12uselessCallsEv called 0 returned 0% blocks executed 0%
    #####: 1772:void CheckStl::uselessCalls()
        -: 1773:{
    #####: 1774:    const bool printPerformance = mSettings->isEnabled(Settings::PERFORMANCE);
call    0 never executed
    #####: 1775:    const bool printWarning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 1776:    if (!printPerformance && !printWarning)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1777:        return;
        -: 1778:
    #####: 1779:    const SymbolDatabase* symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1780:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1781:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1782:            if (printWarning && Token::Match(tok, "%var% . compare|find|rfind|find_first_not_of|find_first_of|find_last_not_of|find_last_of ( %name% [,)]") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1783:                tok->varId() == tok->tokAt(4)->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1784:                const Variable* var = tok->variable();
call    0 never executed
    #####: 1785:                if (!var || !var->isStlType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1786:                    continue;
    #####: 1787:                uselessCallsReturnValueError(tok->tokAt(4), tok->str(), tok->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1788:            } else if (printPerformance && Token::Match(tok, "%var% . swap ( %name% )") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1789:                       tok->varId() == tok->tokAt(4)->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1790:                const Variable* var = tok->variable();
call    0 never executed
    #####: 1791:                if (!var || !var->isStlType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1792:                    continue;
    #####: 1793:                uselessCallsSwapError(tok, tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1794:            } else if (printPerformance && Token::Match(tok, "%var% . substr (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1795:                       tok->variable() && tok->variable()->isStlStringType()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1796:                if (Token::Match(tok->tokAt(4), "0| )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1797:                    uselessCallsSubstrError(tok, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1798:                } else if (tok->strAt(4) == "0" && tok->linkAt(3)->strAt(-1) == "npos") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1799:                    if (!tok->linkAt(3)->previous()->variable()) // Make sure that its no variable
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1800:                        uselessCallsSubstrError(tok, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1801:                } else if (Token::simpleMatch(tok->linkAt(3)->tokAt(-2), ", 0 )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1802:                    uselessCallsSubstrError(tok, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1803:            } else if (printWarning && Token::Match(tok, "[{};] %var% . empty ( ) ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1804:                       !tok->tokAt(4)->astParent() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1805:                       tok->next()->variable() && tok->next()->variable()->isStlType(stl_containers_with_empty_and_clear))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1806:                uselessCallsEmptyError(tok->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1807:            else if (Token::Match(tok, "[{};] std :: remove|remove_if|unique (") && tok->tokAt(5)->nextArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1808:                uselessCallsRemoveError(tok->next(), tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1809:        }
        -: 1810:    }
        -: 1811:}
        -: 1812:
        -: 1813:
function _ZN8CheckStl28uselessCallsReturnValueErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####: 1814:void CheckStl::uselessCallsReturnValueError(const Token *tok, const std::string &varname, const std::string &function)
        -: 1815:{
    #####: 1816:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1817:    errmsg << "$symbol:" << varname << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1818:    errmsg << "$symbol:" << function << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1819:    errmsg << "It is inefficient to call '" << varname << "." << function << "(" << varname << ")' as it always returns 0.\n"
        -: 1820:           << "'std::string::" << function << "()' returns zero when given itself as parameter "
        -: 1821:           << "(" << varname << "." << function << "(" << varname << ")). As it is currently the "
        -: 1822:           << "code is inefficient. It is possible either the string searched ('"
    #####: 1823:           << varname << "') or searched for ('" << varname << "') is wrong.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
branch 61 never executed
branch 62 never executed
call   63 never executed
branch 64 never executed
branch 65 never executed
    #####: 1824:    reportError(tok, Severity::warning, "uselessCallsCompare", errmsg.str(), CWE628, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1825:}
        -: 1826:
function _ZN8CheckStl21uselessCallsSwapErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1827:void CheckStl::uselessCallsSwapError(const Token *tok, const std::string &varname)
        -: 1828:{
    #####: 1829:    reportError(tok, Severity::performance, "uselessCallsSwap",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1830:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1831:                "It is inefficient to swap a object with itself by calling '$symbol.swap($symbol)'\n"
        -: 1832:                "The 'swap()' function has no logical effect when given itself as parameter "
        -: 1833:                "($symbol.swap($symbol)). As it is currently the "
        -: 1834:                "code is inefficient. Is the object or the parameter wrong here?", CWE628, false);
    #####: 1835:}
        -: 1836:
function _ZN8CheckStl23uselessCallsSubstrErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####: 1837:void CheckStl::uselessCallsSubstrError(const Token *tok, bool empty)
        -: 1838:{
    #####: 1839:    if (empty)
branch  0 never executed
branch  1 never executed
    #####: 1840:        reportError(tok, Severity::performance, "uselessCallsSubstr", "Ineffective call of function 'substr' because it returns an empty string.", CWE398, false);
call    0 never executed
        -: 1841:    else
    #####: 1842:        reportError(tok, Severity::performance, "uselessCallsSubstr", "Ineffective call of function 'substr' because it returns a copy of the object. Use operator= instead.", CWE398, false);
call    0 never executed
    #####: 1843:}
        -: 1844:
function _ZN8CheckStl22uselessCallsEmptyErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1845:void CheckStl::uselessCallsEmptyError(const Token *tok)
        -: 1846:{
    #####: 1847:    reportError(tok, Severity::warning, "uselessCallsEmpty", "Ineffective call of function 'empty()'. Did you intend to call 'clear()' instead?", CWE398, false);
call    0 never executed
    #####: 1848:}
        -: 1849:
function _ZN8CheckStl23uselessCallsRemoveErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1850:void CheckStl::uselessCallsRemoveError(const Token *tok, const std::string& function)
        -: 1851:{
    #####: 1852:    reportError(tok, Severity::warning, "uselessCallsRemove",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1853:                "$symbol:" + function + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1854:                "Return value of std::$symbol() ignored. Elements remain in container.\n"
        -: 1855:                "The return value of std::$symbol() is ignored. This function returns an iterator to the end of the range containing those elements that should be kept. "
        -: 1856:                "Elements past new end remain valid but with unspecified values. Use the erase method of the container to delete them.", CWE762, false);
    #####: 1857:}
        -: 1858:
        -: 1859:// Check for iterators being dereferenced before being checked for validity.
        -: 1860:// E.g.  if (*i && i != str.end()) { }
function _ZN8CheckStl31checkDereferenceInvalidIteratorEv called 0 returned 0% blocks executed 0%
    #####: 1861:void CheckStl::checkDereferenceInvalidIterator()
        -: 1862:{
    #####: 1863:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1864:        return;
        -: 1865:
        -: 1866:    // Iterate over "if", "while", and "for" conditions where there may
        -: 1867:    // be an iterator that is dereferenced before being checked for validity.
    #####: 1868:    for (const Scope &scope : mTokenizer->getSymbolDatabase()->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1869:        if (!(scope.type == Scope::eIf || scope.type == Scope::eDo || scope.type == Scope::eWhile || scope.type == Scope::eFor))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1870:            continue;
        -: 1871:
    #####: 1872:        const Token* const tok = scope.classDef;
    #####: 1873:        const Token* startOfCondition = tok->next();
call    0 never executed
    #####: 1874:        if (scope.type == Scope::eDo)
branch  0 never executed
branch  1 never executed
    #####: 1875:            startOfCondition = startOfCondition->link()->tokAt(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1876:        if (!startOfCondition) // ticket #6626 invalid code
branch  0 never executed
branch  1 never executed
    #####: 1877:            continue;
    #####: 1878:        const Token* endOfCondition = startOfCondition->link();
call    0 never executed
    #####: 1879:        if (!endOfCondition)
branch  0 never executed
branch  1 never executed
    #####: 1880:            continue;
        -: 1881:
        -: 1882:        // For "for" loops, only search between the two semicolons
    #####: 1883:        if (scope.type == Scope::eFor) {
branch  0 never executed
branch  1 never executed
    #####: 1884:            startOfCondition = Token::findsimplematch(tok->tokAt(2), ";", endOfCondition);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1885:            if (!startOfCondition)
branch  0 never executed
branch  1 never executed
    #####: 1886:                continue;
    #####: 1887:            endOfCondition = Token::findsimplematch(startOfCondition->next(), ";", endOfCondition);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1888:            if (!endOfCondition)
branch  0 never executed
branch  1 never executed
    #####: 1889:                continue;
        -: 1890:        }
        -: 1891:
        -: 1892:        // Only consider conditions composed of all "&&" terms and
        -: 1893:        // conditions composed of all "||" terms
        -: 1894:        const bool isOrExpression =
    #####: 1895:            Token::findsimplematch(startOfCondition, "||", endOfCondition) != nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1896:        const bool isAndExpression =
    #####: 1897:            Token::findsimplematch(startOfCondition, "&&", endOfCondition) != nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1898:
        -: 1899:        // Look for a check of the validity of an iterator
    #####: 1900:        const Token* validityCheckTok = nullptr;
    #####: 1901:        if (!isOrExpression && isAndExpression) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1902:            validityCheckTok =
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1903:                Token::findmatch(startOfCondition, "&& %var% != %name% . end|rend|cend|crend ( )", endOfCondition);
    #####: 1904:        } else if (isOrExpression && !isAndExpression) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1905:            validityCheckTok =
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1906:                Token::findmatch(startOfCondition, "%oror% %var% == %name% . end|rend|cend|crend ( )", endOfCondition);
        -: 1907:        }
        -: 1908:
    #####: 1909:        if (!validityCheckTok)
branch  0 never executed
branch  1 never executed
    #####: 1910:            continue;
    #####: 1911:        const int iteratorVarId = validityCheckTok->next()->varId();
call    0 never executed
call    1 never executed
        -: 1912:
        -: 1913:        // If the iterator dereference is to the left of the check for
        -: 1914:        // the iterator's validity, report an error.
        -: 1915:        const Token* const dereferenceTok =
    #####: 1916:            Token::findmatch(startOfCondition, "* %varid%", validityCheckTok, iteratorVarId);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1917:        if (dereferenceTok)
branch  0 never executed
branch  1 never executed
    #####: 1918:            dereferenceInvalidIteratorError(dereferenceTok, dereferenceTok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1919:    }
        -: 1920:}
        -: 1921:
function _ZN8CheckStl31dereferenceInvalidIteratorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1922:void CheckStl::dereferenceInvalidIteratorError(const Token* deref, const std::string &iterName)
        -: 1923:{
    #####: 1924:    reportError(deref, Severity::warning,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1925:                "derefInvalidIterator",
    #####: 1926:                "$symbol:" + iterName + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1927:                "Possible dereference of an invalid iterator: $symbol\n"
        -: 1928:                "Possible dereference of an invalid iterator: $symbol. Make sure to check that the iterator is valid before dereferencing it - not after.", CWE825, false);
    #####: 1929:}
        -: 1930:
        -: 1931:
function _ZN8CheckStl25readingEmptyStlContainer2Ev called 0 returned 0% blocks executed 0%
    #####: 1932:void CheckStl::readingEmptyStlContainer2()
        -: 1933:{
    #####: 1934:    for (const Scope *function : mTokenizer->getSymbolDatabase()->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1935:        for (const Token *tok = function->bodyStart; tok != function->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1936:            if (!tok->isName() || !tok->valueType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1937:                continue;
    #####: 1938:            const Library::Container *container = tok->valueType()->container;
call    0 never executed
    #####: 1939:            if (!container)
branch  0 never executed
branch  1 never executed
    #####: 1940:                continue;
    #####: 1941:            const ValueFlow::Value *value = tok->getContainerSizeValue(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1942:            if (!value)
branch  0 never executed
branch  1 never executed
    #####: 1943:                continue;
    #####: 1944:            if (value->isInconclusive() && !mSettings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1945:                continue;
    #####: 1946:            if (!value->errorSeverity() && !mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1947:                continue;
    #####: 1948:            if (Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1949:                if (container->getYield(tok->strAt(2)) == Library::Container::Yield::ITEM)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1950:                    readingEmptyStlContainerError(tok,value);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1951:            }
        -: 1952:        }
        -: 1953:    }
    #####: 1954:}
        -: 1955:
function _ZN8CheckStl29readingEmptyStlContainerErrorEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 1956:void CheckStl::readingEmptyStlContainerError(const Token *tok, const ValueFlow::Value *value)
        -: 1957:{
    #####: 1958:    const std::string varname = tok ? tok->str() : std::string("var");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
        -: 1959:
    #####: 1960:    std::string errmsg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1961:    if (value && value->condition)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1962:        errmsg = "Reading from container '$symbol'. " + ValueFlow::eitherTheConditionIsRedundant(value->condition) + " or '$symbol' can be empty.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 1963:    else
    #####: 1964:        errmsg = "Reading from empty STL container '$symbol'";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1965:
    #####: 1966:    const ErrorPath errorPath = getErrorPath(tok, value, "Reading from empty container");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1967:
    #####: 1968:    reportError(errorPath, value ? (value->errorSeverity() ? Severity::error : Severity::warning) : Severity::style, "reademptycontainer", "$symbol:" + varname +"\n" + errmsg, CWE398, !value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####: 1969:}
        -: 1970:
function _ZN8CheckStl20useStlAlgorithmErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1971:void CheckStl::useStlAlgorithmError(const Token *tok, const std::string &algoName)
        -: 1972:{
    #####: 1973:    reportError(tok, Severity::style, "useStlAlgorithm",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1974:                "Consider using " + algoName + " algorithm instead of a raw loop.", CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1975:}
        -: 1976:
function _ZL11isEarlyExitPK5Token called 0 returned 0% blocks executed 0%
    #####: 1977:static bool isEarlyExit(const Token *start)
        -: 1978:{
    #####: 1979:    if (start->str() != "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1980:        return false;
    #####: 1981:    const Token *endToken = start->link();
call    0 never executed
    #####: 1982:    const Token *tok = Token::findmatch(start, "return|throw|break", endToken);
call    0 never executed
    #####: 1983:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1984:        return false;
    #####: 1985:    const Token *endStatement = Token::findsimplematch(tok, "; }", endToken);
call    0 never executed
    #####: 1986:    if (!endStatement)
branch  0 never executed
branch  1 never executed
    #####: 1987:        return false;
    #####: 1988:    if (endStatement->next() != endToken)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1989:        return false;
    #####: 1990:    return true;
        -: 1991:}
        -: 1992:
function _ZL15singleStatementPK5Token called 0 returned 0% blocks executed 0%
    #####: 1993:static const Token *singleStatement(const Token *start)
        -: 1994:{
    #####: 1995:    if (start->str() != "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1996:        return nullptr;
    #####: 1997:    const Token *endToken = start->link();
call    0 never executed
    #####: 1998:    const Token *endStatement = Token::findsimplematch(start->next(), ";");
call    0 never executed
call    1 never executed
    #####: 1999:    if (!Token::simpleMatch(endStatement, "; }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2000:        return nullptr;
    #####: 2001:    if (endStatement->next() != endToken)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2002:        return nullptr;
    #####: 2003:    return endStatement;
        -: 2004:}
        -: 2005:
function _ZL19singleAssignInScopePK5TokeniRb called 0 returned 0% blocks executed 0%
    #####: 2006:static const Token *singleAssignInScope(const Token *start, nonneg int varid, bool &input)
        -: 2007:{
    #####: 2008:    const Token *endStatement = singleStatement(start);
call    0 never executed
    #####: 2009:    if (!endStatement)
branch  0 never executed
branch  1 never executed
    #####: 2010:        return nullptr;
    #####: 2011:    if (!Token::Match(start->next(), "%var% %assign%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2012:        return nullptr;
    #####: 2013:    const Token *assignTok = start->tokAt(2);
call    0 never executed
    #####: 2014:    if (isVariableChanged(assignTok->next(), endStatement, assignTok->astOperand1()->varId(), false, nullptr, true))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2015:        return nullptr;
    #####: 2016:    if (isVariableChanged(assignTok->next(), endStatement, varid, false, nullptr, true))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2017:        return nullptr;
    #####: 2018:    input = Token::findmatch(assignTok->next(), "%varid%", endStatement, varid) || !Token::Match(start->next(), "%var% =");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2019:    return assignTok;
        -: 2020:}
        -: 2021:
function _ZL23singleMemberCallInScopePK5TokeniRb called 0 returned 0% blocks executed 0%
    #####: 2022:static const Token *singleMemberCallInScope(const Token *start, nonneg int varid, bool &input)
        -: 2023:{
    #####: 2024:    if (start->str() != "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2025:        return nullptr;
    #####: 2026:    const Token *endToken = start->link();
call    0 never executed
    #####: 2027:    if (!Token::Match(start->next(), "%var% . %name% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2028:        return nullptr;
    #####: 2029:    if (!Token::simpleMatch(start->linkAt(4), ") ; }"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2030:        return nullptr;
    #####: 2031:    const Token *endStatement = start->linkAt(4)->next();
call    0 never executed
call    1 never executed
    #####: 2032:    if (endStatement->next() != endToken)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2033:        return nullptr;
        -: 2034:
    #####: 2035:    const Token *dotTok = start->tokAt(2);
call    0 never executed
    #####: 2036:    if (!Token::findmatch(dotTok->tokAt(2), "%varid%", endStatement, varid))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2037:        return nullptr;
    #####: 2038:    input = Token::Match(start->next(), "%var% . %name% ( %varid% )", varid);
call    0 never executed
call    1 never executed
    #####: 2039:    if (isVariableChanged(dotTok->next(), endStatement, dotTok->astOperand1()->varId(), false, nullptr, true))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2040:        return nullptr;
    #####: 2041:    return dotTok;
        -: 2042:}
        -: 2043:
function _ZL22singleIncrementInScopePK5TokeniRb called 0 returned 0% blocks executed 0%
    #####: 2044:static const Token *singleIncrementInScope(const Token *start, nonneg int varid, bool &input)
        -: 2045:{
    #####: 2046:    if (start->str() != "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2047:        return nullptr;
    #####: 2048:    const Token *varTok = nullptr;
    #####: 2049:    if (Token::Match(start->next(), "++ %var% ; }"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2050:        varTok = start->tokAt(2);
call    0 never executed
    #####: 2051:    else if (Token::Match(start->next(), "%var% ++ ; }"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2052:        varTok = start->tokAt(1);
call    0 never executed
    #####: 2053:    if (!varTok)
branch  0 never executed
branch  1 never executed
    #####: 2054:        return nullptr;
    #####: 2055:    input = varTok->varId() == varid;
call    0 never executed
    #####: 2056:    return varTok;
        -: 2057:}
        -: 2058:
function _ZL24singleConditionalInScopePK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 2059:static const Token *singleConditionalInScope(const Token *start, nonneg int varid)
        -: 2060:{
    #####: 2061:    if (start->str() != "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2062:        return nullptr;
    #####: 2063:    const Token *endToken = start->link();
call    0 never executed
    #####: 2064:    if (!Token::simpleMatch(start->next(), "if ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2065:        return nullptr;
    #####: 2066:    if (!Token::simpleMatch(start->linkAt(2), ") {"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2067:        return nullptr;
    #####: 2068:    const Token *bodyTok = start->linkAt(2)->next();
call    0 never executed
call    1 never executed
    #####: 2069:    const Token *endBodyTok = bodyTok->link();
call    0 never executed
    #####: 2070:    if (!Token::simpleMatch(endBodyTok, "} }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2071:        return nullptr;
    #####: 2072:    if (endBodyTok->next() != endToken)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2073:        return nullptr;
    #####: 2074:    if (!Token::findmatch(start, "%varid%", bodyTok, varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2075:        return nullptr;
    #####: 2076:    if (isVariableChanged(start, bodyTok, varid, false, nullptr, true))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2077:        return nullptr;
    #####: 2078:    return bodyTok;
        -: 2079:}
        -: 2080:
function _ZL8addByOnePK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 2081:static bool addByOne(const Token *tok, nonneg int varid)
        -: 2082:{
    #####: 2083:    if (Token::Match(tok, "+= %any% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2084:        tok->tokAt(1)->hasKnownIntValue() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2085:        tok->tokAt(1)->getValue(1)) {
call    0 never executed
call    1 never executed
    #####: 2086:        return true;
        -: 2087:    }
    #####: 2088:    if (Token::Match(tok, "= %varid% + %any% ;", varid) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2089:        tok->tokAt(3)->hasKnownIntValue() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2090:        tok->tokAt(3)->getValue(1)) {
call    0 never executed
call    1 never executed
    #####: 2091:        return true;
        -: 2092:    }
    #####: 2093:    return false;
        -: 2094:}
        -: 2095:
function _ZL21accumulateBoolLiteralPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 2096:static bool accumulateBoolLiteral(const Token *tok, nonneg int varid)
        -: 2097:{
    #####: 2098:    if (Token::Match(tok, "%assign% %bool% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2099:        tok->tokAt(1)->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
    #####: 2100:        return true;
        -: 2101:    }
    #####: 2102:    if (Token::Match(tok, "= %varid% %oror%|%or%|&&|& %bool% ;", varid) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2103:        tok->tokAt(3)->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
    #####: 2104:        return true;
        -: 2105:    }
    #####: 2106:    return false;
        -: 2107:}
        -: 2108:
function _ZL14accumulateBoolPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 2109:static bool accumulateBool(const Token *tok, nonneg int varid)
        -: 2110:{
        -: 2111:    // Missing %oreq% so we have to check both manually
    #####: 2112:    if (Token::simpleMatch(tok, "&=") || Token::simpleMatch(tok, "|=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2113:        return true;
        -: 2114:    }
    #####: 2115:    if (Token::Match(tok, "= %varid% %oror%|%or%|&&|&", varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2116:        return true;
        -: 2117:    }
    #####: 2118:    return false;
        -: 2119:}
        -: 2120:
function _ZL9hasVarIdsPK5Tokenii called 0 returned 0% blocks executed 0%
    #####: 2121:static bool hasVarIds(const Token *tok, nonneg int var1, nonneg int var2)
        -: 2122:{
    #####: 2123:    if (tok->astOperand1()->varId() == tok->astOperand2()->varId())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2124:        return false;
    #####: 2125:    if (tok->astOperand1()->varId() == var1 || tok->astOperand1()->varId() == var2) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2126:        if (tok->astOperand2()->varId() == var1 || tok->astOperand2()->varId() == var2) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2127:            return true;
        -: 2128:        }
        -: 2129:    }
    #####: 2130:    return false;
        -: 2131:}
        -: 2132:
function _ZL10flipMinMaxRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2133:static std::string flipMinMax(const std::string &algo)
        -: 2134:{
    #####: 2135:    if (algo == "std::max_element")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2136:        return "std::min_element";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2137:    if (algo == "std::min_element")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2138:        return "std::max_element";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2139:    return algo;
call    0 never executed
        -: 2140:}
        -: 2141:
function _ZL13minmaxComparePK5Tokeniib called 0 returned 0% blocks executed 0%
    #####: 2142:static std::string minmaxCompare(const Token *condTok, nonneg int loopVar, nonneg int assignVar, bool invert = false)
        -: 2143:{
    #####: 2144:    if (!Token::Match(condTok, "<|<=|>=|>"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2145:        return "std::accumulate";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2146:    if (!hasVarIds(condTok, loopVar, assignVar))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2147:        return "std::accumulate";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2148:    std::string algo = "std::max_element";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2149:    if (Token::Match(condTok, "<|<="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2150:        algo = "std::min_element";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2151:    if (condTok->astOperand1()->varId() == assignVar)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2152:        algo = flipMinMax(algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2153:    if (invert)
branch  0 never executed
branch  1 never executed
    #####: 2154:        algo = flipMinMax(algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2155:    return algo;
call    0 never executed
        -: 2156:}
        -: 2157:
function _ZN8CheckStl15useStlAlgorithmEv called 0 returned 0% blocks executed 0%
    #####: 2158:void CheckStl::useStlAlgorithm()
        -: 2159:{
    #####: 2160:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2161:        return;
    #####: 2162:    for (const Scope *function : mTokenizer->getSymbolDatabase()->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2163:        for (const Token *tok = function->bodyStart; tok != function->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2164:            // Parse range-based for loop
    #####: 2165:            if (!Token::simpleMatch(tok, "for ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2166:                continue;
    #####: 2167:            if (!Token::simpleMatch(tok->next()->link(), ") {"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2168:                continue;
    #####: 2169:            const Token *bodyTok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2170:            const Token *splitTok = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 2171:            if (!Token::simpleMatch(splitTok, ":"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2172:                continue;
    #####: 2173:            const Token *loopVar = splitTok->previous();
call    0 never executed
    #####: 2174:            if (!Token::Match(loopVar, "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2175:                continue;
        -: 2176:
        -: 2177:            // Check for single assignment
        -: 2178:            bool useLoopVarInAssign;
    #####: 2179:            const Token *assignTok = singleAssignInScope(bodyTok, loopVar->varId(), useLoopVarInAssign);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2180:            if (assignTok) {
branch  0 never executed
branch  1 never executed
    #####: 2181:                int assignVarId = assignTok->astOperand1()->varId();
call    0 never executed
call    1 never executed
    #####: 2182:                std::string algo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2183:                if (assignVarId == loopVar->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2184:                    if (useLoopVarInAssign)
branch  0 never executed
branch  1 never executed
    #####: 2185:                        algo = "std::transform";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2186:                    else if (Token::Match(assignTok->next(), "%var%|%bool%|%num%|%char% ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2187:                        algo = "std::fill";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2188:                    else if (Token::Match(assignTok->next(), "%name% ( )"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2189:                        algo = "std::generate";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2190:                    else
    #####: 2191:                        algo = "std::fill or std::generate";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2192:                } else {
    #####: 2193:                    if (addByOne(assignTok, assignVarId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2194:                        algo = "std::distance";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2195:                    else if (accumulateBool(assignTok, assignVarId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2196:                        algo = "std::any_of, std::all_of, std::none_of, or std::accumulate";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2197:                    else if (Token::Match(assignTok, "= %var% <|<=|>=|> %var% ? %var% : %var%") && hasVarIds(assignTok->tokAt(6), loopVar->varId(), assignVarId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2198:                        algo = minmaxCompare(assignTok->tokAt(2), loopVar->varId(), assignVarId, assignTok->tokAt(5)->varId() == assignVarId);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
        -: 2199:                    else
    #####: 2200:                        algo = "std::accumulate";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2201:                }
    #####: 2202:                useStlAlgorithmError(assignTok, algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2203:                continue;
        -: 2204:            }
        -: 2205:            // Check for container calls
        -: 2206:            bool useLoopVarInMemCall;
    #####: 2207:            const Token *memberAccessTok = singleMemberCallInScope(bodyTok, loopVar->varId(), useLoopVarInMemCall);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2208:            if (memberAccessTok) {
branch  0 never executed
branch  1 never executed
    #####: 2209:                const Token *memberCallTok = memberAccessTok->astOperand2();
call    0 never executed
    #####: 2210:                const int contVarId = memberAccessTok->astOperand1()->varId();
call    0 never executed
call    1 never executed
    #####: 2211:                if (contVarId == loopVar->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2212:                    continue;
    #####: 2213:                if (memberCallTok->str() == "push_back" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2214:                    memberCallTok->str() == "push_front" ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2215:                    memberCallTok->str() == "emplace_back") {
call    0 never executed
call    1 never executed
    #####: 2216:                    std::string algo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2217:                    if (useLoopVarInMemCall)
branch  0 never executed
branch  1 never executed
    #####: 2218:                        algo = "std::copy";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2219:                    else
    #####: 2220:                        algo = "std::transform";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2221:                    useStlAlgorithmError(memberCallTok, algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2222:                }
    #####: 2223:                continue;
        -: 2224:            }
        -: 2225:
        -: 2226:            // Check for increment in loop
        -: 2227:            bool useLoopVarInIncrement;
    #####: 2228:            const Token *incrementTok = singleIncrementInScope(bodyTok, loopVar->varId(), useLoopVarInIncrement);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2229:            if (incrementTok) {
branch  0 never executed
branch  1 never executed
    #####: 2230:                std::string algo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2231:                if (useLoopVarInIncrement)
branch  0 never executed
branch  1 never executed
    #####: 2232:                    algo = "std::transform";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2233:                else
    #####: 2234:                    algo = "std::distance";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2235:                useStlAlgorithmError(incrementTok, algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2236:                continue;
        -: 2237:            }
        -: 2238:
        -: 2239:            // Check for conditionals
    #####: 2240:            const Token *condBodyTok = singleConditionalInScope(bodyTok, loopVar->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2241:            if (condBodyTok) {
branch  0 never executed
branch  1 never executed
        -: 2242:                // Check for single assign
    #####: 2243:                assignTok = singleAssignInScope(condBodyTok, loopVar->varId(), useLoopVarInAssign);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2244:                if (assignTok) {
branch  0 never executed
branch  1 never executed
    #####: 2245:                    const int assignVarId = assignTok->astOperand1()->varId();
call    0 never executed
call    1 never executed
    #####: 2246:                    std::string algo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2247:                    if (assignVarId == loopVar->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2248:                        if (useLoopVarInAssign)
branch  0 never executed
branch  1 never executed
    #####: 2249:                            algo = "std::transform";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2250:                        else
    #####: 2251:                            algo = "std::replace_if";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2252:                    } else {
    #####: 2253:                        if (addByOne(assignTok, assignVarId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2254:                            algo = "std::count_if";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2255:                        else if (accumulateBoolLiteral(assignTok, assignVarId))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2256:                            algo = "std::any_of, std::all_of, std::none_of, or std::accumulate";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2257:                        else
    #####: 2258:                            algo = "std::accumulate";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2259:                    }
    #####: 2260:                    useStlAlgorithmError(assignTok, algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2261:                    continue;
        -: 2262:                }
        -: 2263:
        -: 2264:                // Check for container call
    #####: 2265:                memberAccessTok = singleMemberCallInScope(condBodyTok, loopVar->varId(), useLoopVarInMemCall);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2266:                if (memberAccessTok) {
branch  0 never executed
branch  1 never executed
    #####: 2267:                    const Token *memberCallTok = memberAccessTok->astOperand2();
call    0 never executed
    #####: 2268:                    const int contVarId = memberAccessTok->astOperand1()->varId();
call    0 never executed
call    1 never executed
    #####: 2269:                    if (contVarId == loopVar->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2270:                        continue;
    #####: 2271:                    if (memberCallTok->str() == "push_back" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2272:                        memberCallTok->str() == "push_front" ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2273:                        memberCallTok->str() == "emplace_back") {
call    0 never executed
call    1 never executed
    #####: 2274:                        if (useLoopVarInMemCall)
branch  0 never executed
branch  1 never executed
    #####: 2275:                            useStlAlgorithmError(memberAccessTok, "std::copy_if");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2276:                        // There is no transform_if to suggest
        -: 2277:                    }
    #####: 2278:                    continue;
        -: 2279:                }
        -: 2280:
        -: 2281:                // Check for increment in loop
    #####: 2282:                incrementTok = singleIncrementInScope(condBodyTok, loopVar->varId(), useLoopVarInIncrement);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2283:                if (incrementTok) {
branch  0 never executed
branch  1 never executed
    #####: 2284:                    std::string algo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2285:                    if (useLoopVarInIncrement)
branch  0 never executed
branch  1 never executed
    #####: 2286:                        algo = "std::transform";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2287:                    else
    #####: 2288:                        algo = "std::count_if";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2289:                    useStlAlgorithmError(incrementTok, algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2290:                    continue;
        -: 2291:                }
        -: 2292:
        -: 2293:                // Check early return
    #####: 2294:                if (isEarlyExit(condBodyTok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2295:                    const Token *loopVar2 = Token::findmatch(condBodyTok, "%varid%", condBodyTok->link(), loopVar->varId());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2296:                    std::string algo;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2297:                    if (loopVar2)
branch  0 never executed
branch  1 never executed
    #####: 2298:                        algo = "std::find_if";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2299:                    else
    #####: 2300:                        algo = "std::any_of";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2301:                    useStlAlgorithmError(condBodyTok, algo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2302:                    continue;
        -: 2303:                }
        -: 2304:            }
        -: 2305:        }
        -: 2306:    }
function _GLOBAL__sub_I__ZN8CheckStl11outOfBoundsEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 51%
        3: 2307:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
