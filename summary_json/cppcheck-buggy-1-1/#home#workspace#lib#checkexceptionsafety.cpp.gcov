        -:    0:Source:/home/workspace/lib/checkexceptionsafety.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkexceptionsafety.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkexceptionsafety.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2018 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#include "checkexceptionsafety.h"
        -:   21:
        -:   22:#include "settings.h"
        -:   23:#include "symboldatabase.h"
        -:   24:
        -:   25:#include <cstddef>
        -:   26:#include <set>
        -:   27:#include <utility>
        -:   28:
        -:   29://---------------------------------------------------------------------------
        -:   30:
        -:   31:// Register CheckExceptionSafety..
        -:   32:namespace {
        1:   33:    CheckExceptionSafety instance;
call    0 returned 100%
call    1 returned 100%
        -:   34:}
        -:   35:
        -:   36:
        -:   37://---------------------------------------------------------------------------
        -:   38:
function _ZN20CheckExceptionSafety11destructorsEv called 0 returned 0% blocks executed 0%
    #####:   39:void CheckExceptionSafety::destructors()
        -:   40:{
    #####:   41:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:        return;
        -:   43:
    #####:   44:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:   45:
        -:   46:    // Perform check..
    #####:   47:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   48:        const Function * function = scope->function;
    #####:   49:        if (!function)
branch  0 never executed
branch  1 never executed
    #####:   50:            continue;
        -:   51:        // only looking for destructors
    #####:   52:        if (function->type == Function::eDestructor) {
branch  0 never executed
branch  1 never executed
        -:   53:            // Inspect this destructor.
    #####:   54:            for (const Token *tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   55:                // Skip try blocks
    #####:   56:                if (Token::simpleMatch(tok, "try {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   57:                    tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -:   58:                }
        -:   59:
        -:   60:                // Skip uncaught exceptions
    #####:   61:                else if (Token::simpleMatch(tok, "if ( ! std :: uncaught_exception ( ) ) {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   62:                    tok = tok->next()->link(); // end of if ( ... )
call    0 never executed
call    1 never executed
    #####:   63:                    tok = tok->next()->link(); // end of { ... }
call    0 never executed
call    1 never executed
        -:   64:                }
        -:   65:
        -:   66:                // throw found within a destructor
    #####:   67:                else if (tok->str() == "throw") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   68:                    destructorsError(tok, scope->className);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:                    break;
        -:   70:                }
        -:   71:            }
        -:   72:        }
        -:   73:    }
        -:   74:}
        -:   75:
        -:   76:
        -:   77:
        -:   78:
function _ZN20CheckExceptionSafety12deallocThrowEv called 0 returned 0% blocks executed 0%
    #####:   79:void CheckExceptionSafety::deallocThrow()
        -:   80:{
    #####:   81:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:        return;
        -:   83:
    #####:   84:    const bool printInconclusive = mSettings->inconclusive;
    #####:   85:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:   86:
        -:   87:    // Deallocate a global/member pointer and then throw exception
        -:   88:    // the pointer will be a dead pointer
    #####:   89:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   90:        for (const Token *tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   91:            // only looking for delete now
    #####:   92:            if (tok->str() != "delete")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   93:                continue;
        -:   94:
        -:   95:            // Check if this is something similar with: "delete p;"
    #####:   96:            tok = tok->next();
call    0 never executed
    #####:   97:            if (Token::simpleMatch(tok, "[ ]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   98:                tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   99:            if (!tok || tok == scope->bodyEnd)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  100:                break;
    #####:  101:            if (!Token::Match(tok, "%var% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  102:                continue;
        -:  103:
        -:  104:            // we only look for global variables
    #####:  105:            const Variable *var = tok->variable();
call    0 never executed
    #####:  106:            if (!var || !(var->isGlobal() || var->isStatic()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  107:                continue;
        -:  108:
    #####:  109:            const unsigned int varid(tok->varId());
call    0 never executed
        -:  110:
        -:  111:            // Token where throw occurs
    #####:  112:            const Token *throwToken = nullptr;
        -:  113:
        -:  114:            // is there a throw after the deallocation?
    #####:  115:            const Token* const end2 = tok->scope()->bodyEnd;
call    0 never executed
    #####:  116:            for (const Token *tok2 = tok; tok2 != end2; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  117:                // Throw after delete -> Dead pointer
    #####:  118:                if (tok2->str() == "throw") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  119:                    if (printInconclusive) { // For inconclusive checking, throw directly.
branch  0 never executed
branch  1 never executed
    #####:  120:                        deallocThrowError(tok2, tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  121:                        break;
        -:  122:                    }
    #####:  123:                    throwToken = tok2;
        -:  124:                }
        -:  125:
        -:  126:                // Variable is assigned -> Bail out
    #####:  127:                else if (Token::Match(tok2, "%varid% =", varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  128:                    if (throwToken) // For non-inconclusive checking, wait until we find an assignment to it. Otherwise we assume it is safe to leave a dead pointer.
branch  0 never executed
branch  1 never executed
    #####:  129:                        deallocThrowError(throwToken, tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  130:                    break;
        -:  131:                }
        -:  132:                // Variable passed to function. Assume it becomes assigned -> Bail out
    #####:  133:                else if (Token::Match(tok2, "[,(] &| %varid% [,)]", varid)) // TODO: No bailout if passed by value or as const reference
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  134:                    break;
        -:  135:            }
        -:  136:        }
        -:  137:    }
        -:  138:}
        -:  139:
        -:  140://---------------------------------------------------------------------------
        -:  141://      catch(const exception & err)
        -:  142://      {
        -:  143://         throw err;            // <- should be just "throw;"
        -:  144://      }
        -:  145://---------------------------------------------------------------------------
function _ZN20CheckExceptionSafety16checkRethrowCopyEv called 0 returned 0% blocks executed 0%
    #####:  146:void CheckExceptionSafety::checkRethrowCopy()
        -:  147:{
    #####:  148:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  149:        return;
        -:  150:
    #####:  151:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  152:
    #####:  153:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  154:        if (scope.type != Scope::eCatch)
branch  0 never executed
branch  1 never executed
    #####:  155:            continue;
        -:  156:
    #####:  157:        const unsigned int varid = scope.bodyStart->tokAt(-2)->varId();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  158:        if (varid) {
branch  0 never executed
branch  1 never executed
    #####:  159:            for (const Token* tok = scope.bodyStart->next(); tok && tok != scope.bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  160:                if (Token::simpleMatch(tok, "catch (") && tok->next()->link() && tok->next()->link()->next()) { // Don't check inner catch - it is handled in another iteration of outer loop.
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  161:                    tok = tok->next()->link()->next()->link();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  162:                    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  163:                        break;
    #####:  164:                } else if (Token::Match(tok, "throw %varid% ;", varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  165:                    rethrowCopyError(tok, tok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  166:            }
        -:  167:        }
        -:  168:    }
        -:  169:}
        -:  170:
        -:  171://---------------------------------------------------------------------------
        -:  172://    try {} catch (std::exception err) {} <- Should be "std::exception& err"
        -:  173://---------------------------------------------------------------------------
function _ZN20CheckExceptionSafety26checkCatchExceptionByValueEv called 0 returned 0% blocks executed 0%
    #####:  174:void CheckExceptionSafety::checkCatchExceptionByValue()
        -:  175:{
    #####:  176:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  177:        return;
        -:  178:
    #####:  179:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  180:
    #####:  181:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  182:        if (scope.type != Scope::eCatch)
branch  0 never executed
branch  1 never executed
    #####:  183:            continue;
        -:  184:
        -:  185:        // Find a pass-by-value declaration in the catch(), excluding basic types
        -:  186:        // e.g. catch (std::exception err)
    #####:  187:        const Variable *var = scope.bodyStart->tokAt(-2)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  188:        if (var && var->isClass() && !var->isPointer() && !var->isReference())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  189:            catchExceptionByValueError(scope.classDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  190:    }
        -:  191:}
        -:  192:
        -:  193:
function _ZL23functionThrowsRecursivePK8FunctionRNSt7__debug3setIS1_St4lessIS1_ESaIS1_EEE called 0 returned 0% blocks executed 0%
    #####:  194:static const Token * functionThrowsRecursive(const Function * function, std::set<const Function *> & recursive)
        -:  195:{
        -:  196:    // check for recursion and bail if found
    #####:  197:    if (!recursive.insert(function).second)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  198:        return nullptr;
        -:  199:
    #####:  200:    if (!function->functionScope)
branch  0 never executed
branch  1 never executed
    #####:  201:        return nullptr;
        -:  202:
    #####:  203:    for (const Token *tok = function->functionScope->bodyStart->next();
call    0 never executed
call    1 never executed
    #####:  204:         tok != function->functionScope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
    #####:  205:        if (tok->str() == "try") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  206:            // just bail for now
    #####:  207:            break;
        -:  208:        }
    #####:  209:        if (tok->str() == "throw") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  210:            return tok;
    #####:  211:        } else if (tok->function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  212:            const Function * called = tok->function();
call    0 never executed
        -:  213:            // check if called function has an exception specification
    #####:  214:            if (called->isThrow() && called->throwArg) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  215:                return tok;
    #####:  216:            } else if (called->isNoExcept() && called->noexceptArg &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  217:                       called->noexceptArg->str() != "true") {
call    0 never executed
call    1 never executed
    #####:  218:                return tok;
    #####:  219:            } else if (functionThrowsRecursive(called, recursive)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  220:                return tok;
        -:  221:            }
        -:  222:        }
        -:  223:    }
        -:  224:
    #####:  225:    return nullptr;
        -:  226:}
        -:  227:
function _ZL14functionThrowsPK8Function called 0 returned 0% blocks executed 0%
    #####:  228:static const Token * functionThrows(const Function * function)
        -:  229:{
    #####:  230:    std::set<const Function *>  recursive;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  231:
    #####:  232:    return functionThrowsRecursive(function, recursive);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  233:}
        -:  234:
        -:  235://--------------------------------------------------------------------------
        -:  236://    void func() noexcept { throw x; }
        -:  237://    void func() throw() { throw x; }
        -:  238://    void func() __attribute__((nothrow)); void func() { throw x; }
        -:  239://--------------------------------------------------------------------------
function _ZN20CheckExceptionSafety13nothrowThrowsEv called 0 returned 0% blocks executed 0%
    #####:  240:void CheckExceptionSafety::nothrowThrows()
        -:  241:{
    #####:  242:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  243:
    #####:  244:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  245:        const Function* function = scope->function;
    #####:  246:        if (!function)
branch  0 never executed
branch  1 never executed
    #####:  247:            continue;
        -:  248:
        -:  249:        // check noexcept and noexcept(true) functions
    #####:  250:        if (function->isNoExcept() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  251:            (!function->noexceptArg || function->noexceptArg->str() == "true")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  252:            const Token *throws = functionThrows(function);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  253:            if (throws)
branch  0 never executed
branch  1 never executed
    #####:  254:                noexceptThrowError(throws);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  255:        }
        -:  256:
        -:  257:        // check throw() functions
    #####:  258:        else if (function->isThrow() && !function->throwArg) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  259:            const Token *throws = functionThrows(function);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  260:            if (throws)
branch  0 never executed
branch  1 never executed
    #####:  261:                noexceptThrowError(throws);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:        }
        -:  263:
        -:  264:        // check __attribute__((nothrow)) or __declspec(nothrow) functions
    #####:  265:        else if (function->isAttributeNothrow()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  266:            const Token *throws = functionThrows(function);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  267:            if (throws)
branch  0 never executed
branch  1 never executed
    #####:  268:                noexceptThrowError(throws);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:        }
        -:  270:    }
    #####:  271:}
        -:  272:
        -:  273://--------------------------------------------------------------------------
        -:  274://    void func() { functionWithExceptionSpecification(); }
        -:  275://--------------------------------------------------------------------------
function _ZN20CheckExceptionSafety31unhandledExceptionSpecificationEv called 0 returned 0% blocks executed 0%
    #####:  276:void CheckExceptionSafety::unhandledExceptionSpecification()
        -:  277:{
    #####:  278:    if (!mSettings->isEnabled(Settings::STYLE) || !mSettings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  279:        return;
        -:  280:
    #####:  281:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  282:
    #####:  283:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  284:        // only check functions without exception epecification
    #####:  285:        if (scope->function && !scope->function->isThrow() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  286:            scope->className != "main" && scope->className != "wmain" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  287:            scope->className != "_tmain" && scope->className != "WinMain") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  288:            for (const Token *tok = scope->function->functionScope->bodyStart->next();
call    0 never executed
call    1 never executed
    #####:  289:                 tok != scope->function->functionScope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
    #####:  290:                if (tok->str() == "try") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  291:                    break;
    #####:  292:                } else if (tok->function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:                    const Function * called = tok->function();
call    0 never executed
        -:  294:                    // check if called function has an exception specification
    #####:  295:                    if (called->isThrow() && called->throwArg) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  296:                        unhandledExceptionSpecificationError(tok, called->tokenDef, scope->function->name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  297:                        break;
        -:  298:                    }
        -:  299:                }
        -:  300:            }
        -:  301:        }
        -:  302:    }
function _GLOBAL__sub_I__ZN20CheckExceptionSafety11destructorsEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  303:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  304:
