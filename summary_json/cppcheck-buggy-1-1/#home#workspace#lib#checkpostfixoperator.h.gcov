        -:    0:Source:/home/workspace/lib/checkpostfixoperator.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkpostfixoperator.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkpostfixoperator.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkpostfixoperatorH
        -:   22:#define checkpostfixoperatorH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:#include "tokenize.h"
        -:   28:
        -:   29:#include <string>
        -:   30:
        -:   31:class ErrorLogger;
        -:   32:class Settings;
        -:   33:class Token;
        -:   34:
        -:   35:/// @addtogroup Checks
        -:   36:/// @{
        -:   37:
        -:   38:/**
        -:   39: * @brief Using postfix operators ++ or -- rather than postfix operator.
        -:   40: */
        -:   41:
function _ZN20CheckPostfixOperatorD0Ev called 0 returned 0% blocks executed 0%
function _ZN20CheckPostfixOperatorD2Ev called 0 returned 0% blocks executed 0%
    #####:   42:class CPPCHECKLIB CheckPostfixOperator : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   43:public:
        -:   44:    /** This constructor is used when registering the CheckPostfixOperator */
function _ZN20CheckPostfixOperatorC2Ev called 1 returned 100% blocks executed 71%
        1:   45:    CheckPostfixOperator() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   46:    }
        -:   47:
        -:   48:    /** This constructor is used when running checks. */
function _ZN20CheckPostfixOperatorC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   49:    CheckPostfixOperator(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   50:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   51:    }
        -:   52:
function _ZN20CheckPostfixOperator9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   53:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   54:        if (tokenizer->isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:            return;
        -:   56:
    #####:   57:        CheckPostfixOperator checkPostfixOperator(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   58:        checkPostfixOperator.postfixOperator();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   59:    }
        -:   60:
        -:   61:    /** Check postfix operators */
        -:   62:    void postfixOperator();
        -:   63:
        -:   64:private:
        -:   65:    /** Report Error */
        -:   66:    void postfixOperatorError(const Token *tok);
        -:   67:
function _ZNK20CheckPostfixOperator16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:   68:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:   69:        CheckPostfixOperator c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   70:        c.postfixOperatorError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:    }
        -:   72:
function _ZN20CheckPostfixOperator6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   73:    static std::string myName() {
    #####:   74:        return "Using postfix operators";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   75:    }
        -:   76:
function _ZNK20CheckPostfixOperator9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:   77:    std::string classInfo() const OVERRIDE {
    #####:   78:        return "Warn if using postfix operators ++ or -- rather than prefix operator\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   79:    }
        -:   80:};
        -:   81:/// @}
        -:   82://---------------------------------------------------------------------------
        -:   83:#endif // checkpostfixoperatorH
