        -:    0:Source:/home/workspace/lib/tokenlist.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/tokenlist.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/tokenlist.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#include "tokenlist.h"
        -:   21:
        -:   22:#include "errorlogger.h"
        -:   23:#include "mathlib.h"
        -:   24:#include "path.h"
        -:   25:#include "settings.h"
        -:   26:#include "token.h"
        -:   27:
        -:   28:#include <simplecpp.h>
        -:   29:#include <cctype>
        -:   30:#include <cstring>
        -:   31:#include <set>
        -:   32:#include <stack>
        -:   33:
        -:   34:// How many compileExpression recursions are allowed?
        -:   35:// For practical code this could be endless. But in some special torture test
        -:   36:// there needs to be a limit.
        -:   37:static const int AST_MAX_DEPTH = 50;
        -:   38:
        -:   39:
function _ZN9TokenListC2EPK8Settings called 194 returned 100% blocks executed 100%
      194:   40:TokenList::TokenList(const Settings* settings) :
        -:   41:    mTokensFrontBack(),
        -:   42:    mSettings(settings),
        -:   43:    mIsC(false),
      194:   44:    mIsCpp(false)
call    0 returned 100%
call    1 returned 100%
        -:   45:{
      194:   46:}
        -:   47:
function _ZN9TokenListD2Ev called 194 returned 100% blocks executed 100%
      388:   48:TokenList::~TokenList()
call    0 returned 100%
call    1 returned 100%
        -:   49:{
      194:   50:    deallocateTokens();
call    0 returned 100%
      194:   51:}
        -:   52:
        -:   53://---------------------------------------------------------------------------
        -:   54:
function _ZNK9TokenList17getSourceFilePathB5cxx11Ev called 17238 returned 100% blocks executed 86%
    17238:   55:const std::string& TokenList::getSourceFilePath() const
        -:   56:{
    17238:   57:    if (getFiles().empty()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   58:        return emptyString;
        -:   59:    }
    17238:   60:    return getFiles()[0];
call    0 returned 100%
call    1 returned 100%
        -:   61:}
        -:   62:
        -:   63://---------------------------------------------------------------------------
        -:   64:
        -:   65:// Deallocate lists..
function _ZN9TokenList16deallocateTokensEv called 194 returned 100% blocks executed 100%
      194:   66:void TokenList::deallocateTokens()
        -:   67:{
      194:   68:    deleteTokens(mTokensFrontBack.front);
call    0 returned 100%
      194:   69:    mTokensFrontBack.front = nullptr;
      194:   70:    mTokensFrontBack.back = nullptr;
      194:   71:    mFiles.clear();
call    0 returned 100%
      194:   72:}
        -:   73:
function _ZN9TokenList15appendFileIfNewERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 192 returned 100% blocks executed 72%
      192:   74:int TokenList::appendFileIfNew(const std::string &fileName)
        -:   75:{
        -:   76:    // Has this file been tokenized already?
      192:   77:    for (int i = 0; i < mFiles.size(); ++i)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   78:        if (Path::sameFileName(mFiles[i], fileName))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:            return i;
        -:   80:
        -:   81:    // The "mFiles" vector remembers what files have been tokenized..
      192:   82:    mFiles.push_back(fileName);
call    0 returned 100%
        -:   83:
        -:   84:    // Update mIsC and mIsCpp properties
      192:   85:    if (mFiles.size() == 1) { // Update only useful if first file added to _files
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      192:   86:        if (!mSettings) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   87:            mIsC = Path::isC(getSourceFilePath());
call    0 never executed
call    1 never executed
    #####:   88:            mIsCpp = Path::isCPP(getSourceFilePath());
call    0 never executed
call    1 never executed
        -:   89:        } else {
      192:   90:            mIsC = mSettings->enforcedLang == Settings::C || (mSettings->enforcedLang == Settings::None && Path::isC(getSourceFilePath()));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 57% (fallthrough)
branch  7 taken 43%
      192:   91:            mIsCpp = mSettings->enforcedLang == Settings::CPP || (mSettings->enforcedLang == Settings::None && Path::isCPP(getSourceFilePath()));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 43% (fallthrough)
branch  7 taken 57%
        -:   92:        }
        -:   93:    }
      192:   94:    return mFiles.size() - 1;
call    0 returned 100%
        -:   95:}
        -:   96:
function _ZN9TokenList12deleteTokensEP5Token called 194 returned 100% blocks executed 100%
    36393:   97:void TokenList::deleteTokens(Token *tok)
        -:   98:{
    72592:   99:    while (tok) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    36199:  100:        Token *next = tok->next();
call    0 returned 100%
    36199:  101:        delete tok;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
    36199:  102:        tok = next;
        -:  103:    }
      194:  104:}
        -:  105:
        -:  106://---------------------------------------------------------------------------
        -:  107:// add a token.
        -:  108://---------------------------------------------------------------------------
        -:  109:
function _ZN9TokenList8addtokenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiib called 0 returned 0% blocks executed 0%
    #####:  110:void TokenList::addtoken(std::string str, const nonneg int lineno, const nonneg int fileno, bool split)
        -:  111:{
    #####:  112:    if (str.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  113:        return;
        -:  114:
        -:  115:    // If token contains # characters, split it up
    #####:  116:    if (split) {
branch  0 never executed
branch  1 never executed
    #####:  117:        size_t begin = 0;
    #####:  118:        size_t end = 0;
    #####:  119:        while ((end = str.find("##", begin)) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  120:            addtoken(str.substr(begin, end - begin), lineno, fileno, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  121:            addtoken("##", lineno, fileno, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  122:            begin = end+2;
        -:  123:        }
    #####:  124:        if (begin != 0) {
branch  0 never executed
branch  1 never executed
    #####:  125:            addtoken(str.substr(begin), lineno, fileno, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  126:            return;
        -:  127:        }
        -:  128:    }
        -:  129:
        -:  130:    // Replace hexadecimal value with decimal
    #####:  131:    const bool isHex = MathLib::isIntHex(str) ;
call    0 never executed
    #####:  132:    if (isHex || MathLib::isOct(str) || MathLib::isBin(str)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  133:        // TODO: It would be better if TokenList didn't simplify hexadecimal numbers
    #####:  134:        std::string suffix;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  135:        if (isHex &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  136:            str.size() == (2 + mSettings->int_bit / 4) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  137:            (str[2] >= '8') &&  // includes A-F and a-f
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  138:            MathLib::getSuffix(str).empty()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  139:           )
    #####:  140:            suffix = "U";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  141:        str = MathLib::value(str).str() + suffix;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  142:    }
        -:  143:
    #####:  144:    if (mTokensFrontBack.back) {
branch  0 never executed
branch  1 never executed
    #####:  145:        mTokensFrontBack.back->insertToken(str);
call    0 never executed
        -:  146:    } else {
    #####:  147:        mTokensFrontBack.front = new Token(&mTokensFrontBack);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  148:        mTokensFrontBack.back = mTokensFrontBack.front;
    #####:  149:        mTokensFrontBack.back->str(str);
call    0 never executed
        -:  150:    }
        -:  151:
    #####:  152:    if (isCPP() && str == "delete")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  153:        mTokensFrontBack.back->isKeyword(true);
call    0 never executed
    #####:  154:    mTokensFrontBack.back->linenr(lineno);
call    0 never executed
    #####:  155:    mTokensFrontBack.back->fileIndex(fileno);
call    0 never executed
        -:  156:}
        -:  157:
function _ZN9TokenList8addtokenENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK5Token called 0 returned 0% blocks executed 0%
    #####:  158:void TokenList::addtoken(std::string str, const Token *locationTok)
        -:  159:{
    #####:  160:    if (str.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  161:        return;
        -:  162:
        -:  163:    // Replace hexadecimal value with decimal
    #####:  164:    const bool isHex = MathLib::isIntHex(str) ;
call    0 never executed
    #####:  165:    if (isHex || MathLib::isOct(str) || MathLib::isBin(str)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  166:        // TODO: It would be better if TokenList didn't simplify hexadecimal numbers
    #####:  167:        std::string suffix;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  168:        if (isHex &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  169:            str.size() == (2 + mSettings->int_bit / 4) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  170:            (str[2] >= '8') &&  // includes A-F and a-f
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  171:            MathLib::getSuffix(str).empty()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  172:           )
    #####:  173:            suffix = "U";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  174:        str = MathLib::value(str).str() + suffix;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  175:    }
        -:  176:
    #####:  177:    if (mTokensFrontBack.back) {
branch  0 never executed
branch  1 never executed
    #####:  178:        mTokensFrontBack.back->insertToken(str);
call    0 never executed
        -:  179:    } else {
    #####:  180:        mTokensFrontBack.front = new Token(&mTokensFrontBack);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  181:        mTokensFrontBack.back = mTokensFrontBack.front;
    #####:  182:        mTokensFrontBack.back->str(str);
call    0 never executed
        -:  183:    }
        -:  184:
    #####:  185:    if (isCPP() && str == "delete")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  186:        mTokensFrontBack.back->isKeyword(true);
call    0 never executed
    #####:  187:    mTokensFrontBack.back->linenr(locationTok->linenr());
call    0 never executed
call    1 never executed
    #####:  188:    mTokensFrontBack.back->column(locationTok->column());
call    0 never executed
call    1 never executed
    #####:  189:    mTokensFrontBack.back->fileIndex(locationTok->fileIndex());
call    0 never executed
call    1 never executed
        -:  190:}
        -:  191:
function _ZN9TokenList8addtokenEPK5Tokenii called 0 returned 0% blocks executed 0%
    #####:  192:void TokenList::addtoken(const Token * tok, const nonneg int lineno, const nonneg int fileno)
        -:  193:{
    #####:  194:    if (tok == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  195:        return;
        -:  196:
    #####:  197:    if (mTokensFrontBack.back) {
branch  0 never executed
branch  1 never executed
    #####:  198:        mTokensFrontBack.back->insertToken(tok->str(), tok->originalName());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  199:    } else {
    #####:  200:        mTokensFrontBack.front = new Token(&mTokensFrontBack);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  201:        mTokensFrontBack.back = mTokensFrontBack.front;
    #####:  202:        mTokensFrontBack.back->str(tok->str());
call    0 never executed
call    1 never executed
    #####:  203:        if (!tok->originalName().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  204:            mTokensFrontBack.back->originalName(tok->originalName());
call    0 never executed
call    1 never executed
        -:  205:    }
        -:  206:
    #####:  207:    mTokensFrontBack.back->linenr(lineno);
call    0 never executed
    #####:  208:    mTokensFrontBack.back->fileIndex(fileno);
call    0 never executed
    #####:  209:    mTokensFrontBack.back->flags(tok->flags());
call    0 never executed
call    1 never executed
        -:  210:}
        -:  211:
function _ZN9TokenList8addtokenEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  212:void TokenList::addtoken(const Token *tok, const Token *locationTok)
        -:  213:{
    #####:  214:    if (tok == nullptr || locationTok == nullptr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  215:        return;
        -:  216:
    #####:  217:    if (mTokensFrontBack.back) {
branch  0 never executed
branch  1 never executed
    #####:  218:        mTokensFrontBack.back->insertToken(tok->str(), tok->originalName());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  219:    } else {
    #####:  220:        mTokensFrontBack.front = new Token(&mTokensFrontBack);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  221:        mTokensFrontBack.back = mTokensFrontBack.front;
    #####:  222:        mTokensFrontBack.back->str(tok->str());
call    0 never executed
call    1 never executed
    #####:  223:        if (!tok->originalName().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  224:            mTokensFrontBack.back->originalName(tok->originalName());
call    0 never executed
call    1 never executed
        -:  225:    }
        -:  226:
    #####:  227:    mTokensFrontBack.back->flags(tok->flags());
call    0 never executed
call    1 never executed
    #####:  228:    mTokensFrontBack.back->linenr(locationTok->linenr());
call    0 never executed
call    1 never executed
    #####:  229:    mTokensFrontBack.back->column(locationTok->column());
call    0 never executed
call    1 never executed
    #####:  230:    mTokensFrontBack.back->fileIndex(locationTok->fileIndex());
call    0 never executed
call    1 never executed
        -:  231:}
        -:  232:
function _ZN9TokenList8addtokenEPK5Token called 0 returned 0% blocks executed 0%
    #####:  233:void TokenList::addtoken(const Token *tok)
        -:  234:{
    #####:  235:    if (tok == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  236:        return;
        -:  237:
    #####:  238:    if (mTokensFrontBack.back) {
branch  0 never executed
branch  1 never executed
    #####:  239:        mTokensFrontBack.back->insertToken(tok->str(), tok->originalName());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  240:    } else {
    #####:  241:        mTokensFrontBack.front = new Token(&mTokensFrontBack);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  242:        mTokensFrontBack.back = mTokensFrontBack.front;
    #####:  243:        mTokensFrontBack.back->str(tok->str());
call    0 never executed
call    1 never executed
    #####:  244:        if (!tok->originalName().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  245:            mTokensFrontBack.back->originalName(tok->originalName());
call    0 never executed
call    1 never executed
        -:  246:    }
        -:  247:
    #####:  248:    mTokensFrontBack.back->flags(tok->flags());
call    0 never executed
call    1 never executed
    #####:  249:    mTokensFrontBack.back->linenr(tok->linenr());
call    0 never executed
call    1 never executed
    #####:  250:    mTokensFrontBack.back->column(tok->column());
call    0 never executed
call    1 never executed
    #####:  251:    mTokensFrontBack.back->fileIndex(tok->fileIndex());
call    0 never executed
call    1 never executed
        -:  252:}
        -:  253:
        -:  254:
        -:  255://---------------------------------------------------------------------------
        -:  256:// copyTokens - Copy and insert tokens
        -:  257://---------------------------------------------------------------------------
        -:  258:
function _ZN9TokenList10copyTokensEP5TokenPKS0_S3_b called 0 returned 0% blocks executed 0%
    #####:  259:Token *TokenList::copyTokens(Token *dest, const Token *first, const Token *last, bool one_line)
        -:  260:{
    #####:  261:    std::stack<Token *> links;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  262:    Token *tok2 = dest;
    #####:  263:    int linenr = dest->linenr();
call    0 never executed
    #####:  264:    const int commonFileIndex = dest->fileIndex();
call    0 never executed
    #####:  265:    for (const Token *tok = first; tok != last->next(); tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  266:        tok2->insertToken(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  267:        tok2 = tok2->next();
call    0 never executed
    #####:  268:        tok2->fileIndex(commonFileIndex);
call    0 never executed
    #####:  269:        tok2->linenr(linenr);
call    0 never executed
    #####:  270:        tok2->tokType(tok->tokType());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  271:        tok2->flags(tok->flags());
call    0 never executed
call    1 never executed
    #####:  272:        tok2->varId(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  273:
        -:  274:        // Check for links and fix them up
    #####:  275:        if (Token::Match(tok2, "(|[|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  276:            links.push(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  277:        else if (Token::Match(tok2, ")|]|}")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  278:            if (links.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  279:                return tok2;
        -:  280:
    #####:  281:            Token * link = links.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  282:
    #####:  283:            tok2->link(link);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  284:            link->link(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  285:
    #####:  286:            links.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:        }
    #####:  288:        if (!one_line && tok->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  289:            linenr += tok->next()->linenr() - tok->linenr();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  290:    }
    #####:  291:    return tok2;
        -:  292:}
        -:  293:
        -:  294://---------------------------------------------------------------------------
        -:  295:// InsertTokens - Copy and insert tokens
        -:  296://---------------------------------------------------------------------------
        -:  297:
function _ZN9TokenList12insertTokensEP5TokenPKS0_i called 115 returned 100% blocks executed 73%
      115:  298:void TokenList::insertTokens(Token *dest, const Token *src, nonneg int n)
        -:  299:{
      230:  300:    std::stack<Token *> link;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  301:
      575:  302:    while (n > 0) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      230:  303:        dest->insertToken(src->str(), src->originalName());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      230:  304:        dest = dest->next();
call    0 returned 100%
        -:  305:
        -:  306:        // Set links
      230:  307:        if (Token::Match(dest, "(|[|{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  308:            link.push(dest);
call    0 never executed
branch  1 never executed
branch  2 never executed
      230:  309:        else if (!link.empty() && Token::Match(dest, ")|]|}")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  310:            Token::createMutualLinks(dest, link.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  311:            link.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  312:        }
        -:  313:
      230:  314:        dest->fileIndex(src->fileIndex());
call    0 returned 100%
call    1 returned 100%
      230:  315:        dest->linenr(src->linenr());
call    0 returned 100%
call    1 returned 100%
      230:  316:        dest->column(src->column());
call    0 returned 100%
call    1 returned 100%
      230:  317:        dest->varId(src->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      230:  318:        dest->tokType(src->tokType());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      230:  319:        dest->flags(src->flags());
call    0 returned 100%
call    1 returned 100%
      230:  320:        src  = src->next();
call    0 returned 100%
      230:  321:        --n;
        -:  322:    }
      115:  323:}
        -:  324:
        -:  325://---------------------------------------------------------------------------
        -:  326:// Tokenize - tokenizes a given file.
        -:  327://---------------------------------------------------------------------------
        -:  328:
function _ZN9TokenList12createTokensERSiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 192 returned 100% blocks executed 71%
      192:  329:bool TokenList::createTokens(std::istream &code, const std::string& file0)
        -:  330:{
      192:  331:    appendFileIfNew(file0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  332:
      384:  333:    simplecpp::OutputList outputList;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      384:  334:    simplecpp::TokenList tokens(code, mFiles, file0, &outputList);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  335:
      192:  336:    createTokens(&tokens);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  337:
      384:  338:    return outputList.empty();
call    0 returned 100%
        -:  339:}
        -:  340:
        -:  341://---------------------------------------------------------------------------
        -:  342:
function _ZN9TokenList12createTokensEPKN9simplecpp9TokenListE called 194 returned 100% blocks executed 62%
      194:  343:void TokenList::createTokens(const simplecpp::TokenList *tokenList)
        -:  344:{
      194:  345:    if (tokenList->cfront())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      194:  346:        mOrigFiles = mFiles = tokenList->cfront()->location.files;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  347:    else
    #####:  348:        mFiles.clear();
call    0 never executed
        -:  349:
      194:  350:    mIsC = mIsCpp = false;
      194:  351:    if (!mFiles.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      194:  352:        mIsC = Path::isC(getSourceFilePath());
call    0 returned 100%
call    1 returned 100%
      194:  353:        mIsCpp = Path::isCPP(getSourceFilePath());
call    0 returned 100%
call    1 returned 100%
        -:  354:    }
      194:  355:    if (mSettings && mSettings->enforcedLang != Settings::None) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  356:        mIsC = (mSettings->enforcedLang == Settings::C);
    #####:  357:        mIsCpp = (mSettings->enforcedLang == Settings::CPP);
        -:  358:    }
        -:  359:
    32113:  360:    for (const simplecpp::Token *tok = tokenList->cfront(); tok; tok = tok->next) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
        -:  361:
    63838:  362:        std::string str = tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        -:  363:
        -:  364:        // Replace hexadecimal value with decimal
        -:  365:        // TODO: Remove this
    31919:  366:        const bool isHex = MathLib::isIntHex(str) ;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    31919:  367:        if (isHex || MathLib::isOct(str) || MathLib::isBin(str)) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        -:  368:            // TODO: It would be better if TokenList didn't simplify hexadecimal numbers
        2:  369:            std::string suffix;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        2:  370:            if (isHex &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        2:  371:                mSettings &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  372:                str.size() == (2 + mSettings->int_bit / 4) &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
        1:  373:                (str[2] >= '8') &&  // includes A-F and a-f
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        1:  374:                MathLib::getSuffix(str).empty()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  375:               )
    #####:  376:                suffix = "U";
call    0 never executed
branch  1 never executed
branch  2 never executed
        1:  377:            str = MathLib::value(str).str() + suffix;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
        -:  378:        }
        -:  379:
        -:  380:        // Float literal
    31919:  381:        if (str.size() > 1 && str[0] == '.' && std::isdigit(str[1]))
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####:  382:            str = '0' + str;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  383:
    31919:  384:        if (mTokensFrontBack.back) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    31725:  385:            mTokensFrontBack.back->insertToken(str);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  386:        } else {
      194:  387:            mTokensFrontBack.front = new Token(&mTokensFrontBack);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
      194:  388:            mTokensFrontBack.back = mTokensFrontBack.front;
      194:  389:            mTokensFrontBack.back->str(str);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  390:        }
        -:  391:
    31919:  392:        if (isCPP() && mTokensFrontBack.back->str() == "delete")
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       67:  393:            mTokensFrontBack.back->isKeyword(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    31919:  394:        mTokensFrontBack.back->fileIndex(tok->location.fileIndex);
call    0 returned 100%
    31919:  395:        mTokensFrontBack.back->linenr(tok->location.line);
call    0 returned 100%
    31919:  396:        mTokensFrontBack.back->column(tok->location.col);
call    0 returned 100%
    31919:  397:        mTokensFrontBack.back->isExpandedMacro(!tok->macro.empty());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  398:    }
        -:  399:
      194:  400:    if (mSettings && mSettings->relativePaths) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  401:        for (std::string & mFile : mFiles)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  402:            mFile = Path::getRelativePath(mFile, mSettings->basePaths);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  403:    }
        -:  404:
      194:  405:    Token::assignProgressValues(mTokensFrontBack.front);
call    0 returned 100%
      194:  406:}
        -:  407:
        -:  408://---------------------------------------------------------------------------
        -:  409:
function _ZNK9TokenList17calculateChecksumEv called 0 returned 0% blocks executed 0%
    #####:  410:unsigned long long TokenList::calculateChecksum() const
        -:  411:{
    #####:  412:    unsigned long long checksum = 0;
    #####:  413:    for (const Token* tok = front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  414:        const unsigned int subchecksum1 = tok->flags() + tok->varId() + tok->tokType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  415:        unsigned int subchecksum2 = 0;
    #####:  416:        for (char i : tok->str())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  417:            subchecksum2 += (unsigned int)i;
    #####:  418:        if (!tok->originalName().empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  419:            for (char i : tok->originalName())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  420:                subchecksum2 += (unsigned int) i;
        -:  421:        }
        -:  422:
    #####:  423:        checksum ^= ((static_cast<unsigned long long>(subchecksum1) << 32) | subchecksum2);
        -:  424:
    #####:  425:        const bool bit1 = (checksum & 1) != 0;
    #####:  426:        checksum >>= 1;
    #####:  427:        if (bit1)
branch  0 never executed
branch  1 never executed
    #####:  428:            checksum |= (1ULL << 63);
        -:  429:    }
    #####:  430:    return checksum;
        -:  431:}
        -:  432:
        -:  433:
        -:  434://---------------------------------------------------------------------------
        -:  435:
function _ZN9AST_stateD2Ev called 5000 returned 100% blocks executed 100%
     5000:  436:struct AST_state {
call    0 returned 100%
        -:  437:    std::stack<Token*> op;
        -:  438:    int depth;
        -:  439:    int inArrayAssignment;
        -:  440:    bool cpp;
        -:  441:    int assign;
        -:  442:    bool inCase; // true from case to :
function _ZN9AST_stateC2Eb called 5000 returned 100% blocks executed 100%
     5000:  443:    explicit AST_state(bool cpp) : depth(0), inArrayAssignment(0), cpp(cpp), assign(0), inCase(false) {}
call    0 returned 100%
        -:  444:};
        -:  445:
function _ZL8skipDeclP5Token called 5837 returned 100% blocks executed 100%
     5837:  446:static Token * skipDecl(Token *tok)
        -:  447:{
     5837:  448:    if (!Token::Match(tok->previous(), "( %name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
     5480:  449:        return tok;
        -:  450:
      357:  451:    Token *vartok = tok;
     1359:  452:    while (Token::Match(vartok, "%name%|*|&|::|<")) {
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
      520:  453:        if (vartok->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        5:  454:            if (vartok->link())
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        1:  455:                vartok = vartok->link();
call    0 returned 100%
        -:  456:            else
        4:  457:                return tok;
      515:  458:        } else if (Token::Match(vartok, "%name% [:=]")) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
       15:  459:            return vartok;
        -:  460:        }
      501:  461:        vartok = vartok->next();
call    0 returned 100%
        -:  462:    }
      338:  463:    return tok;
        -:  464:}
        -:  465:
function _ZL6iscastPK5Token called 4667 returned 100% blocks executed 73%
     4667:  466:static bool iscast(const Token *tok)
        -:  467:{
     4667:  468:    if (!Token::Match(tok, "( ::| %name%"))
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
     4275:  469:        return false;
        -:  470:
      392:  471:    if (Token::simpleMatch(tok->link(), ") ( )"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  472:        return false;
        -:  473:
      392:  474:    if (tok->previous() && tok->previous()->isName() && tok->previous()->str() != "return")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 89% (fallthrough)
branch  6 taken 11%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 99% (fallthrough)
branch 11 taken 1%
branch 12 taken 89% (fallthrough)
branch 13 taken 11%
      348:  475:        return false;
        -:  476:
       44:  477:    if (Token::simpleMatch(tok->previous(), ">") && tok->previous()->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
        1:  478:        return false;
        -:  479:
       43:  480:    if (Token::Match(tok, "( (| typeof (") && Token::Match(tok->link(), ") %num%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  481:        return true;
        -:  482:
       43:  483:    if (Token::Match(tok->link(), ") }|)|]|;"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
        8:  484:        return false;
        -:  485:
       35:  486:    if (Token::Match(tok->link(), ") %cop%") && !Token::Match(tok->link(), ") [&*+-~]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 9% (fallthrough)
branch  9 taken 91%
        3:  487:        return false;
        -:  488:
       32:  489:    if (Token::Match(tok->previous(), "= ( %name% ) {") && tok->next()->varId() == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  490:        return true;
        -:  491:
       32:  492:    bool type = false;
       96:  493:    for (const Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
       96:  494:        if (tok2->varId() != 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  495:            return false;
        -:  496:
    #####:  497:        while (tok2->link() && Token::Match(tok2, "(|[|<"))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  498:            tok2 = tok2->link()->next();
call    0 never executed
call    1 never executed
        -:  499:
       96:  500:        if (tok2->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
       32:  501:            if (Token::simpleMatch(tok2, ") (") && Token::simpleMatch(tok2->linkAt(1), ") ."))
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  502:                return true;
       64:  503:            return type || tok2->strAt(-1) == "*" || Token::simpleMatch(tok2, ") ~") ||
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  504:                   (Token::Match(tok2, ") %any%") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  505:                    !tok2->next()->isOp() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       32:  506:                    !Token::Match(tok2->next(), "[[]);,?:.]"));
call    0 never executed
call    1 never executed
        -:  507:        }
       64:  508:        if (!Token::Match(tok2, "%name%|*|&|::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  509:            return false;
        -:  510:
       64:  511:        if (tok2->isStandardType() && (tok2->next()->str() != "(" || Token::Match(tok2->next(), "( * *| )")))
call    0 returned 100%
branch  1 taken 47% (fallthrough)
branch  2 taken 53%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 47% (fallthrough)
branch 13 taken 53%
       30:  512:            type = true;
        -:  513:    }
        -:  514:
    #####:  515:    return false;
        -:  516:}
        -:  517:
        -:  518:// int(1), int*(2), ..
function _ZL18findCppTypeInitParP5Token called 904 returned 100% blocks executed 95%
      904:  519:static Token * findCppTypeInitPar(Token *tok)
        -:  520:{
      904:  521:    if (!tok || !Token::Match(tok->previous(), "[,()] %name%"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 83% (fallthrough)
branch  5 taken 17%
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
      749:  522:        return nullptr;
      155:  523:    bool istype = false;
      527:  524:    while (Token::Match(tok, "%name%|::|<")) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
      186:  525:        if (tok->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        3:  526:            tok = tok->link();
call    0 returned 100%
        3:  527:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  528:                return nullptr;
        -:  529:        }
      186:  530:        istype |= tok->isStandardType();
call    0 returned 100%
      186:  531:        tok = tok->next();
call    0 returned 100%
        -:  532:    }
      155:  533:    if (!istype)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
      114:  534:        return nullptr;
       41:  535:    if (!Token::Match(tok, "[*&]"))
call    0 returned 100%
branch  1 taken 44% (fallthrough)
branch  2 taken 56%
       18:  536:        return nullptr;
       24:  537:    while (Token::Match(tok, "[*&]"))
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
       24:  538:        tok = tok->next();
call    0 returned 100%
       23:  539:    return (tok && tok->str() == "(") ? tok : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  540:}
        -:  541:
        -:  542:// X{} X<Y>{} etc
        -:  543:static bool iscpp11init_impl(const Token * const tok);
function _ZL11iscpp11initPK5Token called 1209 returned 100% blocks executed 100%
     1209:  544:static bool iscpp11init(const Token * const tok)
        -:  545:{
     1209:  546:    if (tok->isCpp11init() == TokenImpl::Cpp11init::UNKNOWN)
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
     1061:  547:        tok->setCpp11init(iscpp11init_impl(tok));
call    0 returned 100%
call    1 returned 100%
     1209:  548:    return tok->isCpp11init() == TokenImpl::Cpp11init::CPP11INIT;
call    0 returned 100%
        -:  549:}
        -:  550:
function _ZL16iscpp11init_implPK5Token called 1061 returned 100% blocks executed 74%
     1061:  551:static bool iscpp11init_impl(const Token * const tok)
        -:  552:{
     1061:  553:    const Token *nameToken = tok;
     1375:  554:    while (nameToken && nameToken->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
      157:  555:        if (nameToken->isCpp11init() != TokenImpl::Cpp11init::UNKNOWN)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  556:            return nameToken->isCpp11init() == TokenImpl::Cpp11init::CPP11INIT;
call    0 never executed
      157:  557:        nameToken = nameToken->previous();
call    0 returned 100%
      157:  558:        if (nameToken && nameToken->str() == "," && Token::simpleMatch(nameToken->previous(), "} ,"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  559:            nameToken = nameToken->linkAt(-1);
call    0 never executed
        -:  560:    }
     1061:  561:    if (!nameToken)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  562:        return false;
     1061:  563:    if (nameToken->str() == ">" && nameToken->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  564:        nameToken = nameToken->link()->previous();
call    0 never executed
call    1 never executed
        -:  565:
     1061:  566:    const Token *endtok = nullptr;
     1061:  567:    if (Token::Match(nameToken, "%name% { !!["))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
       32:  568:        endtok = nameToken->linkAt(1);
call    0 returned 100%
     1029:  569:    else if (Token::Match(nameToken,"%name% <") && Token::simpleMatch(nameToken->linkAt(1),"> {"))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  570:        endtok = nameToken->linkAt(1)->linkAt(1);
call    0 never executed
call    1 never executed
        -:  571:    else
     1029:  572:        return false;
       32:  573:    if (Token::Match(nameToken, "else|try|do|const|override|volatile|&|&&"))
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
        5:  574:        return false;
       27:  575:    if (Token::simpleMatch(nameToken->previous(), "namespace"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        1:  576:        return false;
        -:  577:    // There is no initialisation for example here: 'class Fred {};'
       26:  578:    if (!Token::simpleMatch(endtok, "} ;"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  579:        return true;
       26:  580:    const Token *prev = nameToken;
      222:  581:    while (Token::Match(prev, "%name%|::|:|<|>")) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
      107:  582:        if (Token::Match(prev, "class|struct"))
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
        9:  583:            return false;
        -:  584:
       98:  585:        prev = prev->previous();
call    0 returned 100%
        -:  586:    }
       17:  587:    return true;
        -:  588:}
        -:  589:
function _ZL14compileUnaryOpRP5TokenR9AST_statePFvS1_S3_E called 404 returned 100% blocks executed 100%
      404:  590:static void compileUnaryOp(Token *&tok, AST_state& state, void(*f)(Token *&tok, AST_state& state))
        -:  591:{
      404:  592:    Token *unaryop = tok;
      404:  593:    if (f) {
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
      125:  594:        tok = tok->next();
call    0 returned 100%
      125:  595:        state.depth++;
      125:  596:        if (tok && state.depth <= AST_MAX_DEPTH)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      125:  597:            f(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      125:  598:        state.depth--;
        -:  599:    }
        -:  600:
      404:  601:    if (!state.op.empty()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
      385:  602:        unaryop->astOperand1(state.op.top());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
      385:  603:        state.op.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  604:    }
      404:  605:    state.op.push(unaryop);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      404:  606:}
        -:  607:
function _ZL12compileBinOpRP5TokenR9AST_statePFvS1_S3_E called 5102 returned 100% blocks executed 100%
     5102:  608:static void compileBinOp(Token *&tok, AST_state& state, void(*f)(Token *&tok, AST_state& state))
        -:  609:{
     5102:  610:    Token *binop = tok;
     5102:  611:    if (f) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
      601:  612:        tok = tok->next();
call    0 returned 100%
      601:  613:        state.depth++;
      601:  614:        if (tok && state.depth <= AST_MAX_DEPTH)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      601:  615:            f(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      601:  616:        state.depth--;
        -:  617:    }
        -:  618:
        -:  619:    // TODO: Should we check if op is empty.
        -:  620:    // * Is it better to add assertion that it isn't?
        -:  621:    // * Write debug warning if it's empty?
     5102:  622:    if (!state.op.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     5102:  623:        binop->astOperand2(state.op.top());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
     5102:  624:        state.op.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  625:    }
     5102:  626:    if (!state.op.empty()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     5099:  627:        binop->astOperand1(state.op.top());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
     5099:  628:        state.op.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  629:    }
     5102:  630:    state.op.push(binop);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     5102:  631:}
        -:  632:
        -:  633:static void compileExpression(Token *&tok, AST_state& state);
        -:  634:
function _ZL11compileTermRP5TokenR9AST_state called 10503 returned 100% blocks executed 55%
    10503:  635:static void compileTerm(Token *&tok, AST_state& state)
        -:  636:{
    10503:  637:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  638:        return;
    10503:  639:    if (Token::Match(tok, "L %str%|%char%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  640:        tok = tok->next();
call    0 never executed
    10503:  641:    if (state.inArrayAssignment && Token::Match(tok->previous(), "[{,] . %name%")) { // Jump over . in C style struct initialization
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  642:        state.op.push(tok);
call    0 never executed
    #####:  643:        tok->astOperand1(tok->next());
call    0 never executed
call    1 never executed
    #####:  644:        tok = tok->tokAt(2);
call    0 never executed
        -:  645:    }
    10503:  646:    if (state.inArrayAssignment && Token::Match(tok->previous(), "[{,] [ %num%|%name% ]")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  647:        state.op.push(tok);
call    0 never executed
    #####:  648:        tok->astOperand1(tok->next());
call    0 never executed
call    1 never executed
    #####:  649:        tok = tok->tokAt(3);
call    0 never executed
        -:  650:    }
    10503:  651:    if (tok->isLiteral()) {
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
     4190:  652:        state.op.push(tok);
call    0 returned 100%
    #####:  653:        do {
     4190:  654:            tok = tok->next();
call    0 returned 100%
     4190:  655:        } while (Token::Match(tok, "%name%|%str%"));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     6313:  656:    } else if (tok->isName()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
     6004:  657:        if (Token::Match(tok, "return|case") || (state.cpp && tok->str() == "throw")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 15% (fallthrough)
branch  4 taken 85%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       58:  658:            if (tok->str() == "case")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        1:  659:                state.inCase = true;
       58:  660:            compileUnaryOp(tok, state, compileExpression);
call    0 returned 100%
       58:  661:            state.op.pop();
call    0 returned 100%
       58:  662:            if (state.inCase && Token::simpleMatch(tok, ": ;")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  663:                state.inCase = false;
    #####:  664:                tok = tok->next();
call    0 never executed
        -:  665:            }
     5946:  666:        } else if (Token::Match(tok, "sizeof !!(")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  667:            compileUnaryOp(tok, state, compileExpression);
call    0 never executed
    #####:  668:            state.op.pop();
call    0 never executed
     5946:  669:        } else if (state.cpp && findCppTypeInitPar(tok))  { // int(0), int*(123), ..
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  670:            tok = findCppTypeInitPar(tok);
call    0 never executed
    #####:  671:            state.op.push(tok);
call    0 never executed
    #####:  672:            tok = tok->tokAt(2);
call    0 never executed
     5946:  673:        } else if (state.cpp && iscpp11init(tok)) { // X{} X<Y>{} etc
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  674:            state.op.push(tok);
call    0 never executed
    #####:  675:            tok = tok->next();
call    0 never executed
    #####:  676:            if (tok->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  677:                tok = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:  678:            if (Token::Match(tok, "{ . %name% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  679:                const int inArrayAssignment = state.inArrayAssignment;
    #####:  680:                state.inArrayAssignment = 1;
    #####:  681:                compileBinOp(tok, state, compileExpression);
call    0 never executed
    #####:  682:                state.inArrayAssignment = inArrayAssignment;
        -:  683:            }
     5946:  684:        } else if (!state.cpp || !Token::Match(tok, "new|delete %name%|*|&|::|(|[")) {
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
call    2 returned 100%
branch  3 taken 88% (fallthrough)
branch  4 taken 12%
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
     5834:  685:            tok = skipDecl(tok);
call    0 returned 100%
     6280:  686:            while (tok->next() && tok->next()->isName())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
      223:  687:                tok = tok->next();
call    0 returned 100%
     5834:  688:            state.op.push(tok);
call    0 returned 100%
     5834:  689:            if (Token::Match(tok, "%name% <") && tok->linkAt(1))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 82% (fallthrough)
branch  5 taken 18%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       28:  690:                tok = tok->linkAt(1);
call    0 returned 100%
     5806:  691:            else if (Token::Match(tok, "%name% ..."))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  692:                tok = tok->next();
call    0 never executed
     5834:  693:            tok = tok->next();
call    0 returned 100%
     5834:  694:            if (Token::Match(tok, "%str%")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  695:                while (Token::Match(tok, "%name%|%str%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  696:                    tok = tok->next();
call    0 never executed
        -:  697:            }
        -:  698:        }
      309:  699:    } else if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
       17:  700:        const Token *prev = tok->previous();
call    0 returned 100%
       17:  701:        if (Token::simpleMatch(prev, ") {") && iscast(prev->link()))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  702:            prev = prev->link()->previous();
call    0 never executed
call    1 never executed
       17:  703:        if (Token::simpleMatch(tok->link(),"} [")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  704:            tok = tok->next();
call    0 never executed
       17:  705:        } else if (state.cpp && iscpp11init(tok)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       17:  706:            if (state.op.empty() || Token::Match(tok->previous(), "[{,]"))
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 88% (fallthrough)
branch  8 taken 12%
       15:  707:                compileUnaryOp(tok, state, compileExpression);
call    0 returned 100%
        -:  708:            else
        2:  709:                compileBinOp(tok, state, compileExpression);
call    0 returned 100%
       17:  710:            if (Token::Match(tok, "} ,|:"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  711:                tok = tok->next();
call    0 never executed
    #####:  712:        } else if (!state.inArrayAssignment && !Token::simpleMatch(prev, "=")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  713:            state.op.push(tok);
call    0 never executed
    #####:  714:            tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:  715:        } else {
    #####:  716:            if (tok->link() != tok->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  717:                state.inArrayAssignment++;
    #####:  718:                compileUnaryOp(tok, state, compileExpression);
call    0 never executed
    #####:  719:                while (Token::Match(tok, "} [,};]") && state.inArrayAssignment > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  720:                    tok = tok->next();
call    0 never executed
    #####:  721:                    state.inArrayAssignment--;
        -:  722:                }
        -:  723:            } else {
    #####:  724:                state.op.push(tok);
call    0 never executed
    #####:  725:                tok = tok->tokAt(2);
call    0 never executed
        -:  726:            }
        -:  727:        }
        -:  728:    }
        -:  729:}
        -:  730:
function _ZL12compileScopeRP5TokenR9AST_state called 10469 returned 100% blocks executed 80%
    10469:  731:static void compileScope(Token *&tok, AST_state& state)
        -:  732:{
    10469:  733:    compileTerm(tok, state);
call    0 returned 100%
    10537:  734:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10503:  735:        if (tok->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       34:  736:            Token *binop = tok;
       34:  737:            tok = tok->next();
call    0 returned 100%
       34:  738:            if (tok && tok->str() == "~") // Jump over ~ of destructor definition
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
        1:  739:                tok = tok->next();
call    0 returned 100%
       34:  740:            if (tok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       34:  741:                compileTerm(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  742:
       34:  743:            if (binop->previous() && (binop->previous()->isName() || (binop->previous()->link() && binop->strAt(-1) == ">")))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
       34:  744:                compileBinOp(binop, state, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  745:            else
    #####:  746:                compileUnaryOp(binop, state, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    10469:  747:        } else break;
        -:  748:    }
    10469:  749:}
        -:  750:
function _ZL13isPrefixUnaryPK5Tokenb called 308 returned 100% blocks executed 73%
      308:  751:static bool isPrefixUnary(const Token* tok, bool cpp)
        -:  752:{
      616:  753:    if (!tok->previous()
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
      359:  754:        || ((Token::Match(tok->previous(), "(|[|{|%op%|;|}|?|:|,|.|return|::") || (cpp && tok->strAt(-1) == "throw"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 83% (fallthrough)
branch  5 taken 17%
branch  6 taken 48% (fallthrough)
branch  7 taken 52%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
       51:  755:            && (tok->previous()->tokType() != Token::eIncDecOp || tok->tokType() == Token::eIncDecOp)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
       51:  756:        return true;
        -:  757:
      257:  758:    if (tok->str() == "*" && tok->previous()->tokType() == Token::eIncDecOp && isPrefixUnary(tok->previous(), cpp))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  759:        return true;
        -:  760:
      257:  761:    return tok->strAt(-1) == ")" && iscast(tok->linkAt(-1));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  762:}
        -:  763:
function _ZL18compilePrecedence2RP5TokenR9AST_state called 10436 returned 100% blocks executed 84%
    10436:  764:static void compilePrecedence2(Token *&tok, AST_state& state)
        -:  765:{
    10436:  766:    compileScope(tok, state);
call    0 returned 100%
    19830:  767:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    15133:  768:        if (tok->tokType() == Token::eIncDecOp && !isPrefixUnary(tok, state.cpp)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        5:  769:            compileUnaryOp(tok, state, compileScope);
call    0 returned 100%
    15128:  770:        } else if (tok->str() == "...") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2:  771:            state.op.push(tok);
call    0 returned 100%
        2:  772:            tok = tok->next();
call    0 returned 100%
        2:  773:            break;
    15126:  774:        } else if (tok->str() == "." && tok->strAt(1) != "*") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
       28:  775:            if (tok->strAt(1) == ".") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  776:                state.op.push(tok);
call    0 never executed
    #####:  777:                tok = tok->tokAt(3);
call    0 never executed
    #####:  778:                break;
        -:  779:            } else
       28:  780:                compileBinOp(tok, state, compileScope);
call    0 returned 100%
    15098:  781:        } else if (tok->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       30:  782:            if (state.cpp && isPrefixUnary(tok, state.cpp) && Token::Match(tok->link(), "] (|{")) { // Lambda
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 20% (fallthrough)
branch 10 taken 80%
        -:  783:                // What we do here:
        -:  784:                // - Nest the round bracket under the square bracket.
        -:  785:                // - Nest what follows the lambda (if anything) with the lambda opening [
        -:  786:                // - Compile the content of the lambda function as separate tree (this is done later)
        -:  787:                // this must be consistent with isLambdaCaptureList
        6:  788:                Token* const squareBracket = tok;
        6:  789:                if (Token::simpleMatch(squareBracket->link(), "] (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6:  790:                    Token* const roundBracket = squareBracket->link()->next();
call    0 returned 100%
call    1 returned 100%
        6:  791:                    Token* curlyBracket = roundBracket->link()->next();
call    0 returned 100%
call    1 returned 100%
        6:  792:                    if (Token::Match(curlyBracket, "mutable|const"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  793:                        curlyBracket = curlyBracket->next();
call    0 never executed
        6:  794:                    if (curlyBracket && curlyBracket->originalName() == "->") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  795:                        while (Token::Match(curlyBracket, "%name%|.|::|&|*"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  796:                            curlyBracket = curlyBracket->next();
call    0 never executed
        -:  797:                    }
       12:  798:                    if (curlyBracket && curlyBracket->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        6:  799:                        squareBracket->astOperand1(roundBracket);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  800:                        roundBracket->astOperand1(curlyBracket);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  801:                        state.op.push(squareBracket);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  802:                        tok = curlyBracket->link()->next();
call    0 returned 100%
call    1 returned 100%
       12:  803:                        continue;
        -:  804:                    }
        -:  805:                } else {
    #####:  806:                    Token* const curlyBracket = squareBracket->link()->next();
call    0 never executed
call    1 never executed
    #####:  807:                    squareBracket->astOperand1(curlyBracket);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  808:                    state.op.push(squareBracket);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:                    tok = curlyBracket->link()->next();
call    0 never executed
call    1 never executed
    #####:  810:                    continue;
        -:  811:                }
        -:  812:            }
        -:  813:
       24:  814:            const Token* const tok2 = tok;
       24:  815:            if (tok->strAt(1) != "]")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
       22:  816:                compileBinOp(tok, state, compileExpression);
call    0 returned 100%
        -:  817:            else
        2:  818:                compileUnaryOp(tok, state, compileExpression);
call    0 returned 100%
       24:  819:            tok = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
    15068:  820:        } else if (tok->str() == "(" && (!iscast(tok) || Token::Match(tok->previous(), "if|while|for|switch|catch"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 31% (fallthrough)
branch 12 taken 69%
     4634:  821:            Token* tok2 = tok;
     4634:  822:            tok = tok->next();
call    0 returned 100%
     4634:  823:            const bool opPrevTopSquare = !state.op.empty() && state.op.top() && state.op.top()->str() == "[";
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
     4634:  824:            const std::size_t oldOpSize = state.op.size();
call    0 returned 100%
     4634:  825:            compileExpression(tok, state);
call    0 returned 100%
     4634:  826:            tok = tok2;
    13902:  827:            if ((tok->previous() && tok->previous()->isName() && (!Token::Match(tok->previous(), "return|case") && (!state.cpp || !Token::Match(tok->previous(), "throw|delete"))))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
branch  9 taken 5% (fallthrough)
branch 10 taken 95%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
branch 15 taken 99% (fallthrough)
branch 16 taken 1%
       19:  828:                || (tok->strAt(-1) == "]" && (!state.cpp || !Token::Match(tok->linkAt(-1)->previous(), "new|delete")))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
       18:  829:                || (tok->strAt(-1) == ">" && tok->linkAt(-1))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       17:  830:                || (tok->strAt(-1) == ")" && !iscast(tok->linkAt(-1))) // Don't treat brackets to clarify precedence as function calls
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
     4650:  831:                || (tok->strAt(-1) == "}" && opPrevTopSquare)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
     4618:  832:                const bool operandInside = oldOpSize < state.op.size();
call    0 returned 100%
     4618:  833:                if (operandInside)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     4467:  834:                    compileBinOp(tok, state, nullptr);
call    0 returned 100%
        -:  835:                else
      151:  836:                    compileUnaryOp(tok, state, nullptr);
call    0 returned 100%
        -:  837:            }
     4634:  838:            tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
    10434:  839:        } else if (state.cpp && tok->str() == "{" && iscpp11init(tok)) {
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  840:            if (Token::simpleMatch(tok, "{ }"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  841:                compileUnaryOp(tok, state, compileExpression);
call    0 never executed
        -:  842:            else
    #####:  843:                compileBinOp(tok, state, compileExpression);
call    0 never executed
    #####:  844:            if (Token::simpleMatch(tok, "}"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:                tok = tok->next();
call    0 never executed
    10434:  846:        } else break;
        -:  847:    }
    10436:  848:}
        -:  849:
function _ZL18compilePrecedence3RP5TokenR9AST_state called 10409 returned 100% blocks executed 62%
    10409:  850:static void compilePrecedence3(Token *&tok, AST_state& state)
        -:  851:{
    10409:  852:    compilePrecedence2(tok, state);
call    0 returned 100%
    10755:  853:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10859:  854:        if ((Token::Match(tok, "[+-!~*&]") || tok->tokType() == Token::eIncDecOp) &&
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 16% (fallthrough)
branch  7 taken 84%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      277:  855:            isPrefixUnary(tok, state.cpp)) {
call    0 returned 100%
       45:  856:            if (Token::Match(tok, "* [*,)]")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  857:                Token* tok2 = tok->next();
call    0 never executed
    #####:  858:                while (tok2->next() && tok2->str() == "*")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  859:                    tok2 = tok2->next();
call    0 never executed
    #####:  860:                if (Token::Match(tok2, "[>),]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:                    tok = tok2;
    #####:  862:                    continue;
        -:  863:                }
        -:  864:            }
       45:  865:            compileUnaryOp(tok, state, compilePrecedence3);
call    0 returned 100%
    10537:  866:        } else if (tok->str() == "(" && iscast(tok)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       16:  867:            Token* castTok = tok;
       16:  868:            castTok->isCast(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:  869:            tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
       16:  870:            compilePrecedence3(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:  871:            compileUnaryOp(castTok, state, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    10521:  872:        } else if (state.cpp && Token::Match(tok, "new %name%|::|(")) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
call    2 returned 100%
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       46:  873:            Token* newtok = tok;
       46:  874:            tok = tok->next();
call    0 returned 100%
       46:  875:            bool innertype = false;
       46:  876:            if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        2:  877:                if (Token::Match(tok, "( &| %name%") && Token::Match(tok->link(), ") ( %type%") && Token::simpleMatch(tok->link()->linkAt(1), ") ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
    #####:  878:                    tok = tok->link()->next();
call    0 never executed
call    1 never executed
        2:  879:                if (Token::Match(tok->link(), ") ::| %type%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2:  880:                    tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
    #####:  881:                else if (Token::Match(tok, "( %type%") && Token::Match(tok->link(), ") [();,[]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  882:                    tok = tok->next();
call    0 never executed
    #####:  883:                    innertype = true;
    #####:  884:                } else if (Token::Match(tok, "( &| %name%") && Token::simpleMatch(tok->link(), ") (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  885:                    tok = tok->next();
call    0 never executed
    #####:  886:                    innertype = true;
        -:  887:                } else {
        -:  888:                    /* bad code */
    #####:  889:                    continue;
        -:  890:                }
        -:  891:            }
       46:  892:            state.op.push(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      142:  893:            while (Token::Match(tok, "%name%|*|&|<|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
       48:  894:                if (tok->link())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  895:                    tok = tok->link();
call    0 never executed
       48:  896:                tok = tok->next();
call    0 returned 100%
        -:  897:            }
       46:  898:            if (Token::Match(tok, "( const| %type% ) (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  899:                state.op.push(tok->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  900:                tok = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:  901:                compileBinOp(tok, state, compilePrecedence2);
call    0 never executed
branch  1 never executed
branch  2 never executed
       46:  902:            } else if (tok && (tok->str() == "[" || tok->str() == "(" || tok->str() == "{"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 61% (fallthrough)
branch  5 taken 39%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 75% (fallthrough)
branch  9 taken 25%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 10% (fallthrough)
branch 13 taken 90%
branch 14 taken 59% (fallthrough)
branch 15 taken 41%
       27:  903:                compilePrecedence2(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       19:  904:            else if (innertype && Token::simpleMatch(tok, ") [")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  905:                tok = tok->next();
call    0 never executed
    #####:  906:                compilePrecedence2(tok, state);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  907:            }
       46:  908:            compileUnaryOp(newtok, state, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46:  909:            if (innertype && Token::simpleMatch(tok, ") ,"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  910:                tok = tok->next();
call    0 never executed
    10475:  911:        } else if (state.cpp && Token::Match(tok, "delete %name%|*|&|::|(|[")) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
call    2 returned 100%
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       66:  912:            Token* tok2 = tok;
       66:  913:            tok = tok->next();
call    0 returned 100%
       66:  914:            if (tok && tok->str() == "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
branch  6 taken 44% (fallthrough)
branch  7 taken 56%
       29:  915:                tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
       66:  916:            compilePrecedence3(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       66:  917:            compileUnaryOp(tok2, state, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  918:        }
        -:  919:        // TODO: Handle sizeof
    10409:  920:        else break;
        -:  921:    }
    10409:  922:}
call    0 never executed
        -:  923:
function _ZL20compilePointerToElemRP5TokenR9AST_state called 10282 returned 100% blocks executed 75%
    10282:  924:static void compilePointerToElem(Token *&tok, AST_state& state)
        -:  925:{
    10282:  926:    compilePrecedence3(tok, state);
call    0 returned 100%
    10282:  927:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10282:  928:        if (Token::simpleMatch(tok, ". *")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  929:            compileBinOp(tok, state, compilePrecedence3);
call    0 never executed
    10282:  930:        } else break;
        -:  931:    }
    10282:  932:}
        -:  933:
function _ZL13compileMulDivRP5TokenR9AST_state called 10055 returned 100% blocks executed 97%
    10055:  934:static void compileMulDiv(Token *&tok, AST_state& state)
        -:  935:{
    10055:  936:    compilePointerToElem(tok, state);
call    0 returned 100%
    10509:  937:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10282:  938:        if (Token::Match(tok, "[/%]") || (tok->str() == "*" && !tok->astOperand1())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
      227:  939:            if (Token::Match(tok, "* [*,)]")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        4:  940:                Token* tok2 = tok->next();
call    0 returned 100%
       12:  941:                while (tok2->next() && tok2->str() == "*")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
        4:  942:                    tok2 = tok2->next();
call    0 returned 100%
        4:  943:                if (Token::Match(tok2, "[>),]")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  944:                    tok = tok2;
    #####:  945:                    break;
        -:  946:                }
        -:  947:            }
      227:  948:            compileBinOp(tok, state, compilePointerToElem);
call    0 returned 100%
    10055:  949:        } else break;
        -:  950:    }
    10055:  951:}
        -:  952:
function _ZL13compileAddSubRP5TokenR9AST_state called 10052 returned 100% blocks executed 100%
    10052:  953:static void compileAddSub(Token *&tok, AST_state& state)
        -:  954:{
    10052:  955:    compileMulDiv(tok, state);
call    0 returned 100%
    10058:  956:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10055:  957:        if (Token::Match(tok, "+|-") && !tok->astOperand1()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        3:  958:            compileBinOp(tok, state, compileMulDiv);
call    0 returned 100%
    10052:  959:        } else break;
        -:  960:    }
    10052:  961:}
        -:  962:
function _ZL12compileShiftRP5TokenR9AST_state called 10052 returned 100% blocks executed 75%
    10052:  963:static void compileShift(Token *&tok, AST_state& state)
        -:  964:{
    10052:  965:    compileAddSub(tok, state);
call    0 returned 100%
    10052:  966:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10052:  967:        if (Token::Match(tok, "<<|>>")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  968:            compileBinOp(tok, state, compileAddSub);
call    0 never executed
    10052:  969:        } else break;
        -:  970:    }
    10052:  971:}
        -:  972:
function _ZL14compileRelCompRP5TokenR9AST_state called 10041 returned 100% blocks executed 100%
    10041:  973:static void compileRelComp(Token *&tok, AST_state& state)
        -:  974:{
    10041:  975:    compileShift(tok, state);
call    0 returned 100%
    10063:  976:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10052:  977:        if (Token::Match(tok, "<|<=|>=|>") && !tok->link()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       11:  978:            compileBinOp(tok, state, compileShift);
call    0 returned 100%
    10041:  979:        } else break;
        -:  980:    }
    10041:  981:}
        -:  982:
function _ZL13compileEqCompRP5TokenR9AST_state called 10014 returned 100% blocks executed 100%
    10014:  983:static void compileEqComp(Token *&tok, AST_state& state)
        -:  984:{
    10014:  985:    compileRelComp(tok, state);
call    0 returned 100%
    10068:  986:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10041:  987:        if (Token::Match(tok, "==|!=")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       27:  988:            compileBinOp(tok, state, compileRelComp);
call    0 returned 100%
    10014:  989:        } else break;
        -:  990:    }
    10014:  991:}
        -:  992:
function _ZL10compileAndRP5TokenR9AST_state called 10013 returned 100% blocks executed 93%
    10013:  993:static void compileAnd(Token *&tok, AST_state& state)
        -:  994:{
    10013:  995:    compileEqComp(tok, state);
call    0 returned 100%
    10015:  996:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10014:  997:        if (tok->str() == "&" && !tok->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        2:  998:            Token* tok2 = tok->next();
call    0 returned 100%
        2:  999:            if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1000:                break;
        2: 1001:            if (tok2->str() == "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1002:                tok2 = tok2->next();
call    0 never executed
        2: 1003:            if (state.cpp && Token::Match(tok2, ",|)")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
        1: 1004:                tok = tok2;
        1: 1005:                break; // rValue reference
        -: 1006:            }
        1: 1007:            compileBinOp(tok, state, compileEqComp);
call    0 returned 100%
    10012: 1008:        } else break;
        -: 1009:    }
    10013: 1010:}
        -: 1011:
function _ZL10compileXorRP5TokenR9AST_state called 10013 returned 100% blocks executed 78%
    10013: 1012:static void compileXor(Token *&tok, AST_state& state)
        -: 1013:{
    10013: 1014:    compileAnd(tok, state);
call    0 returned 100%
    10013: 1015:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10013: 1016:        if (tok->str() == "^") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1017:            compileBinOp(tok, state, compileAnd);
call    0 never executed
    10013: 1018:        } else break;
        -: 1019:    }
    10013: 1020:}
        -: 1021:
function _ZL9compileOrRP5TokenR9AST_state called 10013 returned 100% blocks executed 78%
    10013: 1022:static void compileOr(Token *&tok, AST_state& state)
        -: 1023:{
    10013: 1024:    compileXor(tok, state);
call    0 returned 100%
    10013: 1025:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10013: 1026:        if (tok->str() == "|") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1027:            compileBinOp(tok, state, compileXor);
call    0 never executed
    10013: 1028:        } else break;
        -: 1029:    }
    10013: 1030:}
        -: 1031:
function _ZL15compileLogicAndRP5TokenR9AST_state called 10005 returned 100% blocks executed 100%
    10005: 1032:static void compileLogicAnd(Token *&tok, AST_state& state)
        -: 1033:{
    10005: 1034:    compileOr(tok, state);
call    0 returned 100%
    10021: 1035:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10013: 1036:        if (tok->str() == "&&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        8: 1037:            compileBinOp(tok, state, compileOr);
call    0 returned 100%
    10005: 1038:        } else break;
        -: 1039:    }
    10005: 1040:}
        -: 1041:
function _ZL14compileLogicOrRP5TokenR9AST_state called 10003 returned 100% blocks executed 100%
    10003: 1042:static void compileLogicOr(Token *&tok, AST_state& state)
        -: 1043:{
    10003: 1044:    compileLogicAnd(tok, state);
call    0 returned 100%
    10007: 1045:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10005: 1046:        if (tok->str() == "||") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 1047:            compileBinOp(tok, state, compileLogicAnd);
call    0 returned 100%
    10003: 1048:        } else break;
        -: 1049:    }
    10003: 1050:}
        -: 1051:
function _ZL20compileAssignTernaryRP5TokenR9AST_state called 10003 returned 100% blocks executed 74%
    10003: 1052:static void compileAssignTernary(Token *&tok, AST_state& state)
        -: 1053:{
    10003: 1054:    compileLogicOr(tok, state);
call    0 returned 100%
    10423: 1055:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10213: 1056:        if (tok->isAssignmentOp()) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
      208: 1057:            state.assign++;
      208: 1058:            compileBinOp(tok, state, compileAssignTernary);
call    0 returned 100%
      208: 1059:            if (state.assign > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      208: 1060:                state.assign--;
    10005: 1061:        } else if (tok->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1062:            // http://en.cppreference.com/w/cpp/language/operator_precedence says about ternary operator:
        -: 1063:            //       "The expression in the middle of the conditional operator (between ? and :) is parsed as if parenthesized: its precedence relative to ?: is ignored."
        -: 1064:            // Hence, we rely on Tokenizer::prepareTernaryOpForAST() to add such parentheses where necessary.
    #####: 1065:            if (tok->strAt(1) == ":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1066:                state.op.push(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1067:            }
    #####: 1068:            const int assign = state.assign;
    #####: 1069:            state.assign = 0;
    #####: 1070:            compileBinOp(tok, state, compileAssignTernary);
call    0 never executed
    #####: 1071:            state.assign = assign;
    10005: 1072:        } else if (tok->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        3: 1073:            if (state.depth == 1U && state.inCase) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 1074:                state.inCase = false;
        1: 1075:                tok = tok->next();
call    0 returned 100%
        1: 1076:                break;
        -: 1077:            }
        2: 1078:            if (state.assign > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1079:                break;
        2: 1080:            compileBinOp(tok, state, compileAssignTernary);
call    0 returned 100%
    10002: 1081:        } else break;
        -: 1082:    }
    10003: 1083:}
        -: 1084:
function _ZL12compileCommaRP5TokenR9AST_state called 9733 returned 100% blocks executed 86%
     9733: 1085:static void compileComma(Token *&tok, AST_state& state)
        -: 1086:{
     9733: 1087:    compileAssignTernary(tok, state);
call    0 returned 100%
     9853: 1088:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     9793: 1089:        if (tok->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       60: 1090:            if (Token::simpleMatch(tok, ", }"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1091:                tok = tok->next();
call    0 never executed
        -: 1092:            else
       60: 1093:                compileBinOp(tok, state, compileAssignTernary);
call    0 returned 100%
     9733: 1094:        } else break;
        -: 1095:    }
     9733: 1096:}
        -: 1097:
function _ZL17compileExpressionRP5TokenR9AST_state called 9733 returned 100% blocks executed 80%
     9733: 1098:static void compileExpression(Token *&tok, AST_state& state)
        -: 1099:{
     9733: 1100:    if (state.depth > AST_MAX_DEPTH)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1101:        return; // ticket #5592
     9733: 1102:    if (tok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     9733: 1103:        compileComma(tok, state);
call    0 returned 100%
        -: 1104:}
        -: 1105:
function _ZL19isLambdaCaptureListPK5Token called 55 returned 100% blocks executed 51%
       55: 1106:static bool isLambdaCaptureList(const Token * tok)
        -: 1107:{
        -: 1108:    // a lambda expression '[x](y){}' is compiled as:
        -: 1109:    // [
        -: 1110:    // `-(  <<-- optional
        -: 1111:    //   `-{
        -: 1112:    // see compilePrecedence2
       55: 1113:    if (tok->str() != "[")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1114:        return false;
       55: 1115:    if (!Token::Match(tok->link(), "] (|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
       54: 1116:        return false;
        1: 1117:    if (Token::simpleMatch(tok->astOperand1(), "{") && tok->astOperand1() == tok->link()->next())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1118:        return true;
        1: 1119:    if (!tok->astOperand1() || tok->astOperand1()->str() != "(")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        1: 1120:        return false;
    #####: 1121:    const Token * params = tok->astOperand1();
call    0 never executed
    #####: 1122:    if (!params || !params->astOperand1() || params->astOperand1()->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1123:        return false;
    #####: 1124:    return true;
        -: 1125:}
        -: 1126:
        -: 1127:static Token * createAstAtToken(Token *tok, bool cpp);
        -: 1128:
        -: 1129:// Compile inner expressions inside inner ({..}) and lambda bodies
function _ZL21createAstAtTokenInnerP5TokenPKS_b called 4981 returned 100% blocks executed 20%
     4981: 1130:static void createAstAtTokenInner(Token * const tok1, const Token *endToken, bool cpp)
        -: 1131:{
    20679: 1132:    for (Token *tok = tok1; tok && tok != endToken; tok = tok ? tok->next() : nullptr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 76% (fallthrough)
branch  3 taken 24%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
    15698: 1133:        if (tok->str() == "{" && !iscpp11init(tok)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1134:            if (Token::simpleMatch(tok->astOperand1(), ","))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1135:                continue;
    #####: 1136:            if (Token::simpleMatch(tok->previous(), "( {"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1137:                ;
        -: 1138:            // struct assignment
    #####: 1139:            else if (Token::simpleMatch(tok->previous(), ") {") && Token::simpleMatch(tok->linkAt(-1), "( struct"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1140:                continue;
        -: 1141:            // Lambda function
    #####: 1142:            else if (Token::simpleMatch(tok->astParent(), "(") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1143:                     Token::simpleMatch(tok->astParent()->astParent(), "[") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1144:                     tok->astParent()->astParent()->astOperand1() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1145:                     tok == tok->astParent()->astParent()->astOperand1()->astOperand1())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1146:                ;
        -: 1147:            else {
        -: 1148:                // function argument is initializer list?
    #####: 1149:                const Token *parent = tok->astParent();
call    0 never executed
    #####: 1150:                while (Token::simpleMatch(parent, ","))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1151:                    parent = parent->astParent();
call    0 never executed
    #####: 1152:                if (!parent || !Token::Match(parent->previous(), "%name% ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1153:                    // not function argument..
    #####: 1154:                    continue;
        -: 1155:            }
        -: 1156:
    #####: 1157:            if (Token::simpleMatch(tok->previous(), "( { ."))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1158:                break;
        -: 1159:
    #####: 1160:            const Token * const endToken2 = tok->link();
call    0 never executed
    #####: 1161:            for (; tok && tok != endToken && tok != endToken2; tok = tok ? tok->next() : nullptr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 1162:                tok = createAstAtToken(tok, cpp);
call    0 never executed
    15698: 1163:        } else if (tok->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       55: 1164:            if (isLambdaCaptureList(tok)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1165:                tok = tok->astOperand1();
call    0 never executed
    #####: 1166:                if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1167:                    tok = tok->astOperand1();
call    0 never executed
    #####: 1168:                const Token * const endToken2 = tok->link();
call    0 never executed
    #####: 1169:                for (; tok && tok != endToken && tok != endToken2; tok = tok ? tok->next() : nullptr)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 1170:                    tok = createAstAtToken(tok, cpp);
call    0 never executed
        -: 1171:            }
        -: 1172:        }
        -: 1173:    }
     4981: 1174:}
        -: 1175:
function _ZL10findAstTopP5TokenS0_ called 6 returned 100% blocks executed 38%
        6: 1176:static Token * findAstTop(Token *tok1, Token *tok2)
        -: 1177:{
        6: 1178:    for (Token *tok = tok1; tok && (tok != tok2); tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
call    4 never executed
        4: 1179:        if (tok->astParent() || tok->astOperand1() || tok->astOperand2())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        4: 1180:            return tok->astTop();
call    0 returned 100%
    #####: 1181:        if (Token::simpleMatch(tok, "( {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1182:            tok = tok->link();
call    0 never executed
        -: 1183:    }
        2: 1184:    for (Token *tok = tok1; tok && (tok != tok2); tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
    #####: 1185:        if (tok->isName() || tok->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1186:            return tok;
    #####: 1187:        if (Token::simpleMatch(tok, "( {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1188:            tok = tok->link();
call    0 never executed
        -: 1189:    }
        2: 1190:    return nullptr;
        -: 1191:}
        -: 1192:
function _ZL16createAstAtTokenP5Tokenb called 20415 returned 100% blocks executed 68%
    20415: 1193:static Token * createAstAtToken(Token *tok, bool cpp)
        -: 1194:{
    20415: 1195:    if (Token::simpleMatch(tok, "for (")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        3: 1196:        Token *tok2 = skipDecl(tok->tokAt(2));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        3: 1197:        Token *init1 = nullptr;
        3: 1198:        Token * const endPar = tok->next()->link();
call    0 returned 100%
call    1 returned 100%
        3: 1199:        while (tok2 && tok2 != endPar && tok2->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
        2: 1200:            if (tok2->str() == "<" && tok2->link()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1201:                tok2 = tok2->link();
call    0 never executed
    #####: 1202:                if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1203:                    break;
        2: 1204:            } else if (Token::Match(tok2, "%name% %op%|(|[|.|:|::") || Token::Match(tok2->previous(), "[(;{}] %cop%|(")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
        2: 1205:                init1 = tok2;
        2: 1206:                AST_state state1(cpp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        2: 1207:                compileExpression(tok2, state1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1208:                if (Token::Match(tok2, ";|)"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2: 1209:                    break;
    #####: 1210:                init1 = nullptr;
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100%
        -: 1211:            }
    #####: 1212:            if (!tok2) // #7109 invalid code
branch  0 never executed
branch  1 never executed
    #####: 1213:                return nullptr;
    #####: 1214:            tok2 = tok2->next();
call    0 never executed
        -: 1215:        }
        3: 1216:        if (!tok2 || tok2->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1217:            if (tok2 == endPar && init1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1218:                tok->next()->astOperand2(init1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1219:                tok->next()->astOperand1(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:            }
    #####: 1221:            return tok2;
        -: 1222:        }
        -: 1223:
        3: 1224:        Token * const init = init1 ? init1 : tok2;
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1225:
        3: 1226:        Token * const semicolon1 = tok2;
        3: 1227:        tok2 = tok2->next();
call    0 returned 100%
        6: 1228:        AST_state state2(cpp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        3: 1229:        compileExpression(tok2, state2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1230:
        3: 1231:        Token * const semicolon2 = tok2;
        3: 1232:        if (!semicolon2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1233:            return nullptr; // invalid code #7235
        3: 1234:        tok2 = tok2->next();
call    0 returned 100%
        6: 1235:        AST_state state3(cpp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        3: 1236:        if (Token::simpleMatch(tok2, "( {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1237:            state3.op.push(tok2->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1238:            tok2 = tok2->link()->next();
call    0 never executed
call    1 never executed
        -: 1239:        }
        3: 1240:        compileExpression(tok2, state3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1241:
        3: 1242:        if (init != semicolon1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2: 1243:            semicolon1->astOperand1(init->astTop());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        3: 1244:        tok2 = findAstTop(semicolon1->next(), semicolon2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        3: 1245:        if (tok2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2: 1246:            semicolon2->astOperand1(tok2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 1247:        tok2 = findAstTop(semicolon2->next(), endPar);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        3: 1248:        if (tok2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2: 1249:            semicolon2->astOperand2(tok2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1250:        else if (!state3.op.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1251:            semicolon2->astOperand2(state3.op.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1252:
        3: 1253:        semicolon1->astOperand2(semicolon2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 1254:        tok->next()->astOperand1(tok);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        3: 1255:        tok->next()->astOperand2(semicolon1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1256:
        3: 1257:        createAstAtTokenInner(endPar->link(), endPar, cpp);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1258:
        3: 1259:        return endPar;
        -: 1260:    }
        -: 1261:
    20412: 1262:    if (cpp && Token::Match(tok, "if|switch (")) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       25: 1263:        Token *semicolon = nullptr;
        -: 1264:        Token *tok2;
       97: 1265:        for (tok2 = tok->tokAt(2); tok2 && tok2->str() != ")"; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 74% (fallthrough)
branch  8 taken 26%
branch  9 taken 74% (fallthrough)
branch 10 taken 26%
call   11 returned 100%
       72: 1266:            if (tok2->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1267:                if (semicolon)
branch  0 never executed
branch  1 never executed
    #####: 1268:                    break;
    #####: 1269:                semicolon = tok2;
        -: 1270:            }
       72: 1271:            if (tok2->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        6: 1272:                tok2 = tok2->link();
call    0 returned 100%
        -: 1273:        }
       25: 1274:        if (semicolon && tok2 == tok->linkAt(1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1275:            tok2 = skipDecl(tok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1276:            Token *init1 = tok2;
    #####: 1277:            AST_state state1(cpp);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1278:            compileExpression(tok2, state1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1279:
    #####: 1280:            tok2 = semicolon->next();
call    0 never executed
    #####: 1281:            Token *expr1 = tok2;
    #####: 1282:            AST_state state2(cpp);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1283:            compileExpression(tok2, state2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1284:
    #####: 1285:            semicolon->astOperand1(findAstTop(init1, semicolon->previous()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1286:            semicolon->astOperand2(findAstTop(expr1, tok2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1287:            tok->next()->astOperand1(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1288:            tok->next()->astOperand2(semicolon);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1289:        }
        -: 1290:    }
        -: 1291:
    20412: 1292:    if (Token::simpleMatch(tok, "( {"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1293:        return tok;
        -: 1294:
    20412: 1295:    if (Token::Match(tok, "%type% <") && tok->linkAt(1) && !Token::Match(tok->linkAt(1), "> [({]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1296:        return tok->linkAt(1);
call    0 never executed
        -: 1297:
    20412: 1298:    if (Token::Match(tok, "%type% %name%|*|&|::") && tok->str() != "return") {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 96% (fallthrough)
branch  6 taken 4%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
      409: 1299:        bool decl = false;
      409: 1300:        Token *typetok = tok;
     2137: 1301:        while (Token::Match(typetok, "%type%|::|*|&")) {
call    0 returned 100%
branch  1 taken 68% (fallthrough)
branch  2 taken 32%
      864: 1302:            if (typetok->isStandardType() || Token::Match(typetok, "struct|const|static"))
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 40% (fallthrough)
branch  7 taken 60%
      348: 1303:                decl = true;
      864: 1304:            typetok = typetok->next();
call    0 returned 100%
        -: 1305:        }
      409: 1306:        if (decl && Token::Match(typetok->previous(), "[*&] %var% ="))
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        1: 1307:            tok = typetok;
        -: 1308:    }
        -: 1309:
    20412: 1310:    if (Token::Match(tok, "return|case") || (cpp && tok->str() == "throw") || !tok->previous() || Token::Match(tok, "%name% %op%|(|[|.|::|<|?|;") || Token::Match(tok->previous(), "[;{}] %cop%|++|--|( !!{")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
call    9 returned 100%
branch 10 taken 99% (fallthrough)
branch 11 taken 1%
call   12 returned 100%
branch 13 taken 77% (fallthrough)
branch 14 taken 23%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 1% (fallthrough)
branch 18 taken 99%
branch 19 taken 24% (fallthrough)
branch 20 taken 76%
     4978: 1311:        if (cpp && (Token::Match(tok->tokAt(-2), "[;{}] new|delete %name%") || Token::Match(tok->tokAt(-3), "[;{}] :: new|delete %name%")))
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 92% (fallthrough)
branch  9 taken 8%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 1% (fallthrough)
branch 19 taken 99%
       36: 1312:            tok = tok->previous();
call    0 returned 100%
        -: 1313:
     4978: 1314:        Token * const tok1 = tok;
     9956: 1315:        AST_state state(cpp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
     4978: 1316:        compileExpression(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     4978: 1317:        const Token * const endToken = tok;
     4978: 1318:        if (endToken == tok1 || !endToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1319:            return tok1;
        -: 1320:
     4978: 1321:        createAstAtTokenInner(tok1->next(), endToken, cpp);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1322:
     4978: 1323:        return endToken->previous();
call    0 returned 100%
        -: 1324:    }
        -: 1325:
    15434: 1326:    if (cpp && tok->str() == "{" && iscpp11init(tok)) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 22% (fallthrough)
branch  5 taken 78%
call    6 returned 100%
branch  7 taken 9% (fallthrough)
branch  8 taken 91%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       28: 1327:        AST_state state(cpp);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       14: 1328:        compileExpression(tok, state);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14: 1329:        return tok;
        -: 1330:    }
        -: 1331:
    15420: 1332:    return tok;
        -: 1333:}
        -: 1334:
function _ZN9TokenList9createAstEv called 194 returned 100% blocks executed 89%
      194: 1335:void TokenList::createAst()
        -: 1336:{
    20609: 1337:    for (Token *tok = mTokensFrontBack.front; tok; tok = tok ? tok->next() : nullptr) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
    20415: 1338:        tok = createAstAtToken(tok, isCPP());
call    0 returned 100%
call    1 returned 100%
        -: 1339:    }
      194: 1340:}
        -: 1341:
function _ZNK9TokenList11validateAstEv called 194 returned 100% blocks executed 50%
      194: 1342:void TokenList::validateAst() const
        -: 1343:{
        -: 1344:    // Check for some known issues in AST to avoid crash/hang later on
      388: 1345:    std::set < const Token* > safeAstTokens; // list of "safe" AST tokens without endless recursion
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    36393: 1346:    for (const Token *tok = mTokensFrontBack.front; tok; tok = tok->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
        -: 1347:        // Syntax error if binary operator only has 1 operand
    36199: 1348:        if ((tok->isAssignmentOp() || tok->isComparisonOp() || Token::Match(tok,"[|^/%]")) && tok->astOperand1() && !tok->astOperand2())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 returned 100%
branch 12 taken 99% (fallthrough)
branch 13 taken 1%
call   14 returned 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
    #####: 1349:            throw InternalError(tok, "Syntax Error: AST broken, binary operator has only one operand.", InternalError::AST);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 1350:
        -: 1351:        // Syntax error if we encounter "?" with operand2 that is not ":"
    36199: 1352:        if (tok->astOperand2() && tok->str() == "?" && tok->astOperand2()->str() != ":")
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 1353:            throw InternalError(tok, "Syntax Error: AST broken, ternary operator lacks ':'.", InternalError::AST);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 1354:
        -: 1355:        // Check for endless recursion
    36199: 1356:        const Token* parent = tok->astParent();
call    0 returned 100%
    36199: 1357:        if (parent) {
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
    21226: 1358:            std::set < const Token* > astTokens; // list of anchestors
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    10613: 1359:            astTokens.insert(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      442: 1360:            do {
    11055: 1361:                if (safeAstTokens.find(parent) != safeAstTokens.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 52% (fallthrough)
branch  8 taken 48%
call    9 never executed
     5787: 1362:                    break;
     5268: 1363:                if (astTokens.find(parent) != astTokens.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
    #####: 1364:                    throw InternalError(tok, "AST broken: endless recursion from '" + tok->str() + "'", InternalError::AST);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
     5268: 1365:                astTokens.insert(parent);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
     5268: 1366:            } while ((parent = parent->astParent()) != nullptr);
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
    10613: 1367:            safeAstTokens.insert(astTokens.begin(), astTokens.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
    25586: 1368:        } else if (tok->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
      676: 1369:            safeAstTokens.clear();
call    0 returned 100%
        -: 1370:        } else {
    24910: 1371:            safeAstTokens.insert(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 1372:        }
        -: 1373:
        -: 1374:        // Check binary operators
    36199: 1375:        if (Token::Match(tok, "%or%|%oror%|%assign%|%comp%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        -: 1376:            // Skip lambda captures
      248: 1377:            if (Token::Match(tok, "= ,|]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      177: 1378:                continue;
        -: 1379:            // Don't check templates
      248: 1380:            if (tok->link())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1381:                continue;
        -: 1382:            // Skip pure virtual functions
      248: 1383:            if (Token::simpleMatch(tok->previous(), ") = 0"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1384:                continue;
        -: 1385:            // Skip operator definitions
      248: 1386:            if (Token::simpleMatch(tok->previous(), "operator"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1387:                continue;
        -: 1388:            // Skip incomplete code
      248: 1389:            if (!tok->astOperand1() && !tok->astOperand2() && !tok->astParent())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1390:                continue;
        -: 1391:            // Skip lambda assignment and/or initializer
      248: 1392:            if (Token::Match(tok, "= {|^|["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1393:                continue;
        -: 1394:            // FIXME: Workaround broken AST assignment in type aliases
      248: 1395:            if (Token::Match(tok->previous(), "%name% = %name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 71% (fallthrough)
branch  5 taken 29%
      177: 1396:                continue;
       71: 1397:            if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1398:                throw InternalError(tok, "Syntax Error: AST broken, binary operator '" + tok->str() + "' doesn't have two operands.", InternalError::AST);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -: 1399:        }
        -: 1400:    }
      194: 1401:}
        -: 1402:
function _ZNK9TokenList11getOrigFileB5cxx11EPK5Token called 78 returned 100% blocks executed 100%
       78: 1403:std::string TokenList::getOrigFile(const Token *tok) const
        -: 1404:{
       78: 1405:    return mOrigFiles.at(tok->fileIndex());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 1406:}
        -: 1407:
function _ZNK9TokenList4fileB5cxx11EPK5Token called 78 returned 100% blocks executed 100%
       78: 1408:const std::string& TokenList::file(const Token *tok) const
        -: 1409:{
       78: 1410:    return mFiles.at(tok->fileIndex());
call    0 returned 100%
call    1 returned 100%
        -: 1411:}
        -: 1412:
function _ZNK9TokenList8fileLineB5cxx11EPK5Token called 0 returned 0% blocks executed 0%
    #####: 1413:std::string TokenList::fileLine(const Token *tok) const
        -: 1414:{
    #####: 1415:    return ErrorLogger::ErrorMessage::FileLocation(tok, this).stringify();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1416:}
        -: 1417:
function _ZNK9TokenList13validateTokenEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1418:bool TokenList::validateToken(const Token* tok) const
        -: 1419:{
    #####: 1420:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1421:        return true;
    #####: 1422:    for (const Token *t = mTokensFrontBack.front; t; t = t->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1423:        if (tok==t)
branch  0 never executed
branch  1 never executed
    #####: 1424:            return true;
        -: 1425:    }
    #####: 1426:    return false;
        -: 1427:}
        -: 1428:
function _ZN9TokenList21simplifyPlatformTypesEv called 194 returned 100% blocks executed 30%
      194: 1429:void TokenList::simplifyPlatformTypes()
        -: 1430:{
      194: 1431:    const bool isCPP11  = mSettings->standards.cpp >= Standards::CPP11;
        -: 1432:
        -: 1433:    enum { isLongLong, isLong, isInt } type;
        -: 1434:
        -: 1435:    /** @todo This assumes a flat address space. Not true for segmented address space (FAR *). */
        -: 1436:
      194: 1437:    if (mSettings->sizeof_size_t == mSettings->sizeof_long)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      194: 1438:        type = isLong;
    #####: 1439:    else if (mSettings->sizeof_size_t == mSettings->sizeof_long_long)
branch  0 never executed
branch  1 never executed
    #####: 1440:        type = isLongLong;
    #####: 1441:    else if (mSettings->sizeof_size_t == mSettings->sizeof_int)
branch  0 never executed
branch  1 never executed
    #####: 1442:        type = isInt;
        -: 1443:    else
    #####: 1444:        return;
        -: 1445:
    32408: 1446:    for (Token *tok = front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
        -: 1447:        // pre-check to reduce unneeded match calls
    32214: 1448:        if (!Token::Match(tok, "std| ::| %type%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
    23805: 1449:            continue;
        -: 1450:        bool isUnsigned;
     8409: 1451:        if (Token::Match(tok, "std| ::| size_t|uintptr_t|uintmax_t")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 1452:            if (isCPP11 && tok->strAt(-1) == "using" && tok->strAt(1) == "=")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 1453:                continue;
        2: 1454:            isUnsigned = true;
    16814: 1455:        } else if (Token::Match(tok, "std| ::| ssize_t|ptrdiff_t|intptr_t|intmax_t")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1456:            if (isCPP11 && tok->strAt(-1) == "using" && tok->strAt(1) == "=")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1457:                continue;
    #####: 1458:            isUnsigned = false;
        -: 1459:        } else
     8407: 1460:            continue;
        -: 1461:
        2: 1462:        bool inStd = false;
        2: 1463:        if (tok->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1464:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 1465:        } else if (tok->str() == "std") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1466:            if (tok->next()->str() != "::")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1467:                continue;
    #####: 1468:            inStd = true;
    #####: 1469:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1470:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1471:        }
        -: 1472:
        2: 1473:        if (inStd)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1474:            tok->originalName("std::" + tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1475:        else
        2: 1476:            tok->originalName(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 1477:        if (isUnsigned)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1478:            tok->isUnsigned(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1479:
        2: 1480:        switch (type) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
    #####: 1481:        case isLongLong:
    #####: 1482:            tok->isLong(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1483:            tok->str("long");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1484:            break;
        2: 1485:        case isLong:
        2: 1486:            tok->str("long");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1487:            break;
    #####: 1488:        case isInt:
    #####: 1489:            tok->str("int");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1490:            break;
        -: 1491:        }
        -: 1492:    }
        -: 1493:
      388: 1494:    const std::string platform_type(mSettings->platformString());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
        -: 1495:
    32408: 1496:    for (Token *tok = front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    32214: 1497:        if (tok->tokType() != Token::eType && tok->tokType() != Token::eName)
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 75% (fallthrough)
branch  5 taken 25%
branch  6 taken 74% (fallthrough)
branch  7 taken 26%
    23848: 1498:            continue;
        -: 1499:
     8366: 1500:        const Library::PlatformType * const platformtype = mSettings->library.platform_type(tok->str(), platform_type);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1501:
     8366: 1502:        if (platformtype) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1503:            // check for namespace
    #####: 1504:            if (tok->strAt(-1) == "::") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1505:                const Token * tok1 = tok->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1506:                // skip when non-global namespace defined
    #####: 1507:                if (tok1 && tok1->tokType() == Token::eName)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1508:                    continue;
    #####: 1509:                tok = tok->previous();
call    0 never executed
    #####: 1510:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1511:            }
        -: 1512:            Token *typeToken;
    #####: 1513:            if (platformtype->_const_ptr) {
branch  0 never executed
branch  1 never executed
    #####: 1514:                tok->str("const");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1515:                tok->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1516:                tok->insertToken(platformtype->mType);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1517:                typeToken = tok;
    #####: 1518:            } else if (platformtype->_pointer) {
branch  0 never executed
branch  1 never executed
    #####: 1519:                tok->str(platformtype->mType);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1520:                typeToken = tok;
    #####: 1521:                tok->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1522:            } else if (platformtype->_ptr_ptr) {
branch  0 never executed
branch  1 never executed
    #####: 1523:                tok->str(platformtype->mType);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1524:                typeToken = tok;
    #####: 1525:                tok->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1526:                tok->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1527:            } else {
    #####: 1528:                tok->originalName(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1529:                tok->str(platformtype->mType);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1530:                typeToken = tok;
        -: 1531:            }
    #####: 1532:            if (platformtype->_signed)
branch  0 never executed
branch  1 never executed
    #####: 1533:                typeToken->isSigned(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1534:            if (platformtype->_unsigned)
branch  0 never executed
branch  1 never executed
    #####: 1535:                typeToken->isUnsigned(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1536:            if (platformtype->_long)
branch  0 never executed
branch  1 never executed
    #####: 1537:                typeToken->isLong(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1538:        }
        -: 1539:    }
        -: 1540:}
        -: 1541:
function _ZN9TokenList15simplifyStdTypeEv called 194 returned 100% blocks executed 81%
      194: 1542:void TokenList::simplifyStdType()
        -: 1543:{
    32402: 1544:    for (Token *tok = front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    32208: 1545:        if (Token::Match(tok, "char|short|int|long|unsigned|signed|double|float") || (mSettings->standards.c >= Standards::C99 && Token::Match(tok, "complex|_Complex"))) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      278: 1546:            bool isFloat= false;
      278: 1547:            bool isSigned = false;
      278: 1548:            bool isUnsigned = false;
      278: 1549:            bool isComplex = false;
      278: 1550:            int countLong = 0;
      278: 1551:            Token* typeSpec = nullptr;
        -: 1552:
      278: 1553:            Token* tok2 = tok;
      846: 1554:            for (; tok2->next(); tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
      562: 1555:                if (tok2->str() == "long") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 1556:                    countLong++;
        2: 1557:                    if (!isFloat)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1558:                        typeSpec = tok2;
      560: 1559:                } else if (tok2->str() == "short") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1560:                    typeSpec = tok2;
      560: 1561:                } else if (tok2->str() == "unsigned")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        6: 1562:                    isUnsigned = true;
      554: 1563:                else if (tok2->str() == "signed")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1564:                    isSigned = true;
      554: 1565:                else if (Token::Match(tok2, "float|double")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        3: 1566:                    isFloat = true;
        3: 1567:                    typeSpec = tok2;
      551: 1568:                } else if (mSettings->standards.c >= Standards::C99 && Token::Match(tok2, "complex|_Complex"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1569:                    isComplex = !isFloat || tok2->str() == "_Complex" || Token::Match(tok2->next(), "*|&|%name%"); // Ensure that "complex" is not the variables name
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
      551: 1570:                else if (Token::Match(tok2, "char|int")) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
      273: 1571:                    if (!typeSpec)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      273: 1572:                        typeSpec = tok2;
        -: 1573:                } else
      278: 1574:                    break;
        -: 1575:            }
        -: 1576:
      278: 1577:            if (!typeSpec) { // unsigned i; or similar declaration
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1578:                if (!isComplex) { // Ensure that "complex" is not the variables name
branch  0 never executed
branch  1 never executed
    #####: 1579:                    tok->str("int");
call    0 never executed
    #####: 1580:                    tok->isSigned(isSigned);
call    0 never executed
    #####: 1581:                    tok->isUnsigned(isUnsigned);
call    0 never executed
        -: 1582:                }
        -: 1583:            } else {
      278: 1584:                typeSpec->isLong(typeSpec->isLong() || (isFloat && countLong == 1) || countLong > 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 returned 100%
      278: 1585:                typeSpec->isComplex(typeSpec->isComplex() || (isFloat && isComplex));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
      278: 1586:                typeSpec->isSigned(typeSpec->isSigned() || isSigned);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
      278: 1587:                typeSpec->isUnsigned(typeSpec->isUnsigned() || isUnsigned);
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
        -: 1588:
        -: 1589:                // Remove specifiers
      278: 1590:                const Token* tok3 = tok->previous();
call    0 returned 100%
      278: 1591:                tok2 = tok2->previous();
call    0 returned 100%
      846: 1592:                while (tok3 != tok2) {
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
      290: 1593:                    if (tok2 != typeSpec &&
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
        6: 1594:                        (isComplex || !Token::Match(tok2, "complex|_Complex")))  // Ensure that "complex" is not the variables name
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 1595:                        tok2->deleteThis();
call    0 returned 100%
      284: 1596:                    tok2 = tok2->previous();
call    0 returned 100%
        -: 1597:                }
        -: 1598:            }
        -: 1599:        }
        -: 1600:    }
function _GLOBAL__sub_I__ZN9TokenListC2EPK8Settings called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
      197: 1601:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -: 1602:
