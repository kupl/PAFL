        -:    0:Source:/home/workspace/lib/timer.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/timer.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/timer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18://---------------------------------------------------------------------------
        -:   19:#ifndef timerH
        -:   20:#define timerH
        -:   21://---------------------------------------------------------------------------
        -:   22:
        -:   23:#include "config.h"
        -:   24:
        -:   25:#include <ctime>
        -:   26:#include <map>
        -:   27:#include <string>
        -:   28:
        -:   29:enum class SHOWTIME_MODES {
        -:   30:    SHOWTIME_NONE = 0,
        -:   31:    SHOWTIME_FILE,
        -:   32:    SHOWTIME_SUMMARY,
        -:   33:    SHOWTIME_TOP5
        -:   34:};
        -:   35:
        -:   36:class CPPCHECKLIB TimerResultsIntf {
        -:   37:public:
function _ZN16TimerResultsIntfD0Ev called 0 returned 0% blocks executed 0%
function _ZN16TimerResultsIntfD2Ev called 0 returned 0% blocks executed 0%
    #####:   38:    virtual ~TimerResultsIntf() { }
call    0 never executed
call    1 never executed
        -:   39:
        -:   40:    virtual void AddResults(const std::string& str, std::clock_t clocks) = 0;
        -:   41:};
        -:   42:
        -:   43:struct TimerResultsData {
        -:   44:    std::clock_t mClocks;
        -:   45:    long mNumberOfResults;
        -:   46:
function _ZN16TimerResultsDataC2Ev called 0 returned 0% blocks executed 0%
    #####:   47:    TimerResultsData()
    #####:   48:        : mClocks(0)
    #####:   49:        , mNumberOfResults(0) {
    #####:   50:    }
        -:   51:
function _ZNK16TimerResultsData7secondsEv called 0 returned 0% blocks executed 0%
    #####:   52:    double seconds() const {
    #####:   53:        const double ret = (double)((unsigned long)mClocks) / (double)CLOCKS_PER_SEC;
    #####:   54:        return ret;
        -:   55:    }
        -:   56:};
        -:   57:
function _ZN12TimerResultsD0Ev called 0 returned 0% blocks executed 0%
function _ZN12TimerResultsD2Ev called 0 returned 0% blocks executed 0%
    #####:   58:class CPPCHECKLIB TimerResults : public TimerResultsIntf {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   59:public:
        -:   60:    TimerResults() {
        -:   61:    }
        -:   62:
        -:   63:    void ShowResults(SHOWTIME_MODES mode) const;
        -:   64:    void AddResults(const std::string& str, std::clock_t clocks) OVERRIDE;
        -:   65:
        -:   66:private:
        -:   67:    std::map<std::string, struct TimerResultsData> mResults;
        -:   68:};
        -:   69:
        -:   70:class CPPCHECKLIB Timer {
        -:   71:public:
        -:   72:    Timer(const std::string& str, SHOWTIME_MODES showtimeMode, TimerResultsIntf* timerResults = nullptr);
        -:   73:    ~Timer();
        -:   74:    void Stop();
        -:   75:
        -:   76:private:
        -:   77:    Timer(const Timer& other); // disallow copying
        -:   78:    Timer& operator=(const Timer&); // disallow assignments
        -:   79:
        -:   80:    const std::string mStr;
        -:   81:    TimerResultsIntf* mTimerResults;
        -:   82:    std::clock_t mStart;
        -:   83:    const SHOWTIME_MODES mShowTimeMode;
        -:   84:    bool mStopped;
        -:   85:};
        -:   86://---------------------------------------------------------------------------
        -:   87:#endif // timerH
