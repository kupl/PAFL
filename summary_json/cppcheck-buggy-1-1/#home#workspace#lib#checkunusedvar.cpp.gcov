        -:    0:Source:/home/workspace/lib/checkunusedvar.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkunusedvar.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkunusedvar.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "checkunusedvar.h"
        -:   22:
        -:   23:#include "astutils.h"
        -:   24:#include "errorlogger.h"
        -:   25:#include "settings.h"
        -:   26:#include "symboldatabase.h"
        -:   27:#include "token.h"
        -:   28:#include "tokenize.h"
        -:   29:#include "valueflow.h"
        -:   30:
        -:   31:#include <algorithm>
        -:   32:#include <cctype>
        -:   33:#include <cstddef>
        -:   34:#include <list>
        -:   35:#include <set>
        -:   36:#include <utility>
        -:   37:#include <vector>
        -:   38://---------------------------------------------------------------------------
        -:   39:
        -:   40:// Register this check class (by creating a static instance of it)
        -:   41:namespace {
        1:   42:    CheckUnusedVar instance;
call    0 returned 100%
call    1 returned 100%
        -:   43:}
        -:   44:
        1:   45:static const struct CWE CWE563(563U);   // Assignment to Variable without Use ('Unused Variable')
call    0 returned 100%
        1:   46:static const struct CWE CWE665(665U);   // Improper Initialization
call    0 returned 100%
        -:   47:
        -:   48:
        -:   49:/**
        -:   50: * @brief This class is used create a list of variables within a function.
        -:   51: */
function _ZN9VariablesD2Ev called 0 returned 0% blocks executed 0%
function _ZN9VariablesC2Ev called 0 returned 0% blocks executed 0%
    #####:   52:class Variables {
call    0 never executed
call    1 never executed
        -:   53:public:
        -:   54:    enum VariableType { standard, array, pointer, reference, pointerArray, referenceArray, pointerPointer, none };
        -:   55:
        -:   56:    /** Store information about variable usage */
function _ZN9Variables13VariableUsageC2EOS0_ called 0 returned 0% blocks executed 0%
function _ZN9Variables13VariableUsageD2Ev called 0 returned 0% blocks executed 0%
    #####:   57:    class VariableUsage {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   58:    public:
function _ZN9Variables13VariableUsageC2EPK8VariableNS_12VariableTypeEbbbb called 0 returned 0% blocks executed 0%
    #####:   59:        explicit VariableUsage(const Variable *var = nullptr,
        -:   60:                               VariableType type = standard,
        -:   61:                               bool read = false,
        -:   62:                               bool write = false,
        -:   63:                               bool modified = false,
    #####:   64:                               bool allocateMemory = false) :
        -:   65:            _var(var),
    #####:   66:            _lastAccess(var ? var->nameToken() : nullptr),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:   67:            mType(type),
        -:   68:            _read(read),
        -:   69:            _write(write),
        -:   70:            _modified(modified),
    #####:   71:            _allocateMemory(allocateMemory) {
call    0 never executed
call    1 never executed
    #####:   72:        }
        -:   73:
        -:   74:        /** variable is used.. set both read+write */
function _ZN9Variables13VariableUsage3useEv called 0 returned 0% blocks executed 0%
    #####:   75:        void use() {
    #####:   76:            _read = true;
    #####:   77:            _write = true;
    #####:   78:        }
        -:   79:
        -:   80:        /** is variable unused? */
function _ZNK9Variables13VariableUsage6unusedEv called 0 returned 0% blocks executed 0%
    #####:   81:        bool unused() const {
    #####:   82:            return (!_read && !_write);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   83:        }
        -:   84:
        -:   85:        std::set<unsigned int> _aliases;
        -:   86:        std::set<const Scope*> _assignments;
        -:   87:
        -:   88:        const Variable* _var;
        -:   89:        const Token* _lastAccess;
        -:   90:        VariableType mType;
        -:   91:        bool _read;
        -:   92:        bool _write;
        -:   93:        bool _modified; // read/modify/write
        -:   94:        bool _allocateMemory;
        -:   95:    };
        -:   96:
function _ZN9Variables5clearEv called 0 returned 0% blocks executed 0%
    #####:   97:    void clear() {
    #####:   98:        mVarUsage.clear();
call    0 never executed
    #####:   99:    }
function _ZNK9Variables8varUsageEv called 0 returned 0% blocks executed 0%
    #####:  100:    const std::map<unsigned int, VariableUsage> &varUsage() const {
    #####:  101:        return mVarUsage;
        -:  102:    }
        -:  103:    void addVar(const Variable *var, VariableType type, bool write_);
        -:  104:    void allocateMemory(unsigned int varid, const Token* tok);
        -:  105:    void read(unsigned int varid, const Token* tok);
        -:  106:    void readAliases(unsigned int varid, const Token* tok);
        -:  107:    void readAll(unsigned int varid, const Token* tok);
        -:  108:    void write(unsigned int varid, const Token* tok);
        -:  109:    void writeAliases(unsigned int varid, const Token* tok);
        -:  110:    void writeAll(unsigned int varid, const Token* tok);
        -:  111:    void use(unsigned int varid, const Token* tok);
        -:  112:    void modified(unsigned int varid, const Token* tok);
        -:  113:    VariableUsage *find(unsigned int varid);
        -:  114:    void alias(unsigned int varid1, unsigned int varid2, bool replace);
function _ZN9Variables5eraseEj called 0 returned 0% blocks executed 0%
    #####:  115:    void erase(unsigned int varid) {
    #####:  116:        mVarUsage.erase(varid);
call    0 never executed
    #####:  117:    }
        -:  118:    void eraseAliases(unsigned int varid);
        -:  119:    void eraseAll(unsigned int varid);
        -:  120:    void clearAliases(unsigned int varid);
        -:  121:
        -:  122:private:
        -:  123:
        -:  124:    std::map<unsigned int, VariableUsage> mVarUsage;
        -:  125:};
        -:  126:
        -:  127:
        -:  128:/**
        -:  129: * Alias the 2 given variables. Either replace the existing aliases if
        -:  130: * they exist or merge them.  You would replace an existing alias when this
        -:  131: * assignment is in the same scope as the previous assignment.  You might
        -:  132: * merge the aliases when this assignment is in a different scope from the
        -:  133: * previous assignment depending on the relationship of the 2 scopes.
        -:  134: */
function _ZN9Variables5aliasEjjb called 0 returned 0% blocks executed 0%
    #####:  135:void Variables::alias(unsigned int varid1, unsigned int varid2, bool replace)
        -:  136:{
    #####:  137:    VariableUsage *var1 = find(varid1);
call    0 never executed
    #####:  138:    VariableUsage *var2 = find(varid2);
call    0 never executed
        -:  139:
    #####:  140:    if (!var1 || !var2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  141:        return;
        -:  142:
        -:  143:    // alias to self
    #####:  144:    if (varid1 == varid2) {
branch  0 never executed
branch  1 never executed
    #####:  145:        var1->use();
call    0 never executed
    #####:  146:        return;
        -:  147:    }
        -:  148:
    #####:  149:    if (replace) {
branch  0 never executed
branch  1 never executed
        -:  150:        // remove var1 from all aliases
    #####:  151:        for (std::set<unsigned int>::const_iterator i = var1->_aliases.begin(); i != var1->_aliases.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  152:            VariableUsage *temp = find(*i);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  153:
    #####:  154:            if (temp)
branch  0 never executed
branch  1 never executed
    #####:  155:                temp->_aliases.erase(var1->_var->declarationId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  156:        }
        -:  157:
        -:  158:        // remove all aliases from var1
    #####:  159:        var1->_aliases.clear();
call    0 never executed
        -:  160:    }
        -:  161:
        -:  162:    // var1 gets all var2s aliases
    #####:  163:    for (std::set<unsigned int>::const_iterator i = var2->_aliases.begin(); i != var2->_aliases.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  164:        if (*i != varid1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:            var1->_aliases.insert(*i);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  166:    }
        -:  167:
        -:  168:    // var2 is an alias of var1
    #####:  169:    var2->_aliases.insert(varid1);
call    0 never executed
call    1 never executed
    #####:  170:    var1->_aliases.insert(varid2);
call    0 never executed
call    1 never executed
        -:  171:
    #####:  172:    if (var2->mType == Variables::pointer) {
branch  0 never executed
branch  1 never executed
    #####:  173:        var2->_read = true;
        -:  174:    }
        -:  175:}
        -:  176:
function _ZN9Variables12clearAliasesEj called 0 returned 0% blocks executed 0%
    #####:  177:void Variables::clearAliases(unsigned int varid)
        -:  178:{
    #####:  179:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  180:
    #####:  181:    if (usage) {
branch  0 never executed
branch  1 never executed
        -:  182:        // remove usage from all aliases
    #####:  183:        std::set<unsigned int>::const_iterator i;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  184:
    #####:  185:        for (i = usage->_aliases.begin(); i != usage->_aliases.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####:  186:            VariableUsage *temp = find(*i);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  187:
    #####:  188:            if (temp)
branch  0 never executed
branch  1 never executed
    #####:  189:                temp->_aliases.erase(usage->_var->declarationId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  190:        }
        -:  191:
        -:  192:        // remove all aliases from usage
    #####:  193:        usage->_aliases.clear();
call    0 never executed
        -:  194:    }
    #####:  195:}
        -:  196:
function _ZN9Variables12eraseAliasesEj called 0 returned 0% blocks executed 0%
    #####:  197:void Variables::eraseAliases(unsigned int varid)
        -:  198:{
    #####:  199:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  200:
    #####:  201:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  202:        for (std::set<unsigned int>::const_iterator aliases = usage->_aliases.begin(); aliases != usage->_aliases.end(); ++aliases)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  203:            erase(*aliases);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  204:    }
    #####:  205:}
        -:  206:
function _ZN9Variables8eraseAllEj called 0 returned 0% blocks executed 0%
    #####:  207:void Variables::eraseAll(unsigned int varid)
        -:  208:{
    #####:  209:    eraseAliases(varid);
call    0 never executed
    #####:  210:    erase(varid);
call    0 never executed
    #####:  211:}
        -:  212:
function _ZN9Variables6addVarEPK8VariableNS_12VariableTypeEb called 0 returned 0% blocks executed 0%
    #####:  213:void Variables::addVar(const Variable *var,
        -:  214:                       VariableType type,
        -:  215:                       bool write_)
        -:  216:{
    #####:  217:    if (var->declarationId() > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  218:        mVarUsage.insert(std::make_pair(var->declarationId(), VariableUsage(var, type, false, write_, false)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  219:    }
    #####:  220:}
        -:  221:
function _ZN9Variables14allocateMemoryEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  222:void Variables::allocateMemory(unsigned int varid, const Token* tok)
        -:  223:{
    #####:  224:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  225:
    #####:  226:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  227:        usage->_allocateMemory = true;
    #####:  228:        usage->_lastAccess = tok;
        -:  229:    }
    #####:  230:}
        -:  231:
function _ZN9Variables4readEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  232:void Variables::read(unsigned int varid, const Token* tok)
        -:  233:{
    #####:  234:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  235:
    #####:  236:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  237:        usage->_read = true;
    #####:  238:        if (tok)
branch  0 never executed
branch  1 never executed
    #####:  239:            usage->_lastAccess = tok;
        -:  240:    }
    #####:  241:}
        -:  242:
function _ZN9Variables11readAliasesEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  243:void Variables::readAliases(unsigned int varid, const Token* tok)
        -:  244:{
    #####:  245:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  246:
    #####:  247:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  248:        for (std::set<unsigned int>::iterator aliases = usage->_aliases.begin(); aliases != usage->_aliases.end(); ++aliases) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  249:            VariableUsage *aliased = find(*aliases);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  250:
    #####:  251:            if (aliased) {
branch  0 never executed
branch  1 never executed
    #####:  252:                aliased->_read = true;
    #####:  253:                aliased->_lastAccess = tok;
        -:  254:            }
        -:  255:        }
        -:  256:    }
    #####:  257:}
        -:  258:
function _ZN9Variables7readAllEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  259:void Variables::readAll(unsigned int varid, const Token* tok)
        -:  260:{
    #####:  261:    read(varid, tok);
call    0 never executed
    #####:  262:    readAliases(varid, tok);
call    0 never executed
    #####:  263:}
        -:  264:
function _ZN9Variables5writeEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  265:void Variables::write(unsigned int varid, const Token* tok)
        -:  266:{
    #####:  267:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  268:
    #####:  269:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  270:        usage->_write = true;
    #####:  271:        if (!usage->_var->isStatic() && !Token::simpleMatch(tok->next(), "= 0 ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  272:            usage->_read = false;
    #####:  273:        usage->_lastAccess = tok;
        -:  274:    }
    #####:  275:}
        -:  276:
function _ZN9Variables12writeAliasesEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  277:void Variables::writeAliases(unsigned int varid, const Token* tok)
        -:  278:{
    #####:  279:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  280:
    #####:  281:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  282:        for (std::set<unsigned int>::const_iterator aliases = usage->_aliases.begin(); aliases != usage->_aliases.end(); ++aliases) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  283:            VariableUsage *aliased = find(*aliases);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  284:
    #####:  285:            if (aliased) {
branch  0 never executed
branch  1 never executed
    #####:  286:                aliased->_write = true;
    #####:  287:                aliased->_lastAccess = tok;
        -:  288:            }
        -:  289:        }
        -:  290:    }
    #####:  291:}
        -:  292:
function _ZN9Variables8writeAllEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  293:void Variables::writeAll(unsigned int varid, const Token* tok)
        -:  294:{
    #####:  295:    write(varid, tok);
call    0 never executed
    #####:  296:    writeAliases(varid, tok);
call    0 never executed
    #####:  297:}
        -:  298:
function _ZN9Variables3useEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  299:void Variables::use(unsigned int varid, const Token* tok)
        -:  300:{
    #####:  301:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  302:
    #####:  303:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  304:        usage->use();
call    0 never executed
    #####:  305:        usage->_lastAccess = tok;
        -:  306:
    #####:  307:        for (std::set<unsigned int>::const_iterator aliases = usage->_aliases.begin(); aliases != usage->_aliases.end(); ++aliases) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  308:            VariableUsage *aliased = find(*aliases);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  309:
    #####:  310:            if (aliased) {
branch  0 never executed
branch  1 never executed
    #####:  311:                aliased->use();
call    0 never executed
    #####:  312:                aliased->_lastAccess = tok;
        -:  313:            }
        -:  314:        }
        -:  315:    }
    #####:  316:}
        -:  317:
function _ZN9Variables8modifiedEjPK5Token called 0 returned 0% blocks executed 0%
    #####:  318:void Variables::modified(unsigned int varid, const Token* tok)
        -:  319:{
    #####:  320:    VariableUsage *usage = find(varid);
call    0 never executed
        -:  321:
    #####:  322:    if (usage) {
branch  0 never executed
branch  1 never executed
    #####:  323:        if (!usage->_var->isStatic())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  324:            usage->_read = false;
    #####:  325:        usage->_modified = true;
    #####:  326:        usage->_lastAccess = tok;
        -:  327:
    #####:  328:        for (std::set<unsigned int>::const_iterator aliases = usage->_aliases.begin(); aliases != usage->_aliases.end(); ++aliases) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  329:            VariableUsage *aliased = find(*aliases);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  330:
    #####:  331:            if (aliased) {
branch  0 never executed
branch  1 never executed
    #####:  332:                aliased->_modified = true;
    #####:  333:                aliased->_lastAccess = tok;
        -:  334:            }
        -:  335:        }
        -:  336:    }
    #####:  337:}
        -:  338:
function _ZN9Variables4findEj called 0 returned 0% blocks executed 0%
    #####:  339:Variables::VariableUsage *Variables::find(unsigned int varid)
        -:  340:{
    #####:  341:    if (varid) {
branch  0 never executed
branch  1 never executed
    #####:  342:        std::map<unsigned int, VariableUsage>::iterator i = mVarUsage.find(varid);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  343:        if (i != mVarUsage.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  344:            return &i->second;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  345:    }
    #####:  346:    return nullptr;
        -:  347:}
        -:  348:
function _ZL12doAssignmentR9VariablesPK5TokenbPK5Scope called 0 returned 0% blocks executed 0%
    #####:  349:static const Token* doAssignment(Variables &variables, const Token *tok, bool dereference, const Scope *scope)
        -:  350:{
        -:  351:    // a = a + b;
    #####:  352:    if (Token::Match(tok, "%var% = %var% !!;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  353:        const Token* rhsVarTok = tok->tokAt(2);
call    0 never executed
    #####:  354:        if (tok->varId() == rhsVarTok->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  355:            return rhsVarTok;
        -:  356:        }
        -:  357:    }
        -:  358:
    #####:  359:    if (Token::Match(tok, "%var% %assign%") && tok->strAt(1) != "=")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  360:        return tok->next();
call    0 never executed
        -:  361:
    #####:  362:    const Token* const tokOld = tok;
        -:  363:
        -:  364:    // check for aliased variable
    #####:  365:    const unsigned int varid1 = tok->varId();
call    0 never executed
    #####:  366:    Variables::VariableUsage *var1 = variables.find(varid1);
call    0 never executed
        -:  367:
    #####:  368:    if (var1) {
branch  0 never executed
branch  1 never executed
        -:  369:        // jump behind '='
    #####:  370:        tok = tok->next();
call    0 never executed
    #####:  371:        while (!tok->isAssignmentOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  372:            if (tok->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  373:                variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####:  374:            tok = tok->next();
call    0 never executed
        -:  375:        }
    #####:  376:        tok = tok->next();
call    0 never executed
        -:  377:
    #####:  378:        if (Token::Match(tok, "( const| struct|union| %type% * ) ( ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  379:            tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:  380:
    #####:  381:        if (Token::Match(tok, "( [(<] const| struct|union| %type% *| [>)]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  382:            tok = tok->next();
call    0 never executed
        -:  383:
    #####:  384:        if (Token::Match(tok, "(| &| %name%") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  385:            (Token::Match(tok->next(), "< const| struct|union| %type% *| > ( &| %name%"))) {
call    0 never executed
call    1 never executed
    #####:  386:            bool addressOf = false;
        -:  387:
    #####:  388:            if (Token::Match(tok, "%var% ."))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  389:                variables.use(tok->varId(), tok);   // use = read + write
call    0 never executed
call    1 never executed
        -:  390:
        -:  391:            // check for C style cast
    #####:  392:            if (tok->str() == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  393:                tok = tok->next();
call    0 never executed
    #####:  394:                if (tok->str() == "const")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  395:                    tok = tok->next();
call    0 never executed
        -:  396:
    #####:  397:                if (Token::Match(tok, "struct|union"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  398:                    tok = tok->next();
call    0 never executed
        -:  399:
    #####:  400:                while ((tok->isName() && tok->varId() == 0) || (tok->str() == "*") || (tok->str() == ")"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  401:                    tok = tok->next();
call    0 never executed
        -:  402:
    #####:  403:                if (tok->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  404:                    addressOf = true;
    #####:  405:                    tok = tok->next();
call    0 never executed
    #####:  406:                } else if (tok->str() == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  407:                    tok = tok->next();
call    0 never executed
    #####:  408:                    if (tok->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  409:                        addressOf = true;
    #####:  410:                        tok = tok->next();
call    0 never executed
        -:  411:                    }
    #####:  412:                } else if (Token::Match(tok, "%cop% %var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  413:                    variables.read(tok->next()->varId(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  414:                }
        -:  415:            }
        -:  416:
        -:  417:            // check for C++ style cast
    #####:  418:            else if (tok->str().find("cast") != std::string::npos &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  419:                     tok->strAt(1) == "<") {
call    0 never executed
call    1 never executed
    #####:  420:                tok = tok->tokAt(2);
call    0 never executed
    #####:  421:                if (tok->str() == "const")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  422:                    tok = tok->next();
call    0 never executed
        -:  423:
    #####:  424:                if (Token::Match(tok, "struct|union"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  425:                    tok = tok->next();
call    0 never executed
        -:  426:
    #####:  427:                tok = tok->next();
call    0 never executed
    #####:  428:                if (tok->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  429:                    tok = tok->next();
call    0 never executed
        -:  430:
    #####:  431:                tok = tok->tokAt(2);
call    0 never executed
    #####:  432:                if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  433:                    return tokOld;
    #####:  434:                if (tok->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  435:                    addressOf = true;
    #####:  436:                    tok = tok->next();
call    0 never executed
        -:  437:                }
        -:  438:            }
        -:  439:
        -:  440:            // no cast, no ?
    #####:  441:            else if (!Token::Match(tok, "%name% ?")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  442:                if (tok->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  443:                    addressOf = true;
    #####:  444:                    tok = tok->next();
call    0 never executed
    #####:  445:                } else if (tok->str() == "new")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  446:                    return tokOld;
        -:  447:            }
        -:  448:
        -:  449:            // check if variable is local
    #####:  450:            const unsigned int varid2 = tok->varId();
call    0 never executed
    #####:  451:            const Variables::VariableUsage* var2 = variables.find(varid2);
call    0 never executed
        -:  452:
    #####:  453:            if (var2) { // local variable (alias or read it)
branch  0 never executed
branch  1 never executed
    #####:  454:                if (var1->mType == Variables::pointer || var1->mType == Variables::pointerArray) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  455:                    if (dereference)
branch  0 never executed
branch  1 never executed
    #####:  456:                        variables.read(varid2, tok);
call    0 never executed
        -:  457:                    else {
    #####:  458:                        if (addressOf ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  459:                            var2->mType == Variables::array ||
branch  0 never executed
branch  1 never executed
    #####:  460:                            var2->mType == Variables::pointer) {
    #####:  461:                            bool replace = true;
        -:  462:
        -:  463:                            // pointerArray => don't replace
    #####:  464:                            if (var1->mType == Variables::pointerArray)
branch  0 never executed
branch  1 never executed
    #####:  465:                                replace = false;
        -:  466:
        -:  467:                            // check if variable declared in same scope
    #####:  468:                            else if (scope == var1->_var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  469:                                replace = true;
        -:  470:
        -:  471:                            // not in same scope as declaration
        -:  472:                            else {
        -:  473:                                // no other assignment in this scope
    #####:  474:                                if (var1->_assignments.find(scope) == var1->_assignments.end() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
    #####:  475:                                    scope->type == Scope::eSwitch) {
        -:  476:                                    // nothing to replace
    #####:  477:                                    if (var1->_assignments.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  478:                                        replace = false;
        -:  479:
        -:  480:                                    // this variable has previous assignments
        -:  481:                                    else {
        -:  482:                                        /**
        -:  483:                                         * @todo determine if existing aliases should be replaced or merged
        -:  484:                                         */
        -:  485:
    #####:  486:                                        replace = false;
        -:  487:                                    }
        -:  488:                                }
        -:  489:
        -:  490:                                // assignment in this scope
        -:  491:                                else {
        -:  492:                                    // replace when only one other assignment, merge them otherwise
    #####:  493:                                    replace = (var1->_assignments.size() == 1);
call    0 never executed
        -:  494:                                }
        -:  495:                            }
        -:  496:
    #####:  497:                            variables.alias(varid1, varid2, replace);
call    0 never executed
    #####:  498:                        } else if (tok->strAt(1) == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  499:                            if (var2->mType == Variables::reference)
branch  0 never executed
branch  1 never executed
    #####:  500:                                variables.readAliases(varid2, tok);
call    0 never executed
        -:  501:                            else
    #####:  502:                                variables.read(varid2, tok);
call    0 never executed
        -:  503:                        } else {
    #####:  504:                            variables.readAll(varid2, tok);
call    0 never executed
        -:  505:                        }
    #####:  506:                    }
    #####:  507:                } else if (var1->mType == Variables::reference) {
branch  0 never executed
branch  1 never executed
    #####:  508:                    variables.alias(varid1, varid2, true);
call    0 never executed
    #####:  509:                } else if (var1->mType == Variables::standard && addressOf) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  510:                    variables.alias(varid1, varid2, true);
call    0 never executed
        -:  511:                } else {
    #####:  512:                    if ((var2->mType == Variables::pointer || var2->mType == Variables::pointerArray) && tok->strAt(1) == "[")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  513:                        variables.readAliases(varid2, tok);
call    0 never executed
        -:  514:
    #####:  515:                    variables.read(varid2, tok);
call    0 never executed
        -:  516:                }
        -:  517:            } else { // not a local variable (or an unsupported local variable)
    #####:  518:                if (var1->mType == Variables::pointer && !dereference) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  519:                    // check if variable declaration is in this scope
    #####:  520:                    if (var1->_var->scope() == scope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  521:                        // If variable is used in RHS then "use" variable
    #####:  522:                        for (const Token *rhs = tok; rhs && rhs->str() != ";"; rhs = rhs->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####:  523:                            if (rhs->varId() == varid1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  524:                                variables.use(varid1, tok);
call    0 never executed
    #####:  525:                                break;
        -:  526:                            }
        -:  527:                        }
    #####:  528:                        variables.clearAliases(varid1);
call    0 never executed
        -:  529:                    } else {
        -:  530:                        // no other assignment in this scope
    #####:  531:                        if (var1->_assignments.find(scope) == var1->_assignments.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  532:                            /**
        -:  533:                             * @todo determine if existing aliases should be discarded
        -:  534:                             */
        -:  535:                        }
        -:  536:
        -:  537:                        // this assignment replaces the last assignment in this scope
        -:  538:                        else {
        -:  539:                            // aliased variables in a larger scope are not supported
        -:  540:                            // remove all aliases
    #####:  541:                            variables.clearAliases(varid1);
call    0 never executed
        -:  542:                        }
        -:  543:                    }
        -:  544:                }
        -:  545:            }
        -:  546:        } else
    #####:  547:            tok = tokOld;
        -:  548:
    #####:  549:        var1->_assignments.insert(scope);
call    0 never executed
call    1 never executed
        -:  550:    }
        -:  551:
        -:  552:    // check for alias to struct member
        -:  553:    // char c[10]; a.b = c;
    #####:  554:    else if (Token::Match(tok->tokAt(-2), "%name% .")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  555:        const Token *rhsVarTok = tok->tokAt(2);
call    0 never executed
    #####:  556:        if (rhsVarTok && rhsVarTok->varId()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  557:            const unsigned int varid2 = rhsVarTok->varId();
call    0 never executed
    #####:  558:            const Variables::VariableUsage *var2 = variables.find(varid2);
call    0 never executed
        -:  559:
        -:  560:            // struct member aliased to local variable
    #####:  561:            if (var2 && (var2->mType == Variables::array ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  562:                         var2->mType == Variables::pointer)) {
        -:  563:                // erase aliased variable and all variables that alias it
        -:  564:                // to prevent false positives
    #####:  565:                variables.eraseAll(varid2);
call    0 never executed
        -:  566:            }
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    // Possible pointer alias
    #####:  571:    else if (Token::Match(tok, "%name% = %name% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  572:        const unsigned int varid2 = tok->tokAt(2)->varId();
call    0 never executed
call    1 never executed
    #####:  573:        const Variables::VariableUsage *var2 = variables.find(varid2);
call    0 never executed
    #####:  574:        if (var2 && (var2->mType == Variables::array ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  575:                     var2->mType == Variables::pointer)) {
    #####:  576:            variables.use(varid2,tok);
call    0 never executed
        -:  577:        }
        -:  578:    }
        -:  579:
    #####:  580:    return tok;
        -:  581:}
        -:  582:
function _ZL24isPartOfClassStructUnionPK5Token called 0 returned 0% blocks executed 0%
    #####:  583:static bool isPartOfClassStructUnion(const Token* tok)
        -:  584:{
    #####:  585:    for (; tok; tok = tok->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  586:        if (tok->str() == "}" || tok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  587:            tok = tok->link();
call    0 never executed
    #####:  588:        else if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  589:            return (false);
    #####:  590:        else if (tok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  591:            return (tok->strAt(-1) == "struct" || tok->strAt(-2) == "struct" || tok->strAt(-1) == "class" || tok->strAt(-2) == "class" || tok->strAt(-1) == "union" || tok->strAt(-2) == "union");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
        -:  592:        }
        -:  593:    }
    #####:  594:    return false;
        -:  595:}
        -:  596:
        -:  597:// Skip [ .. ]
function _ZL12skipBracketsPK5Token called 0 returned 0% blocks executed 0%
    #####:  598:static const Token * skipBrackets(const Token *tok)
        -:  599:{
    #####:  600:    while (tok && tok->str() == "[")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  601:        tok = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:  602:    return tok;
        -:  603:}
        -:  604:
        -:  605:
        -:  606:// Skip [ .. ] . x
function _ZL22skipBracketsAndMembersPK5Token called 0 returned 0% blocks executed 0%
    #####:  607:static const Token * skipBracketsAndMembers(const Token *tok)
        -:  608:{
    #####:  609:    while (tok) {
branch  0 never executed
branch  1 never executed
    #####:  610:        if (tok->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  611:            tok = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:  612:        else if (Token::Match(tok, ". %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  613:            tok = tok->tokAt(2);
call    0 never executed
        -:  614:        else
    #####:  615:            break;
        -:  616:    }
    #####:  617:    return tok;
        -:  618:}
        -:  619:
function _ZL15useFunctionArgsPK5TokenR9Variables called 0 returned 0% blocks executed 0%
    #####:  620:static void useFunctionArgs(const Token *tok, Variables& variables)
        -:  621:{
        -:  622:    // TODO: Match function args to see if they are const or not. Assume that const data is not written.
    #####:  623:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  624:        return;
    #####:  625:    if (tok->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  626:        useFunctionArgs(tok->astOperand1(), variables);
call    0 never executed
call    1 never executed
    #####:  627:        useFunctionArgs(tok->astOperand2(), variables);
call    0 never executed
call    1 never executed
    #####:  628:    } else if (Token::Match(tok, "[+:]") && (!tok->valueType() || tok->valueType()->pointer)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  629:        useFunctionArgs(tok->astOperand1(), variables);
call    0 never executed
call    1 never executed
    #####:  630:        useFunctionArgs(tok->astOperand2(), variables);
call    0 never executed
call    1 never executed
    #####:  631:    } else if (tok->variable() && tok->variable()->isArray()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  632:        variables.use(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -:  633:    }
        -:  634:}
        -:  635:
        -:  636://---------------------------------------------------------------------------
        -:  637:// Usage of function variables
        -:  638://---------------------------------------------------------------------------
function _ZN14CheckUnusedVar40checkFunctionVariableUsage_iterateScopesEPK5ScopeR9Variables called 0 returned 0% blocks executed 0%
    #####:  639:void CheckUnusedVar::checkFunctionVariableUsage_iterateScopes(const Scope* const scope, Variables& variables)
        -:  640:{
        -:  641:    // Find declarations if the scope is executable..
    #####:  642:    if (scope->isExecutable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  643:        // Find declarations
    #####:  644:        for (std::list<Variable>::const_iterator i = scope->varlist.begin(); i != scope->varlist.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  645:            if (i->isThrow() || i->isExtern())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  646:                continue;
    #####:  647:            Variables::VariableType type = Variables::none;
    #####:  648:            if (i->isArray() && (i->nameToken()->previous()->str() == "*" || i->nameToken()->strAt(-2) == "*"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####:  649:                type = Variables::pointerArray;
    #####:  650:            else if (i->isArray() && i->nameToken()->previous()->str() == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  651:                type = Variables::referenceArray;
    #####:  652:            else if (i->isArray())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  653:                type = (i->dimensions().size() == 1U) ? Variables::array : Variables::pointerArray;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  654:            else if (i->isReference())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  655:                type = Variables::reference;
    #####:  656:            else if (i->nameToken()->previous()->str() == "*" && i->nameToken()->strAt(-2) == "*")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  657:                type = Variables::pointerPointer;
    #####:  658:            else if (i->isPointerToArray())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  659:                type = Variables::pointerPointer;
    #####:  660:            else if (i->isPointer())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  661:                type = Variables::pointer;
    #####:  662:            else if (mTokenizer->isC() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  663:                     i->typeEndToken()->isStandardType() ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  664:                     isRecordTypeWithoutSideEffects(i->type()) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  665:                     (i->isStlType() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  666:                      !Token::Match(i->typeStartToken()->tokAt(2), "lock_guard|unique_lock|shared_ptr|unique_ptr|auto_ptr|shared_lock")))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  667:                type = Variables::standard;
    #####:  668:            if (type == Variables::none || isPartOfClassStructUnion(i->typeStartToken()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  669:                continue;
    #####:  670:            const Token* defValTok = i->nameToken()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  671:            if (Token::Match(i->nameToken()->previous(), "* %var% ) (")) // function pointer. Jump behind parameter list.
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  672:                defValTok = defValTok->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  673:            for (; defValTok; defValTok = defValTok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  674:                if (defValTok->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  675:                    defValTok = defValTok->link();
call    0 never executed
    #####:  676:                else if (defValTok->str() == "(" || defValTok->str() == "{" || defValTok->str() == "=" || defValTok->str() == ":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  677:                    variables.addVar(&*i, type, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  678:                    break;
    #####:  679:                } else if (defValTok->str() == ";" || defValTok->str() == "," || defValTok->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  680:                    variables.addVar(&*i, type, i->isStatic());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  681:                    break;
        -:  682:                }
        -:  683:            }
    #####:  684:            if (i->isArray() && i->isClass()) // Array of class/struct members. Initialized by ctor.
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  685:                variables.write(i->declarationId(), i->nameToken());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  686:            if (i->isArray() && Token::Match(i->nameToken(), "%name% [ %var% ]")) // Array index variable read.
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  687:                variables.read(i->nameToken()->tokAt(2)->varId(), i->nameToken());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:  688:
    #####:  689:            if (defValTok && defValTok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  690:                // simple assignment "var = 123"
    #####:  691:                if (defValTok->str() == "=" && defValTok->next()->str() != "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  692:                    doAssignment(variables, i->nameToken(), false, scope);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  693:                } else {
        -:  694:                    // could be "var = {...}" OR "var{...}" (since C++11)
    #####:  695:                    const Token* tokBraceStart = nullptr;
    #####:  696:                    if (Token::simpleMatch(defValTok, "= {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  697:                        // "var = {...}"
    #####:  698:                        tokBraceStart = defValTok->next();
call    0 never executed
    #####:  699:                    } else if (defValTok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  700:                        // "var{...}"
    #####:  701:                        tokBraceStart = defValTok;
        -:  702:                    }
    #####:  703:                    if (tokBraceStart) {
branch  0 never executed
branch  1 never executed
    #####:  704:                        for (const Token* tok = tokBraceStart->next(); tok && tok != tokBraceStart->link(); tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####:  705:                            if (tok->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  706:                                // Variables used to initialize the array read.
    #####:  707:                                variables.read(tok->varId(), i->nameToken());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  708:                            }
        -:  709:                        }
        -:  710:                    }
        -:  711:                }
        -:  712:            }
        -:  713:        }
        -:  714:    }
        -:  715:
        -:  716:    // Check variable usage
        -:  717:    const Token *tok;
    #####:  718:    if (scope->type == Scope::eFunction)
branch  0 never executed
branch  1 never executed
    #####:  719:        tok = scope->bodyStart->next();
call    0 never executed
        -:  720:    else
    #####:  721:        tok = scope->classDef->next();
call    0 never executed
    #####:  722:    for (; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  723:        if (tok->str() == "{" && tok != scope->bodyStart && !tok->previous()->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  724:            for (const Scope *i : scope->nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  725:                if (i->bodyStart == tok) { // Find associated scope
branch  0 never executed
branch  1 never executed
    #####:  726:                    checkFunctionVariableUsage_iterateScopes(tok->scope(), variables); // Scan child scope
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  727:                    tok = tok->link();
call    0 never executed
    #####:  728:                    break;
        -:  729:                }
        -:  730:            }
    #####:  731:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  732:                break;
        -:  733:        }
        -:  734:
    #####:  735:        if (Token::Match(tok, "asm ( %str% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:            variables.clear();
call    0 never executed
    #####:  737:            break;
        -:  738:        }
        -:  739:
        -:  740:        // templates
    #####:  741:        if (tok->isName() && endsWith(tok->str(), '>')) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  742:            // TODO: This is a quick fix to handle when constants are used
        -:  743:            // as template parameters. Try to handle this better, perhaps
        -:  744:            // only remove constants.
    #####:  745:            variables.clear();
call    0 never executed
        -:  746:        }
        -:  747:
    #####:  748:        else if (Token::Match(tok->previous(), "[;{}]")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  749:            for (const Token* tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  750:                if (tok2->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  751:                    // Is this a variable declaration?
    #####:  752:                    const Variable *var = tok2->variable();
call    0 never executed
    #####:  753:                    if (!var || var->nameToken() != tok2)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  754:                        continue;
        -:  755:
        -:  756:                    // Mark template parameters used in declaration as use..
    #####:  757:                    if (tok2->strAt(-1) == ">") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  758:                        for (const Token *tok3 = tok; tok3 != tok2; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  759:                            if (tok3->varId() > 0U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  760:                                variables.use(tok3->varId(), tok3);
call    0 never executed
call    1 never executed
        -:  761:                        }
        -:  762:                    }
        -:  763:
        -:  764:                    // Skip variable declaration..
    #####:  765:                    tok = tok2->next();
call    0 never executed
    #####:  766:                    if (Token::Match(tok, "( %name% )")) // Simple initialization through copy ctor
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  767:                        tok = tok->next();
call    0 never executed
    #####:  768:                    else if (Token::Match(tok, "= %var% ;")) { // Simple initialization
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:                        tok = tok->next();
call    0 never executed
    #####:  770:                        if (!var->isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  771:                            variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####:  772:                    } else if (tok->str() == "[" && Token::simpleMatch(skipBrackets(tok),"= {")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  773:                        const Token * const rhs1 = skipBrackets(tok)->next();
call    0 never executed
call    1 never executed
    #####:  774:                        for (const Token *rhs = rhs1->link(); rhs != rhs1; rhs = rhs->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  775:                            if (rhs->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  776:                                variables.readAll(rhs->varId(), rhs);
call    0 never executed
call    1 never executed
        -:  777:                        }
    #####:  778:                    } else if (var->typeEndToken()->str() == ">") // Be careful with types like std::vector
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  779:                        tok = tok->previous();
call    0 never executed
    #####:  780:                    break;
    #####:  781:                } else if (Token::Match(tok2, "[;({=]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  782:                    break;
        -:  783:            }
        -:  784:        }
        -:  785:        // Freeing memory (not considered "using" the pointer if it was also allocated in this function)
    #####:  786:        if (Token::Match(tok, "free|g_free|kfree|vfree ( %var% )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  787:            (mTokenizer->isCPP() && (Token::Match(tok, "delete %var% ;") || Token::Match(tok, "delete [ ] %var% ;")))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  788:            unsigned int varid = 0;
    #####:  789:            if (tok->str() != "delete") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  790:                const Token *varTok = tok->tokAt(2);
call    0 never executed
    #####:  791:                varid = varTok->varId();
call    0 never executed
    #####:  792:                tok = varTok->next();
call    0 never executed
    #####:  793:            } else if (tok->strAt(1) == "[") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  794:                const Token *varTok = tok->tokAt(3);
call    0 never executed
    #####:  795:                varid = varTok->varId();
call    0 never executed
    #####:  796:                tok = varTok;
        -:  797:            } else {
    #####:  798:                varid = tok->next()->varId();
call    0 never executed
call    1 never executed
    #####:  799:                tok = tok->next();
call    0 never executed
        -:  800:            }
        -:  801:
    #####:  802:            const Variables::VariableUsage *const var = variables.find(varid);
call    0 never executed
    #####:  803:            if (var) {
branch  0 never executed
branch  1 never executed
    #####:  804:                if (!var->_aliases.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  805:                    variables.use(varid, tok);
call    0 never executed
    #####:  806:                else if (!var->_allocateMemory)
branch  0 never executed
branch  1 never executed
    #####:  807:                    variables.readAll(varid, tok);
call    0 never executed
        -:  808:            }
        -:  809:        }
        -:  810:
    #####:  811:        else if (Token::Match(tok, "return|throw")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  812:            for (const Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  813:                if (tok2->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  814:                    variables.readAll(tok2->varId(), tok);
call    0 never executed
call    1 never executed
    #####:  815:                else if (tok2->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  816:                    break;
        -:  817:            }
        -:  818:        }
        -:  819:
        -:  820:        // assignment
    #####:  821:        else if (Token::Match(tok, "*| ++|--| %name% ++|--| %assign%") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  822:                 Token::Match(tok, "*| ( const| %type% *| ) %name% %assign%")) {
call    0 never executed
    #####:  823:            bool dereference = false;
    #####:  824:            bool pre = false;
    #####:  825:            bool post = false;
        -:  826:
    #####:  827:            if (tok->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  828:                dereference = true;
    #####:  829:                tok = tok->next();
call    0 never executed
        -:  830:            }
        -:  831:
    #####:  832:            if (Token::Match(tok, "( const| %type% *| ) %name% %assign%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:                tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:  834:
    #####:  835:            else if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  836:                tok = tok->next();
call    0 never executed
        -:  837:
    #####:  838:            if (tok->tokType() == Token::eIncDecOp) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:                pre = true;
    #####:  840:                tok = tok->next();
call    0 never executed
        -:  841:            }
        -:  842:
    #####:  843:            if (tok->next()->tokType() == Token::eIncDecOp)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  844:                post = true;
        -:  845:
    #####:  846:            const unsigned int varid1 = tok->varId();
call    0 never executed
    #####:  847:            const Token * const start = tok;
        -:  848:
        -:  849:            // assignment in while head..
    #####:  850:            bool inwhile = false;
        -:  851:            {
    #####:  852:                const Token *parent = tok->astParent();
call    0 never executed
    #####:  853:                while (parent) {
branch  0 never executed
branch  1 never executed
    #####:  854:                    if (Token::simpleMatch(parent->previous(), "while (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  855:                        inwhile = true;
    #####:  856:                        break;
        -:  857:                    }
    #####:  858:                    parent = parent->astParent();
call    0 never executed
        -:  859:                }
        -:  860:            }
        -:  861:
    #####:  862:            tok = doAssignment(variables, tok, dereference, scope);
call    0 never executed
        -:  863:
    #####:  864:            if (tok && tok->isAssignmentOp() && tok->str() != "=") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  865:                variables.use(varid1, tok);
call    0 never executed
    #####:  866:                if (Token::Match(tok, "%assign% %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:                    tok = tok->next();
call    0 never executed
    #####:  868:                    variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -:  869:                }
        -:  870:            }
        -:  871:
    #####:  872:            if (pre || post)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  873:                variables.use(varid1, tok);
call    0 never executed
        -:  874:
    #####:  875:            if (dereference) {
branch  0 never executed
branch  1 never executed
    #####:  876:                const Variables::VariableUsage *const var = variables.find(varid1);
call    0 never executed
    #####:  877:                if (var && var->mType == Variables::array)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  878:                    variables.write(varid1, tok);
call    0 never executed
    #####:  879:                variables.writeAliases(varid1, tok);
call    0 never executed
    #####:  880:                variables.read(varid1, tok);
call    0 never executed
        -:  881:            } else {
    #####:  882:                const Variables::VariableUsage *const var = variables.find(varid1);
call    0 never executed
    #####:  883:                if (var && (inwhile || start->strAt(-1) == ",")) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  884:                    variables.use(varid1, tok);
call    0 never executed
    #####:  885:                } else if (var && var->mType == Variables::reference) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  886:                    variables.writeAliases(varid1, tok);
call    0 never executed
    #####:  887:                    variables.read(varid1, tok);
call    0 never executed
        -:  888:                }
        -:  889:                // Consider allocating memory separately because allocating/freeing alone does not constitute using the variable
    #####:  890:                else if (var && var->mType == Variables::pointer &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  891:                         Token::Match(start, "%name% = new|malloc|calloc|kmalloc|kzalloc|kcalloc|strdup|strndup|vmalloc|g_new0|g_try_new|g_new|g_malloc|g_malloc0|g_try_malloc|g_try_malloc0|g_strdup|g_strndup|g_strdup_printf")) {
call    0 never executed
    #####:  892:                    bool allocate = true;
        -:  893:
    #####:  894:                    if (start->strAt(2) == "new") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  895:                        const Token *type = start->tokAt(3);
call    0 never executed
        -:  896:
        -:  897:                        // skip nothrow
    #####:  898:                        if (mTokenizer->isCPP() && (Token::simpleMatch(type, "( nothrow )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  899:                                                    Token::simpleMatch(type, "( std :: nothrow )")))
call    0 never executed
    #####:  900:                            type = type->link()->next();
call    0 never executed
call    1 never executed
        -:  901:
        -:  902:                        // is it a user defined type?
    #####:  903:                        if (!type->isStandardType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:                            const Variable *variable = start->variable();
call    0 never executed
    #####:  905:                            if (!variable || !isRecordTypeWithoutSideEffects(variable->type()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  906:                                allocate = false;
        -:  907:                        }
        -:  908:                    }
        -:  909:
    #####:  910:                    if (allocate)
branch  0 never executed
branch  1 never executed
    #####:  911:                        variables.allocateMemory(varid1, tok);
call    0 never executed
        -:  912:                    else
    #####:  913:                        variables.write(varid1, tok);
call    0 never executed
    #####:  914:                } else if (varid1 && Token::Match(tok, "%varid% .", varid1)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  915:                    variables.read(varid1, tok);
call    0 never executed
    #####:  916:                    variables.write(varid1, start);
call    0 never executed
    #####:  917:                } else if (var &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  918:                           var->mType == Variables::pointer &&
branch  0 never executed
branch  1 never executed
    #####:  919:                           Token::Match(tok, "%name% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:                           tok->varId() == 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  921:                           tok->hasKnownIntValue() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  922:                           tok->values().front().intvalue == 0) {
call    0 never executed
call    1 never executed
    #####:  923:                    variables.use(varid1, tok);
call    0 never executed
        -:  924:                } else {
    #####:  925:                    variables.write(varid1, tok);
call    0 never executed
        -:  926:                }
        -:  927:            }
        -:  928:
    #####:  929:            const Variables::VariableUsage * const var2 = variables.find(tok->varId());
call    0 never executed
call    1 never executed
    #####:  930:            if (var2) {
branch  0 never executed
branch  1 never executed
    #####:  931:                if (var2->mType == Variables::reference) {
branch  0 never executed
branch  1 never executed
    #####:  932:                    variables.writeAliases(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####:  933:                    variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####:  934:                } else if (tok->varId() != varid1 && Token::Match(tok, "%name% .|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  935:                    variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####:  936:                else if (tok->varId() != varid1 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  937:                         var2->mType == Variables::standard &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  938:                         tok->strAt(-1) != "&")
call    0 never executed
call    1 never executed
    #####:  939:                    variables.use(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -:  940:            }
        -:  941:
    #####:  942:            const Token * const equal = skipBracketsAndMembers(tok->next());
call    0 never executed
call    1 never executed
        -:  943:
        -:  944:            // checked for chained assignments
    #####:  945:            if (tok != start && equal && equal->str() == "=") {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  946:                const unsigned int varId = tok->varId();
call    0 never executed
    #####:  947:                const Variables::VariableUsage * const var = variables.find(varId);
call    0 never executed
        -:  948:
    #####:  949:                if (var && var->mType != Variables::reference) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  950:                    variables.read(varId,tok);
call    0 never executed
        -:  951:                }
        -:  952:
    #####:  953:                tok = tok->previous();
call    0 never executed
        -:  954:            }
        -:  955:        }
        -:  956:
        -:  957:        // assignment
    #####:  958:        else if ((Token::Match(tok, "%name% [") && Token::simpleMatch(skipBracketsAndMembers(tok->next()), "=")) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  959:                 (Token::simpleMatch(tok, "* (") && Token::simpleMatch(tok->next()->link(), ") ="))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  960:            const Token *eq = tok;
    #####:  961:            while (eq && !eq->isAssignmentOp())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  962:                eq = eq->astParent();
call    0 never executed
        -:  963:
    #####:  964:            const bool deref = eq && eq->astOperand1() && eq->astOperand1()->valueType() && eq->astOperand1()->valueType()->pointer == 0U;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
        -:  965:
    #####:  966:            if (tok->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  967:                tok = tok->tokAt(2);
call    0 never executed
    #####:  968:                if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  969:                    tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:  970:            }
        -:  971:
    #####:  972:            const unsigned int varid = tok->varId();
call    0 never executed
    #####:  973:            const Variables::VariableUsage *var = variables.find(varid);
call    0 never executed
        -:  974:
    #####:  975:            if (var) {
branch  0 never executed
branch  1 never executed
        -:  976:                // Consider allocating memory separately because allocating/freeing alone does not constitute using the variable
    #####:  977:                if (var->mType == Variables::pointer &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  978:                    Token::Match(skipBrackets(tok->next()), "= new|malloc|calloc|kmalloc|kzalloc|kcalloc|strdup|strndup|vmalloc|g_new0|g_try_new|g_new|g_malloc|g_malloc0|g_try_malloc|g_try_malloc0|g_strdup|g_strndup|g_strdup_printf")) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  979:                    variables.allocateMemory(varid, tok);
call    0 never executed
    #####:  980:                } else if (var->mType == Variables::pointer || var->mType == Variables::reference) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  981:                    variables.read(varid, tok);
call    0 never executed
    #####:  982:                    variables.writeAliases(varid, tok);
call    0 never executed
    #####:  983:                } else if (var->mType == Variables::pointerArray) {
branch  0 never executed
branch  1 never executed
    #####:  984:                    tok = doAssignment(variables, tok, deref, scope);
call    0 never executed
        -:  985:                } else
    #####:  986:                    variables.writeAll(varid, tok);
call    0 never executed
        -:  987:            }
        -:  988:        }
        -:  989:
    #####:  990:        else if (mTokenizer->isCPP() && Token::Match(tok, "[;{}] %var% <<")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  991:            variables.erase(tok->next()->varId());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  992:        }
        -:  993:
    #####:  994:        else if (Token::Match(tok, "& %var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  995:            if (tok->astOperand2()) { // bitop
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  996:                variables.read(tok->next()->varId(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  997:            } else // addressof
    #####:  998:                variables.use(tok->next()->varId(), tok); // use = read + write
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  999:        } else if (Token::Match(tok, ">>|>>= %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:            if (isLikelyStreamRead(mTokenizer->isCPP(), tok))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1001:                variables.use(tok->next()->varId(), tok); // use = read + write
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1002:            else
    #####: 1003:                variables.read(tok->next()->varId(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1004:        } else if (Token::Match(tok, "%var% >>|&") && Token::Match(tok->previous(), "[{};:]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1005:            variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####: 1006:        } else if (isLikelyStreamRead(mTokenizer->isCPP(),tok->previous())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1007:            variables.use(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1008:        }
        -: 1009:
        -: 1010:        // function parameter
    #####: 1011:        else if (Token::Match(tok, "[(,] %var% [")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1012:            variables.use(tok->next()->varId(), tok);   // use = read + write
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1013:        } else if (Token::Match(tok, "[(,] %var% [,)]") && tok->previous()->str() != "*") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1014:            variables.use(tok->next()->varId(), tok);   // use = read + write
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1015:        } else if (Token::Match(tok, "[(,] & %var% [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1016:            variables.eraseAll(tok->tokAt(2)->varId());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1017:        } else if (Token::Match(tok, "[(,] (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1018:                   Token::Match(tok->next()->link(), ") %var% [,)]")) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1019:            variables.use(tok->next()->link()->next()->varId(), tok);   // use = read + write
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 1020:        } else if (Token::Match(tok, "[(,] *| %var% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:            tok = tok->next();
call    0 never executed
    #####: 1022:            if (tok->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1023:                tok = tok->next();
call    0 never executed
    #####: 1024:            variables.use(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1025:        }
        -: 1026:
        -: 1027:        // function
    #####: 1028:        else if (Token::Match(tok, "%name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1029:            variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
    #####: 1030:            useFunctionArgs(tok->next()->astOperand2(), variables);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1031:        } else if (Token::Match(tok, "std :: ref ( %var% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1032:            variables.eraseAll(tok->tokAt(4)->varId());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1033:        }
        -: 1034:
    #####: 1035:        else if (Token::Match(tok->previous(), "[{,] %var% [,}]")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1036:            variables.read(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1037:        }
        -: 1038:
    #####: 1039:        else if (tok->varId() && Token::Match(tok, "%var% .")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1040:            variables.use(tok->varId(), tok);   // use = read + write
call    0 never executed
call    1 never executed
        -: 1041:        }
        -: 1042:
    #####: 1043:        else if (tok->str() == ":" && (!tok->valueType() || tok->valueType()->pointer)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1044:            if (tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1045:                variables.use(tok->astOperand1()->varId(), tok->astOperand1());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1046:            if (tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1047:                variables.use(tok->astOperand2()->varId(), tok->astOperand2());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1048:        }
        -: 1049:
    #####: 1050:        else if (tok->isExtendedOp() && tok->next() && tok->next()->varId() && tok->strAt(2) != "=") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1051:            variables.readAll(tok->next()->varId(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1052:        }
        -: 1053:
    #####: 1054:        else if (tok->varId() && tok->next() && (tok->next()->str() == ")" || tok->next()->isExtendedOp())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1055:            if (Token::Match(tok->tokAt(-2), "%name% ( %var% [,)]") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1056:                !(tok->tokAt(-2)->variable() && tok->tokAt(-2)->variable()->isReference()))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1057:                variables.use(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1058:            else
    #####: 1059:                variables.readAll(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1060:        }
        -: 1061:
    #####: 1062:        else if (Token::Match(tok, "%var% ;") && Token::Match(tok->previous(), "[;{}:]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1063:            variables.readAll(tok->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1064:        }
        -: 1065:
        -: 1066:        // ++|--
    #####: 1067:        else if (tok->next() && tok->next()->tokType() == Token::eIncDecOp && tok->next()->astOperand1() && tok->next()->astOperand1()->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1068:            if (tok->next()->astParent())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1069:                variables.use(tok->next()->astOperand1()->varId(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1070:            else
    #####: 1071:                variables.modified(tok->next()->astOperand1()->varId(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1072:        }
        -: 1073:
    #####: 1074:        else if (tok->isAssignmentOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1075:            for (const Token *tok2 = tok->next(); tok2 && tok2->str() != ";"; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 1076:                if (tok2->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1077:                    if (tok2->strAt(1) == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1078:                        variables.write(tok2->varId(), tok);
call    0 never executed
call    1 never executed
    #####: 1079:                    else if (tok2->next() && tok2->next()->isAssignmentOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1080:                        variables.use(tok2->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1081:                    else
    #####: 1082:                        variables.read(tok2->varId(), tok);
call    0 never executed
call    1 never executed
        -: 1083:                }
        -: 1084:            }
        -: 1085:        }
        -: 1086:    }
    #####: 1087:}
        -: 1088:
function _ZN14CheckUnusedVar26checkFunctionVariableUsageEv called 0 returned 0% blocks executed 0%
    #####: 1089:void CheckUnusedVar::checkFunctionVariableUsage()
        -: 1090:{
    #####: 1091:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1092:        return;
        -: 1093:
        -: 1094:    // Parse all executing scopes..
    #####: 1095:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1096:
        -: 1097:    // only check functions
    #####: 1098:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1099:        // Bailout when there are lambdas or inline functions
        -: 1100:        // TODO: Handle lambdas and inline functions properly
    #####: 1101:        if (scope->hasInlineOrLambdaFunction())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1102:            continue;
        -: 1103:
    #####: 1104:        for (const Token *tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1105:            if (findLambdaEndToken(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1106:                // todo: handle lambdas
    #####: 1107:                break;
    #####: 1108:            if (Token::simpleMatch(tok, "try {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1109:                // todo: check try blocks
    #####: 1110:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1111:            const Token *varDecl = nullptr;
    #####: 1112:            if (tok->variable() && tok->variable()->nameToken() == tok) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1113:                const Token * eq = tok->next();
call    0 never executed
    #####: 1114:                while (Token::simpleMatch(eq, "["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1115:                    eq = eq->link()->next();
call    0 never executed
call    1 never executed
    #####: 1116:                if (Token::simpleMatch(eq, "=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1117:                    varDecl = tok;
    #####: 1118:                    tok = eq;
        -: 1119:                }
        -: 1120:            }
        -: 1121:            // not assignment/initialization/increment => continue
    #####: 1122:            const bool isAssignment = tok->isAssignmentOp() && tok->astOperand1();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1123:            const bool isInitialization = (Token::Match(tok, "%var% (") && tok->variable() && tok->variable()->nameToken() == tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1124:            const bool isIncrementOrDecrement = (tok->tokType() == Token::Type::eIncDecOp);
call    0 never executed
    #####: 1125:            if (!isAssignment && !isInitialization && !isIncrementOrDecrement)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1126:                continue;
    #####: 1127:            if (tok->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1128:                if (mTokenizer->isCPP()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1129:                    // do not check RAII/scope_lock objects
    #####: 1130:                    if (!tok->valueType())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1131:                        continue;
    #####: 1132:                    bool check = false;
    #####: 1133:                    switch (tok->valueType()->type) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1134:                    case ValueType::Type::UNKNOWN_TYPE:
        -: 1135:                    case ValueType::Type::NONSTD:
        -: 1136:                    case ValueType::Type::RECORD:
    #####: 1137:                        check = tok->valueType()->typeScope && !tok->valueType()->typeScope->getDestructor();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1138:                        break;
    #####: 1139:                    case ValueType::Type::CONTAINER:
        -: 1140:                    case ValueType::Type::ITERATOR:
        -: 1141:                    case ValueType::Type::VOID:
        -: 1142:                    case ValueType::Type::BOOL:
        -: 1143:                    case ValueType::Type::CHAR:
        -: 1144:                    case ValueType::Type::SHORT:
        -: 1145:                    case ValueType::Type::WCHAR_T:
        -: 1146:                    case ValueType::Type::INT:
        -: 1147:                    case ValueType::Type::LONG:
        -: 1148:                    case ValueType::Type::LONGLONG:
        -: 1149:                    case ValueType::Type::UNKNOWN_INT:
        -: 1150:                    case ValueType::Type::FLOAT:
        -: 1151:                    case ValueType::Type::DOUBLE:
        -: 1152:                    case ValueType::Type::LONGDOUBLE:
    #####: 1153:                        check = true;
    #####: 1154:                        break;
        -: 1155:                    };
    #####: 1156:                    if (!check)
branch  0 never executed
branch  1 never executed
    #####: 1157:                        continue;
        -: 1158:                }
    #####: 1159:                tok = tok->next();
call    0 never executed
        -: 1160:            }
    #####: 1161:            if (tok->astParent() && tok->str() != "(") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1162:                const Token *parent = tok->astParent();
call    0 never executed
    #####: 1163:                while (Token::Match(parent, "%oror%|%comp%|!|&&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1164:                    parent = parent->astParent();
call    0 never executed
    #####: 1165:                if (!parent)
branch  0 never executed
branch  1 never executed
    #####: 1166:                    continue;
    #####: 1167:                if (!Token::simpleMatch(parent->previous(), "if ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1168:                    continue;
        -: 1169:            }
        -: 1170:            // Do not warn about assignment with NULL
    #####: 1171:            if (FwdAnalysis::isNullOperand(tok->astOperand2()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1172:                continue;
        -: 1173:
    #####: 1174:            if (!tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1175:                continue;
        -: 1176:
    #####: 1177:            const Token *iteratorToken = tok->astOperand1();
call    0 never executed
    #####: 1178:            while (Token::Match(iteratorToken, "[.*]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1179:                iteratorToken = iteratorToken->astOperand1();
call    0 never executed
    #####: 1180:            if (iteratorToken && iteratorToken->variable() && iteratorToken->variable()->typeEndToken()->str().find("iterator") != std::string::npos)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1181:                continue;
        -: 1182:
    #####: 1183:            const Variable *op1Var = tok->astOperand1() ? tok->astOperand1()->variable() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1184:            if (op1Var && op1Var->isReference() && op1Var->nameToken() != tok->astOperand1())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1185:                // todo: check references
    #####: 1186:                continue;
        -: 1187:
    #####: 1188:            if (op1Var && op1Var->isStatic())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 1189:                // todo: check static variables
    #####: 1190:                continue;
        -: 1191:
    #####: 1192:            if (op1Var && op1Var->nameToken()->isAttributeUnused())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1193:                continue;
        -: 1194:
        -: 1195:            // Is there a redundant assignment?
    #####: 1196:            const Token *start = tok->findExpressionStartEndTokens().second->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1197:
    #####: 1198:            const Token *expr = varDecl ? varDecl : tok->astOperand1();
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 1199:
    #####: 1200:            FwdAnalysis fwdAnalysis(mTokenizer->isCPP(), mSettings->library);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1201:            if (fwdAnalysis.unusedValue(expr, start, scope->bodyEnd))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1202:                // warn
    #####: 1203:                unreadVariableError(tok, expr->expressionString(), false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1204:        }
        -: 1205:
        -: 1206:        // varId, usage {read, write, modified}
    #####: 1207:        Variables variables;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1208:
    #####: 1209:        checkFunctionVariableUsage_iterateScopes(scope, variables);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1210:
        -: 1211:
        -: 1212:        // Check usage of all variables in the current scope..
    #####: 1213:        for (std::map<unsigned int, Variables::VariableUsage>::const_iterator it = variables.varUsage().begin();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 1214:             it != variables.varUsage().end();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1215:             ++it) {
    #####: 1216:            const Variables::VariableUsage &usage = it->second;
call    0 never executed
        -: 1217:
        -: 1218:            // variable has been marked as unused so ignore it
    #####: 1219:            if (usage._var->nameToken()->isAttributeUnused() || usage._var->nameToken()->isAttributeUsed())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1220:                continue;
        -: 1221:
        -: 1222:            // skip things that are only partially implemented to prevent false positives
    #####: 1223:            if (usage.mType == Variables::pointerPointer ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1224:                usage.mType == Variables::pointerArray ||
branch  0 never executed
branch  1 never executed
    #####: 1225:                usage.mType == Variables::referenceArray)
    #####: 1226:                continue;
        -: 1227:
    #####: 1228:            const std::string &varname = usage._var->name();
call    0 never executed
    #####: 1229:            const Variable* var = symbolDatabase->getVariableFromVarId(it->first);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:
        -: 1231:            // variable has had memory allocated for it, but hasn't done
        -: 1232:            // anything with that memory other than, perhaps, freeing it
    #####: 1233:            if (usage.unused() && !usage._modified && usage._allocateMemory)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1234:                allocatedButUnusedVariableError(usage._lastAccess, varname);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1235:
        -: 1236:            // variable has not been written, read, or modified
    #####: 1237:            else if (usage.unused() && !usage._modified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1238:                unusedVariableError(usage._var->nameToken(), varname);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1239:
        -: 1240:            // variable has not been written but has been modified
    #####: 1241:            else if (usage._modified && !usage._write && !usage._allocateMemory && var && !var->isStlType())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1242:                unassignedVariableError(usage._var->nameToken(), varname);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1243:
        -: 1244:            // variable has been read but not written
    #####: 1245:            else if (!usage._write && !usage._allocateMemory && var && !var->isStlType() && !isEmptyType(var->type()))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1246:                unassignedVariableError(usage._var->nameToken(), varname);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1247:        }
        -: 1248:    }
        -: 1249:}
        -: 1250:
function _ZN14CheckUnusedVar19unusedVariableErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1251:void CheckUnusedVar::unusedVariableError(const Token *tok, const std::string &varname)
        -: 1252:{
    #####: 1253:    reportError(tok, Severity::style, "unusedVariable", "$symbol:" + varname + "\nUnused variable: $symbol", CWE563, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1254:}
        -: 1255:
function _ZN14CheckUnusedVar31allocatedButUnusedVariableErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1256:void CheckUnusedVar::allocatedButUnusedVariableError(const Token *tok, const std::string &varname)
        -: 1257:{
    #####: 1258:    reportError(tok, Severity::style, "unusedAllocatedMemory", "$symbol:" + varname + "\nVariable '$symbol' is allocated memory that is never used.", CWE563, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1259:}
        -: 1260:
function _ZN14CheckUnusedVar19unreadVariableErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1261:void CheckUnusedVar::unreadVariableError(const Token *tok, const std::string &varname, bool modified)
        -: 1262:{
    #####: 1263:    if (modified)
branch  0 never executed
branch  1 never executed
    #####: 1264:        reportError(tok, Severity::style, "unreadVariable", "$symbol:" + varname + "\nVariable '$symbol' is modified but its new value is never used.", CWE563, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1265:    else
    #####: 1266:        reportError(tok, Severity::style, "unreadVariable", "$symbol:" + varname + "\nVariable '$symbol' is assigned a value that is never used.", CWE563, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1267:}
        -: 1268:
function _ZN14CheckUnusedVar23unassignedVariableErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1269:void CheckUnusedVar::unassignedVariableError(const Token *tok, const std::string &varname)
        -: 1270:{
    #####: 1271:    reportError(tok, Severity::style, "unassignedVariable", "$symbol:" + varname + "\nVariable '$symbol' is not assigned a value.", CWE665, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1272:}
        -: 1273:
        -: 1274://---------------------------------------------------------------------------
        -: 1275:// Check that all struct members are used
        -: 1276://---------------------------------------------------------------------------
function _ZN14CheckUnusedVar22checkStructMemberUsageEv called 0 returned 0% blocks executed 0%
    #####: 1277:void CheckUnusedVar::checkStructMemberUsage()
        -: 1278:{
    #####: 1279:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1280:        return;
        -: 1281:
    #####: 1282:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -: 1283:
    #####: 1284:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1285:        if (scope.type != Scope::eStruct && scope.type != Scope::eUnion)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1286:            continue;
        -: 1287:
    #####: 1288:        if (scope.bodyStart->fileIndex() != 0 || scope.className.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1289:            continue;
        -: 1290:
        -: 1291:        // Packed struct => possibly used by lowlevel code. Struct members might be required by hardware.
    #####: 1292:        if (scope.bodyEnd->isAttributePacked())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1293:            continue;
        -: 1294:
        -: 1295:        // Bail out if struct/union contains any functions
    #####: 1296:        if (!scope.functionList.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1297:            continue;
        -: 1298:
        -: 1299:        // Bail out for template struct, members might be used in non-matching instantiations
    #####: 1300:        if (scope.className.find("<") != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1301:            continue;
        -: 1302:
        -: 1303:        // bail out if struct is inherited
    #####: 1304:        bool bailout = false;
    #####: 1305:        for (const Scope &derivedScope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1306:            if (derivedScope.definedType) {
branch  0 never executed
branch  1 never executed
    #####: 1307:                for (const Type::BaseInfo &derivedFrom : derivedScope.definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1308:                    if (derivedFrom.type == scope.definedType) {
branch  0 never executed
branch  1 never executed
    #####: 1309:                        bailout = true;
    #####: 1310:                        break;
        -: 1311:                    }
        -: 1312:                }
        -: 1313:            }
        -: 1314:        }
    #####: 1315:        if (bailout)
branch  0 never executed
branch  1 never executed
    #####: 1316:            continue;
        -: 1317:
        -: 1318:        // bail out for extern/global struct
    #####: 1319:        for (const Variable* var : symbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1320:            if (var && (var->isExtern() || (var->isGlobal() && !var->isStatic())) && var->typeEndToken()->str() == scope.className) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1321:                bailout = true;
    #####: 1322:                break;
        -: 1323:            }
        -: 1324:        }
    #####: 1325:        if (bailout)
branch  0 never executed
branch  1 never executed
    #####: 1326:            continue;
        -: 1327:
        -: 1328:        // Bail out if some data is casted to struct..
    #####: 1329:        const std::string castPattern("( struct| " + scope.className + " * ) & %name% [");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1330:        if (Token::findmatch(scope.bodyEnd, castPattern.c_str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1331:            continue;
        -: 1332:
        -: 1333:        // (struct S){..}
    #####: 1334:        const std::string initPattern("( struct| " + scope.className + " ) {");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1335:        if (Token::findmatch(scope.bodyEnd, initPattern.c_str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1336:            continue;
        -: 1337:
        -: 1338:        // Bail out if struct is used in sizeof..
    #####: 1339:        for (const Token *tok = scope.bodyEnd; nullptr != (tok = Token::findsimplematch(tok, "sizeof ("));) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1340:            tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1341:            if (Token::Match(tok, ("struct| " + scope.className).c_str())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1342:                bailout = true;
    #####: 1343:                break;
        -: 1344:            }
        -: 1345:        }
    #####: 1346:        if (bailout)
branch  0 never executed
branch  1 never executed
    #####: 1347:            continue;
        -: 1348:
        -: 1349:        // Try to prevent false positives when struct members are not used directly.
    #####: 1350:        if (Token::findmatch(scope.bodyEnd, (scope.className + " %type%| *").c_str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1351:            continue;
        -: 1352:
    #####: 1353:        for (const Variable &var : scope.varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
        -: 1354:            // declaring a POD member variable?
    #####: 1355:            if (!var.typeStartToken()->isStandardType() && !var.isPointer())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1356:                continue;
        -: 1357:
        -: 1358:            // Check if the struct member variable is used anywhere in the file
    #####: 1359:            if (Token::findsimplematch(mTokenizer->tokens(), (". " + var.name()).c_str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####: 1360:                continue;
        -: 1361:
    #####: 1362:            unusedStructMemberError(var.nameToken(), scope.className, var.name(), scope.type == Scope::eUnion);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1363:        }
        -: 1364:    }
        -: 1365:}
        -: 1366:
function _ZN14CheckUnusedVar23unusedStructMemberErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1367:void CheckUnusedVar::unusedStructMemberError(const Token *tok, const std::string &structname, const std::string &varname, bool isUnion)
        -: 1368:{
    #####: 1369:    const std::string prefix = isUnion ? "union member " : "struct member ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1370:    reportError(tok, Severity::style, "unusedStructMember", "$symbol:" + structname + "::" + varname + '\n' + prefix + "'$symbol' is never used.", CWE563, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
    #####: 1371:}
call    0 never executed
        -: 1372:
function _ZN14CheckUnusedVar30isRecordTypeWithoutSideEffectsEPK4Type called 0 returned 0% blocks executed 0%
    #####: 1373:bool CheckUnusedVar::isRecordTypeWithoutSideEffects(const Type* type)
        -: 1374:{
        -: 1375:    // a type that has no side effects (no constructors and no members with constructors)
        -: 1376:    /** @todo false negative: check constructors for side effects */
        -: 1377:
        -: 1378:    const std::pair<std::map<const Type *,bool>::iterator,bool> found=mIsRecordTypeWithoutSideEffectsMap.insert(
    #####: 1379:                std::pair<const Type *,bool>(type,false)); //Initialize with side effects for possible recursions
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1380:    bool & withoutSideEffects=found.first->second;
call    0 never executed
    #####: 1381:    if (!found.second)
branch  0 never executed
branch  1 never executed
    #####: 1382:        return withoutSideEffects;
        -: 1383:
    #####: 1384:    if (type && type->classScope && type->classScope->numConstructors == 0 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1385:        (type->classScope->varlist.empty() || type->needInitialization == Type::NeedInitialization::True)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1386:        for (std::vector<Type::BaseInfo>::const_iterator i = type->derivedFrom.begin(); i != type->derivedFrom.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1387:            if (!isRecordTypeWithoutSideEffects(i->type)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1388:                withoutSideEffects=false;
    #####: 1389:                return withoutSideEffects;
        -: 1390:            }
        -: 1391:        }
    #####: 1392:        withoutSideEffects=true;
    #####: 1393:        return withoutSideEffects;
        -: 1394:    }
        -: 1395:
    #####: 1396:    withoutSideEffects=false;   // unknown types are assumed to have side effects
    #####: 1397:    return withoutSideEffects;
        -: 1398:}
        -: 1399:
function _ZN14CheckUnusedVar11isEmptyTypeEPK4Type called 0 returned 0% blocks executed 0%
    #####: 1400:bool CheckUnusedVar::isEmptyType(const Type* type)
        -: 1401:{
        -: 1402:    // a type that has no variables and no constructor
        -: 1403:
        -: 1404:    const std::pair<std::map<const Type *,bool>::iterator,bool> found=mIsEmptyTypeMap.insert(
    #####: 1405:                std::pair<const Type *,bool>(type,false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1406:    bool & emptyType=found.first->second;
call    0 never executed
    #####: 1407:    if (!found.second)
branch  0 never executed
branch  1 never executed
    #####: 1408:        return emptyType;
        -: 1409:
    #####: 1410:    if (type && type->classScope && type->classScope->numConstructors == 0 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1411:        (type->classScope->varlist.empty())) {
call    0 never executed
    #####: 1412:        for (std::vector<Type::BaseInfo>::const_iterator i = type->derivedFrom.begin(); i != type->derivedFrom.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1413:            if (!isEmptyType(i->type)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1414:                emptyType=false;
    #####: 1415:                return emptyType;
        -: 1416:            }
        -: 1417:        }
    #####: 1418:        emptyType=true;
    #####: 1419:        return emptyType;
        -: 1420:    }
        -: 1421:
    #####: 1422:    emptyType=false;   // unknown types are assumed to be nonempty
    #####: 1423:    return emptyType;
function _GLOBAL__sub_I__ZN9Variables5aliasEjjb called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 1424:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
