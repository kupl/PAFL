        -:    0:Source:/home/workspace/lib/checkclass.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkclass.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkclass.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#include "checkclass.h"
        -:   21:
        -:   22:#include "astutils.h"
        -:   23:#include "errorlogger.h"
        -:   24:#include "library.h"
        -:   25:#include "settings.h"
        -:   26:#include "standards.h"
        -:   27:#include "symboldatabase.h"
        -:   28:#include "token.h"
        -:   29:#include "tokenize.h"
        -:   30:#include "utils.h"
        -:   31:
        -:   32:#include <algorithm>
        -:   33:#include <cstdlib>
        -:   34:#include <stack>
        -:   35:#include <utility>
        -:   36://---------------------------------------------------------------------------
        -:   37:
        -:   38:// Register CheckClass..
        -:   39:namespace {
        1:   40:    CheckClass instance;
call    0 returned 100%
call    1 returned 100%
        -:   41:}
        -:   42:
        1:   43:static const CWE CWE398(398U);  // Indicator of Poor Code Quality
call    0 returned 100%
        1:   44:static const CWE CWE404(404U);  // Improper Resource Shutdown or Release
call    0 returned 100%
        1:   45:static const CWE CWE665(665U);  // Improper Initialization
call    0 returned 100%
        1:   46:static const CWE CWE758(758U);  // Reliance on Undefined, Unspecified, or Implementation-Defined Behavior
call    0 returned 100%
        1:   47:static const CWE CWE762(762U);  // Mismatched Memory Management Routines
call    0 returned 100%
        -:   48:
function _ZL19getFunctionTypeNameN8Function4TypeE called 0 returned 0% blocks executed 0%
    #####:   49:static const char * getFunctionTypeName(Function::Type type)
        -:   50:{
    #####:   51:    switch (type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   52:    case Function::eConstructor:
    #####:   53:        return "constructor";
    #####:   54:    case Function::eCopyConstructor:
    #####:   55:        return "copy constructor";
    #####:   56:    case Function::eMoveConstructor:
    #####:   57:        return "move constructor";
    #####:   58:    case Function::eDestructor:
    #####:   59:        return "destructor";
    #####:   60:    case Function::eFunction:
    #####:   61:        return "function";
    #####:   62:    case Function::eOperatorEqual:
    #####:   63:        return "operator=";
    #####:   64:    case Function::eLambda:
    #####:   65:        return "lambda";
        -:   66:    }
    #####:   67:    return "";
        -:   68:}
        -:   69:
function _ZL20isVariableCopyNeededRK8Variable called 0 returned 0% blocks executed 0%
    #####:   70:static bool isVariableCopyNeeded(const Variable &var)
        -:   71:{
    #####:   72:    return var.isPointer() || (var.type() && var.type()->needInitialization == Type::NeedInitialization::True) || (var.valueType()->type >= ValueType::Type::CHAR);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:   73:}
        -:   74:
        -:   75://---------------------------------------------------------------------------
        -:   76:
function _ZN10CheckClassC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   77:CheckClass::CheckClass(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   78:    : Check(myName(), tokenizer, settings, errorLogger),
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   79:      mSymbolDatabase(tokenizer?tokenizer->getSymbolDatabase():nullptr)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:   80:{
        -:   81:
    #####:   82:}
        -:   83:
        -:   84://---------------------------------------------------------------------------
        -:   85:// ClassCheck: Check that all class constructors are ok.
        -:   86://---------------------------------------------------------------------------
        -:   87:
function _ZN10CheckClass12constructorsEv called 0 returned 0% blocks executed 0%
    #####:   88:void CheckClass::constructors()
        -:   89:{
    #####:   90:    const bool printStyle = mSettings->isEnabled(Settings::STYLE);
call    0 never executed
    #####:   91:    const bool printWarnings = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####:   92:    if (!printStyle && !printWarnings)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   93:        return;
        -:   94:
    #####:   95:    const bool printInconclusive = mSettings->inconclusive;
    #####:   96:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   97:        const bool unusedTemplate = Token::simpleMatch(scope->classDef->previous(), ">");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   98:
    #####:   99:        bool usedInUnion = false;
    #####:  100:        for (const Scope &unionScope : mSymbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  101:            if (unionScope.type != Scope::eUnion)
branch  0 never executed
branch  1 never executed
    #####:  102:                continue;
    #####:  103:            for (const Variable &var : unionScope.varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  104:                if (var.type() && var.type()->classScope == scope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  105:                    usedInUnion = true;
    #####:  106:                    break;
        -:  107:                }
        -:  108:            }
        -:  109:        }
        -:  110:
        -:  111:        // There are no constructors.
    #####:  112:        if (scope->numConstructors == 0 && printStyle && !usedInUnion) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  113:            // If there is a private variable, there should be a constructor..
    #####:  114:            for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  115:                const Token *initTok = var.nameToken();
call    0 never executed
    #####:  116:                while (Token::simpleMatch(initTok->next(), "["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  117:                    initTok = initTok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  118:                if (var.isPrivate() && !var.isStatic() && !Token::Match(var.nameToken(), "%varid% ; %varid% =", var.declarationId()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  119:                    !Token::Match(initTok, "%var%|] {|=") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  120:                    (!var.isClass() || (var.type() && var.type()->needInitialization == Type::NeedInitialization::True))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  121:                    noConstructorError(scope->classDef, scope->className, scope->classDef->str() == "struct");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  122:                    break;
        -:  123:                }
        -:  124:            }
        -:  125:        }
        -:  126:
    #####:  127:        if (!printWarnings)
branch  0 never executed
branch  1 never executed
    #####:  128:            continue;
        -:  129:
        -:  130:        // #3196 => bailout if there are nested unions
        -:  131:        // TODO: handle union variables better
        -:  132:        {
    #####:  133:            bool bailout = false;
    #####:  134:            for (const Scope * const nestedScope : scope->nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  135:                if (nestedScope->type == Scope::eUnion) {
branch  0 never executed
branch  1 never executed
    #####:  136:                    bailout = true;
    #####:  137:                    break;
        -:  138:                }
        -:  139:            }
    #####:  140:            if (bailout)
branch  0 never executed
branch  1 never executed
    #####:  141:                continue;
        -:  142:        }
        -:  143:
        -:  144:
    #####:  145:        std::vector<Usage> usage(scope->varlist.size());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  146:
    #####:  147:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  148:            if (!func.hasBody() || !(func.isConstructor() || func.type == Function::eOperatorEqual))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  149:                continue;
        -:  150:
        -:  151:            // Bail: If initializer list is not recognized as a variable or type then skip since parsing is incomplete
    #####:  152:            if (unusedTemplate && func.type == Function::eConstructor) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  153:                const Token *initList = func.constructorMemberInitialization();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  154:                if (Token::Match(initList, ": %name% (") && initList->next()->tokType() == Token::eName)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  155:                    break;
        -:  156:            }
        -:  157:
        -:  158:            // Mark all variables not used
    #####:  159:            clearAllVar(usage);
call    0 never executed
        -:  160:
    #####:  161:            std::list<const Function *> callstack;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  162:            initializeVarList(func, callstack, scope, usage);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  163:
        -:  164:            // Check if any variables are uninitialized
    #####:  165:            int count = -1;
    #####:  166:            for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  167:                ++count;
        -:  168:
        -:  169:                // check for C++11 initializer
    #####:  170:                if (var.hasDefault()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  171:                    usage[count].init = true;
call    0 never executed
    #####:  172:                    continue;
        -:  173:                }
        -:  174:
    #####:  175:                if (usage[count].assign || usage[count].init || var.isStatic())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  176:                    continue;
        -:  177:
    #####:  178:                if (var.valueType()->pointer == 0 && var.type() && var.type()->needInitialization == Type::NeedInitialization::False && var.type()->derivedFrom.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  179:                    continue;
        -:  180:
    #####:  181:                if (var.isConst() && func.isOperator()) // We can't set const members in assignment operator
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  182:                    continue;
        -:  183:
        -:  184:                // Check if this is a class constructor
    #####:  185:                if (!var.isPointer() && !var.isPointerArray() && var.isClass() && func.type == Function::eConstructor) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
        -:  186:                    // Unknown type so assume it is initialized
    #####:  187:                    if (!var.type())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  188:                        continue;
        -:  189:
        -:  190:                    // Known type that doesn't need initialization or
        -:  191:                    // known type that has member variables of an unknown type
    #####:  192:                    else if (var.type()->needInitialization != Type::NeedInitialization::True)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  193:                        continue;
        -:  194:                }
        -:  195:
        -:  196:                // Check if type can't be copied
    #####:  197:                if (!var.isPointer() && !var.isPointerArray() && var.typeScope()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  198:                    if (func.type == Function::eMoveConstructor) {
branch  0 never executed
branch  1 never executed
    #####:  199:                        if (canNotMove(var.typeScope()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  200:                            continue;
        -:  201:                    } else {
    #####:  202:                        if (canNotCopy(var.typeScope()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  203:                            continue;
        -:  204:                    }
        -:  205:                }
        -:  206:
    #####:  207:                bool inconclusive = false;
        -:  208:                // Don't warn about unknown types in copy constructors since we
        -:  209:                // don't know if they can be copied or not..
    #####:  210:                if ((func.type == Function::eCopyConstructor || func.type == Function::eMoveConstructor || func.type == Function::eOperatorEqual) && !isVariableCopyNeeded(var))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  211:                    inconclusive = true;
        -:  212:
    #####:  213:                if (!printInconclusive && inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  214:                    continue;
        -:  215:
        -:  216:                // It's non-static and it's not initialized => error
    #####:  217:                if (func.type == Function::eOperatorEqual) {
branch  0 never executed
branch  1 never executed
    #####:  218:                    const Token *operStart = func.arg;
        -:  219:
    #####:  220:                    bool classNameUsed = false;
    #####:  221:                    for (const Token *operTok = operStart; operTok != operStart->link(); operTok = operTok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  222:                        if (operTok->str() == scope->className) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  223:                            classNameUsed = true;
    #####:  224:                            break;
        -:  225:                        }
        -:  226:                    }
        -:  227:
    #####:  228:                    if (classNameUsed)
branch  0 never executed
branch  1 never executed
    #####:  229:                        operatorEqVarError(func.token, scope->className, var.name(), inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  230:                } else if (func.access != AccessControl::Private || mSettings->standards.cpp >= Standards::CPP11) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  231:                    // If constructor is not in scope then we maybe using a oonstructor from a different template specialization
    #####:  232:                    if (!precedes(scope->bodyStart, func.tokenDef))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  233:                        continue;
    #####:  234:                    const Scope *varType = var.typeScope();
call    0 never executed
    #####:  235:                    if (!varType || varType->type != Scope::eUnion) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  236:                        if (func.type == Function::eConstructor &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  237:                            func.nestedIn && (func.nestedIn->numConstructors - func.nestedIn->numCopyOrMoveConstructors) > 1 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  238:                            func.argCount() == 0 && func.functionScope &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  239:                            func.arg && func.arg->link()->next() == func.functionScope->bodyStart &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  240:                            func.functionScope->bodyStart->link() == func.functionScope->bodyStart->next()) {
call    0 never executed
call    1 never executed
        -:  241:                            // don't warn about user defined default constructor when there are other constructors
    #####:  242:                            if (printInconclusive)
branch  0 never executed
branch  1 never executed
    #####:  243:                                uninitVarError(func.token, func.access == AccessControl::Private, scope->className, var.name(), true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  244:                        } else
    #####:  245:                            uninitVarError(func.token, func.access == AccessControl::Private, scope->className, var.name(), inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  246:                    }
        -:  247:                }
        -:  248:            }
        -:  249:        }
        -:  250:    }
        -:  251:}
        -:  252:
function _ZN10CheckClass25checkExplicitConstructorsEv called 0 returned 0% blocks executed 0%
    #####:  253:void CheckClass::checkExplicitConstructors()
        -:  254:{
    #####:  255:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  256:        return;
        -:  257:
    #####:  258:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  259:        // Do not perform check, if the class/struct has not any constructors
    #####:  260:        if (scope->numConstructors == 0)
branch  0 never executed
branch  1 never executed
    #####:  261:            continue;
        -:  262:
        -:  263:        // Is class abstract? Maybe this test is over-simplification, but it will suffice for simple cases,
        -:  264:        // and it will avoid false positives.
    #####:  265:        bool isAbstractClass = false;
    #####:  266:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  267:            if (func.isPure()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  268:                isAbstractClass = true;
    #####:  269:                break;
        -:  270:            }
        -:  271:        }
        -:  272:
        -:  273:        // Abstract classes can't be instantiated. But if there is C++11
        -:  274:        // "misuse" by derived classes then these constructors must be explicit.
    #####:  275:        if (isAbstractClass && mSettings->standards.cpp != Standards::CPP11)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  276:            continue;
        -:  277:
    #####:  278:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  279:
        -:  280:            // We are looking for constructors, which are meeting following criteria:
        -:  281:            //  1) Constructor is declared with a single parameter
        -:  282:            //  2) Constructor is not declared as explicit
        -:  283:            //  3) It is not a copy/move constructor of non-abstract class
        -:  284:            //  4) Constructor is not marked as delete (programmer can mark the default constructor as deleted, which is ok)
    #####:  285:            if (!func.isConstructor() || func.isDelete() || (!func.hasBody() && func.access == AccessControl::Private))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  286:                continue;
        -:  287:
    #####:  288:            if (!func.isExplicit() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  289:                func.minArgCount() == 1 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  290:                func.type != Function::eCopyConstructor &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  291:                func.type != Function::eMoveConstructor) {
    #####:  292:                noExplicitConstructorError(func.tokenDef, scope->className, scope->type == Scope::eStruct);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:            }
        -:  294:        }
        -:  295:    }
        -:  296:}
        -:  297:
function _ZL13isNonCopyablePK5ScopePb called 0 returned 0% blocks executed 0%
    #####:  298:static bool isNonCopyable(const Scope *scope, bool *unknown)
        -:  299:{
    #####:  300:    bool u = false;
        -:  301:    // check if there is base class that is not copyable
    #####:  302:    for (const Type::BaseInfo &baseInfo : scope->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####:  303:        if (!baseInfo.type || !baseInfo.type->classScope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  304:            u = true;
    #####:  305:            continue;
        -:  306:        }
        -:  307:
    #####:  308:        if (isNonCopyable(baseInfo.type->classScope, &u))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  309:            return true;
        -:  310:
    #####:  311:        for (const Function &func : baseInfo.type->classScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  312:            if (func.type != Function::eCopyConstructor)
branch  0 never executed
branch  1 never executed
    #####:  313:                continue;
    #####:  314:            if (func.access == AccessControl::Private || func.isDelete())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  315:                return true;
        -:  316:        }
        -:  317:    }
    #####:  318:    *unknown = u;
    #####:  319:    return false;
        -:  320:}
        -:  321:
function _ZN10CheckClass16copyconstructorsEv called 0 returned 0% blocks executed 0%
    #####:  322:void CheckClass::copyconstructors()
        -:  323:{
    #####:  324:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  325:        return;
        -:  326:
    #####:  327:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  328:        std::map<int, const Token*> allocatedVars;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  329:
    #####:  330:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  331:            if (func.type != Function::eConstructor || !func.functionScope)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  332:                continue;
    #####:  333:            const Token* tok = func.token->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:            for (const Token* const end = func.functionScope->bodyStart; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  335:                if (Token::Match(tok, "%var% ( new") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  336:                    (Token::Match(tok, "%var% ( %name% (") && mSettings->library.getAllocFuncInfo(tok->tokAt(2)))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  337:                    const Variable* var = tok->variable();
call    0 never executed
    #####:  338:                    if (var && var->isPointer() && var->scope() == scope)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  339:                        allocatedVars[tok->varId()] = tok;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  340:                }
        -:  341:            }
    #####:  342:            for (const Token* const end = func.functionScope->bodyEnd; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  343:                if (Token::Match(tok, "%var% = new") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  344:                    (Token::Match(tok, "%var% = %name% (") && mSettings->library.getAllocFuncInfo(tok->tokAt(2)))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  345:                    const Variable* var = tok->variable();
call    0 never executed
    #####:  346:                    if (var && var->isPointer() && var->scope() == scope && !var->isStatic())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  347:                        allocatedVars[tok->varId()] = tok;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  348:                }
        -:  349:            }
        -:  350:        }
        -:  351:
    #####:  352:        if (!allocatedVars.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  353:            const Function *funcCopyCtor = nullptr;
    #####:  354:            const Function *funcOperatorEq = nullptr;
    #####:  355:            const Function *funcDestructor = nullptr;
    #####:  356:            for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  357:                if (func.type == Function::eCopyConstructor)
branch  0 never executed
branch  1 never executed
    #####:  358:                    funcCopyCtor = &func;
    #####:  359:                else if (func.type == Function::eOperatorEqual)
branch  0 never executed
branch  1 never executed
    #####:  360:                    funcOperatorEq = &func;
    #####:  361:                else if (func.type == Function::eDestructor)
branch  0 never executed
branch  1 never executed
    #####:  362:                    funcDestructor = &func;
        -:  363:            }
    #####:  364:            if (!funcCopyCtor || funcCopyCtor->isDefault()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  365:                bool unknown = false;
    #####:  366:                if (!isNonCopyable(scope, &unknown) && !unknown)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  367:                    noCopyConstructorError(scope, funcCopyCtor, allocatedVars.begin()->second, unknown);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:  368:            }
    #####:  369:            if (!funcOperatorEq || funcOperatorEq->isDefault()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  370:                bool unknown = false;
    #####:  371:                if (!isNonCopyable(scope, &unknown) && !unknown)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  372:                    noOperatorEqError(scope, funcOperatorEq, allocatedVars.begin()->second, unknown);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -:  373:            }
    #####:  374:            if (!funcDestructor || funcDestructor->isDefault()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  375:                const Token * mustDealloc = nullptr;
    #####:  376:                for (std::map<int, const Token*>::const_iterator it = allocatedVars.begin(); it != allocatedVars.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  377:                    if (!Token::Match(it->second, "%var% [(=] new %type%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  378:                        mustDealloc = it->second;
call    0 never executed
    #####:  379:                        break;
        -:  380:                    }
    #####:  381:                    if (it->second->valueType() && it->second->valueType()->isIntegral()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  382:                        mustDealloc = it->second;
call    0 never executed
    #####:  383:                        break;
        -:  384:                    }
    #####:  385:                    const Variable *var = it->second->variable();
call    0 never executed
call    1 never executed
    #####:  386:                    if (var && var->typeScope() && var->typeScope()->functionList.empty() && var->type()->derivedFrom.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  387:                        mustDealloc = it->second;
call    0 never executed
        -:  388:                }
    #####:  389:                if (mustDealloc)
branch  0 never executed
branch  1 never executed
    #####:  390:                    noDestructorError(scope, funcDestructor, mustDealloc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  391:            }
        -:  392:        }
        -:  393:
    #####:  394:        std::set<const Token*> copiedVars;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  395:        const Token* copyCtor = nullptr;
    #####:  396:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  397:            if (func.type != Function::eCopyConstructor)
branch  0 never executed
branch  1 never executed
    #####:  398:                continue;
    #####:  399:            copyCtor = func.tokenDef;
    #####:  400:            if (!func.functionScope) {
branch  0 never executed
branch  1 never executed
    #####:  401:                allocatedVars.clear();
call    0 never executed
    #####:  402:                break;
        -:  403:            }
    #####:  404:            const Token* tok = func.tokenDef->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  405:            if (tok->str()==":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  406:                tok=tok->next();
call    0 never executed
    #####:  407:                while (Token::Match(tok, "%name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  408:                    if (allocatedVars.find(tok->varId()) != allocatedVars.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  409:                        if (tok->varId() && Token::Match(tok->tokAt(2), "%name% . %name% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  410:                            copiedVars.insert(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  411:                        else if (!Token::Match(tok->tokAt(2), "%any% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  412:                            allocatedVars.erase(tok->varId()); // Assume memory is allocated
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  413:                    }
    #####:  414:                    tok = tok->linkAt(1)->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  415:                }
        -:  416:            }
    #####:  417:            for (tok = func.functionScope->bodyStart; tok != func.functionScope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  418:                if (Token::Match(tok, "%var% = new|malloc|g_malloc|g_try_malloc|realloc|g_realloc|g_try_realloc")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  419:                    allocatedVars.erase(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  420:                } else if (Token::Match(tok, "%var% = %name% . %name% ;") && allocatedVars.find(tok->varId()) != allocatedVars.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####:  421:                    copiedVars.insert(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  422:                }
        -:  423:            }
    #####:  424:            break;
        -:  425:        }
    #####:  426:        if (copyCtor && !copiedVars.empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  427:            for (const Token *cv : copiedVars)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  428:                copyConstructorShallowCopyError(cv, cv->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  429:            // throw error if count mismatch
        -:  430:            /* FIXME: This doesn't work. See #4154
        -:  431:            for (std::map<int, const Token*>::const_iterator i = allocatedVars.begin(); i != allocatedVars.end(); ++i) {
        -:  432:                copyConstructorMallocError(copyCtor, i->second, i->second->str());
        -:  433:            }
        -:  434:            */
        -:  435:        }
        -:  436:    }
        -:  437:}
        -:  438:
        -:  439:/* This doesn't work. See #4154
        -:  440:void CheckClass::copyConstructorMallocError(const Token *cctor, const Token *alloc, const std::string& varname)
        -:  441:{
        -:  442:    std::list<const Token*> callstack;
        -:  443:    callstack.push_back(cctor);
        -:  444:    callstack.push_back(alloc);
        -:  445:    reportError(callstack, Severity::warning, "copyCtorNoAllocation", "Copy constructor does not allocate memory for member '" + varname + "' although memory has been allocated in other constructors.");
        -:  446:}
        -:  447:*/
        -:  448:
function _ZN10CheckClass31copyConstructorShallowCopyErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  449:void CheckClass::copyConstructorShallowCopyError(const Token *tok, const std::string& varname)
        -:  450:{
    #####:  451:    reportError(tok, Severity::warning, "copyCtorPointerCopying",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  452:                "$symbol:" + varname + "\nValue of pointer '$symbol', which points to allocated memory, is copied in copy constructor instead of allocating new memory.", CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  453:}
        -:  454:
function _ZL20noMemberErrorMessagePK5ScopePKcb called 0 returned 0% blocks executed 0%
    #####:  455:static std::string noMemberErrorMessage(const Scope *scope, const char function[], bool isdefault)
        -:  456:{
    #####:  457:    const std::string &classname = scope ? scope->className : "class";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####:  458:    const std::string type = (scope && scope->type == Scope::eStruct) ? "Struct" : "Class";
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  459:    const bool isDestructor = (function[0] == 'd');
    #####:  460:    std::string errmsg = "$symbol:" + classname + '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  461:
    #####:  462:    if (isdefault) {
branch  0 never executed
branch  1 never executed
    #####:  463:        errmsg += type + " '$symbol' has dynamic memory/resource allocation(s). The " + function + " is explicitly defaulted but the default " + function + " does not work well.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####:  464:        if (isDestructor)
branch  0 never executed
branch  1 never executed
    #####:  465:            errmsg += " It is recommended to define the " + std::string(function) + '.';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -:  466:        else
    #####:  467:            errmsg += " It is recommended to define or delete the " + std::string(function) + '.';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -:  468:    } else {
    #####:  469:        errmsg += type + " '$symbol' does not have a " + function + " which is recommended since it has dynamic memory/resource allocation(s).";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  470:    }
        -:  471:
    #####:  472:    return errmsg;
        -:  473:}
        -:  474:
function _ZN10CheckClass22noCopyConstructorErrorEPK5ScopebPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  475:void CheckClass::noCopyConstructorError(const Scope *scope, bool isdefault, const Token *alloc, bool inconclusive)
        -:  476:{
    #####:  477:    reportError(alloc, Severity::warning, "noCopyConstructor", noMemberErrorMessage(scope, "copy constructor", isdefault), CWE398, inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  478:}
        -:  479:
function _ZN10CheckClass17noOperatorEqErrorEPK5ScopebPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  480:void CheckClass::noOperatorEqError(const Scope *scope, bool isdefault, const Token *alloc, bool inconclusive)
        -:  481:{
    #####:  482:    reportError(alloc, Severity::warning, "noOperatorEq", noMemberErrorMessage(scope, "operator=", isdefault), CWE398, inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  483:}
        -:  484:
function _ZN10CheckClass17noDestructorErrorEPK5ScopebPK5Token called 0 returned 0% blocks executed 0%
    #####:  485:void CheckClass::noDestructorError(const Scope *scope, bool isdefault, const Token *alloc)
        -:  486:{
    #####:  487:    reportError(alloc, Severity::warning, "noDestructor", noMemberErrorMessage(scope, "destructor", isdefault), CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  488:}
        -:  489:
function _ZN10CheckClass10canNotCopyEPK5Scope called 0 returned 0% blocks executed 0%
    #####:  490:bool CheckClass::canNotCopy(const Scope *scope)
        -:  491:{
    #####:  492:    bool constructor = false;
    #####:  493:    bool publicAssign = false;
    #####:  494:    bool publicCopy = false;
        -:  495:
    #####:  496:    for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  497:        if (func.isConstructor())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  498:            constructor = true;
    #####:  499:        if (func.access != AccessControl::Public)
branch  0 never executed
branch  1 never executed
    #####:  500:            continue;
    #####:  501:        if (func.type == Function::eCopyConstructor) {
branch  0 never executed
branch  1 never executed
    #####:  502:            publicCopy = true;
    #####:  503:            break;
    #####:  504:        } else if (func.type == Function::eOperatorEqual) {
branch  0 never executed
branch  1 never executed
    #####:  505:            publicAssign = true;
    #####:  506:            break;
        -:  507:        }
        -:  508:    }
        -:  509:
    #####:  510:    return constructor && !(publicAssign || publicCopy);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  511:}
        -:  512:
function _ZN10CheckClass10canNotMoveEPK5Scope called 0 returned 0% blocks executed 0%
    #####:  513:bool CheckClass::canNotMove(const Scope *scope)
        -:  514:{
    #####:  515:    bool constructor = false;
    #####:  516:    bool publicAssign = false;
    #####:  517:    bool publicCopy = false;
    #####:  518:    bool publicMove = false;
        -:  519:
    #####:  520:    for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  521:        if (func.isConstructor())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  522:            constructor = true;
    #####:  523:        if (func.access != AccessControl::Public)
branch  0 never executed
branch  1 never executed
    #####:  524:            continue;
    #####:  525:        if (func.type == Function::eCopyConstructor) {
branch  0 never executed
branch  1 never executed
    #####:  526:            publicCopy = true;
    #####:  527:            break;
    #####:  528:        } else if (func.type == Function::eMoveConstructor) {
branch  0 never executed
branch  1 never executed
    #####:  529:            publicMove = true;
    #####:  530:            break;
    #####:  531:        } else if (func.type == Function::eOperatorEqual) {
branch  0 never executed
branch  1 never executed
    #####:  532:            publicAssign = true;
    #####:  533:            break;
        -:  534:        }
        -:  535:    }
        -:  536:
    #####:  537:    return constructor && !(publicAssign || publicCopy || publicMove);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  538:}
        -:  539:
function _ZN10CheckClass9assignVarEiPK5ScopeRNSt7__debug6vectorINS_5UsageESaIS5_EEE called 0 returned 0% blocks executed 0%
    #####:  540:void CheckClass::assignVar(nonneg int varid, const Scope *scope, std::vector<Usage> &usage)
        -:  541:{
    #####:  542:    int count = 0;
        -:  543:
    #####:  544:    for (std::list<Variable>::const_iterator var = scope->varlist.begin(); var != scope->varlist.end(); ++var, ++count) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  545:        if (var->declarationId() == varid) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  546:            usage[count].assign = true;
call    0 never executed
    #####:  547:            return;
        -:  548:        }
        -:  549:    }
        -:  550:}
        -:  551:
function _ZN10CheckClass7initVarEiPK5ScopeRNSt7__debug6vectorINS_5UsageESaIS5_EEE called 0 returned 0% blocks executed 0%
    #####:  552:void CheckClass::initVar(nonneg int varid, const Scope *scope, std::vector<Usage> &usage)
        -:  553:{
    #####:  554:    int count = 0;
        -:  555:
    #####:  556:    for (std::list<Variable>::const_iterator var = scope->varlist.begin(); var != scope->varlist.end(); ++var, ++count) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  557:        if (var->declarationId() == varid) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  558:            usage[count].init = true;
call    0 never executed
    #####:  559:            return;
        -:  560:        }
        -:  561:    }
        -:  562:}
        -:  563:
function _ZN10CheckClass12assignAllVarERNSt7__debug6vectorINS_5UsageESaIS2_EEE called 0 returned 0% blocks executed 0%
    #####:  564:void CheckClass::assignAllVar(std::vector<Usage> &usage)
        -:  565:{
    #####:  566:    for (Usage & i : usage)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  567:        i.assign = true;
    #####:  568:}
        -:  569:
function _ZN10CheckClass11clearAllVarERNSt7__debug6vectorINS_5UsageESaIS2_EEE called 0 returned 0% blocks executed 0%
    #####:  570:void CheckClass::clearAllVar(std::vector<Usage> &usage)
        -:  571:{
    #####:  572:    for (Usage & i : usage) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  573:        i.assign = false;
    #####:  574:        i.init = false;
        -:  575:    }
    #####:  576:}
        -:  577:
function _ZN10CheckClass15isBaseClassFuncEPK5TokenPK5Scope called 0 returned 0% blocks executed 0%
    #####:  578:bool CheckClass::isBaseClassFunc(const Token *tok, const Scope *scope)
        -:  579:{
        -:  580:    // Iterate through each base class...
    #####:  581:    for (const Type::BaseInfo & i : scope->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  582:        const Type *derivedFrom = i.type;
        -:  583:
        -:  584:        // Check if base class exists in database
    #####:  585:        if (derivedFrom && derivedFrom->classScope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  586:            const std::list<Function>& functionList = derivedFrom->classScope->functionList;
        -:  587:
    #####:  588:            for (const Function &func : functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  589:                if (func.tokenDef->str() == tok->str())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  590:                    return true;
    #####:  591:            }
        -:  592:        }
        -:  593:
        -:  594:        // Base class not found so assume it is in it.
        -:  595:        else
    #####:  596:            return true;
        -:  597:    }
        -:  598:
    #####:  599:    return false;
        -:  600:}
        -:  601:
function _ZN10CheckClass17initializeVarListERK8FunctionRNSt7__debug4listIPS1_SaIS5_EEEPK5ScopeRNS3_6vectorINS_5UsageESaISD_EEE called 0 returned 0% blocks executed 0%
    #####:  602:void CheckClass::initializeVarList(const Function &func, std::list<const Function *> &callstack, const Scope *scope, std::vector<Usage> &usage)
        -:  603:{
    #####:  604:    if (!func.functionScope)
branch  0 never executed
branch  1 never executed
    #####:  605:        throw InternalError(nullptr, "Internal Error: Invalid syntax"); // #5702
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  606:    bool initList = func.isConstructor();
call    0 never executed
    #####:  607:    const Token *ftok = func.arg->link()->next();
call    0 never executed
call    1 never executed
    #####:  608:    int level = 0;
    #####:  609:    for (; ftok && ftok != func.functionScope->bodyEnd; ftok = ftok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  610:        // Class constructor.. initializing variables like this
        -:  611:        // clKalle::clKalle() : var(value) { }
    #####:  612:        if (initList) {
branch  0 never executed
branch  1 never executed
    #####:  613:            if (level == 0 && Token::Match(ftok, "%name% {|(") && Token::Match(ftok->linkAt(1), "}|) ,|{")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  614:                if (ftok->str() != func.name()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  615:                    initVar(ftok->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  616:                } else { // c++11 delegate constructor
    #####:  617:                    const Function *member = ftok->function();
call    0 never executed
        -:  618:                    // member function not found => assume it initializes all members
    #####:  619:                    if (!member) {
branch  0 never executed
branch  1 never executed
    #####:  620:                        assignAllVar(usage);
call    0 never executed
    #####:  621:                        return;
        -:  622:                    }
        -:  623:
        -:  624:                    // recursive call
        -:  625:                    // assume that all variables are initialized
    #####:  626:                    if (std::find(callstack.begin(), callstack.end(), member) != callstack.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  627:                        /** @todo false negative: just bail */
    #####:  628:                        assignAllVar(usage);
call    0 never executed
    #####:  629:                        return;
        -:  630:                    }
        -:  631:
        -:  632:                    // member function has implementation
    #####:  633:                    if (member->hasBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  634:                        // initialize variable use list using member function
    #####:  635:                        callstack.push_back(member);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  636:                        initializeVarList(*member, callstack, scope, usage);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  637:                        callstack.pop_back();
call    0 never executed
        -:  638:                    }
        -:  639:
        -:  640:                    // there is a called member function, but it has no implementation, so we assume it initializes everything
        -:  641:                    else {
    #####:  642:                        assignAllVar(usage);
call    0 never executed
        -:  643:                    }
        -:  644:                }
    #####:  645:            } else if (level != 0 && Token::Match(ftok, "%name% =")) // assignment in the initializer: var(value = x)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  646:                assignVar(ftok->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  647:
        -:  648:            // Level handling
    #####:  649:            if (ftok->link() && Token::Match(ftok, "(|<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  650:                level++;
    #####:  651:            else if (ftok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  652:                if (level != 0 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  653:                    (Token::Match(ftok->previous(), "%name%|>") && Token::Match(ftok->link(), "} ,|{")))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  654:                    level++;
        -:  655:                else
    #####:  656:                    initList = false;
    #####:  657:            } else if (ftok->link() && Token::Match(ftok, ")|>|}"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  658:                level--;
        -:  659:        }
        -:  660:
    #####:  661:        if (initList)
branch  0 never executed
branch  1 never executed
    #####:  662:            continue;
        -:  663:
        -:  664:        // Variable getting value from stream?
    #####:  665:        if (Token::Match(ftok, ">>|& %name%") && isLikelyStreamRead(true, ftok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  666:            assignVar(ftok->next()->varId(), scope, usage);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  667:        }
        -:  668:
        -:  669:        // If assignment comes after an && or || this is really inconclusive because of short circuiting
    #####:  670:        if (Token::Match(ftok, "%oror%|&&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  671:            continue;
        -:  672:
    #####:  673:        if (Token::simpleMatch(ftok, "( !"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  674:            ftok = ftok->next();
call    0 never executed
        -:  675:
        -:  676:        // Using the operator= function to initialize all variables..
    #####:  677:        if (Token::Match(ftok->next(), "return| (| * this )| =")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  678:            assignAllVar(usage);
call    0 never executed
    #####:  679:            break;
        -:  680:        }
        -:  681:
        -:  682:        // Using swap to assign all variables..
    #####:  683:        if (func.type == Function::eOperatorEqual && Token::Match(ftok, "[;{}] %name% (") && Token::Match(ftok->linkAt(2), ") . %name% ( *| this ) ;")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  684:            assignAllVar(usage);
call    0 never executed
    #####:  685:            break;
        -:  686:        }
        -:  687:
        -:  688:        // Calling member variable function?
    #####:  689:        if (Token::Match(ftok->next(), "%var% . %name% (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  690:            for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  691:                if (var.declarationId() == ftok->next()->varId()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  692:                    /** @todo false negative: we assume function changes variable state */
    #####:  693:                    assignVar(ftok->next()->varId(), scope, usage);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  694:                    break;
        -:  695:                }
        -:  696:            }
        -:  697:
    #####:  698:            ftok = ftok->tokAt(2);
call    0 never executed
        -:  699:        }
        -:  700:
    #####:  701:        if (!Token::Match(ftok->next(), "::| %name%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  702:            !Token::Match(ftok->next(), "*| this . %name%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  703:            !Token::Match(ftok->next(), "* %name% =") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  704:            !Token::Match(ftok->next(), "( * this ) . %name%"))
call    0 never executed
call    1 never executed
    #####:  705:            continue;
        -:  706:
        -:  707:        // Goto the first token in this statement..
    #####:  708:        ftok = ftok->next();
call    0 never executed
        -:  709:
        -:  710:        // skip "return"
    #####:  711:        if (ftok->str() == "return")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  712:            ftok = ftok->next();
call    0 never executed
        -:  713:
        -:  714:        // Skip "( * this )"
    #####:  715:        if (Token::simpleMatch(ftok, "( * this ) .")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  716:            ftok = ftok->tokAt(5);
call    0 never executed
        -:  717:        }
        -:  718:
        -:  719:        // Skip "this->"
    #####:  720:        if (Token::simpleMatch(ftok, "this ."))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  721:            ftok = ftok->tokAt(2);
call    0 never executed
        -:  722:
        -:  723:        // Skip "classname :: "
    #####:  724:        if (Token::Match(ftok, ":: %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  725:            ftok = ftok->next();
call    0 never executed
    #####:  726:        while (Token::Match(ftok, "%name% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  727:            ftok = ftok->tokAt(2);
call    0 never executed
        -:  728:
        -:  729:        // Clearing all variables..
    #####:  730:        if (Token::Match(ftok, "::| memset ( this ,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  731:            assignAllVar(usage);
call    0 never executed
    #####:  732:            return;
        -:  733:        }
        -:  734:
        -:  735:        // Ticket #7068
    #####:  736:        else if (Token::Match(ftok, "::| memset ( &| this . %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:            if (ftok->str() == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  738:                ftok = ftok->next();
call    0 never executed
    #####:  739:            int offsetToMember = 4;
    #####:  740:            if (ftok->strAt(2) == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  741:                ++offsetToMember;
    #####:  742:            assignVar(ftok->tokAt(offsetToMember)->varId(), scope, usage);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  743:            ftok = ftok->linkAt(1);
call    0 never executed
    #####:  744:            continue;
        -:  745:        }
        -:  746:
        -:  747:        // Clearing array..
    #####:  748:        else if (Token::Match(ftok, "::| memset ( %name% ,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:            if (ftok->str() == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  750:                ftok = ftok->next();
call    0 never executed
    #####:  751:            assignVar(ftok->tokAt(2)->varId(), scope, usage);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  752:            ftok = ftok->linkAt(1);
call    0 never executed
    #####:  753:            continue;
        -:  754:        }
        -:  755:
        -:  756:        // Calling member function?
    #####:  757:        else if (Token::simpleMatch(ftok, "operator= (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  758:                 ftok->previous()->str() != "::") {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  759:            if (ftok->function() && ftok->function()->nestedIn == scope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  760:                const Function *member = ftok->function();
call    0 never executed
        -:  761:                // recursive call
        -:  762:                // assume that all variables are initialized
    #####:  763:                if (std::find(callstack.begin(), callstack.end(), member) != callstack.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  764:                    /** @todo false negative: just bail */
    #####:  765:                    assignAllVar(usage);
call    0 never executed
    #####:  766:                    return;
        -:  767:                }
        -:  768:
        -:  769:                // member function has implementation
    #####:  770:                if (member->hasBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  771:                    // initialize variable use list using member function
    #####:  772:                    callstack.push_back(member);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  773:                    initializeVarList(*member, callstack, scope, usage);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:                    callstack.pop_back();
call    0 never executed
        -:  775:                }
        -:  776:
        -:  777:                // there is a called member function, but it has no implementation, so we assume it initializes everything
        -:  778:                else {
    #####:  779:                    assignAllVar(usage);
call    0 never executed
        -:  780:                }
        -:  781:            }
        -:  782:
        -:  783:            // using default operator =, assume everything initialized
        -:  784:            else {
    #####:  785:                assignAllVar(usage);
call    0 never executed
        -:  786:            }
    #####:  787:        } else if (Token::Match(ftok, "::| %name% (") && !Token::Match(ftok, "if|while|for")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  788:            if (ftok->str() == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  789:                ftok = ftok->next();
call    0 never executed
        -:  790:
        -:  791:            // Passing "this" => assume that everything is initialized
    #####:  792:            for (const Token *tok2 = ftok->next()->link(); tok2 && tok2 != ftok; tok2 = tok2->previous()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  793:                if (tok2->str() == "this") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  794:                    assignAllVar(usage);
call    0 never executed
    #####:  795:                    return;
        -:  796:                }
        -:  797:            }
        -:  798:
        -:  799:            // check if member function
    #####:  800:            if (ftok->function() && ftok->function()->nestedIn == scope &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  801:                !ftok->function()->isConstructor()) {
call    0 never executed
call    1 never executed
    #####:  802:                const Function *member = ftok->function();
call    0 never executed
        -:  803:
        -:  804:                // recursive call
        -:  805:                // assume that all variables are initialized
    #####:  806:                if (std::find(callstack.begin(), callstack.end(), member) != callstack.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  807:                    assignAllVar(usage);
call    0 never executed
    #####:  808:                    return;
        -:  809:                }
        -:  810:
        -:  811:                // member function has implementation
    #####:  812:                if (member->hasBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  813:                    // initialize variable use list using member function
    #####:  814:                    callstack.push_back(member);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:                    initializeVarList(*member, callstack, scope, usage);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  816:                    callstack.pop_back();
call    0 never executed
        -:  817:
        -:  818:                    // Assume that variables that are passed to it are initialized..
    #####:  819:                    for (const Token *tok2 = ftok; tok2; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  820:                        if (Token::Match(tok2, "[;{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  821:                            break;
    #####:  822:                        if (Token::Match(tok2, "[(,] &| %name% [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  823:                            tok2 = tok2->next();
call    0 never executed
    #####:  824:                            if (tok2->str() == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  825:                                tok2 = tok2->next();
call    0 never executed
    #####:  826:                            assignVar(tok2->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  827:                        }
        -:  828:                    }
        -:  829:                }
        -:  830:
        -:  831:                // there is a called member function, but it has no implementation, so we assume it initializes everything
        -:  832:                else {
    #####:  833:                    assignAllVar(usage);
call    0 never executed
        -:  834:                }
        -:  835:            }
        -:  836:
        -:  837:            // not member function
        -:  838:            else {
        -:  839:                // could be a base class virtual function, so we assume it initializes everything
    #####:  840:                if (!func.isConstructor() && isBaseClassFunc(ftok, scope)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  841:                    /** @todo False Negative: we should look at the base class functions to see if they
        -:  842:                     *  call any derived class virtual functions that change the derived class state
        -:  843:                     */
    #####:  844:                    assignAllVar(usage);
call    0 never executed
        -:  845:                }
        -:  846:
        -:  847:                // has friends, so we assume it initializes everything
    #####:  848:                if (!scope->definedType->friendList.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  849:                    assignAllVar(usage);
call    0 never executed
        -:  850:
        -:  851:                // the function is external and it's neither friend nor inherited virtual function.
        -:  852:                // assume all variables that are passed to it are initialized..
        -:  853:                else {
    #####:  854:                    for (const Token *tok = ftok->tokAt(2); tok && tok != ftok->next()->link(); tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  855:                        if (tok->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  856:                            assignVar(tok->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  857:                        }
        -:  858:                    }
        -:  859:                }
        -:  860:            }
        -:  861:        }
        -:  862:
        -:  863:        // Assignment of member variable?
    #####:  864:        else if (Token::Match(ftok, "%name% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  865:            assignVar(ftok->varId(), scope, usage);
call    0 never executed
call    1 never executed
    #####:  866:            bool bailout = ftok->variable() && ftok->variable()->isReference();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  867:            const Token* tok2 = ftok->tokAt(2);
call    0 never executed
    #####:  868:            if (tok2->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  869:                tok2 = tok2->next();
call    0 never executed
    #####:  870:                bailout = true;
        -:  871:            }
    #####:  872:            if (tok2->variable() && (bailout || tok2->variable()->isArray()) && tok2->strAt(1) != "[")
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  873:                assignVar(tok2->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  874:        }
        -:  875:
        -:  876:        // Assignment of array item of member variable?
    #####:  877:        else if (Token::Match(ftok, "%name% [|.")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  878:            const Token *tok2 = ftok;
    #####:  879:            while (tok2) {
branch  0 never executed
branch  1 never executed
    #####:  880:                if (tok2->strAt(1) == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  881:                    tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
    #####:  882:                else if (Token::Match(tok2->next(), ". %name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  883:                    tok2 = tok2->tokAt(2);
call    0 never executed
        -:  884:                else
    #####:  885:                    break;
        -:  886:            }
    #####:  887:            if (tok2 && tok2->strAt(1) == "=")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  888:                assignVar(ftok->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  889:        }
        -:  890:
        -:  891:        // Assignment of array item of member variable?
    #####:  892:        else if (Token::Match(ftok, "* %name% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:            assignVar(ftok->next()->varId(), scope, usage);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  894:        } else if (Token::Match(ftok, "* this . %name% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  895:            assignVar(ftok->tokAt(3)->varId(), scope, usage);
call    0 never executed
call    1 never executed
call    2 never executed
        -:  896:        }
        -:  897:
        -:  898:        // The functions 'clear' and 'Clear' are supposed to initialize variable.
    #####:  899:        if (Token::Match(ftok, "%name% . clear|Clear (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:            assignVar(ftok->varId(), scope, usage);
call    0 never executed
call    1 never executed
        -:  901:        }
        -:  902:    }
        -:  903:}
        -:  904:
function _ZN10CheckClass18noConstructorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  905:void CheckClass::noConstructorError(const Token *tok, const std::string &classname, bool isStruct)
        -:  906:{
        -:  907:    // For performance reasons the constructor might be intentionally missing. Therefore this is not a "warning"
    #####:  908:    reportError(tok, Severity::style, "noConstructor",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:                "$symbol:" + classname + "\n" +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  910:                "The " + std::string(isStruct ? "struct" : "class") + " '$symbol' does not have a constructor although it has private member variables.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  911:                "The " + std::string(isStruct ? "struct" : "class") + " '$symbol' does not have a constructor "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  912:                "although it has private member variables. Member variables of builtin types are left "
        -:  913:                "uninitialized when the class is instantiated. That may cause bugs or undefined behavior.", CWE398, false);
    #####:  914:}
        -:  915:
function _ZN10CheckClass26noExplicitConstructorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  916:void CheckClass::noExplicitConstructorError(const Token *tok, const std::string &classname, bool isStruct)
        -:  917:{
    #####:  918:    const std::string message(std::string(isStruct ? "Struct" : "Class") + " '$symbol' has a constructor with 1 argument that is not explicit.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  919:    const std::string verbose(message + " Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  920:    reportError(tok, Severity::style, "noExplicitConstructor", "$symbol:" + classname + '\n' + message + '\n' + verbose, CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####:  921:}
call    0 never executed
        -:  922:
function _ZN10CheckClass14uninitVarErrorEPK5TokenbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####:  923:void CheckClass::uninitVarError(const Token *tok, bool isprivate, const std::string &classname, const std::string &varname, bool inconclusive)
        -:  924:{
    #####:  925:    reportError(tok, Severity::warning, isprivate ? "uninitMemberVarPrivate" : "uninitMemberVar", "$symbol:" + classname + "::" + varname + "\nMember variable '$symbol' is not initialized in the constructor.", CWE398, inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####:  926:}
        -:  927:
function _ZN10CheckClass18operatorEqVarErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####:  928:void CheckClass::operatorEqVarError(const Token *tok, const std::string &classname, const std::string &varname, bool inconclusive)
        -:  929:{
    #####:  930:    reportError(tok, Severity::warning, "operatorEqVarError", "$symbol:" + classname + "::" + varname + "\nMember variable '$symbol' is not assigned a value in '" + classname + "::operator='.", CWE398, inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
    #####:  931:}
        -:  932:
        -:  933://---------------------------------------------------------------------------
        -:  934:// ClassCheck: Use initialization list instead of assignment
        -:  935://---------------------------------------------------------------------------
        -:  936:
function _ZN10CheckClass23initializationListUsageEv called 0 returned 0% blocks executed 0%
    #####:  937:void CheckClass::initializationListUsage()
        -:  938:{
    #####:  939:    if (!mSettings->isEnabled(Settings::PERFORMANCE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:        return;
        -:  941:
    #####:  942:    for (const Scope *scope : mSymbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  943:        // Check every constructor
    #####:  944:        if (!scope->function || (!scope->function->isConstructor()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  945:            continue;
        -:  946:
    #####:  947:        const Scope* owner = scope->functionOf;
    #####:  948:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  949:            if (Token::Match(tok, "%name% (")) // Assignments might depend on this function call or if/for/while/switch statement from now on.
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  950:                break;
    #####:  951:            if (Token::Match(tok, "try|do {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  952:                break;
    #####:  953:            if (!Token::Match(tok, "%var% =") || tok->strAt(-1) == "*" || tok->strAt(-1) == ".")
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  954:                continue;
        -:  955:
    #####:  956:            const Variable* var = tok->variable();
call    0 never executed
    #####:  957:            if (!var || var->scope() != owner || var->isStatic())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  958:                continue;
    #####:  959:            if (var->isPointer() || var->isReference() || var->isEnumType() || var->valueType()->type > ValueType::Type::ITERATOR)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  960:                continue;
        -:  961:
        -:  962:            // bailout: multi line lambda in rhs => do not warn
    #####:  963:            if (findLambdaEndToken(tok->tokAt(2)) && tok->tokAt(2)->findExpressionStartEndTokens().second->linenr() > tok->tokAt(2)->linenr())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
    #####:  964:                continue;
        -:  965:
        -:  966:            // Access local var member in rhs => do not warn
    #####:  967:            bool localmember = false;
    #####:  968:            visitAstNodes(tok->next()->astOperand2(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
function _ZZN10CheckClass23initializationListUsageEvENKUlPK5TokenE_clES2_ called 0 returned 0% blocks executed 0%
    #####:  969:            [&](const Token *rhs) {
    #####:  970:                if (rhs->str() == "." && rhs->astOperand1() && rhs->astOperand1()->variable() && rhs->astOperand1()->variable()->isLocal())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  971:                    localmember = true;
    #####:  972:                return ChildrenToVisit::op1_and_op2;
        -:  973:            });
    #####:  974:            if (localmember)
branch  0 never executed
branch  1 never executed
    #####:  975:                continue;
        -:  976:
    #####:  977:            bool allowed = true;
    #####:  978:            visitAstNodes(tok->next()->astOperand2(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
function _ZZN10CheckClass23initializationListUsageEvENKUlPK5TokenE0_clES2_ called 0 returned 0% blocks executed 0%
    #####:  979:            [&](const Token *tok2) {
    #####:  980:                const Variable* var2 = tok2->variable();
call    0 never executed
    #####:  981:                if (var2) {
branch  0 never executed
branch  1 never executed
    #####:  982:                    if (var2->scope() == owner && tok2->strAt(-1)!=".") { // Is there a dependency between two member variables?
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  983:                        allowed = false;
    #####:  984:                        return ChildrenToVisit::done;
    #####:  985:                    } else if (var2->isArray() && var2->isLocal()) { // Can't initialize with a local array
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  986:                        allowed = false;
    #####:  987:                        return ChildrenToVisit::done;
        -:  988:                    }
    #####:  989:                } else if (tok2->str() == "this") { // 'this' instance is not completely constructed in initialization list
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  990:                    allowed = false;
    #####:  991:                    return ChildrenToVisit::done;
    #####:  992:                } else if (Token::Match(tok2, "%name% (") && tok2->strAt(-1) != "." && isMemberFunc(owner, tok2)) { // Member function called?
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  993:                    allowed = false;
    #####:  994:                    return ChildrenToVisit::done;
        -:  995:                }
    #####:  996:                return ChildrenToVisit::op1_and_op2;
        -:  997:            });
    #####:  998:            if (!allowed)
branch  0 never executed
branch  1 never executed
    #####:  999:                continue;
        -: 1000:
    #####: 1001:            suggestInitializationList(tok, tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1002:        }
        -: 1003:    }
        -: 1004:}
        -: 1005:
function _ZN10CheckClass25suggestInitializationListEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1006:void CheckClass::suggestInitializationList(const Token* tok, const std::string& varname)
        -: 1007:{
    #####: 1008:    reportError(tok, Severity::performance, "useInitializationList", "$symbol:" + varname + "\nVariable '$symbol' is assigned in constructor body. Consider performing initialization in initialization list.\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1009:                "When an object of a class is created, the constructors of all member variables are called consecutively "
        -: 1010:                "in the order the variables are declared, even if you don't explicitly write them to the initialization list. You "
        -: 1011:                "could avoid assigning '$symbol' a value by passing the value to the constructor in the initialization list.", CWE398, false);
    #####: 1012:}
        -: 1013:
        -: 1014://---------------------------------------------------------------------------
        -: 1015:// ClassCheck: Unused private functions
        -: 1016://---------------------------------------------------------------------------
        -: 1017:
function _ZL18checkFunctionUsagePK8FunctionPK5Scope called 0 returned 0% blocks executed 0%
    #####: 1018:static bool checkFunctionUsage(const Function *privfunc, const Scope* scope)
        -: 1019:{
    #####: 1020:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 1021:        return true; // Assume it is used, if scope is not seen
        -: 1022:
    #####: 1023:    for (std::list<Function>::const_iterator func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1024:        if (func->functionScope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1025:            if (Token::Match(func->tokenDef, "%name% (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1026:                for (const Token *ftok = func->tokenDef->tokAt(2); ftok && ftok->str() != ")"; ftok = ftok->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####: 1027:                    if (Token::Match(ftok, "= %name% [(,)]") && ftok->strAt(1) == privfunc->name())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1028:                        return true;
    #####: 1029:                    if (ftok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1030:                        ftok = ftok->link();
call    0 never executed
        -: 1031:                }
        -: 1032:            }
    #####: 1033:            for (const Token *ftok = func->functionScope->classDef->linkAt(1); ftok != func->functionScope->bodyEnd; ftok = ftok->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1034:                if (ftok->function() == privfunc)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1035:                    return true;
    #####: 1036:                if (ftok->varId() == 0U && ftok->str() == privfunc->name()) // TODO: This condition should be redundant
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1037:                    return true;
        -: 1038:            }
    #####: 1039:        } else if ((func->type != Function::eCopyConstructor &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1040:                    func->type != Function::eOperatorEqual) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1041:                   func->access != AccessControl::Private) // Assume it is used, if a function implementation isn't seen, but empty private copy constructors and assignment operators are OK
call    0 never executed
    #####: 1042:            return true;
        -: 1043:    }
        -: 1044:
    #####: 1045:    const std::map<std::string, Type*>::const_iterator end = scope->definedTypesMap.end();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1046:    for (std::map<std::string, Type*>::const_iterator iter = scope->definedTypesMap.begin(); iter != end; ++ iter) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 1047:        const Type *type = (*iter).second;
call    0 never executed
    #####: 1048:        if (type->enclosingScope == scope && checkFunctionUsage(privfunc, type->classScope))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1049:            return true;
        -: 1050:    }
        -: 1051:
    #####: 1052:    for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1053:        if (var.isStatic()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:            const Token* tok = Token::findmatch(scope->bodyEnd, "%varid% =|(|{", var.declarationId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1055:            if (tok)
branch  0 never executed
branch  1 never executed
    #####: 1056:                tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1057:            while (tok && tok->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1058:                if (tok->function() == privfunc)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1059:                    return true;
    #####: 1060:                tok = tok->next();
call    0 never executed
        -: 1061:            }
        -: 1062:        }
        -: 1063:    }
        -: 1064:
    #####: 1065:    return false; // Unused in this scope
        -: 1066:}
        -: 1067:
function _ZN10CheckClass16privateFunctionsEv called 0 returned 0% blocks executed 0%
    #####: 1068:void CheckClass::privateFunctions()
        -: 1069:{
    #####: 1070:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1071:        return;
        -: 1072:
    #####: 1073:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1074:
        -: 1075:        // do not check borland classes with properties..
    #####: 1076:        if (Token::findsimplematch(scope->bodyStart, "; __property ;", scope->bodyEnd))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1077:            continue;
        -: 1078:
    #####: 1079:        std::list<const Function*> privateFuncs;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1080:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1081:            // Get private functions..
    #####: 1082:            if (func.type == Function::eFunction && func.access == AccessControl::Private && !func.isOperator()) // TODO: There are smarter ways to check private operator usage
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1083:                privateFuncs.push_back(&func);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1084:        }
        -: 1085:
        -: 1086:        // Bailout for overridden virtual functions of base classes
    #####: 1087:        if (!scope->definedType->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:            // Check virtual functions
    #####: 1089:            for (std::list<const Function*>::iterator it = privateFuncs.begin(); it != privateFuncs.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1090:                if ((*it)->isImplicitlyVirtual(true)) // Give true as default value to be returned if we don't see all base classes
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1091:                    privateFuncs.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1092:                else
    #####: 1093:                    ++it;
call    0 never executed
        -: 1094:            }
        -: 1095:        }
        -: 1096:
    #####: 1097:        while (!privateFuncs.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1098:            // Check that all private functions are used
    #####: 1099:            bool used = checkFunctionUsage(privateFuncs.front(), scope); // Usage in this class
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1100:            // Check in friend classes
    #####: 1101:            const std::vector<Type::FriendInfo>& friendList = scope->definedType->friendList;
    #####: 1102:            for (int i = 0; i < friendList.size() && !used; i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1103:                if (friendList[i].type)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1104:                    used = checkFunctionUsage(privateFuncs.front(), friendList[i].type->classScope);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1105:                else
    #####: 1106:                    used = true; // Assume, it is used if we do not see friend class
        -: 1107:            }
        -: 1108:
    #####: 1109:            if (!used)
branch  0 never executed
branch  1 never executed
    #####: 1110:                unusedPrivateFunctionError(privateFuncs.front()->tokenDef, scope->className, privateFuncs.front()->name());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1111:
    #####: 1112:            privateFuncs.pop_front();
call    0 never executed
        -: 1113:        }
        -: 1114:    }
        -: 1115:}
        -: 1116:
function _ZN10CheckClass26unusedPrivateFunctionErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####: 1117:void CheckClass::unusedPrivateFunctionError(const Token *tok, const std::string &classname, const std::string &funcname)
        -: 1118:{
    #####: 1119:    reportError(tok, Severity::style, "unusedPrivateFunction", "$symbol:" + classname + "::" + funcname + "\nUnused private function: '$symbol'", CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####: 1120:}
        -: 1121:
        -: 1122://---------------------------------------------------------------------------
        -: 1123:// ClassCheck: Check that memset is not used on classes
        -: 1124://---------------------------------------------------------------------------
        -: 1125:
function _ZL14findFunctionOfPK5Scope called 0 returned 0% blocks executed 0%
    #####: 1126:static const Scope* findFunctionOf(const Scope* scope)
        -: 1127:{
    #####: 1128:    while (scope) {
branch  0 never executed
branch  1 never executed
    #####: 1129:        if (scope->type == Scope::eFunction)
branch  0 never executed
branch  1 never executed
    #####: 1130:            return scope->functionOf;
    #####: 1131:        scope = scope->nestedIn;
        -: 1132:    }
    #####: 1133:    return nullptr;
        -: 1134:}
        -: 1135:
function _ZN10CheckClass11checkMemsetEv called 0 returned 0% blocks executed 0%
    #####: 1136:void CheckClass::checkMemset()
        -: 1137:{
    #####: 1138:    const bool printWarnings = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 1139:    for (const Scope *scope : mSymbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1140:        for (const Token *tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1141:            if (Token::Match(tok, "memset|memcpy|memmove (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1142:                const Token* arg1 = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1143:                const Token* arg3 = arg1->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1144:                if (arg3)
branch  0 never executed
branch  1 never executed
    #####: 1145:                    arg3 = arg3->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1146:                if (!arg3)
branch  0 never executed
branch  1 never executed
        -: 1147:                    // weird, shouldn't happen: memset etc should have
        -: 1148:                    // 3 arguments.
    #####: 1149:                    continue;
        -: 1150:
    #####: 1151:                const Token *typeTok = nullptr;
    #####: 1152:                const Scope *type = nullptr;
    #####: 1153:                if (Token::Match(arg3, "sizeof ( %type% ) )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1154:                    typeTok = arg3->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1155:                else if (Token::Match(arg3, "sizeof ( %type% :: %type% ) )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1156:                    typeTok = arg3->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1157:                else if (Token::Match(arg3, "sizeof ( struct %type% ) )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1158:                    typeTok = arg3->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1159:                else if (Token::simpleMatch(arg3, "sizeof ( * this ) )") || Token::simpleMatch(arg1, "this ,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1160:                    type = findFunctionOf(arg3->scope());
call    0 never executed
call    1 never executed
    #####: 1161:                } else if (Token::Match(arg1, "&|*|%var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1162:                    int numIndirToVariableType = 0; // Offset to the actual type in terms of dereference/addressof
    #####: 1163:                    for (;; arg1 = arg1->next()) {
call    0 never executed
    #####: 1164:                        if (arg1->str() == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1165:                            ++numIndirToVariableType;
    #####: 1166:                        else if (arg1->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1167:                            --numIndirToVariableType;
        -: 1168:                        else
    #####: 1169:                            break;
        -: 1170:                    }
        -: 1171:
    #####: 1172:                    const Variable * const var = arg1->variable();
call    0 never executed
    #####: 1173:                    if (var && arg1->strAt(1) == ",") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1174:                        if (var->isArrayOrPointer()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1175:                            const Token *endTok = var->typeEndToken();
call    0 never executed
    #####: 1176:                            while (Token::simpleMatch(endTok, "*")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1177:                                ++numIndirToVariableType;
    #####: 1178:                                endTok = endTok->previous();
call    0 never executed
        -: 1179:                            }
        -: 1180:                        }
        -: 1181:
    #####: 1182:                        if (var->isArray())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1183:                            numIndirToVariableType += int(var->dimensions().size());
call    0 never executed
call    1 never executed
        -: 1184:
    #####: 1185:                        if (numIndirToVariableType == 1)
branch  0 never executed
branch  1 never executed
    #####: 1186:                            type = var->typeScope();
call    0 never executed
        -: 1187:                    }
        -: 1188:                }
        -: 1189:
        -: 1190:                // No type defined => The tokens didn't match
    #####: 1191:                if (!typeTok && !type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1192:                    continue;
        -: 1193:
    #####: 1194:                if (typeTok && typeTok->str() == "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1195:                    typeTok = typeTok->next();
call    0 never executed
        -: 1196:
    #####: 1197:                if (!type && typeTok->type())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1198:                    type = typeTok->type()->classScope;
call    0 never executed
        -: 1199:
    #####: 1200:                if (type) {
branch  0 never executed
branch  1 never executed
    #####: 1201:                    const std::set<const Scope *> parsedTypes;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1202:                    checkMemsetType(scope, tok, type, false, parsedTypes);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1203:                }
    #####: 1204:            } else if (tok->variable() && tok->variable()->typeScope() && Token::Match(tok, "%var% = calloc|malloc|realloc|g_malloc|g_try_malloc|g_realloc|g_try_realloc (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1205:                const std::set<const Scope *> parsedTypes;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1206:                checkMemsetType(scope, tok->tokAt(2), tok->variable()->typeScope(), true, parsedTypes);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
        -: 1207:
    #####: 1208:                if (printWarnings && tok->variable()->typeScope()->numConstructors > 0)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1209:                    mallocOnClassWarning(tok, tok->strAt(2), tok->variable()->typeScope()->classDef);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1210:            }
        -: 1211:        }
        -: 1212:    }
    #####: 1213:}
        -: 1214:
function _ZN10CheckClass15checkMemsetTypeEPK5ScopePK5TokenS2_bNSt7__debug3setIS2_St4lessIS2_ESaIS2_EEE called 0 returned 0% blocks executed 0%
    #####: 1215:void CheckClass::checkMemsetType(const Scope *start, const Token *tok, const Scope *type, bool allocation, std::set<const Scope *> parsedTypes)
        -: 1216:{
        -: 1217:    // If type has been checked there is no need to check it again
    #####: 1218:    if (parsedTypes.find(type) != parsedTypes.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1219:        return;
    #####: 1220:    parsedTypes.insert(type);
call    0 never executed
call    1 never executed
        -: 1221:
    #####: 1222:    const bool printPortability = mSettings->isEnabled(Settings::PORTABILITY);
call    0 never executed
        -: 1223:
        -: 1224:    // recursively check all parent classes
    #####: 1225:    for (const Type::BaseInfo & i : type->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1226:        const Type* derivedFrom = i.type;
    #####: 1227:        if (derivedFrom && derivedFrom->classScope)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1228:            checkMemsetType(start, tok, derivedFrom->classScope, allocation, parsedTypes);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1229:    }
        -: 1230:
        -: 1231:    // Warn if type is a class that contains any virtual functions
    #####: 1232:    for (const Function &func : type->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1233:        if (func.hasVirtualSpecifier()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1234:            if (allocation)
branch  0 never executed
branch  1 never executed
    #####: 1235:                mallocOnClassError(tok, tok->str(), type->classDef, "virtual function");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1236:            else
    #####: 1237:                memsetError(tok, tok->str(), "virtual function", type->classDef->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 1238:        }
        -: 1239:    }
        -: 1240:
        -: 1241:    // Warn if type is a class or struct that contains any std::* variables
    #####: 1242:    for (const Variable &var : type->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1243:        if (var.isReference() && !var.isStatic()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1244:            memsetErrorReference(tok, tok->str(), type->classDef->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1245:            continue;
        -: 1246:        }
        -: 1247:        // don't warn if variable static or const, pointer or array of pointers
    #####: 1248:        if (!var.isStatic() && !var.isConst() && !var.isPointer() && (!var.isArray() || var.typeEndToken()->str() != "*")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1249:            const Token *tok1 = var.typeStartToken();
call    0 never executed
    #####: 1250:            const Scope *typeScope = var.typeScope();
call    0 never executed
        -: 1251:
    #####: 1252:            std::string typeName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1253:            if (Token::Match(tok1, "%type% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1254:                const Token *typeTok = tok1;
    #####: 1255:                while (Token::Match(typeTok, "%type% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1256:                    typeName += typeTok->str() + "::";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1257:                    typeTok = typeTok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1258:                }
    #####: 1259:                typeName += typeTok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1260:            }
        -: 1261:
        -: 1262:            // check for std:: type
    #####: 1263:            if (var.isStlType() && typeName != "std::array" && !mSettings->library.podtype(typeName)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1264:                if (allocation)
branch  0 never executed
branch  1 never executed
    #####: 1265:                    mallocOnClassError(tok, tok->str(), type->classDef, "'" + typeName + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 1266:                else
    #####: 1267:                    memsetError(tok, tok->str(), "'" + typeName + "'", type->classDef->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 1268:            }
        -: 1269:
        -: 1270:            // check for known type
    #####: 1271:            else if (typeScope && typeScope != type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1272:                checkMemsetType(start, tok, typeScope, allocation, parsedTypes);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1273:
        -: 1274:            // check for float
    #####: 1275:            else if (printPortability && var.isFloatingType() && tok->str() == "memset")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1276:                memsetErrorFloat(tok, type->classDef->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1277:        }
        -: 1278:    }
        -: 1279:}
        -: 1280:
function _ZN10CheckClass20mallocOnClassWarningEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES2_ called 0 returned 0% blocks executed 0%
    #####: 1281:void CheckClass::mallocOnClassWarning(const Token* tok, const std::string &memfunc, const Token* classTok)
        -: 1282:{
    #####: 1283:    std::list<const Token *> toks = { tok, classTok };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1284:    reportError(toks, Severity::warning, "mallocOnClassWarning",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1285:                "$symbol:" + memfunc +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1286:                "Memory for class instance allocated with $symbol(), but class provides constructors.\n"
        -: 1287:                "Memory for class instance allocated with $symbol(), but class provides constructors. This is unsafe, "
        -: 1288:                "since no constructor is called and class members remain uninitialized. Consider using 'new' instead.", CWE762, false);
    #####: 1289:}
call    0 never executed
        -: 1290:
function _ZN10CheckClass18mallocOnClassErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES2_SA_ called 0 returned 0% blocks executed 0%
    #####: 1291:void CheckClass::mallocOnClassError(const Token* tok, const std::string &memfunc, const Token* classTok, const std::string &classname)
        -: 1292:{
    #####: 1293:    std::list<const Token *> toks = { tok, classTok };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1294:    reportError(toks, Severity::error, "mallocOnClassError",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1295:                "$symbol:" + memfunc +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1296:                "$symbol:" + classname +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1297:                "Memory for class instance allocated with " + memfunc + "(), but class contains a " + classname + ".\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 1298:                "Memory for class instance allocated with " + memfunc + "(), but class a " + classname + ". This is unsafe, "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 1299:                "since no constructor is called and class members remain uninitialized. Consider using 'new' instead.", CWE665, false);
    #####: 1300:}
call    0 never executed
        -: 1301:
function _ZN10CheckClass11memsetErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 1302:void CheckClass::memsetError(const Token *tok, const std::string &memfunc, const std::string &classname, const std::string &type)
        -: 1303:{
    #####: 1304:    reportError(tok, Severity::error, "memsetClass",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1305:                "$symbol:" + memfunc +"\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1306:                "$symbol:" + classname +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1307:                "Using '" + memfunc + "' on " + type + " that contains a " + classname + ".\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 1308:                "Using '" + memfunc + "' on " + type + " that contains a " + classname + " is unsafe, because constructor, destructor "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 1309:                "and copy operator calls are omitted. These are necessary for this non-POD type to ensure that a valid object "
        -: 1310:                "is created.", CWE762, false);
    #####: 1311:}
        -: 1312:
function _ZN10CheckClass20memsetErrorReferenceEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####: 1313:void CheckClass::memsetErrorReference(const Token *tok, const std::string &memfunc, const std::string &type)
        -: 1314:{
    #####: 1315:    reportError(tok, Severity::error, "memsetClassReference",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1316:                "$symbol:" + memfunc +"\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1317:                "Using '" + memfunc + "' on " + type + " that contains a reference.", CWE665, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 1318:}
        -: 1319:
function _ZN10CheckClass16memsetErrorFloatEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1320:void CheckClass::memsetErrorFloat(const Token *tok, const std::string &type)
        -: 1321:{
    #####: 1322:    reportError(tok, Severity::portability, "memsetClassFloat", "Using memset() on " + type + " which contains a floating point number.\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1323:                "Using memset() on " + type + " which contains a floating point number."
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1324:                " This is not portable because memset() sets each byte of a block of memory to a specific value and"
        -: 1325:                " the actual representation of a floating-point value is implementation defined."
        -: 1326:                " Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0.", CWE758, false);
    #####: 1327:}
        -: 1328:
        -: 1329:
        -: 1330://---------------------------------------------------------------------------
        -: 1331:// ClassCheck: "void operator=(" and "const type & operator=("
        -: 1332://---------------------------------------------------------------------------
        -: 1333:
function _ZN10CheckClass10operatorEqEv called 0 returned 0% blocks executed 0%
    #####: 1334:void CheckClass::operatorEq()
        -: 1335:{
    #####: 1336:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1337:        return;
        -: 1338:
    #####: 1339:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1340:        for (std::list<Function>::const_iterator func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1341:            if (func->type == Function::eOperatorEqual && func->access == AccessControl::Public) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1342:                // skip "deleted" functions - cannot be called anyway
    #####: 1343:                if (func->isDelete())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1344:                    continue;
        -: 1345:                // use definition for check so we don't have to deal with qualification
    #####: 1346:                bool returnSelfRef = false;
    #####: 1347:                if (func->retDef->str() == scope->className) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1348:                    if (Token::Match(func->retDef, "%type% &")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1349:                        returnSelfRef = true;
        -: 1350:                    } else {
        -: 1351:                        // We might have "Self<template_parameters>&""
    #####: 1352:                        const Token * const tok = func->retDef->next();
call    0 never executed
call    1 never executed
    #####: 1353:                        if (tok && tok->str() == "<" && tok->link() && tok->link()->next() && tok->link()->next()->str() == "&")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####: 1354:                            returnSelfRef = true;
        -: 1355:                    }
        -: 1356:                }
    #####: 1357:                if (!returnSelfRef) {
branch  0 never executed
branch  1 never executed
        -: 1358:                    // make sure we really have a copy assignment operator
    #####: 1359:                    const Token *paramTok = func->tokenDef->tokAt(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1360:                    if (Token::Match(paramTok, "const| %name% &")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1361:                        if (paramTok->str() == "const" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1362:                            paramTok->strAt(1) == scope->className)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1363:                            operatorEqReturnError(func->retDef, scope->className);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1364:                        else if (paramTok->str() == scope->className)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1365:                            operatorEqReturnError(func->retDef, scope->className);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1366:                    }
        -: 1367:                }
        -: 1368:            }
        -: 1369:        }
        -: 1370:    }
        -: 1371:}
        -: 1372:
function _ZN10CheckClass21operatorEqReturnErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1373:void CheckClass::operatorEqReturnError(const Token *tok, const std::string &className)
        -: 1374:{
    #####: 1375:    reportError(tok, Severity::style, "operatorEq",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1376:                "$symbol:" + className +"\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -: 1377:                "'$symbol::operator=' should return '$symbol &'.\n"
        -: 1378:                "The $symbol::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: '$symbol &$symbol::operator=(..) { .. return *this; }'. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book \"Effective C++\" by Scott Meyers."
        -: 1379:                , CWE398, false);
    #####: 1380:}
        -: 1381:
        -: 1382://---------------------------------------------------------------------------
        -: 1383:// ClassCheck: "C& operator=(const C&) { ... return *this; }"
        -: 1384:// operator= should return a reference to *this
        -: 1385://---------------------------------------------------------------------------
        -: 1386:
function _ZN10CheckClass20operatorEqRetRefThisEv called 0 returned 0% blocks executed 0%
    #####: 1387:void CheckClass::operatorEqRetRefThis()
        -: 1388:{
    #####: 1389:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1390:        return;
        -: 1391:
    #####: 1392:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1393:        for (std::list<Function>::const_iterator func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1394:            if (func->type == Function::eOperatorEqual && func->hasBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1395:                // make sure return signature is correct
    #####: 1396:                if (func->retType == func->nestedIn->definedType && func->tokenDef->strAt(-1) == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1397:                    checkReturnPtrThis(scope, &(*func), func->functionScope->bodyStart, func->functionScope->bodyEnd);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1398:                }
        -: 1399:            }
        -: 1400:        }
        -: 1401:    }
        -: 1402:}
        -: 1403:
function _ZN10CheckClass18checkReturnPtrThisEPK5ScopePK8FunctionPK5TokenS8_ called 0 returned 0% blocks executed 0%
    #####: 1404:void CheckClass::checkReturnPtrThis(const Scope *scope, const Function *func, const Token *tok, const Token *last)
        -: 1405:{
    #####: 1406:    std::set<const Function*> analyzedFunctions;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1407:    checkReturnPtrThis(scope, func, tok, last, analyzedFunctions);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1408:}
        -: 1409:
function _ZN10CheckClass18checkReturnPtrThisEPK5ScopePK8FunctionPK5TokenS8_RNSt7__debug3setIS5_St4lessIS5_ESaIS5_EEE called 0 returned 0% blocks executed 0%
    #####: 1410:void CheckClass::checkReturnPtrThis(const Scope *scope, const Function *func, const Token *tok, const Token *last, std::set<const Function*>& analyzedFunctions)
        -: 1411:{
    #####: 1412:    bool foundReturn = false;
        -: 1413:
    #####: 1414:    const Token* const startTok = tok;
        -: 1415:
    #####: 1416:    for (; tok && tok != last; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1417:        // check for return of reference to this
    #####: 1418:        if (tok->str() != "return")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1419:            continue;
        -: 1420:
    #####: 1421:        foundReturn = true;
        -: 1422:
    #####: 1423:        const Token *retExpr = tok->astOperand1();
call    0 never executed
    #####: 1424:        if (retExpr && retExpr->str() == "=")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1425:            retExpr = retExpr->astOperand1();
call    0 never executed
    #####: 1426:        if (retExpr && retExpr->isUnaryOp("*") && Token::simpleMatch(retExpr->astOperand1(), "this"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
    #####: 1427:            continue;
        -: 1428:
    #####: 1429:        std::string cast("( " + scope->className + " & )");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1430:        if (Token::simpleMatch(tok->next(), cast.c_str()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1431:            tok = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1432:
        -: 1433:        // check if a function is called
    #####: 1434:        if (tok->strAt(2) == "(" &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1435:            tok->linkAt(2)->next()->str() == ";") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1436:            // check if it is a member function
    #####: 1437:            for (std::list<Function>::const_iterator it = scope->functionList.begin(); it != scope->functionList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 1438:                // check for a regular function with the same name and a body
    #####: 1439:                if (it->type == Function::eFunction && it->hasBody() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1440:                    it->token->str() == tok->next()->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 1441:                    // check for the proper return type
    #####: 1442:                    if (it->tokenDef->previous()->str() == "&" &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1443:                        it->tokenDef->strAt(-2) == scope->className) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1444:                        // make sure it's not a const function
    #####: 1445:                        if (!it->isConst()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1446:                            /** @todo make sure argument types match */
        -: 1447:                            // avoid endless recursions
    #####: 1448:                            if (analyzedFunctions.find(&*it) == analyzedFunctions.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1449:                                analyzedFunctions.insert(&*it);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1450:                                checkReturnPtrThis(scope, &*it, it->arg->link()->next(), it->arg->link()->next()->link(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1451:                                                   analyzedFunctions);
        -: 1452:                            }
        -: 1453:                            // just bail for now
        -: 1454:                            else
    #####: 1455:                                return;
        -: 1456:                        }
        -: 1457:                    }
        -: 1458:                }
        -: 1459:            }
        -: 1460:        }
        -: 1461:
        -: 1462:        // check if *this is returned
    #####: 1463:        else if (!(Token::simpleMatch(tok->next(), "operator= (") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1464:                   Token::simpleMatch(tok->next(), "this . operator= (") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1465:                   (Token::Match(tok->next(), "%type% :: operator= (") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1466:                    tok->next()->str() == scope->className)))
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1467:            operatorEqRetRefThisError(func->token);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1468:    }
    #####: 1469:    if (foundReturn) {
branch  0 never executed
branch  1 never executed
    #####: 1470:        return;
        -: 1471:    }
    #####: 1472:    if (startTok->next() == last) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1473:        if (Token::simpleMatch(func->argDef, std::string("( const " + scope->className + " &").c_str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
        -: 1474:            // Typical wrong way to suppress default assignment operator by declaring it and leaving empty
    #####: 1475:            operatorEqMissingReturnStatementError(func->token, func->access == AccessControl::Public);
call    0 never executed
        -: 1476:        } else {
    #####: 1477:            operatorEqMissingReturnStatementError(func->token, true);
call    0 never executed
        -: 1478:        }
    #####: 1479:        return;
        -: 1480:    }
    #####: 1481:    if (mSettings->library.isScopeNoReturn(last, nullptr)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1482:        // Typical wrong way to prohibit default assignment operator
        -: 1483:        // by always throwing an exception or calling a noreturn function
    #####: 1484:        operatorEqShouldBeLeftUnimplementedError(func->token);
call    0 never executed
    #####: 1485:        return;
        -: 1486:    }
        -: 1487:
    #####: 1488:    operatorEqMissingReturnStatementError(func->token, func->access == AccessControl::Public);
call    0 never executed
        -: 1489:}
        -: 1490:
function _ZN10CheckClass25operatorEqRetRefThisErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1491:void CheckClass::operatorEqRetRefThisError(const Token *tok)
        -: 1492:{
    #####: 1493:    reportError(tok, Severity::style, "operatorEqRetRefThis", "'operator=' should return reference to 'this' instance.", CWE398, false);
call    0 never executed
    #####: 1494:}
        -: 1495:
function _ZN10CheckClass40operatorEqShouldBeLeftUnimplementedErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1496:void CheckClass::operatorEqShouldBeLeftUnimplementedError(const Token *tok)
        -: 1497:{
    #####: 1498:    reportError(tok, Severity::style, "operatorEqShouldBeLeftUnimplemented", "'operator=' should either return reference to 'this' instance or be declared private and left unimplemented.", CWE398, false);
call    0 never executed
    #####: 1499:}
        -: 1500:
function _ZN10CheckClass37operatorEqMissingReturnStatementErrorEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####: 1501:void CheckClass::operatorEqMissingReturnStatementError(const Token *tok, bool error)
        -: 1502:{
    #####: 1503:    if (error) {
branch  0 never executed
branch  1 never executed
    #####: 1504:        reportError(tok, Severity::error, "operatorEqMissingReturnStatement", "No 'return' statement in non-void function causes undefined behavior.", CWE398, false);
call    0 never executed
        -: 1505:    } else {
    #####: 1506:        operatorEqRetRefThisError(tok);
call    0 never executed
        -: 1507:    }
    #####: 1508:}
        -: 1509:
        -: 1510://---------------------------------------------------------------------------
        -: 1511:// ClassCheck: "C& operator=(const C& rhs) { if (this == &rhs) ... }"
        -: 1512:// operator= should check for assignment to self
        -: 1513://
        -: 1514:// For simple classes, an assignment to self check is only a potential optimization.
        -: 1515://
        -: 1516:// For classes that allocate dynamic memory, assignment to self can be a real error
        -: 1517:// if it is deallocated and allocated again without being checked for.
        -: 1518://
        -: 1519:// This check is not valid for classes with multiple inheritance because a
        -: 1520:// class can have multiple addresses so there is no trivial way to check for
        -: 1521:// assignment to self.
        -: 1522://---------------------------------------------------------------------------
        -: 1523:
function _ZN10CheckClass16operatorEqToSelfEv called 0 returned 0% blocks executed 0%
    #####: 1524:void CheckClass::operatorEqToSelf()
        -: 1525:{
    #####: 1526:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1527:        return;
        -: 1528:
    #####: 1529:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1530:        // skip classes with multiple inheritance
    #####: 1531:        if (scope->definedType->derivedFrom.size() > 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1532:            continue;
        -: 1533:
    #####: 1534:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1535:            if (func.type == Function::eOperatorEqual && func.hasBody()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 1536:                // make sure that the operator takes an object of the same type as *this, otherwise we can't detect self-assignment checks
    #####: 1537:                if (func.argumentList.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1538:                    continue;
    #####: 1539:                const Token* typeTok = func.argumentList.front().typeEndToken();
call    0 never executed
call    1 never executed
    #####: 1540:                while (typeTok->str() == "const" || typeTok->str() == "&" || typeTok->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1541:                    typeTok = typeTok->previous();
call    0 never executed
    #####: 1542:                if (typeTok->str() != scope->className)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1543:                    continue;
        -: 1544:
        -: 1545:                // make sure return signature is correct
    #####: 1546:                if (Token::Match(func.retDef, "%type% &") && func.retDef->str() == scope->className) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1547:                    // find the parameter name
    #####: 1548:                    const Token *rhs = func.argumentList.begin()->nameToken();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1549:
    #####: 1550:                    if (!hasAssignSelf(&func, rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1551:                        if (hasAllocation(&func, scope))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1552:                            operatorEqToSelfError(func.token);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1553:                    }
        -: 1554:                }
        -: 1555:            }
        -: 1556:        }
        -: 1557:    }
        -: 1558:}
        -: 1559:
function _ZNK10CheckClass13hasAllocationEPK8FunctionPK5Scope called 0 returned 0% blocks executed 0%
    #####: 1560:bool CheckClass::hasAllocation(const Function *func, const Scope* scope) const
        -: 1561:{
        -: 1562:    // This function is called when no simple check was found for assignment
        -: 1563:    // to self.  We are currently looking for:
        -: 1564:    //    - deallocate member ; ... member =
        -: 1565:    //    - alloc member
        -: 1566:    // That is not ideal because it can cause false negatives but its currently
        -: 1567:    // necessary to prevent false positives.
    #####: 1568:    const Token *last = func->functionScope->bodyEnd;
    #####: 1569:    for (const Token *tok = func->functionScope->bodyStart; tok && (tok != last); tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1570:        if (Token::Match(tok, "%var% = malloc|realloc|calloc|new") && isMemberVar(scope, tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1571:            return true;
        -: 1572:
        -: 1573:        // check for deallocating memory
        -: 1574:        const Token *var;
    #####: 1575:        if (Token::Match(tok, "free ( %var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1576:            var = tok->tokAt(2);
call    0 never executed
    #####: 1577:        else if (Token::Match(tok, "delete [ ] %var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1578:            var = tok->tokAt(3);
call    0 never executed
    #####: 1579:        else if (Token::Match(tok, "delete %var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1580:            var = tok->next();
call    0 never executed
        -: 1581:        else
    #####: 1582:            continue;
        -: 1583:        // Check for assignment to the deleted pointer (only if its a member of the class)
    #####: 1584:        if (isMemberVar(scope, var)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1585:            for (const Token *tok1 = var->next(); tok1 && (tok1 != last); tok1 = tok1->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 1586:                if (Token::Match(tok1, "%varid% =", var->varId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1587:                    return true;
        -: 1588:            }
        -: 1589:        }
        -: 1590:    }
        -: 1591:
    #####: 1592:    return false;
        -: 1593:}
        -: 1594:
function _ZN10CheckClass13hasAssignSelfEPK8FunctionPK5Token called 0 returned 0% blocks executed 0%
    #####: 1595:bool CheckClass::hasAssignSelf(const Function *func, const Token *rhs)
        -: 1596:{
    #####: 1597:    if (!rhs)
branch  0 never executed
branch  1 never executed
    #####: 1598:        return false;
    #####: 1599:    const Token *last = func->functionScope->bodyEnd;
    #####: 1600:    for (const Token *tok = func->functionScope->bodyStart; tok && tok != last; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1601:        if (!Token::simpleMatch(tok, "if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1602:            continue;
        -: 1603:
    #####: 1604:        bool ret = false;
    #####: 1605:        visitAstNodes(tok->next()->astOperand2(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
function _ZZN10CheckClass13hasAssignSelfEPK8FunctionPK5TokenENKUlS5_E_clES5_ called 0 returned 0% blocks executed 0%
    #####: 1606:        [&](const Token *tok2) {
    #####: 1607:            if (!Token::Match(tok2, "==|!="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1608:                return ChildrenToVisit::op1_and_op2;
    #####: 1609:            if (Token::simpleMatch(tok2->astOperand1(), "this"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1610:                tok2 = tok2->astOperand2();
call    0 never executed
    #####: 1611:            else if (Token::simpleMatch(tok2->astOperand2(), "this"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1612:                tok2 = tok2->astOperand1();
call    0 never executed
        -: 1613:            else
    #####: 1614:                return ChildrenToVisit::op1_and_op2;
    #####: 1615:            if (tok2 && tok2->isUnaryOp("&") && tok2->astOperand1()->str() == rhs->str())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
    #####: 1616:                ret = true;
    #####: 1617:            return ret ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 never executed
branch  1 never executed
        -: 1618:        });
    #####: 1619:        if (ret)
branch  0 never executed
branch  1 never executed
    #####: 1620:            return ret;
        -: 1621:    }
        -: 1622:
    #####: 1623:    return false;
        -: 1624:}
        -: 1625:
function _ZN10CheckClass21operatorEqToSelfErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1626:void CheckClass::operatorEqToSelfError(const Token *tok)
        -: 1627:{
    #####: 1628:    reportError(tok, Severity::warning, "operatorEqToSelf",
call    0 never executed
        -: 1629:                "'operator=' should check for assignment to self to avoid problems with dynamic memory.\n"
        -: 1630:                "'operator=' should check for assignment to self to ensure that each block of dynamically "
        -: 1631:                "allocated memory is owned and managed by only one instance of the class.", CWE398, false);
    #####: 1632:}
        -: 1633:
        -: 1634://---------------------------------------------------------------------------
        -: 1635:// A destructor in a base class should be virtual
        -: 1636://---------------------------------------------------------------------------
        -: 1637:
function _ZN10CheckClass17virtualDestructorEv called 0 returned 0% blocks executed 0%
    #####: 1638:void CheckClass::virtualDestructor()
        -: 1639:{
        -: 1640:    // This error should only be given if:
        -: 1641:    // * base class doesn't have virtual destructor
        -: 1642:    // * derived class has non-empty destructor
        -: 1643:    // * base class is deleted
        -: 1644:    // unless inconclusive in which case:
        -: 1645:    // * base class has virtual members but doesn't have virtual destructor
    #####: 1646:    const bool printInconclusive = mSettings->inconclusive;
        -: 1647:
    #####: 1648:    std::list<const Function *> inconclusiveErrors;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1649:
    #####: 1650:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1651:
        -: 1652:        // Skip base classes (unless inconclusive)
    #####: 1653:        if (scope->definedType->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1654:            if (printInconclusive) {
branch  0 never executed
branch  1 never executed
    #####: 1655:                const Function *destructor = scope->getDestructor();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1656:                if (destructor && !destructor->hasVirtualSpecifier()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1657:                    for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1658:                        if (func.hasVirtualSpecifier()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1659:                            inconclusiveErrors.push_back(destructor);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1660:                            break;
        -: 1661:                        }
        -: 1662:                    }
        -: 1663:                }
        -: 1664:            }
    #####: 1665:            continue;
        -: 1666:        }
        -: 1667:
        -: 1668:        // Find the destructor
    #####: 1669:        const Function *destructor = scope->getDestructor();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1670:
        -: 1671:        // Check for destructor with implementation
    #####: 1672:        if (!destructor || !destructor->hasBody())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1673:            continue;
        -: 1674:
        -: 1675:        // Empty destructor
    #####: 1676:        if (destructor->token->linkAt(3) == destructor->token->tokAt(4))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1677:            continue;
        -: 1678:
    #####: 1679:        const Token *derived = scope->classDef;
    #####: 1680:        const Token *derivedClass = derived->next();
call    0 never executed
        -: 1681:
        -: 1682:        // Iterate through each base class...
    #####: 1683:        for (const Type::BaseInfo & j : scope->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1684:            // Check if base class is public and exists in database
    #####: 1685:            if (j.access != AccessControl::Private && j.type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1686:                const Type *derivedFrom = j.type;
    #####: 1687:                const Scope *derivedFromScope = derivedFrom->classScope;
    #####: 1688:                if (!derivedFromScope)
branch  0 never executed
branch  1 never executed
    #####: 1689:                    continue;
        -: 1690:
        -: 1691:                // Check for this pattern:
        -: 1692:                // 1. Base class pointer is given the address of derived class instance
        -: 1693:                // 2. Base class pointer is deleted
        -: 1694:                //
        -: 1695:                // If this pattern is not seen then bailout the checking of these base/derived classes
        -: 1696:                {
        -: 1697:                    // pointer variables of type 'Base *'
    #####: 1698:                    std::set<int> baseClassPointers;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1699:
    #####: 1700:                    for (const Variable* var : mSymbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1701:                        if (var && var->isPointer() && var->type() == derivedFrom)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1702:                            baseClassPointers.insert(var->declarationId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1703:                    }
        -: 1704:
        -: 1705:                    // pointer variables of type 'Base *' that should not be deleted
    #####: 1706:                    std::set<int> dontDelete;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1707:
        -: 1708:                    // No deletion of derived class instance through base class pointer found => the code is ok
    #####: 1709:                    bool ok = true;
        -: 1710:
    #####: 1711:                    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1712:                        if (Token::Match(tok, "[;{}] %var% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1713:                            baseClassPointers.find(tok->next()->varId()) != baseClassPointers.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
        -: 1714:                            // new derived class..
    #####: 1715:                            if (Token::simpleMatch(tok->tokAt(3), ("new " + derivedClass->str()).c_str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
    #####: 1716:                                dontDelete.insert(tok->next()->varId());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -: 1717:                            }
        -: 1718:                        }
        -: 1719:
        -: 1720:                        // Delete base class pointer that might point at derived class
    #####: 1721:                        else if (Token::Match(tok, "delete %var% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1722:                                 dontDelete.find(tok->next()->varId()) != dontDelete.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    #####: 1723:                            ok = false;
    #####: 1724:                            break;
        -: 1725:                        }
        -: 1726:                    }
        -: 1727:
        -: 1728:                    // No base class pointer that points at a derived class is deleted
    #####: 1729:                    if (ok)
branch  0 never executed
branch  1 never executed
    #####: 1730:                        continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1731:                }
        -: 1732:
        -: 1733:                // Find the destructor declaration for the base class.
    #####: 1734:                const Function *baseDestructor = derivedFromScope->getDestructor();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1735:
        -: 1736:                // Check that there is a destructor..
    #####: 1737:                if (!baseDestructor) {
branch  0 never executed
branch  1 never executed
    #####: 1738:                    if (derivedFrom->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1739:                        virtualDestructorError(derivedFrom->classDef, derivedFrom->name(), derivedClass->str(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1740:                    }
    #####: 1741:                } else if (!baseDestructor->hasVirtualSpecifier()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1742:                    // TODO: This is just a temporary fix, better solution is needed.
        -: 1743:                    // Skip situations where base class has base classes of its own, because
        -: 1744:                    // some of the base classes might have virtual destructor.
        -: 1745:                    // Proper solution is to check all of the base classes. If base class is not
        -: 1746:                    // found or if one of the base classes has virtual destructor, error should not
        -: 1747:                    // be printed. See TODO test case "virtualDestructorInherited"
    #####: 1748:                    if (derivedFrom->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1749:                        // Make sure that the destructor is public (protected or private
        -: 1750:                        // would not compile if inheritance is used in a way that would
        -: 1751:                        // cause the bug we are trying to find here.)
    #####: 1752:                        if (baseDestructor->access == AccessControl::Public) {
branch  0 never executed
branch  1 never executed
    #####: 1753:                            virtualDestructorError(baseDestructor->token, derivedFrom->name(), derivedClass->str(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1754:                            // check for duplicate error and remove it if found
    #####: 1755:                            const std::list<const Function *>::iterator found = find(inconclusiveErrors.begin(), inconclusiveErrors.end(), baseDestructor);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1756:                            if (found != inconclusiveErrors.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1757:                                inconclusiveErrors.erase(found);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1758:                        }
        -: 1759:                    }
        -: 1760:                }
        -: 1761:            }
        -: 1762:        }
        -: 1763:    }
        -: 1764:
    #####: 1765:    for (const Function *func : inconclusiveErrors)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1766:        virtualDestructorError(func->tokenDef, func->name(), emptyString, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1767:}
        -: 1768:
function _ZN10CheckClass22virtualDestructorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1769:void CheckClass::virtualDestructorError(const Token *tok, const std::string &Base, const std::string &Derived, bool inconclusive)
        -: 1770:{
    #####: 1771:    if (inconclusive) {
branch  0 never executed
branch  1 never executed
    #####: 1772:        if (mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1773:            reportError(tok, Severity::warning, "virtualDestructor", "$symbol:" + Base + "\nClass '$symbol' which has virtual members does not have a virtual destructor.", CWE404, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1774:    } else {
    #####: 1775:        reportError(tok, Severity::error, "virtualDestructor",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1776:                    "$symbol:" + Base +"\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1777:                    "$symbol:" + Derived +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1778:                    "Class '" + Base + "' which is inherited by class '" + Derived + "' does not have a virtual destructor.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 1779:                    "Class '" + Base + "' which is inherited by class '" + Derived + "' does not have a virtual destructor. "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 1780:                    "If you destroy instances of the derived class by deleting a pointer that points to the base class, only "
        -: 1781:                    "the destructor of the base class is executed. Thus, dynamic memory that is managed by the derived class "
        -: 1782:                    "could leak. This can be avoided by adding a virtual destructor to the base class.", CWE404, false);
        -: 1783:    }
    #####: 1784:}
        -: 1785:
        -: 1786://---------------------------------------------------------------------------
        -: 1787:// warn for "this-x". The indented code may be "this->x"
        -: 1788://---------------------------------------------------------------------------
        -: 1789:
function _ZN10CheckClass15thisSubtractionEv called 0 returned 0% blocks executed 0%
    #####: 1790:void CheckClass::thisSubtraction()
        -: 1791:{
    #####: 1792:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1793:        return;
        -: 1794:
    #####: 1795:    const Token *tok = mTokenizer->tokens();
call    0 never executed
        -: 1796:    for (;;) {
    #####: 1797:        tok = Token::findmatch(tok, "this - %name%");
call    0 never executed
    #####: 1798:        if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1799:            break;
        -: 1800:
    #####: 1801:        if (tok->strAt(-1) != "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1802:            thisSubtractionError(tok);
call    0 never executed
        -: 1803:
    #####: 1804:        tok = tok->next();
call    0 never executed
        -: 1805:    }
        -: 1806:}
        -: 1807:
function _ZN10CheckClass20thisSubtractionErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1808:void CheckClass::thisSubtractionError(const Token *tok)
        -: 1809:{
    #####: 1810:    reportError(tok, Severity::warning, "thisSubtraction", "Suspicious pointer subtraction. Did you intend to write '->'?", CWE398, false);
call    0 never executed
    #####: 1811:}
        -: 1812:
        -: 1813://---------------------------------------------------------------------------
        -: 1814:// can member function be const?
        -: 1815://---------------------------------------------------------------------------
        -: 1816:
function _ZN10CheckClass10checkConstEv called 0 returned 0% blocks executed 0%
    #####: 1817:void CheckClass::checkConst()
        -: 1818:{
        -: 1819:    // This is an inconclusive check. False positives: #3322.
    #####: 1820:    if (!mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
    #####: 1821:        return;
        -: 1822:
    #####: 1823:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1824:        return;
        -: 1825:
    #####: 1826:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1827:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1828:            // does the function have a body?
    #####: 1829:            if (func.type != Function::eFunction || !func.hasBody())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1830:                continue;
        -: 1831:            // don't warn for friend/static/virtual functions
    #####: 1832:            if (func.isFriend() || func.isStatic() || func.hasVirtualSpecifier())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1833:                continue;
        -: 1834:            // get last token of return type
    #####: 1835:            const Token *previous = func.tokenDef->previous();
call    0 never executed
        -: 1836:
        -: 1837:            // does the function return a pointer or reference?
    #####: 1838:            if (Token::Match(previous, "*|&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1839:                if (func.retDef->str() != "const")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1840:                    continue;
    #####: 1841:            } else if (Token::Match(previous->previous(), "*|& >")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1842:                const Token *temp = previous->previous();
call    0 never executed
        -: 1843:
    #####: 1844:                bool foundConst = false;
    #####: 1845:                while (!Token::Match(temp->previous(), ";|}|{|public:|protected:|private:")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1846:                    temp = temp->previous();
call    0 never executed
    #####: 1847:                    if (temp->str() == "const") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1848:                        foundConst = true;
    #####: 1849:                        break;
        -: 1850:                    }
        -: 1851:                }
        -: 1852:
    #####: 1853:                if (!foundConst)
branch  0 never executed
branch  1 never executed
    #####: 1854:                    continue;
    #####: 1855:            } else if (func.isOperator() && Token::Match(previous, ";|{|}|public:|private:|protected:")) { // Operator without return type: conversion operator
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1856:                const std::string& opName = func.tokenDef->str();
call    0 never executed
    #####: 1857:                if (opName.compare(8, 5, "const") != 0 && (endsWith(opName,'&') || endsWith(opName,'*')))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1858:                    continue;
    #####: 1859:            } else if (mSettings->library.isSmartPointer(func.retDef)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1860:                // Don't warn if a std::shared_ptr etc is returned
    #####: 1861:                continue;
        -: 1862:            } else {
        -: 1863:                // don't warn for unknown types..
        -: 1864:                // LPVOID, HDC, etc
    #####: 1865:                if (previous->str().size() > 2 && !previous->type() && previous->isUpperCaseName())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1866:                    continue;
        -: 1867:            }
        -: 1868:
        -: 1869:            // check if base class function is virtual
    #####: 1870:            if (!scope->definedType->derivedFrom.empty() && func.isImplicitlyVirtual(true))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1871:                continue;
        -: 1872:
    #####: 1873:            bool memberAccessed = false;
        -: 1874:            // if nothing non-const was found. write error..
    #####: 1875:            if (!checkConstFunc(scope, &func, memberAccessed))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1876:                continue;
        -: 1877:
    #####: 1878:            if (func.isConst() && (memberAccessed || func.isOperator()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1879:                continue;
        -: 1880:
    #####: 1881:            std::string classname = scope->className;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1882:            const Scope *nest = scope->nestedIn;
    #####: 1883:            while (nest && nest->type != Scope::eGlobal) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1884:                classname = std::string(nest->className + "::" + classname);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1885:                nest = nest->nestedIn;
        -: 1886:            }
        -: 1887:
        -: 1888:            // get function name
    #####: 1889:            std::string functionName = (func.tokenDef->isName() ? "" : "operator") + func.tokenDef->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1890:
    #####: 1891:            if (func.tokenDef->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1892:                functionName += ")";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1893:            else if (func.tokenDef->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1894:                functionName += "]";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1895:
    #####: 1896:            if (func.isInline())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1897:                checkConstError(func.token, classname, functionName, !memberAccessed && !func.isOperator());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1898:            else // not inline
    #####: 1899:                checkConstError2(func.token, func.tokenDef, classname, functionName, !memberAccessed && !func.isOperator());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1900:        }
        -: 1901:    }
        -: 1902:}
        -: 1903:
function _ZNK10CheckClass11isMemberVarEPK5ScopePK5Token called 0 returned 0% blocks executed 0%
    #####: 1904:bool CheckClass::isMemberVar(const Scope *scope, const Token *tok) const
        -: 1905:{
    #####: 1906:    bool again = false;
        -: 1907:
        -: 1908:    // try to find the member variable
    #####: 1909:    do {
branch  0 never executed
branch  1 never executed
    #####: 1910:        again = false;
        -: 1911:
    #####: 1912:        if (tok->str() == "this") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1913:            return true;
    #####: 1914:        } else if (Token::simpleMatch(tok->tokAt(-3), "( * this )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1915:            return true;
    #####: 1916:        } else if (Token::Match(tok->tokAt(-2), "%name% . %name%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1917:            tok = tok->tokAt(-2);
call    0 never executed
    #####: 1918:            again = true;
    #####: 1919:        } else if (Token::Match(tok->tokAt(-2), "] . %name%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1920:            tok = tok->linkAt(-2)->previous();
call    0 never executed
call    1 never executed
    #####: 1921:            again = true;
    #####: 1922:        } else if (tok->str() == "]") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1923:            tok = tok->link()->previous();
call    0 never executed
call    1 never executed
    #####: 1924:            again = true;
        -: 1925:        }
        -: 1926:    } while (again);
        -: 1927:
    #####: 1928:    for (const Variable &var : scope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1929:        if (var.name() == tok->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1930:            if (tok->varId() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1931:                mSymbolDatabase->debugMessage(tok, "CheckClass::isMemberVar found used member variable \'" + tok->str() + "\' with varid 0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 1932:
    #####: 1933:            return !var.isStatic();
call    0 never executed
        -: 1934:        }
        -: 1935:    }
        -: 1936:
        -: 1937:    // not found in this class
    #####: 1938:    if (!scope->definedType->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1939:        // check each base class
    #####: 1940:        for (const Type::BaseInfo & i : scope->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 1941:            // find the base class
    #####: 1942:            const Type *derivedFrom = i.type;
        -: 1943:
        -: 1944:            // find the function in the base class
    #####: 1945:            if (derivedFrom && derivedFrom->classScope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1946:                if (isMemberVar(derivedFrom->classScope, tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1947:                    return true;
        -: 1948:            }
        -: 1949:        }
        -: 1950:    }
        -: 1951:
    #####: 1952:    return false;
        -: 1953:}
        -: 1954:
function _ZNK10CheckClass12isMemberFuncEPK5ScopePK5Token called 0 returned 0% blocks executed 0%
    #####: 1955:bool CheckClass::isMemberFunc(const Scope *scope, const Token *tok) const
        -: 1956:{
    #####: 1957:    if (!tok->function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1958:        for (const Function &func : scope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1959:            if (func.name() == tok->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1960:                const Token* tok2 = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1961:                int argsPassed = tok2->str() == ")" ? 0 : 1;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1962:                for (;;) {
    #####: 1963:                    tok2 = tok2->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1964:                    if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 1965:                        argsPassed++;
        -: 1966:                    else
    #####: 1967:                        break;
        -: 1968:                }
    #####: 1969:                if (argsPassed == func.argCount() || (argsPassed < func.argCount() && argsPassed >= func.minArgCount()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1970:                    return true;
        -: 1971:            }
        -: 1972:        }
    #####: 1973:    } else if (tok->function()->nestedIn == scope)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1974:        return !tok->function()->isStatic();
call    0 never executed
call    1 never executed
        -: 1975:
        -: 1976:    // not found in this class
    #####: 1977:    if (!scope->definedType->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1978:        // check each base class
    #####: 1979:        for (const Type::BaseInfo & i : scope->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 1980:            // find the base class
    #####: 1981:            const Type *derivedFrom = i.type;
        -: 1982:
        -: 1983:            // find the function in the base class
    #####: 1984:            if (derivedFrom && derivedFrom->classScope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1985:                if (isMemberFunc(derivedFrom->classScope, tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1986:                    return true;
        -: 1987:            }
        -: 1988:        }
        -: 1989:    }
        -: 1990:
    #####: 1991:    return false;
        -: 1992:}
        -: 1993:
function _ZNK10CheckClass17isConstMemberFuncEPK5ScopePK5Token called 0 returned 0% blocks executed 0%
    #####: 1994:bool CheckClass::isConstMemberFunc(const Scope *scope, const Token *tok) const
        -: 1995:{
    #####: 1996:    if (!tok->function())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1997:        return false;
    #####: 1998:    else if (tok->function()->nestedIn == scope)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1999:        return tok->function()->isConst();
call    0 never executed
call    1 never executed
        -: 2000:
        -: 2001:    // not found in this class
    #####: 2002:    if (!scope->definedType->derivedFrom.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2003:        // check each base class
    #####: 2004:        for (const Type::BaseInfo & i : scope->definedType->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 2005:            // find the base class
    #####: 2006:            const Type *derivedFrom = i.type;
        -: 2007:
        -: 2008:            // find the function in the base class
    #####: 2009:            if (derivedFrom && derivedFrom->classScope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2010:                if (isConstMemberFunc(derivedFrom->classScope, tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2011:                    return true;
        -: 2012:            }
        -: 2013:        }
        -: 2014:    }
        -: 2015:
    #####: 2016:    return false;
        -: 2017:}
        -: 2018:
        -: 2019:namespace {
        -: 2020:    // The container contains the STL types whose operator[] is not a const.
        1: 2021:    const std::set<std::string> stl_containers_not_const = { "map", "unordered_map" };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 67% (fallthrough)
branch 14 taken 33%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        -: 2022:}
        -: 2023:
function _ZNK10CheckClass14checkConstFuncEPK5ScopePK8FunctionRb called 0 returned 0% blocks executed 0%
    #####: 2024:bool CheckClass::checkConstFunc(const Scope *scope, const Function *func, bool& memberAccessed) const
        -: 2025:{
        -: 2026:    // if the function doesn't have any assignment nor function call,
        -: 2027:    // it can be a const function..
    #####: 2028:    for (const Token *tok1 = func->functionScope->bodyStart; tok1 && tok1 != func->functionScope->bodyEnd; tok1 = tok1->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 2029:        if (tok1->isName() && isMemberVar(scope, tok1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2030:            memberAccessed = true;
    #####: 2031:            const Variable* v = tok1->variable();
call    0 never executed
    #####: 2032:            if (v && v->isMutable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2033:                continue;
        -: 2034:
    #####: 2035:            if (tok1->str() == "this" && tok1->previous()->isAssignmentOp())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2036:                return false;
        -: 2037:
        -: 2038:
    #####: 2039:            const Token* lhs = tok1->previous();
call    0 never executed
    #####: 2040:            if (lhs->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2041:                lhs = lhs->previous();
call    0 never executed
    #####: 2042:                if (lhs->isAssignmentOp() && lhs->previous()->variable()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2043:                    if (lhs->previous()->variable()->typeStartToken()->strAt(-1) != "const" && lhs->previous()->variable()->isPointer())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2044:                        return false;
        -: 2045:                }
    #####: 2046:            } else if (lhs->str() == ":" && lhs->astParent() && lhs->astParent()->str() == "(" && tok1->strAt(1) == ")") { // range-based for-loop (C++11)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -: 2047:                // TODO: We could additionally check what is done with the elements to avoid false negatives. Here we just rely on "const" keyword being used.
    #####: 2048:                if (lhs->astParent()->strAt(1) != "const")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2049:                    return false;
        -: 2050:            } else {
    #####: 2051:                if (lhs->isAssignmentOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2052:                    const Variable* lhsVar = lhs->previous()->variable();
call    0 never executed
call    1 never executed
    #####: 2053:                    if (lhsVar && !lhsVar->isConst() && lhsVar->isReference() && lhs == lhsVar->nameToken()->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2054:                        return false;
        -: 2055:                }
        -: 2056:            }
        -: 2057:
    #####: 2058:            const Token* jumpBackToken = nullptr;
    #####: 2059:            const Token *lastVarTok = tok1;
    #####: 2060:            const Token *end = tok1;
        -: 2061:            for (;;) {
    #####: 2062:                if (Token::Match(end->next(), ". %name%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2063:                    end = end->tokAt(2);
call    0 never executed
    #####: 2064:                    if (end->varId())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2065:                        lastVarTok = end;
    #####: 2066:                } else if (end->strAt(1) == "[") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2067:                    if (end->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2068:                        const Variable *var = end->variable();
call    0 never executed
    #####: 2069:                        if (var && var->isStlType(stl_containers_not_const))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2070:                            return false;
        -: 2071:                    }
    #####: 2072:                    if (!jumpBackToken)
branch  0 never executed
branch  1 never executed
    #####: 2073:                        jumpBackToken = end->next(); // Check inside the [] brackets
call    0 never executed
    #####: 2074:                    end = end->linkAt(1);
call    0 never executed
    #####: 2075:                } else if (end->strAt(1) == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2076:                    end = end->next();
call    0 never executed
        -: 2077:                else
    #####: 2078:                    break;
    #####: 2079:            }
        -: 2080:
    #####: 2081:            if (end->strAt(1) == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2082:                const Variable *var = lastVarTok->variable();
call    0 never executed
    #####: 2083:                if (!var)
branch  0 never executed
branch  1 never executed
    #####: 2084:                    return false;
    #####: 2085:                if (var->isStlType() // assume all std::*::size() and std::*::empty() are const
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2086:                    && (Token::Match(end, "size|empty|cend|crend|cbegin|crbegin|max_size|length|count|capacity|get_allocator|c_str|str ( )") || Token::Match(end, "rfind|copy")))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 2087:                    ;
    #####: 2088:                else if (!var->typeScope() || !isConstMemberFunc(var->typeScope(), end))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2089:                    return false;
        -: 2090:            }
        -: 2091:
        -: 2092:            // Assignment
    #####: 2093:            else if (end->next()->isAssignmentOp())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2094:                return false;
        -: 2095:
        -: 2096:            // Streaming
    #####: 2097:            else if (end->strAt(1) == "<<" && tok1->strAt(-1) != "<<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2098:                return false;
    #####: 2099:            else if (isLikelyStreamRead(true, tok1->previous()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2100:                return false;
        -: 2101:
        -: 2102:            // ++/--
    #####: 2103:            else if (end->next()->tokType() == Token::eIncDecOp || tok1->previous()->tokType() == Token::eIncDecOp)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2104:                return false;
        -: 2105:
        -: 2106:
    #####: 2107:            const Token* start = tok1;
    #####: 2108:            while (tok1->strAt(-1) == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2109:                tok1 = tok1->linkAt(-1);
call    0 never executed
        -: 2110:
    #####: 2111:            if (start->strAt(-1) == "delete")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2112:                return false;
        -: 2113:
    #####: 2114:            tok1 = jumpBackToken?jumpBackToken:end; // Jump back to first [ to check inside, or jump to end of expression
branch  0 never executed
branch  1 never executed
        -: 2115:        }
        -: 2116:
        -: 2117:        // streaming: <<
    #####: 2118:        else if (Token::simpleMatch(tok1->previous(), ") <<") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2119:                 isMemberVar(scope, tok1->tokAt(-2))) {
call    0 never executed
call    1 never executed
    #####: 2120:            const Variable* var = tok1->tokAt(-2)->variable();
call    0 never executed
call    1 never executed
    #####: 2121:            if (!var || !var->isMutable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2122:                return false;
        -: 2123:        }
        -: 2124:
        -: 2125:        // streaming: >> *this
    #####: 2126:        else if (Token::simpleMatch(tok1, ">> * this") && isLikelyStreamRead(true, tok1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2127:            return false;
        -: 2128:        }
        -: 2129:
        -: 2130:        // function call..
    #####: 2131:        else if (Token::Match(tok1, "%name% (") && !tok1->isStandardType() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2132:                 !Token::Match(tok1, "return|if|string|switch|while|catch|for")) {
call    0 never executed
    #####: 2133:            if (isMemberFunc(scope, tok1) && tok1->strAt(-1) != ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2134:                if (!isConstMemberFunc(scope, tok1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2135:                    return false;
    #####: 2136:                memberAccessed = true;
        -: 2137:            }
        -: 2138:            // Member variable given as parameter
    #####: 2139:            const Token *lpar = tok1->next();
call    0 never executed
    #####: 2140:            if (Token::simpleMatch(lpar, "( ) ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2141:                lpar = lpar->tokAt(2);
call    0 never executed
    #####: 2142:            for (const Token* tok2 = lpar->next(); tok2 && tok2 != tok1->next()->link(); tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 2143:                if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2144:                    tok2 = tok2->link();
call    0 never executed
    #####: 2145:                else if (tok2->isName() && isMemberVar(scope, tok2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2146:                    const Variable* var = tok2->variable();
call    0 never executed
    #####: 2147:                    if (!var || !var->isMutable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2148:                        return false; // TODO: Only bailout if function takes argument as non-const reference
        -: 2149:                }
        -: 2150:            }
    #####: 2151:        } else if (Token::simpleMatch(tok1, "> (") && (!tok1->link() || !Token::Match(tok1->link()->previous(), "static_cast|const_cast|dynamic_cast|reinterpret_cast"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2152:            return false;
        -: 2153:        }
        -: 2154:    }
        -: 2155:
    #####: 2156:    return true;
        -: 2157:}
        -: 2158:
function _ZN10CheckClass15checkConstErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 2159:void CheckClass::checkConstError(const Token *tok, const std::string &classname, const std::string &funcname, bool suggestStatic)
        -: 2160:{
    #####: 2161:    checkConstError2(tok, nullptr, classname, funcname, suggestStatic);
call    0 never executed
    #####: 2162:}
        -: 2163:
function _ZN10CheckClass16checkConstError2EPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 2164:void CheckClass::checkConstError2(const Token *tok1, const Token *tok2, const std::string &classname, const std::string &funcname, bool suggestStatic)
        -: 2165:{
    #####: 2166:    std::list<const Token *> toks;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2167:    toks.push_back(tok1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2168:    if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 2169:        toks.push_back(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2170:    if (!suggestStatic)
branch  0 never executed
branch  1 never executed
    #####: 2171:        reportError(toks, Severity::style, "functionConst",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2172:                    "$symbol:" + classname + "::" + funcname +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 2173:                    "Technically the member function '$symbol' can be const.\n"
        -: 2174:                    "The member function '$symbol' can be made a const "
        -: 2175:                    "function. Making this function 'const' should not cause compiler errors. "
        -: 2176:                    "Even though the function can be made const function technically it may not make "
        -: 2177:                    "sense conceptually. Think about your design and the task of the function first - is "
        -: 2178:                    "it a function that must not change object internal state?", CWE398, true);
        -: 2179:    else
    #####: 2180:        reportError(toks, Severity::performance, "functionStatic",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2181:                    "$symbol:" + classname + "::" + funcname +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 2182:                    "Technically the member function '$symbol' can be static (but you may consider moving to unnamed namespace).\n"
        -: 2183:                    "The member function '$symbol' can be made a static "
        -: 2184:                    "function. Making a function static can bring a performance benefit since no 'this' instance is "
        -: 2185:                    "passed to the function. This change should not cause compiler errors but it does not "
        -: 2186:                    "necessarily make sense conceptually. Think about your design and the task of the function first - "
        -: 2187:                    "is it a function that must not access members of class instances? And maybe it is more appropriate "
        -: 2188:                    "to move this function to a unnamed namespace.", CWE398, true);
    #####: 2189:}
        -: 2190:
        -: 2191://---------------------------------------------------------------------------
        -: 2192:// ClassCheck: Check that initializer list is in declared order.
        -: 2193://---------------------------------------------------------------------------
        -: 2194:
        -: 2195:namespace { // avoid one-definition-rule violation
        -: 2196:    struct VarInfo {
function _ZN12_GLOBAL__N_17VarInfoC2EPK8VariablePK5Token called 0 returned 0% blocks executed 0%
    #####: 2197:        VarInfo(const Variable *_var, const Token *_tok)
    #####: 2198:            : var(_var), tok(_tok) { }
        -: 2199:
        -: 2200:        const Variable *var;
        -: 2201:        const Token *tok;
        -: 2202:    };
        -: 2203:}
        -: 2204:
function _ZN10CheckClass20initializerListOrderEv called 0 returned 0% blocks executed 0%
    #####: 2205:void CheckClass::initializerListOrder()
        -: 2206:{
    #####: 2207:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2208:        return;
        -: 2209:
        -: 2210:    // This check is not inconclusive.  However it only determines if the initialization
        -: 2211:    // order is incorrect.  It does not determine if being out of order causes
        -: 2212:    // a real error.  Out of order is not necessarily an error but you can never
        -: 2213:    // have an error if the list is in order so this enforces defensive programming.
    #####: 2214:    if (!mSettings->inconclusive)
branch  0 never executed
branch  1 never executed
    #####: 2215:        return;
        -: 2216:
    #####: 2217:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2218:
        -: 2219:        // iterate through all member functions looking for constructors
    #####: 2220:        for (std::list<Function>::const_iterator func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2221:            if (func->isConstructor() && func->hasBody()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 2222:                // check for initializer list
    #####: 2223:                const Token *tok = func->arg->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2224:
    #####: 2225:                if (tok->str() == ":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2226:                    std::vector<VarInfo> vars;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2227:                    tok = tok->next();
call    0 never executed
        -: 2228:
        -: 2229:                    // find all variable initializations in list
    #####: 2230:                    while (tok && tok != func->functionScope->bodyStart) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2231:                        if (Token::Match(tok, "%name% (|{")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2232:                            const Variable *var = scope->getVariable(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2233:                            if (var)
branch  0 never executed
branch  1 never executed
    #####: 2234:                                vars.emplace_back(var, tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2235:
    #####: 2236:                            if (Token::Match(tok->tokAt(2), "%name% =")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2237:                                var = scope->getVariable(tok->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2238:
    #####: 2239:                                if (var)
branch  0 never executed
branch  1 never executed
    #####: 2240:                                    vars.emplace_back(var, tok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2241:                            }
    #####: 2242:                            tok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2243:                        } else
    #####: 2244:                            tok = tok->next();
call    0 never executed
        -: 2245:                    }
        -: 2246:
        -: 2247:                    // need at least 2 members to have out of order initialization
    #####: 2248:                    for (int j = 1; j < vars.size(); j++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2249:                        // check for out of order initialization
    #####: 2250:                        if (vars[j].var->index() < vars[j - 1].var->index())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2251:                            initializerListError(vars[j].tok,vars[j].var->nameToken(), scope->className, vars[j].var->name());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 2252:                    }
        -: 2253:                }
        -: 2254:            }
        -: 2255:        }
        -: 2256:    }
        -: 2257:}
        -: 2258:
function _ZN10CheckClass20initializerListErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####: 2259:void CheckClass::initializerListError(const Token *tok1, const Token *tok2, const std::string &classname, const std::string &varname)
        -: 2260:{
    #####: 2261:    std::list<const Token *> toks = { tok1, tok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2262:    reportError(toks, Severity::style, "initializerList",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2263:                "$symbol:" + classname + "::" + varname +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 2264:                "Member variable '$symbol' is in the wrong place in the initializer list.\n"
        -: 2265:                "Member variable '$symbol' is in the wrong place in the initializer list. "
        -: 2266:                "Members are initialized in the order they are declared, not in the "
        -: 2267:                "order they are in the initializer list.  Keeping the initializer list "
        -: 2268:                "in the same order that the members were declared prevents order dependent "
        -: 2269:                "initialization errors.", CWE398, true);
    #####: 2270:}
call    0 never executed
        -: 2271:
        -: 2272:
        -: 2273://---------------------------------------------------------------------------
        -: 2274:// Check for self initialization in initialization list
        -: 2275://---------------------------------------------------------------------------
        -: 2276:
function _ZN10CheckClass23checkSelfInitializationEv called 0 returned 0% blocks executed 0%
    #####: 2277:void CheckClass::checkSelfInitialization()
        -: 2278:{
    #####: 2279:    for (const Scope *scope : mSymbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2280:        const Function* function = scope->function;
    #####: 2281:        if (!function || !function->isConstructor())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2282:            continue;
        -: 2283:
    #####: 2284:        const Token* tok = function->arg->link()->next();
call    0 never executed
call    1 never executed
    #####: 2285:        if (tok->str() != ":")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2286:            continue;
        -: 2287:
    #####: 2288:        for (; tok != scope->bodyStart; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2289:            if (Token::Match(tok, "[:,] %var% (|{ %var% )|}") && tok->next()->varId() == tok->tokAt(3)->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 2290:                selfInitializationError(tok, tok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2291:            }
        -: 2292:        }
        -: 2293:    }
    #####: 2294:}
        -: 2295:
function _ZN10CheckClass23selfInitializationErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2296:void CheckClass::selfInitializationError(const Token* tok, const std::string& varname)
        -: 2297:{
    #####: 2298:    reportError(tok, Severity::error, "selfInitialization", "$symbol:" + varname + "\nMember variable '$symbol' is initialized by itself.", CWE665, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2299:}
        -: 2300:
        -: 2301:
        -: 2302://---------------------------------------------------------------------------
        -: 2303:// Check for virtual function calls in constructor/destructor
        -: 2304://---------------------------------------------------------------------------
        -: 2305:
function _ZN10CheckClass37checkVirtualFunctionCallInConstructorEv called 0 returned 0% blocks executed 0%
    #####: 2306:void CheckClass::checkVirtualFunctionCallInConstructor()
        -: 2307:{
    #####: 2308:    if (! mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2309:        return;
    #####: 2310:    std::map<const Function *, std::list<const Token *> > virtualFunctionCallsMap;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2311:    for (const Scope *scope : mSymbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2312:        if (scope->function == nullptr || !scope->function->hasBody() ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2313:            !(scope->function->isConstructor() ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2314:              scope->function->isDestructor()))
call    0 never executed
    #####: 2315:            continue;
        -: 2316:
    #####: 2317:        const std::list<const Token *> & virtualFunctionCalls = getVirtualFunctionCalls(*scope->function, virtualFunctionCallsMap);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2318:        for (const Token *callToken : virtualFunctionCalls) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2319:            std::list<const Token *> callstack(1, callToken);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2320:            getFirstVirtualFunctionCallStack(virtualFunctionCallsMap, callToken, callstack);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2321:            if (callstack.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2322:                continue;
    #####: 2323:            if (callstack.back()->function()->isPure())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2324:                pureVirtualFunctionCallInConstructorError(scope->function, callstack, callstack.back()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2325:            else
    #####: 2326:                virtualFunctionCallInConstructorError(scope->function, callstack, callstack.back()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 2327:        }
        -: 2328:    }
        -: 2329:}
        -: 2330:
function _ZN10CheckClass23getVirtualFunctionCallsERK8FunctionRNSt7__debug3mapIPS1_NS3_4listIPK5TokenSaIS9_EEESt4lessIS5_ESaISt4pairIKS5_SB_EEEE called 0 returned 0% blocks executed 0%
    #####: 2331:const std::list<const Token *> & CheckClass::getVirtualFunctionCalls(const Function & function,
        -: 2332:        std::map<const Function *, std::list<const Token *> > & virtualFunctionCallsMap)
        -: 2333:{
    #####: 2334:    const std::map<const Function *, std::list<const Token *> >::const_iterator found = virtualFunctionCallsMap.find(&function);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2335:    if (found != virtualFunctionCallsMap.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2336:        return found->second;
call    0 never executed
        -: 2337:
    #####: 2338:    virtualFunctionCallsMap[&function] = std::list<const Token *>();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2339:    std::list<const Token *> & virtualFunctionCalls = virtualFunctionCallsMap.find(&function)->second;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 2340:
    #####: 2341:    if (!function.hasBody())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2342:        return virtualFunctionCalls;
        -: 2343:
    #####: 2344:    for (const Token *tok = function.arg->link(); tok != function.functionScope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2345:        if (function.type != Function::eConstructor &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2346:            function.type != Function::eCopyConstructor &&
branch  0 never executed
branch  1 never executed
    #####: 2347:            function.type != Function::eMoveConstructor &&
branch  0 never executed
branch  1 never executed
    #####: 2348:            function.type != Function::eDestructor) {
    #####: 2349:            if ((Token::simpleMatch(tok, ") {") && tok->link() && Token::Match(tok->link()->previous(), "if|switch")) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 2350:                Token::simpleMatch(tok, "else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2351:                // Assume pure virtual function call is prevented by "if|else|switch" condition
    #####: 2352:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2353:                continue;
        -: 2354:            }
        -: 2355:        }
    #####: 2356:        if (tok->scope()->type == Scope::eLambda)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2357:            tok = tok->scope()->bodyEnd->next();
call    0 never executed
call    1 never executed
        -: 2358:
    #####: 2359:        const Function * callFunction = tok->function();
call    0 never executed
    #####: 2360:        if (!callFunction ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2361:            function.nestedIn != callFunction->nestedIn ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2362:            (tok->previous() && tok->previous()->str() == "."))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2363:            continue;
        -: 2364:
    #####: 2365:        if (tok->previous() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2366:            tok->previous()->str() == "(") {
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2367:            const Token * prev = tok->previous();
call    0 never executed
    #####: 2368:            if (prev->previous() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2369:                (mSettings->library.ignorefunction(tok->str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2370:                 || mSettings->library.ignorefunction(prev->previous()->str())))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2371:                continue;
        -: 2372:        }
        -: 2373:
    #####: 2374:        if (callFunction->isImplicitlyVirtual()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2375:            if (!callFunction->isPure() && Token::simpleMatch(tok->previous(), "::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2376:                continue;
    #####: 2377:            virtualFunctionCalls.push_back(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2378:            continue;
        -: 2379:        }
        -: 2380:
    #####: 2381:        const std::list<const Token *> & virtualFunctionCallsOfTok = getVirtualFunctionCalls(*callFunction, virtualFunctionCallsMap);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2382:        if (!virtualFunctionCallsOfTok.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2383:            virtualFunctionCalls.push_back(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2384:    }
    #####: 2385:    return virtualFunctionCalls;
        -: 2386:}
        -: 2387:
function _ZN10CheckClass32getFirstVirtualFunctionCallStackERNSt7__debug3mapIPK8FunctionNS0_4listIPK5TokenSaIS8_EEESt4lessIS4_ESaISt4pairIKS4_SA_EEEES8_RSA_ called 0 returned 0% blocks executed 0%
    #####: 2388:void CheckClass::getFirstVirtualFunctionCallStack(
        -: 2389:    std::map<const Function *, std::list<const Token *> > & virtualFunctionCallsMap,
        -: 2390:    const Token * callToken,
        -: 2391:    std::list<const Token *> & pureFuncStack)
        -: 2392:{
    #####: 2393:    const Function *callFunction = callToken->function();
call    0 never executed
    #####: 2394:    if (callFunction->isImplicitlyVirtual() && (!callFunction->isPure() || !callFunction->hasBody())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2395:        pureFuncStack.push_back(callFunction->tokenDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2396:        return;
        -: 2397:    }
    #####: 2398:    std::map<const Function *, std::list<const Token *> >::const_iterator found = virtualFunctionCallsMap.find(callFunction);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2399:    if (found == virtualFunctionCallsMap.end() || found->second.empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2400:        pureFuncStack.clear();
call    0 never executed
    #####: 2401:        return;
        -: 2402:    }
    #####: 2403:    const Token * firstCall = *found->second.begin();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2404:    pureFuncStack.push_back(firstCall);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2405:    getFirstVirtualFunctionCallStack(virtualFunctionCallsMap, firstCall, pureFuncStack);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2406:}
        -: 2407:
function _ZN10CheckClass37virtualFunctionCallInConstructorErrorEPK8FunctionRKNSt7__debug4listIPK5TokenSaIS7_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2408:void CheckClass::virtualFunctionCallInConstructorError(
        -: 2409:    const Function * scopeFunction,
        -: 2410:    const std::list<const Token *> & tokStack,
        -: 2411:    const std::string &funcname)
        -: 2412:{
    #####: 2413:    const char * scopeFunctionTypeName = scopeFunction ? getFunctionTypeName(scopeFunction->type) : "constructor";
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2414:
    #####: 2415:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2416:    int lineNumber = 1;
    #####: 2417:    for (const Token *tok : tokStack)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2418:        errorPath.emplace_back(tok, "Calling " + tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2419:    if (!errorPath.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2420:        lineNumber = errorPath.front().first->linenr();
call    0 never executed
call    1 never executed
    #####: 2421:        errorPath.back().second = funcname + " is a virtual function";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2422:    }
        -: 2423:
    #####: 2424:    std::string constructorName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2425:    if (scopeFunction) {
branch  0 never executed
branch  1 never executed
    #####: 2426:        const Token *endToken = scopeFunction->argDef->link()->next();
call    0 never executed
call    1 never executed
    #####: 2427:        if (scopeFunction->type == Function::Type::eDestructor)
branch  0 never executed
branch  1 never executed
    #####: 2428:            constructorName = "~";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2429:        for (const Token *tok = scopeFunction->tokenDef; tok != endToken; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2430:            if (!constructorName.empty() && Token::Match(tok->previous(), "%name%|%num% %name%|%num%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2431:                constructorName += ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2432:            constructorName += tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2433:            if (tok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2434:                break;
        -: 2435:        }
        -: 2436:    }
        -: 2437:
    #####: 2438:    reportError(errorPath, Severity::warning, "virtualCallInConstructor",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2439:                "Virtual function '" + funcname + "' is called from " + scopeFunctionTypeName + " '" + constructorName + "' at line " + MathLib::toString(lineNumber) + ". Dynamic binding is not used.", CWE(0U), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
    #####: 2440:}
        -: 2441:
function _ZN10CheckClass41pureVirtualFunctionCallInConstructorErrorEPK8FunctionRKNSt7__debug4listIPK5TokenSaIS7_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2442:void CheckClass::pureVirtualFunctionCallInConstructorError(
        -: 2443:    const Function * scopeFunction,
        -: 2444:    const std::list<const Token *> & tokStack,
        -: 2445:    const std::string &purefuncname)
        -: 2446:{
    #####: 2447:    const char * scopeFunctionTypeName = scopeFunction ? getFunctionTypeName(scopeFunction->type) : "constructor";
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2448:
    #####: 2449:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2450:    for (const Token *tok : tokStack)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2451:        errorPath.emplace_back(tok, "Calling " + tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2452:    if (!errorPath.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2453:        errorPath.back().second = purefuncname + " is a pure virtual function without body";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2454:
    #####: 2455:    reportError(errorPath, Severity::warning, "pureVirtualCall",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2456:                "$symbol:" + purefuncname +"\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2457:                "Call of pure virtual function '$symbol' in " + scopeFunctionTypeName + ".\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2458:                "Call of pure virtual function '$symbol' in " + scopeFunctionTypeName + ". The call will fail during runtime.", CWE(0U), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2459:}
        -: 2460:
        -: 2461:
        -: 2462://---------------------------------------------------------------------------
        -: 2463:// Check for members hiding inherited members with the same name
        -: 2464://---------------------------------------------------------------------------
        -: 2465:
function _ZN10CheckClass25checkDuplInheritedMembersEv called 0 returned 0% blocks executed 0%
    #####: 2466:void CheckClass::checkDuplInheritedMembers()
        -: 2467:{
    #####: 2468:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2469:        return;
        -: 2470:
        -: 2471:    // Iterate over all classes
    #####: 2472:    for (const Type &classIt : mSymbolDatabase->typeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2473:        // Iterate over the parent classes
    #####: 2474:        for (const Type::BaseInfo &parentClassIt : classIt.derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2475:            // Check if there is info about the 'Base' class
    #####: 2476:            if (!parentClassIt.type || !parentClassIt.type->classScope)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2477:                continue;
        -: 2478:            // Check if they have a member variable in common
    #####: 2479:            for (const Variable &classVarIt : classIt.classScope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2480:                for (const Variable &parentClassVarIt : parentClassIt.type->classScope->varlist) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2481:                    if (classVarIt.name() == parentClassVarIt.name() && !parentClassVarIt.isPrivate()) { // Check if the class and its parent have a common variable
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2482:                        duplInheritedMembersError(classVarIt.nameToken(), parentClassVarIt.nameToken(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2483:                                                  classIt.name(), parentClassIt.type->name(), classVarIt.name(),
    #####: 2484:                                                  classIt.classScope->type == Scope::eStruct,
    #####: 2485:                                                  parentClassIt.type->classScope->type == Scope::eStruct);
        -: 2486:                    }
        -: 2487:                }
        -: 2488:            }
        -: 2489:        }
        -: 2490:    }
        -: 2491:}
        -: 2492:
function _ZN10CheckClass25duplInheritedMembersErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_bb called 0 returned 0% blocks executed 0%
    #####: 2493:void CheckClass::duplInheritedMembersError(const Token *tok1, const Token* tok2,
        -: 2494:        const std::string &derivedName, const std::string &baseName,
        -: 2495:        const std::string &variableName, bool derivedIsStruct, bool baseIsStruct)
        -: 2496:{
    #####: 2497:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2498:    errorPath.emplace_back(tok2, "Parent variable '" + baseName + "::" + variableName + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####: 2499:    errorPath.emplace_back(tok1, "Derived variable '" + derivedName + "::" + variableName + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
        -: 2500:
    #####: 2501:    const std::string symbols = "$symbol:" + derivedName + "\n$symbol:" + variableName + "\n$symbol:" + baseName;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        -: 2502:
    #####: 2503:    const std::string message = "The " + std::string(derivedIsStruct ? "struct" : "class") + " '" + derivedName +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2504:                                "' defines member variable with name '" + variableName + "' also defined in its parent " +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####: 2505:                                std::string(baseIsStruct ? "struct" : "class") + " '" + baseName + "'.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
    #####: 2506:    reportError(errorPath, Severity::warning, "duplInheritedMember", symbols + '\n' + message, CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2507:}
        -: 2508:
        -: 2509:
        -: 2510://---------------------------------------------------------------------------
        -: 2511:// Check that copy constructor and operator defined together
        -: 2512://---------------------------------------------------------------------------
        -: 2513:
        -: 2514:enum class CtorType {
        -: 2515:    NO,
        -: 2516:    WITHOUT_BODY,
        -: 2517:    WITH_BODY
        -: 2518:};
        -: 2519:
function _ZN10CheckClass26checkCopyCtorAndEqOperatorEv called 0 returned 0% blocks executed 0%
    #####: 2520:void CheckClass::checkCopyCtorAndEqOperator()
        -: 2521:{
        -: 2522:    // This is disabled because of #8388
        -: 2523:    // The message must be clarified. How is the behaviour different?
    #####: 2524:    return;
        -: 2525:
        -: 2526:    if (!mSettings->isEnabled(Settings::WARNING))
        -: 2527:        return;
        -: 2528:
        -: 2529:    for (const Scope * scope : mSymbolDatabase->classAndStructScopes) {
        -: 2530:
        -: 2531:        bool hasNonStaticVars = false;
        -: 2532:        for (std::list<Variable>::const_iterator var = scope->varlist.begin(); var != scope->varlist.end(); ++var) {
        -: 2533:            if (!var->isStatic()) {
        -: 2534:                hasNonStaticVars = true;
        -: 2535:                break;
        -: 2536:            }
        -: 2537:        }
        -: 2538:        if (!hasNonStaticVars)
        -: 2539:            continue;
        -: 2540:
        -: 2541:        CtorType copyCtors = CtorType::NO;
        -: 2542:        bool moveCtor = false;
        -: 2543:        CtorType assignmentOperators = CtorType::NO;
        -: 2544:
        -: 2545:        for (const Function &func : scope->functionList) {
        -: 2546:            if (copyCtors == CtorType::NO && func.type == Function::eCopyConstructor) {
        -: 2547:                copyCtors = func.hasBody() ? CtorType::WITH_BODY : CtorType::WITHOUT_BODY;
        -: 2548:            }
        -: 2549:            if (assignmentOperators == CtorType::NO && func.type == Function::eOperatorEqual) {
        -: 2550:                const Variable * variable = func.getArgumentVar(0);
        -: 2551:                if (variable && variable->type() && variable->type()->classScope == scope) {
        -: 2552:                    assignmentOperators = func.hasBody() ? CtorType::WITH_BODY : CtorType::WITHOUT_BODY;
        -: 2553:                }
        -: 2554:            }
        -: 2555:            if (func.type == Function::eMoveConstructor) {
        -: 2556:                moveCtor = true;
        -: 2557:                break;
        -: 2558:            }
        -: 2559:        }
        -: 2560:
        -: 2561:        if (moveCtor)
        -: 2562:            continue;
        -: 2563:
        -: 2564:        // No method defined
        -: 2565:        if (copyCtors != CtorType::WITH_BODY && assignmentOperators != CtorType::WITH_BODY)
        -: 2566:            continue;
        -: 2567:
        -: 2568:        // both methods are defined
        -: 2569:        if (copyCtors != CtorType::NO && assignmentOperators != CtorType::NO)
        -: 2570:            continue;
        -: 2571:
        -: 2572:        copyCtorAndEqOperatorError(scope->classDef, scope->className, scope->type == Scope::eStruct, copyCtors == CtorType::WITH_BODY);
        -: 2573:    }
        -: 2574:}
        -: 2575:
function _ZN10CheckClass26copyCtorAndEqOperatorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbb called 0 returned 0% blocks executed 0%
    #####: 2576:void CheckClass::copyCtorAndEqOperatorError(const Token *tok, const std::string &classname, bool isStruct, bool hasCopyCtor)
        -: 2577:{
    #####: 2578:    const std::string message = "$symbol:" + classname + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2579:                                "The " + std::string(isStruct ? "struct" : "class") + " '$symbol' has '" +
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 2580:                                getFunctionTypeName(hasCopyCtor ? Function::eCopyConstructor : Function::eOperatorEqual) +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2581:                                "' but lack of '" + getFunctionTypeName(hasCopyCtor ? Function::eOperatorEqual : Function::eCopyConstructor) +
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2582:                                "'.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2583:    reportError(tok, Severity::warning, "copyCtorAndEqOperator", message);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2584:}
call    0 never executed
        -: 2585:
function _ZN10CheckClass23checkUnsafeClassDivZeroEb called 0 returned 0% blocks executed 0%
    #####: 2586:void CheckClass::checkUnsafeClassDivZero(bool test)
        -: 2587:{
        -: 2588:    // style severity: it is a style decision if classes should be safe or
        -: 2589:    // if users should be required to be careful. I expect that many users
        -: 2590:    // will disagree about these reports.
    #####: 2591:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2592:        return;
        -: 2593:
    #####: 2594:    for (const Scope * classScope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2595:        if (!test && classScope->classDef->fileIndex() != 1)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2596:            continue;
    #####: 2597:        for (const Function &func : classScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2598:            if (func.access != AccessControl::Public)
branch  0 never executed
branch  1 never executed
    #####: 2599:                continue;
    #####: 2600:            if (!func.hasBody())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2601:                continue;
    #####: 2602:            if (func.name().compare(0,8,"operator")==0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2603:                continue;
    #####: 2604:            for (const Token *tok = func.functionScope->bodyStart; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2605:                if (Token::Match(tok, "if|switch|while|for|do|}"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2606:                    break;
    #####: 2607:                if (tok->str() != "/")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2608:                    continue;
    #####: 2609:                if (!tok->valueType() || !tok->valueType()->isIntegral())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2610:                    continue;
    #####: 2611:                if (!tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2612:                    continue;
    #####: 2613:                const Variable *var = tok->astOperand2()->variable();
call    0 never executed
call    1 never executed
    #####: 2614:                if (!var || !var->isArgument())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2615:                    continue;
    #####: 2616:                unsafeClassDivZeroError(tok, classScope->className, func.name(), var->name());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2617:                break;
        -: 2618:            }
        -: 2619:        }
        -: 2620:    }
        -: 2621:}
        -: 2622:
function _ZN10CheckClass23unsafeClassDivZeroErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 2623:void CheckClass::unsafeClassDivZeroError(const Token *tok, const std::string &className, const std::string &methodName, const std::string &varName)
        -: 2624:{
    #####: 2625:    const std::string symbols = "$symbol:" + className + "\n$symbol:" + methodName + "\n$symbol:" + varName + '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2626:    const std::string s = className + "::" + methodName + "()";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 2627:    reportError(tok, Severity::style, "unsafeClassDivZero", symbols + "Public interface of " + className + " is not safe. When calling " + s + ", if parameter " + varName + " is 0 that leads to division by zero.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
    #####: 2628:}
call    0 never executed
        -: 2629:
function _ZN10CheckClass13checkOverrideEv called 0 returned 0% blocks executed 0%
    #####: 2630:void CheckClass::checkOverride()
        -: 2631:{
    #####: 2632:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2633:        return;
    #####: 2634:    if (mSettings->standards.cpp < Standards::CPP11)
branch  0 never executed
branch  1 never executed
    #####: 2635:        return;
    #####: 2636:    for (const Scope * classScope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2637:        if (!classScope->definedType || classScope->definedType->derivedFrom.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2638:            continue;
    #####: 2639:        for (const Function &func : classScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2640:            if (func.hasOverrideSpecifier() || func.hasFinalSpecifier())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2641:                continue;
    #####: 2642:            const Function *baseFunc = func.getOverriddenFunction();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2643:            if (baseFunc)
branch  0 never executed
branch  1 never executed
    #####: 2644:                overrideError(baseFunc, &func);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2645:        }
        -: 2646:    }
        -: 2647:}
        -: 2648:
function _ZN10CheckClass13overrideErrorEPK8FunctionS2_ called 0 returned 0% blocks executed 0%
    #####: 2649:void CheckClass::overrideError(const Function *funcInBase, const Function *funcInDerived)
        -: 2650:{
    #####: 2651:    const std::string functionName = funcInDerived ? ((funcInDerived->isDestructor() ? "~" : "") + funcInDerived->name()) : "";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 2652:    const std::string funcType = (funcInDerived && funcInDerived->isDestructor()) ? "destructor" : "function";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2653:
    #####: 2654:    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2655:    if (funcInBase && funcInDerived) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2656:        errorPath.push_back(ErrorPathItem(funcInBase->tokenDef, "Virtual " + funcType + " in base class"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 2657:        errorPath.push_back(ErrorPathItem(funcInDerived->tokenDef, char(std::toupper(funcType[0])) + funcType.substr(1) + " in derived class"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
        -: 2658:    }
        -: 2659:
    #####: 2660:    reportError(errorPath, Severity::style, "missingOverride",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2661:                "$symbol:" + functionName + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2662:                "The " + funcType + " '$symbol' overrides a " + funcType + " in a base class but is not marked with a 'override' specifier.",
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 2663:                CWE(0U) /* Unknown CWE! */,
call    0 never executed
        -: 2664:                false);
    #####: 2665:}
        -: 2666:
function _ZN10CheckClass25checkUnsafeClassRefMemberEv called 0 returned 0% blocks executed 0%
    #####: 2667:void CheckClass::checkUnsafeClassRefMember()
        -: 2668:{
    #####: 2669:    if (!mSettings->safeChecks.classes || !mSettings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2670:        return;
    #####: 2671:    for (const Scope * classScope : mSymbolDatabase->classAndStructScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2672:        for (const Function &func : classScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2673:            if (!func.hasBody() || !func.isConstructor())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2674:                continue;
        -: 2675:
    #####: 2676:            const Token *initList = func.constructorMemberInitialization();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2677:            while (Token::Match(initList, "[:,] %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2678:                if (Token::Match(initList->tokAt(2), "( %var% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2679:                    const Variable * const memberVar = initList->next()->variable();
call    0 never executed
call    1 never executed
    #####: 2680:                    const Variable * const argVar = initList->tokAt(3)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2681:                    if (memberVar && argVar && memberVar->isConst() && memberVar->isReference() && argVar->isArgument() && argVar->isConst() && argVar->isReference())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####: 2682:                        unsafeClassRefMemberError(initList->next(), classScope->className + "::" + memberVar->name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 2683:                }
    #####: 2684:                initList = initList->linkAt(2)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 2685:            }
        -: 2686:        }
        -: 2687:    }
        -: 2688:}
        -: 2689:
function _ZN10CheckClass25unsafeClassRefMemberErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2690:void CheckClass::unsafeClassRefMemberError(const Token *tok, const std::string &varname)
        -: 2691:{
    #####: 2692:    reportError(tok, Severity::warning, "unsafeClassRefMember",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2693:                "$symbol:" + varname + "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 2694:                "Unsafe class: The const reference member '$symbol' is initialized by a const reference constructor argument. You need to be careful about lifetime issues.\n"
        -: 2695:                "Unsafe class checking: The const reference member '$symbol' is initialized by a const reference constructor argument. You need to be careful about lifetime issues. If you pass a local variable or temporary value in this constructor argument, be extra careful. If the argument is always some global object that is never destroyed then this is safe usage. However it would be defensive to make the member '$symbol' a non-reference variable or a smart pointer.",
    #####: 2696:                CWE(0), false);
call    0 never executed
function _GLOBAL__sub_I__ZN10CheckClassC2EPK9TokenizerPK8SettingsP11ErrorLogger called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 64%
        3: 2697:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
