        -:    0:Source:/home/workspace/lib/checkcondition.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkcondition.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkcondition.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:// Check for condition mismatches
        -:   21://---------------------------------------------------------------------------
        -:   22:
        -:   23:#include "checkcondition.h"
        -:   24:
        -:   25:#include "astutils.h"
        -:   26:#include "errorlogger.h"
        -:   27:#include "settings.h"
        -:   28:#include "symboldatabase.h"
        -:   29:#include "token.h"
        -:   30:#include "tokenize.h"
        -:   31:#include "valueflow.h"
        -:   32:
        -:   33:#include <algorithm>
        -:   34:#include <cstddef>
        -:   35:#include <limits>
        -:   36:#include <list>
        -:   37:#include <ostream>
        -:   38:#include <set>
        -:   39:#include <stack>
        -:   40:#include <utility>
        -:   41:
        -:   42:// CWE ids used
        1:   43:static const struct CWE CWE398(398U);   // Indicator of Poor Code Quality
call    0 returned 100%
        1:   44:static const struct CWE CWE570(570U);   // Expression is Always False
call    0 returned 100%
        1:   45:static const struct CWE CWE571(571U);   // Expression is Always True
call    0 returned 100%
        -:   46:
        -:   47://---------------------------------------------------------------------------
        -:   48:
        -:   49:// Register this check class (by creating a static instance of it)
        -:   50:namespace {
        1:   51:    CheckCondition instance;
call    0 returned 100%
call    1 returned 100%
        -:   52:}
        -:   53:
function _ZN14CheckCondition4diagEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:   54:bool CheckCondition::diag(const Token* tok, bool insert)
        -:   55:{
    #####:   56:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:   57:        return false;
    #####:   58:    if (mCondDiags.find(tok) == mCondDiags.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:   59:        if (insert)
branch  0 never executed
branch  1 never executed
    #####:   60:            mCondDiags.insert(tok);
call    0 never executed
call    1 never executed
    #####:   61:        return false;
        -:   62:    }
    #####:   63:    return true;
        -:   64:}
        -:   65:
function _ZNK14CheckCondition9isAliasedERKNSt7__debug3setIiSt4lessIiESaIiEEE called 0 returned 0% blocks executed 0%
    #####:   66:bool CheckCondition::isAliased(const std::set<int> &vars) const
        -:   67:{
    #####:   68:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   69:        if (Token::Match(tok, "= & %var% ;") && vars.find(tok->tokAt(2)->varId()) != vars.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
    #####:   70:            return true;
        -:   71:    }
    #####:   72:    return false;
        -:   73:}
        -:   74:
function _ZN14CheckCondition8assignIfEv called 0 returned 0% blocks executed 0%
    #####:   75:void CheckCondition::assignIf()
        -:   76:{
    #####:   77:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:        return;
        -:   79:
    #####:   80:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   81:        if (tok->str() != "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   82:            continue;
        -:   83:
    #####:   84:        if (Token::Match(tok->tokAt(-2), "[;{}] %var% =")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   85:            const Variable *var = tok->previous()->variable();
call    0 never executed
call    1 never executed
    #####:   86:            if (var == nullptr)
branch  0 never executed
branch  1 never executed
    #####:   87:                continue;
        -:   88:
    #####:   89:            char bitop = '\0';
    #####:   90:            MathLib::bigint num = 0;
        -:   91:
    #####:   92:            if (Token::Match(tok->next(), "%num% [&|]")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   93:                bitop = tok->strAt(2).at(0);
call    0 never executed
call    1 never executed
    #####:   94:                num = MathLib::toLongNumber(tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
        -:   95:            } else {
    #####:   96:                const Token *endToken = Token::findsimplematch(tok, ";");
call    0 never executed
        -:   97:
        -:   98:                // Casting address
    #####:   99:                if (endToken && Token::Match(endToken->tokAt(-4), "* ) & %any% ;"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  100:                    endToken = nullptr;
        -:  101:
    #####:  102:                if (endToken && Token::Match(endToken->tokAt(-2), "[&|] %num% ;")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  103:                    bitop = endToken->strAt(-2).at(0);
call    0 never executed
call    1 never executed
    #####:  104:                    num = MathLib::toLongNumber(endToken->previous()->str());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  105:                }
        -:  106:            }
        -:  107:
    #####:  108:            if (bitop == '\0')
branch  0 never executed
branch  1 never executed
    #####:  109:                continue;
        -:  110:
    #####:  111:            if (num < 0 && bitop == '|')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  112:                continue;
        -:  113:
    #####:  114:            assignIfParseScope(tok, tok->tokAt(4), var->declarationId(), var->isLocal(), bitop, num);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  115:        }
        -:  116:    }
        -:  117:}
        -:  118:
function _ZL18isParameterChangedPK5Token called 0 returned 0% blocks executed 0%
    #####:  119:static bool isParameterChanged(const Token *partok)
        -:  120:{
    #####:  121:    bool addressOf = Token::Match(partok, "[(,] &");
call    0 never executed
    #####:  122:    int argumentNumber = 0;
        -:  123:    const Token *ftok;
    #####:  124:    for (ftok = partok; ftok && ftok->str() != "("; ftok = ftok->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####:  125:        if (ftok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  126:            ftok = ftok->link();
call    0 never executed
    #####:  127:        else if (argumentNumber == 0U && ftok->str() == "&")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  128:            addressOf = true;
    #####:  129:        else if (ftok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  130:            argumentNumber++;
        -:  131:    }
    #####:  132:    ftok = ftok ? ftok->previous() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  133:    if (!(ftok && ftok->function()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  134:        return true;
    #####:  135:    const Variable *par = ftok->function()->getArgumentVar(argumentNumber);
call    0 never executed
call    1 never executed
    #####:  136:    if (!par)
branch  0 never executed
branch  1 never executed
    #####:  137:        return true;
    #####:  138:    if (par->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  139:        return false;
    #####:  140:    if (addressOf || par->isReference() || par->isPointer())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  141:        return true;
    #####:  142:    return false;
        -:  143:}
        -:  144:
        -:  145:/** parse scopes recursively */
function _ZN14CheckCondition18assignIfParseScopeEPK5TokenS2_ibcx called 0 returned 0% blocks executed 0%
    #####:  146:bool CheckCondition::assignIfParseScope(const Token * const assignTok,
        -:  147:                                        const Token * const startTok,
        -:  148:                                        const nonneg int varid,
        -:  149:                                        const bool islocal,
        -:  150:                                        const char bitop,
        -:  151:                                        const MathLib::bigint num)
        -:  152:{
    #####:  153:    bool ret = false;
        -:  154:
    #####:  155:    for (const Token *tok2 = startTok; tok2; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  156:        if ((bitop == '&') && Token::Match(tok2->tokAt(2), "%varid% %cop% %num% ;", varid) && tok2->strAt(3) == std::string(1U, bitop)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    #####:  157:            const MathLib::bigint num2 = MathLib::toLongNumber(tok2->strAt(4));
call    0 never executed
call    1 never executed
    #####:  158:            if (0 == (num & num2))
branch  0 never executed
branch  1 never executed
    #####:  159:                mismatchingBitAndError(assignTok, num, tok2, num2);
call    0 never executed
        -:  160:        }
    #####:  161:        if (Token::Match(tok2, "%varid% =", varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  162:            return true;
        -:  163:        }
    #####:  164:        if (bitop == '&' && Token::Match(tok2, "%varid% &= %num% ;", varid)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  165:            const MathLib::bigint num2 = MathLib::toLongNumber(tok2->strAt(2));
call    0 never executed
call    1 never executed
    #####:  166:            if (0 == (num & num2))
branch  0 never executed
branch  1 never executed
    #####:  167:                mismatchingBitAndError(assignTok, num, tok2, num2);
call    0 never executed
        -:  168:        }
    #####:  169:        if (Token::Match(tok2, "++|-- %varid%", varid) || Token::Match(tok2, "%varid% ++|--", varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  170:            return true;
    #####:  171:        if (Token::Match(tok2, "[(,] &| %varid% [,)]", varid) && isParameterChanged(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  172:            return true;
    #####:  173:        if (tok2->str() == "}")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  174:            return false;
    #####:  175:        if (Token::Match(tok2, "break|continue|return"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:            ret = true;
    #####:  177:        if (ret && tok2->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  178:            return false;
    #####:  179:        if (!islocal && Token::Match(tok2, "%name% (") && !Token::simpleMatch(tok2->next()->link(), ") {"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  180:            return true;
    #####:  181:        if (Token::Match(tok2, "if|while (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  182:            if (!islocal && tok2->str() == "while")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  183:                continue;
    #####:  184:            if (tok2->str() == "while") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  185:                // is variable changed in loop?
    #####:  186:                const Token *bodyStart = tok2->linkAt(1)->next();
call    0 never executed
call    1 never executed
    #####:  187:                const Token *bodyEnd   = bodyStart ? bodyStart->link() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  188:                if (!bodyEnd || bodyEnd->str() != "}" || isVariableChanged(bodyStart, bodyEnd, varid, !islocal, mSettings, mTokenizer->isCPP()))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  189:                    continue;
        -:  190:            }
        -:  191:
        -:  192:            // parse condition
    #####:  193:            const Token * const end = tok2->next()->link();
call    0 never executed
call    1 never executed
    #####:  194:            for (; tok2 != end; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  195:                if (Token::Match(tok2, "[(,] &| %varid% [,)]", varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  196:                    return true;
        -:  197:                }
    #####:  198:                if (Token::Match(tok2,"&&|%oror%|( %varid% ==|!= %num% &&|%oror%|)", varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:                    const Token *vartok = tok2->next();
call    0 never executed
    #####:  200:                    const MathLib::bigint num2 = MathLib::toLongNumber(vartok->strAt(2));
call    0 never executed
call    1 never executed
    #####:  201:                    if ((num & num2) != ((bitop=='&') ? num2 : num)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  202:                        const std::string& op(vartok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  203:                        const bool alwaysTrue = op == "!=";
call    0 never executed
    #####:  204:                        const std::string condition(vartok->str() + op + vartok->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  205:                        assignIfError(assignTok, tok2, condition, alwaysTrue);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  206:                    }
        -:  207:                }
    #####:  208:                if (Token::Match(tok2, "%varid% %op%", varid) && tok2->next()->isAssignmentOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  209:                    return true;
        -:  210:                }
        -:  211:            }
        -:  212:
    #####:  213:            const bool ret1 = assignIfParseScope(assignTok, end->tokAt(2), varid, islocal, bitop, num);
call    0 never executed
call    1 never executed
    #####:  214:            bool ret2 = false;
    #####:  215:            if (Token::simpleMatch(end->next()->link(), "} else {"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  216:                ret2 = assignIfParseScope(assignTok, end->next()->link()->tokAt(3), varid, islocal, bitop, num);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  217:            if (ret1 || ret2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  218:                return true;
        -:  219:        }
        -:  220:    }
    #####:  221:    return false;
        -:  222:}
        -:  223:
function _ZN14CheckCondition13assignIfErrorEPK5TokenS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  224:void CheckCondition::assignIfError(const Token *tok1, const Token *tok2, const std::string &condition, bool result)
        -:  225:{
    #####:  226:    if (tok2 && diag(tok2->tokAt(2)))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  227:        return;
    #####:  228:    std::list<const Token *> locations = { tok1, tok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  229:    reportError(locations,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  230:                Severity::style,
        -:  231:                "assignIfError",
    #####:  232:                "Mismatching assignment and comparison, comparison '" + condition + "' is always " + std::string(result ? "true" : "false") + ".", CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -:  233:}
        -:  234:
        -:  235:
function _ZN14CheckCondition22mismatchingBitAndErrorEPK5TokenxS2_x called 0 returned 0% blocks executed 0%
    #####:  236:void CheckCondition::mismatchingBitAndError(const Token *tok1, const MathLib::bigint num1, const Token *tok2, const MathLib::bigint num2)
        -:  237:{
    #####:  238:    std::list<const Token *> locations = { tok1, tok2 };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  239:
    #####:  240:    std::ostringstream msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  241:    msg << "Mismatching bitmasks. Result is always 0 ("
    #####:  242:        << "X = Y & 0x" << std::hex << num1 << "; Z = X & 0x" << std::hex << num2 << "; => Z=0).";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
        -:  243:
    #####:  244:    reportError(locations,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  245:                Severity::style,
        -:  246:                "mismatchingBitAnd",
    #####:  247:                msg.str(), CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  248:}
call    0 never executed
        -:  249:
        -:  250:
function _ZL14getnumchildrenPK5TokenRNSt7__debug4listIxSaIxEEE called 0 returned 0% blocks executed 0%
    #####:  251:static void getnumchildren(const Token *tok, std::list<MathLib::bigint> &numchildren)
        -:  252:{
    #####:  253:    if (tok->astOperand1() && tok->astOperand1()->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  254:        numchildren.push_back(MathLib::toLongNumber(tok->astOperand1()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  255:    else if (tok->astOperand1() && tok->str() == tok->astOperand1()->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  256:        getnumchildren(tok->astOperand1(), numchildren);
call    0 never executed
call    1 never executed
    #####:  257:    if (tok->astOperand2() && tok->astOperand2()->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  258:        numchildren.push_back(MathLib::toLongNumber(tok->astOperand2()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  259:    else if (tok->astOperand2() && tok->str() == tok->astOperand2()->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  260:        getnumchildren(tok->astOperand2(), numchildren);
call    0 never executed
call    1 never executed
    #####:  261:}
        -:  262:
        -:  263:/* Return whether tok is in the body for a function returning a boolean. */
function _ZL17inBooleanFunctionPK5Token called 0 returned 0% blocks executed 0%
    #####:  264:static bool inBooleanFunction(const Token *tok)
        -:  265:{
    #####:  266:    const Scope *scope = tok ? tok->scope() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  267:    while (scope && scope->isLocal())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  268:        scope = scope->nestedIn;
    #####:  269:    if (scope && scope->type == Scope::eFunction) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  270:        const Function *func = scope->function;
    #####:  271:        if (func) {
branch  0 never executed
branch  1 never executed
    #####:  272:            const Token *ret = func->retDef;
    #####:  273:            while (Token::Match(ret, "static|const"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  274:                ret = ret->next();
call    0 never executed
    #####:  275:            return Token::Match(ret, "bool|_Bool");
call    0 never executed
        -:  276:        }
        -:  277:    }
    #####:  278:    return false;
        -:  279:}
        -:  280:
function _ZN14CheckCondition20checkBadBitmaskCheckEv called 0 returned 0% blocks executed 0%
    #####:  281:void CheckCondition::checkBadBitmaskCheck()
        -:  282:{
    #####:  283:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  284:        return;
        -:  285:
    #####:  286:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  287:        if (tok->str() == "|" && tok->astOperand1() && tok->astOperand2() && tok->astParent()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  288:            const Token* parent = tok->astParent();
call    0 never executed
    #####:  289:            const bool isBoolean = Token::Match(parent, "&&|%oror%") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  290:                                   (parent->str() == "?" && parent->astOperand1() == tok) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  291:                                   (parent->str() == "=" && parent->astOperand2() == tok && parent->astOperand1() && parent->astOperand1()->variable() && Token::Match(parent->astOperand1()->variable()->typeStartToken(), "bool|_Bool")) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  292:                                   (parent->str() == "(" && Token::Match(parent->astOperand1(), "if|while")) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  293:                                   (parent->str() == "return" && parent->astOperand1() == tok && inBooleanFunction(tok));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  294:
    #####:  295:            const bool isTrue = (tok->astOperand1()->hasKnownIntValue() && tok->astOperand1()->values().front().intvalue != 0) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  296:                                (tok->astOperand2()->hasKnownIntValue() && tok->astOperand2()->values().front().intvalue != 0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  297:
    #####:  298:            if (isBoolean && isTrue)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  299:                badBitmaskCheckError(tok);
call    0 never executed
        -:  300:        }
        -:  301:    }
        -:  302:}
        -:  303:
function _ZN14CheckCondition20badBitmaskCheckErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:  304:void CheckCondition::badBitmaskCheckError(const Token *tok)
        -:  305:{
    #####:  306:    reportError(tok, Severity::warning, "badBitmaskCheck", "Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?", CWE571, false);
call    0 never executed
    #####:  307:}
        -:  308:
function _ZN14CheckCondition10comparisonEv called 0 returned 0% blocks executed 0%
    #####:  309:void CheckCondition::comparison()
        -:  310:{
    #####:  311:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  312:        return;
        -:  313:
    #####:  314:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  315:        if (!tok->isComparisonOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  316:            continue;
        -:  317:
    #####:  318:        const Token *expr1 = tok->astOperand1();
call    0 never executed
    #####:  319:        const Token *expr2 = tok->astOperand2();
call    0 never executed
    #####:  320:        if (!expr1 || !expr2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  321:            continue;
    #####:  322:        if (expr1->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  323:            std::swap(expr1,expr2);
call    0 never executed
    #####:  324:        if (!expr2->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  325:            continue;
    #####:  326:        const MathLib::bigint num2 = MathLib::toLongNumber(expr2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  327:        if (num2 < 0)
branch  0 never executed
branch  1 never executed
    #####:  328:            continue;
    #####:  329:        if (!Token::Match(expr1,"[&|]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  330:            continue;
    #####:  331:        std::list<MathLib::bigint> numbers;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  332:        getnumchildren(expr1, numbers);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  333:        for (const MathLib::bigint num1 : numbers) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  334:            if (num1 < 0)
branch  0 never executed
branch  1 never executed
    #####:  335:                continue;
    #####:  336:            if (Token::Match(tok, "==|!=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  337:                if ((expr1->str() == "&" && (num1 & num2) != num2) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  338:                    (expr1->str() == "|" && (num1 | num2) != num2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  339:                    const std::string& op(tok->str());
call    0 never executed
    #####:  340:                    comparisonError(expr1, expr1->str(), num1, op, num2, op=="==" ? false : true);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  341:                }
    #####:  342:            } else if (expr1->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  343:                const bool or_equal = Token::Match(tok, ">=|<=");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  344:                const std::string& op(tok->str());
call    0 never executed
    #####:  345:                if ((Token::Match(tok, ">=|<")) && (num1 < num2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  346:                    comparisonError(expr1, expr1->str(), num1, op, num2, or_equal ? false : true);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  347:                } else if ((Token::Match(tok, "<=|>")) && (num1 <= num2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  348:                    comparisonError(expr1, expr1->str(), num1, op, num2, or_equal ? true : false);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  349:                }
    #####:  350:            } else if (expr1->str() == "|") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  351:                if ((expr1->astOperand1()->valueType()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  352:                    (expr1->astOperand1()->valueType()->sign == ValueType::Sign::UNSIGNED)) {
call    0 never executed
call    1 never executed
    #####:  353:                    const bool or_equal = Token::Match(tok, ">=|<=");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  354:                    const std::string& op(tok->str());
call    0 never executed
    #####:  355:                    if ((Token::Match(tok, ">=|<")) && (num1 >= num2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  356:                        //"(a | 0x07) >= 7U" is always true for unsigned a
        -:  357:                        //"(a | 0x07) < 7U" is always false for unsigned a
    #####:  358:                        comparisonError(expr1, expr1->str(), num1, op, num2, or_equal ? true : false);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  359:                    } else if ((Token::Match(tok, "<=|>")) && (num1 > num2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  360:                        //"(a | 0x08) <= 7U" is always false for unsigned a
        -:  361:                        //"(a | 0x07) > 6U" is always true for unsigned a
    #####:  362:                        comparisonError(expr1, expr1->str(), num1, op, num2, or_equal ? false : true);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  363:                    }
        -:  364:                }
        -:  365:            }
        -:  366:        }
        -:  367:    }
        -:  368:}
        -:  369:
function _ZN14CheckCondition15comparisonErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEExSA_xb called 0 returned 0% blocks executed 0%
    #####:  370:void CheckCondition::comparisonError(const Token *tok, const std::string &bitop, MathLib::bigint value1, const std::string &op, MathLib::bigint value2, bool result)
        -:  371:{
    #####:  372:    std::ostringstream expression;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  373:    expression << std::hex << "(X " << bitop << " 0x" << value1 << ") " << op << " 0x" << value2;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
        -:  374:
    #####:  375:    const std::string errmsg("Expression '" + expression.str() + "' is always " + (result?"true":"false") + ".\n"
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####:  376:                             "The expression '" + expression.str() + "' is always " + (result?"true":"false") +
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  377:                             ". Check carefully constants and operators used, these errors might be hard to "
        -:  378:                             "spot sometimes. In case of complex expression it might help to split it to "
    #####:  379:                             "separate expressions.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  380:
    #####:  381:    reportError(tok, Severity::style, "comparisonError", errmsg, CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  382:}
call    0 never executed
        -:  383:
function _ZNK14CheckCondition17isOverlappingCondEPK5TokenS2_b called 0 returned 0% blocks executed 0%
    #####:  384:bool CheckCondition::isOverlappingCond(const Token * const cond1, const Token * const cond2, bool pure) const
        -:  385:{
    #####:  386:    if (!cond1 || !cond2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  387:        return false;
        -:  388:
        -:  389:    // same expressions
    #####:  390:    if (isSameExpression(mTokenizer->isCPP(), true, cond1, cond2, mSettings->library, pure, false))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  391:        return true;
        -:  392:
        -:  393:    // bitwise overlap for example 'x&7' and 'x==1'
    #####:  394:    if (cond1->str() == "&" && cond1->astOperand1() && cond2->astOperand2()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  395:        const Token *expr1 = cond1->astOperand1();
call    0 never executed
    #####:  396:        const Token *num1  = cond1->astOperand2();
call    0 never executed
    #####:  397:        if (!num1) // unary operator&
branch  0 never executed
branch  1 never executed
    #####:  398:            return false;
    #####:  399:        if (!num1->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  400:            std::swap(expr1,num1);
call    0 never executed
    #####:  401:        if (!num1->isNumber() || MathLib::isNegative(num1->str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  402:            return false;
        -:  403:
    #####:  404:        if (!Token::Match(cond2, "&|==") || !cond2->astOperand1() || !cond2->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  405:            return false;
    #####:  406:        const Token *expr2 = cond2->astOperand1();
call    0 never executed
    #####:  407:        const Token *num2  = cond2->astOperand2();
call    0 never executed
    #####:  408:        if (!num2->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  409:            std::swap(expr2,num2);
call    0 never executed
    #####:  410:        if (!num2->isNumber() || MathLib::isNegative(num2->str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  411:            return false;
        -:  412:
    #####:  413:        if (!isSameExpression(mTokenizer->isCPP(), true, expr1, expr2, mSettings->library, pure, false))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  414:            return false;
        -:  415:
    #####:  416:        const MathLib::bigint value1 = MathLib::toLongNumber(num1->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  417:        const MathLib::bigint value2 = MathLib::toLongNumber(num2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  418:        if (cond2->str() == "&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  419:            return ((value1 & value2) == value2);
    #####:  420:        return ((value1 & value2) > 0);
        -:  421:    }
    #####:  422:    return false;
        -:  423:}
        -:  424:
function _ZN14CheckCondition18duplicateConditionEv called 0 returned 0% blocks executed 0%
    #####:  425:void CheckCondition::duplicateCondition()
        -:  426:{
    #####:  427:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  428:        return;
        -:  429:
    #####:  430:    const SymbolDatabase *const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  431:
    #####:  432:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  433:        if (scope.type != Scope::eIf)
branch  0 never executed
branch  1 never executed
    #####:  434:            continue;
        -:  435:
    #####:  436:        const Token *cond1 = scope.classDef->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  437:        if (!cond1)
branch  0 never executed
branch  1 never executed
    #####:  438:            continue;
    #####:  439:        if (cond1->hasKnownIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  440:            continue;
        -:  441:
    #####:  442:        const Token *tok2 = scope.classDef->next();
call    0 never executed
    #####:  443:        if (!tok2)
branch  0 never executed
branch  1 never executed
    #####:  444:            continue;
    #####:  445:        tok2 = tok2->link();
call    0 never executed
    #####:  446:        if (!Token::simpleMatch(tok2, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  447:            continue;
    #####:  448:        tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  449:        if (!Token::simpleMatch(tok2, "} if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  450:            continue;
    #####:  451:        const Token *cond2 = tok2->tokAt(2)->astOperand2();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  452:        if (!cond2)
branch  0 never executed
branch  1 never executed
    #####:  453:            continue;
        -:  454:
    #####:  455:        bool modified = false;
function _ZZN14CheckCondition18duplicateConditionEvENKUlPK5TokenE_clES2_ called 0 returned 0% blocks executed 0%
    #####:  456:        visitAstNodes(cond1, [&](const Token *tok3) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  457:            if (tok3->varId() > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  458:                isVariableChanged(scope.classDef->next(), cond2, tok3->varId(), false, mSettings, mTokenizer->isCPP())) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  459:                modified = true;
    #####:  460:                return ChildrenToVisit::done;
        -:  461:            }
    #####:  462:            return ChildrenToVisit::op1_and_op2;
        -:  463:        });
    #####:  464:        ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  465:        if (!modified &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  466:            isSameExpression(mTokenizer->isCPP(), true, cond1, cond2, mSettings->library, true, true, &errorPath))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  467:            duplicateConditionError(cond1, cond2, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  468:    }
        -:  469:}
        -:  470:
function _ZN14CheckCondition23duplicateConditionErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####:  471:void CheckCondition::duplicateConditionError(const Token *tok1, const Token *tok2, ErrorPath errorPath)
        -:  472:{
    #####:  473:    if (diag(tok1) & diag(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  474:        return;
    #####:  475:    errorPath.emplace_back(tok1, "First condition");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  476:    errorPath.emplace_back(tok2, "Second condition");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  477:
    #####:  478:    std::string msg = "The if condition is the same as the previous if condition";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  479:
    #####:  480:    reportError(errorPath, Severity::style, "duplicateCondition", msg, CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  481:}
        -:  482:
function _ZN14CheckCondition14multiConditionEv called 0 returned 0% blocks executed 0%
    #####:  483:void CheckCondition::multiCondition()
        -:  484:{
    #####:  485:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  486:        return;
        -:  487:
    #####:  488:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  489:
    #####:  490:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  491:        if (scope.type != Scope::eIf)
branch  0 never executed
branch  1 never executed
    #####:  492:            continue;
        -:  493:
    #####:  494:        const Token * const cond1 = scope.classDef->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  495:        if (!cond1)
branch  0 never executed
branch  1 never executed
    #####:  496:            continue;
        -:  497:
    #####:  498:        const Token * tok2 = scope.classDef->next();
call    0 never executed
        -:  499:
        -:  500:        // Check each 'else if'
        -:  501:        for (;;) {
    #####:  502:            tok2 = tok2->link();
call    0 never executed
    #####:  503:            if (!Token::simpleMatch(tok2, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  504:                break;
    #####:  505:            tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  506:            if (!Token::simpleMatch(tok2, "} else { if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  507:                break;
    #####:  508:            tok2 = tok2->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  509:
    #####:  510:            if (tok2->astOperand2() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  511:                !cond1->hasKnownIntValue() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  512:                !tok2->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  513:                ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  514:                if (isOverlappingCond(cond1, tok2->astOperand2(), true))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  515:                    overlappingElseIfConditionError(tok2, cond1->linenr());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  516:                else if (isOppositeCond(true, mTokenizer->isCPP(), cond1, tok2->astOperand2(), mSettings->library, true, true, &errorPath))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  517:                    oppositeElseIfConditionError(cond1, tok2, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  518:            }
    #####:  519:        }
        -:  520:    }
        -:  521:}
        -:  522:
function _ZN14CheckCondition31overlappingElseIfConditionErrorEPK5Tokeni called 0 returned 0% blocks executed 0%
    #####:  523:void CheckCondition::overlappingElseIfConditionError(const Token *tok, nonneg int line1)
        -:  524:{
    #####:  525:    if (diag(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  526:        return;
    #####:  527:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  528:    errmsg << "Expression is always false because 'else if' condition matches previous condition at line "
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  529:           << line1 << ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  530:
    #####:  531:    reportError(tok, Severity::style, "multiCondition", errmsg.str(), CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  532:}
        -:  533:
function _ZN14CheckCondition28oppositeElseIfConditionErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####:  534:void CheckCondition::oppositeElseIfConditionError(const Token *ifCond, const Token *elseIfCond, ErrorPath errorPath)
        -:  535:{
    #####:  536:    if (diag(ifCond) & diag(elseIfCond))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  537:        return;
    #####:  538:    std::ostringstream errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  539:    errmsg << "Expression is always true because 'else if' condition is opposite to previous condition at line "
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  540:           << ifCond->linenr() << ".";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  541:
    #####:  542:    errorPath.emplace_back(ifCond, "first condition");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  543:    errorPath.emplace_back(elseIfCond, "else if condition is opposite to first condition");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  544:
    #####:  545:    reportError(errorPath, Severity::style, "multiCondition", errmsg.str(), CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  546:}
        -:  547:
        -:  548://---------------------------------------------------------------------------
        -:  549:// - Opposite inner conditions => always false
        -:  550:// - (TODO) Same/Overlapping inner condition => always true
        -:  551:// - same condition after early exit => always false
        -:  552://---------------------------------------------------------------------------
        -:  553:
function _ZL22isNonConstFunctionCallPK5TokenRK7Library called 0 returned 0% blocks executed 0%
    #####:  554:static bool isNonConstFunctionCall(const Token *ftok, const Library &library)
        -:  555:{
    #####:  556:    if (library.isFunctionConst(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  557:        return false;
    #####:  558:    const Token *obj = ftok->next()->astOperand1();
call    0 never executed
call    1 never executed
    #####:  559:    while (obj && obj->str() == ".")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  560:        obj = obj->astOperand1();
call    0 never executed
    #####:  561:    if (!obj)
branch  0 never executed
branch  1 never executed
    #####:  562:        return true;
    #####:  563:    else if (obj->variable() && obj->variable()->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  564:        return false;
    #####:  565:    else if (ftok->function() && ftok->function()->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  566:        return false;
    #####:  567:    return true;
        -:  568:}
        -:  569:
function _ZN14CheckCondition15multiCondition2Ev called 0 returned 0% blocks executed 0%
    #####:  570:void CheckCondition::multiCondition2()
        -:  571:{
    #####:  572:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  573:        return;
        -:  574:
    #####:  575:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  576:
    #####:  577:    for (const Scope &scope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  578:        const Token *condTok = nullptr;
    #####:  579:        if (scope.type == Scope::eIf || scope.type == Scope::eWhile)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  580:            condTok = scope.classDef->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  581:        else if (scope.type == Scope::eFor) {
branch  0 never executed
branch  1 never executed
    #####:  582:            condTok = scope.classDef->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####:  583:            if (!condTok || condTok->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  584:                continue;
    #####:  585:            condTok = condTok->astOperand2();
call    0 never executed
    #####:  586:            if (!condTok || condTok->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  587:                continue;
    #####:  588:            condTok = condTok->astOperand1();
call    0 never executed
        -:  589:        }
    #####:  590:        if (!condTok)
branch  0 never executed
branch  1 never executed
    #####:  591:            continue;
    #####:  592:        const Token * const cond1 = condTok;
        -:  593:
    #####:  594:        if (!Token::simpleMatch(scope.classDef->linkAt(1), ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  595:            continue;
        -:  596:
    #####:  597:        bool nonConstFunctionCall = false;
    #####:  598:        bool nonlocal = false; // nonlocal variable used in condition
    #####:  599:        std::set<int> vars; // variables used in condition
call    0 never executed
call    1 never executed
    #####:  600:        visitAstNodes(condTok,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
function _ZZN14CheckCondition15multiCondition2EvENKUlPK5TokenE_clES2_ called 0 returned 0% blocks executed 0%
    #####:  601:        [&](const Token *cond) {
    #####:  602:            if (Token::Match(cond, "%name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  603:                nonConstFunctionCall = isNonConstFunctionCall(cond, mSettings->library);
call    0 never executed
    #####:  604:                if (nonConstFunctionCall)
branch  0 never executed
branch  1 never executed
    #####:  605:                    return ChildrenToVisit::done;
        -:  606:            }
        -:  607:
    #####:  608:            if (cond->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  609:                vars.insert(cond->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  610:                const Variable *var = cond->variable();
call    0 never executed
    #####:  611:                if (!nonlocal && var) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  612:                    if (!(var->isLocal() || var->isArgument()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  613:                        nonlocal = true;
    #####:  614:                    else if ((var->isPointer() || var->isReference()) && !Token::Match(cond->astParent(), "%oror%|&&|!"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
        -:  615:                        // TODO: if var is pointer check what it points at
    #####:  616:                        nonlocal = true;
        -:  617:                }
    #####:  618:            } else if (!nonlocal && cond->isName()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  619:                // varid is 0. this is possibly a nonlocal variable..
    #####:  620:                nonlocal = Token::Match(cond->astParent(), "%cop%|(|[") || Token::Match(cond, "%name% .") || (mTokenizer->isCPP() && cond->str() == "this");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -:  621:            } else {
    #####:  622:                return ChildrenToVisit::op1_and_op2;
        -:  623:            }
    #####:  624:            return ChildrenToVisit::none;
        -:  625:        });
        -:  626:
    #####:  627:        if (nonConstFunctionCall)
branch  0 never executed
branch  1 never executed
    #####:  628:            continue;
        -:  629:
        -:  630:        // parse until second condition is reached..
        -:  631:        enum MULTICONDITIONTYPE { INNER, AFTER };
        -:  632:        const Token *tok;
        -:  633:
        -:  634:        // Parse inner condition first and then early return condition
    #####:  635:        std::vector<MULTICONDITIONTYPE> types = {MULTICONDITIONTYPE::INNER};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  636:        if (Token::Match(scope.bodyStart, "{ return|throw|continue|break"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  637:            types.push_back(MULTICONDITIONTYPE::AFTER);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  638:        for (MULTICONDITIONTYPE type:types) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  639:            if (type == MULTICONDITIONTYPE::AFTER) {
branch  0 never executed
branch  1 never executed
    #####:  640:                tok = scope.bodyEnd->next();
call    0 never executed
        -:  641:            } else {
    #####:  642:                tok = scope.bodyStart;
        -:  643:            }
    #####:  644:            const Token * const endToken = tok->scope()->bodyEnd;
call    0 never executed
        -:  645:
    #####:  646:            for (; tok && tok != endToken; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  647:                if (Token::Match(tok, "if|return")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  648:                    const Token * condStartToken = tok->str() == "if" ? tok->next() : tok;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  649:                    const Token * condEndToken = tok->str() == "if" ? condStartToken->link() : Token::findsimplematch(condStartToken, ";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  650:                    // Does condition modify tracked variables?
    #####:  651:                    if (const Token *op = Token::findmatch(tok, "++|--", condEndToken)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  652:                        bool bailout = false;
    #####:  653:                        while (op) {
branch  0 never executed
branch  1 never executed
    #####:  654:                            if (vars.find(op->astOperand1()->varId()) != vars.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####:  655:                                bailout = true;
    #####:  656:                                break;
        -:  657:                            }
    #####:  658:                            if (nonlocal && op->astOperand1()->varId() == 0) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  659:                                bailout = true;
    #####:  660:                                break;
        -:  661:                            }
    #####:  662:                            op = Token::findmatch(op->next(), "++|--", condEndToken);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  663:                        }
    #####:  664:                        if (bailout)
branch  0 never executed
branch  1 never executed
    #####:  665:                            break;
        -:  666:                    }
        -:  667:
        -:  668:                    // Condition..
    #####:  669:                    const Token *cond2 = tok->str() == "if" ? condStartToken->astOperand2() : condStartToken->astOperand1();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  670:                    const bool isReturnVar = (tok->str() == "return" && !Token::Match(cond2, "%cop%"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  671:
    #####:  672:                    ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  673:
    #####:  674:                    if (type == MULTICONDITIONTYPE::INNER) {
branch  0 never executed
branch  1 never executed
    #####:  675:                        std::stack<const Token *> tokens1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  676:                        tokens1.push(cond1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  677:                        while (!tokens1.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  678:                            const Token *firstCondition = tokens1.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  679:                            tokens1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  680:                            if (!firstCondition)
branch  0 never executed
branch  1 never executed
    #####:  681:                                continue;
    #####:  682:                            if (firstCondition->str() == "&&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  683:                                tokens1.push(firstCondition->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  684:                                tokens1.push(firstCondition->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  685:                            } else if (!firstCondition->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  686:                                if (!isReturnVar && isOppositeCond(false, mTokenizer->isCPP(), firstCondition, cond2, mSettings->library, true, true, &errorPath)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  687:                                    if (!isAliased(vars))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  688:                                        oppositeInnerConditionError(firstCondition, cond2, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  689:                                } else if (!isReturnVar && isSameExpression(mTokenizer->isCPP(), true, firstCondition, cond2, mSettings->library, true, true, &errorPath)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  690:                                    identicalInnerConditionError(firstCondition, cond2, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  691:                                }
        -:  692:                            }
        -:  693:                        }
        -:  694:                    } else {
    #####:  695:                        std::stack<const Token *> tokens2;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  696:                        tokens2.push(cond2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  697:                        while (!tokens2.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  698:                            const Token *secondCondition = tokens2.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  699:                            tokens2.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  700:                            if (!secondCondition)
branch  0 never executed
branch  1 never executed
    #####:  701:                                continue;
    #####:  702:                            if (secondCondition->str() == "||" || secondCondition->str() == "&&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  703:                                tokens2.push(secondCondition->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  704:                                tokens2.push(secondCondition->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  705:                            } else if ((!cond1->hasKnownIntValue() || !secondCondition->hasKnownIntValue()) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  706:                                       isSameExpression(mTokenizer->isCPP(), true, cond1, secondCondition, mSettings->library, true, true, &errorPath)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  707:                                if (!isAliased(vars))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  708:                                    identicalConditionAfterEarlyExitError(cond1, secondCondition, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  709:                            }
        -:  710:                        }
        -:  711:                    }
        -:  712:                }
    #####:  713:                if (Token::Match(tok, "%type% (") && nonlocal && isNonConstFunctionCall(tok, mSettings->library)) // non const function call -> bailout if there are nonlocal variables
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  714:                    break;
    #####:  715:                if (Token::Match(tok, "case|break|continue|return|throw") && tok->scope() == endToken->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  716:                    break;
    #####:  717:                if (Token::Match(tok, "[;{}] %name% :"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  718:                    break;
        -:  719:                // bailout if loop is seen.
        -:  720:                // TODO: handle loops better.
    #####:  721:                if (Token::Match(tok, "for|while|do")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  722:                    const Token *tok1 = tok->next();
call    0 never executed
        -:  723:                    const Token *tok2;
    #####:  724:                    if (Token::simpleMatch(tok, "do {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  725:                        if (!Token::simpleMatch(tok->linkAt(1), "} while ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  726:                            break;
    #####:  727:                        tok2 = tok->linkAt(1)->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  728:                    } else if (Token::Match(tok, "if|while (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  729:                        tok2 = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  730:                        if (Token::simpleMatch(tok2, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  731:                            tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  732:                        if (!tok2)
branch  0 never executed
branch  1 never executed
    #####:  733:                            break;
        -:  734:                    } else {
        -:  735:                        // Incomplete code
    #####:  736:                        break;
        -:  737:                    }
    #####:  738:                    bool changed = false;
    #####:  739:                    for (int varid : vars) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  740:                        if (isVariableChanged(tok1, tok2, varid, nonlocal, mSettings, mTokenizer->isCPP())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  741:                            changed = true;
    #####:  742:                            break;
        -:  743:                        }
        -:  744:                    }
    #####:  745:                    if (changed)
branch  0 never executed
branch  1 never executed
    #####:  746:                        break;
        -:  747:                }
    #####:  748:                if ((tok->varId() && vars.find(tok->varId()) != vars.end()) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####:  749:                    (!tok->varId() && nonlocal)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  750:                    if (Token::Match(tok, "%name% %assign%|++|--"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  751:                        break;
    #####:  752:                    if (Token::Match(tok->astParent(), "*|.|[")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  753:                        const Token *parent = tok;
    #####:  754:                        while (Token::Match(parent->astParent(), ".|[") || (parent->astParent() && parent->astParent()->isUnaryOp("*")))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
    #####:  755:                            parent = parent->astParent();
call    0 never executed
    #####:  756:                        if (Token::Match(parent->astParent(), "%assign%|++|--"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  757:                            break;
        -:  758:                    }
    #####:  759:                    if (mTokenizer->isCPP() && Token::Match(tok, "%name% <<") && (!tok->valueType() || !tok->valueType()->isIntegral()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:  760:                        break;
    #####:  761:                    if (isLikelyStreamRead(mTokenizer->isCPP(), tok->next()) || isLikelyStreamRead(mTokenizer->isCPP(), tok->previous()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  762:                        break;
    #####:  763:                    if (Token::Match(tok, "%name% [")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  764:                        const Token *tok2 = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  765:                        while (Token::simpleMatch(tok2, "] ["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  766:                            tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  767:                        if (Token::Match(tok2, "] %assign%|++|--"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  768:                            break;
        -:  769:                    }
    #####:  770:                    if (Token::Match(tok->previous(), "++|--|& %name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  771:                        break;
    #####:  772:                    if (tok->variable() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  773:                        !tok->variable()->isConst() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  774:                        Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  775:                        const Function* function = tok->tokAt(2)->function();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  776:                        if (!function || !function->isConst())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  777:                            break;
        -:  778:                    }
    #####:  779:                    if (Token::Match(tok->previous(), "[(,] %name% [,)]") && isParameterChanged(tok))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  780:                        break;
        -:  781:                }
        -:  782:            }
        -:  783:        }
        -:  784:    }
        -:  785:}
        -:  786:
function _ZL14innerSmtStringPK5Token called 0 returned 0% blocks executed 0%
    #####:  787:static std::string innerSmtString(const Token * tok)
        -:  788:{
    #####:  789:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  790:        return "if";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  791:    if (!tok->astTop())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  792:        return "if";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  793:    const Token * top = tok->astTop();
call    0 never executed
    #####:  794:    if (top->str() == "(" && top->astOperand1())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  795:        return top->astOperand1()->str();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  796:    return top->str();
call    0 never executed
call    1 never executed
        -:  797:}
        -:  798:
function _ZN14CheckCondition27oppositeInnerConditionErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####:  799:void CheckCondition::oppositeInnerConditionError(const Token *tok1, const Token* tok2, ErrorPath errorPath)
        -:  800:{
    #####:  801:    if (diag(tok1) & diag(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  802:        return;
    #####:  803:    const std::string s1(tok1 ? tok1->expressionString() : "x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  804:    const std::string s2(tok2 ? tok2->expressionString() : "!x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  805:    const std::string innerSmt = innerSmtString(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  806:    errorPath.emplace_back(ErrorPathItem(tok1, "outer condition: " + s1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  807:    errorPath.emplace_back(ErrorPathItem(tok2, "opposite inner condition: " + s2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  808:
    #####:  809:    const std::string msg("Opposite inner '" + innerSmt + "' condition leads to a dead code block.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  810:                          "Opposite inner '" + innerSmt + "' condition leads to a dead code block (outer condition is '" + s1 + "' and inner condition is '" + s2 + "').");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
    #####:  811:    reportError(errorPath, Severity::warning, "oppositeInnerCondition", msg, CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  812:}
        -:  813:
function _ZN14CheckCondition28identicalInnerConditionErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####:  814:void CheckCondition::identicalInnerConditionError(const Token *tok1, const Token* tok2, ErrorPath errorPath)
        -:  815:{
    #####:  816:    if (diag(tok1) & diag(tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  817:        return;
    #####:  818:    const std::string s1(tok1 ? tok1->expressionString() : "x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  819:    const std::string s2(tok2 ? tok2->expressionString() : "x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  820:    const std::string innerSmt = innerSmtString(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  821:    errorPath.emplace_back(ErrorPathItem(tok1, "outer condition: " + s1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  822:    errorPath.emplace_back(ErrorPathItem(tok2, "identical inner condition: " + s2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  823:
    #####:  824:    const std::string msg("Identical inner '" + innerSmt + "' condition is always true.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  825:                          "Identical inner '" + innerSmt + "' condition is always true (outer condition is '" + s1 + "' and inner condition is '" + s2 + "').");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
    #####:  826:    reportError(errorPath, Severity::warning, "identicalInnerCondition", msg, CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  827:}
        -:  828:
function _ZN14CheckCondition37identicalConditionAfterEarlyExitErrorEPK5TokenS2_NSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEE called 0 returned 0% blocks executed 0%
    #####:  829:void CheckCondition::identicalConditionAfterEarlyExitError(const Token *cond1, const Token* cond2, ErrorPath errorPath)
        -:  830:{
    #####:  831:    if (diag(cond1) & diag(cond2))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  832:        return;
    #####:  833:    const std::string cond(cond1 ? cond1->expressionString() : "x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  834:    errorPath.emplace_back(ErrorPathItem(cond1, "first condition"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  835:    errorPath.emplace_back(ErrorPathItem(cond2, "second condition"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  836:
    #####:  837:    reportError(errorPath, Severity::warning, "identicalConditionAfterEarlyExit", "Identical condition '" + cond + "', second condition is always false", CWE398, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  838:}
        -:  839:
        -:  840://---------------------------------------------------------------------------
        -:  841://    if ((x != 1) || (x != 3))            // expression always true
        -:  842://    if ((x == 1) && (x == 3))            // expression always false
        -:  843://    if ((x < 1)  && (x > 3))             // expression always false
        -:  844://    if ((x > 3)  || (x < 10))            // expression always true
        -:  845://    if ((x > 5)  && (x != 1))            // second comparison always true
        -:  846://
        -:  847://    Check for suspect logic for an expression consisting of 2 comparison
        -:  848://    expressions with a shared variable and constants and a logical operator
        -:  849://    between them.
        -:  850://
        -:  851://    Suggest a different logical operator when the logical operator between
        -:  852://    the comparisons is probably wrong.
        -:  853://
        -:  854://    Inform that second comparison is always true when first comparison is true.
        -:  855://---------------------------------------------------------------------------
        -:  856:
function _ZL28invertOperatorForOperandSwapNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  857:static std::string invertOperatorForOperandSwap(std::string s)
        -:  858:{
    #####:  859:    if (s[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  860:        s[0] = '>';
call    0 never executed
    #####:  861:    else if (s[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  862:        s[0] = '<';
call    0 never executed
    #####:  863:    return s;
call    0 never executed
        -:  864:}
        -:  865:
        -:  866:template <typename T>
function _Z16checkIntRelationIxEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_S8_ called 0 returned 0% blocks executed 0%
function _Z16checkIntRelationIyEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEET_S8_ called 0 returned 0% blocks executed 0%
    #####:  867:static bool checkIntRelation(const std::string &op, const T value1, const T value2)
        -:  868:{
    #####:  869:    return (op == "==" && value1 == value2) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  870:           (op == "!=" && value1 != value2) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  871:           (op == ">"  && value1 >  value2) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  872:           (op == ">=" && value1 >= value2) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  873:           (op == "<"  && value1 <  value2) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  874:           (op == "<=" && value1 <= value2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  875:}
        -:  876:
function _ZL18checkFloatRelationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdd called 0 returned 0% blocks executed 0%
    #####:  877:static bool checkFloatRelation(const std::string &op, const double value1, const double value2)
        -:  878:{
    #####:  879:    return (op == ">"  && value1 >  value2) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  880:           (op == ">=" && value1 >= value2) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  881:           (op == "<"  && value1 <  value2) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  882:           (op == "<=" && value1 <= value2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  883:}
        -:  884:
        -:  885:template<class T>
function _Z9getvalue3IxET_S0_S0_ called 0 returned 0% blocks executed 0%
function _Z9getvalue3IyET_S0_S0_ called 0 returned 0% blocks executed 0%
    #####:  886:T getvalue3(const T value1, const T value2)
        -:  887:{
    #####:  888:    const T min = std::min(value1, value2);
call    0 never executed
call    1 never executed
    #####:  889:    if (min== std::numeric_limits<T>::max())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  890:        return min;
        -:  891:    else
    #####:  892:        return min+1; // see #5895
        -:  893:}
        -:  894:
        -:  895:template<>
function _Z9getvalue3IdET_S0_S0_ called 0 returned 0% blocks executed 0%
    #####:  896:double getvalue3(const double value1, const double value2)
        -:  897:{
    #####:  898:    return (value1 + value2) / 2.0f;
        -:  899:}
        -:  900:
        -:  901:
        -:  902:template<class T>
function _Z8getvalueIxET_iS0_S0_ called 0 returned 0% blocks executed 0%
function _Z8getvalueIyET_iS0_S0_ called 0 returned 0% blocks executed 0%
function _Z8getvalueIdET_iS0_S0_ called 0 returned 0% blocks executed 0%
    #####:  903:static inline T getvalue(const int test, const T value1, const T value2)
        -:  904:{
        -:  905:    // test:
        -:  906:    // 1 => return value that is less than both value1 and value2
        -:  907:    // 2 => return value1
        -:  908:    // 3 => return value that is between value1 and value2
        -:  909:    // 4 => return value2
        -:  910:    // 5 => return value that is larger than both value1 and value2
    #####:  911:    switch (test) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  912:    case 1:
    #####:  913:        return std::numeric_limits<T>::lowest();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  914:    case 2:
    #####:  915:        return value1;
    #####:  916:    case 3:
    #####:  917:        return getvalue3<T>(value1, value2);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  918:    case 4:
    #####:  919:        return value2;
    #####:  920:    case 5:
    #####:  921:        return std::numeric_limits<T>::max();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  922:    };
    #####:  923:    return 0;
        -:  924:}
        -:  925:
function _ZL15parseComparisonPK5TokenPbPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_PS1_S2_ called 0 returned 0% blocks executed 0%
    #####:  926:static bool parseComparison(const Token *comp, bool *not1, std::string *op, std::string *value, const Token **expr, bool* inconclusive)
        -:  927:{
    #####:  928:    *not1 = false;
    #####:  929:    while (comp && comp->str() == "!") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  930:        *not1 = !(*not1);
    #####:  931:        comp = comp->astOperand1();
call    0 never executed
        -:  932:    }
        -:  933:
    #####:  934:    if (!comp)
branch  0 never executed
branch  1 never executed
    #####:  935:        return false;
        -:  936:
    #####:  937:    const Token* op1 = comp->astOperand1();
call    0 never executed
    #####:  938:    const Token* op2 = comp->astOperand2();
call    0 never executed
    #####:  939:    if (!comp->isComparisonOp() || !op1 || !op2) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  940:        *op = "!=";
call    0 never executed
    #####:  941:        *value = "0";
call    0 never executed
    #####:  942:        *expr = comp;
    #####:  943:    } else if (op1->isLiteral()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:        if (op1->isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  945:            return false;
    #####:  946:        *op = invertOperatorForOperandSwap(comp->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  947:        if (op1->enumerator() && op1->enumerator()->value_known)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  948:            *value = MathLib::toString(op1->enumerator()->value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  949:        else
    #####:  950:            *value = op1->str();
call    0 never executed
call    1 never executed
    #####:  951:        *expr = op2;
    #####:  952:    } else if (comp->astOperand2()->isLiteral()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  953:        if (op2->isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  954:            return false;
    #####:  955:        *op = comp->str();
call    0 never executed
call    1 never executed
    #####:  956:        if (op2->enumerator() && op2->enumerator()->value_known)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  957:            *value = MathLib::toString(op2->enumerator()->value);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  958:        else
    #####:  959:            *value = op2->str();
call    0 never executed
call    1 never executed
    #####:  960:        *expr = op1;
        -:  961:    } else {
    #####:  962:        *op = "!=";
call    0 never executed
    #####:  963:        *value = "0";
call    0 never executed
    #####:  964:        *expr = comp;
        -:  965:    }
        -:  966:
    #####:  967:    *inconclusive = *inconclusive || ((*value)[0] == '\'' && !(*op == "!=" || *op == "=="));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:  968:
        -:  969:    // Only float and int values are currently handled
    #####:  970:    if (!MathLib::isInt(*value) && !MathLib::isFloat(*value) && (*value)[0] != '\'')
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  971:        return false;
        -:  972:
    #####:  973:    return true;
        -:  974:}
        -:  975:
function _ZL15conditionStringbPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  976:static std::string conditionString(bool not1, const Token *expr1, const std::string &op, const std::string &value1)
        -:  977:{
    #####:  978:    if (expr1->astParent()->isComparisonOp())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  979:        return std::string(not1 ? "!(" : "") +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  980:               (expr1->isName() ? expr1->str() : std::string("EXPR")) +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
    #####:  981:               " " +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  982:               op +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  983:               " " +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  984:               value1 +
    #####:  985:               (not1 ? ")" : "");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  986:
    #####:  987:    return std::string(not1 ? "!" : "") +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  988:           (expr1->isName() ? expr1->str() : std::string("EXPR"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
        -:  989:}
        -:  990:
function _ZL15conditionStringPK5Token called 0 returned 0% blocks executed 0%
    #####:  991:static std::string conditionString(const Token * tok)
        -:  992:{
    #####:  993:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  994:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  995:    if (tok->isComparisonOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  996:        bool inconclusive = false;
        -:  997:        bool not_;
    #####:  998:        std::string op, value;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  999:        const Token *expr;
    #####: 1000:        if (parseComparison(tok, &not_, &op, &value, &expr, &inconclusive) && expr->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1001:            return conditionString(not_, expr, op, value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1002:        }
        -: 1003:    }
    #####: 1004:    if (Token::Match(tok, "%cop%|&&|%oror%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1005:        if (tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1006:            return conditionString(tok->astOperand1()) + " " + tok->str() + " " + conditionString(tok->astOperand2());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 1007:        return tok->str() + "(" + conditionString(tok->astOperand1()) + ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 1008:
        -: 1009:    }
    #####: 1010:    return tok->expressionString();
call    0 never executed
        -: 1011:}
        -: 1012:
function _ZN14CheckCondition27checkIncorrectLogicOperatorEv called 0 returned 0% blocks executed 0%
    #####: 1013:void CheckCondition::checkIncorrectLogicOperator()
        -: 1014:{
    #####: 1015:    const bool printStyle = mSettings->isEnabled(Settings::STYLE);
call    0 never executed
    #####: 1016:    const bool printWarning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####: 1017:    if (!printWarning && !printStyle)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1018:        return;
    #####: 1019:    const bool printInconclusive = mSettings->inconclusive;
        -: 1020:
    #####: 1021:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1022:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 1023:
    #####: 1024:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1025:            if (!Token::Match(tok, "%oror%|&&") || !tok->astOperand1() || !tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1026:                continue;
        -: 1027:
        -: 1028:
        -: 1029:            // 'A && (!A || B)' is equivalent to 'A && B'
        -: 1030:            // 'A || (!A && B)' is equivalent to 'A || B'
    #####: 1031:            if (printStyle &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1032:                ((tok->str() == "||" && tok->astOperand2()->str() == "&&") ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1033:                 (tok->str() == "&&" && tok->astOperand2()->str() == "||"))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1034:                const Token* tok2 = tok->astOperand2()->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1035:                if (isOppositeCond(true, mTokenizer->isCPP(), tok->astOperand1(), tok2, mSettings->library, true, false)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1036:                    std::string expr1(tok->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1037:                    std::string expr2(tok->astOperand2()->astOperand1()->expressionString());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 1038:                    std::string expr3(tok->astOperand2()->astOperand2()->expressionString());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -: 1039:                    // make copy for later because the original string might get overwritten
    #####: 1040:                    const std::string expr1VerboseMsg = expr1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1041:                    const std::string expr2VerboseMsg = expr2;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1042:                    const std::string expr3VerboseMsg = expr3;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1043:
    #####: 1044:                    if (expr1.length() + expr2.length() + expr3.length() > 50U) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1045:                        if (expr1[0] == '!' && expr2[0] != '!') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1046:                            expr1 = "!A";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1047:                            expr2 = "A";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1048:                        } else {
    #####: 1049:                            expr1 = "A";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:                            expr2 = "!A";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1051:                        }
        -: 1052:
    #####: 1053:                        expr3 = "B";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1054:                    }
        -: 1055:
    #####: 1056:                    const std::string cond1 = expr1 + " " + tok->str() + " (" + expr2 + " " + tok->astOperand2()->str() + " " + expr3 + ")";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
    #####: 1057:                    const std::string cond2 = expr1 + " " + tok->str() + " " + expr3;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -: 1058:
    #####: 1059:                    const std::string cond1VerboseMsg = expr1VerboseMsg + " " + tok->str() + " " + expr2VerboseMsg + " " + tok->astOperand2()->str() + " " + expr3VerboseMsg;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
    #####: 1060:                    const std::string cond2VerboseMsg = expr1VerboseMsg + " " + tok->str() + " " + expr3VerboseMsg;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -: 1061:                    // for the --verbose message, transform the actual condition and print it
    #####: 1062:                    const std::string msg = tok2->expressionString() + ". '" + cond1 + "' is equivalent to '" + cond2 + "'\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 1063:                                            "The condition '" + cond1VerboseMsg + "' is equivalent to '" + cond2VerboseMsg + "'.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####: 1064:                    redundantConditionError(tok, msg, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1065:                    continue;
        -: 1066:                }
        -: 1067:            }
        -: 1068:
        -: 1069:            // Comparison #1 (LHS)
    #####: 1070:            const Token *comp1 = tok->astOperand1();
call    0 never executed
    #####: 1071:            if (comp1 && comp1->str() == tok->str())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1072:                comp1 = comp1->astOperand2();
call    0 never executed
        -: 1073:
        -: 1074:            // Comparison #2 (RHS)
    #####: 1075:            const Token *comp2 = tok->astOperand2();
call    0 never executed
        -: 1076:
    #####: 1077:            bool inconclusive = false;
    #####: 1078:            bool parseable = true;
        -: 1079:
        -: 1080:            // Parse LHS
        -: 1081:            bool not1;
    #####: 1082:            std::string op1, value1;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 1083:            const Token *expr1 = nullptr;
    #####: 1084:            parseable &= (parseComparison(comp1, &not1, &op1, &value1, &expr1, &inconclusive));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1085:
        -: 1086:            // Parse RHS
        -: 1087:            bool not2;
    #####: 1088:            std::string op2, value2;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 1089:            const Token *expr2 = nullptr;
    #####: 1090:            parseable &= (parseComparison(comp2, &not2, &op2, &value2, &expr2, &inconclusive));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1091:
    #####: 1092:            if (inconclusive && !printInconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1093:                continue;
        -: 1094:
    #####: 1095:            const bool isfloat = astIsFloat(expr1, true) || MathLib::isFloat(value1) || astIsFloat(expr2, true) || MathLib::isFloat(value2);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -: 1096:
    #####: 1097:            ErrorPath errorPath;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1098:
        -: 1099:            // Opposite comparisons around || or && => always true or always false
    #####: 1100:            if (!isfloat && isOppositeCond(tok->str() == "||", mTokenizer->isCPP(), tok->astOperand1(), tok->astOperand2(), mSettings->library, true, true, &errorPath)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -: 1101:
    #####: 1102:                const bool alwaysTrue(tok->str() == "||");
call    0 never executed
call    1 never executed
    #####: 1103:                incorrectLogicOperatorError(tok, conditionString(tok), alwaysTrue, inconclusive, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1104:                continue;
        -: 1105:            }
        -: 1106:
    #####: 1107:            if (!parseable)
branch  0 never executed
branch  1 never executed
    #####: 1108:                continue;
        -: 1109:
    #####: 1110:            if (isSameExpression(mTokenizer->isCPP(), true, comp1, comp2, mSettings->library, true, true))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1111:                continue; // same expressions => only report that there are same expressions
    #####: 1112:            if (!isSameExpression(mTokenizer->isCPP(), true, expr1, expr2, mSettings->library, true, true))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1113:                continue;
        -: 1114:
        -: 1115:
        -: 1116:            // don't check floating point equality comparisons. that is bad
        -: 1117:            // and deserves different warnings.
    #####: 1118:            if (isfloat && (op1 == "==" || op1 == "!=" || op2 == "==" || op2 == "!="))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1119:                continue;
        -: 1120:
        -: 1121:
    #####: 1122:            const double d1 = (isfloat) ? MathLib::toDoubleNumber(value1) : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1123:            const double d2 = (isfloat) ? MathLib::toDoubleNumber(value2) : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1124:            const MathLib::bigint i1 = (isfloat) ? 0 : MathLib::toLongNumber(value1);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1125:            const MathLib::bigint i2 = (isfloat) ? 0 : MathLib::toLongNumber(value2);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1126:            const bool useUnsignedInt = (std::numeric_limits<MathLib::bigint>::max()==i1)||(std::numeric_limits<MathLib::bigint>::max()==i2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1127:            const MathLib::biguint u1 = (useUnsignedInt) ? MathLib::toLongNumber(value1) : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1128:            const MathLib::biguint u2 = (useUnsignedInt) ? MathLib::toLongNumber(value2) : 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1129:            // evaluate if expression is always true/false
    #####: 1130:            bool alwaysTrue = true, alwaysFalse = true;
    #####: 1131:            bool firstTrue = true, secondTrue = true;
    #####: 1132:            for (int test = 1; test <= 5; ++test) {
branch  0 never executed
branch  1 never executed
        -: 1133:                // test:
        -: 1134:                // 1 => testvalue is less than both value1 and value2
        -: 1135:                // 2 => testvalue is value1
        -: 1136:                // 3 => testvalue is between value1 and value2
        -: 1137:                // 4 => testvalue value2
        -: 1138:                // 5 => testvalue is larger than both value1 and value2
        -: 1139:                bool result1, result2;
    #####: 1140:                if (isfloat) {
branch  0 never executed
branch  1 never executed
    #####: 1141:                    const double testvalue = getvalue<double>(test, d1, d2);
call    0 never executed
    #####: 1142:                    result1 = checkFloatRelation(op1, testvalue, d1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1143:                    result2 = checkFloatRelation(op2, testvalue, d2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1144:                } else if (useUnsignedInt) {
branch  0 never executed
branch  1 never executed
    #####: 1145:                    const MathLib::biguint testvalue = getvalue<MathLib::biguint>(test, u1, u2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1146:                    result1 = checkIntRelation(op1, testvalue, u1);
call    0 never executed
    #####: 1147:                    result2 = checkIntRelation(op2, testvalue, u2);
call    0 never executed
        -: 1148:                } else {
    #####: 1149:                    const MathLib::bigint testvalue = getvalue<MathLib::bigint>(test, i1, i2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1150:                    result1 = checkIntRelation(op1, testvalue, i1);
call    0 never executed
    #####: 1151:                    result2 = checkIntRelation(op2, testvalue, i2);
call    0 never executed
        -: 1152:                }
    #####: 1153:                if (not1)
branch  0 never executed
branch  1 never executed
    #####: 1154:                    result1 = !result1;
    #####: 1155:                if (not2)
branch  0 never executed
branch  1 never executed
    #####: 1156:                    result2 = !result2;
    #####: 1157:                if (tok->str() == "&&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1158:                    alwaysTrue &= (result1 && result2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1159:                    alwaysFalse &= !(result1 && result2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1160:                } else {
    #####: 1161:                    alwaysTrue &= (result1 || result2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1162:                    alwaysFalse &= !(result1 || result2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1163:                }
    #####: 1164:                firstTrue &= !(!result1 && result2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1165:                secondTrue &= !(result1 && !result2);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:            }
        -: 1167:
    #####: 1168:            const std::string cond1str = conditionString(not1, expr1, op1, value1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1169:            const std::string cond2str = conditionString(not2, expr2, op2, value2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1170:            if (printWarning && (alwaysTrue || alwaysFalse)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1171:                const std::string text = cond1str + " " + tok->str() + " " + cond2str;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####: 1172:                incorrectLogicOperatorError(tok, text, alwaysTrue, inconclusive, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1173:            } else if (printStyle && secondTrue) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1174:                const std::string text = "If '" + cond1str + "', the comparison '" + cond2str +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1175:                                         "' is always true.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1176:                redundantConditionError(tok, text, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1177:            } else if (printStyle && firstTrue) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1178:                //const std::string text = "The comparison " + cond1str + " is always " +
        -: 1179:                //                         (firstTrue ? "true" : "false") + " when " +
        -: 1180:                //                         cond2str + ".";
    #####: 1181:                const std::string text = "If '" + cond2str + "', the comparison '" + cond1str +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1182:                                         "' is always true.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1183:                redundantConditionError(tok, text, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1184:            }
        -: 1185:        }
        -: 1186:    }
        -: 1187:}
        -: 1188:
function _ZN14CheckCondition27incorrectLogicOperatorErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbNSt7__debug4listISt4pairIS2_S8_ESaISE_EEE called 0 returned 0% blocks executed 0%
    #####: 1189:void CheckCondition::incorrectLogicOperatorError(const Token *tok, const std::string &condition, bool always, bool inconclusive, ErrorPath errors)
        -: 1190:{
    #####: 1191:    errors.emplace_back(tok, "");
call    0 never executed
    #####: 1192:    if (always)
branch  0 never executed
branch  1 never executed
    #####: 1193:        reportError(errors, Severity::warning, "incorrectLogicOperator",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1194:                    "Logical disjunction always evaluates to true: " + condition + ".\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1195:                    "Logical disjunction always evaluates to true: " + condition + ". "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1196:                    "Are these conditions necessary? Did you intend to use && instead? Are the numbers correct? Are you comparing the correct variables?", CWE571, inconclusive);
        -: 1197:    else
    #####: 1198:        reportError(errors, Severity::warning, "incorrectLogicOperator",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1199:                    "Logical conjunction always evaluates to false: " + condition + ".\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1200:                    "Logical conjunction always evaluates to false: " + condition + ". "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 1201:                    "Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?", CWE570, inconclusive);
    #####: 1202:}
        -: 1203:
function _ZN14CheckCondition23redundantConditionErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 1204:void CheckCondition::redundantConditionError(const Token *tok, const std::string &text, bool inconclusive)
        -: 1205:{
    #####: 1206:    reportError(tok, Severity::style, "redundantCondition", "Redundant condition: " + text, CWE398, inconclusive);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1207:}
        -: 1208:
        -: 1209://-----------------------------------------------------------------------------
        -: 1210:// Detect "(var % val1) > val2" where val2 is >= val1.
        -: 1211://-----------------------------------------------------------------------------
function _ZN14CheckCondition26checkModuloAlwaysTrueFalseEv called 0 returned 0% blocks executed 0%
    #####: 1212:void CheckCondition::checkModuloAlwaysTrueFalse()
        -: 1213:{
    #####: 1214:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1215:        return;
        -: 1216:
    #####: 1217:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1218:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1219:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1220:            if (!tok->isComparisonOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1221:                continue;
        -: 1222:            const Token *num, *modulo;
    #####: 1223:            if (Token::simpleMatch(tok->astOperand1(), "%") && Token::Match(tok->astOperand2(), "%num%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1224:                modulo = tok->astOperand1();
call    0 never executed
    #####: 1225:                num = tok->astOperand2();
call    0 never executed
    #####: 1226:            } else if (Token::Match(tok->astOperand1(), "%num%") && Token::simpleMatch(tok->astOperand2(), "%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1227:                num = tok->astOperand1();
call    0 never executed
    #####: 1228:                modulo = tok->astOperand2();
call    0 never executed
        -: 1229:            } else {
    #####: 1230:                continue;
        -: 1231:            }
        -: 1232:
    #####: 1233:            if (Token::Match(modulo->astOperand2(), "%num%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1234:                MathLib::isLessEqual(modulo->astOperand2()->str(), num->str()))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1235:                moduloAlwaysTrueFalseError(tok, modulo->astOperand2()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1236:        }
        -: 1237:    }
        -: 1238:}
        -: 1239:
function _ZN14CheckCondition26moduloAlwaysTrueFalseErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1240:void CheckCondition::moduloAlwaysTrueFalseError(const Token* tok, const std::string& maxVal)
        -: 1241:{
    #####: 1242:    reportError(tok, Severity::warning, "moduloAlwaysTrueFalse",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1243:                "Comparison of modulo result is predetermined, because it is always less than " + maxVal + ".", CWE398, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1244:}
        -: 1245:
function _ZL8countParPK5TokenS1_ called 0 returned 0% blocks executed 0%
    #####: 1246:static int countPar(const Token *tok1, const Token *tok2)
        -: 1247:{
    #####: 1248:    int par = 0;
    #####: 1249:    for (const Token *tok = tok1; tok && tok != tok2; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1250:        if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1251:            ++par;
    #####: 1252:        else if (tok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1253:            --par;
    #####: 1254:        else if (tok->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1255:            return -1;
        -: 1256:    }
    #####: 1257:    return par;
        -: 1258:}
        -: 1259:
        -: 1260://---------------------------------------------------------------------------
        -: 1261:// Clarify condition '(x = a < 0)' into '((x = a) < 0)' or '(x = (a < 0))'
        -: 1262:// Clarify condition '(a & b == c)' into '((a & b) == c)' or '(a & (b == c))'
        -: 1263://---------------------------------------------------------------------------
function _ZN14CheckCondition16clarifyConditionEv called 0 returned 0% blocks executed 0%
    #####: 1264:void CheckCondition::clarifyCondition()
        -: 1265:{
    #####: 1266:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1267:        return;
        -: 1268:
    #####: 1269:    const bool isC = mTokenizer->isC();
call    0 never executed
        -: 1270:
    #####: 1271:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1272:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1273:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1274:            if (Token::Match(tok, "( %name% [=&|^]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1275:                for (const Token *tok2 = tok->tokAt(3); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 1276:                    if (tok2->str() == "(" || tok2->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1277:                        tok2 = tok2->link();
call    0 never executed
    #####: 1278:                    else if (tok2->isComparisonOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1279:                        // This might be a template
    #####: 1280:                        if (!isC && tok2->link())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1281:                            break;
    #####: 1282:                        if (Token::simpleMatch(tok2->astParent(), "?"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1283:                            break;
    #####: 1284:                        clarifyConditionError(tok, tok->strAt(2) == "=", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1285:                        break;
    #####: 1286:                    } else if (!tok2->isName() && !tok2->isNumber() && tok2->str() != ".")
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1287:                        break;
        -: 1288:                }
    #####: 1289:            } else if (tok->tokType() == Token::eBitOp && !tok->isUnaryOp("&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####: 1290:                if (tok->astOperand2() && tok->astOperand2()->variable() && tok->astOperand2()->variable()->nameToken() == tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1291:                    continue;
        -: 1292:
        -: 1293:                // using boolean result in bitwise operation ! x [&|^]
    #####: 1294:                const ValueType* vt1 = tok->astOperand1() ? tok->astOperand1()->valueType() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1295:                const ValueType* vt2 = tok->astOperand2() ? tok->astOperand2()->valueType() : nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1296:                if (vt1 && vt1->type == ValueType::BOOL && !Token::Match(tok->astOperand1(), "%name%|(|[|::|.") && countPar(tok->astOperand1(), tok) == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1297:                    clarifyConditionError(tok, false, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1298:                else if (vt2 && vt2->type == ValueType::BOOL && !Token::Match(tok->astOperand2(), "%name%|(|[|::|.") && countPar(tok, tok->astOperand2()) == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 1299:                    clarifyConditionError(tok, false, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:            }
        -: 1301:        }
        -: 1302:    }
        -: 1303:}
        -: 1304:
function _ZN14CheckCondition21clarifyConditionErrorEPK5Tokenbb called 0 returned 0% blocks executed 0%
    #####: 1305:void CheckCondition::clarifyConditionError(const Token *tok, bool assign, bool boolop)
        -: 1306:{
    #####: 1307:    std::string errmsg;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1308:
    #####: 1309:    if (assign)
branch  0 never executed
branch  1 never executed
    #####: 1310:        errmsg = "Suspicious condition (assignment + comparison); Clarify expression with parentheses.";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1311:
    #####: 1312:    else if (boolop)
branch  0 never executed
branch  1 never executed
    #####: 1313:        errmsg = "Boolean result is used in bitwise operation. Clarify expression with parentheses.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1314:                 "Suspicious expression. Boolean result is used in bitwise operation. The operator '!' "
        -: 1315:                 "and the comparison operators have higher precedence than bitwise operators. "
        -: 1316:                 "It is recommended that the expression is clarified with parentheses.";
        -: 1317:    else
    #####: 1318:        errmsg = "Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1319:                 "Suspicious condition. Comparison operators have higher precedence than bitwise operators. "
        -: 1320:                 "Please clarify the condition with parentheses.";
        -: 1321:
    #####: 1322:    reportError(tok,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1323:                Severity::style,
        -: 1324:                "clarifyCondition",
        -: 1325:                errmsg, CWE398, false);
    #####: 1326:}
        -: 1327:
function _ZN14CheckCondition15alwaysTrueFalseEv called 0 returned 0% blocks executed 0%
    #####: 1328:void CheckCondition::alwaysTrueFalse()
        -: 1329:{
    #####: 1330:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1331:        return;
        -: 1332:
    #####: 1333:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1334:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1335:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1336:
    #####: 1337:            if (tok->link()) // don't write false positives when templates are used
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1338:                continue;
    #####: 1339:            if (!tok->hasKnownIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1340:                continue;
        -: 1341:            // Skip already diagnosed values
    #####: 1342:            if (diag(tok, false))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1343:                continue;
    #####: 1344:            if (Token::Match(tok, "%num%|%bool%|%char%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1345:                continue;
    #####: 1346:            if (Token::Match(tok, "! %num%|%bool%|%char%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1347:                continue;
    #####: 1348:            if (Token::Match(tok, "%oror%|&&|:"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1349:                continue;
    #####: 1350:            if (Token::Match(tok, "%comp%") && isSameExpression(mTokenizer->isCPP(), true, tok->astOperand1(), tok->astOperand2(), mSettings->library, true, true))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1351:                continue;
        -: 1352:
        -: 1353:            const bool constIfWhileExpression =
    #####: 1354:                tok->astParent() && Token::Match(tok->astTop()->astOperand1(), "if|while") && !tok->astTop()->astOperand1()->isConstexpr() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1355:                (Token::Match(tok->astParent(), "%oror%|&&") || Token::Match(tok->astParent()->astOperand1(), "if|while"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1356:            const bool constValExpr = tok->isNumber() && Token::Match(tok->astParent(),"%oror%|&&|?"); // just one number in boolean expression
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1357:            const bool compExpr = Token::Match(tok, "%comp%|!"); // a compare expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1358:            const bool returnStatement = Token::simpleMatch(tok->astTop(), "return") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1359:                                         Token::Match(tok->astParent(), "%oror%|&&|return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:
    #####: 1361:            if (!(constIfWhileExpression || constValExpr || compExpr || returnStatement))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1362:                continue;
        -: 1363:
    #####: 1364:            if (returnStatement && (!scope->function || !Token::simpleMatch(scope->function->retDef, "bool")))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1365:                continue;
        -: 1366:
    #####: 1367:            if (returnStatement && isConstVarExpression(tok))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1368:                continue;
        -: 1369:
    #####: 1370:            if (returnStatement && Token::simpleMatch(tok->astParent(), "return") && tok->variable() && (
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1371:                    !tok->variable()->isLocal() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1372:                    tok->variable()->isReference() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1373:                    tok->variable()->isConst() ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1374:                    !isVariableChanged(tok->variable(), mSettings, mTokenizer->isCPP())))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1375:                continue;
        -: 1376:
        -: 1377:            // Don't warn in assertions. Condition is often 'always true' by intention.
        -: 1378:            // If platform,defines,etc cause 'always false' then that is not dangerous neither.
    #####: 1379:            bool assertFound = false;
    #####: 1380:            for (const Token * tok2 = tok->astParent(); tok2 ; tok2 = tok2->astParent()) { // move backwards and try to find "assert"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1381:                if (tok2->str() == "(" && tok2->astOperand2()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1382:                    const std::string& str = tok2->previous()->str();
call    0 never executed
call    1 never executed
    #####: 1383:                    if ((str.find("assert")!=std::string::npos || str.find("ASSERT")!=std::string::npos))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1384:                        assertFound = true;
    #####: 1385:                    break;
        -: 1386:                }
        -: 1387:            }
    #####: 1388:            if (assertFound)
branch  0 never executed
branch  1 never executed
    #####: 1389:                continue;
        -: 1390:
        -: 1391:            // Don't warn when there are expanded macros..
    #####: 1392:            bool isExpandedMacro = false;
    #####: 1393:            std::stack<const Token*> tokens;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1394:            tokens.push(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1395:            while (!tokens.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1396:                const Token *tok2 = tokens.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1397:                tokens.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1398:                if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1399:                    continue;
    #####: 1400:                tokens.push(tok2->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1401:                tokens.push(tok2->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1402:                if (tok2->isExpandedMacro()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1403:                    isExpandedMacro = true;
    #####: 1404:                    break;
        -: 1405:                }
        -: 1406:            }
    #####: 1407:            if (isExpandedMacro)
branch  0 never executed
branch  1 never executed
    #####: 1408:                continue;
    #####: 1409:            for (const Token *parent = tok; parent; parent = parent->astParent()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1410:                if (parent->isExpandedMacro()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1411:                    isExpandedMacro = true;
    #####: 1412:                    break;
        -: 1413:                }
        -: 1414:            }
    #####: 1415:            if (isExpandedMacro)
branch  0 never executed
branch  1 never executed
    #####: 1416:                continue;
        -: 1417:
        -: 1418:            // don't warn when condition checks sizeof result
    #####: 1419:            bool hasSizeof = false;
    #####: 1420:            tokens.push(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1421:            while (!tokens.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1422:                const Token *tok2 = tokens.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1423:                tokens.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1424:                if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1425:                    continue;
    #####: 1426:                if (tok2->isNumber())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1427:                    continue;
    #####: 1428:                if (Token::simpleMatch(tok2->previous(), "sizeof (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1429:                    hasSizeof = true;
    #####: 1430:                    continue;
        -: 1431:                }
    #####: 1432:                if (tok2->isComparisonOp() || tok2->isArithmeticalOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1433:                    tokens.push(tok2->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1434:                    tokens.push(tok2->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1435:                } else
    #####: 1436:                    break;
        -: 1437:            }
    #####: 1438:            if (tokens.empty() && hasSizeof)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1439:                continue;
        -: 1440:
    #####: 1441:            alwaysTrueFalseError(tok, &tok->values().front());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1442:        }
        -: 1443:    }
        -: 1444:}
        -: 1445:
function _ZN14CheckCondition20alwaysTrueFalseErrorEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 1446:void CheckCondition::alwaysTrueFalseError(const Token *tok, const ValueFlow::Value *value)
        -: 1447:{
    #####: 1448:    const bool condvalue = value && (value->intvalue != 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1449:    const std::string expr = tok ? tok->expressionString() : std::string("x");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1450:    const std::string errmsg = "Condition '" + expr + "' is always " + (condvalue ? "true" : "false");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1451:    const ErrorPath errorPath = getErrorPath(tok, value, errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1452:    reportError(errorPath,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1453:                Severity::style,
        -: 1454:                "knownConditionTrueFalse",
        -: 1455:                errmsg,
        -: 1456:                (condvalue ? CWE571 : CWE570), false);
    #####: 1457:}
        -: 1458:
function _ZN14CheckCondition27checkInvalidTestForOverflowEv called 0 returned 0% blocks executed 0%
    #####: 1459:void CheckCondition::checkInvalidTestForOverflow()
        -: 1460:{
    #####: 1461:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1462:        return;
        -: 1463:
    #####: 1464:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1465:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1466:
    #####: 1467:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1468:            if (!tok->isComparisonOp() || !tok->astOperand1() || !tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1469:                continue;
        -: 1470:
        -: 1471:            const Token *calcToken, *exprToken;
        -: 1472:            bool result;
    #####: 1473:            if (Token::Match(tok, "<|>=") && tok->astOperand1()->str() == "+") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1474:                calcToken = tok->astOperand1();
call    0 never executed
    #####: 1475:                exprToken = tok->astOperand2();
call    0 never executed
    #####: 1476:                result = (tok->str() == ">=");
call    0 never executed
call    1 never executed
    #####: 1477:            } else if (Token::Match(tok, ">|<=") && tok->astOperand2()->str() == "+") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1478:                calcToken = tok->astOperand2();
call    0 never executed
    #####: 1479:                exprToken = tok->astOperand1();
call    0 never executed
    #####: 1480:                result = (tok->str() == "<=");
call    0 never executed
call    1 never executed
        -: 1481:            } else
    #####: 1482:                continue;
        -: 1483:
        -: 1484:            // Only warn for signed integer overflows and pointer overflows.
    #####: 1485:            if (!(calcToken->valueType() && (calcToken->valueType()->pointer || calcToken->valueType()->sign == ValueType::Sign::SIGNED)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1486:                continue;
    #####: 1487:            if (!(exprToken->valueType() && (exprToken->valueType()->pointer || exprToken->valueType()->sign == ValueType::Sign::SIGNED)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1488:                continue;
        -: 1489:
        -: 1490:            const Token *termToken;
    #####: 1491:            if (isSameExpression(mTokenizer->isCPP(), true, exprToken, calcToken->astOperand1(), mSettings->library, true, false))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1492:                termToken = calcToken->astOperand2();
call    0 never executed
    #####: 1493:            else if (isSameExpression(mTokenizer->isCPP(), true, exprToken, calcToken->astOperand2(), mSettings->library, true, false))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1494:                termToken = calcToken->astOperand1();
call    0 never executed
        -: 1495:            else
    #####: 1496:                continue;
        -: 1497:
    #####: 1498:            if (!termToken)
branch  0 never executed
branch  1 never executed
    #####: 1499:                continue;
        -: 1500:
        -: 1501:            // Only warn when termToken is always positive
    #####: 1502:            if (termToken->valueType() && termToken->valueType()->sign == ValueType::Sign::UNSIGNED)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1503:                invalidTestForOverflow(tok, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1504:            else if (termToken->isNumber() && MathLib::isPositive(termToken->str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1505:                invalidTestForOverflow(tok, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1506:        }
        -: 1507:    }
        -: 1508:}
        -: 1509:
function _ZN14CheckCondition22invalidTestForOverflowEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####: 1510:void CheckCondition::invalidTestForOverflow(const Token* tok, bool result)
        -: 1511:{
    #####: 1512:    const std::string errmsg = "Invalid test for overflow '" +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1513:                               (tok ? tok->expressionString() : std::string("x + u < x")) +
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
    #####: 1514:                               "'. Condition is always " +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1515:                               std::string(result ? "true" : "false") +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1516:                               " unless there is overflow, and overflow is undefined behaviour.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1517:    reportError(tok, Severity::warning, "invalidTestForOverflow", errmsg, (result ? CWE571 : CWE570), false);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 1518:}
call    0 never executed
        -: 1519:
        -: 1520:
function _ZN14CheckCondition33checkPointerAdditionResultNotNullEv called 0 returned 0% blocks executed 0%
    #####: 1521:void CheckCondition::checkPointerAdditionResultNotNull()
        -: 1522:{
    #####: 1523:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1524:        return;
        -: 1525:
    #####: 1526:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1527:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1528:
    #####: 1529:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1530:            if (!tok->isComparisonOp() || !tok->astOperand1() || !tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1531:                continue;
        -: 1532:
        -: 1533:            // Macros might have pointless safety checks
    #####: 1534:            if (tok->isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1535:                continue;
        -: 1536:
        -: 1537:            const Token *calcToken, *exprToken;
    #####: 1538:            if (tok->astOperand1()->str() == "+") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1539:                calcToken = tok->astOperand1();
call    0 never executed
    #####: 1540:                exprToken = tok->astOperand2();
call    0 never executed
    #####: 1541:            } else if (tok->astOperand2()->str() == "+") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1542:                calcToken = tok->astOperand2();
call    0 never executed
    #####: 1543:                exprToken = tok->astOperand1();
call    0 never executed
        -: 1544:            } else
    #####: 1545:                continue;
        -: 1546:
        -: 1547:            // pointer comparison against NULL (ptr+12==0)
    #####: 1548:            if (calcToken->hasKnownIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1549:                continue;
    #####: 1550:            if (!calcToken->valueType() || calcToken->valueType()->pointer==0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1551:                continue;
    #####: 1552:            if (!exprToken->hasKnownIntValue() || !exprToken->getValue(0))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1553:                continue;
        -: 1554:
    #####: 1555:            pointerAdditionResultNotNullError(tok, calcToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1556:        }
        -: 1557:    }
        -: 1558:}
        -: 1559:
function _ZN14CheckCondition33pointerAdditionResultNotNullErrorEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####: 1560:void CheckCondition::pointerAdditionResultNotNullError(const Token *tok, const Token *calc)
        -: 1561:{
    #####: 1562:    const std::string s = calc ? calc->expressionString() : "ptr+1";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####: 1563:    reportError(tok, Severity::warning, "pointerAdditionResultNotNull", "Comparison is wrong. Result of '" + s + "' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1564:}
        -: 1565:
function _ZN14CheckCondition31checkDuplicateConditionalAssignEv called 0 returned 0% blocks executed 0%
    #####: 1566:void CheckCondition::checkDuplicateConditionalAssign()
        -: 1567:{
    #####: 1568:    if (!mSettings->isEnabled(Settings::STYLE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1569:        return;
        -: 1570:
    #####: 1571:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####: 1572:    for (const Scope *scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1573:        for (const Token *tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1574:            if (!Token::simpleMatch(tok, "if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1575:                continue;
    #####: 1576:            if (!Token::simpleMatch(tok->next()->link(), ") {"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1577:                continue;
    #####: 1578:            const Token *blockTok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1579:            const Token *condTok = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 1580:            if (!Token::Match(condTok, "==|!="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1581:                continue;
    #####: 1582:            if (condTok->str() == "!=" && Token::simpleMatch(blockTok->link(), "} else {"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1583:                continue;
    #####: 1584:            if (!blockTok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1585:                continue;
    #####: 1586:            const Token *assignTok = blockTok->next()->astTop();
call    0 never executed
call    1 never executed
    #####: 1587:            if (!Token::simpleMatch(assignTok, "="))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1588:                continue;
    #####: 1589:            if (nextAfterAstRightmostLeaf(assignTok) != blockTok->link()->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1590:                continue;
    #####: 1591:            if (!isSameExpression(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1592:                    mTokenizer->isCPP(), true, condTok->astOperand1(), assignTok->astOperand1(), mSettings->library, true, true))
call    0 never executed
    #####: 1593:                continue;
    #####: 1594:            if (!isSameExpression(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1595:                    mTokenizer->isCPP(), true, condTok->astOperand2(), assignTok->astOperand2(), mSettings->library, true, true))
call    0 never executed
    #####: 1596:                continue;
    #####: 1597:            duplicateConditionalAssignError(condTok, assignTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1598:        }
        -: 1599:    }
        -: 1600:}
        -: 1601:
function _ZN14CheckCondition31duplicateConditionalAssignErrorEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####: 1602:void CheckCondition::duplicateConditionalAssignError(const Token *condTok, const Token* assignTok)
        -: 1603:{
    #####: 1604:    ErrorPath errors;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1605:    std::string msg = "Duplicate expression for the condition and assignment.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1606:    if (condTok && assignTok) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1607:        if (condTok->str() == "==") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1608:            msg = "Assignment '" + assignTok->expressionString() + "' is redundant with condition '" + condTok->expressionString() + "'.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 1609:            errors.emplace_back(condTok, "Condition '" + condTok->expressionString() + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1610:            errors.emplace_back(assignTok, "Assignment '" + assignTok->expressionString() + "' is redundant");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 1611:        } else {
    #####: 1612:            msg = "The statement 'if (" + condTok->expressionString() + ") " + assignTok->expressionString() + "' is logically equivalent to '" + assignTok->expressionString() + "'.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
    #####: 1613:            errors.emplace_back(assignTok, "Assignment '" + assignTok->expressionString() + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1614:            errors.emplace_back(condTok, "Condition '" + condTok->expressionString() + "' is redundant");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 1615:        }
        -: 1616:    }
        -: 1617:
    #####: 1618:    reportError(
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1619:        errors, Severity::style, "duplicateConditionalAssign", msg, CWE398, false);
function _GLOBAL__sub_I__ZN14CheckCondition4diagEPK5Tokenb called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 1620:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
