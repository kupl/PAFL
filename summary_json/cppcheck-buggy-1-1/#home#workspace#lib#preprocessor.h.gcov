        -:    0:Source:/home/workspace/lib/preprocessor.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/preprocessor.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/preprocessor.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2018 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#ifndef preprocessorH
        -:   21:#define preprocessorH
        -:   22://---------------------------------------------------------------------------
        -:   23:
        -:   24:#include "config.h"
        -:   25:
        -:   26:#include <simplecpp.h>
        -:   27:#include <istream>
        -:   28:#include <list>
        -:   29:#include <map>
        -:   30:#include <set>
        -:   31:#include <string>
        -:   32:#include <vector>
        -:   33:
        -:   34:class ErrorLogger;
        -:   35:class Settings;
        -:   36:
        -:   37:/**
        -:   38: * @brief A preprocessor directive
        -:   39: * Each preprocessor directive (\#include, \#define, \#undef, \#if, \#ifdef, \#else, \#endif)
        -:   40: * will be recorded as an instance of this class.
        -:   41: *
        -:   42: * file and linenr denote the location where where the directive is defined.
        -:   43: *
        -:   44: */
        -:   45:
function _ZN9DirectiveC2ERKS_ called 0 returned 0% blocks executed 0%
function _ZN9DirectiveD2Ev called 0 returned 0% blocks executed 0%
    #####:   46:class CPPCHECKLIB Directive {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   47:public:
        -:   48:    /** name of (possibly included) file where directive is defined */
        -:   49:    std::string file;
        -:   50:
        -:   51:    /** line number in (possibly included) file where directive is defined */
        -:   52:    unsigned int linenr;
        -:   53:
        -:   54:    /** the actual directive text */
        -:   55:    std::string str;
        -:   56:
        -:   57:    /** record a directive (possibly filtering src) */
        -:   58:    Directive(const std::string &_file, const int _linenr, const std::string &_str);
        -:   59:};
        -:   60:
        -:   61:/// @addtogroup Core
        -:   62:/// @{
        -:   63:
        -:   64:/**
        -:   65: * @brief The cppcheck preprocessor.
        -:   66: * The preprocessor has special functionality for extracting the various ifdef
        -:   67: * configurations that exist in a source file.
        -:   68: */
        -:   69:class CPPCHECKLIB Preprocessor {
        -:   70:public:
        -:   71:
        -:   72:    /**
        -:   73:     * Include file types.
        -:   74:     */
        -:   75:    enum HeaderTypes {
        -:   76:        NoHeader = 0,
        -:   77:        UserHeader,
        -:   78:        SystemHeader
        -:   79:    };
        -:   80:
        -:   81:    /** character that is inserted in expanded macros */
        -:   82:    static char macroChar;
        -:   83:
        -:   84:    explicit Preprocessor(Settings& settings, ErrorLogger *errorLogger = nullptr);
        -:   85:    virtual ~Preprocessor();
        -:   86:
        -:   87:    static bool missingIncludeFlag;
        -:   88:    static bool missingSystemIncludeFlag;
        -:   89:
        -:   90:    void inlineSuppressions(const simplecpp::TokenList &tokens);
        -:   91:
        -:   92:    void setDirectives(const simplecpp::TokenList &tokens);
        -:   93:
        -:   94:    /** list of all directives met while preprocessing file */
        -:   95:    const std::list<Directive> &getDirectives() const {
        -:   96:        return mDirectives;
        -:   97:    }
        -:   98:
        -:   99:    std::set<std::string> getConfigs(const simplecpp::TokenList &tokens) const;
        -:  100:
        -:  101:    void loadFiles(const simplecpp::TokenList &rawtokens, std::vector<std::string> &files);
        -:  102:
        -:  103:    void removeComments();
        -:  104:
        -:  105:    void setPlatformInfo(simplecpp::TokenList *tokens) const;
        -:  106:
        -:  107:    /**
        -:  108:     * Extract the code for each configuration
        -:  109:     * @param istr The (file/string) stream to read from.
        -:  110:     * @param result The map that will get the results
        -:  111:     * @param filename The name of the file to check e.g. "src/main.cpp"
        -:  112:     * @param includePaths List of paths where include files should be searched from,
        -:  113:     * single path can be e.g. in format "include/".
        -:  114:     * There must be a path separator at the end. Default parameter is empty list.
        -:  115:     * Note that if path from given filename is also extracted and that is used as
        -:  116:     * a last include path if include file was not found from earlier paths.
        -:  117:     */
        -:  118:    void preprocess(std::istream &istr, std::map<std::string, std::string> &result, const std::string &filename, const std::list<std::string> &includePaths = std::list<std::string>());
        -:  119:
        -:  120:    /**
        -:  121:     * Extract the code for each configuration. Use this with getcode() to get the
        -:  122:     * file data for each individual configuration.
        -:  123:     *
        -:  124:     * @param srcCodeStream The (file/string) stream to read from.
        -:  125:     * @param processedFile Give reference to empty string as a parameter,
        -:  126:     * function will fill processed file here. Use this also as a filedata parameter
        -:  127:     * to getcode() if you received more than once configurations.
        -:  128:     * @param resultConfigurations List of configurations. Pass these one by one
        -:  129:     * to getcode() with processedFile.
        -:  130:     * @param filename The name of the file to check e.g. "src/main.cpp"
        -:  131:     * @param includePaths List of paths where include files should be searched from,
        -:  132:     * single path can be e.g. in format "include/".
        -:  133:     * There must be a path separator at the end. Default parameter is empty list.
        -:  134:     * Note that if path from given filename is also extracted and that is used as
        -:  135:     * a last include path if include file was not found from earlier paths.
        -:  136:     */
        -:  137:    void preprocess(std::istream &srcCodeStream, std::string &processedFile, std::list<std::string> &resultConfigurations, const std::string &filename, const std::list<std::string> &includePaths);
        -:  138:
        -:  139:    simplecpp::TokenList preprocess(const simplecpp::TokenList &tokens1, const std::string &cfg, std::vector<std::string> &files, bool throwError = false);
        -:  140:
        -:  141:    std::string getcode(const simplecpp::TokenList &tokens1, const std::string &cfg, std::vector<std::string> &files, const bool writeLocations);
        -:  142:
        -:  143:    /**
        -:  144:     * Get preprocessed code for a given configuration
        -:  145:     * @param filedata file data including preprocessing 'if', 'define', etc
        -:  146:     * @param cfg configuration to read out
        -:  147:     * @param filename name of source file
        -:  148:     */
        -:  149:    std::string getcode(const std::string &filedata, const std::string &cfg, const std::string &filename);
        -:  150:
        -:  151:    /**
        -:  152:     * preprocess all whitespaces
        -:  153:     * @param processedFile The data to be processed
        -:  154:     */
        -:  155:    static void preprocessWhitespaces(std::string &processedFile);
        -:  156:
        -:  157:    /**
        -:  158:     * make sure empty configuration macros are not used in code. the given code must be a single configuration
        -:  159:     * @param cfg configuration
        -:  160:     * @param macroUsageList macro usage list
        -:  161:     * @return true => configuration is valid
        -:  162:     */
        -:  163:    bool validateCfg(const std::string &cfg, const std::list<simplecpp::MacroUsage> &macroUsageList);
        -:  164:    void validateCfgError(const std::string &file, const unsigned int line, const std::string &cfg, const std::string &macro);
        -:  165:
        -:  166:    /**
        -:  167:     * Calculate CRC32 checksum. Using toolinfo, tokens1, filedata.
        -:  168:     *
        -:  169:     * @param tokens1    Sourcefile tokens
        -:  170:     * @param toolinfo   Arbitrary extra toolinfo
        -:  171:     * @return CRC32 checksum
        -:  172:     */
        -:  173:    unsigned int calculateChecksum(const simplecpp::TokenList &tokens1, const std::string &toolinfo) const;
        -:  174:
        -:  175:    void simplifyPragmaAsm(simplecpp::TokenList *tokenList);
        -:  176:
        -:  177:private:
        -:  178:
        -:  179:    static void simplifyPragmaAsmPrivate(simplecpp::TokenList *tokenList);
        -:  180:
        -:  181:    /**
        -:  182:     * Remove space that has new line character on left or right side of it.
        -:  183:     *
        -:  184:     * @param str The string to be converted
        -:  185:     * @return The string where space characters have been removed.
        -:  186:     */
        -:  187:    static std::string removeSpaceNearNL(const std::string &str);
        -:  188:
        -:  189:public:
        -:  190:
        -:  191:
        -:  192:    static void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings);
        -:  193:
        -:  194:    void setFile0(const std::string &f) {
        -:  195:        mFile0 = f;
        -:  196:    }
        -:  197:
        -:  198:    /**
        -:  199:     * dump all directives present in source file
        -:  200:     */
        -:  201:    void dump(std::ostream &out) const;
        -:  202:
        -:  203:    void reportOutput(const simplecpp::OutputList &outputList, bool showerror);
        -:  204:
        -:  205:private:
        -:  206:    void missingInclude(const std::string &filename, unsigned int linenr, const std::string &header, HeaderTypes headerType);
        -:  207:    void error(const std::string &filename, unsigned int linenr, const std::string &msg);
        -:  208:
        -:  209:    Settings& mSettings;
        -:  210:    ErrorLogger *mErrorLogger;
        -:  211:
        -:  212:    /** list of all directives met while preprocessing file */
        -:  213:    std::list<Directive> mDirectives;
        -:  214:
        -:  215:    std::map<std::string, simplecpp::TokenList *> mTokenLists;
        -:  216:
        -:  217:    /** filename for cpp/c file - useful when reporting errors */
        -:  218:    std::string mFile0;
        -:  219:};
        -:  220:
        -:  221:/// @}
        -:  222://---------------------------------------------------------------------------
        -:  223:#endif // preprocessorH
