        -:    0:Source:/home/workspace/lib/checknullpointer.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checknullpointer.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checknullpointer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "checknullpointer.h"
        -:   22:
        -:   23:#include "astutils.h"
        -:   24:#include "errorlogger.h"
        -:   25:#include "library.h"
        -:   26:#include "settings.h"
        -:   27:#include "symboldatabase.h"
        -:   28:#include "token.h"
        -:   29:#include "tokenize.h"
        -:   30:#include "utils.h"
        -:   31:
        -:   32:#include <algorithm>
        -:   33:#include <cctype>
        -:   34:#include <cstddef>
        -:   35:#include <set>
        -:   36://---------------------------------------------------------------------------
        -:   37:
        -:   38:// Register this check class (by creating a static instance of it)
        -:   39:namespace {
        1:   40:    CheckNullPointer instance;
call    0 returned 100%
call    1 returned 100%
        -:   41:}
        -:   42:
        1:   43:static const CWE CWE476(476U);  // NULL Pointer Dereference
call    0 returned 100%
        1:   44:static const CWE CWE682(682U);  // Incorrect Calculation
call    0 returned 100%
        -:   45:
        -:   46://---------------------------------------------------------------------------
        -:   47:
function _ZL40checkNullpointerFunctionCallPlausibilityPK8Functionj called 0 returned 0% blocks executed 0%
    #####:   48:static bool checkNullpointerFunctionCallPlausibility(const Function* func, unsigned int arg)
        -:   49:{
    #####:   50:    return !func || (func->argCount() >= arg && func->getArgumentVar(arg - 1) && func->getArgumentVar(arg - 1)->isPointer());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:   51:}
        -:   52:
        -:   53:/**
        -:   54: * @brief parse a function call and extract information about variable usage
        -:   55: * @param tok first token
        -:   56: * @param var variables that the function read / write.
        -:   57: * @param library --library files data
        -:   58: */
function _ZN16CheckNullPointer17parseFunctionCallERK5TokenRNSt7__debug4listIPS1_SaIS5_EEEPK7Library called 0 returned 0% blocks executed 0%
    #####:   59:void CheckNullPointer::parseFunctionCall(const Token &tok, std::list<const Token *> &var, const Library *library)
        -:   60:{
    #####:   61:    if (Token::Match(&tok, "%name% ( )") || !tok.tokAt(2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   62:        return;
        -:   63:
    #####:   64:    const std::vector<const Token *> args = getArguments(&tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   65:
    #####:   66:    if (library || tok.function() != nullptr) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   67:        for (int argnr = 1; argnr <= args.size(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:            const Token *param = args[argnr - 1];
call    0 never executed
    #####:   69:            if (library && library->isnullargbad(&tok, argnr) && checkNullpointerFunctionCallPlausibility(tok.function(), argnr))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:   70:                var.push_back(param);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:            else if (tok.function()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:                const Variable* argVar = tok.function()->getArgumentVar(argnr-1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   73:                if (argVar && argVar->isStlStringType() && !argVar->isArrayOrPointer())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:   74:                    var.push_back(param);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   75:            }
        -:   76:        }
        -:   77:    }
        -:   78:
    #####:   79:    if (library && library->formatstr_function(&tok)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   80:        const int formatStringArgNr = library->formatstr_argno(&tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:        if (formatStringArgNr < 0 || formatStringArgNr >= args.size())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   82:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   83:
        -:   84:        // 1st parameter..
    #####:   85:        if (Token::Match(&tok, "snprintf|vsnprintf|fnprintf|vfnprintf") && args.size() > 1 && !(args[1] && args[1]->hasKnownIntValue() && args[1]->getKnownIntValue() == 0)) // Only if length (second parameter) is not zero
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
    #####:   86:            var.push_back(args[0]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   87:
    #####:   88:        if (args[formatStringArgNr]->tokType() != Token::eString)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   89:            return;
    #####:   90:        const std::string &formatString = args[formatStringArgNr]->strValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:   91:        int argnr = formatStringArgNr + 1;
    #####:   92:        const bool scan = library->formatstr_scan(&tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   93:
    #####:   94:        bool percent = false;
    #####:   95:        for (std::string::const_iterator i = formatString.begin(); i != formatString.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:   96:            if (*i == '%') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   97:                percent = !percent;
    #####:   98:            } else if (percent) {
branch  0 never executed
branch  1 never executed
    #####:   99:                percent = false;
        -:  100:
    #####:  101:                bool _continue = false;
    #####:  102:                while (!std::isalpha((unsigned char)*i)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  103:                    if (*i == '*') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  104:                        if (scan)
branch  0 never executed
branch  1 never executed
    #####:  105:                            _continue = true;
        -:  106:                        else
    #####:  107:                            argnr++;
        -:  108:                    }
    #####:  109:                    ++i;
call    0 never executed
    #####:  110:                    if (i == formatString.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  111:                        return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:                }
    #####:  113:                if (_continue)
branch  0 never executed
branch  1 never executed
    #####:  114:                    continue;
        -:  115:
    #####:  116:                if (argnr < args.size() && (*i == 'n' || *i == 's' || scan))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  117:                    var.push_back(args[argnr]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  118:
    #####:  119:                if (*i != 'm') // %m is a non-standard glibc extension that requires no parameter
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  120:                    argnr++;
        -:  121:            }
        -:  122:        }
        -:  123:    }
        -:  124:}
        -:  125:
        -:  126:namespace {
       13:  127:    const std::set<std::string> stl_stream = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
branch 53 taken 92% (fallthrough)
branch 54 taken 8%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 returned 100%
call   64 returned 100%
call   65 returned 100%
call   66 returned 100%
call   67 returned 100%
call   68 never executed
branch 69 never executed
branch 70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
        -:  128:        "fstream", "ifstream", "iostream", "istream",
        -:  129:        "istringstream", "ofstream", "ostream", "ostringstream",
        -:  130:        "stringstream", "wistringstream", "wostringstream", "wstringstream"
       12:  131:    };
call    0 returned 100%
call    1 never executed
        -:  132:}
        -:  133:
        -:  134:/**
        -:  135: * Is there a pointer dereference? Everything that should result in
        -:  136: * a nullpointer dereference error message will result in a true
        -:  137: * return value. If it's unknown if the pointer is dereferenced false
        -:  138: * is returned.
        -:  139: * @param tok token for the pointer
        -:  140: * @param unknown it is not known if there is a pointer dereference (could be reported as a debug message)
        -:  141: * @return true => there is a dereference
        -:  142: */
function _ZNK16CheckNullPointer14isPointerDeRefEPK5TokenRb called 0 returned 0% blocks executed 0%
    #####:  143:bool CheckNullPointer::isPointerDeRef(const Token *tok, bool &unknown) const
        -:  144:{
    #####:  145:    return isPointerDeRef(tok, unknown, mSettings);
call    0 never executed
        -:  146:}
        -:  147:
function _ZN16CheckNullPointer14isPointerDeRefEPK5TokenRbPK8Settings called 10 returned 100% blocks executed 42%
       10:  148:bool CheckNullPointer::isPointerDeRef(const Token *tok, bool &unknown, const Settings *settings)
        -:  149:{
       10:  150:    unknown = false;
        -:  151:
        -:  152:    // Is pointer used as function parameter?
       10:  153:    if (Token::Match(tok->previous(), "[(,] %name% [,)]") && settings) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  154:        const Token *ftok = tok->previous();
call    0 never executed
    #####:  155:        while (ftok && ftok->str() != "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  156:            if (ftok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  157:                ftok = ftok->link();
call    0 never executed
    #####:  158:            ftok = ftok->previous();
call    0 never executed
        -:  159:        }
    #####:  160:        if (ftok && ftok->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  161:            std::list<const Token *> varlist;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  162:            parseFunctionCall(*ftok->previous(), varlist, &settings->library);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  163:            if (std::find(varlist.begin(), varlist.end(), tok) != varlist.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  164:                return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  165:            }
        -:  166:        }
        -:  167:    }
        -:  168:
       10:  169:    const Token* parent = tok->astParent();
call    0 returned 100%
       10:  170:    if (!parent)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  171:        return false;
       10:  172:    if (parent->str() == "." && parent->astOperand2() == tok)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
        1:  173:        return isPointerDeRef(parent, unknown, settings);
call    0 returned 100%
        9:  174:    const bool firstOperand = parent->astOperand1() == tok;
call    0 returned 100%
        9:  175:    while (parent->str() == "(" && (parent->astOperand2() == nullptr && parent->strAt(1) != ")")) { // Skip over casts
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  176:        parent = parent->astParent();
call    0 never executed
    #####:  177:        if (!parent)
branch  0 never executed
branch  1 never executed
    #####:  178:            return false;
        -:  179:    }
        -:  180:
        -:  181:    // Dereferencing pointer..
        9:  182:    if (parent->isUnaryOp("*") && !Token::Match(parent->tokAt(-2), "sizeof|decltype|typeof"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 44% (fallthrough)
branch  8 taken 56%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
branch 17 taken 100% (fallthrough)
branch 18 taken 0%
call   19 returned 100%
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
call   22 returned 100%
branch 23 taken 44% (fallthrough)
branch 24 taken 56%
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
        4:  183:        return true;
        -:  184:
        -:  185:    // array access
        5:  186:    if (firstOperand && parent->str() == "[" && (!parent->astParent() || parent->astParent()->str() != "&"))
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####:  187:        return true;
        -:  188:
        -:  189:    // address of member variable / array element
        5:  190:    const Token *parent2 = parent;
        7:  191:    while (Token::Match(parent2, "[|."))
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        1:  192:        parent2 = parent2->astParent();
call    0 returned 100%
        5:  193:    if (parent2 != parent && parent2 && parent2->isUnaryOp("&"))
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 20% (fallthrough)
branch 14 taken 80%
call   15 returned 100%
branch 16 taken 20% (fallthrough)
branch 17 taken 80%
call   18 returned 100%
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####:  194:        return false;
        -:  195:
        -:  196:    // read/write member variable
        5:  197:    if (firstOperand && parent->str() == "." && (!parent->astParent() || parent->astParent()->str() != "&")) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 20% (fallthrough)
branch 15 taken 80%
        1:  198:        if (!parent->astParent() || parent->astParent()->str() != "(" || parent->astParent() == tok->previous())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        1:  199:            return true;
    #####:  200:        unknown = true;
    #####:  201:        return false;
        -:  202:    }
        -:  203:
        4:  204:    if (Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  205:        return true;
        -:  206:
        4:  207:    if (Token::Match(tok, "%var% = %var% .") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  208:        tok->varId() == tok->tokAt(2)->varId())
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  209:        return true;
        -:  210:
        -:  211:    // std::string dereferences nullpointers
        4:  212:    if (Token::Match(parent->tokAt(-3), "std :: string|wstring (") && tok->strAt(1) == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  213:        return true;
        4:  214:    if (Token::Match(parent->previous(), "%name% (") && tok->strAt(1) == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  215:        const Variable* var = tok->tokAt(-2)->variable();
call    0 never executed
call    1 never executed
    #####:  216:        if (var && !var->isPointer() && !var->isArray() && var->isStlStringType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  217:            return true;
        -:  218:    }
        -:  219:
        -:  220:    // streams dereference nullpointers
        4:  221:    if (Token::Match(parent, "<<|>>") && !firstOperand) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  222:        const Variable* var = tok->variable();
call    0 never executed
    #####:  223:        if (var && var->isPointer() && Token::Match(var->typeStartToken(), "char|wchar_t")) { // Only outputting or reading to char* can cause problems
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  224:            const Token* tok2 = parent; // Find start of statement
    #####:  225:            for (; tok2; tok2 = tok2->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  226:                if (Token::Match(tok2->previous(), ";|{|}|:"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  227:                    break;
        -:  228:            }
    #####:  229:            if (Token::Match(tok2, "std :: cout|cin|cerr"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  230:                return true;
    #####:  231:            if (tok2 && tok2->varId() != 0) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  232:                const Variable* var2 = tok2->variable();
call    0 never executed
    #####:  233:                if (var2 && var2->isStlType(stl_stream))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  234:                    return true;
        -:  235:            }
        -:  236:        }
        -:  237:    }
        -:  238:
        4:  239:    const Variable *ovar = nullptr;
        4:  240:    if (Token::Match(parent, "+|==|!=") || (parent->str() == "=" && !firstOperand)) {
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 67% (fallthrough)
branch  6 taken 33%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 25% (fallthrough)
branch 10 taken 75%
        1:  241:        if (parent->astOperand1() == tok && parent->astOperand2())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  242:            ovar = parent->astOperand2()->variable();
call    0 never executed
call    1 never executed
        1:  243:        else if (parent->astOperand1() && parent->astOperand2() == tok)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        1:  244:            ovar = parent->astOperand1()->variable();
call    0 returned 100%
call    1 returned 100%
        -:  245:    }
        4:  246:    if (ovar && !ovar->isPointer() && !ovar->isArray() && ovar->isStlStringType())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  247:        return true;
        -:  248:
        -:  249:    // assume that it's not a dereference (no false positives)
        4:  250:    return false;
        -:  251:}
        -:  252:
        -:  253:
function _ZN16CheckNullPointer21nullPointerLinkedListEv called 0 returned 0% blocks executed 0%
    #####:  254:void CheckNullPointer::nullPointerLinkedList()
        -:  255:{
        -:  256:
    #####:  257:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  258:        return;
        -:  259:
    #####:  260:    const SymbolDatabase* const symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  261:
        -:  262:    // looping through items in a linked list in a inner loop.
        -:  263:    // Here is an example:
        -:  264:    //    for (const Token *tok = tokens; tok; tok = tok->next) {
        -:  265:    //        if (tok->str() == "hello")
        -:  266:    //            tok = tok->next;   // <- tok might become a null pointer!
        -:  267:    //    }
    #####:  268:    for (const Scope &forScope : symbolDatabase->scopeList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  269:        const Token* const tok1 = forScope.classDef;
        -:  270:        // search for a "for" scope..
    #####:  271:        if (forScope.type != Scope::eFor || !tok1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  272:            continue;
        -:  273:
        -:  274:        // is there any dereferencing occurring in the for statement
    #####:  275:        const Token* end2 = tok1->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  276:        for (const Token *tok2 = tok1->tokAt(2); tok2 != end2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  277:            // Dereferencing a variable inside the "for" parentheses..
    #####:  278:            if (Token::Match(tok2, "%var% . %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  279:                // Is this variable a pointer?
    #####:  280:                const Variable *var = tok2->variable();
call    0 never executed
    #####:  281:                if (!var || !var->isPointer())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  282:                    continue;
        -:  283:
        -:  284:                // Variable id for dereferenced variable
    #####:  285:                const unsigned int varid(tok2->varId());
call    0 never executed
        -:  286:
    #####:  287:                if (Token::Match(tok2->tokAt(-2), "%varid% ?", varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  288:                    continue;
        -:  289:
        -:  290:                // Check usage of dereferenced variable in the loop..
        -:  291:                // TODO: Move this to ValueFlow
    #####:  292:                for (const Scope *innerScope : forScope.nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  293:                    if (innerScope->type != Scope::eWhile)
branch  0 never executed
branch  1 never executed
    #####:  294:                        continue;
        -:  295:
        -:  296:                    // TODO: are there false negatives for "while ( %varid% ||"
    #####:  297:                    if (Token::Match(innerScope->classDef->next(), "( %varid% &&|)", varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  298:                        // Make sure there is a "break" or "return" inside the loop.
        -:  299:                        // Without the "break" a null pointer could be dereferenced in the
        -:  300:                        // for statement.
    #####:  301:                        for (const Token *tok4 = innerScope->bodyStart; tok4; tok4 = tok4->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  302:                            if (tok4 == forScope.bodyEnd) {
branch  0 never executed
branch  1 never executed
    #####:  303:                                const ValueFlow::Value v(innerScope->classDef, 0LL);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  304:                                nullPointerError(tok1, var->name(), &v, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  305:                                break;
        -:  306:                            }
        -:  307:
        -:  308:                            // There is a "break" or "return" inside the loop.
        -:  309:                            // TODO: there can be false negatives. There could still be
        -:  310:                            //       execution paths that are not properly terminated
    #####:  311:                            else if (tok4->str() == "break" || tok4->str() == "return")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  312:                                break;
        -:  313:                        }
        -:  314:                    }
        -:  315:                }
        -:  316:            }
        -:  317:        }
        -:  318:    }
        -:  319:}
        -:  320:
function _ZN16CheckNullPointer25nullPointerByDeRefAndChecEv called 0 returned 0% blocks executed 0%
    #####:  321:void CheckNullPointer::nullPointerByDeRefAndChec()
        -:  322:{
    #####:  323:    const bool printInconclusive = (mSettings->inconclusive);
        -:  324:
    #####:  325:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  326:        if (Token::Match(tok, "sizeof|decltype|typeid|typeof (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  327:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
    #####:  328:            continue;
        -:  329:        }
        -:  330:
    #####:  331:        const Variable *var = tok->variable();
call    0 never executed
    #####:  332:        if (!var || tok == var->nameToken())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  333:            continue;
        -:  334:
    #####:  335:        if (!var->isPointer() && !var->isSmartPointer())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  336:            continue;
        -:  337:
        -:  338:        // Can pointer be NULL?
    #####:  339:        const ValueFlow::Value *value = tok->getValue(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  340:        if (!value)
branch  0 never executed
branch  1 never executed
    #####:  341:            continue;
        -:  342:
    #####:  343:        if (!printInconclusive && value->isInconclusive())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  344:            continue;
        -:  345:
        -:  346:        // Pointer dereference.
    #####:  347:        bool unknown = false;
    #####:  348:        if (!isPointerDeRef(tok,unknown)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  349:            if (unknown)
branch  0 never executed
branch  1 never executed
    #####:  350:                nullPointerError(tok, tok->str(), value, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  351:            continue;
        -:  352:        }
        -:  353:
    #####:  354:        nullPointerError(tok, tok->str(), value, value->isInconclusive());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  355:    }
    #####:  356:}
        -:  357:
function _ZN16CheckNullPointer11nullPointerEv called 0 returned 0% blocks executed 0%
    #####:  358:void CheckNullPointer::nullPointer()
        -:  359:{
    #####:  360:    nullPointerLinkedList();
call    0 never executed
    #####:  361:    nullPointerByDeRefAndChec();
call    0 never executed
    #####:  362:}
        -:  363:
        -:  364:namespace {
        9:  365:    const std::set<std::string> stl_istream = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 89% (fallthrough)
branch 38 taken 11%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
        -:  366:        "fstream", "ifstream", "iostream", "istream",
        -:  367:        "istringstream", "stringstream", "wistringstream", "wstringstream"
        8:  368:    };
call    0 returned 100%
call    1 never executed
        -:  369:}
        -:  370:
        -:  371:/** Dereferencing null constant (simplified token list) */
function _ZN16CheckNullPointer23nullConstantDereferenceEv called 0 returned 0% blocks executed 0%
    #####:  372:void CheckNullPointer::nullConstantDereference()
        -:  373:{
    #####:  374:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:  375:
    #####:  376:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  377:        if (scope->function == nullptr || !scope->function->hasBody()) // We only look for functions with a body
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  378:            continue;
        -:  379:
    #####:  380:        const Token *tok = scope->bodyStart;
        -:  381:
    #####:  382:        if (scope->function->isConstructor())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  383:            tok = scope->function->token; // Check initialization list
        -:  384:
    #####:  385:        for (; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  386:            if (Token::Match(tok, "sizeof|decltype|typeid|typeof ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  387:                tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -:  388:
    #####:  389:            else if (Token::simpleMatch(tok, "* 0")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  390:                if (Token::Match(tok->previous(), "return|throw|;|{|}|:|[|(|,") || tok->previous()->isOp()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  391:                    nullPointerError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  392:                }
        -:  393:            }
        -:  394:
    #####:  395:            else if (Token::Match(tok, "0 [") && (tok->previous()->str() != "&" || !Token::Match(tok->next()->link()->next(), "[.(]")))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  396:                nullPointerError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  397:
    #####:  398:            else if (Token::Match(tok->previous(), "!!. %name% (") && (tok->previous()->str() != "::" || tok->strAt(-2) == "std")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  399:                if (Token::Match(tok->tokAt(2), "0|NULL|nullptr )") && tok->varId()) { // constructor call
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  400:                    const Variable *var = tok->variable();
call    0 never executed
    #####:  401:                    if (var && !var->isPointer() && !var->isArray() && var->isStlStringType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  402:                        nullPointerError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  403:                } else { // function call
    #####:  404:                    std::list<const Token *> var;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  405:                    parseFunctionCall(*tok, var, &mSettings->library);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  406:
        -:  407:                    // is one of the var items a NULL pointer?
    #####:  408:                    for (const Token *vartok : var) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  409:                        if (vartok->hasKnownIntValue() && vartok->getKnownIntValue() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  410:                            nullPointerError(vartok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  411:                    }
        -:  412:                }
    #####:  413:            } else if (Token::Match(tok, "std :: string|wstring ( 0|NULL|nullptr )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  414:                nullPointerError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  415:
    #####:  416:            else if (Token::Match(tok->previous(), "::|. %name% (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  417:                const std::vector<const Token *> &args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  418:                for (int argnr = 0; argnr < args.size(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  419:                    const Token *argtok = args[argnr];
call    0 never executed
    #####:  420:                    if (!argtok->hasKnownIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  421:                        continue;
    #####:  422:                    if (argtok->values().front().intvalue != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  423:                        continue;
    #####:  424:                    if (mSettings->library.isnullargbad(tok, argnr+1))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  425:                        nullPointerError(argtok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  426:                }
        -:  427:            }
        -:  428:
    #####:  429:            else if (Token::Match(tok->previous(), ">> 0|NULL|nullptr")) { // Only checking input stream operations is safe here, because otherwise 0 can be an integer as well
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  430:                const Token* tok2 = tok->previous(); // Find start of statement
call    0 never executed
    #####:  431:                for (; tok2; tok2 = tok2->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  432:                    if (Token::Match(tok2->previous(), ";|{|}|:|("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  433:                        break;
        -:  434:                }
    #####:  435:                if (tok2 && tok2->previous() && tok2->previous()->str()=="(")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  436:                    continue;
    #####:  437:                if (Token::simpleMatch(tok2, "std :: cin"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  438:                    nullPointerError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  439:                if (tok2 && tok2->varId() != 0) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  440:                    const Variable *var = tok2->variable();
call    0 never executed
    #####:  441:                    if (var && var->isStlType(stl_istream))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  442:                        nullPointerError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  443:                }
        -:  444:            }
        -:  445:
    #####:  446:            const Variable *ovar = nullptr;
    #####:  447:            const Token *tokNull = nullptr;
    #####:  448:            if (Token::Match(tok, "0|NULL|nullptr ==|!=|>|>=|<|<= %var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  449:                if (!Token::Match(tok->tokAt(3),".|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  450:                    ovar = tok->tokAt(2)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  451:                    tokNull = tok;
        -:  452:                }
    #####:  453:            } else if (Token::Match(tok, "%var% ==|!=|>|>=|<|<= 0|NULL|nullptr") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  454:                       Token::Match(tok, "%var% =|+ 0|NULL|nullptr )|]|,|;|+")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  455:                ovar = tok->variable();
call    0 never executed
    #####:  456:                tokNull = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  457:            }
    #####:  458:            if (ovar && !ovar->isPointer() && !ovar->isArray() && ovar->isStlStringType() && tokNull && tokNull->originalName() != "'\\0'")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  459:                nullPointerError(tokNull);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  460:        }
        -:  461:    }
    #####:  462:}
        -:  463:
function _ZN16CheckNullPointer16nullPointerErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKN9ValueFlow5ValueEb called 0 returned 0% blocks executed 0%
    #####:  464:void CheckNullPointer::nullPointerError(const Token *tok, const std::string &varname, const ValueFlow::Value *value, bool inconclusive)
        -:  465:{
    #####:  466:    const std::string errmsgcond("$symbol:" + varname + '\n' + ValueFlow::eitherTheConditionIsRedundant(value ? value->condition : nullptr) + " or there is possible null pointer dereference: $symbol.");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####:  467:    const std::string errmsgdefarg("$symbol:" + varname + "\nPossible null pointer dereference if the default parameter value is used: $symbol");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:  468:
    #####:  469:    if (!tok) {
branch  0 never executed
branch  1 never executed
    #####:  470:        reportError(tok, Severity::error, "nullPointer", "Null pointer dereference", CWE476, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  471:        reportError(tok, Severity::warning, "nullPointerDefaultArg", errmsgdefarg, CWE476, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  472:        reportError(tok, Severity::warning, "nullPointerRedundantCheck", errmsgcond, CWE476, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  473:        return;
        -:  474:    }
        -:  475:
    #####:  476:    if (!value) {
branch  0 never executed
branch  1 never executed
    #####:  477:        reportError(tok, Severity::error, "nullPointer", "Null pointer dereference", CWE476, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  478:        return;
        -:  479:    }
        -:  480:
    #####:  481:    if (!mSettings->isEnabled(value, inconclusive))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  482:        return;
        -:  483:
    #####:  484:    const ErrorPath errorPath = getErrorPath(tok, value, "Null pointer dereference");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -:  485:
    #####:  486:    if (value->condition) {
branch  0 never executed
branch  1 never executed
    #####:  487:        reportError(errorPath, Severity::warning, "nullPointerRedundantCheck", errmsgcond, CWE476, inconclusive || value->isInconclusive());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  488:    } else if (value->defaultArg) {
branch  0 never executed
branch  1 never executed
    #####:  489:        reportError(errorPath, Severity::warning, "nullPointerDefaultArg", errmsgdefarg, CWE476, inconclusive || value->isInconclusive());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  490:    } else {
    #####:  491:        std::string errmsg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  492:        errmsg = std::string(value->isKnown() ? "Null" : "Possible null") + " pointer dereference";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  493:        if (!varname.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  494:            errmsg = "$symbol:" + varname + '\n' + errmsg + ": $symbol";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  495:
    #####:  496:        reportError(errorPath,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  497:                    value->isKnown() ? Severity::error : Severity::warning,
call    0 never executed
        -:  498:                    "nullPointer",
        -:  499:                    errmsg,
    #####:  500:                    CWE476, inconclusive || value->isInconclusive());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  501:    }
        -:  502:}
        -:  503:
function _ZN16CheckNullPointer10arithmeticEv called 0 returned 0% blocks executed 0%
    #####:  504:void CheckNullPointer::arithmetic()
        -:  505:{
    #####:  506:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  507:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  508:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  509:            if (!Token::Match(tok, "-|+|+=|-=|++|--"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  510:                continue;
        -:  511:            const Token *pointerOperand;
        -:  512:            const Token *numericOperand;
    #####:  513:            if (tok->astOperand1() && tok->astOperand1()->valueType() && tok->astOperand1()->valueType()->pointer != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  514:                pointerOperand = tok->astOperand1();
call    0 never executed
    #####:  515:                numericOperand = tok->astOperand2();
call    0 never executed
    #####:  516:            } else if (tok->astOperand2() && tok->astOperand2()->valueType() && tok->astOperand2()->valueType()->pointer != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  517:                pointerOperand = tok->astOperand2();
call    0 never executed
    #####:  518:                numericOperand = tok->astOperand1();
call    0 never executed
        -:  519:            } else
    #####:  520:                continue;
    #####:  521:            if (numericOperand && numericOperand->valueType() && !numericOperand->valueType()->isIntegral())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  522:                continue;
    #####:  523:            MathLib::bigint checkValue = 0;
        -:  524:            // When using an assign op, the value read from
        -:  525:            // valueflow has already been updated, so instead of
        -:  526:            // checking for zero we check that the value is equal
        -:  527:            // to RHS
    #####:  528:            if (tok->astOperand2() && tok->astOperand2()->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  529:                if (tok->str() == "-=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  530:                    checkValue -= tok->astOperand2()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  531:                else if (tok->str() == "+=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  532:                    checkValue = tok->astOperand2()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  533:            }
    #####:  534:            const ValueFlow::Value *value = pointerOperand->getValue(checkValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  535:            if (!value)
branch  0 never executed
branch  1 never executed
    #####:  536:                continue;
    #####:  537:            if (!mSettings->inconclusive && value->isInconclusive())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  538:                continue;
    #####:  539:            if (value->condition && !mSettings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  540:                continue;
    #####:  541:            if (value->condition)
branch  0 never executed
branch  1 never executed
    #####:  542:                redundantConditionWarning(tok, value, value->condition, value->isInconclusive());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  543:            else
    #####:  544:                pointerArithmeticError(tok, value, value->isInconclusive());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  545:        }
        -:  546:    }
    #####:  547:}
        -:  548:
function _ZL20arithmeticTypeStringPK5Token called 0 returned 0% blocks executed 0%
    #####:  549:static std::string arithmeticTypeString(const Token *tok)
        -:  550:{
    #####:  551:    if (tok && tok->str()[0] == '-')
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  552:        return "subtraction";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  553:    else if (tok && tok->str()[0] == '+')
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  554:        return "addition";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  555:    else
    #####:  556:        return "arithmetic";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  557:}
        -:  558:
function _ZN16CheckNullPointer22pointerArithmeticErrorEPK5TokenPKN9ValueFlow5ValueEb called 0 returned 0% blocks executed 0%
    #####:  559:void CheckNullPointer::pointerArithmeticError(const Token* tok, const ValueFlow::Value *value, bool inconclusive)
        -:  560:{
    #####:  561:    std::string arithmetic = arithmeticTypeString(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  562:    std::string errmsg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  563:    if (tok && tok->str()[0] == '-') {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  564:        errmsg = "Overflow in pointer arithmetic, NULL pointer is subtracted.";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  565:    } else {
    #####:  566:        errmsg = "Pointer " + arithmetic + " with NULL pointer.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  567:    }
    #####:  568:    const ErrorPath errorPath = getErrorPath(tok, value, "Null pointer " + arithmetic);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  569:    reportError(errorPath,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  570:                Severity::error,
        -:  571:                "nullPointerArithmetic",
        -:  572:                errmsg,
        -:  573:                CWE682,
        -:  574:                inconclusive);
    #####:  575:}
        -:  576:
function _ZN16CheckNullPointer25redundantConditionWarningEPK5TokenPKN9ValueFlow5ValueES2_b called 0 returned 0% blocks executed 0%
    #####:  577:void CheckNullPointer::redundantConditionWarning(const Token* tok, const ValueFlow::Value *value, const Token *condition, bool inconclusive)
        -:  578:{
    #####:  579:    std::string arithmetic = arithmeticTypeString(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  580:    std::string errmsg;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  581:    if (tok && tok->str()[0] == '-') {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  582:        errmsg = ValueFlow::eitherTheConditionIsRedundant(condition) + " or there is overflow in pointer " + arithmetic + ".";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  583:    } else {
    #####:  584:        errmsg = ValueFlow::eitherTheConditionIsRedundant(condition) + " or there is pointer arithmetic with NULL pointer.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  585:    }
    #####:  586:    const ErrorPath errorPath = getErrorPath(tok, value, "Null pointer " + arithmetic);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  587:    reportError(errorPath,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  588:                Severity::warning,
        -:  589:                "nullPointerArithmeticRedundantCheck",
        -:  590:                errmsg,
        -:  591:                CWE682,
        -:  592:                inconclusive);
    #####:  593:}
        -:  594:
function _ZNK16CheckNullPointer10MyFileInfo8toStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  595:std::string CheckNullPointer::MyFileInfo::toString() const
        -:  596:{
    #####:  597:    return CTU::toString(unsafeUsage);
call    0 never executed
        -:  598:}
        -:  599:
function _ZL13isUnsafeUsagePK5CheckPK5TokenPx called 0 returned 0% blocks executed 0%
    #####:  600:static bool isUnsafeUsage(const Check *check, const Token *vartok, MathLib::bigint *value)
        -:  601:{
        -:  602:    (void)value;
    #####:  603:    const CheckNullPointer *checkNullPointer = dynamic_cast<const CheckNullPointer *>(check);
branch  0 never executed
branch  1 never executed
    #####:  604:    bool unknown = false;
    #####:  605:    return checkNullPointer && checkNullPointer->isPointerDeRef(vartok, unknown);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  606:}
        -:  607:
function _ZNK16CheckNullPointer11getFileInfoEPK9TokenizerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  608:Check::FileInfo *CheckNullPointer::getFileInfo(const Tokenizer *tokenizer, const Settings *settings) const
        -:  609:{
    #####:  610:    CheckNullPointer check(tokenizer, settings, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  611:    const std::list<CTU::FileInfo::UnsafeUsage> &unsafeUsage = CTU::getUnsafeUsage(tokenizer, settings, &check, ::isUnsafeUsage);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  612:    if (unsafeUsage.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  613:        return nullptr;
        -:  614:
    #####:  615:    MyFileInfo *fileInfo = new MyFileInfo;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  616:    fileInfo->unsafeUsage = unsafeUsage;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  617:    return fileInfo;
        -:  618:}
        -:  619:
function _ZNK16CheckNullPointer19loadFileInfoFromXmlEPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  620:Check::FileInfo * CheckNullPointer::loadFileInfoFromXml(const tinyxml2::XMLElement *xmlElement) const
        -:  621:{
    #####:  622:    const std::list<CTU::FileInfo::UnsafeUsage> &unsafeUsage = CTU::loadUnsafeUsageListFromXml(xmlElement);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  623:    if (unsafeUsage.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  624:        return nullptr;
        -:  625:
    #####:  626:    MyFileInfo *fileInfo = new MyFileInfo;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  627:    fileInfo->unsafeUsage = unsafeUsage;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  628:    return fileInfo;
        -:  629:}
        -:  630:
function _ZN16CheckNullPointer19analyseWholeProgramEPKN3CTU8FileInfoERKNSt7__debug4listIPN5Check8FileInfoESaIS8_EEERK8SettingsR11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:  631:bool CheckNullPointer::analyseWholeProgram(const CTU::FileInfo *ctu, const std::list<Check::FileInfo*> &fileInfo, const Settings& settings, ErrorLogger &errorLogger)
        -:  632:{
    #####:  633:    if (!ctu)
branch  0 never executed
branch  1 never executed
    #####:  634:        return false;
    #####:  635:    bool foundErrors = false;
        -:  636:    (void)settings; // This argument is unused
        -:  637:
    #####:  638:    const std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> callsMap = ctu->getCallsMap();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  639:
    #####:  640:    for (Check::FileInfo *fi1 : fileInfo) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  641:        const MyFileInfo *fi = dynamic_cast<MyFileInfo*>(fi1);
branch  0 never executed
branch  1 never executed
    #####:  642:        if (!fi)
branch  0 never executed
branch  1 never executed
    #####:  643:            continue;
    #####:  644:        for (const CTU::FileInfo::UnsafeUsage &unsafeUsage : fi->unsafeUsage) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  645:            for (int warning = 0; warning <= 1; warning++) {
branch  0 never executed
branch  1 never executed
    #####:  646:                if (warning == 1 && !settings.isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  647:                    break;
        -:  648:
        -:  649:                const std::list<ErrorLogger::ErrorMessage::FileLocation> &locationList =
        -:  650:                    ctu->getErrorPath(CTU::FileInfo::InvalidValueType::null,
        -:  651:                                      unsafeUsage,
        -:  652:                                      callsMap,
        -:  653:                                      "Dereferencing argument ARG that is null",
        -:  654:                                      nullptr,
    #####:  655:                                      warning);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  656:                if (locationList.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  657:                    continue;
        -:  658:
        -:  659:                const ErrorLogger::ErrorMessage errmsg(locationList,
        -:  660:                                                       emptyString,
        -:  661:                                                       warning ? Severity::warning : Severity::error,
    #####:  662:                                                       "Null pointer dereference: " + unsafeUsage.myArgumentName,
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  663:                                                       "ctunullpointer",
    #####:  664:                                                       CWE476, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
    #####:  665:                errorLogger.reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  666:
    #####:  667:                foundErrors = true;
    #####:  668:                break;
        -:  669:            }
        -:  670:        }
        -:  671:    }
        -:  672:
    #####:  673:    return foundErrors;
function _GLOBAL__sub_I__ZN16CheckNullPointer17parseFunctionCallERK5TokenRNSt7__debug4listIPS1_SaIS5_EEEPK7Library called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 52%
        3:  674:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
