        -:    0:Source:/usr/include/c++/7/debug/safe_iterator.tcc
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Debugging iterator implementation (out of line) -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2003-2017 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file debug/safe_iterator.tcc
        -:   26: *  This file is a GNU debug extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC
        -:   30:#define _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC 1
        -:   31:
        -:   32:namespace __gnu_debug
        -:   33:{
        -:   34:  template<typename _Iterator, typename _Sequence>
        -:   35:    bool
function _ZNK11__gnu_debug14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIP13LifetimeTokenNSt9__cxx19986vectorIS3_SaIS3_EEEEENSt7__debug6vectorIS3_S7_EEE14_M_can_advanceERKl called 0 returned 0% blocks executed 0%
    #####:   36:    _Safe_iterator<_Iterator, _Sequence>::
        -:   37:    _M_can_advance(const difference_type& __n) const
        -:   38:    {
    #####:   39:      if (this->_M_singular())
branch  0 never executed
branch  1 never executed
    #####:   40:	return false;
        -:   41:
    #####:   42:      if (__n == 0)
branch  0 never executed
branch  1 never executed
    #####:   43:	return true;
        -:   44:
    #####:   45:      if (__n < 0)
branch  0 never executed
branch  1 never executed
        -:   46:	{
    #####:   47:	  std::pair<difference_type, _Distance_precision> __dist =
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   48:	    __get_distance_from_begin(*this);
    #####:   49:	  bool __ok =  ((__dist.second == __dp_exact && __dist.first >= -__n)
branch  0 never executed
branch  1 never executed
    #####:   50:			|| (__dist.second != __dp_exact && __dist.first > 0));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   51:	  return __ok;
        -:   52:	}
        -:   53:      else
        -:   54:	{
    #####:   55:	  std::pair<difference_type, _Distance_precision> __dist =
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   56:	    __get_distance_to_end(*this);
    #####:   57:	  bool __ok = ((__dist.second == __dp_exact && __dist.first >= __n)
branch  0 never executed
branch  1 never executed
    #####:   58:		       || (__dist.second != __dp_exact && __dist.first > 0));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   59:	  return __ok;
call    0 never executed
        -:   60:	}
        -:   61:    }
        -:   62:
        -:   63:  template<typename _Iterator, typename _Sequence>
        -:   64:    bool
function _ZNK11__gnu_debug14_Safe_iteratorINSt9__cxx199820_List_const_iteratorI8VariableEENSt7__debug4listIS3_SaIS3_EEEE14_M_valid_rangeERKS9_RSt4pairIlNS_19_Distance_precisionEEb called 0 returned 0% blocks executed 0%
function _ZNK11__gnu_debug14_Safe_iteratorINSt9__cxx199820_List_const_iteratorIN9ValueFlow5ValueEEENSt7__debug4listIS4_SaIS4_EEEE14_M_valid_rangeERKSA_RSt4pairIlNS_19_Distance_precisionEEb called 0 returned 0% blocks executed 0%
function _ZNK11__gnu_debug14_Safe_iteratorINSt9__cxx199814_List_iteratorIN9ValueFlow5ValueEEENSt7__debug4listIS4_SaIS4_EEEE14_M_valid_rangeERKSA_RSt4pairIlNS_19_Distance_precisionEEb called 0 returned 0% blocks executed 0%
function _ZNK11__gnu_debug14_Safe_iteratorINSt9__cxx199820_List_const_iteratorISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt7__debug4listISD_SaISD_EEEE14_M_valid_rangeERKSJ_RS3_IlNS_19_Distance_precisionEEb called 0 returned 0% blocks executed 0%
function _ZNK11__gnu_debug14_Safe_iteratorIN9__gnu_cxx17__normal_iteratorIP13LifetimeTokenNSt9__cxx19986vectorIS3_SaIS3_EEEEENSt7__debug6vectorIS3_S7_EEE14_M_valid_rangeERKSD_RSt4pairIlNS_19_Distance_precisionEEb called 0 returned 0% blocks executed 0%
function _ZNK11__gnu_debug14_Safe_iteratorINSt9__cxx199814_List_iteratorISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENSt7__debug4listISD_SaISD_EEEE14_M_valid_rangeERKSJ_RS3_IlNS_19_Distance_precisionEEb called 0 returned 0% blocks executed 0%
    #####:   65:    _Safe_iterator<_Iterator, _Sequence>::
        -:   66:    _M_valid_range(const _Safe_iterator& __rhs,
        -:   67:		   std::pair<difference_type, _Distance_precision>& __dist,
        -:   68:		   bool __check_dereferenceable) const
        -:   69:    {
    #####:   70:      if (!_M_can_compare(__rhs))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   71:	return false;
        -:   72:
        -:   73:      /* Determine iterators order */
    #####:   74:      __dist = __get_distance(*this, __rhs);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   75:      switch (__dist.second)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
        -:   76:	{
    #####:   77:	case __dp_equality:
    #####:   78:	  if (__dist.first == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   79:	    return true;
    #####:   80:	  break;
        -:   81:
    #####:   82:	case __dp_sign:
        -:   83:	case __dp_exact:
        -:   84:	  // If range is not empty first iterator must be dereferenceable.
    #####:   85:	  if (__dist.first > 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   86:	    return !__check_dereferenceable || _M_dereferenceable();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####:   87:	  return __dist.first == 0;
        -:   88:	}
        -:   89:
        -:   90:      // Assume that this is a valid range; we can't check anything else.
    #####:   91:      return true;
        -:   92:    }
        -:   93:} // namespace __gnu_debug
        -:   94:
        -:   95:#endif
