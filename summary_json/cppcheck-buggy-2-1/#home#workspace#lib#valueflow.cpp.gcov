        -:    0:Source:/home/workspace/lib/valueflow.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:/**
        -:   20: * @brief This is the ValueFlow component in Cppcheck.
        -:   21: *
        -:   22: * Each @sa Token in the token list has a list of values. These are
        -:   23: * the "possible" values for the Token at runtime.
        -:   24: *
        -:   25: * In the --debug and --debug-normal output you can see the ValueFlow data. For example:
        -:   26: *
        -:   27: *     int f()
        -:   28: *     {
        -:   29: *         int x = 10;
        -:   30: *         return 4 * x + 2;
        -:   31: *     }
        -:   32: *
        -:   33: * The --debug-normal output says:
        -:   34: *
        -:   35: *     ##Value flow
        -:   36: *     Line 3
        -:   37: *       10 always 10
        -:   38: *     Line 4
        -:   39: *       4 always 4
        -:   40: *       * always 40
        -:   41: *       x always 10
        -:   42: *       + always 42
        -:   43: *       2 always 2
        -:   44: *
        -:   45: * All value flow analysis is executed in the ValueFlow::setValues() function. The ValueFlow analysis is executed after
        -:   46: * the tokenizer/ast/symboldatabase/etc.. The ValueFlow analysis is done in a series of valueFlow* function calls, where
        -:   47: * each such function call can only use results from previous function calls. The function calls should be arranged so
        -:   48: * that valueFlow* that do not require previous ValueFlow information should be first.
        -:   49: *
        -:   50: * Type of analysis
        -:   51: * ================
        -:   52: *
        -:   53: * This is "flow sensitive" value flow analysis. We _usually_ track the value for 1 variable at a time.
        -:   54: *
        -:   55: * How are calculations handled
        -:   56: * ============================
        -:   57: *
        -:   58: * Here is an example code:
        -:   59: *
        -:   60: *   x = 3 + 4;
        -:   61: *
        -:   62: * The valueFlowNumber set the values for the "3" and "4" tokens by calling setTokenValue().
        -:   63: * The setTokenValue() handle the calculations automatically. When both "3" and "4" have values, the "+" can be
        -:   64: * calculated. setTokenValue() recursively calls itself when parents in calculations can be calculated.
        -:   65: *
        -:   66: * Forward / Reverse flow analysis
        -:   67: * ===============================
        -:   68: *
        -:   69: * In forward value flow analysis we know a value and see what happens when we are stepping the program forward. Like
        -:   70: * normal execution. The valueFlowForwardVariable is used in this analysis.
        -:   71: *
        -:   72: * In reverse value flow analysis we know the value of a variable at line X. And try to "execute backwards" to determine
        -:   73: * possible values before line X. The valueFlowReverse is used in this analysis.
        -:   74: *
        -:   75: *
        -:   76: */
        -:   77:
        -:   78:#include "valueflow.h"
        -:   79:
        -:   80:#include "astutils.h"
        -:   81:#include "errorlogger.h"
        -:   82:#include "library.h"
        -:   83:#include "mathlib.h"
        -:   84:#include "platform.h"
        -:   85:#include "settings.h"
        -:   86:#include "standards.h"
        -:   87:#include "symboldatabase.h"
        -:   88:#include "token.h"
        -:   89:#include "tokenlist.h"
        -:   90:#include "utils.h"
        -:   91:#include "path.h"
        -:   92:
        -:   93:#include <algorithm>
        -:   94:#include <cassert>
        -:   95:#include <cstddef>
        -:   96:#include <functional>
        -:   97:#include <iterator>
        -:   98:#include <limits>
        -:   99:#include <map>
        -:  100:#include <set>
        -:  101:#include <stack>
        -:  102:#include <vector>
        -:  103:
        -:  104:static const int TIMEOUT = 10; // Do not repeat ValueFlow analysis more than 10 seconds
        -:  105:
        -:  106:namespace {
function _ZN12_GLOBAL__N_113ProgramMemoryaSERKS0_ called 24 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_113ProgramMemoryC2Ev called 497 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_113ProgramMemoryD2Ev called 1505 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_113ProgramMemoryC2ERKS0_ called 1008 returned 100% blocks executed 100%
     3034:  107:    struct ProgramMemory {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  108:        std::map<int, ValueFlow::Value> values;
        -:  109:
function _ZN12_GLOBAL__N_113ProgramMemory8setValueEiRKN9ValueFlow5ValueE called 326 returned 100% blocks executed 100%
      326:  110:        void setValue(nonneg int varid, const ValueFlow::Value &value) {
      326:  111:            values[varid] = value;
call    0 returned 100%
call    1 returned 100%
      326:  112:        }
        -:  113:
function _ZNK12_GLOBAL__N_113ProgramMemory11getIntValueEiPx called 524 returned 100% blocks executed 100%
      524:  114:        bool getIntValue(nonneg int varid, MathLib::bigint* result) const {
     1048:  115:            const std::map<int, ValueFlow::Value>::const_iterator it = values.find(varid);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      524:  116:            const bool found = it != values.end() && it->second.isIntValue();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 96% (fallthrough)
branch  7 taken 4%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
      524:  117:            if (found)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
      271:  118:                *result = it->second.intvalue;
call    0 returned 100%
     1048:  119:            return found;
        -:  120:        }
        -:  121:
function _ZN12_GLOBAL__N_113ProgramMemory11setIntValueEix called 133 returned 100% blocks executed 75%
      133:  122:        void setIntValue(nonneg int varid, MathLib::bigint value) {
      133:  123:            values[varid] = ValueFlow::Value(value);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
      133:  124:        }
        -:  125:
function _ZNK12_GLOBAL__N_113ProgramMemory11getTokValueEiPPK5Token called 0 returned 0% blocks executed 0%
    #####:  126:        bool getTokValue(nonneg int varid, const Token** result) const {
    #####:  127:            const std::map<int, ValueFlow::Value>::const_iterator it = values.find(varid);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  128:            const bool found = it != values.end() && it->second.isTokValue();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####:  129:            if (found)
branch  0 never executed
branch  1 never executed
    #####:  130:                *result = it->second.tokvalue;
call    0 never executed
    #####:  131:            return found;
        -:  132:        }
        -:  133:
function _ZN12_GLOBAL__N_113ProgramMemory8hasValueEi called 277 returned 100% blocks executed 80%
      277:  134:        bool hasValue(nonneg int varid) {
      277:  135:            return values.find(varid) != values.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        -:  136:        }
        -:  137:
function _ZN12_GLOBAL__N_113ProgramMemory4swapERS0_ called 15 returned 100% blocks executed 100%
       15:  138:        void swap(ProgramMemory &pm) {
       15:  139:            values.swap(pm.values);
call    0 returned 100%
       15:  140:        }
        -:  141:
function _ZN12_GLOBAL__N_113ProgramMemory5clearEv called 0 returned 0% blocks executed 0%
    #####:  142:        void clear() {
    #####:  143:            values.clear();
call    0 never executed
    #####:  144:        }
        -:  145:
function _ZNK12_GLOBAL__N_113ProgramMemory5emptyEv called 41 returned 100% blocks executed 100%
       41:  146:        bool empty() const {
       41:  147:            return values.empty();
call    0 returned 100%
        -:  148:        }
        -:  149:
        -:  150:        void replace(const ProgramMemory &pm) {
        -:  151:            for (auto&& p:pm.values)
        -:  152:                values[p.first] = p.second;
        -:  153:        }
        -:  154:
        -:  155:        void insert(const ProgramMemory &pm) {
        -:  156:            for (auto&& p:pm.values)
        -:  157:                values.insert(p);
        -:  158:        }
        -:  159:    };
        -:  160:}
        -:  161:
        -:  162:static void execute(const Token *expr,
        -:  163:                    ProgramMemory * const programMemory,
        -:  164:                    MathLib::bigint *result,
        -:  165:                    bool *error);
        -:  166:
function _ZL15bailoutInternalP9TokenListP11ErrorLoggerPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESD_iSD_ called 0 returned 0% blocks executed 0%
    #####:  167:static void bailoutInternal(TokenList *tokenlist, ErrorLogger *errorLogger, const Token *tok, const std::string &what, const std::string &file, int line, const std::string &function)
        -:  168:{
    #####:  169:    std::list<ErrorLogger::ErrorMessage::FileLocation> callstack(1, ErrorLogger::ErrorMessage::FileLocation(tok, tokenlist));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  170:    ErrorLogger::ErrorMessage errmsg(callstack, tokenlist->getSourceFilePath(), Severity::debug,
    #####:  171:                                     Path::stripDirectoryPart(file) + ":" + MathLib::toString(line) + ":" + function + " bailout: " + what, "valueFlowBailout", false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
    #####:  172:    errorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  173:}
call    0 never executed
        -:  174:
        -:  175:#if (defined __cplusplus) && __cplusplus >= 201103L
        -:  176:#define bailout(tokenlist, errorLogger, tok, what) bailoutInternal(tokenlist, errorLogger, tok, what, __FILE__, __LINE__, __func__)
        -:  177:#elif (defined __GNUC__) || (defined __clang__) || (defined _MSC_VER)
        -:  178:#define bailout(tokenlist, errorLogger, tok, what) bailoutInternal(tokenlist, errorLogger, tok, what, __FILE__, __LINE__, __FUNCTION__)
        -:  179:#else
        -:  180:#define bailout(tokenlist, errorLogger, tok, what) bailoutInternal(tokenlist, errorLogger, tok, what, __FILE__, __LINE__, "(valueFlow)")
        -:  181:#endif
        -:  182:
function _ZL21changeKnownToPossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 841 returned 100% blocks executed 85%
      841:  183:static void changeKnownToPossible(std::list<ValueFlow::Value> &values, int indirect=-1)
        -:  184:{
     1749:  185:    for (ValueFlow::Value& v: values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
      908:  186:        if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  187:            continue;
      908:  188:        v.changeKnownToPossible();
call    0 returned 100%
        -:  189:    }
      841:  190:}
        -:  191:
function _ZL16removeImpossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 1242 returned 100% blocks executed 100%
     1242:  192:static void removeImpossible(std::list<ValueFlow::Value>& values, int indirect = -1)
        -:  193:{
function _ZZL16removeImpossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEiENKUlRKS2_E_clES7_ called 432 returned 100% blocks executed 80%
     1674:  194:    values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
      432:  195:        if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  196:            return false;
      432:  197:        return v.isImpossible();
call    0 returned 100%
        -:  198:    });
     1242:  199:}
        -:  200:
function _ZL15lowerToPossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 102 returned 100% blocks executed 100%
      102:  201:static void lowerToPossible(std::list<ValueFlow::Value>& values, int indirect = -1)
        -:  202:{
      102:  203:    changeKnownToPossible(values, indirect);
call    0 returned 100%
      102:  204:    removeImpossible(values, indirect);
call    0 returned 100%
      102:  205:}
        -:  206:
function _ZL19lowerToInconclusiveRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEPK8Settingsi called 150 returned 100% blocks executed 94%
      150:  207:static void lowerToInconclusive(std::list<ValueFlow::Value>& values, const Settings* settings, int indirect = -1)
        -:  208:{
      150:  209:    if (settings->inconclusive) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      140:  210:        removeImpossible(values, indirect);
call    0 returned 100%
      278:  211:        for (ValueFlow::Value& v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
      138:  212:            if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  213:                continue;
      138:  214:            v.setInconclusive();
call    0 returned 100%
        -:  215:        }
        -:  216:    } else {
        -:  217:        // Remove all values if the inconclusive flags is not set
function _ZZL19lowerToInconclusiveRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEPK8SettingsiENKUlRKS2_E_clESA_ called 10 returned 100% blocks executed 80%
       20:  218:        values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
       10:  219:            if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  220:                return false;
       10:  221:            return true;
        -:  222:        });
        -:  223:    }
      150:  224:}
        -:  225:
function _ZL21changePossibleToKnownRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEi called 189 returned 100% blocks executed 83%
      189:  226:static void changePossibleToKnown(std::list<ValueFlow::Value>& values, int indirect = -1)
        -:  227:{
      378:  228:    for (ValueFlow::Value& v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
      189:  229:        if (indirect >= 0 && v.indirect != indirect)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  230:            continue;
      189:  231:        if (!v.isPossible())
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
       45:  232:            continue;
      144:  233:        if (v.bound != ValueFlow::Value::Bound::Point)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  234:            continue;
      144:  235:        v.setKnown();
call    0 returned 100%
        -:  236:    }
      189:  237:}
        -:  238:
        -:  239:/**
        -:  240: * Is condition always false when variable has given value?
        -:  241: * \param condition   top ast token in condition
        -:  242: * \param programMemory   program memory
        -:  243: */
function _ZL16conditionIsFalsePK5TokenRKN12_GLOBAL__N_113ProgramMemoryE called 323 returned 100% blocks executed 88%
      323:  244:static bool conditionIsFalse(const Token *condition, const ProgramMemory &programMemory)
        -:  245:{
      323:  246:    if (!condition)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  247:        return false;
      323:  248:    if (condition->str() == "&&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       10:  249:        return conditionIsFalse(condition->astOperand1(), programMemory) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
       10:  250:               conditionIsFalse(condition->astOperand2(), programMemory);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  251:    }
      632:  252:    ProgramMemory progmem(programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      316:  253:    MathLib::bigint result = 0;
      316:  254:    bool error = false;
      316:  255:    execute(condition, &progmem, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      316:  256:    return !error && result == 0;
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
branch  2 taken 38% (fallthrough)
branch  3 taken 62%
        -:  257:}
        -:  258:
        -:  259:/**
        -:  260: * Is condition always true when variable has given value?
        -:  261: * \param condition   top ast token in condition
        -:  262: * \param programMemory   program memory
        -:  263: */
function _ZL15conditionIsTruePK5TokenRKN12_GLOBAL__N_113ProgramMemoryE called 358 returned 100% blocks executed 85%
      358:  264:static bool conditionIsTrue(const Token *condition, const ProgramMemory &programMemory)
        -:  265:{
      358:  266:    if (!condition)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  267:        return false;
      358:  268:    if (condition->str() == "||") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        4:  269:        return conditionIsTrue(condition->astOperand1(), programMemory) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        4:  270:               conditionIsTrue(condition->astOperand2(), programMemory);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  271:    }
      712:  272:    ProgramMemory progmem(programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      356:  273:    bool error = false;
      356:  274:    MathLib::bigint result = 0;
      356:  275:    execute(condition, &progmem, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      356:  276:    return !error && result == 1;
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
        -:  277:}
        -:  278:
function _ZL18setValueUpperBoundRN9ValueFlow5ValueEb called 782 returned 100% blocks executed 100%
      782:  279:static void setValueUpperBound(ValueFlow::Value& value, bool upper)
        -:  280:{
      782:  281:    if (upper)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      391:  282:        value.bound = ValueFlow::Value::Bound::Upper;
        -:  283:    else
      391:  284:        value.bound = ValueFlow::Value::Bound::Lower;
      782:  285:}
        -:  286:
function _ZL13setValueBoundRN9ValueFlow5ValueEPK5Tokenb called 1546 returned 100% blocks executed 100%
     1546:  287:static void setValueBound(ValueFlow::Value& value, const Token* tok, bool invert)
        -:  288:{
     1546:  289:    if (Token::Match(tok, "<|<=")) {
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
      458:  290:        setValueUpperBound(value, !invert);
call    0 returned 100%
     1088:  291:    } else if (Token::Match(tok, ">|>=")) {
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
      324:  292:        setValueUpperBound(value, invert);
call    0 returned 100%
        -:  293:    }
     1546:  294:}
        -:  295:
function _ZL20setConditionalValuesPK5TokenbxRN9ValueFlow5ValueES4_ called 773 returned 100% blocks executed 98%
      773:  296:static void setConditionalValues(const Token *tok,
        -:  297:                                 bool invert,
        -:  298:                                 MathLib::bigint value,
        -:  299:                                 ValueFlow::Value &true_value,
        -:  300:                                 ValueFlow::Value &false_value)
        -:  301:{
      773:  302:    if (Token::Match(tok, "==|!=|>=|<=")) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
      495:  303:        true_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
      495:  304:        const char* greaterThan = ">=";
      495:  305:        const char* lessThan = "<=";
      495:  306:        if (invert)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
      114:  307:            std::swap(greaterThan, lessThan);
call    0 returned 100%
      495:  308:        if (Token::simpleMatch(tok, greaterThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
       86:  309:            false_value = ValueFlow::Value{tok, value - 1};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
      409:  310:        } else if (Token::simpleMatch(tok, lessThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
       27:  311:            false_value = ValueFlow::Value{tok, value + 1};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:  312:        } else {
      382:  313:            false_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:  314:        }
        -:  315:    } else {
      278:  316:        const char* greaterThan = ">";
      278:  317:        const char* lessThan = "<";
      278:  318:        if (invert)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       68:  319:            std::swap(greaterThan, lessThan);
call    0 returned 100%
      278:  320:        if (Token::simpleMatch(tok, greaterThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 24% (fallthrough)
branch  4 taken 76%
       68:  321:            true_value = ValueFlow::Value{tok, value + 1};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
       68:  322:            false_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
      210:  323:        } else if (Token::simpleMatch(tok, lessThan)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      210:  324:            true_value = ValueFlow::Value{tok, value - 1};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
      210:  325:            false_value = ValueFlow::Value{tok, value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:  326:        }
        -:  327:    }
      773:  328:    setValueBound(true_value, tok, invert);
call    0 returned 100%
      773:  329:    setValueBound(false_value, tok, !invert);
call    0 returned 100%
      773:  330:}
call    0 never executed
        -:  331:
function _ZL11isSaturatedx called 773 returned 100% blocks executed 88%
      773:  332:static bool isSaturated(MathLib::bigint value)
        -:  333:{
      773:  334:    return value == std::numeric_limits<MathLib::bigint>::max() || value == std::numeric_limits<MathLib::bigint>::min();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  335:}
        -:  336:
function _ZL15parseCompareIntPK5TokenRN9ValueFlow5ValueES4_ called 6185 returned 100% blocks executed 94%
     6185:  337:static const Token *parseCompareInt(const Token *tok, ValueFlow::Value &true_value, ValueFlow::Value &false_value)
        -:  338:{
     6185:  339:    if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
call    3 returned 100%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
branch  6 taken 53% (fallthrough)
branch  7 taken 47%
     3289:  340:        return nullptr;
     2896:  341:    if (Token::Match(tok, "%comp%")) {
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
      940:  342:        if (tok->astOperand1()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
      182:  343:            MathLib::bigint value = tok->astOperand1()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      182:  344:            if (isSaturated(value))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  345:                return nullptr;
      182:  346:            setConditionalValues(tok, true, value, true_value, false_value);
call    0 returned 100%
      182:  347:            return tok->astOperand2();
call    0 returned 100%
      758:  348:        } else if (tok->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 78% (fallthrough)
branch  3 taken 22%
      591:  349:            MathLib::bigint value = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      591:  350:            if (isSaturated(value))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  351:                return nullptr;
      591:  352:            setConditionalValues(tok, false, value, true_value, false_value);
call    0 returned 100%
      591:  353:            return tok->astOperand1();
call    0 returned 100%
        -:  354:        }
        -:  355:    }
     2123:  356:    return nullptr;
        -:  357:}
        -:  358:
function _ZL27programMemoryParseConditionRN12_GLOBAL__N_113ProgramMemoryEPK5TokenS4_PK8Settingsb called 6 returned 100% blocks executed 27%
        6:  359:static void programMemoryParseCondition(ProgramMemory& pm, const Token* tok, const Token* endTok, const Settings* settings, bool then)
        -:  360:{
        6:  361:    if (Token::Match(tok, "==|>=|<=|<|>|!=")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  362:        if (then && !Token::Match(tok, "==|>=|<="))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  363:            return;
    #####:  364:        if (!then && !Token::Match(tok, "<|>|!="))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  365:            return;
    #####:  366:        ValueFlow::Value truevalue;
call    0 never executed
call    1 never executed
    #####:  367:        ValueFlow::Value falsevalue;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  368:        const Token* vartok = parseCompareInt(tok, truevalue, falsevalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:        if (!vartok)
branch  0 never executed
branch  1 never executed
    #####:  370:            return;
    #####:  371:        if (vartok->varId() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  372:            return;
    #####:  373:        if (!truevalue.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  374:            return;
    #####:  375:        if (isVariableChanged(tok->next(), endTok, vartok->varId(), false, settings, true))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  376:            return;
    #####:  377:        pm.setIntValue(vartok->varId(),  then ? truevalue.intvalue : falsevalue.intvalue);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        6:  378:    } else if (Token::Match(tok, "%var%")) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        4:  379:        if (tok->varId() == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  380:            return;
        4:  381:        if (then && !astIsPointer(tok) && !astIsBool(tok))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  382:            return;
        4:  383:        if (isVariableChanged(tok->next(), endTok, tok->varId(), false, settings, true))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  384:            return;
        4:  385:        pm.setIntValue(tok->varId(), then);
call    0 returned 100%
call    1 returned 100%
        2:  386:    } else if (Token::simpleMatch(tok, "!")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  387:        programMemoryParseCondition(pm, tok->astOperand1(), endTok, settings, !then);
call    0 never executed
call    1 never executed
        2:  388:    } else if (then && Token::simpleMatch(tok, "&&")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  389:        programMemoryParseCondition(pm, tok->astOperand1(), endTok, settings, then);
call    0 never executed
call    1 never executed
    #####:  390:        programMemoryParseCondition(pm, tok->astOperand2(), endTok, settings, then);
call    0 never executed
call    1 never executed
        2:  391:    } else if (!then && Token::simpleMatch(tok, "||")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  392:        programMemoryParseCondition(pm, tok->astOperand1(), endTok, settings, then);
call    0 never executed
call    1 never executed
    #####:  393:        programMemoryParseCondition(pm, tok->astOperand2(), endTok, settings, then);
call    0 never executed
call    1 never executed
        -:  394:    }
        -:  395:}
        -:  396:
function _ZL31fillProgramMemoryFromConditionsRN12_GLOBAL__N_113ProgramMemoryEPK5ScopePK5TokenPK8Settings called 385 returned 100% blocks executed 81%
      385:  397:static void fillProgramMemoryFromConditions(ProgramMemory& pm, const Scope* scope, const Token* endTok, const Settings* settings)
        -:  398:{
      385:  399:    if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  400:        return;
      385:  401:    if (!scope->isLocal())
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
      364:  402:        return;
       21:  403:    assert(scope != scope->nestedIn);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       21:  404:    fillProgramMemoryFromConditions(pm, scope->nestedIn, endTok, settings);
call    0 returned 100%
       21:  405:    if (scope->type == Scope::eIf || scope->type == Scope::eWhile || scope->type == Scope::eElse) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 21% (fallthrough)
branch  5 taken 79%
        6:  406:        const Token * bodyStart = scope->bodyStart;
        6:  407:        if (scope->type == Scope::eElse) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        4:  408:            if (!Token::simpleMatch(bodyStart->tokAt(-2), "} else {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  409:                return;
        4:  410:            bodyStart = bodyStart->linkAt(-2);
call    0 returned 100%
        -:  411:        }
        6:  412:        const Token * condEndTok = bodyStart->previous();
call    0 returned 100%
        6:  413:        if (!Token::simpleMatch(condEndTok, ") {"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  414:            return;
        6:  415:        const Token * condStartTok = condEndTok->link();
call    0 returned 100%
        6:  416:        if (!condStartTok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  417:            return;
        6:  418:        if (!Token::Match(condStartTok->previous(), "if|while ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  419:            return;
        6:  420:        const Token * condTok = condStartTok->astOperand2();
call    0 returned 100%
        6:  421:        programMemoryParseCondition(pm, condTok, endTok, settings, scope->type != Scope::eElse);
call    0 returned 100%
        -:  422:    }
        -:  423:}
        -:  424:
function _ZL31fillProgramMemoryFromConditionsRN12_GLOBAL__N_113ProgramMemoryEPK5TokenPK8Settings called 364 returned 100% blocks executed 100%
      364:  425:static void fillProgramMemoryFromConditions(ProgramMemory& pm, const Token* tok, const Settings* settings)
        -:  426:{
      364:  427:    fillProgramMemoryFromConditions(pm, tok->scope(), tok, settings);
call    0 returned 100%
call    1 returned 100%
      364:  428:}
        -:  429:
function _ZL32fillProgramMemoryFromAssignmentsRN12_GLOBAL__N_113ProgramMemoryEPK5TokenRKS0_NSt7__debug13unordered_mapIiN9ValueFlow5ValueESt4hashIiESt8equal_toIiESaISt4pairIKiSA_EEEE called 323 returned 100% blocks executed 89%
      323:  430:static void fillProgramMemoryFromAssignments(ProgramMemory& pm, const Token* tok, const ProgramMemory& state, std::unordered_map<nonneg int, ValueFlow::Value> vars)
        -:  431:{
      323:  432:    int indentlevel = 0;
     3171:  433:    for (const Token *tok2 = tok; tok2; tok2 = tok2->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     3171:  434:        bool setvar = false;
     3171:  435:        if (Token::Match(tok2, "[;{}] %var% = %var% ;")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       10:  436:            for (auto&& p:vars) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        5:  437:                if (p.first != tok2->next()->varId())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 40% (fallthrough)
branch  3 taken 60%
        2:  438:                    continue;
        3:  439:                const Token *vartok = tok2->tokAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  440:                pm.setValue(vartok->varId(), p.second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        3:  441:                setvar = true;
        -:  442:            }
        -:  443:        }
     6062:  444:        if (!setvar && (Token::Match(tok2, "[;{}] %var% =") ||
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 91% (fallthrough)
branch  4 taken 9%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 9% (fallthrough)
branch  8 taken 91%
     2891:  445:                        Token::Match(tok2, "[;{}] const| %type% %var% ("))) {
call    0 returned 100%
      277:  446:            const Token *vartok = tok2->next();
call    0 returned 100%
      277:  447:            while (vartok->next()->isName())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  448:                vartok = vartok->next();
call    0 never executed
      277:  449:            if (!pm.hasValue(vartok->varId())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
       61:  450:                MathLib::bigint result = 0;
       61:  451:                bool error = false;
       61:  452:                execute(vartok->next()->astOperand2(), &pm, &result, &error);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       61:  453:                if (!error)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
       51:  454:                    pm.setIntValue(vartok->varId(), result);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  455:            }
        -:  456:        }
        -:  457:
     3171:  458:        if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
      289:  459:            if (indentlevel <= 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      289:  460:                break;
    #####:  461:            --indentlevel;
        -:  462:        }
     2882:  463:        if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       37:  464:            const Token *cond = tok2->link();
call    0 returned 100%
       37:  465:            cond = Token::simpleMatch(cond->previous(), ") {") ? cond->linkAt(-1) : nullptr;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
call    4 returned 100%
       37:  466:            if (cond && conditionIsFalse(cond->astOperand2(), state))
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 9% (fallthrough)
branch  5 taken 91%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
        3:  467:                tok2 = cond->previous();
call    0 returned 100%
       34:  468:            else if (cond && conditionIsTrue(cond->astOperand2(), state)) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  469:                ++indentlevel;
    #####:  470:                continue;
        -:  471:            } else
       34:  472:                break;
        -:  473:        }
        -:  474:    }
      323:  475:}
        -:  476:
        -:  477:/**
        -:  478: * Get program memory by looking backwards from given token.
        -:  479: */
function _ZL16getProgramMemoryPK5TokeniRKN9ValueFlow5ValueE called 323 returned 100% blocks executed 60%
      323:  480:static ProgramMemory getProgramMemory(const Token *tok, nonneg int varid, const ValueFlow::Value &value)
        -:  481:{
      323:  482:    ProgramMemory programMemory;
call    0 returned 100%
      323:  483:    if (value.tokvalue)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
      280:  484:        fillProgramMemoryFromConditions(programMemory, value.tokvalue, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      323:  485:    if (value.condition)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       84:  486:        fillProgramMemoryFromConditions(programMemory, value.condition, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      323:  487:    programMemory.setValue(varid, value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      323:  488:    if (value.varId)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       49:  489:        programMemory.setIntValue(value.varId, value.varvalue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      646:  490:    const ProgramMemory state = programMemory;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
      323:  491:    fillProgramMemoryFromAssignments(programMemory, tok, state, {{varid, value}});
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
branch 12 taken 50% (fallthrough)
branch 13 taken 50%
call   14 returned 100%
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
      646:  492:    return programMemory;
        -:  493:}
        -:  494:
        -:  495:/**
        -:  496: * Should value be skipped because it's hidden inside && || or ?: expression.
        -:  497: * Example: ((x!=NULL) && (*x == 123))
        -:  498: * If 'valuetok' points at the x in '(*x == 123)'. Then the '&&' will be returned.
        -:  499: * @param valuetok original variable token
        -:  500: * @return NULL=>don't skip, non-NULL=>The operator token that cause the skip. For instance the '&&'.
        -:  501: * */
function _ZL32skipValueInConditionalExpressionPK5Token called 694 returned 100% blocks executed 89%
      694:  502:static const Token * skipValueInConditionalExpression(const Token * const valuetok)
        -:  503:{
        -:  504:    // Walk up the ast
      694:  505:    const Token *prev = valuetok;
     2070:  506:    for (const Token *tok = valuetok->astParent(); tok; tok = tok->astParent()) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
     1388:  507:        const bool prevIsLhs = (prev == tok->astOperand1());
call    0 returned 100%
     1388:  508:        prev = tok;
        -:  509:
     1388:  510:        if (prevIsLhs || !Token::Match(tok, "%oror%|&&|?|:"))
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
     1368:  511:            continue;
        -:  512:
       20:  513:        if (tok->hasKnownIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
       14:  514:            return tok;
        -:  515:
        -:  516:        // Is variable protected in LHS..
       18:  517:        bool bailout = false;
function _ZZL32skipValueInConditionalExpressionPK5TokenENKUlS1_E_clES1_ called 138 returned 100% blocks executed 86%
      156:  518:        visitAstNodes(tok->astOperand1(), [&](const Token *tok2) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
      138:  519:            if (tok2->str() == ".")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  520:                return ChildrenToVisit::none;
        -:  521:            // A variable is seen..
      228:  522:            if (tok2 != valuetok && tok2->variable() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 29% (fallthrough)
branch  4 taken 71%
branch  5 taken 75% (fallthrough)
branch  6 taken 25%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
      110:  523:                (tok2->varId() == valuetok->varId() || (!tok2->variable()->isArgument() && !tok2->hasKnownIntValue()))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  524:                // TODO: limit this bailout
       10:  525:                bailout = true;
       10:  526:                return ChildrenToVisit::done;
        -:  527:            }
      128:  528:            return ChildrenToVisit::op1_and_op2;
        -:  529:        });
       18:  530:        if (bailout)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
       10:  531:            return tok;
        -:  532:    }
      682:  533:    return nullptr;
        -:  534:}
        -:  535:
function _ZL13isEscapeScopePK5TokenP9TokenListb called 474 returned 100% blocks executed 89%
      474:  536:static bool isEscapeScope(const Token* tok, TokenList * tokenlist, bool unknown = false)
        -:  537:{
      474:  538:    if (!Token::simpleMatch(tok, "{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  539:        return false;
        -:  540:    // TODO this search for termTok in all subscopes. It should check the end of the scope.
      474:  541:    const Token * termTok = Token::findmatch(tok, "return|continue|break|throw|goto", tok->link());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      474:  542:    if (termTok && termTok->scope() == tok->scope())
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
       70:  543:        return true;
      808:  544:    std::string unknownFunction;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      404:  545:    if (tokenlist && tokenlist->getSettings()->library.isScopeNoReturn(tok->link(), &unknownFunction))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 8% (fallthrough)
branch  8 taken 92%
branch  9 taken 8% (fallthrough)
branch 10 taken 92%
       33:  546:        return unknownFunction.empty() || unknown;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      371:  547:    return false;
        -:  548:}
        -:  549:
function _ZL21bailoutSelfAssignmentPK5Token called 143 returned 100% blocks executed 91%
      143:  550:static bool bailoutSelfAssignment(const Token * const tok)
        -:  551:{
      143:  552:    const Token *parent = tok;
     1275:  553:    while (parent) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      566:  554:        const Token *op = parent;
      566:  555:        parent = parent->astParent();
call    0 returned 100%
        -:  556:
        -:  557:        // Assignment where lhs variable exists in rhs => return true
      989:  558:        if (parent                         != nullptr      &&
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      587:  559:            parent->astOperand2()          == op           &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      894:  560:            parent->astOperand1()          != nullptr      &&
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 18% (fallthrough)
branch  4 taken 82%
      164:  561:            parent->str()                  == "=") {
call    0 returned 100%
call    1 returned 100%
       59:  562:            for (const Token *lhs = parent->astOperand1(); lhs; lhs = lhs->astOperand1()) {
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
call    3 returned 100%
       30:  563:                if (lhs->varId() == tok->varId())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  564:                    return true;
       30:  565:                if (lhs->astOperand2() && lhs->astOperand2()->varId() == tok->varId())
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  566:                    return true;
        -:  567:            }
        -:  568:        }
        -:  569:    }
      143:  570:    return false;
        -:  571:}
        -:  572:
function _ZL9castValueN9ValueFlow5ValueEN9ValueType4SignEi called 19 returned 100% blocks executed 42%
       19:  573:static ValueFlow::Value castValue(ValueFlow::Value value, const ValueType::Sign sign, nonneg int bit)
        -:  574:{
       19:  575:    if (value.isFloatValue()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  576:        value.valueType = ValueFlow::Value::INT;
    #####:  577:        if (value.floatValue >= std::numeric_limits<int>::min() && value.floatValue <= std::numeric_limits<int>::max()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  578:            value.intvalue = value.floatValue;
        -:  579:        } else { // don't perform UB
    #####:  580:            value.intvalue = 0;
        -:  581:        }
        -:  582:    }
       19:  583:    if (bit < MathLib::bigint_bits) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       19:  584:        const MathLib::biguint one = 1;
       19:  585:        value.intvalue &= (one << bit) - 1;
       19:  586:        if (sign == ValueType::Sign::SIGNED && value.intvalue & (one << (bit - 1))) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  587:            value.intvalue |= ~((one << bit) - 1ULL);
        -:  588:        }
        -:  589:    }
       19:  590:    return value;
call    0 returned 100%
        -:  591:}
        -:  592:
function _ZL22combineValuePropertiesRKN9ValueFlow5ValueES2_PS0_ called 174 returned 100% blocks executed 98%
      174:  593:static void combineValueProperties(const ValueFlow::Value &value1, const ValueFlow::Value &value2, ValueFlow::Value *result)
        -:  594:{
      174:  595:    if (value1.isKnown() && value2.isKnown())
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
call    3 returned 100%
branch  4 taken 88% (fallthrough)
branch  5 taken 12%
branch  6 taken 53% (fallthrough)
branch  7 taken 47%
       93:  596:        result->setKnown();
call    0 returned 100%
       81:  597:    else if (value1.isImpossible() || value2.isImpossible())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
        2:  598:        result->setImpossible();
call    0 returned 100%
       79:  599:    else if (value1.isInconclusive() || value2.isInconclusive())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
        2:  600:        result->setInconclusive();
call    0 returned 100%
        -:  601:    else
       77:  602:        result->setPossible();
call    0 returned 100%
      174:  603:    result->condition = value1.condition ? value1.condition : value2.condition;
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      174:  604:    result->varId = (value1.varId != 0U) ? value1.varId : value2.varId;
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
      174:  605:    result->varvalue = (result->varId == value1.varId) ? value1.varvalue : value2.varvalue;
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      174:  606:    result->errorPath = (value1.errorPath.empty() ? value2 : value1).errorPath;
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
call    3 returned 100%
      174:  607:    result->safe = value1.safe || value2.safe;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      174:  608:}
        -:  609:
        -:  610:
function _ZL21getCastTypeStartTokenPK5Token called 2366 returned 100% blocks executed 100%
     2366:  611:static const Token *getCastTypeStartToken(const Token *parent)
        -:  612:{
        -:  613:    // TODO: This might be a generic utility function?
     2366:  614:    if (!parent || parent->str() != "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 87% (fallthrough)
branch  5 taken 13%
branch  6 taken 87% (fallthrough)
branch  7 taken 13%
     2051:  615:        return nullptr;
      315:  616:    if (!parent->astOperand2() && Token::Match(parent,"( %name%"))
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
       24:  617:        return parent->next();
call    0 returned 100%
      291:  618:    if (parent->astOperand2() && Token::Match(parent->astOperand1(), "const_cast|dynamic_cast|reinterpret_cast|static_cast <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        3:  619:        return parent->astOperand1()->tokAt(2);
call    0 returned 100%
call    1 returned 100%
      288:  620:    return nullptr;
        -:  621:}
        -:  622:
        -:  623:/** Set token value for cast */
        -:  624:static void setTokenValueCast(Token *parent, const ValueType &valueType, const ValueFlow::Value &value, const Settings *settings);
        -:  625:
        -:  626:/** set ValueFlow value and perform calculations if possible */
function _ZL13setTokenValueP5TokenRKN9ValueFlow5ValueEPK8Settings called 3010 returned 100% blocks executed 61%
     3010:  627:static void setTokenValue(Token* tok, const ValueFlow::Value &value, const Settings *settings)
        -:  628:{
     3010:  629:    if (!tok->addValue(value))
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
      389:  630:        return;
        -:  631:
     2621:  632:    Token *parent = tok->astParent();
call    0 returned 100%
     2621:  633:    if (!parent)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       43:  634:        return;
        -:  635:
     2578:  636:    if (value.isContainerSizeValue()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  637:        // .empty, .size, +"abc", +'a'
        2:  638:        if (parent->str() == "+") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  639:            for (const ValueFlow::Value &value1 : parent->astOperand1()->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  640:                for (const ValueFlow::Value &value2 : parent->astOperand2()->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  641:                    ValueFlow::Value result;
call    0 never executed
call    1 never executed
    #####:  642:                    result.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####:  643:                    if (value1.isContainerSizeValue() && value2.isContainerSizeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  644:                        result.intvalue = value1.intvalue + value2.intvalue;
    #####:  645:                    else if (value1.isContainerSizeValue() && value2.isTokValue() && value2.tokvalue->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  646:                        result.intvalue = value1.intvalue + Token::getStrLength(value2.tokvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  647:                    else if (value2.isContainerSizeValue() && value1.isTokValue() && value1.tokvalue->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  648:                        result.intvalue = Token::getStrLength(value1.tokvalue) + value2.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  649:                    else
    #####:  650:                        continue;
        -:  651:
    #####:  652:                    combineValueProperties(value1, value2, &result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  653:
    #####:  654:                    setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  655:                }
        -:  656:            }
        -:  657:        }
        -:  658:
        -:  659:
        2:  660:        else if (Token::Match(parent, ". %name% (") && parent->astParent() == parent->tokAt(2) && parent->astOperand1() && parent->astOperand1()->valueType()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####:  661:            const Library::Container *c = parent->astOperand1()->valueType()->container;
call    0 never executed
call    1 never executed
    #####:  662:            const Library::Container::Yield yields = c ? c->getYield(parent->strAt(1)) : Library::Container::Yield::NO_YIELD;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  663:            if (yields == Library::Container::Yield::SIZE) {
branch  0 never executed
branch  1 never executed
    #####:  664:                ValueFlow::Value v(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  665:                v.valueType = ValueFlow::Value::ValueType::INT;
    #####:  666:                setTokenValue(parent->astParent(), v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  667:            } else if (yields == Library::Container::Yield::EMPTY) {
branch  0 never executed
branch  1 never executed
    #####:  668:                ValueFlow::Value v(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  669:                v.intvalue = !v.intvalue;
    #####:  670:                v.valueType = ValueFlow::Value::ValueType::INT;
    #####:  671:                setTokenValue(parent->astParent(), v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  672:            }
        -:  673:        }
        -:  674:
        2:  675:        return;
        -:  676:    }
        -:  677:
     2576:  678:    if (value.isLifetimeValue()) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
      138:  679:        if (!isLifetimeBorrowed(parent, settings))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2:  680:            return;
      136:  681:        if (value.lifetimeKind == ValueFlow::Value::LifetimeKind::Iterator && astIsIterator(parent)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  682:            setTokenValue(parent,value,settings);
call    0 never executed
      166:  683:        } else if (astIsPointer(tok) && astIsPointer(parent) &&
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
call    3 returned 100%
branch  4 taken 27% (fallthrough)
branch  5 taken 73%
branch  6 taken 96% (fallthrough)
branch  7 taken 4%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
       53:  684:                   (parent->isArithmeticalOp() || Token::Match(parent, "( %type%"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        3:  685:            setTokenValue(parent,value,settings);
call    0 returned 100%
        -:  686:        }
      136:  687:        return;
        -:  688:    }
        -:  689:
     2438:  690:    if (value.isUninitValue()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      144:  691:        ValueFlow::Value pvalue = value;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
       72:  692:        if (parent->isUnaryOp("&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
call   11 never executed
call   12 never executed
        3:  693:            pvalue.indirect++;
        3:  694:            setTokenValue(parent, pvalue, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       69:  695:        } else if (Token::Match(parent, ". %var%") && parent->astOperand1() == tok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 26% (fallthrough)
branch  9 taken 74%
       18:  696:            if (parent->originalName() == "->" && pvalue.indirect > 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  697:                pvalue.indirect--;
       18:  698:            setTokenValue(parent->astOperand2(), pvalue, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       51:  699:        } else if (Token::Match(parent->astParent(), ". %var%") && parent->astParent()->astOperand1() == parent) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  700:            if (parent->astParent()->originalName() == "->" && pvalue.indirect > 0)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  701:                pvalue.indirect--;
    #####:  702:            setTokenValue(parent->astParent()->astOperand2(), pvalue, settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       51:  703:        } else if (parent->isUnaryOp("*") && pvalue.indirect > 0) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
call   16 returned 100%
branch 17 taken 2% (fallthrough)
branch 18 taken 98%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
        1:  704:            pvalue.indirect--;
        1:  705:            setTokenValue(parent, pvalue, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  706:        }
       72:  707:        return;
        -:  708:    }
        -:  709:
        -:  710:    // cast..
     2366:  711:    if (const Token *castType = getCastTypeStartToken(parent)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       27:  712:        if (astIsPointer(tok) && value.valueType == ValueFlow::Value::INT &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  713:            Token::simpleMatch(parent->astOperand1(), "dynamic_cast"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  714:            return;
       54:  715:        const ValueType &valueType = ValueType::parseDecl(castType, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
       27:  716:        setTokenValueCast(parent, valueType, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  717:    }
        -:  718:
     2339:  719:    else if (parent->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       53:  720:        setTokenValue(parent,value,settings);
call    0 returned 100%
        -:  721:    }
        -:  722:
     2286:  723:    else if (parent->str() == "?" && tok->str() == ":" && tok == parent->astOperand2() && parent->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
branch 12 taken 98% (fallthrough)
branch 13 taken 2%
branch 14 taken 2% (fallthrough)
branch 15 taken 98%
        -:  724:        // is condition always true/false?
       52:  725:        if (parent->astOperand1()->hasKnownValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        2:  726:            const ValueFlow::Value &condvalue = parent->astOperand1()->values().front();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        2:  727:            const bool cond(condvalue.isTokValue() || (condvalue.isIntValue() && condvalue.intvalue != 0));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        2:  728:            if (cond && !tok->astOperand1()) { // true condition, no second operator
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  729:                setTokenValue(parent, condvalue, settings);
call    0 never executed
        -:  730:            } else {
        2:  731:                const Token *op = cond ? tok->astOperand1() : tok->astOperand2();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
        2:  732:                if (!op) // #7769 segmentation fault at setTokenValue()
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  733:                    return;
        2:  734:                const std::list<ValueFlow::Value> &values = op->values();
call    0 returned 100%
        2:  735:                if (std::find(values.begin(), values.end(), value) != values.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 50% (fallthrough)
branch 12 taken 50%
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        1:  736:                    setTokenValue(parent, value, settings);
call    0 returned 100%
        -:  737:            }
        -:  738:        } else {
        -:  739:            // is condition only depending on 1 variable?
       50:  740:            int varId = 0;
       50:  741:            bool ret = false;
       50:  742:            visitAstNodes(parent->astOperand1(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
function _ZZL13setTokenValueP5TokenRKN9ValueFlow5ValueEPK8SettingsENKUlPKS_E_clES9_ called 158 returned 100% blocks executed 100%
      158:  743:            [&](const Token *t) {
      158:  744:                if (t->varId()) {
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
       70:  745:                    if (varId > 0 || value.varId != 0U)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      162:  746:                        ret = true;
       35:  747:                    varId = t->varId();
call    0 returned 100%
      123:  748:                } else if (t->str() == "(" && Token::Match(t->previous(), "%name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 20% (fallthrough)
branch  7 taken 80%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
        2:  749:                    ret = true; // function call
      158:  750:                return ret ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  751:            });
       50:  752:            if (ret)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        4:  753:                return;
        -:  754:
       92:  755:            ValueFlow::Value v(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
       46:  756:            v.conditional = true;
       46:  757:            v.changeKnownToPossible();
call    0 returned 100%
        -:  758:
       46:  759:            if (varId)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       31:  760:                v.varId = varId;
        -:  761:
       46:  762:            setTokenValue(parent, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  763:        }
        -:  764:    }
        -:  765:
        -:  766:    // Calculations..
     7276:  767:    else if ((parent->isArithmeticalOp() || parent->isComparisonOp() || (parent->tokType() == Token::eBitOp) || (parent->tokType() == Token::eLogicalOp)) &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 78% (fallthrough)
branch  3 taken 22%
call    4 returned 100%
branch  5 taken 95% (fallthrough)
branch  6 taken 5%
call    7 returned 100%
branch  8 taken 3% (fallthrough)
branch  9 taken 97%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 31% (fallthrough)
branch 13 taken 69%
     3820:  768:             parent->astOperand1() &&
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
call    2 returned 100%
branch  3 taken 88% (fallthrough)
branch  4 taken 12%
      793:  769:             parent->astOperand2()) {
call    0 returned 100%
        -:  770:
      699:  771:        const bool noninvertible = parent->isComparisonOp() || Token::Match(parent, "%|/|&|%or%");
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
call    3 returned 100%
branch  4 taken 39% (fallthrough)
branch  5 taken 61%
        -:  772:
        -:  773:        // Skip operators with impossible values that are not invertible
      699:  774:        if (noninvertible && value.isImpossible())
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        5:  775:            return;
        -:  776:
        -:  777:        // known result when a operand is 0.
      694:  778:        if (Token::Match(parent, "[&*]") && value.isKnown() && value.isIntValue() && value.intvalue==0) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  779:            setTokenValue(parent, value, settings);
call    0 never executed
    #####:  780:            return;
        -:  781:        }
        -:  782:
        -:  783:        // known result when a operand is true.
      694:  784:        if (Token::simpleMatch(parent, "&&") && value.isKnown() && value.isIntValue() && value.intvalue==0) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  785:            setTokenValue(parent, value, settings);
call    0 never executed
    #####:  786:            return;
        -:  787:        }
        -:  788:
        -:  789:        // known result when a operand is false.
      694:  790:        if (Token::simpleMatch(parent, "||") && value.isKnown() && value.isIntValue() && value.intvalue!=0) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:  791:            setTokenValue(parent, value, settings);
call    0 never executed
    #####:  792:            return;
        -:  793:        }
        -:  794:
     1023:  795:        for (const ValueFlow::Value &value1 : parent->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 32% (fallthrough)
branch  6 taken 68%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
call   13 never executed
      329:  796:            if (noninvertible && value1.isImpossible())
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  797:                continue;
      329:  798:            if (!value1.isIntValue() && !value1.isFloatValue() && !value1.isTokValue())
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
branch  4 taken 64% (fallthrough)
branch  5 taken 36%
call    6 returned 100%
branch  7 taken 48% (fallthrough)
branch  8 taken 52%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
       12:  799:                continue;
      317:  800:            if (value1.isTokValue() && (!parent->isComparisonOp() || value1.tokvalue->tokType() != Token::eString))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 92% (fallthrough)
branch  5 taken 8%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
       13:  801:                continue;
      480:  802:            for (const ValueFlow::Value &value2 : parent->astOperand2()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 37% (fallthrough)
branch  6 taken 63%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
      176:  803:                if (noninvertible && value2.isImpossible())
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  804:                    continue;
      176:  805:                if (!value2.isIntValue() && !value2.isFloatValue() && !value2.isTokValue())
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
call    3 returned 100%
branch  4 taken 10% (fallthrough)
branch  5 taken 90%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        1:  806:                    continue;
      175:  807:                if (value2.isTokValue() && (!parent->isComparisonOp() || value2.tokvalue->tokType() != Token::eString || value1.isTokValue()))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  808:                    continue;
      352:  809:                if (value1.isKnown() || value2.isKnown() || value1.varId == 0U || value2.varId == 0U ||
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
call    3 returned 100%
branch  4 taken 8% (fallthrough)
branch  5 taken 92%
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 40% (fallthrough)
branch 11 taken 60%
branch 12 taken 98% (fallthrough)
branch 13 taken 2%
        9:  810:                    (value1.varId == value2.varId && value1.varvalue == value2.varvalue && value1.isIntValue() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        2:  811:                     value2.isIntValue())) {
call    0 returned 100%
      344:  812:                    ValueFlow::Value result(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      172:  813:                    combineValueProperties(value1, value2, &result);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      172:  814:                    const float floatValue1 = value1.isIntValue() ? value1.intvalue : value1.floatValue;
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
      172:  815:                    const float floatValue2 = value2.isIntValue() ? value2.intvalue : value2.floatValue;
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
      172:  816:                    switch (parent->str()[0]) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 13%
branch  6 taken 0%
branch  7 taken 18%
branch  8 taken 31%
branch  9 taken 13%
branch 10 taken 12%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
       20:  817:                    case '+':
       20:  818:                        if (value1.isTokValue() || value2.isTokValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  819:                            break;
       20:  820:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  821:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  822:                            result.floatValue = floatValue1 + floatValue2;
        -:  823:                        } else {
       20:  824:                            result.intvalue = value1.intvalue + value2.intvalue;
        -:  825:                        }
       20:  826:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20:  827:                        break;
    #####:  828:                    case '-':
    #####:  829:                        if (value1.isTokValue() || value2.isTokValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  830:                            break;
    #####:  831:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  832:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  833:                            result.floatValue = floatValue1 - floatValue2;
        -:  834:                        } else {
    #####:  835:                            result.intvalue = value1.intvalue - value2.intvalue;
        -:  836:                        }
    #####:  837:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  838:                        break;
        1:  839:                    case '*':
        1:  840:                        if (value1.isTokValue() || value2.isTokValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  841:                            break;
        1:  842:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  843:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  844:                            result.floatValue = floatValue1 * floatValue2;
        -:  845:                        } else {
        1:  846:                            result.intvalue = value1.intvalue * value2.intvalue;
        -:  847:                        }
        1:  848:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  849:                        break;
       22:  850:                    case '/':
       22:  851:                        if (value1.isTokValue() || value2.isTokValue() || value2.intvalue == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 91% (fallthrough)
branch  7 taken 9%
branch  8 taken 91% (fallthrough)
branch  9 taken 9%
       20:  852:                            break;
        2:  853:                        if (value1.isFloatValue() || value2.isFloatValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  854:                            result.valueType = ValueFlow::Value::FLOAT;
    #####:  855:                            result.floatValue = floatValue1 / floatValue2;
        -:  856:                        } else {
        2:  857:                            result.intvalue = value1.intvalue / value2.intvalue;
        -:  858:                        }
        2:  859:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  860:                        break;
    #####:  861:                    case '%':
    #####:  862:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  863:                            break;
    #####:  864:                        if (value2.intvalue == 0)
branch  0 never executed
branch  1 never executed
    #####:  865:                            break;
    #####:  866:                        result.intvalue = value1.intvalue % value2.intvalue;
    #####:  867:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  868:                        break;
       31:  869:                    case '=':
       31:  870:                        if (parent->str() == "==") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       62:  871:                            if ((value1.isIntValue() && value2.isTokValue()) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
       31:  872:                                (value1.isTokValue() && value2.isIntValue())) {
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  873:                                result.intvalue = 0;
    #####:  874:                                setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
       31:  875:                            } else if (value1.isIntValue() && value2.isIntValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       31:  876:                                result.intvalue = value1.intvalue == value2.intvalue;
       31:  877:                                setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  878:                            }
        -:  879:                        }
       31:  880:                        break;
       53:  881:                    case '!':
       53:  882:                        if (parent->str() == "!=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      106:  883:                            if ((value1.isIntValue() && value2.isTokValue()) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
       53:  884:                                (value1.isTokValue() && value2.isIntValue())) {
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  885:                                result.intvalue = 1;
    #####:  886:                                setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
       53:  887:                            } else if (value1.isIntValue() && value2.isIntValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 92% (fallthrough)
branch  5 taken 8%
branch  6 taken 92% (fallthrough)
branch  7 taken 8%
       49:  888:                                result.intvalue = value1.intvalue != value2.intvalue;
       49:  889:                                setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  890:                            }
        -:  891:                        }
       53:  892:                        break;
       22:  893:                    case '>': {
       22:  894:                        const bool f = value1.isFloatValue() || value2.isFloatValue();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       22:  895:                        if (!f && !value1.isIntValue() && !value2.isIntValue())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  896:                            break;
       22:  897:                        if (parent->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
        4:  898:                            result.intvalue = f ? (floatValue1 > floatValue2) : (value1.intvalue > value2.intvalue);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       18:  899:                        else if (parent->str() == ">=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        6:  900:                            result.intvalue = f ? (floatValue1 >= floatValue2) : (value1.intvalue >= value2.intvalue);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:  901:                        else if (!f && parent->str() == ">>" && value1.intvalue >= 0 && value2.intvalue >= 0 && value2.intvalue < MathLib::bigint_bits)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
branch  8 taken 70% (fallthrough)
branch  9 taken 30%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 58% (fallthrough)
branch 13 taken 42%
        7:  902:                            result.intvalue = value1.intvalue >> value2.intvalue;
        -:  903:                        else
        5:  904:                            break;
       17:  905:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       17:  906:                        break;
        -:  907:                    }
       21:  908:                    case '<': {
       21:  909:                        const bool f = value1.isFloatValue() || value2.isFloatValue();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       21:  910:                        if (!f && !value1.isIntValue() && !value2.isIntValue())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  911:                            break;
       21:  912:                        if (parent->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
       14:  913:                            result.intvalue = f ? (floatValue1 < floatValue2) : (value1.intvalue < value2.intvalue);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        7:  914:                        else if (parent->str() == "<=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
        2:  915:                            result.intvalue = f ? (floatValue1 <= floatValue2) : (value1.intvalue <= value2.intvalue);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  916:                        else if (!f && parent->str() == "<<" && value1.intvalue >= 0 && value2.intvalue >= 0 && value2.intvalue < MathLib::bigint_bits)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 60% (fallthrough)
branch  7 taken 40%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  917:                            result.intvalue = value1.intvalue << value2.intvalue;
        -:  918:                        else
        5:  919:                            break;
       16:  920:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:  921:                        break;
        -:  922:                    }
        2:  923:                    case '&':
        2:  924:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  925:                            break;
        2:  926:                        if (parent->str() == "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  927:                            result.intvalue = value1.intvalue & value2.intvalue;
        -:  928:                        else
        2:  929:                            result.intvalue = value1.intvalue && value2.intvalue;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  930:                        setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  931:                        break;
    #####:  932:                    case '|':
    #####:  933:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  934:                            break;
    #####:  935:                        if (parent->str() == "|")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  936:                            result.intvalue = value1.intvalue | value2.intvalue;
        -:  937:                        else
    #####:  938:                            result.intvalue = value1.intvalue || value2.intvalue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  939:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:                        break;
    #####:  941:                    case '^':
    #####:  942:                        if (!value1.isIntValue() || !value2.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  943:                            break;
    #####:  944:                        result.intvalue = value1.intvalue ^ value2.intvalue;
    #####:  945:                        setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:                        break;
    #####:  947:                    default:
        -:  948:                        // unhandled operator, do nothing
    #####:  949:                        break;
        -:  950:                    }
        -:  951:                }
        -:  952:            }
        -:  953:        }
        -:  954:    }
        -:  955:
        -:  956:    // !
     1535:  957:    else if (parent->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       32:  958:        for (const ValueFlow::Value &val : tok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
       16:  959:            if (!val.isIntValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  960:                continue;
       32:  961:            ValueFlow::Value v(val);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       16:  962:            v.intvalue = !v.intvalue;
       16:  963:            setTokenValue(parent, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  964:        }
        -:  965:    }
        -:  966:
        -:  967:    // ~
     1519:  968:    else if (parent->str() == "~") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        4:  969:        for (const ValueFlow::Value &val : tok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
        2:  970:            if (!val.isIntValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  971:                continue;
        4:  972:            ValueFlow::Value v(val);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        2:  973:            v.intvalue = ~v.intvalue;
        2:  974:            int bits = 0;
        4:  975:            if (settings &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:  976:                tok->valueType() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6:  977:                tok->valueType()->sign == ValueType::Sign::UNSIGNED &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2:  978:                tok->valueType()->pointer == 0) {
call    0 returned 100%
        2:  979:                if (tok->valueType()->type == ValueType::Type::INT)
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  980:                    bits = settings->int_bit;
        1:  981:                else if (tok->valueType()->type == ValueType::Type::LONG)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  982:                    bits = settings->long_bit;
        -:  983:            }
        2:  984:            if (bits > 0 && bits < MathLib::bigint_bits)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:  985:                v.intvalue &= (((MathLib::biguint)1)<<bits) - 1;
        2:  986:            setTokenValue(parent, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  987:        }
        -:  988:    }
        -:  989:
        -:  990:    // unary minus
     1517:  991:    else if (parent->isUnaryOp("-")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 never executed
call   12 never executed
call   13 never executed
       13:  992:        for (const ValueFlow::Value &val : tok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 69% (fallthrough)
branch  5 taken 31%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
        9:  993:            if (!val.isIntValue() && !val.isFloatValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  994:                continue;
       18:  995:            ValueFlow::Value v(val);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        9:  996:            if (v.isIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        9:  997:                v.intvalue = -v.intvalue;
        -:  998:            else
    #####:  999:                v.floatValue = -v.floatValue;
        9: 1000:            setTokenValue(parent, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1001:        }
        -: 1002:    }
        -: 1003:
        -: 1004:    // Array element
     1513: 1005:    else if (parent->str() == "[" && parent->isBinaryOp()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
      156: 1006:        for (const ValueFlow::Value &value1 : parent->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        1: 1007:            if (!value1.isTokValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1008:                continue;
        2: 1009:            for (const ValueFlow::Value &value2 : parent->astOperand2()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        1: 1010:                if (!value2.isIntValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1011:                    continue;
        1: 1012:                if (value1.varId == 0U || value2.varId == 0U ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####: 1013:                    (value1.varId == value2.varId && value1.varvalue == value2.varvalue)) {
branch  0 never executed
branch  1 never executed
        2: 1014:                    ValueFlow::Value result(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        1: 1015:                    result.condition = value1.condition ? value1.condition : value2.condition;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1: 1016:                    result.setInconclusive(value1.isInconclusive() | value2.isInconclusive());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1: 1017:                    result.varId = (value1.varId != 0U) ? value1.varId : value2.varId;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1018:                    result.varvalue = (result.varId == value1.varId) ? value1.intvalue : value2.intvalue;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1019:                    if (value1.valueKind == value2.valueKind)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1020:                        result.valueKind = value1.valueKind;
        1: 1021:                    if (value1.tokvalue->tokType() == Token::eString) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1022:                        const std::string s = value1.tokvalue->strValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1023:                        const MathLib::bigint index = value2.intvalue;
    #####: 1024:                        if (index == s.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1025:                            result.intvalue = 0;
    #####: 1026:                            setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:                        } else if (index >= 0 && index < s.size()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1028:                            result.intvalue = s[index];
call    0 never executed
    #####: 1029:                            setTokenValue(parent, result, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1030:                        }
        1: 1031:                    } else if (value1.tokvalue->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 1032:                        MathLib::bigint index = value2.intvalue;
        1: 1033:                        const Token *element = value1.tokvalue->next();
call    0 returned 100%
        1: 1034:                        while (index > 0 && element->str() != "}") {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1035:                            if (element->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1036:                                --index;
    #####: 1037:                            if (Token::Match(element, "[{}()[]]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1038:                                break;
    #####: 1039:                            element = element->next();
call    0 never executed
        -: 1040:                        }
        1: 1041:                        if (Token::Match(element, "%num% [,}]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 1042:                            result.intvalue = MathLib::toLongNumber(element->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 1043:                            setTokenValue(parent, result, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1044:                        }
        -: 1045:                    }
        -: 1046:                }
        -: 1047:            }
        -: 1048:        }
        -: 1049:    }
        -: 1050:
     1358: 1051:    else if (Token::Match(parent, ":: %name%") && parent->astOperand2() == tok) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        3: 1052:        setTokenValue(parent, value, settings);
call    0 returned 100%
        -: 1053:    }
        -: 1054:}
        -: 1055:
function _ZL17setTokenValueCastP5TokenRK9ValueTypeRKN9ValueFlow5ValueEPK8Settings called 27 returned 100% blocks executed 30%
       27: 1056:static void setTokenValueCast(Token *parent, const ValueType &valueType, const ValueFlow::Value &value, const Settings *settings)
        -: 1057:{
       27: 1058:    if (valueType.pointer)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        3: 1059:        setTokenValue(parent,value,settings);
call    0 returned 100%
       24: 1060:    else if (valueType.type == ValueType::Type::CHAR)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1061:        setTokenValue(parent, castValue(value, valueType.sign, settings->char_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
       24: 1062:    else if (valueType.type == ValueType::Type::SHORT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1063:        setTokenValue(parent, castValue(value, valueType.sign, settings->short_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
       24: 1064:    else if (valueType.type == ValueType::Type::INT)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
       19: 1065:        setTokenValue(parent, castValue(value, valueType.sign, settings->int_bit), settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
        5: 1066:    else if (valueType.type == ValueType::Type::LONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1067:        setTokenValue(parent, castValue(value, valueType.sign, settings->long_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        5: 1068:    else if (valueType.type == ValueType::Type::LONGLONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1069:        setTokenValue(parent, castValue(value, valueType.sign, settings->long_long_bit), settings);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        5: 1070:    else if (value.isIntValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5: 1071:        const long long charMax = settings->signedCharMax();
call    0 returned 100%
        5: 1072:        const long long charMin = settings->signedCharMin();
call    0 returned 100%
        5: 1073:        if (charMin <= value.intvalue && value.intvalue <= charMax) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 1074:            // unknown type, but value is small so there should be no truncation etc
        5: 1075:            setTokenValue(parent,value,settings);
call    0 returned 100%
        -: 1076:        }
        -: 1077:    }
       27: 1078:}
        -: 1079:
function _ZL13getSizeOfTypePK5TokenPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1080:static nonneg int getSizeOfType(const Token *typeTok, const Settings *settings)
        -: 1081:{
    #####: 1082:    const std::string &typeStr = typeTok->str();
call    0 never executed
    #####: 1083:    if (typeStr == "char")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1084:        return 1;
    #####: 1085:    else if (typeStr == "short")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1086:        return settings->sizeof_short;
    #####: 1087:    else if (typeStr == "int")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1088:        return settings->sizeof_int;
    #####: 1089:    else if (typeStr == "long")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1090:        return typeTok->isLong() ? settings->sizeof_long_long : settings->sizeof_long;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1091:    else if (typeStr == "wchar_t")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1092:        return settings->sizeof_wchar_t;
        -: 1093:    else
    #####: 1094:        return 0;
        -: 1095:}
        -: 1096:
function _ZL9getSizeOfRK9ValueTypePK8Settings called 598 returned 100% blocks executed 85%
      598: 1097:static size_t getSizeOf(const ValueType &vt, const Settings *settings)
        -: 1098:{
      598: 1099:    if (vt.pointer)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       54: 1100:        return settings->sizeof_pointer;
      544: 1101:    else if (vt.type == ValueType::Type::CHAR)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        5: 1102:        return 1;
      539: 1103:    else if (vt.type == ValueType::Type::SHORT)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3: 1104:        return settings->sizeof_short;
      536: 1105:    else if (vt.type == ValueType::Type::WCHAR_T)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1106:        return settings->sizeof_wchar_t;
      536: 1107:    else if (vt.type == ValueType::Type::INT)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      506: 1108:        return settings->sizeof_int;
       30: 1109:    else if (vt.type == ValueType::Type::LONG)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        2: 1110:        return settings->sizeof_long;
       28: 1111:    else if (vt.type == ValueType::Type::LONGLONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1112:        return settings->sizeof_long_long;
       28: 1113:    else if (vt.type == ValueType::Type::FLOAT)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        2: 1114:        return settings->sizeof_float;
       26: 1115:    else if (vt.type == ValueType::Type::DOUBLE)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1116:        return settings->sizeof_double;
        -: 1117:
       26: 1118:    return 0;
        -: 1119:}
        -: 1120:
        -: 1121:// Handle various constants..
function _ZL25valueFlowSetConstantValueP5TokenPK8Settingsb called 28943 returned 100% blocks executed 53%
    28943: 1122:static Token * valueFlowSetConstantValue(Token *tok, const Settings *settings, bool cpp)
        -: 1123:{
    28943: 1124:    if ((tok->isNumber() && MathLib::isInt(tok->str())) || (tok->tokType() == Token::eChar)) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 5% (fallthrough)
branch 11 taken 95%
     2610: 1125:        ValueFlow::Value value(MathLib::toLongNumber(tok->str()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
     1305: 1126:        if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     1301: 1127:            value.setKnown();
call    0 returned 100%
     1305: 1128:        setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    27638: 1129:    } else if (tok->isNumber() && MathLib::isFloat(tok->str())) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       52: 1130:        ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       26: 1131:        value.valueType = ValueFlow::Value::FLOAT;
       26: 1132:        value.floatValue = MathLib::toDoubleNumber(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       26: 1133:        if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       26: 1134:            value.setKnown();
call    0 returned 100%
       26: 1135:        setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    27612: 1136:    } else if (tok->enumerator() && tok->enumerator()->value_known) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       44: 1137:        ValueFlow::Value value(tok->enumerator()->value);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
call    4 never executed
       22: 1138:        if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       22: 1139:            value.setKnown();
call    0 returned 100%
       22: 1140:        setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    27590: 1141:    } else if (tok->str() == "NULL" || (cpp && tok->str() == "nullptr")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       16: 1142:        ValueFlow::Value value(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        8: 1143:        if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        8: 1144:            value.setKnown();
call    0 returned 100%
        8: 1145:        setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    27582: 1146:    } else if (Token::simpleMatch(tok, "sizeof (")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       14: 1147:        const Token *tok2 = tok->tokAt(2);
call    0 returned 100%
        -: 1148:        // skip over tokens to find variable or type
       14: 1149:        while (Token::Match(tok2, "%name% ::|.|[")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1150:            if (tok2->next()->str() == "[")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1151:                tok2 = tok2->linkAt(1)->next();
call    0 never executed
call    1 never executed
        -: 1152:            else
    #####: 1153:                tok2 = tok2->tokAt(2);
call    0 never executed
        -: 1154:        }
       14: 1155:        if (Token::simpleMatch(tok, "sizeof ( *")) {
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        2: 1156:            const ValueType *vt = tok->tokAt(2)->valueType();
call    0 returned 100%
call    1 returned 100%
        2: 1157:            const size_t sz = vt ? getSizeOf(*vt, settings) : 0;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2: 1158:            if (sz > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 1159:                ValueFlow::Value value(sz);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        2: 1160:                if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        2: 1161:                    value.setKnown();
call    0 returned 100%
        2: 1162:                setTokenValue(tok->next(), value, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1163:            }
       12: 1164:        } else if (tok2->enumerator() && tok2->enumerator()->scope) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1165:            long long size = settings->sizeof_int;
    #####: 1166:            const Token * type = tok2->enumerator()->scope->enumType;
call    0 never executed
    #####: 1167:            if (type) {
branch  0 never executed
branch  1 never executed
    #####: 1168:                size = getSizeOfType(type, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1169:            }
    #####: 1170:            ValueFlow::Value value(size);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1171:            if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1172:                value.setKnown();
call    0 never executed
    #####: 1173:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1174:            setTokenValue(tok->next(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       12: 1175:        } else if (tok2->type() && tok2->type()->isEnumType()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1176:            long long size = settings->sizeof_int;
    #####: 1177:            if (tok2->type()->classScope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1178:                const Token * type = tok2->type()->classScope->enumType;
call    0 never executed
    #####: 1179:                if (type) {
branch  0 never executed
branch  1 never executed
    #####: 1180:                    size = getSizeOfType(type, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1181:                }
        -: 1182:            }
    #####: 1183:            ValueFlow::Value value(size);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1184:            if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1185:                value.setKnown();
call    0 never executed
    #####: 1186:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1187:            setTokenValue(tok->next(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       12: 1188:        } else if (Token::Match(tok, "sizeof ( %var% ) / sizeof (") && tok->next()->astParent() == tok->tokAt(4)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -: 1189:            // Get number of elements in array
    #####: 1190:            const Token *sz1 = tok->tokAt(2);
call    0 never executed
    #####: 1191:            const Token *sz2 = tok->tokAt(7);
call    0 never executed
    #####: 1192:            const int varid1 = sz1->varId();
call    0 never executed
    #####: 1193:            if (varid1 &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1194:                sz1->variable() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1195:                sz1->variable()->isArray() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1196:                !sz1->variable()->dimensions().empty() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1197:                sz1->variable()->dimensionKnown(0) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1198:                (Token::Match(sz2, "* %varid% )", varid1) || Token::Match(sz2, "%varid% [ 0 ] )", varid1))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1199:                ValueFlow::Value value(sz1->variable()->dimension(0));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1200:                if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1201:                    value.setKnown();
call    0 never executed
    #####: 1202:                setTokenValue(tok->tokAt(4), value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1203:            }
       12: 1204:        } else if (Token::Match(tok2, "%var% )")) {
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
        5: 1205:            const Variable *var = tok2->variable();
call    0 returned 100%
        -: 1206:            // only look for single token types (no pointers or references yet)
        5: 1207:            if (var && var->typeStartToken() == var->typeEndToken()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        -: 1208:                // find the size of the type
        5: 1209:                size_t size = 0;
        5: 1210:                if (var->isEnumType()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1211:                    size = settings->sizeof_int;
    #####: 1212:                    if (var->type()->classScope && var->type()->classScope->enumType)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1213:                        size = getSizeOfType(var->type()->classScope->enumType, settings);
call    0 never executed
call    1 never executed
        5: 1214:                } else if (var->valueType()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5: 1215:                    size = getSizeOf(*var->valueType(), settings);
call    0 returned 100%
call    1 returned 100%
    #####: 1216:                } else if (!var->type()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1217:                    size = getSizeOfType(var->typeStartToken(), settings);
call    0 never executed
call    1 never executed
        -: 1218:                }
        -: 1219:                // find the number of elements
        5: 1220:                size_t count = 1;
        7: 1221:                for (size_t i = 0; i < var->dimensions().size(); ++i) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
        2: 1222:                    if (var->dimensionKnown(i))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 1223:                        count *= var->dimension(i);
call    0 returned 100%
        -: 1224:                    else
    #####: 1225:                        count = 0;
        -: 1226:                }
        5: 1227:                if (size && count > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       10: 1228:                    ValueFlow::Value value(count * size);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        5: 1229:                    if (settings->platformType != cppcheck::Platform::Unspecified)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5: 1230:                        value.setKnown();
call    0 returned 100%
        5: 1231:                    setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 1232:                    setTokenValue(tok->next(), value, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1233:                }
        -: 1234:            }
        7: 1235:        } else if (!tok2->type()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       14: 1236:            const ValueType &vt = ValueType::parseDecl(tok2,settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        7: 1237:            const size_t sz = getSizeOf(vt, settings);
call    0 returned 100%
        7: 1238:            if (sz > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       14: 1239:                ValueFlow::Value value(sz);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        7: 1240:                if (!tok2->isTemplateArg() && settings->platformType != cppcheck::Platform::Unspecified)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        7: 1241:                    value.setKnown();
call    0 returned 100%
        7: 1242:                setTokenValue(tok->next(), value, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1243:            }
        -: 1244:        }
        -: 1245:        // skip over enum
       14: 1246:        tok = tok->linkAt(1);
call    0 returned 100%
        -: 1247:    }
    28943: 1248:    return tok->next();
call    0 returned 100%
        -: 1249:}
        -: 1250:
        -: 1251:
function _ZL15valueFlowNumberP9TokenList called 956 returned 100% blocks executed 90%
      956: 1252:static void valueFlowNumber(TokenList *tokenlist)
        -: 1253:{
    29844: 1254:    for (Token *tok = tokenlist->front(); tok;) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
    28888: 1255:        tok = valueFlowSetConstantValue(tok, tokenlist->getSettings(), tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 1256:    }
        -: 1257:
      956: 1258:    if (tokenlist->isCPP()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    29295: 1259:        for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28361: 1260:            if (tok->isName() && !tok->varId() && Token::Match(tok, "false|true")) {
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
call    3 returned 100%
branch  4 taken 67% (fallthrough)
branch  5 taken 33%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       46: 1261:                ValueFlow::Value value(tok->str() == "true");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
       23: 1262:                if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       23: 1263:                    value.setKnown();
call    0 returned 100%
       23: 1264:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
    28338: 1265:            } else if (Token::Match(tok, "[(,] NULL [,)]")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1266:                // NULL function parameters are not simplified in the
        -: 1267:                // normal tokenlist
        6: 1268:                ValueFlow::Value value(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        3: 1269:                if (!tok->isTemplateArg())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        3: 1270:                    value.setKnown();
call    0 returned 100%
        3: 1271:                setTokenValue(tok->next(), value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 1272:            }
        -: 1273:        }
        -: 1274:    }
      956: 1275:}
        -: 1276:
function _ZL15valueFlowStringP9TokenList called 956 returned 100% blocks executed 87%
      956: 1277:static void valueFlowString(TokenList *tokenlist)
        -: 1278:{
    29888: 1279:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1280:        if (tok->tokType() == Token::eString) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      122: 1281:            ValueFlow::Value strvalue;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       61: 1282:            strvalue.valueType = ValueFlow::Value::TOK;
       61: 1283:            strvalue.tokvalue = tok;
       61: 1284:            strvalue.setKnown();
call    0 returned 100%
       61: 1285:            setTokenValue(tok, strvalue, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1286:        }
        -: 1287:    }
      956: 1288:}
        -: 1289:
function _ZL14valueFlowArrayP9TokenList called 956 returned 100% blocks executed 76%
      956: 1290:static void valueFlowArray(TokenList *tokenlist)
        -: 1291:{
     1912: 1292:    std::map<int, const Token *> constantArrays;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1293:
    29855: 1294:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28899: 1295:        if (tok->varId() > 0U) {
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
        -: 1296:            // array
     7644: 1297:            const std::map<int, const Token *>::const_iterator it = constantArrays.find(tok->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
     3822: 1298:            if (it != constantArrays.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 1299:                ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        1: 1300:                value.valueType = ValueFlow::Value::TOK;
        1: 1301:                value.tokvalue = it->second;
call    0 returned 100%
        1: 1302:                value.setKnown();
call    0 returned 100%
        1: 1303:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1304:            }
        -: 1305:
        -: 1306:            // pointer = array
    11368: 1307:            else if (tok->variable() &&
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
     3823: 1308:                     tok->variable()->isArray() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       99: 1309:                     Token::simpleMatch(tok->astParent(), "=") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        4: 1310:                     tok == tok->astParent()->astOperand2() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 1311:                     tok->astParent()->astOperand1() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     3825: 1312:                     tok->astParent()->astOperand1()->variable() &&
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        2: 1313:                     tok->astParent()->astOperand1()->variable()->isPointer()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4: 1314:                ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        2: 1315:                value.valueType = ValueFlow::Value::TOK;
        2: 1316:                value.tokvalue = tok;
        2: 1317:                value.setKnown();
call    0 returned 100%
        2: 1318:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1319:            }
     3822: 1320:            continue;
        -: 1321:        }
        -: 1322:
    25077: 1323:        if (Token::Match(tok, "const %type% %var% [ %num%| ] = {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 1324:            const Token *vartok = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1325:            const Token *rhstok = vartok->next()->link()->tokAt(2);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2: 1326:            constantArrays[vartok->varId()] = rhstok;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 1327:            tok = rhstok->link();
call    0 returned 100%
        2: 1328:            continue;
        -: 1329:        }
        -: 1330:
    25075: 1331:        else if (Token::Match(tok, "const char %var% [ %num%| ] = %str% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1332:            const Token *vartok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1333:            const Token *strtok = vartok->next()->link()->tokAt(2);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1334:            constantArrays[vartok->varId()] = strtok;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1335:            tok = strtok->next();
call    0 never executed
    #####: 1336:            continue;
        -: 1337:        }
        -: 1338:    }
      956: 1339:}
        -: 1340:
function _ZL9isNonZeroPK5Token called 122 returned 100% blocks executed 100%
      122: 1341:static bool isNonZero(const Token *tok)
        -: 1342:{
      122: 1343:    return tok && (!tok->hasKnownIntValue() || tok->values().front().intvalue != 0);
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 64% (fallthrough)
branch  4 taken 36%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 90% (fallthrough)
branch  8 taken 10%
        -: 1344:}
        -: 1345:
function _ZL15getOtherOperandPK5Token called 122 returned 100% blocks executed 82%
      122: 1346:static const Token *getOtherOperand(const Token *tok)
        -: 1347:{
      122: 1348:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1349:        return nullptr;
      122: 1350:    if (!tok->astParent())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1351:        return nullptr;
      122: 1352:    if (tok->astParent()->astOperand1() != tok)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
       19: 1353:        return tok->astParent()->astOperand1();
call    0 returned 100%
call    1 returned 100%
      103: 1354:    if (tok->astParent()->astOperand2() != tok)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      103: 1355:        return tok->astParent()->astOperand2();
call    0 returned 100%
call    1 returned 100%
    #####: 1356:    return nullptr;
        -: 1357:}
        -: 1358:
function _ZL18valueFlowArrayBoolP9TokenList called 1192 returned 100% blocks executed 75%
     1192: 1359:static void valueFlowArrayBool(TokenList *tokenlist)
        -: 1360:{
    39187: 1361:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37995: 1362:        if (tok->hasKnownIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
    40004: 1363:            continue;
    35868: 1364:        const Variable *var = nullptr;
    35868: 1365:        bool known = false;
        -: 1366:        std::list<ValueFlow::Value>::const_iterator val =
    35986: 1367:            std::find_if(tok->values().begin(), tok->values().end(), std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
    35868: 1368:        if (val == tok->values().end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
    35732: 1369:            var = tok->variable();
call    0 returned 100%
    35732: 1370:            known = true;
        -: 1371:        } else {
      136: 1372:            var = val->tokvalue->variable();
call    0 returned 100%
call    1 returned 100%
      136: 1373:            known = val->isKnown();
call    0 returned 100%
call    1 returned 100%
        -: 1374:        }
    35868: 1375:        if (!var)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
    30937: 1376:            continue;
     4931: 1377:        if (!var->isArray() || var->isArgument() || var->isStlType())
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 98% (fallthrough)
branch 10 taken 2%
     4809: 1378:            continue;
      122: 1379:        if (isNonZero(getOtherOperand(tok)) && Token::Match(tok->astParent(), "%comp%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 4% (fallthrough)
branch 11 taken 96%
branch 12 taken 3% (fallthrough)
branch 13 taken 97%
        4: 1380:            continue;
        -: 1381:        // TODO: Check for function argument
      236: 1382:        if ((astIsBool(tok->astParent()) && !Token::Match(tok->astParent(), "(|%name%")) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
      236: 1383:            (tok->astParent() && Token::Match(tok->astParent()->previous(), "if|while|for ("))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1384:            ValueFlow::Value value{1};
call    0 never executed
call    1 never executed
call    2 returned 100%
branch  3 taken 1%
branch  4 taken 99%
call    5 never executed
    #####: 1385:            if (known)
branch  0 never executed
branch  1 never executed
    #####: 1386:                value.setKnown();
call    0 never executed
    #####: 1387:            setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1388:        }
        -: 1389:    }
     1192: 1390:}
call    0 never executed
        -: 1391:
function _ZL21valueFlowPointerAliasP9TokenList called 956 returned 100% blocks executed 86%
      956: 1392:static void valueFlowPointerAlias(TokenList *tokenlist)
        -: 1393:{
    29888: 1394:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
        -: 1395:        // not address of
    28932: 1396:        if (!tok->isUnaryOp("&"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 never executed
call   12 never executed
    57762: 1397:            continue;
        -: 1398:
        -: 1399:        // parent should be a '='
       83: 1400:        if (!Token::simpleMatch(tok->astParent(), "="))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 70% (fallthrough)
branch  5 taken 30%
       58: 1401:            continue;
        -: 1402:
        -: 1403:        // child should be some buffer or variable
       25: 1404:        const Token *vartok = tok->astOperand1();
call    0 returned 100%
       53: 1405:        while (vartok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       39: 1406:            if (vartok->str() == "[")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        4: 1407:                vartok = vartok->astOperand1();
call    0 returned 100%
       35: 1408:            else if (vartok->str() == "." || vartok->str() == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 7% (fallthrough)
branch  7 taken 93%
branch  8 taken 29% (fallthrough)
branch  9 taken 71%
       10: 1409:                vartok = vartok->astOperand2();
call    0 returned 100%
        -: 1410:            else
       25: 1411:                break;
        -: 1412:        }
       25: 1413:        if (!(vartok && vartok->variable() && !vartok->variable()->isPointer()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 76% (fallthrough)
branch  4 taken 24%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 24% (fallthrough)
branch 10 taken 76%
        6: 1414:            continue;
        -: 1415:
       38: 1416:        ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       19: 1417:        value.valueType = ValueFlow::Value::TOK;
       19: 1418:        value.tokvalue = tok;
       19: 1419:        setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1420:    }
      956: 1421:}
        -: 1422:
function _ZL26valueFlowPointerAliasDerefP9TokenList called 1192 returned 100% blocks executed 68%
     1192: 1423:static void valueFlowPointerAliasDeref(TokenList *tokenlist)
        -: 1424:{
    39187: 1425:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37995: 1426:        if (!tok->isUnaryOp("*"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 never executed
call   12 never executed
    75877: 1427:            continue;
      105: 1428:        if (!astIsPointer(tok->astOperand1()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
       14: 1429:            continue;
        -: 1430:
       91: 1431:        const Token* lifeTok = nullptr;
       99: 1432:        ErrorPath errorPath;
call    0 returned 100%
call    1 never executed
      108: 1433:        for (const ValueFlow::Value& v:tok->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 16% (fallthrough)
branch  6 taken 84%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
       17: 1434:            if (!v.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
        9: 1435:                continue;
        8: 1436:            lifeTok = v.tokvalue;
        8: 1437:            errorPath = v.errorPath;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1438:        }
       91: 1439:        if (!lifeTok)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       83: 1440:            continue;
        8: 1441:        if (lifeTok->varId() == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1442:            continue;
        8: 1443:        const Variable * var = lifeTok->variable();
call    0 returned 100%
        8: 1444:        if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1445:            continue;
        8: 1446:        if (!var->isConst() && isVariableChanged(lifeTok->next(), tok, lifeTok->varId(), !var->isLocal(), tokenlist->getSettings(), tokenlist->isCPP()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 1447:            continue;
       12: 1448:        for (const ValueFlow::Value& v:lifeTok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 9%
branch 12 taken 91%
call   13 never executed
call   14 never executed
        4: 1449:            if (v.isLifetimeValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1450:                continue;
        8: 1451:            ValueFlow::Value value = v;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 1452:            value.errorPath.insert(value.errorPath.begin(), errorPath.begin(), errorPath.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        4: 1453:            setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1454:        }
        -: 1455:    }
     1192: 1456:}
        -: 1457:
function _ZL15valueFlowBitAndP9TokenList called 956 returned 100% blocks executed 89%
      956: 1458:static void valueFlowBitAnd(TokenList *tokenlist)
        -: 1459:{
    29888: 1460:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1461:        if (tok->str() != "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    28701: 1462:            continue;
        -: 1463:
      231: 1464:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1465:            continue;
        -: 1466:
      231: 1467:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
call    3 returned 100%
branch  4 taken 40% (fallthrough)
branch  5 taken 60%
branch  6 taken 45% (fallthrough)
branch  7 taken 55%
      104: 1468:            continue;
        -: 1469:
        -: 1470:        MathLib::bigint number;
      127: 1471:        if (MathLib::isInt(tok->astOperand1()->str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 1472:            number = MathLib::toLongNumber(tok->astOperand1()->str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      246: 1473:        else if (MathLib::isInt(tok->astOperand2()->str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
        6: 1474:            number = MathLib::toLongNumber(tok->astOperand2()->str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 1475:        else
      120: 1476:            continue;
        -: 1477:
        7: 1478:        int bit = 0;
       81: 1479:        while (bit <= (MathLib::bigint_bits - 2) && ((((MathLib::bigint)1) << bit) < number))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
       37: 1480:            ++bit;
        -: 1481:
        7: 1482:        if ((((MathLib::bigint)1) << bit) == number) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        3: 1483:            setTokenValue(tok, ValueFlow::Value(0), tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
        3: 1484:            setTokenValue(tok, ValueFlow::Value(number), tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
        -: 1485:        }
        -: 1486:    }
      956: 1487:}
        -: 1488:
function _ZL24valueFlowSameExpressionsP9TokenList called 956 returned 100% blocks executed 97%
      956: 1489:static void valueFlowSameExpressions(TokenList *tokenlist)
        -: 1490:{
    29888: 1491:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1492:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
    30370: 1493:            continue;
        -: 1494:
    27415: 1495:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
call    3 returned 100%
branch  4 taken 28% (fallthrough)
branch  5 taken 72%
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
    22792: 1496:            continue;
        -: 1497:
     4623: 1498:        if (tok->astOperand1()->isLiteral() || tok->astOperand2()->isLiteral())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 21% (fallthrough)
branch 11 taken 79%
branch 12 taken 23% (fallthrough)
branch 13 taken 77%
     1075: 1499:            continue;
        -: 1500:
     3548: 1501:        if (!astIsIntegral(tok->astOperand1(), false) && !astIsIntegral(tok->astOperand2(), false))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 84% (fallthrough)
branch  5 taken 16%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 71% (fallthrough)
branch 11 taken 29%
branch 12 taken 60% (fallthrough)
branch 13 taken 40%
     2113: 1502:            continue;
        -: 1503:
     1514: 1504:        ValueFlow::Value val;
call    0 returned 100%
call    1 never executed
        -: 1505:
     1435: 1506:        if (Token::Match(tok, "==|>=|<=|/")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
       35: 1507:            val = ValueFlow::Value(1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       35: 1508:            val.setKnown();
call    0 returned 100%
        -: 1509:        }
        -: 1510:
     1435: 1511:        if (Token::Match(tok, "!=|>|<|%|-")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
       44: 1512:            val = ValueFlow::Value(0);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       44: 1513:            val.setKnown();
call    0 returned 100%
        -: 1514:        }
        -: 1515:
     1435: 1516:        if (!val.isKnown())
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
     1356: 1517:            continue;
        -: 1518:
       79: 1519:        if (isSameExpression(tokenlist->isCPP(), false, tok->astOperand1(), tok->astOperand2(), tokenlist->getSettings()->library, true, true, &val.errorPath)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 14% (fallthrough)
branch  8 taken 86%
       11: 1520:            setTokenValue(tok, val, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 6%
branch  6 taken 94%
        -: 1521:        }
        -: 1522:    }
      956: 1523:}
        -: 1524:
function _ZL29valueFlowTerminatingConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 50%
     1192: 1525:static void valueFlowTerminatingCondition(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 1526:{
     1192: 1527:    const bool cpp = symboldatabase->isCPP();
call    0 returned 100%
        -: 1528:    typedef std::pair<const Token*, const Scope*> Condition;
     2121: 1529:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 59% (fallthrough)
branch  4 taken 41%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     1245: 1530:        bool skipFunction = false;
     2174: 1531:        std::vector<Condition> conds;
call    0 returned 100%
call    1 never executed
    20264: 1532:        for (const Token* tok = scope->bodyStart; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
    19335: 1533:            if (tok->isIncompleteVar()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
      316: 1534:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1535:                    bailout(tokenlist, errorLogger, tok, "Skipping function due to incomplete variable " + tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
      316: 1536:                skipFunction = true;
      316: 1537:                break;
        -: 1538:            }
    19019: 1539:            if (!Token::simpleMatch(tok, "if ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
    37589: 1540:                continue;
        -: 1541:            // Skip known values
      434: 1542:            if (tok->next()->hasKnownValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1543:                continue;
      434: 1544:            const Token * condTok = tok->next();
call    0 returned 100%
      434: 1545:            if (!Token::simpleMatch(condTok->link(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1546:                continue;
      434: 1547:            const Token * blockTok = condTok->link()->tokAt(1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1548:            // Check if the block terminates early
      434: 1549:            if (!isEscapeScope(blockTok, tokenlist))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 84% (fallthrough)
branch  4 taken 16%
      364: 1550:                continue;
        -: 1551:            // Check if any variables are modified in scope
       70: 1552:            bool bail = false;
      192: 1553:            for (const Token * tok2=condTok->next(); tok2 != condTok->link(); tok2 = tok2->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
call    4 returned 100%
      175: 1554:                const Variable * var = tok2->variable();
call    0 returned 100%
      175: 1555:                if (!var)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
      106: 1556:                    continue;
       69: 1557:                if (!var->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1558:                    continue;
       69: 1559:                const Token * endToken = var->scope()->bodyEnd;
call    0 returned 100%
       69: 1560:                if (!var->isLocal() && !var->isConst() && !var->isArgument()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 26% (fallthrough)
branch  4 taken 74%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1561:                    bail = true;
    #####: 1562:                    break;
        -: 1563:                }
       69: 1564:                if (var->isStatic() && !var->isConst()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1565:                    bail = true;
    #####: 1566:                    break;
        -: 1567:                }
       69: 1568:                if (!var->isConst() && var->declEndToken() && isVariableChanged(var->declEndToken()->next(), endToken, tok2->varId(), false, settings, cpp)) {
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 84% (fallthrough)
branch 17 taken 16%
branch 18 taken 77% (fallthrough)
branch 19 taken 23%
       53: 1569:                    bail = true;
       53: 1570:                    break;
        -: 1571:                }
        -: 1572:            }
       70: 1573:            if (bail)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
       53: 1574:                continue;
        -: 1575:            // TODO: Handle multiple conditions
       17: 1576:            if (Token::Match(condTok->astOperand2(), "%oror%|%or%|&|&&"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
        2: 1577:                continue;
       15: 1578:            const Scope * condScope = nullptr;
       47: 1579:            for (const Scope * parent = condTok->scope(); parent; parent = parent->nestedIn) {
call    0 returned 100%
branch  1 taken 68% (fallthrough)
branch  2 taken 32%
       64: 1580:                if (parent->type == Scope::eIf ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       64: 1581:                    parent->type == Scope::eWhile ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32: 1582:                    parent->type == Scope::eSwitch) {
    #####: 1583:                    condScope = parent;
    #####: 1584:                    break;
        -: 1585:                }
        -: 1586:            }
       15: 1587:            conds.emplace_back(condTok->astOperand2(), condScope);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1588:        }
     1245: 1589:        if (skipFunction)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      316: 1590:            break;
      938: 1591:        for (Condition cond:conds) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 75%
branch 11 taken 25%
call   12 never executed
call   13 never executed
        9: 1592:            if (!cond.first)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1593:                continue;
        9: 1594:            Token *const startToken = cond.first->findExpressionStartEndTokens().second->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      155: 1595:            for (Token* tok = startToken; tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
      146: 1596:                if (!Token::Match(tok, "%comp%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
      288: 1597:                    continue;
        -: 1598:                // Skip known values
        2: 1599:                if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1600:                    continue;
        2: 1601:                if (cond.second) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1602:                    bool bail = true;
    #####: 1603:                    for (const Scope * parent = tok->scope()->nestedIn; parent; parent = parent->nestedIn) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1604:                        if (parent == cond.second) {
branch  0 never executed
branch  1 never executed
    #####: 1605:                            bail = false;
    #####: 1606:                            break;
        -: 1607:                        }
        -: 1608:                    }
    #####: 1609:                    if (bail)
branch  0 never executed
branch  1 never executed
    #####: 1610:                        continue;
        -: 1611:                }
        4: 1612:                ErrorPath errorPath;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        2: 1613:                if (isOppositeCond(true, cpp, tok, cond.first, settings->library, true, true, &errorPath)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1614:                    ValueFlow::Value val(1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1615:                    val.setKnown();
call    0 never executed
    #####: 1616:                    val.condition = cond.first;
    #####: 1617:                    val.errorPath = errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1618:                    val.errorPath.emplace_back(cond.first, "Assuming condition '" + cond.first->expressionString() + "' is false");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1619:                    setTokenValue(tok, val, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        2: 1620:                } else if (isSameExpression(cpp, true, tok, cond.first, settings->library, true, true, &errorPath)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1621:                    ValueFlow::Value val(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1622:                    val.setKnown();
call    0 never executed
    #####: 1623:                    val.condition = cond.first;
    #####: 1624:                    val.errorPath = errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1625:                    val.errorPath.emplace_back(cond.first, "Assuming condition '" + cond.first->expressionString() + "' is false");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 1626:                    setTokenValue(tok, val, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1627:                }
        -: 1628:            }
        -: 1629:        }
        -: 1630:    }
     1192: 1631:}
        -: 1632:
function _ZL18getExpressionRangePK5TokenPxS2_ called 8 returned 100% blocks executed 49%
        8: 1633:static bool getExpressionRange(const Token *expr, MathLib::bigint *minvalue, MathLib::bigint *maxvalue)
        -: 1634:{
        8: 1635:    if (expr->hasKnownIntValue()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        4: 1636:        if (minvalue)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 1637:            *minvalue = expr->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
        4: 1638:        if (maxvalue)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 1639:            *maxvalue = expr->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
        4: 1640:        return true;
        -: 1641:    }
        -: 1642:
        4: 1643:    if (expr->str() == "&" && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
        -: 1644:        MathLib::bigint vals[4];
        2: 1645:        bool lhsHasKnownRange = getExpressionRange(expr->astOperand1(), &vals[0], &vals[1]);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 1646:        bool rhsHasKnownRange = getExpressionRange(expr->astOperand2(), &vals[2], &vals[3]);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 1647:        if (!lhsHasKnownRange && !rhsHasKnownRange)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1648:            return false;
        2: 1649:        if (!lhsHasKnownRange || !rhsHasKnownRange) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        2: 1650:            if (minvalue)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1651:                *minvalue = lhsHasKnownRange ? vals[0] : vals[2];
branch  0 never executed
branch  1 never executed
        4: 1652:            if (maxvalue)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1653:                *maxvalue = lhsHasKnownRange ? vals[1] : vals[3];
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1654:        } else {
    #####: 1655:            if (minvalue)
branch  0 never executed
branch  1 never executed
    #####: 1656:                *minvalue = vals[0] & vals[2];
    #####: 1657:            if (maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 1658:                *maxvalue = vals[1] & vals[3];
        -: 1659:        }
        2: 1660:        return true;
        -: 1661:    }
        -: 1662:
        2: 1663:    if (expr->str() == "%" && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -: 1664:        MathLib::bigint vals[4];
    #####: 1665:        if (!getExpressionRange(expr->astOperand2(), &vals[2], &vals[3]))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1666:            return false;
    #####: 1667:        if (vals[2] <= 0)
branch  0 never executed
branch  1 never executed
    #####: 1668:            return false;
    #####: 1669:        bool lhsHasKnownRange = getExpressionRange(expr->astOperand1(), &vals[0], &vals[1]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1670:        if (lhsHasKnownRange && vals[0] < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1671:            return false;
        -: 1672:        // If lhs has unknown value, it must be unsigned
    #####: 1673:        if (!lhsHasKnownRange && (!expr->astOperand1()->valueType() || expr->astOperand1()->valueType()->sign != ValueType::Sign::UNSIGNED))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1674:            return false;
    #####: 1675:        if (minvalue)
branch  0 never executed
branch  1 never executed
    #####: 1676:            *minvalue = 0;
    #####: 1677:        if (maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 1678:            *maxvalue = vals[3] - 1;
    #####: 1679:        return true;
        -: 1680:    }
        -: 1681:
        2: 1682:    return false;
call    0 never executed
        -: 1683:}
        -: 1684:
function _ZL19valueFlowRightShiftP9TokenListPK8Settings called 1192 returned 100% blocks executed 82%
     1192: 1685:static void valueFlowRightShift(TokenList *tokenList, const Settings* settings)
        -: 1686:{
    39187: 1687:    for (Token *tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37995: 1688:        if (tok->str() != ">>")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    75977: 1689:            continue;
        -: 1690:
       11: 1691:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
        1: 1692:            continue;
        -: 1693:
       10: 1694:        if (!tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1695:            continue;
        -: 1696:
       10: 1697:        if (!tok->astOperand2()->hasKnownValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
        2: 1698:            continue;
        -: 1699:
        8: 1700:        const MathLib::bigint rhsvalue = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        8: 1701:        if (rhsvalue < 0)
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        3: 1702:            continue;
        -: 1703:
        5: 1704:        if (!tok->astOperand1()->valueType() || !tok->astOperand1()->valueType()->isIntegral())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 20% (fallthrough)
branch 10 taken 80%
        1: 1705:            continue;
        -: 1706:
        4: 1707:        if (!tok->astOperand2()->valueType() || !tok->astOperand2()->valueType()->isIntegral())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1708:            continue;
        -: 1709:
        4: 1710:        MathLib::bigint lhsmax=0;
        4: 1711:        if (!getExpressionRange(tok->astOperand1(), nullptr, &lhsmax))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1712:            continue;
        4: 1713:        if (lhsmax < 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 1714:            continue;
        -: 1715:        int lhsbits;
        6: 1716:        if ((tok->astOperand1()->valueType()->type == ValueType::Type::CHAR) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        4: 1717:            (tok->astOperand1()->valueType()->type == ValueType::Type::SHORT) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 1718:            (tok->astOperand1()->valueType()->type == ValueType::Type::WCHAR_T) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        6: 1719:            (tok->astOperand1()->valueType()->type == ValueType::Type::BOOL) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2: 1720:            (tok->astOperand1()->valueType()->type == ValueType::Type::INT))
call    0 returned 100%
call    1 returned 100%
        2: 1721:            lhsbits = settings->int_bit;
    #####: 1722:        else if (tok->astOperand1()->valueType()->type == ValueType::Type::LONG)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1723:            lhsbits = settings->long_bit;
    #####: 1724:        else if (tok->astOperand1()->valueType()->type == ValueType::Type::LONGLONG)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1725:            lhsbits = settings->long_long_bit;
        -: 1726:        else
    #####: 1727:            continue;
        2: 1728:        if (rhsvalue >= lhsbits || rhsvalue >= MathLib::bigint_bits || (1ULL << rhsvalue) <= lhsmax)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1729:            continue;
        -: 1730:
        4: 1731:        ValueFlow::Value val(0);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        2: 1732:        val.setKnown();
call    0 returned 100%
        2: 1733:        setTokenValue(tok, val, tokenList->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1734:    }
     1192: 1735:}
        -: 1736:
function _ZL26valueFlowOppositeConditionP14SymbolDatabasePK8Settings called 1192 returned 100% blocks executed 78%
     1192: 1737:static void valueFlowOppositeCondition(SymbolDatabase *symboldatabase, const Settings *settings)
        -: 1738:{
     4620: 1739:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     3428: 1740:        if (scope.type != Scope::eIf)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     2946: 1741:            continue;
      482: 1742:        Token *tok = const_cast<Token *>(scope.classDef);
      482: 1743:        if (!Token::simpleMatch(tok, "if ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1744:            continue;
      482: 1745:        const Token *cond1 = tok->next()->astOperand2();
call    0 returned 100%
call    1 returned 100%
      482: 1746:        if (!cond1 || !cond1->isComparisonOp())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 38% (fallthrough)
branch  4 taken 62%
branch  5 taken 38% (fallthrough)
branch  6 taken 62%
      185: 1747:            continue;
      297: 1748:        const bool cpp = symboldatabase->isCPP();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      297: 1749:        Token *tok2 = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      305: 1750:        while (Token::simpleMatch(tok2, ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
      299: 1751:            tok2 = tok2->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      299: 1752:            if (!Token::simpleMatch(tok2, "} else { if ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
      295: 1753:                break;
        4: 1754:            Token *ifOpenBraceTok = tok2->tokAt(4);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4: 1755:            Token *cond2 = ifOpenBraceTok->astOperand2();
call    0 returned 100%
        4: 1756:            if (!cond2 || !cond2->isComparisonOp())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
        2: 1757:                continue;
        2: 1758:            if (isOppositeCond(true, cpp, cond1, cond2, settings->library, true, true)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1759:                ValueFlow::Value value(1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1760:                value.setKnown();
call    0 never executed
    #####: 1761:                setTokenValue(cond2, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1762:            }
        2: 1763:            tok2 = ifOpenBraceTok->link();
call    0 returned 100%
        -: 1764:        }
        -: 1765:    }
     1192: 1766:}
        -: 1767:
function _ZL23valueFlowGlobalConstVarP9TokenListPK8Settings called 956 returned 100% blocks executed 90%
      956: 1768:static void valueFlowGlobalConstVar(TokenList* tokenList, const Settings *settings)
        -: 1769:{
        -: 1770:    // Get variable values...
     1912: 1771:    std::map<const Variable*, ValueFlow::Value> vars;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    29888: 1772:    for (const Token* tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1773:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
    25203: 1774:            continue;
        -: 1775:        // Initialization...
     8953: 1776:        if (tok == tok->variable()->nameToken() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     2989: 1777:            !tok->variable()->isVolatile() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
     2290: 1778:            !tok->variable()->isArgument() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      844: 1779:            tok->variable()->isConst() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       96: 1780:            tok->valueType() &&
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
       84: 1781:            tok->valueType()->isIntegral() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
       71: 1782:            tok->valueType()->pointer == 0 &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       70: 1783:            tok->valueType()->constness == 1 &&
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
       67: 1784:            Token::Match(tok, "%name% =") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     3793: 1785:            tok->next()->astOperand2() &&
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 31% (fallthrough)
branch  5 taken 69%
       32: 1786:            tok->next()->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       10: 1787:            vars[tok->variable()] = tok->next()->astOperand2()->values().front();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
        -: 1788:        }
        -: 1789:    }
        -: 1790:
        -: 1791:    // Set values..
    29888: 1792:    for (Token* tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1793:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
    54115: 1794:            continue;
     3749: 1795:        std::map<const Variable*, ValueFlow::Value>::const_iterator var = vars.find(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
     3729: 1796:        if (var == vars.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     3709: 1797:            continue;
       20: 1798:        setTokenValue(tok, var->second, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 1%
branch  6 taken 99%
        -: 1799:    }
      956: 1800:}
        -: 1801:
function _ZL24valueFlowGlobalStaticVarP9TokenListPK8Settings called 956 returned 100% blocks executed 90%
      956: 1802:static void valueFlowGlobalStaticVar(TokenList *tokenList, const Settings *settings)
        -: 1803:{
        -: 1804:    // Get variable values...
     1912: 1805:    std::map<const Variable *, ValueFlow::Value> vars;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    29888: 1806:    for (const Token *tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1807:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
    25203: 1808:            continue;
        -: 1809:        // Initialization...
     8953: 1810:        if (tok == tok->variable()->nameToken() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     1510: 1811:            tok->variable()->isStatic() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
       29: 1812:            !tok->variable()->isConst() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
       27: 1813:            tok->valueType() &&
call    0 returned 100%
branch  1 taken 54% (fallthrough)
branch  2 taken 46%
       20: 1814:            tok->valueType()->isIntegral() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       14: 1815:            tok->valueType()->pointer == 0 &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       14: 1816:            tok->valueType()->constness == 0 &&
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
        9: 1817:            Token::Match(tok, "%name% =") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     3733: 1818:            tok->next()->astOperand2() &&
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        2: 1819:            tok->next()->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1: 1820:            vars[tok->variable()] = tok->next()->astOperand2()->values().front();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
        -: 1821:        } else {
        -: 1822:            // If variable is written anywhere in TU then remove it from vars
     3728: 1823:            if (!tok->astParent())
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
      569: 1824:                continue;
     3159: 1825:            if (Token::Match(tok->astParent(), "++|--|&") && !tok->astParent()->astOperand2())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 9% (fallthrough)
branch  5 taken 91%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 64% (fallthrough)
branch  9 taken 36%
branch 10 taken 6% (fallthrough)
branch 11 taken 94%
      181: 1826:                vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     2978: 1827:            else if (tok->astParent()->isAssignmentOp()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 28% (fallthrough)
branch  3 taken 72%
      824: 1828:                if (tok == tok->astParent()->astOperand1())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
      765: 1829:                    vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       59: 1830:                else if (tokenList->isCPP() && Token::Match(tok->astParent()->tokAt(-2), "& %name% ="))
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 9% (fallthrough)
branch 11 taken 91%
branch 12 taken 8% (fallthrough)
branch 13 taken 92%
        5: 1831:                    vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     2154: 1832:            } else if (isLikelyStreamRead(tokenList->isCPP(), tok->astParent())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        2: 1833:                vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     2152: 1834:            } else if (Token::Match(tok->astParent(), "[(,]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 37% (fallthrough)
branch  5 taken 63%
      799: 1835:                vars.erase(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1836:        }
        -: 1837:    }
        -: 1838:
        -: 1839:    // Set values..
    29888: 1840:    for (Token *tok = tokenList->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1841:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
    54133: 1842:            continue;
     3731: 1843:        std::map<const Variable *, ValueFlow::Value>::const_iterator var = vars.find(tok->variable());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
     3729: 1844:        if (var == vars.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     3727: 1845:            continue;
        2: 1846:        setTokenValue(tok, var->second, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 1%
branch  6 taken 99%
        -: 1847:    }
      956: 1848:}
        -: 1849:
        -: 1850:static void valueFlowForward(Token* startToken,
        -: 1851:                             const Token* endToken,
        -: 1852:                             const Token* exprTok,
        -: 1853:                             std::list<ValueFlow::Value> values,
        -: 1854:                             const bool constValue,
        -: 1855:                             const bool subFunction,
        -: 1856:                             TokenList* const tokenlist,
        -: 1857:                             ErrorLogger* const errorLogger,
        -: 1858:                             const Settings* settings);
        -: 1859:
function _ZL16valueFlowReverseP9TokenListP5TokenPKS1_N9ValueFlow5ValueES6_P11ErrorLoggerPK8Settings called 392 returned 100% blocks executed 31%
      392: 1860:static void valueFlowReverse(TokenList *tokenlist,
        -: 1861:                             Token *tok,
        -: 1862:                             const Token * const varToken,
        -: 1863:                             ValueFlow::Value val,
        -: 1864:                             ValueFlow::Value val2,
        -: 1865:                             ErrorLogger *errorLogger,
        -: 1866:                             const Settings *settings)
        -: 1867:{
      392: 1868:    const MathLib::bigint    num        = val.intvalue;
      392: 1869:    const Variable * const   var        = varToken->variable();
call    0 returned 100%
      392: 1870:    if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1871:        return;
        -: 1872:
      392: 1873:    const int                varid      = varToken->varId();
call    0 returned 100%
      392: 1874:    const Token * const      startToken = var->nameToken();
call    0 returned 100%
        -: 1875:
     3195: 1876:    for (Token *tok2 = tok->previous(); ; tok2 = tok2->previous()) {
call    0 returned 100%
call    1 returned 100%
     9585: 1877:        if (!tok2 ||
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
     6629: 1878:            tok2 == startToken ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
     3437: 1879:            (tok2->str() == "{" && tok2->scope()->type == Scope::ScopeType::eFunction)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 87% (fallthrough)
branch  4 taken 13%
      271: 1880:            break;
        -: 1881:        }
        -: 1882:
     2924: 1883:        if (tok2->varId() == varid) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
      242: 1884:            if (tok2->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
      123: 1885:                break;
        -: 1886:            // bailout: assignment
      228: 1887:            if (Token::Match(tok2->previous(), "!!* %name% =")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 37% (fallthrough)
branch  5 taken 63%
       85: 1888:                Token* assignTok = const_cast<Token*>(tok2->next()->astOperand2());
call    0 returned 100%
call    1 returned 100%
       85: 1889:                if (!assignTok->hasKnownValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 64% (fallthrough)
branch  4 taken 36%
      108: 1890:                    std::list<ValueFlow::Value> values = {val};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
call   11 returned 100%
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
       54: 1891:                    setTokenValue(assignTok, val, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       54: 1892:                    if (val2.condition) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1893:                        setTokenValue(assignTok, val2, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1894:                        values.push_back(val2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1895:                    }
       54: 1896:                    const Token* startForwardToken = nextAfterAstRightmostLeaf(tok2->next());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       54: 1897:                    const Token* endForwardToken = tok->scope() ? tok->scope()->bodyEnd : tok;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
       54: 1898:                    valueFlowForward(const_cast<Token*>(startForwardToken),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1899:                                     endForwardToken,
        -: 1900:                                     assignTok,
        -: 1901:                                     values,
        -: 1902:                                     false,
        -: 1903:                                     false,
        -: 1904:                                     tokenlist,
        -: 1905:                                     errorLogger,
        -: 1906:                                     settings);
        -: 1907:                }
       85: 1908:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1909:                    bailout(tokenlist, errorLogger, tok2, "assignment of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
       85: 1910:                break;
        -: 1911:            }
        -: 1912:
        -: 1913:            // increment/decrement
      143: 1914:            int inc = 0;
      143: 1915:            if (Token::Match(tok2->previous(), "[;{}] %name% ++|-- ;"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        6: 1916:                inc = (tok2->strAt(1)=="++") ? -1 : 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      137: 1917:            else if (Token::Match(tok2->tokAt(-2), "[;{}] ++|-- %name% ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1918:                inc = (tok2->strAt(-1)=="++") ? -1 : 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
      137: 1919:            else if (Token::Match(tok2->previous(), "++|-- %name%") || Token::Match(tok2, "%name% ++|--")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1920:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1921:                    bailout(tokenlist, errorLogger, tok2, "increment/decrement of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 1922:                break;
        -: 1923:            }
      143: 1924:            if (inc != 0) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        6: 1925:                val.intvalue += inc;
       12: 1926:                const std::string info(tok2->str() + " is " + std::string(inc==1 ? "decremented" : "incremented") + ", before this " + (inc==1?"decrement":"increment") + " the value is " + val.infoString());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0% (throw)
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
        6: 1927:                val.errorPath.emplace_back(tok2, info);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1928:            }
        -: 1929:
        -: 1930:            // compound assignment
      143: 1931:            if (Token::Match(tok2->previous(), "[;{}] %var% %assign%") && tok2->next()->str() != "=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        2: 1932:                const Token * const assignToken = tok2->next();
call    0 returned 100%
        2: 1933:                const Token * const rhsToken = assignToken->astOperand2();
call    0 returned 100%
        2: 1934:                if (!rhsToken || !rhsToken->hasKnownIntValue()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1935:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1936:                        bailout(tokenlist, errorLogger, tok2, "compound assignment, rhs value is not known");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 1937:                    break;
        -: 1938:                }
        2: 1939:                const MathLib::bigint rhsValue =  rhsToken->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
        2: 1940:                if (assignToken->str() == "+=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 1941:                    val.intvalue -= rhsValue;
    #####: 1942:                else if (assignToken->str() == "-=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1943:                    val.intvalue += rhsValue;
    #####: 1944:                else if (assignToken->str() == "*=" && rhsValue != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1945:                    val.intvalue /= rhsValue;
        -: 1946:                else {
    #####: 1947:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1948:                        bailout(tokenlist, errorLogger, tok2, "compound assignment " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 1949:                    break;
        -: 1950:                }
        -: 1951:
        4: 1952:                const std::string info("Compound assignment '" + assignToken->str() + "', before assignment value is " + val.infoString());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 never executed
call   18 never executed
call   19 never executed
        2: 1953:                val.errorPath.emplace_back(tok2, info);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1954:            }
        -: 1955:
        -: 1956:            // bailout: variable is used in rhs in assignment to itself
      143: 1957:            if (bailoutSelfAssignment(tok2)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1958:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 1959:                    bailout(tokenlist, errorLogger, tok2, "variable " + tok2->str() + " is used in rhs in assignment to itself");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 1960:                break;
        -: 1961:            }
        -: 1962:
      143: 1963:            if (Token::Match(tok2->previous(), "sizeof|.")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1964:                const Token *prev = tok2->previous();
call    0 never executed
    #####: 1965:                while (Token::Match(prev,"%name%|.") && prev->str() != "sizeof")
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1966:                    prev = prev->previous();
call    0 never executed
    #####: 1967:                if (prev && prev->str() == "sizeof")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
       12: 1968:                    continue;
        -: 1969:            }
        -: 1970:
        -: 1971:            // assigned by subfunction?
      143: 1972:            bool inconclusive = false;
      143: 1973:            if (isVariableChangedByFunctionCall(tok2, std::max(val.indirect, val2.indirect), settings, &inconclusive)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
       10: 1974:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1975:                    bailout(tokenlist, errorLogger, tok2, "possible assignment of " + tok2->str() + " by subfunction");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       10: 1976:                break;
        -: 1977:            }
        -: 1978:            // Impossible values can't be inconclusive
      133: 1979:            if (val.isImpossible() || val2.isImpossible())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1980:                break;
      133: 1981:            val.setInconclusive(inconclusive);
call    0 returned 100%
      133: 1982:            val2.setInconclusive(inconclusive);
call    0 returned 100%
        -: 1983:
        -: 1984:            // skip if variable is conditionally used in ?: expression
      145: 1985:            if (const Token *parent = skipValueInConditionalExpression(tok2)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
       12: 1986:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1987:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
        -: 1988:                            errorLogger,
        -: 1989:                            tok2,
        -: 1990:                            "no simplification of " + tok2->str() + " within " + (Token::Match(parent,"[?:]") ? "?:" : parent->str()) + " expression");
       12: 1991:                continue;
        -: 1992:            }
        -: 1993:
        -: 1994:            // do-while condition, break in the loop body
        -: 1995:            {
      121: 1996:                const Token *parent = tok2->astParent();
call    0 returned 100%
      801: 1997:                while (parent && !Token::simpleMatch(parent->previous(), "while ("))
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 74% (fallthrough)
branch  9 taken 26%
      340: 1998:                    parent = parent->astParent();
call    0 returned 100%
      121: 1999:                if (parent && Token::simpleMatch(parent->tokAt(-2), "} while (") && Token::simpleMatch(parent->linkAt(-2)->previous(), "do {")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
    #####: 2000:                    bool breakBailout = false;
    #####: 2001:                    for (const Token *iftok = parent->linkAt(-2); iftok != parent; iftok = iftok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 2002:                        if (!Token::simpleMatch(iftok, "if ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2003:                            continue;
    #####: 2004:                        if (!Token::simpleMatch(iftok->linkAt(1), ") { break"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2005:                            continue;
    #####: 2006:                        ProgramMemory programMemory;
call    0 never executed
call    1 never executed
    #####: 2007:                        programMemory.setIntValue(varid, num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2008:                        if (conditionIsTrue(iftok->next()->astOperand2(), programMemory)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2009:                            breakBailout = true;
    #####: 2010:                            break;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2011:                        }
        -: 2012:                    }
    #####: 2013:                    if (breakBailout) {
branch  0 never executed
branch  1 never executed
    #####: 2014:                        if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2015:                            bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2016:                                    errorLogger,
        -: 2017:                                    tok2,
        -: 2018:                                    "no simplification of " + tok2->str() + " in do-while condition since there is a break in the loop body");
    #####: 2019:                        break;
        -: 2020:                    }
        -: 2021:                }
        -: 2022:            }
        -: 2023:
      121: 2024:            setTokenValue(tok2, val, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      121: 2025:            if (val2.condition)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        2: 2026:                setTokenValue(tok2,val2, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      121: 2027:            if (tok2 == var->nameToken())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2028:                break;
        -: 2029:        }
        -: 2030:
        -: 2031:        // skip sizeof etc..
     2803: 2032:        if (tok2->str() == ")" && Token::Match(tok2->link()->previous(), "sizeof|typeof|typeid ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        2: 2033:            tok2 = tok2->link();
call    0 returned 100%
        -: 2034:
        -: 2035:        // goto label
     2803: 2036:        if (Token::Match(tok2, "[;{}] %name% :")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2037:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2038:                bailout(tokenlist, errorLogger, tok2->next(), "variable " + var->name() + " stopping on goto label");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
    #####: 2039:            break;
        -: 2040:        }
        -: 2041:
     2803: 2042:        if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       16: 2043:            const Token *vartok = Token::findmatch(tok2->link(), "%varid%", tok2, varid);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       16: 2044:            while (Token::Match(vartok, "%name% = %num% ;") && !vartok->tokAt(2)->getValue(num))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 2045:                vartok = Token::findmatch(vartok->next(), "%varid%", tok2, varid);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       16: 2046:            if (vartok) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1: 2047:                if (settings->debugwarnings) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2048:                    std::string errmsg = "variable ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2049:                    errmsg += var->name() + " ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2050:                    errmsg += "stopping on }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2051:                    bailout(tokenlist, errorLogger, tok2, errmsg);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 2052:                }
        1: 2053:                break;
        -: 2054:            } else {
       15: 2055:                tok2 = tok2->link();
call    0 returned 100%
        -: 2056:            }
     2787: 2057:        } else if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 2058:            // if variable is assigned in loop don't look before the loop
       84: 2059:            if (tok2->previous() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 40% (fallthrough)
branch  6 taken 60%
       70: 2060:                (Token::simpleMatch(tok2->previous(), "do") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 66% (fallthrough)
branch  5 taken 34%
       58: 2061:                 (tok2->strAt(-1) == ")" && Token::Match(tok2->linkAt(-1)->previous(), "for|while (")))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 61% (fallthrough)
branch 12 taken 39%
        -: 2062:
       14: 2063:                const Token *start = tok2;
       14: 2064:                const Token *end   = start->link();
call    0 returned 100%
       14: 2065:                if (isVariableChanged(start,end,varid,var->isGlobal(),settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 71% (fallthrough)
branch  6 taken 29%
       10: 2066:                    if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2067:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " is assigned in loop. so valueflow analysis bailout when start of loop is reached.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       10: 2068:                    break;
        -: 2069:                }
        -: 2070:            }
        -: 2071:
        -: 2072:            // Global variable : stop when leaving the function scope
       25: 2073:            if (!var->isLocal()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
        5: 2074:                if (!Token::Match(tok2->previous(), ")|else|do {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2075:                    break;
        8: 2076:                if ((tok2->previous()->str() == ")") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 60% (fallthrough)
branch  4 taken 40%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        3: 2077:                    !Token::Match(tok2->linkAt(-1)->previous(), "if|for|while ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
    #####: 2078:                    break;
        -: 2079:            }
     2752: 2080:        } else if (tok2->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
      366: 2081:            const Token *parent = tok2->previous();
call    0 returned 100%
     1534: 2082:            while (parent && !Token::Match(parent, "return|break|continue|goto"))
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 61% (fallthrough)
branch  8 taken 39%
      584: 2083:                parent = parent->astParent();
call    0 returned 100%
        -: 2084:            // reaching a break/continue/return
      366: 2085:            if (parent) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2086:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2087:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " stopping on " + parent->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
    #####: 2088:                break;
        -: 2089:            }
        -: 2090:        }
        -: 2091:
     2792: 2092:        if (Token::Match(tok2, "%name% (") && !Token::simpleMatch(tok2->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 22% (fallthrough)
branch 12 taken 78%
branch 13 taken 3% (fallthrough)
branch 14 taken 97%
        -: 2093:            // bailout: global non-const variables
       76: 2094:            if (!(var->isLocal() || var->isArgument()) && !var->isConst()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 36% (fallthrough)
branch  4 taken 64%
call    5 returned 100%
branch  6 taken 4% (fallthrough)
branch  7 taken 96%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        1: 2095:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2096:                    bailout(tokenlist, errorLogger, tok, "global variable " + var->name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        2: 2097:                return;
call    0 never executed
        -: 2098:            }
        -: 2099:        }
     2803: 2100:    }
        -: 2101:}
        -: 2102:
function _ZL16isConditionKnownPK5Tokenb called 1127 returned 100% blocks executed 100%
     1127: 2103:static bool isConditionKnown(const Token* tok, bool then)
        -: 2104:{
     1127: 2105:    const char* op = "||";
     1127: 2106:    if (then)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      754: 2107:        op = "&&";
     1127: 2108:    const Token* parent = tok->astParent();
call    0 returned 100%
     1515: 2109:    while (parent && parent->str() == op)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
      194: 2110:        parent = parent->astParent();
call    0 returned 100%
     1127: 2111:    return (parent && parent->str() == "(");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 78% (fallthrough)
branch  5 taken 22%
        -: 2112:}
        -: 2113:
function _ZL24valueFlowBeforeConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 54%
     1192: 2114:static void valueFlowBeforeCondition(TokenList *tokenlist, SymbolDatabase *symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 2115:{
     2450: 2116:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    25810: 2117:        for (Token* tok = const_cast<Token*>(scope->bodyStart); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
    24552: 2118:            MathLib::bigint num = 0;
    24552: 2119:            const Token *vartok = nullptr;
    24552: 2120:            if (tok->isComparisonOp() && tok->astOperand1() && tok->astOperand2()) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 2% (fallthrough)
branch 10 taken 98%
      545: 2121:                if (tok->astOperand1()->isName() && tok->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 73% (fallthrough)
branch  5 taken 27%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 77% (fallthrough)
branch 11 taken 24%
branch 12 taken 56% (fallthrough)
branch 13 taken 44%
      306: 2122:                    vartok = tok->astOperand1();
call    0 returned 100%
      306: 2123:                    num = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      444: 2124:                } else if (tok->astOperand1()->hasKnownIntValue() && tok->astOperand2()->isName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 23% (fallthrough)
branch  5 taken 77%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 63% (fallthrough)
branch 11 taken 37%
branch 12 taken 14% (fallthrough)
branch 13 taken 86%
       34: 2125:                    vartok = tok->astOperand2();
call    0 returned 100%
       34: 2126:                    num = tok->astOperand1()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 2127:                } else {
    24419: 2128:                    continue;
        -: 2129:                }
    47897: 2130:            } else if (Token::Match(tok->previous(), "if|while ( %name% %oror%|&&|)") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
    23890: 2131:                       Token::Match(tok, "%oror%|&& %name% %oror%|&&|)")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      156: 2132:                vartok = tok->next();
call    0 returned 100%
      156: 2133:                num = 0;
    47627: 2134:            } else if (Token::Match(tok, "[!?]") && Token::Match(tok->astOperand1(), "%name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 57% (fallthrough)
branch 10 taken 43%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
       75: 2135:                vartok = tok->astOperand1();
call    0 returned 100%
       75: 2136:                num = 0;
        -: 2137:            } else {
    23776: 2138:                continue;
        -: 2139:            }
        -: 2140:
      571: 2141:            int varid = vartok->varId();
call    0 returned 100%
      571: 2142:            const Variable * const var = vartok->variable();
call    0 returned 100%
        -: 2143:
      571: 2144:            if (varid == 0U || !var)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
      130: 2145:                continue;
        -: 2146:
      441: 2147:            if (tok->str() == "?" && tok->isExpandedMacro()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 2148:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2149:                    bailout(tokenlist, errorLogger, tok, "variable " + var->name() + ", condition is defined in macro");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2150:                continue;
        -: 2151:            }
        -: 2152:
        -: 2153:            // bailout: for/while-condition, variable is changed in while loop
     1522: 2154:            for (const Token *tok2 = tok; tok2; tok2 = tok2->astParent()) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
call    2 returned 100%
     1081: 2155:                if (tok2->astParent() || tok2->str() != "(" || !Token::simpleMatch(tok2->link(), ") {"))
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 90% (fallthrough)
branch  6 taken 10%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
branch 13 taken 64% (fallthrough)
branch 14 taken 36%
      688: 2156:                    continue;
        -: 2157:
        -: 2158:                // Variable changed in 3rd for-expression
      393: 2159:                if (Token::simpleMatch(tok2->previous(), "for (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
       27: 2160:                    if (tok2->astOperand2() && tok2->astOperand2()->astOperand2() && isVariableChanged(tok2->astOperand2()->astOperand2(), tok2->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
branch 15 taken 56% (fallthrough)
branch 16 taken 44%
branch 17 taken 56% (fallthrough)
branch 18 taken 44%
       15: 2161:                        varid = 0U;
       15: 2162:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2163:                            bailout(tokenlist, errorLogger, tok, "variable " + var->name() + " used in loop");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2164:                    }
        -: 2165:                }
        -: 2166:
        -: 2167:                // Variable changed in loop code
      393: 2168:                if (Token::Match(tok2->previous(), "for|while (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
       50: 2169:                    const Token * const start = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
       50: 2170:                    const Token * const end   = start->link();
call    0 returned 100%
        -: 2171:
       50: 2172:                    if (isVariableChanged(start,end,varid,var->isGlobal(),settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 54% (fallthrough)
branch  6 taken 46%
       27: 2173:                        varid = 0U;
       27: 2174:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2175:                            bailout(tokenlist, errorLogger, tok, "variable " + var->name() + " used in loop");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2176:                    }
        -: 2177:                }
        -: 2178:
        -: 2179:                // if,macro => bailout
      343: 2180:                else if (Token::simpleMatch(tok2->previous(), "if (") && tok2->previous()->isExpandedMacro()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2181:                    varid = 0U;
    #####: 2182:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2183:                        bailout(tokenlist, errorLogger, tok, "variable " + var->name() + ", condition is defined in macro");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2184:                }
        -: 2185:            }
      441: 2186:            if (varid == 0U)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       39: 2187:                continue;
        -: 2188:
        -: 2189:            // extra logic for unsigned variables 'i>=1' => possible value can also be 0
      402: 2190:            if (Token::Match(tok, "<|>")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 21% (fallthrough)
branch  4 taken 79%
       85: 2191:                if (num != 0)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
       18: 2192:                    continue;
       67: 2193:                if (!var->typeStartToken()->isUnsigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 69% (fallthrough)
branch  5 taken 31%
       46: 2194:                    continue;
        -: 2195:            }
      676: 2196:            ValueFlow::Value val(tok, num);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      338: 2197:            val.varId = varid;
      676: 2198:            ValueFlow::Value val2;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      338: 2199:            if (num==1U && Token::Match(tok,"<=|>=")) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        2: 2200:                if (var->typeStartToken()->isUnsigned()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2: 2201:                    val2 = ValueFlow::Value(tok,0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        2: 2202:                    val2.varId = varid;
        -: 2203:                }
        -: 2204:            }
      338: 2205:            Token* startTok = tok->astParent() ? tok->astParent() : tok->previous();
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
call    4 returned 100%
      338: 2206:            valueFlowReverse(tokenlist, startTok, vartok, val, val2, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        -: 2207:        }
        -: 2208:    }
     1192: 2209:}
        -: 2210:
function _ZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ called 32 returned 100% blocks executed 69%
       32: 2211:static void removeValues(std::list<ValueFlow::Value> &values, const std::list<ValueFlow::Value> &valuesToRemove)
        -: 2212:{
       61: 2213:    for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 48% (fallthrough)
branch  5 taken 52%
call    6 returned 100%
call    7 never executed
       58: 2214:        const bool found = std::any_of(valuesToRemove.cbegin(), valuesToRemove.cend(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 never executed
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENUlRKS2_E_C2ERKSA_ called 116 returned 100% blocks executed 100%
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENUlRKS2_E_C2EOSA_ called 58 returned 100% blocks executed 100%
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENUlRKS2_E_D2Ev called 203 returned 100% blocks executed 100%
function _ZZL12removeValuesRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ENKUlRKS2_E_clES9_ called 17 returned 100% blocks executed 100%
      394: 2215:        [=](const ValueFlow::Value &v2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       17: 2216:            return it->intvalue == v2.intvalue;
call    0 returned 100%
       46: 2217:        });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       29: 2218:        if (found)
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
       17: 2219:            values.erase(it++);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -: 2220:        else
       12: 2221:            ++it;
call    0 returned 100%
        -: 2222:    }
       32: 2223:}
        -: 2224:
function _ZL12valueFlowASTP5TokeniRKN9ValueFlow5ValueEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 2225:static void valueFlowAST(Token *tok, nonneg int varid, const ValueFlow::Value &value, const Settings *settings)
        -: 2226:{
    #####: 2227:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 2228:        return;
    #####: 2229:    if (tok->varId() == varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2230:        setTokenValue(tok, value, settings);
call    0 never executed
    #####: 2231:    valueFlowAST(tok->astOperand1(), varid, value, settings);
call    0 never executed
call    1 never executed
    #####: 2232:    if (tok->str() == "&&" && tok->astOperand1() && tok->astOperand1()->getValue(0)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2233:        ProgramMemory pm;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2234:        pm.setValue(varid,value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2235:        if (conditionIsFalse(tok->astOperand1(), pm))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2236:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2237:    } else if (tok->str() == "||" && tok->astOperand1()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2238:        const std::list<ValueFlow::Value> &values = tok->astOperand1()->values();
call    0 never executed
call    1 never executed
    #####: 2239:        const bool nonzero = std::any_of(values.cbegin(), values.cend(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
function _ZZL12valueFlowASTP5TokeniRKN9ValueFlow5ValueEPK8SettingsENKUlS4_E_clES4_ called 0 returned 0% blocks executed 0%
    #####: 2240:        [=](const ValueFlow::Value &v) {
    #####: 2241:            return v.intvalue != 0;
    #####: 2242:        });
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2243:        if (!nonzero)
branch  0 never executed
branch  1 never executed
    #####: 2244:            return;
    #####: 2245:        ProgramMemory pm;
call    0 never executed
call    1 never executed
    #####: 2246:        pm.setValue(varid,value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2247:        if (conditionIsTrue(tok->astOperand1(), pm))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2248:            return;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2249:    }
    #####: 2250:    valueFlowAST(tok->astOperand2(), varid, value, settings);
call    0 never executed
call    1 never executed
        -: 2251:}
        -: 2252:
        -: 2253:/** if known variable is changed in loop body, change it to a possible value */
function _ZL23handleKnownValuesInLoopPK5TokenS1_PNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEibPK8Settings called 38 returned 100% blocks executed 100%
       38: 2254:static bool handleKnownValuesInLoop(const Token                 *startToken,
        -: 2255:                                    const Token                 *endToken,
        -: 2256:                                    std::list<ValueFlow::Value> *values,
        -: 2257:                                    nonneg int                  varid,
        -: 2258:                                    bool                        globalvar,
        -: 2259:                                    const Settings              *settings)
        -: 2260:{
       38: 2261:    const bool isChanged = isVariableChanged(startToken, endToken, varid, globalvar, settings, true);
call    0 returned 100%
       38: 2262:    if (!isChanged)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
       12: 2263:        return false;
       26: 2264:    lowerToPossible(*values);
call    0 returned 100%
       26: 2265:    return isChanged;
        -: 2266:}
        -: 2267:
function _ZL14evalAssignmentRN9ValueFlow5ValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_ called 11 returned 100% blocks executed 53%
       11: 2268:static bool evalAssignment(ValueFlow::Value &lhsValue, const std::string &assign, const ValueFlow::Value &rhsValue)
        -: 2269:{
       11: 2270:    if (lhsValue.isIntValue()) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
        6: 2271:        if (assign == "+=")
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        2: 2272:            lhsValue.intvalue += rhsValue.intvalue;
        4: 2273:        else if (assign == "-=")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2274:            lhsValue.intvalue -= rhsValue.intvalue;
        4: 2275:        else if (assign == "*=")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2276:            lhsValue.intvalue *= rhsValue.intvalue;
        4: 2277:        else if (assign == "/=") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2278:            if (rhsValue.intvalue == 0)
branch  0 never executed
branch  1 never executed
    #####: 2279:                return false;
        -: 2280:            else
    #####: 2281:                lhsValue.intvalue /= rhsValue.intvalue;
        4: 2282:        } else if (assign == "%=") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2283:            if (rhsValue.intvalue == 0)
branch  0 never executed
branch  1 never executed
    #####: 2284:                return false;
        -: 2285:            else
    #####: 2286:                lhsValue.intvalue %= rhsValue.intvalue;
        4: 2287:        } else if (assign == "&=")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2288:            lhsValue.intvalue &= rhsValue.intvalue;
        4: 2289:        else if (assign == "|=")
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        2: 2290:            lhsValue.intvalue |= rhsValue.intvalue;
        2: 2291:        else if (assign == "^=")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2292:            lhsValue.intvalue ^= rhsValue.intvalue;
        -: 2293:        else
        2: 2294:            return false;
        5: 2295:    } else if (lhsValue.isFloatValue()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2296:        if (assign == "+=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2297:            lhsValue.floatValue += rhsValue.intvalue;
    #####: 2298:        else if (assign == "-=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2299:            lhsValue.floatValue -= rhsValue.intvalue;
    #####: 2300:        else if (assign == "*=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2301:            lhsValue.floatValue *= rhsValue.intvalue;
    #####: 2302:        else if (assign == "/=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2303:            lhsValue.floatValue /= rhsValue.intvalue;
        -: 2304:        else
    #####: 2305:            return false;
        -: 2306:    } else {
        5: 2307:        return false;
        -: 2308:    }
        4: 2309:    return true;
        -: 2310:}
        -: 2311:
        -: 2312:// Check if its an alias of the variable or is being aliased to this variable
function _ZL9isAliasOfPK8VariablePK5TokeniRKNSt7__debug4listIN9ValueFlow5ValueESaIS8_EEE called 6038 returned 100% blocks executed 87%
     6038: 2313:static bool isAliasOf(const Variable * var, const Token *tok, nonneg int varid, const std::list<ValueFlow::Value>& values)
        -: 2314:{
     6038: 2315:    if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2316:        return false;
     6038: 2317:    if (tok->varId() == 0)
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
     5121: 2318:        return false;
      917: 2319:    if (isAliasOf(tok, varid))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2: 2320:        return true;
      915: 2321:    if (!var->isPointer())
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
      502: 2322:        return false;
        -: 2323:    // Search through non value aliases
      823: 2324:    for (const ValueFlow::Value &val : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 99%
branch  9 taken 1%
call   10 returned 100%
branch 11 taken 99%
branch 12 taken 1%
call   13 never executed
call   14 never executed
      413: 2325:        if (!val.isNonValue())
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
      207: 2326:            continue;
      206: 2327:        if (val.isInconclusive())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2328:            continue;
      206: 2329:        if (val.isLifetimeValue() && !val.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2330:            continue;
      206: 2331:        if (val.isLifetimeValue() && val.lifetimeKind != ValueFlow::Value::LifetimeKind::Address)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
branch  5 taken 9% (fallthrough)
branch  6 taken 91%
       18: 2332:            continue;
      188: 2333:        if (!Token::Match(val.tokvalue, ".|&|*|%var%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        4: 2334:            continue;
      184: 2335:        if (astHasVar(val.tokvalue, tok->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
        3: 2336:            return true;
        -: 2337:    }
      410: 2338:    return false;
        -: 2339:}
        -: 2340:
function _ZL15getIndirectionsRKNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 1306 returned 100% blocks executed 50%
     1306: 2341:static std::set<int> getIndirections(const std::list<ValueFlow::Value>& values)
        -: 2342:{
     1306: 2343:    std::set<int> result;
call    0 returned 100%
function _ZZL15getIndirectionsRKNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEENKUlRKS2_E_clES8_ called 1336 returned 100% blocks executed 100%
     2642: 2344:    std::transform(values.begin(), values.end(), std::inserter(result, result.end()), [](const ValueFlow::Value& v) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
     2672: 2345:        return std::max(0, v.indirect);
call    0 returned 100%
     2672: 2346:    });
     1306: 2347:    return result;
        -: 2348:}
        -: 2349:
function _ZL26valueFlowForwardExpressionP5TokenPKS_S2_RKNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEPK9TokenListPK8Settings called 1102 returned 100% blocks executed 61%
     1102: 2350:static void valueFlowForwardExpression(Token* startToken,
        -: 2351:                                       const Token* endToken,
        -: 2352:                                       const Token* exprTok,
        -: 2353:                                       const std::list<ValueFlow::Value>& values,
        -: 2354:                                       const TokenList* const tokenlist,
        -: 2355:                                       const Settings* settings)
        -: 2356:{
     2204: 2357:    FwdAnalysis fwdAnalysis(tokenlist->isCPP(), settings->library);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
     1118: 2358:    for (const FwdAnalysis::KnownAndToken read : fwdAnalysis.valueFlow(exprTok, startToken, endToken)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       32: 2359:        for (const ValueFlow::Value& value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 2360:            // Don't set inconclusive values
       16: 2361:            if (value.isInconclusive())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2362:                continue;
       32: 2363:            ValueFlow::Value v = value;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
       16: 2364:            if (v.isImpossible()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2365:                if (read.known)
branch  0 never executed
branch  1 never executed
    #####: 2366:                    continue;
       16: 2367:            } else if (!read.known) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2368:                v.valueKind = ValueFlow::Value::ValueKind::Possible;
        -: 2369:            }
       16: 2370:            setTokenValue(const_cast<Token*>(read.token), v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -: 2371:        }
        -: 2372:    }
     1102: 2373:}
        -: 2374:
function _ZL24valueFlowForwardVariableP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8Settings called 1712 returned 100% blocks executed 41%
     1712: 2375:static bool valueFlowForwardVariable(Token* const startToken,
        -: 2376:                                     const Token* const endToken,
        -: 2377:                                     const Variable* const var,
        -: 2378:                                     const nonneg int varid,
        -: 2379:                                     std::list<ValueFlow::Value> values,
        -: 2380:                                     const bool constValue,
        -: 2381:                                     const bool subFunction,
        -: 2382:                                     TokenList* const tokenlist,
        -: 2383:                                     ErrorLogger* const errorLogger,
        -: 2384:                                     const Settings* const settings)
        -: 2385:{
     1712: 2386:    int indentlevel = 0;
     1712: 2387:    int number_of_if = 0;
     1712: 2388:    int varusagelevel = -1;
     1712: 2389:    bool returnStatement = false;  // current statement is a return, stop analysis at the ";"
     1712: 2390:    bool read = false;  // is variable value read?
        -: 2391:
     1712: 2392:    if (values.empty())
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
      145: 2393:        return true;
        -: 2394:
     8709: 2395:    for (Token *tok2 = startToken; tok2 && tok2 != endToken; tok2 = tok2->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
call    4 returned 100%
     7662: 2396:        if (values.empty())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      536: 2397:            return true;
     7644: 2398:        if (indentlevel >= 0 && tok2->str() == "{")
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       96: 2399:            ++indentlevel;
     7548: 2400:        else if (indentlevel >= 0 && tok2->str() == "}") {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
      230: 2401:            --indentlevel;
      230: 2402:            if (indentlevel <= 0 && isReturnScope(tok2, settings) && Token::Match(tok2->link()->previous(), "else|) {")) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 2% (fallthrough)
branch 15 taken 98%
        5: 2403:                const Token *condition = tok2->link();
call    0 returned 100%
        5: 2404:                const bool iselse = Token::simpleMatch(condition->tokAt(-2), "} else {");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5: 2405:                if (iselse)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2406:                    condition = condition->linkAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        5: 2407:                if (condition && Token::simpleMatch(condition->previous(), ") {"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        5: 2408:                    condition = condition->linkAt(-1)->astOperand2();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 2409:                else
    #####: 2410:                    condition = nullptr;
        5: 2411:                if (!condition) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2412:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2413:                        bailout(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2414:                            tokenlist,
        -: 2415:                            errorLogger,
        -: 2416:                            tok2,
        -: 2417:                            "variable " + var->name() +
        -: 2418:                            " valueFlowForwardVariable, bailing out since it's unknown if conditional return is executed");
    #####: 2419:                    return false;
        -: 2420:                }
        -: 2421:
        5: 2422:                bool bailoutflag = false;
        5: 2423:                const Token * const start1 = iselse ? tok2->link()->linkAt(-2) : nullptr;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
       10: 2424:                for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 never executed
        5: 2425:                    if (!iselse && conditionIsTrue(condition, getProgramMemory(condition->astParent(), varid, *it))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 2426:                        bailoutflag = true;
    #####: 2427:                        break;
        -: 2428:                    }
        5: 2429:                    if (iselse && conditionIsFalse(condition, getProgramMemory(condition->astParent(), varid, *it))) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 2430:                        bailoutflag = true;
    #####: 2431:                        break;
        -: 2432:                    }
        5: 2433:                    if (iselse && it->isPossible() && isVariableChanged(start1, start1->link(), varid, var->isGlobal(), settings, tokenlist->isCPP()))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 2434:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2435:                    else
        5: 2436:                        ++it;
call    0 returned 100%
        -: 2437:                }
        5: 2438:                if (bailoutflag) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2439:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2440:                        bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2441:                                errorLogger,
        -: 2442:                                tok2,
        -: 2443:                                "variable " + var->name() +
        -: 2444:                                " valueFlowForwardVariable, conditional return is assumed to be executed");
    #####: 2445:                    return false;
        -: 2446:                }
        -: 2447:
        5: 2448:                if (values.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2449:                    return true;
      440: 2450:            } else if (indentlevel <= 0 &&
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
      226: 2451:                       Token::simpleMatch(tok2->link()->previous(), "else {") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
      247: 2452:                       !isReturnScope(tok2->link()->tokAt(-2), settings) &&
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 64% (fallthrough)
branch 10 taken 36%
       11: 2453:                       isVariableChanged(tok2->link(), tok2, varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        7: 2454:                lowerToPossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2455:            }
        -: 2456:        }
        -: 2457:
        -: 2458:        // skip lambda functions
        -: 2459:        // TODO: handle lambda functions
     7644: 2460:        if (tok2->str() == "[" && findLambdaEndToken(tok2)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 11% (fallthrough)
branch  8 taken 89%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        3: 2461:            Token *lambdaEndToken = const_cast<Token *>(findLambdaEndToken(tok2));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 2462:            if (isVariableChanged(lambdaEndToken->link(), lambdaEndToken, varid, var->isGlobal(), settings, tokenlist->isCPP()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2463:                return false;
        -: 2464:            // Don't skip lambdas for lifetime values
        6: 2465:            if (!std::all_of(values.begin(), values.end(), std::mem_fn(&ValueFlow::Value::isLifetimeValue))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 never executed
call   11 never executed
        3: 2466:                tok2 = lambdaEndToken;
        3: 2467:                continue;
        -: 2468:            }
        -: 2469:        }
        -: 2470:
     7669: 2471:        if (Token::Match(tok2, "[;{}] %name% :") || tok2->str() == "case") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       28: 2472:            lowerToPossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       28: 2473:            tok2 = tok2->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       28: 2474:            continue;
        -: 2475:        }
        -: 2476:
     7613: 2477:        else if ((var->isGlobal() || tok2->str() == "asm") && Token::Match(tok2, "%name% (") && Token::Match(tok2->linkAt(1), ") !!{")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 13% (fallthrough)
branch 11 taken 88%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
branch 18 taken 50% (fallthrough)
branch 19 taken 50%
branch 20 taken 1% (fallthrough)
branch 21 taken 99%
        2: 2478:            return false;
        -: 2479:        }
        -: 2480:
        -: 2481:        // Skip sizeof etc
     7611: 2482:        else if (Token::Match(tok2, "sizeof|typeof|typeid ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 2483:            tok2 = tok2->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2484:
     7609: 2485:        else if (Token::simpleMatch(tok2, "else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        -: 2486:            // Should scope be skipped because variable value is checked?
       14: 2487:            const Token *condition = tok2->linkAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14: 2488:            condition = condition ? condition->linkAt(-1) : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       14: 2489:            condition = condition ? condition->astOperand2() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 2490:
       28: 2491:            const bool skipelse = std::any_of(values.cbegin(), values.cend(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
function _ZZL24valueFlowForwardVariableP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E_clESK_ called 14 returned 100% blocks executed 75%
       14: 2492:            [=](const ValueFlow::Value &v) {
       28: 2493:                return conditionIsTrue(condition, getProgramMemory(tok2, varid, v));
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       42: 2494:            });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       14: 2495:            if (skipelse) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2496:                tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2497:                continue;
        -: 2498:            }
        -: 2499:        }
        -: 2500:
     7595: 2501:        else if (Token::simpleMatch(tok2, "do {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       16: 2502:            const Token *start = tok2->next();
call    0 returned 100%
       16: 2503:            const Token *end   = start->link();
call    0 returned 100%
       16: 2504:            if (Token::simpleMatch(end, "} while ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       16: 2505:                end = end->linkAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2506:
       16: 2507:            if (isVariableChanged(start, end, varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       16: 2508:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2509:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2510:                            errorLogger,
        -: 2511:                            tok2,
        -: 2512:                            "variable " + var->name() + " valueFlowForwardVariable, assignment in do-while");
       16: 2513:                return false;
        -: 2514:            }
        -: 2515:
    #####: 2516:            handleKnownValuesInLoop(start, end, &values, varid, var->isGlobal(), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2517:        }
        -: 2518:
        -: 2519:        // conditional block of code that assigns variable..
     7579: 2520:        else if (!tok2->varId() && Token::Match(tok2, "%name% (") && Token::simpleMatch(tok2->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 47% (fallthrough)
branch 15 taken 53%
branch 16 taken 5% (fallthrough)
branch 17 taken 95%
        -: 2521:            // is variable changed in condition?
      704: 2522:            for (int i:getIndirections(values)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
      352: 2523:                Token* tokChanged = findVariableChanged(tok2->next(), tok2->next()->link(), i, varid, var->isGlobal(), settings, tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
      352: 2524:                if (tokChanged != nullptr) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 2525:                    // Set the value before bailing
       25: 2526:                    if (tokChanged->varId() == varid) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       50: 2527:                        for (const ValueFlow::Value &v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       25: 2528:                            if (!v.isNonValue())
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
        9: 2529:                                continue;
       16: 2530:                            setTokenValue(tokChanged, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2531:                        }
        -: 2532:                    }
function _ZZL24valueFlowForwardVariableP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E0_clESK_ called 25 returned 100% blocks executed 100%
       50: 2533:                    values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
       25: 2534:                        return v.indirect == i;
       25: 2535:                    });
        -: 2536:                }
        -: 2537:            }
      352: 2538:            if (values.empty()) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
       25: 2539:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2540:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2541:                            errorLogger,
        -: 2542:                            tok2,
        -: 2543:                            "variable " + var->name() + " valueFlowForwardVariable, assignment in condition");
      167: 2544:                return false;
        -: 2545:            }
        -: 2546:
        -: 2547:            // if known variable is changed in loop body, change it to a possible value..
      327: 2548:            if (Token::Match(tok2, "for|while")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
       38: 2549:                if (handleKnownValuesInLoop(tok2, tok2->linkAt(1)->linkAt(1), &values, varid, var->isGlobal(), settings))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 68% (fallthrough)
branch 11 taken 32%
       26: 2550:                    number_of_if++;
        -: 2551:            }
        -: 2552:
        -: 2553:            // Set values in condition
     1003: 2554:            for (Token* tok3 = tok2->tokAt(2); tok3 != tok2->next()->link(); tok3 = tok3->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 69% (fallthrough)
branch  6 taken 31%
call    7 returned 100%
      690: 2555:                if (tok3->varId() == varid) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
      280: 2556:                    for (const ValueFlow::Value &v : values)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      143: 2557:                        setTokenValue(tok3, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      553: 2558:                } else if (Token::Match(tok3, "%oror%|&&|?|;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
       14: 2559:                    break;
        -: 2560:                }
        -: 2561:            }
        -: 2562:
      327: 2563:            const Token * const condTok = tok2->next()->astOperand2();
call    0 returned 100%
call    1 returned 100%
      327: 2564:            const bool condAlwaysTrue = (condTok && condTok->hasKnownIntValue() && condTok->values().front().intvalue != 0);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 17% (fallthrough)
branch  6 taken 83%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
      327: 2565:            const bool condAlwaysFalse = (condTok && condTok->hasKnownIntValue() && condTok->values().front().intvalue == 0);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 17% (fallthrough)
branch  6 taken 83%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 85% (fallthrough)
branch 10 taken 15%
        -: 2566:
        -: 2567:            // Should scope be skipped because variable value is checked?
      420: 2568:            std::list<ValueFlow::Value> truevalues;
call    0 returned 100%
call    1 never executed
      420: 2569:            std::list<ValueFlow::Value> falsevalues;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 28%
branch  3 taken 36%
branch  4 taken 36%
call    5 never executed
      660: 2570:            for (const ValueFlow::Value &v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      341: 2571:                if (condAlwaysTrue) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        8: 2572:                    truevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       62: 2573:                    continue;
        -: 2574:                }
      371: 2575:                if (condAlwaysFalse) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       46: 2576:                    falsevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46: 2577:                    continue;
        -: 2578:                }
        -: 2579:                // TODO: Compute program from tokvalue first
      558: 2580:                ProgramMemory programMemory = getProgramMemory(tok2, varid, v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      279: 2581:                const bool isTrue = conditionIsTrue(condTok, programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      279: 2582:                const bool isFalse = conditionIsFalse(condTok, programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2583:
      279: 2584:                if (isTrue)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
       49: 2585:                    truevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      279: 2586:                if (isFalse)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       33: 2587:                    falsevalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2588:
        -: 2589:            }
      327: 2590:            if (!truevalues.empty() || !falsevalues.empty()) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 29% (fallthrough)
branch  5 taken 71%
branch  6 taken 41% (fallthrough)
branch  7 taken 59%
        -: 2591:                // '{'
      134: 2592:                const Token * const startToken1 = tok2->linkAt(1)->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 2593:
      402: 2594:                bool vfresult = valueFlowForwardVariable(startToken1->next(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
      134: 2595:                                startToken1->link(),
call    0 returned 100%
        -: 2596:                                var,
        -: 2597:                                varid,
        -: 2598:                                truevalues,
        -: 2599:                                constValue,
        -: 2600:                                subFunction,
        -: 2601:                                tokenlist,
        -: 2602:                                errorLogger,
      134: 2603:                                settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2604:
      134: 2605:                if (!condAlwaysFalse && isVariableChanged(startToken1, startToken1->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 18% (fallthrough)
branch  9 taken 82%
branch 10 taken 12% (fallthrough)
branch 11 taken 88%
       16: 2606:                    removeValues(values, truevalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16: 2607:                    lowerToPossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2608:                }
        -: 2609:
        -: 2610:                // goto '}'
      134: 2611:                tok2 = startToken1->link();
call    0 returned 100%
        -: 2612:
      134: 2613:                if (isReturnScope(tok2, settings) || !vfresult) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 93% (fallthrough)
branch  4 taken 7%
branch  5 taken 5% (fallthrough)
branch  6 taken 95%
branch  7 taken 12% (fallthrough)
branch  8 taken 88%
       16: 2614:                    if (condAlwaysTrue)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2615:                        return false;
       16: 2616:                    removeValues(values, truevalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2617:                }
        -: 2618:
      134: 2619:                if (Token::simpleMatch(tok2, "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
       12: 2620:                    const Token * const startTokenElse = tok2->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2621:
       24: 2622:                    vfresult = valueFlowForwardVariable(startTokenElse->next(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       12: 2623:                                                        startTokenElse->link(),
call    0 returned 100%
        -: 2624:                                                        var,
        -: 2625:                                                        varid,
        -: 2626:                                                        falsevalues,
        -: 2627:                                                        constValue,
        -: 2628:                                                        subFunction,
        -: 2629:                                                        tokenlist,
        -: 2630:                                                        errorLogger,
        -: 2631:                                                        settings);
        -: 2632:
       12: 2633:                    if (!condAlwaysTrue && isVariableChanged(startTokenElse, startTokenElse->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2634:                        removeValues(values, falsevalues);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2635:                        lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2636:                    }
        -: 2637:
        -: 2638:                    // goto '}'
       12: 2639:                    tok2 = startTokenElse->link();
call    0 returned 100%
        -: 2640:
       12: 2641:                    if (isReturnScope(tok2, settings) || !vfresult) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2642:                        if (condAlwaysFalse)
branch  0 never executed
branch  1 never executed
    #####: 2643:                            return false;
    #####: 2644:                        removeValues(values, falsevalues);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2645:                    }
        -: 2646:                }
      134: 2647:                if (values.empty())
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
       17: 2648:                    return false;
      117: 2649:                continue;
        -: 2650:            }
        -: 2651:
      193: 2652:            Token * const start = tok2->linkAt(1)->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      193: 2653:            Token * const end   = start->link();
call    0 returned 100%
      386: 2654:            const bool varusage = (indentlevel >= 0 && constValue && number_of_if == 0U) ?
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
branch  4 taken 90% (fallthrough)
branch  5 taken 10%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
      159: 2655:                                  isVariableChanged(start,end,varid,var->isGlobal(),settings, tokenlist->isCPP()) :
call    0 returned 100%
call    1 returned 100%
      227: 2656:                                  (nullptr != Token::findmatch(start, "%varid%", end, varid));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      193: 2657:            if (!read) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
      189: 2658:                read = bool(nullptr != Token::findmatch(tok2, "%varid% !!=", end, varid));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2659:            }
      193: 2660:            if (varusage) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      129: 2661:                varusagelevel = indentlevel;
        -: 2662:
      129: 2663:                if (indentlevel < 0 && tok2->str() == "switch")
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
       18: 2664:                    return false;
        -: 2665:
        -: 2666:                // TODO: don't check noreturn scopes
      129: 2667:                if (read && (number_of_if > 0U || Token::findmatch(tok2, "%varid%", start, varid))) {
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 85% (fallthrough)
branch  3 taken 15%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 5% (fallthrough)
branch  8 taken 95%
branch  9 taken 14% (fallthrough)
branch 10 taken 86%
        -: 2668:                    // Set values in condition
       18: 2669:                    const Token * const condend = tok2->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       96: 2670:                    for (Token *condtok = tok2; condtok != condend; condtok = condtok->next()) {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
call    2 returned 100%
       80: 2671:                        if (condtok->varId() == varid) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       12: 2672:                            for (const ValueFlow::Value &v : values)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        8: 2673:                                setTokenValue(condtok, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2674:                        }
       80: 2675:                        if (Token::Match(condtok, "%oror%|&&|?|;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 98%
        2: 2676:                            break;
        -: 2677:                    }
       18: 2678:                    if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2679:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " is assigned in conditional code");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       18: 2680:                    return false;
        -: 2681:                }
        -: 2682:
      111: 2683:                if (var->isStatic()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2684:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2685:                        bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " bailout when conditional code that contains var is seen");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2686:                    return false;
        -: 2687:                }
        -: 2688:
        -: 2689:                // Forward known values in the else branch
      111: 2690:                if (Token::simpleMatch(end, "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 2691:                    std::list<ValueFlow::Value> knownValues;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        1: 2692:                    std::copy_if(values.begin(), values.end(), std::back_inserter(knownValues), std::mem_fn(&ValueFlow::Value::isKnown));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        2: 2693:                    valueFlowForwardVariable(end->tokAt(2),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        1: 2694:                                             end->linkAt(2),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2695:                                             var,
        -: 2696:                                             varid,
        -: 2697:                                             knownValues,
        -: 2698:                                             constValue,
        -: 2699:                                             subFunction,
        -: 2700:                                             tokenlist,
        -: 2701:                                             errorLogger,
        -: 2702:                                             settings);
        -: 2703:                }
        -: 2704:
        -: 2705:                // Remove conditional values
      222: 2706:                std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 returned 100%
      222: 2707:                for (it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
      111: 2708:                    if (it->condition || it->conditional || it->isImpossible())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2709:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2710:                    else {
      111: 2711:                        it->changeKnownToPossible();
call    0 returned 100%
call    1 returned 100%
      111: 2712:                        ++it;
call    0 returned 100%
        -: 2713:                    }
        -: 2714:                }
        -: 2715:            }
        -: 2716:
        -: 2717:            // stop after conditional return scopes that are executed
      175: 2718:            if (isReturnScope(end, settings)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
       50: 2719:                std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 never executed
       50: 2720:                for (it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
       25: 2721:                    if (conditionIsTrue(tok2->next()->astOperand2(), getProgramMemory(tok2, varid, *it)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
    #####: 2722:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2723:                    else
       25: 2724:                        ++it;
call    0 returned 100%
        -: 2725:                }
       25: 2726:                if (values.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2727:                    return false;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 2728:            }
        -: 2729:
        -: 2730:            // noreturn scopes..
      208: 2731:            if ((number_of_if > 0 || Token::findmatch(tok2, "%varid%", start, varid)) &&
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 16% (fallthrough)
branch  6 taken 84%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
       66: 2732:                (isEscapeScope(start, tokenlist) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 18% (fallthrough)
branch  4 taken 82%
       39: 2733:                 (Token::simpleMatch(end,"} else {") && isEscapeScope(end->tokAt(2), tokenlist)))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 2734:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2735:                    bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + ". noreturn conditional scope.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 2736:                return false;
        -: 2737:            }
        -: 2738:
      175: 2739:            if (isVariableChanged(start, end, varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 63% (fallthrough)
branch  6 taken 37%
      407: 2740:                if ((!read || number_of_if == 0) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 26% (fallthrough)
branch  3 taken 74%
branch  4 taken 26% (fallthrough)
branch  5 taken 74%
      280: 2741:                    Token::simpleMatch(tok2, "if (") &&
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
       30: 2742:                    !(Token::simpleMatch(end, "} else {") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 2743:                      isEscapeScope(end->tokAt(2), tokenlist))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       29: 2744:                    ++number_of_if;
       29: 2745:                    tok2 = end;
        -: 2746:                } else {
        -: 2747:                    // loop that conditionally set variable and then break => either loop condition is
        -: 2748:                    // redundant or the variable can be unchanged after the loop.
       82: 2749:                    bool loopCondition = false;
       82: 2750:                    if (Token::simpleMatch(tok2, "while (") && Token::Match(tok2->next()->astOperand2(), "%op%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2751:                        loopCondition = true;
      164: 2752:                    else if (Token::simpleMatch(tok2, "for (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2753:                             Token::simpleMatch(tok2->next()->astOperand2(), ";") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
       82: 2754:                             Token::simpleMatch(tok2->next()->astOperand2()->astOperand2(), ";") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2755:                             Token::Match(tok2->next()->astOperand2()->astOperand2()->astOperand1(), "%op%"))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2756:                        loopCondition = true;
        -: 2757:
       82: 2758:                    bool bail = true;
       82: 2759:                    if (loopCondition) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2760:                        const Token *tok3 = Token::findmatch(start, "%varid%", end, varid);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2761:                        if (Token::Match(tok3, "%varid% =", varid) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2762:                            tok3->scope()->bodyEnd                &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2763:                            Token::Match(tok3->scope()->bodyEnd->tokAt(-3), "[;}] break ;") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2764:                            !Token::findmatch(tok3->next(), "%varid%", end, varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2765:                            bail = false;
    #####: 2766:                            tok2 = end;
        -: 2767:                        }
        -: 2768:                    }
        -: 2769:
       82: 2770:                    if (bail) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       82: 2771:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2772:                            bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + " is assigned in conditional code");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       82: 2773:                        return false;
call    0 returned 100%
branch  1 taken 28%
branch  2 taken 36%
branch  3 taken 36%
        -: 2774:                    }
        -: 2775:                }
        -: 2776:            }
        -: 2777:        }
        -: 2778:
     7227: 2779:        else if (Token::Match(tok2, "assert|ASSERT (") && Token::simpleMatch(tok2->linkAt(1), ") ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 2780:            const Token * const arg = tok2->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 2781:            if (arg != nullptr && arg->str() != ",") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2782:                // Should scope be skipped because variable value is checked?
    #####: 2783:                for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2784:                    if (conditionIsFalse(arg, getProgramMemory(tok2, varid, *it)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2785:                        values.erase(it++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 2786:                    else
    #####: 2787:                        ++it;
call    0 never executed
        -: 2788:                }
        -: 2789:            }
        -: 2790:        }
        -: 2791:
     7227: 2792:        else if (tok2->str() == "}" && indentlevel == varusagelevel) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
branch  4 taken 70% (fallthrough)
branch  5 taken 30%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
      188: 2793:            ++number_of_if;
        -: 2794:
        -: 2795:            // Set "conditional" flag for all values
      188: 2796:            removeImpossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      376: 2797:            std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      376: 2798:            for (it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
      188: 2799:                it->conditional = true;
call    0 returned 100%
      188: 2800:                it->changeKnownToPossible();
call    0 returned 100%
call    1 returned 100%
        -: 2801:            }
        -: 2802:
      188: 2803:            if (Token::simpleMatch(tok2,"} else {"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
       11: 2804:                tok2 = tok2->linkAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2805:        }
        -: 2806:
     7039: 2807:        else if (Token::Match(tok2, "break|continue|goto")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       23: 2808:            const Scope *scope = tok2->scope();
call    0 returned 100%
       23: 2809:            if (indentlevel > 0) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        4: 2810:                const Token *tok3 = tok2->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4: 2811:                int indentlevel2 = indentlevel;
        4: 2812:                while (indentlevel2 > 0 &&
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        7: 2813:                       tok3->str() == "}" &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        3: 2814:                       Token::Match(tok3->link()->previous(), "!!)")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
    #####: 2815:                    indentlevel2--;
    #####: 2816:                    tok3 = tok3->next();
call    0 never executed
    #####: 2817:                    if (tok3 && tok3->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2818:                        tok3 = tok3->next();
call    0 never executed
        -: 2819:                }
        4: 2820:                if (indentlevel2 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 2821:                    continue;
    #####: 2822:                scope = tok3->scope();
call    0 never executed
    #####: 2823:                indentlevel = 0;
        -: 2824:            }
       19: 2825:            if (tok2->str() == "break") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 79% (fallthrough)
branch  3 taken 21%
       28: 2826:                if (scope && scope->type == Scope::eSwitch) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       15: 2827:                    tok2 = const_cast<Token *>(scope->bodyEnd);
       15: 2828:                    if (tok2 == endToken)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        2: 2829:                        break;
       13: 2830:                    --indentlevel;
       13: 2831:                    lowerToPossible(values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       13: 2832:                    continue;
        -: 2833:                }
        -: 2834:            }
        4: 2835:            if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2836:                bailout(tokenlist, errorLogger, tok2, "variable " + var->name() + ". noreturn conditional scope.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        4: 2837:            return false;
        -: 2838:        }
        -: 2839:
     7016: 2840:        else if (indentlevel <= 0 && Token::Match(tok2, "return|throw|setjmp|longjmp"))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
      173: 2841:            returnStatement = true;
        -: 2842:
     6843: 2843:        else if (returnStatement && tok2->str() == ";")
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 27% (fallthrough)
branch  5 taken 73%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
      164: 2844:            return false;
        -: 2845:
        -: 2846:        // If a ? is seen and it's known that the condition is true/false..
     6679: 2847:        else if (tok2->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2848:            if (subFunction && (astIsPointer(tok2->astOperand1()) || astIsIntegral(tok2->astOperand1(), false))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 2849:                tok2 = const_cast<Token*>(nextAfterAstRightmostLeaf(tok2));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2850:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2851:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2852:                            errorLogger,
        -: 2853:                            tok2,
        -: 2854:                            "variable " + var->name() + " valueFlowForwardVariable, skip ternary in subfunctions");
    #####: 2855:                continue;
        -: 2856:            }
    #####: 2857:            const Token *condition = tok2->astOperand1();
call    0 never executed
    #####: 2858:            Token *op2 = tok2->astOperand2();
call    0 never executed
    #####: 2859:            if (!condition || !op2) // Ticket #6713
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2860:                continue;
        -: 2861:
    #####: 2862:            if (condition->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2863:                const ValueFlow::Value &condValue = condition->values().front();
call    0 never executed
call    1 never executed
    #####: 2864:                Token *expr = (condValue.intvalue != 0) ? op2->astOperand1() : op2->astOperand2();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 2865:                for (const ValueFlow::Value &v : values)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2866:                    valueFlowAST(expr, varid, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2867:                if (isVariableChangedByFunctionCall(expr, 0, varid, settings, nullptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2868:                    lowerToPossible(values, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2869:                if (isVariableChangedByFunctionCall(expr, 1, varid, settings, nullptr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2870:                    lowerToPossible(values, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2871:            } else {
    #####: 2872:                for (const ValueFlow::Value &v : values) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2873:                    const ProgramMemory programMemory(getProgramMemory(tok2, varid, v));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2874:                    if (conditionIsTrue(condition, programMemory))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2875:                        valueFlowAST(op2->astOperand1(), varid, v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2876:                    else if (conditionIsFalse(condition, programMemory))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2877:                        valueFlowAST(op2->astOperand2(), varid, v, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2878:                    else
    #####: 2879:                        valueFlowAST(op2, varid, v, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2880:                }
        -: 2881:
    #####: 2882:                const Token * const expr0 = op2->astOperand1() ? op2->astOperand1() : tok2->astOperand1();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2883:                const Token * const expr1 = op2->astOperand2();
call    0 never executed
        -: 2884:
    #####: 2885:                const std::pair<const Token *, const Token *> startEnd0 = expr0->findExpressionStartEndTokens();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2886:                const std::pair<const Token *, const Token *> startEnd1 = expr1->findExpressionStartEndTokens();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2887:                const bool changed0 = isVariableChanged(startEnd0.first, startEnd0.second->next(), varid, var->isGlobal(), settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2888:                const bool changed1 = isVariableChanged(startEnd1.first, startEnd1.second->next(), varid, var->isGlobal(), settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2889:
    #####: 2890:                if (changed0 && changed1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2891:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2892:                        bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 2893:                                errorLogger,
        -: 2894:                                tok2,
        -: 2895:                                "variable " + var->name() + " valueFlowForwardVariable, changed in both : expressions");
    #####: 2896:                    return false;
        -: 2897:                }
        -: 2898:
    #####: 2899:                if (changed0 || changed1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2900:                    lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2901:            }
        -: 2902:
        -: 2903:            // Skip conditional expressions..
    #####: 2904:            const Token * const questionToken = tok2;
    #####: 2905:            while (tok2->astOperand1() || tok2->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2906:                if (tok2->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2907:                    tok2 = tok2->astOperand2();
call    0 never executed
    #####: 2908:                else if (tok2->isUnaryPreOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2909:                    tok2 = tok2->astOperand1();
call    0 never executed
        -: 2910:                else
    #####: 2911:                    break;
        -: 2912:            }
    #####: 2913:            tok2 = tok2->next();
call    0 never executed
        -: 2914:
    #####: 2915:            if (isVariableChanged(questionToken, questionToken->astOperand2(), varid, false, settings, tokenlist->isCPP()) &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2916:                isVariableChanged(questionToken->astOperand2(), tok2, varid, false, settings, tokenlist->isCPP())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2917:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2918:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
        -: 2919:                            errorLogger,
        -: 2920:                            tok2,
        -: 2921:                            "variable " + var->name() + " valueFlowForwardVariable, assignment in condition");
    #####: 2922:                return false;
        -: 2923:
        -: 2924:            }
        -: 2925:        }
        -: 2926:
     6679: 2927:        else if (tok2->varId() == varid) {
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        -: 2928:            // compound assignment, known value in rhs
     1366: 2929:            if (Token::Match(tok2->previous(), "!!* %name% %assign%") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 14% (fallthrough)
branch  5 taken 86%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
       96: 2930:                tok2->next()->str() != "=" &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      665: 2931:                tok2->next()->astOperand2() &&
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 92% (fallthrough)
branch  5 taken 8%
       12: 2932:                tok2->next()->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 2933:
       11: 2934:                const ValueFlow::Value &rhsValue = tok2->next()->astOperand2()->values().front();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       11: 2935:                const std::string &assign = tok2->next()->str();
call    0 returned 100%
call    1 returned 100%
       15: 2936:                std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 never executed
        -: 2937:                // Erase values that are not int values..
       22: 2938:                for (it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
       11: 2939:                    if (!evalAssignment(*it, assign, rhsValue)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 64% (fallthrough)
branch  5 taken 36%
        7: 2940:                        it = values.erase(it);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -: 2941:                    } else {
        8: 2942:                        const std::string info("Compound assignment '" + assign + "', assigned value is " + it->infoString());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 never executed
call   18 never executed
call   19 never executed
        4: 2943:                        it->errorPath.emplace_back(tok2, info);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2944:
        4: 2945:                        ++it;
call    0 returned 100%
        -: 2946:                    }
        -: 2947:
        -: 2948:                }
       11: 2949:                if (values.empty()) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
        7: 2950:                    if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2951:                        bailout(tokenlist, errorLogger, tok2, "compound assignment of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        7: 2952:                    return false;
call    0 returned 100%
branch  1 taken 36%
branch  2 taken 64%
        -: 2953:                }
        -: 2954:            }
        -: 2955:
        -: 2956:            // bailout: assignment
      630: 2957:            else if (Token::Match(tok2->previous(), "!!* %name% %assign%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
        -: 2958:                // simplify rhs
      146: 2959:                std::stack<Token *> rhs;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       73: 2960:                rhs.push(tok2->next()->astOperand2());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      579: 2961:                while (!rhs.empty()) {
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
      253: 2962:                    Token *rtok = rhs.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      253: 2963:                    rhs.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      253: 2964:                    if (!rtok)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      163: 2965:                        continue;
       90: 2966:                    if (rtok->str() == "(" && Token::Match(rtok->astOperand1(), "sizeof|typeof|typeid"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2967:                        continue;
       90: 2968:                    if (Token::Match(rtok, "++|--|?|:|;|,"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2969:                        continue;
       90: 2970:                    if (rtok->varId() == varid) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        8: 2971:                        for (const ValueFlow::Value &v : values)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 2972:                            setTokenValue(rtok, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2973:                    }
       90: 2974:                    rhs.push(rtok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       90: 2975:                    rhs.push(rtok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2976:                }
       73: 2977:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2978:                    bailout(tokenlist, errorLogger, tok2, "assignment of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
       73: 2979:                return false;
        -: 2980:            }
        -: 2981:
        -: 2982:            // bailout: possible assignment using >>
      561: 2983:            if (isLikelyStreamRead(tokenlist->isCPP(), tok2->previous())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2984:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2985:                    bailout(tokenlist, errorLogger, tok2, "Possible assignment of " + tok2->str() + " using " + tok2->strAt(-1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
    #####: 2986:                return false;
        -: 2987:            }
        -: 2988:
        -: 2989:            // skip if variable is conditionally used in ?: expression
      561: 2990:            if (const Token *parent = skipValueInConditionalExpression(tok2)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2991:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 2992:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
branch 54 never executed
branch 55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
        -: 2993:                            errorLogger,
        -: 2994:                            tok2,
        -: 2995:                            "no simplification of " + tok2->str() + " within " + (Token::Match(parent,"[?:]") ? "?:" : parent->str()) + " expression");
    #####: 2996:                const Token *astTop = parent->astTop();
call    0 never executed
    #####: 2997:                if (Token::simpleMatch(astTop->astOperand1(), "for ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2998:                    tok2 = astTop->link();
call    0 never executed
        -: 2999:
        -: 3000:                // bailout if address of var is taken..
    #####: 3001:                if (tok2->astParent() && tok2->astParent()->isUnaryOp("&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 3002:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3003:                        bailout(tokenlist, errorLogger, tok2, "Taking address of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 3004:                    return false;
        -: 3005:                }
        -: 3006:
    #####: 3007:                continue;
        -: 3008:            }
        -: 3009:
        -: 3010:            {
        -: 3011:                // Is variable usage protected by && || ?:
      561: 3012:                const Token *tok3 = tok2;
      561: 3013:                const Token *parent = tok3->astParent();
call    0 returned 100%
     2565: 3014:                while (parent && !Token::Match(parent, "%oror%|&&|:")) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
branch  7 taken 64% (fallthrough)
branch  8 taken 36%
     1002: 3015:                    tok3 = parent;
     1002: 3016:                    parent = parent->astParent();
call    0 returned 100%
        -: 3017:                }
      561: 3018:                const bool conditional = parent && (parent->str() == ":" || parent->astOperand2() == tok3);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -: 3019:
     1134: 3020:                for (const ValueFlow::Value &v : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      573: 3021:                    if (!conditional || !v.conditional)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      573: 3022:                        setTokenValue(tok2, v, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3023:                }
        -: 3024:            }
        -: 3025:
        -: 3026:            // increment/decrement
      561: 3027:            if (Token::Match(tok2->previous(), "++|-- %name%") || Token::Match(tok2, "%name% ++|--")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 96% (fallthrough)
branch  5 taken 4%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 7% (fallthrough)
branch 10 taken 93%
branch 11 taken 11% (fallthrough)
branch 12 taken 89%
      113: 3028:                std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 never executed
        -: 3029:                // Erase values that are not int values..
      128: 3030:                for (it = values.begin(); it != values.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 52% (fallthrough)
branch  7 taken 48%
       67: 3031:                    if (!it->isIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
        9: 3032:                        it = values.erase(it);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -: 3033:                    else
       58: 3034:                        ++it;
call    0 returned 100%
        -: 3035:                }
       61: 3036:                if (values.empty()) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
        9: 3037:                    if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3038:                        bailout(tokenlist, errorLogger, tok2, "increment/decrement of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        9: 3039:                    return false;
        -: 3040:                }
       52: 3041:                const bool pre   = Token::Match(tok2->previous(), "++|--");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       52: 3042:                Token * const op = pre ? tok2->previous() : tok2->next();
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
call    2 returned 100%
call    3 returned 100%
       52: 3043:                const bool inc   = (op->str() == "++");
call    0 returned 100%
call    1 returned 100%
        -: 3044:                // Perform increment/decrement..
      110: 3045:                for (it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 53% (fallthrough)
branch  7 taken 47%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 85%
branch 11 taken 15%
       58: 3046:                    if (!pre)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
       44: 3047:                        setTokenValue(op, *it, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       58: 3048:                    it->intvalue += (inc ? 1 : -1);
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
       58: 3049:                    if (pre)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       14: 3050:                        setTokenValue(op, *it, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      116: 3051:                    const std::string info(tok2->str() + " is " + std::string(inc ? "incremented" : "decremented") + "', new value is " + it->infoString());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 93% (fallthrough)
branch  6 taken 7%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 returned 100%
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
       58: 3052:                    it->errorPath.emplace_back(tok2, info);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3053:                }
        -: 3054:            }
        -: 3055:
        -: 3056:            // bailout if address of var is taken..
      552: 3057:            if (tok2->astParent() && tok2->astParent()->isUnaryOp("&")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 12% (fallthrough)
branch 12 taken 88%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 12% (fallthrough)
branch 20 taken 88%
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
       68: 3058:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3059:                    bailout(tokenlist, errorLogger, tok2, "Taking address of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
       68: 3060:                return false;
        -: 3061:            }
        -: 3062:
        -: 3063:            // bailout if reference is created..
      484: 3064:            if (tok2->astParent() && Token::Match(tok2->astParent()->tokAt(-2), "& %name% =")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 3065:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3066:                    bailout(tokenlist, errorLogger, tok2, "Reference of " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 3067:                return false;
        -: 3068:            }
        -: 3069:
        -: 3070:            // bailout if its stream..
      484: 3071:            if (isLikelyStream(tokenlist->isCPP(), tok2)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 3072:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3073:                    bailout(tokenlist, errorLogger, tok2, "Stream used: " + tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####: 3074:                return false;
        -: 3075:            }
        -: 3076:
        -: 3077:            // assigned by subfunction?
      968: 3078:            for (int i:getIndirections(values)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
      484: 3079:                bool inconclusive = false;
      484: 3080:                if (isVariableChangedByFunctionCall(tok2, i, settings, &inconclusive)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
function _ZZL24valueFlowForwardVariableP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E1_clESK_ called 2 returned 100% blocks executed 100%
        4: 3081:                    values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
        2: 3082:                        return v.indirect <= i;
        2: 3083:                    });
        -: 3084:                }
      484: 3085:                if (inconclusive)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      120: 3086:                    lowerToInconclusive(values, settings, i);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3087:            }
      484: 3088:            if (values.empty()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
       14: 3089:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3090:                    bailout(tokenlist, errorLogger, tok2, "possible assignment of " + tok2->str() + " by subfunction");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       14: 3091:                return false;
        -: 3092:            }
      470: 3093:            if (tok2->strAt(1) == "." && tok2->next()->originalName() != "->") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 55% (fallthrough)
branch 10 taken 45%
branch 11 taken 6% (fallthrough)
branch 12 taken 94%
       30: 3094:                lowerToInconclusive(values, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       30: 3095:                if (!settings->inconclusive) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3096:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3097:                        bailout(tokenlist, errorLogger, tok2, "possible assignment of " + tok2->str() + " by member function");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 3098:                    return false;
        -: 3099:                }
        -: 3100:            }
        -: 3101:            // Variable changed
      940: 3102:            for (int i:getIndirections(values)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3103:                // Remove uninitialized values if modified
      470: 3104:                if (isVariableChanged(tok2, i, settings, tokenlist->isCPP()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 46% (fallthrough)
branch  5 taken 54%
function _ZZL24valueFlowForwardVariableP5TokenPKS_PK8VariableiNSt7__debug4listIN9ValueFlow5ValueESaIS9_EEEbbP9TokenListP11ErrorLoggerPK8SettingsENKUlRKS9_E2_clESK_ called 224 returned 100% blocks executed 100%
      442: 3105:                    values.remove_if([&](const ValueFlow::Value& v) {
call    0 returned 100%
      224: 3106:                    return v.isUninitValue() && v.indirect <= i;
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      224: 3107:                });
        -: 3108:            }
     6038: 3109:        } else if (isAliasOf(var, tok2, varid, values) && isVariableChanged(tok2, 0, settings, tokenlist->isCPP())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 3110:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 3111:                bailout(tokenlist, errorLogger, tok2, "Alias variable was modified.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        -: 3112:            // Bail at the end of the statement if its in an assignment
    #####: 3113:            const Token * top = tok2->astTop();
call    0 never executed
    #####: 3114:            if (Token::Match(top, "%assign%") && astHasToken(top->astOperand1(), tok2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3115:                returnStatement = true;
        -: 3116:            else
    #####: 3117:                return false;
        -: 3118:        }
        -: 3119:
        -: 3120:        // Lambda function
    13959: 3121:        if (Token::simpleMatch(tok2, "= [") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
     6981: 3122:            Token::simpleMatch(tok2->linkAt(1), "] (") &&
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        3: 3123:            Token::simpleMatch(tok2->linkAt(1)->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        3: 3124:            const Token *bodyStart = tok2->linkAt(1)->linkAt(1)->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
        3: 3125:            if (isVariableChanged(bodyStart, bodyStart->link(), varid, var->isGlobal(), settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        1: 3126:                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3127:                    bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 3128:                            errorLogger,
        -: 3129:                            tok2,
        -: 3130:                            "valueFlowForwardVariable, " + var->name() + " is changed in lambda function");
        1: 3131:                return false;
        -: 3132:            }
        -: 3133:        }
        -: 3134:
        -: 3135:    }
     1049: 3136:    return true;
        -: 3137:}
        -: 3138:
function _ZL16parseBinaryIntOpPK5TokenRx called 1398 returned 100% blocks executed 97%
     1398: 3139:static const Token* parseBinaryIntOp(const Token* expr, MathLib::bigint& known)
        -: 3140:{
     1398: 3141:    if (!expr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3142:        return nullptr;
     1398: 3143:    if (!expr->astOperand1() || !expr->astOperand2())
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
branch  6 taken 72% (fallthrough)
branch  7 taken 28%
     1013: 3144:        return nullptr;
      385: 3145:    const Token* knownTok = nullptr;
      385: 3146:    const Token* varTok = nullptr;
      385: 3147:    if (expr->astOperand1()->hasKnownIntValue() && !expr->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
        6: 3148:        varTok = expr->astOperand2();
call    0 returned 100%
        6: 3149:        knownTok = expr->astOperand1();
call    0 returned 100%
      379: 3150:    } else if (expr->astOperand2()->hasKnownIntValue() && !expr->astOperand1()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 5% (fallthrough)
branch  9 taken 95%
       19: 3151:        varTok = expr->astOperand1();
call    0 returned 100%
       19: 3152:        knownTok = expr->astOperand2();
call    0 returned 100%
        -: 3153:    }
      385: 3154:    if (knownTok)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       25: 3155:        known = knownTok->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
      385: 3156:    return varTok;
        -: 3157:}
        -: 3158:
        -: 3159:template <class F>
function _Z18transformIntValuesIZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEUlxE1_EvS9_T_ called 0 returned 0% blocks executed 0%
function _Z18transformIntValuesIZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEUlxE0_EvS9_T_ called 0 returned 0% blocks executed 0%
function _Z18transformIntValuesIZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEUlxE_EvS9_T_ called 0 returned 0% blocks executed 0%
    #####: 3160:void transformIntValues(std::list<ValueFlow::Value>& values, F f)
        -: 3161:{
function _ZZ18transformIntValuesIZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEUlxE1_EvS9_T_ENKUlS6_E_clES6_ called 0 returned 0% blocks executed 0%
function _ZZ18transformIntValuesIZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEUlxE0_EvS9_T_ENKUlS6_E_clES6_ called 0 returned 0% blocks executed 0%
function _ZZ18transformIntValuesIZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEEUlxE_EvS9_T_ENKUlS6_E_clES6_ called 0 returned 0% blocks executed 0%
    #####: 3162:    std::transform(values.begin(), values.end(), values.begin(), [&](ValueFlow::Value x) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
    #####: 3163:        if (x.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3164:            x.intvalue = f(x.intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3165:        return x;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3166:    });
    #####: 3167:}
        -: 3168:
function _ZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEE called 1398 returned 100% blocks executed 64%
     1398: 3169:static const Token* solveExprValues(const Token* expr, std::list<ValueFlow::Value>& values)
        -: 3170:{
        -: 3171:    MathLib::bigint intval;
     1398: 3172:    const Token* binaryTok = parseBinaryIntOp(expr, intval);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1398: 3173:    if (binaryTok && expr->str().size() == 1) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 76% (fallthrough)
branch  5 taken 24%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       19: 3174:        switch (expr->str()[0]) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
    #####: 3175:        case '+': {
function _ZZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEENKUlxE_clEx called 0 returned 0% blocks executed 0%
    #####: 3176:            transformIntValues(values, [&](MathLib::bigint x) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3177:                return x - intval;
    #####: 3178:            });
    #####: 3179:            return solveExprValues(binaryTok, values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3180:        }
    #####: 3181:        case '*': {
function _ZZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEENKUlxE0_clEx called 0 returned 0% blocks executed 0%
    #####: 3182:            transformIntValues(values, [&](MathLib::bigint x) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3183:                return x / intval;
    #####: 3184:            });
    #####: 3185:            return solveExprValues(binaryTok, values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3186:        }
    #####: 3187:        case '^': {
function _ZZL15solveExprValuesPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEENKUlxE1_clEx called 0 returned 0% blocks executed 0%
    #####: 3188:            transformIntValues(values, [&](MathLib::bigint x) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3189:                return x ^ intval;
    #####: 3190:            });
    #####: 3191:            return solveExprValues(binaryTok, values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3192:        }
        -: 3193:        }
        -: 3194:    }
     1398: 3195:    return expr;
        -: 3196:}
        -: 3197:
function _ZL16valueFlowForwardP5TokenPKS_S2_NSt7__debug4listIN9ValueFlow5ValueESaIS6_EEEbbP9TokenListP11ErrorLoggerPK8Settings called 1398 returned 100% blocks executed 89%
     1398: 3198:static void valueFlowForward(Token* startToken,
        -: 3199:                             const Token* endToken,
        -: 3200:                             const Token* exprTok,
        -: 3201:                             std::list<ValueFlow::Value> values,
        -: 3202:                             const bool constValue,
        -: 3203:                             const bool subFunction,
        -: 3204:                             TokenList* const tokenlist,
        -: 3205:                             ErrorLogger* const errorLogger,
        -: 3206:                             const Settings* settings)
        -: 3207:{
     1398: 3208:    const Token* expr = solveExprValues(exprTok, values);
call    0 returned 100%
     1398: 3209:    if (Token::Match(expr, "%var%") && expr->variable()) {
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 48% (fallthrough)
branch  7 taken 52%
      665: 3210:        valueFlowForwardVariable(startToken,
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 3211:                                 endToken,
        -: 3212:                                 expr->variable(),
        -: 3213:                                 expr->varId(),
        -: 3214:                                 values,
        -: 3215:                                 constValue,
        -: 3216:                                 subFunction,
        -: 3217:                                 tokenlist,
        -: 3218:                                 errorLogger,
        -: 3219:                                 settings);
        -: 3220:    } else {
      733: 3221:        valueFlowForwardExpression(startToken, endToken, expr, values, tokenlist, settings);
call    0 returned 100%
        -: 3222:    }
     1398: 3223:}
        -: 3224:
function _ZL11findReturnsPK8Function called 262 returned 100% blocks executed 83%
      262: 3225:static std::vector<const Token*> findReturns(const Function* f)
        -: 3226:{
      262: 3227:    std::vector<const Token*> result;
call    0 returned 100%
      262: 3228:    const Scope* scope = f->functionScope;
      262: 3229:    if (!scope)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
      174: 3230:        return result;
      540: 3231:    for (const Token* tok = scope->bodyStart->next(); tok && tok != scope->bodyEnd; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 84% (fallthrough)
branch  4 taken 16%
call    5 returned 100%
      459: 3232:        if (tok->str() == "{" && tok->scope() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
       14: 3233:            (tok->scope()->type == Scope::eLambda || tok->scope()->type == Scope::eClass)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3234:            tok = tok->link();
call    0 never executed
    #####: 3235:            continue;
        -: 3236:        }
      452: 3237:        if (Token::simpleMatch(tok->astParent(), "return")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
       17: 3238:            result.push_back(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3239:        }
        -: 3240:        // Skip lambda functions since the scope may not be set correctly
      452: 3241:        const Token* lambdaEndToken = findLambdaEndToken(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      452: 3242:        if (lambdaEndToken) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3243:            tok = lambdaEndToken;
        -: 3244:        }
        -: 3245:    }
       88: 3246:    return result;
call    0 never executed
        -: 3247:}
        -: 3248:
function _ZL14getArgumentPosPK8VariablePK8Function called 1 returned 100% blocks executed 56%
        1: 3249:static int getArgumentPos(const Variable *var, const Function *f)
        -: 3250:{
function _ZZL14getArgumentPosPK8VariablePK8FunctionENKUlRS0_E_clES5_ called 1 returned 100% blocks executed 100%
        3: 3251:    auto arg_it = std::find_if(f->argumentList.begin(), f->argumentList.end(), [&](const Variable &v) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
        1: 3252:        return v.nameToken() == var->nameToken();
call    0 returned 100%
call    1 returned 100%
        4: 3253:    });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 never executed
        1: 3254:    if (arg_it == f->argumentList.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3255:        return -1;
        1: 3256:    return std::distance(f->argumentList.begin(), arg_it);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
        -: 3257:}
        -: 3258:
function _Z12lifetimeTypeB5cxx11PK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####: 3259:std::string lifetimeType(const Token *tok, const ValueFlow::Value *val)
        -: 3260:{
    #####: 3261:    std::string result;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3262:    if (!val)
branch  0 never executed
branch  1 never executed
    #####: 3263:        return "object";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 3264:    switch (val->lifetimeKind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3265:    case ValueFlow::Value::LifetimeKind::Lambda:
    #####: 3266:        result = "lambda";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3267:        break;
    #####: 3268:    case ValueFlow::Value::LifetimeKind::Iterator:
    #####: 3269:        result = "iterator";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3270:        break;
    #####: 3271:    case ValueFlow::Value::LifetimeKind::Object:
        -: 3272:    case ValueFlow::Value::LifetimeKind::Address:
    #####: 3273:        if (astIsPointer(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3274:            result = "pointer";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3275:        else
    #####: 3276:            result = "object";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3277:        break;
        -: 3278:    }
    #####: 3279:    return result;
call    0 never executed
        -: 3280:}
        -: 3281:
function _Z15lifetimeMessagePK5TokenPKN9ValueFlow5ValueERNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISF_EEE called 0 returned 0% blocks executed 0%
    #####: 3282:std::string lifetimeMessage(const Token *tok, const ValueFlow::Value *val, ErrorPath &errorPath)
        -: 3283:{
    #####: 3284:    const Token *tokvalue = val ? val->tokvalue : nullptr;
branch  0 never executed
branch  1 never executed
    #####: 3285:    const Variable *tokvar = tokvalue ? tokvalue->variable() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3286:    const Token *vartok = tokvar ? tokvar->nameToken() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3287:    std::string type = lifetimeType(tok, val);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3288:    std::string msg = type;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3289:    if (vartok) {
branch  0 never executed
branch  1 never executed
    #####: 3290:        errorPath.emplace_back(vartok, "Variable created here.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3291:        const Variable * var = vartok->variable();
call    0 never executed
    #####: 3292:        if (var) {
branch  0 never executed
branch  1 never executed
    #####: 3293:            switch (val->lifetimeKind) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3294:            case ValueFlow::Value::LifetimeKind::Object:
        -: 3295:            case ValueFlow::Value::LifetimeKind::Address:
    #####: 3296:                if (type == "pointer")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3297:                    msg += " to local variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3298:                else
    #####: 3299:                    msg += " that points to local variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3300:                break;
    #####: 3301:            case ValueFlow::Value::LifetimeKind::Lambda:
    #####: 3302:                msg += " that captures local variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3303:                break;
    #####: 3304:            case ValueFlow::Value::LifetimeKind::Iterator:
    #####: 3305:                msg += " to local container";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3306:                break;
        -: 3307:            }
    #####: 3308:            msg += " '" + var->name() + "'";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 3309:        }
        -: 3310:    }
    #####: 3311:    return msg;
        -: 3312:}
        -: 3313:
function _Z19getLifetimeObjValuePK5Token called 46 returned 100% blocks executed 60%
       46: 3314:ValueFlow::Value getLifetimeObjValue(const Token *tok)
        -: 3315:{
       46: 3316:    ValueFlow::Value result;
call    0 returned 100%
function _ZZ19getLifetimeObjValuePK5TokenENKUlRKN9ValueFlow5ValueEE_clES5_ called 32 returned 100% blocks executed 91%
       32: 3317:    auto pred = [](const ValueFlow::Value &v) {
       32: 3318:        if (!v.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 63%
       12: 3319:            return false;
       20: 3320:        if (v.isInconclusive())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3321:            return false;
       20: 3322:        if (!v.tokvalue->variable())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        1: 3323:            return false;
       19: 3324:        return true;
        -: 3325:    };
       92: 3326:    auto it = std::find_if(tok->values().begin(), tok->values().end(), pred);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
       46: 3327:    if (it == tok->values().end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 59% (fallthrough)
branch  5 taken 41%
       27: 3328:        return result;
       19: 3329:    result = *it;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3330:    // There should only be one lifetime
       19: 3331:    if (std::find_if(std::next(it), tok->values().end(), pred) != tok->values().end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####: 3332:        return result;
       19: 3333:    return result;
        -: 3334:}
        -: 3335:
function _Z17getLifetimeTokensPK5TokenNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEEi called 3180 returned 100% blocks executed 38%
     3180: 3336:std::vector<LifetimeToken> getLifetimeTokens(const Token* tok, ValueFlow::Value::ErrorPath errorPath, int depth)
        -: 3337:{
     3180: 3338:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3339:        return std::vector<LifetimeToken> {};
call    0 never executed
     3180: 3340:    const Variable *var = tok->variable();
call    0 returned 100%
     3180: 3341:    if (depth < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3342:        return {{tok, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
     3180: 3343:    if (var && var->declarationId() == tok->varId()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
     2994: 3344:        if (var->isReference() || var->isRValueReference()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
      140: 3345:            if (!var->declEndToken())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3346:                return {{tok, true, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
      140: 3347:            if (var->isArgument()) {
call    0 returned 100%
branch  1 taken 66% (fallthrough)
branch  2 taken 34%
       92: 3348:                errorPath.emplace_back(var->declEndToken(), "Passed to reference.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
       92: 3349:                return {{tok, true, std::move(errorPath)}};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
       48: 3350:            } else if (Token::simpleMatch(var->declEndToken(), "=")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
       43: 3351:                errorPath.emplace_back(var->declEndToken(), "Assigned to reference.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
       43: 3352:                const Token *vartok = var->declEndToken()->astOperand2();
call    0 returned 100%
call    1 returned 100%
       43: 3353:                if (vartok == tok || (var->isConst() && isTemporary(true, vartok)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3354:                    return {{tok, true, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
       43: 3355:                if (vartok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       43: 3356:                    return getLifetimeTokens(vartok, std::move(errorPath), depth - 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
        -: 3357:            } else {
        5: 3358:                return std::vector<LifetimeToken> {};
call    0 returned 100%
        -: 3359:            }
        -: 3360:        }
      186: 3361:    } else if (Token::Match(tok->previous(), "%name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
       29: 3362:        const Function *f = tok->previous()->function();
call    0 returned 100%
call    1 returned 100%
       29: 3363:        if (f) {
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        6: 3364:            if (!Function::returnsReference(f))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3365:                return {{tok, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
       12: 3366:            std::vector<LifetimeToken> result;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       12: 3367:            std::vector<const Token*> returns = findReturns(f);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        6: 3368:            for (const Token* returnTok : returns) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
    #####: 3369:                if (returnTok == tok)
branch  0 never executed
branch  1 never executed
    #####: 3370:                    continue;
    #####: 3371:                for (LifetimeToken& lt : getLifetimeTokens(returnTok, std::move(errorPath), depth - 1)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
    #####: 3372:                    const Token* argvarTok = lt.token;
    #####: 3373:                    const Variable* argvar = argvarTok->variable();
call    0 never executed
    #####: 3374:                    if (!argvar)
branch  0 never executed
branch  1 never executed
    #####: 3375:                        continue;
    #####: 3376:                    if (argvar->isArgument() && (argvar->isReference() || argvar->isRValueReference())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3377:                        int n = getArgumentPos(argvar, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3378:                        if (n < 0)
branch  0 never executed
branch  1 never executed
    #####: 3379:                            return std::vector<LifetimeToken> {};
call    0 never executed
    #####: 3380:                        const Token* argTok = getArguments(tok->previous()).at(n);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 3381:                        lt.errorPath.emplace_back(returnTok, "Return reference.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3382:                        lt.errorPath.emplace_back(tok->previous(), "Called function passing '" + argTok->str() + "'.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3383:                        std::vector<LifetimeToken> arglts = LifetimeToken::setInconclusive(
    #####: 3384:                                                                getLifetimeTokens(argTok, std::move(lt.errorPath), depth - 1), returns.size() > 1);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3385:                        result.insert(result.end(), arglts.begin(), arglts.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3386:                    }
        -: 3387:                }
        -: 3388:            }
        6: 3389:            return result;
call    0 returned 100%
       23: 3390:        } else if (Token::Match(tok->tokAt(-2), ". %name% (") && astIsContainer(tok->tokAt(-2)->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3391:            const Library::Container* library = getLibraryContainer(tok->tokAt(-2)->astOperand1());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3392:            Library::Container::Yield y = library->getYield(tok->previous()->str());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3393:            if (y == Library::Container::Yield::AT_INDEX || y == Library::Container::Yield::ITEM) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3394:                errorPath.emplace_back(tok->previous(), "Accessing container.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 3395:                return LifetimeToken::setAddressOf(
    #####: 3396:                           getLifetimeTokens(tok->tokAt(-2)->astOperand1(), std::move(errorPath), depth - 1), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 3397:            }
        -: 3398:        }
      157: 3399:    } else if (Token::Match(tok, ".|::|[")) {
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
       30: 3400:        const Token *vartok = tok;
       92: 3401:        while (vartok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       61: 3402:            if (vartok->str() == "[" || vartok->originalName() == "->")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 72% (fallthrough)
branch  3 taken 28%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
branch  8 taken 38% (fallthrough)
branch  9 taken 62%
       23: 3403:                vartok = vartok->astOperand1();
call    0 returned 100%
       38: 3404:            else if (vartok->str() == "." || vartok->str() == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 12% (fallthrough)
branch  7 taken 88%
branch  8 taken 21% (fallthrough)
branch  9 taken 79%
        8: 3405:                vartok = vartok->astOperand2();
call    0 returned 100%
        -: 3406:            else
       30: 3407:                break;
        -: 3408:        }
        -: 3409:
       30: 3410:        if (!vartok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3411:            return {{tok, std::move(errorPath)}};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
       30: 3412:        const Variable *tokvar = vartok->variable();
call    0 returned 100%
       52: 3413:        if (!astIsContainer(vartok) && !(tokvar && tokvar->isArray()) &&
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
branch  3 taken 47% (fallthrough)
branch  4 taken 53%
call    5 returned 100%
branch  6 taken 75% (fallthrough)
branch  7 taken 25%
branch  8 taken 93% (fallthrough)
branch  9 taken 7%
branch 10 taken 23% (fallthrough)
branch 11 taken 77%
       29: 3414:            (Token::Match(vartok->astParent(), "[|*") || vartok->astParent()->originalName() == "->")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 43% (fallthrough)
branch  6 taken 57%
        7: 3415:            for (const ValueFlow::Value &v : vartok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
call    6 returned 100%
call    7 never executed
call    8 returned 100%
branch  9 taken 57%
branch 10 taken 43%
call   11 returned 100%
branch 12 taken 57%
branch 13 taken 43%
call   14 never executed
call   15 never executed
call   16 never executed
        3: 3416:                if (!v.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3417:                    continue;
        3: 3418:                errorPath.insert(errorPath.end(), v.errorPath.begin(), v.errorPath.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        3: 3419:                return getLifetimeTokens(v.tokvalue, std::move(errorPath));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
        -: 3420:            }
        -: 3421:        } else {
       46: 3422:            return LifetimeToken::setAddressOf(getLifetimeTokens(vartok, std::move(errorPath)),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
       46: 3423:                                               !(astIsContainer(vartok) && Token::simpleMatch(vartok->astParent(), "[")));
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
        -: 3424:        }
        -: 3425:    }
     3008: 3426:    return {{tok, std::move(errorPath)}};
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
        -: 3427:}
        -: 3428:
function _ZL16getLifetimeTokenPK5TokenRNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEEPb called 2999 returned 100% blocks executed 57%
     2999: 3429:static const Token* getLifetimeToken(const Token* tok, ValueFlow::Value::ErrorPath& errorPath, bool* addressOf = nullptr)
        -: 3430:{
     5998: 3431:    std::vector<LifetimeToken> lts = getLifetimeTokens(tok);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
     2999: 3432:    if (lts.size() != 1)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        9: 3433:        return nullptr;
     2990: 3434:    if (lts.front().inconclusive)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3435:        return nullptr;
     2990: 3436:    if (addressOf)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3437:        *addressOf = lts.front().addressOf;
call    0 never executed
     2990: 3438:    errorPath.insert(errorPath.end(), lts.front().errorPath.begin(), lts.front().errorPath.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
     2990: 3439:    return lts.front().token;
call    0 returned 100%
        -: 3440:}
        -: 3441:
function _Z19getLifetimeVariablePK5TokenRNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEEPb called 2999 returned 100% blocks executed 100%
     2999: 3442:const Variable* getLifetimeVariable(const Token* tok, ValueFlow::Value::ErrorPath& errorPath, bool* addressOf)
        -: 3443:{
     2999: 3444:    const Token* tok2 = getLifetimeToken(tok, errorPath, addressOf);
call    0 returned 100%
     2999: 3445:    if (tok2 && tok2->variable())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
     2961: 3446:        return tok2->variable();
call    0 returned 100%
       38: 3447:    return nullptr;
        -: 3448:}
        -: 3449:
function _ZL18isNotLifetimeValueRKN9ValueFlow5ValueE called 133 returned 100% blocks executed 100%
      133: 3450:static bool isNotLifetimeValue(const ValueFlow::Value& val)
        -: 3451:{
      133: 3452:    return !val.isLifetimeValue();
call    0 returned 100%
        -: 3453:}
        -: 3454:
function _ZL15isLifetimeOwnedPK9ValueTypeS1_ called 119 returned 100% blocks executed 82%
      119: 3455:static bool isLifetimeOwned(const ValueType *vt, const ValueType *vtParent)
        -: 3456:{
      119: 3457:    if (!vtParent)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        9: 3458:        return false;
      110: 3459:    if (!vt) {
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
       23: 3460:        if (vtParent->type == ValueType::CONTAINER)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3461:            return true;
       23: 3462:        return false;
        -: 3463:    }
       87: 3464:    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       87: 3465:        if (vt->pointer != vtParent->pointer)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        2: 3466:            return true;
       85: 3467:        if (vt->type != vtParent->type) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        2: 3468:            if (vtParent->type == ValueType::RECORD)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3469:                return true;
        2: 3470:            if (vtParent->type == ValueType::CONTAINER)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3471:                return true;
        -: 3472:        }
        -: 3473:    }
        -: 3474:
       85: 3475:    return false;
        -: 3476:}
        -: 3477:
function _ZL18isLifetimeBorrowedPK9ValueTypeS1_ called 124 returned 100% blocks executed 100%
      124: 3478:static bool isLifetimeBorrowed(const ValueType *vt, const ValueType *vtParent)
        -: 3479:{
      124: 3480:    if (!vtParent)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        9: 3481:        return false;
      115: 3482:    if (!vt)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       23: 3483:        return false;
       92: 3484:    if (vt->type != ValueType::UNKNOWN_TYPE && vtParent->type != ValueType::UNKNOWN_TYPE) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       92: 3485:        if (vtParent->pointer > vt->pointer)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        4: 3486:            return true;
       88: 3487:        if (vtParent->pointer < vt->pointer && vtParent->isIntegral())
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        1: 3488:            return true;
        -: 3489:    }
        -: 3490:
       87: 3491:    return false;
        -: 3492:}
        -: 3493:
function _Z18isLifetimeBorrowedPK5TokenPK8Settings called 210 returned 100% blocks executed 92%
      210: 3494:bool isLifetimeBorrowed(const Token *tok, const Settings *settings)
        -: 3495:{
      210: 3496:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3497:        return true;
      210: 3498:    if (Token::simpleMatch(tok, ","))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        9: 3499:        return true;
      201: 3500:    if (!tok->astParent())
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
       61: 3501:        return true;
      140: 3502:    if (!Token::Match(tok->astParent()->previous(), "%name% (") && !Token::simpleMatch(tok->astParent(), ",")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 96% (fallthrough)
branch  4 taken 4%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 95% (fallthrough)
branch  8 taken 5%
branch  9 taken 91% (fallthrough)
branch 10 taken 9%
      128: 3503:        if (!Token::simpleMatch(tok, "{")) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
      123: 3504:            const ValueType *vt = tok->valueType();
call    0 returned 100%
      123: 3505:            const ValueType *vtParent = tok->astParent()->valueType();
call    0 returned 100%
call    1 returned 100%
      123: 3506:            if (isLifetimeBorrowed(vt, vtParent))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        5: 3507:                return true;
      118: 3508:            if (isLifetimeOwned(vt, vtParent))
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        2: 3509:                return false;
        -: 3510:        }
      121: 3511:        const Type *t = Token::typeOf(tok);
call    0 returned 100%
      121: 3512:        const Type *parentT = Token::typeOf(tok->astParent());
call    0 returned 100%
call    1 returned 100%
      121: 3513:        if (t && parentT && t->classDef && parentT->classDef && t->classDef != parentT->classDef) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3514:            return false;
        -: 3515:        }
       13: 3516:    } else if (Token::Match(tok->astParent()->tokAt(-3), "%var% . push_back|push_front|insert|push (") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 8% (fallthrough)
branch  8 taken 92%
        1: 3517:               astIsContainer(tok->astParent()->tokAt(-3))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1: 3518:        const ValueType *vt = tok->valueType();
call    0 returned 100%
        1: 3519:        const ValueType *vtCont = tok->astParent()->tokAt(-3)->valueType();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        1: 3520:        if (!vtCont->containerTypeToken)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3521:            return true;
        2: 3522:        ValueType vtParent = ValueType::parseDecl(vtCont->containerTypeToken, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 3523:        if (isLifetimeBorrowed(vt, &vtParent))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3524:            return true;
        1: 3525:        if (isLifetimeOwned(vt, &vtParent))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3526:            return false;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 3527:    }
        -: 3528:
      133: 3529:    return true;
        -: 3530:}
        -: 3531:
        -: 3532:static void valueFlowLifetimeFunction(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings);
        -: 3533:
        -: 3534:static void valueFlowLifetimeConstructor(Token *tok,
        -: 3535:        TokenList *tokenlist,
        -: 3536:        ErrorLogger *errorLogger,
        -: 3537:        const Settings *settings);
        -: 3538:
function _ZL24valueFlowForwardLifetimeP5TokenP9TokenListP11ErrorLoggerPK8Settings called 212 returned 100% blocks executed 73%
      212: 3539:static void valueFlowForwardLifetime(Token * tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 3540:{
      212: 3541:    Token *parent = tok->astParent();
call    0 returned 100%
      244: 3542:    while (parent && (parent->isArithmeticalOp() || parent->str() == ","))
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
branch  9 taken 7% (fallthrough)
branch 10 taken 93%
       16: 3543:        parent = parent->astParent();
call    0 returned 100%
      212: 3544:    if (!parent)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       30: 3545:        return;
        -: 3546:    // Assignment
      182: 3547:    if (parent->str() == "=" && (!parent->astParent() || Token::simpleMatch(parent->astParent(), ";"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 47% (fallthrough)
branch  3 taken 53%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 47% (fallthrough)
branch 12 taken 53%
       86: 3548:        const Variable *var = getLHSVariable(parent);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       86: 3549:        if (!var)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       19: 3550:            return;
        -: 3551:
       82: 3552:        const Token * endOfVarScope = nullptr;
       82: 3553:        if (!var->isLocal())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
        8: 3554:            endOfVarScope = tok->scope()->bodyEnd;
call    0 returned 100%
        -: 3555:        else
       74: 3556:            endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
        -: 3557:
        -: 3558:        // Rhs values..
       82: 3559:        if (!parent->astOperand2() || parent->astOperand2()->values().empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
branch  8 taken 13% (fallthrough)
branch  9 taken 87%
       11: 3560:            return;
        -: 3561:
       71: 3562:        if (!isLifetimeBorrowed(parent->astOperand2(), settings))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 3563:            return;
        -: 3564:
      142: 3565:        std::list<ValueFlow::Value> values = parent->astOperand2()->values();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
        -: 3566:
        -: 3567:        // Static variable initialisation?
       71: 3568:        if (var->isStatic() && var->nameToken() == parent->astOperand1())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3569:            lowerToPossible(values);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3570:
        -: 3571:        // Skip RHS
       71: 3572:        const Token *nextExpression = nextAfterAstRightmostLeaf(parent);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3573:
        -: 3574:        // Only forward lifetime values
       71: 3575:        values.remove_if(&isNotLifetimeValue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       71: 3576:        valueFlowForwardVariable(const_cast<Token*>(nextExpression),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 3577:                                 endOfVarScope,
        -: 3578:                                 var,
        -: 3579:                                 var->declarationId(),
        -: 3580:                                 values,
        -: 3581:                                 false,
        -: 3582:                                 false,
        -: 3583:                                 tokenlist,
        -: 3584:                                 errorLogger,
        -: 3585:                                 settings);
        -: 3586:
       71: 3587:        if (tok->astTop() && Token::simpleMatch(tok->astTop()->previous(), "for (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 3588:            Token::simpleMatch(tok->astTop()->link(), ") {")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3589:            Token *start = tok->astTop()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3590:            valueFlowForwardVariable(
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 3591:                start, start->link(), var, var->declarationId(), values, false, false, tokenlist, errorLogger, settings);
call    0 never executed
        -: 3592:        }
        -: 3593:        // Constructor
       96: 3594:    } else if (Token::simpleMatch(parent, "{") && !isScopeBracket(parent)) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
        6: 3595:        valueFlowLifetimeConstructor(parent, tokenlist, errorLogger, settings);
call    0 returned 100%
        6: 3596:        valueFlowForwardLifetime(parent, tokenlist, errorLogger, settings);
call    0 returned 100%
        -: 3597:        // Function call
       90: 3598:    } else if (Token::Match(parent->previous(), "%name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
       51: 3599:        valueFlowLifetimeFunction(parent->previous(), tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
       51: 3600:        valueFlowForwardLifetime(parent, tokenlist, errorLogger, settings);
call    0 returned 100%
        -: 3601:        // Variable
       39: 3602:    } else if (tok->variable()) {
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
        5: 3603:        const Variable *var = tok->variable();
call    0 returned 100%
        5: 3604:        if (!var->typeStartToken() || !var->typeStartToken()->scope())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3605:            return;
        5: 3606:        const Token *endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
        -: 3607:
       10: 3608:        std::list<ValueFlow::Value> values = tok->values();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        5: 3609:        const Token *nextExpression = nextAfterAstRightmostLeaf(parent);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3610:        // Only forward lifetime values
        5: 3611:        values.remove_if(&isNotLifetimeValue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 3612:        valueFlowForwardVariable(const_cast<Token*>(nextExpression),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 3613:                                 endOfVarScope,
        -: 3614:                                 var,
        -: 3615:                                 var->declarationId(),
        -: 3616:                                 values,
        -: 3617:                                 false,
        -: 3618:                                 false,
        -: 3619:                                 tokenlist,
        -: 3620:                                 errorLogger,
        -: 3621:                                 settings);
        -: 3622:    }
        -: 3623:}
        -: 3624:
function _ZN13LifetimeStoreaSEOS_ called 0 returned 0% blocks executed 0%
function _ZN13LifetimeStoreD2Ev called 103 returned 100% blocks executed 100%
      103: 3625:struct LifetimeStore {
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 returned 100%
        -: 3626:    const Token *argtok;
        -: 3627:    std::string message;
        -: 3628:    ValueFlow::Value::LifetimeKind type;
        -: 3629:    ErrorPath errorPath;
        -: 3630:    bool inconclusive;
        -: 3631:
function _ZN13LifetimeStoreC2Ev called 5 returned 100% blocks executed 100%
        5: 3632:    LifetimeStore()
        5: 3633:        : argtok(nullptr), message(), type(), errorPath(), inconclusive(false)
call    0 returned 100%
call    1 returned 100%
        5: 3634:    {}
        -: 3635:
function _ZN13LifetimeStoreC2EPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN9ValueFlow5Value12LifetimeKindEb called 98 returned 100% blocks executed 100%
       98: 3636:    LifetimeStore(const Token *argtok,
        -: 3637:                  const std::string &message,
        -: 3638:                  ValueFlow::Value::LifetimeKind type = ValueFlow::Value::LifetimeKind::Object,
        -: 3639:                  bool inconclusive = false)
       98: 3640:        : argtok(argtok), message(message), type(type), errorPath(), inconclusive(inconclusive)
call    0 returned 100%
call    1 returned 100%
       98: 3641:    {}
        -: 3642:
function _ZN13LifetimeStore15fromFunctionArgEPK8FunctionP5TokenPK8VariableP9TokenListP11ErrorLogger called 1 returned 100% blocks executed 21%
        1: 3643:    static LifetimeStore fromFunctionArg(const Function * f, Token *tok, const Variable *var, TokenList *tokenlist, ErrorLogger *errorLogger) {
        1: 3644:        if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3645:            return LifetimeStore{};
call    0 never executed
        1: 3646:        if (!var->isArgument())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3647:            return LifetimeStore{};
call    0 never executed
        1: 3648:        int n = getArgumentPos(var, f);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 3649:        if (n < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3650:            return LifetimeStore{};
call    0 never executed
        2: 3651:        std::vector<const Token *> args = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1: 3652:        if (n >= args.size()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3653:            if (tokenlist->getSettings()->debugwarnings)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3654:                bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
        -: 3655:                        errorLogger,
        -: 3656:                        tok,
        -: 3657:                        "Argument mismatch: Function '" + tok->str() + "' returning lifetime from argument index " +
        -: 3658:                        std::to_string(n) + " but only " + std::to_string(args.size()) +
        -: 3659:                        " arguments are available.");
    #####: 3660:            return LifetimeStore{};
call    0 never executed
        -: 3661:        }
        1: 3662:        const Token *argtok2 = args[n];
call    0 returned 100%
        1: 3663:        return LifetimeStore{argtok2, "Passed to '" + tok->str() + "'.", ValueFlow::Value::LifetimeKind::Object};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        -: 3664:    }
        -: 3665:
        -: 3666:    template <class Predicate>
function _ZNK13LifetimeStore5byRefIZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsEUlPK5TokenE_EEvPSA_S2_S6_S9_T_ called 25 returned 100% blocks executed 64%
function _ZNK13LifetimeStore5byRefIZNKS_5byRefEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
       25: 3667:    void byRef(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings, Predicate pred) const {
       25: 3668:        if (!settings->inconclusive && inconclusive)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3669:            return;
       25: 3670:        if (!argtok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 3671:            return;
       27: 3672:        for (const LifetimeToken& lt : getLifetimeTokens(argtok)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 93% (fallthrough)
branch  9 taken 7%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 8%
branch 14 taken 92%
call   15 returned 100%
branch 16 taken 8%
branch 17 taken 92%
call   18 returned 100%
branch 19 taken 8%
branch 20 taken 92%
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
       25: 3673:            if (!settings->inconclusive && lt.inconclusive)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3674:                continue;
       27: 3675:            ErrorPath er = errorPath;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
       25: 3676:            er.insert(er.end(), lt.errorPath.begin(), lt.errorPath.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
       25: 3677:            if (!lt.token)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 3678:                return;
       25: 3679:            if (!pred(lt.token))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 92% (fallthrough)
branch  4 taken 8%
call    5 never executed
branch  6 never executed
branch  7 never executed
       23: 3680:                return;
        2: 3681:            er.emplace_back(argtok, message);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3682:
        4: 3683:            ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8%
branch  3 taken 92%
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        2: 3684:            value.valueType = ValueFlow::Value::LIFETIME;
        2: 3685:            value.lifetimeScope = ValueFlow::Value::LifetimeScope::Local;
        2: 3686:            value.tokvalue = lt.token;
        2: 3687:            value.errorPath = std::move(er);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        2: 3688:            value.lifetimeKind = type;
        2: 3689:            value.setInconclusive(lt.inconclusive || inconclusive);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -: 3690:            // Don't add the value a second time
        2: 3691:            if (std::find(tok->values().begin(), tok->values().end(), value) != tok->values().end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
    #####: 3692:                return;
        2: 3693:            setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        2: 3694:            valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 3695:        }
        -: 3696:    }
        -: 3697:
function _ZNK13LifetimeStore5byRefEP5TokenP9TokenListP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3698:    void byRef(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings) const {
function _ZZNK13LifetimeStore5byRefEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENUlPKS0_E_4_FUNESA_ called 0 returned 0% blocks executed 0%
function _ZZNK13LifetimeStore5byRefEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENKUlPKS0_E_clESA_ called 0 returned 0% blocks executed 0%
    #####: 3699:        byRef(tok, tokenlist, errorLogger, settings, [](const Token *) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3700:            return true;
    #####: 3701:        });
call    0 never executed
    #####: 3702:    }
        -: 3703:
        -: 3704:    template <class Predicate>
function _ZNK13LifetimeStore5byValIZNKS_11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
function _ZNK13LifetimeStore5byValIZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsEUlPK5TokenE_EEvPSA_S2_S6_S9_T_ called 0 returned 0% blocks executed 0%
function _ZNK13LifetimeStore5byValIZNKS_5byValEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 73 returned 100% blocks executed 64%
       73: 3705:    void byVal(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings, Predicate pred) const {
       73: 3706:        if (!settings->inconclusive && inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 3707:            return;
       73: 3708:        if (!argtok)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 3709:            return;
       73: 3710:        if (argtok->values().empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
call    9 returned 100%
branch 10 taken 81% (fallthrough)
branch 11 taken 19%
      118: 3711:            ErrorPath er;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 never executed
       59: 3712:            er.emplace_back(argtok, message);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
       59: 3713:            const Variable *var = getLifetimeVariable(argtok, er);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
       59: 3714:            if (var && var->isArgument()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 81% (fallthrough)
branch 15 taken 19%
call   16 returned 100%
branch 17 taken 35% (fallthrough)
branch 18 taken 65%
branch 19 taken 29% (fallthrough)
branch 20 taken 71%
       34: 3715:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100%
branch 13 taken 0%
call   14 never executed
       17: 3716:                value.valueType = ValueFlow::Value::LIFETIME;
       17: 3717:                value.lifetimeScope = ValueFlow::Value::LifetimeScope::Argument;
       17: 3718:                value.tokvalue = var->nameToken();
call    0 never executed
call    1 never executed
call    2 returned 100%
       17: 3719:                value.errorPath = er;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
       17: 3720:                value.lifetimeKind = type;
       17: 3721:                value.setInconclusive(inconclusive);
call    0 never executed
call    1 never executed
call    2 returned 100%
        -: 3722:                // Don't add the value a second time
       17: 3723:                if (std::find(tok->values().begin(), tok->values().end(), value) != tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
branch 45 taken 100% (fallthrough)
branch 46 taken 0% (throw)
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
call   50 returned 100%
call   51 returned 100%
branch 52 taken 0% (fallthrough)
branch 53 taken 100%
call   54 never executed
call   55 never executed
call   56 never executed
    #####: 3724:                    return;
       17: 3725:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
       17: 3726:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100%
branch 17 taken 0%
        -: 3727:            }
        -: 3728:        }
       87: 3729:        for (const ValueFlow::Value &v : argtok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
branch 36 taken 16% (fallthrough)
branch 37 taken 84%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
branch 41 taken 100%
branch 42 taken 0%
call   43 returned 100%
branch 44 taken 100%
branch 45 taken 0%
call   46 never executed
call   47 never executed
       14: 3730:            if (!v.isLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 64% (fallthrough)
branch  8 taken 36%
        9: 3731:                continue;
        5: 3732:            const Token *tok3 = v.tokvalue;
       10: 3733:            for (const LifetimeToken& lt : getLifetimeTokens(tok3)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 returned 100%
call   51 returned 100%
branch 52 taken 100% (fallthrough)
branch 53 taken 0% (throw)
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
branch 58 taken 50% (fallthrough)
branch 59 taken 50%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
branch 63 taken 100%
branch 64 taken 0%
call   65 returned 100%
branch 66 taken 100%
branch 67 taken 0%
call   68 returned 100%
branch 69 taken 100%
branch 70 taken 0%
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
        5: 3734:                if (!settings->inconclusive && lt.inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 3735:                    continue;
       10: 3736:                ErrorPath er = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 never executed
        5: 3737:                er.insert(er.end(), lt.errorPath.begin(), lt.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
        5: 3738:                if (!lt.token)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 3739:                    return;
        5: 3740:                if (!pred(lt.token))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3741:                    return;
        5: 3742:                er.emplace_back(argtok, message);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        5: 3743:                er.insert(er.end(), errorPath.begin(), errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 returned 100%
call   33 returned 100%
call   34 returned 100%
call   35 returned 100%
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 never executed
call   45 never executed
call   46 never executed
call   47 never executed
        -: 3744:
       10: 3745:                ValueFlow::Value value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100%
branch 15 taken 0%
branch 16 taken 0%
call   17 never executed
        5: 3746:                value.valueType = ValueFlow::Value::LIFETIME;
        5: 3747:                value.lifetimeScope = v.lifetimeScope;
        5: 3748:                value.tokvalue = lt.token;
        5: 3749:                value.errorPath = std::move(er);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 returned 100%
        5: 3750:                value.lifetimeKind = type;
        5: 3751:                value.setInconclusive(lt.inconclusive || v.isInconclusive() || inconclusive);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
call   23 returned 100%
        -: 3752:                // Don't add the value a second time
        5: 3753:                if (std::find(tok->values().begin(), tok->values().end(), value) != tok->values().end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
branch 45 taken 100% (fallthrough)
branch 46 taken 0% (throw)
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
call   50 returned 100%
call   51 returned 100%
branch 52 taken 0% (fallthrough)
branch 53 taken 100%
call   54 never executed
call   55 never executed
call   56 never executed
    #####: 3754:                    continue;
        5: 3755:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
        5: 3756:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100%
branch 17 taken 0%
        -: 3757:            }
        -: 3758:        }
        -: 3759:    }
        -: 3760:
function _ZNK13LifetimeStore5byValEP5TokenP9TokenListP11ErrorLoggerPK8Settings called 73 returned 100% blocks executed 100%
       73: 3761:    void byVal(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings) const {
function _ZZNK13LifetimeStore5byValEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENUlPKS0_E_4_FUNESA_ called 0 returned 0% blocks executed 0%
function _ZZNK13LifetimeStore5byValEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENKUlPKS0_E_clESA_ called 5 returned 100% blocks executed 100%
       78: 3762:        byVal(tok, tokenlist, errorLogger, settings, [](const Token *) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3763:            return true;
        5: 3764:        });
call    0 never executed
       73: 3765:    }
        -: 3766:
        -: 3767:    template <class Predicate>
function _ZNK13LifetimeStore11byDerefCopyIZNKS_11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsEUlPKS1_E_EEvS2_S4_S6_S9_T_ called 0 returned 0% blocks executed 0%
    #####: 3768:    void byDerefCopy(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings, Predicate pred) const {
    #####: 3769:        if (!settings->inconclusive && inconclusive)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3770:            return;
    #####: 3771:        if (!argtok)
branch  0 never executed
branch  1 never executed
    #####: 3772:            return;
    #####: 3773:        for (const ValueFlow::Value &v : argtok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3774:            if (!v.isLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3775:                continue;
    #####: 3776:            const Token *tok2 = v.tokvalue;
    #####: 3777:            ErrorPath er = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3778:            const Variable *var = getLifetimeVariable(tok2, er);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3779:            er.insert(er.end(), errorPath.begin(), errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 3780:            if (!var)
branch  0 never executed
branch  1 never executed
    #####: 3781:                continue;
    #####: 3782:            for (const Token *tok3 = tok; tok3 && tok3 != var->declEndToken(); tok3 = tok3->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3783:                if (tok3->varId() == var->declarationId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3784:                    LifetimeStore{tok3, message, type, inconclusive} .byVal(tok, tokenlist, errorLogger, settings, pred);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 3785:                    break;
        -: 3786:                }
        -: 3787:            }
        -: 3788:        }
        -: 3789:    }
        -: 3790:
function _ZNK13LifetimeStore11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####: 3791:    void byDerefCopy(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings) const {
function _ZZNK13LifetimeStore11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENUlPKS0_E_4_FUNESA_ called 0 returned 0% blocks executed 0%
function _ZZNK13LifetimeStore11byDerefCopyEP5TokenP9TokenListP11ErrorLoggerPK8SettingsENKUlPKS0_E_clESA_ called 0 returned 0% blocks executed 0%
    #####: 3792:        byDerefCopy(tok, tokenlist, errorLogger, settings, [](const Token *) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3793:            return true;
    #####: 3794:        });
call    0 never executed
    #####: 3795:    }
        -: 3796:};
        -: 3797:
function _ZL25valueFlowLifetimeFunctionP5TokenP9TokenListP11ErrorLoggerPK8Settings called 1402 returned 100% blocks executed 39%
     1402: 3798:static void valueFlowLifetimeFunction(Token *tok, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 3799:{
     1402: 3800:    if (!Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3801:        return;
     1402: 3802:    if (Token::Match(tok->tokAt(-2), "std :: ref|cref|tie|front_inserter|back_inserter")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3803:        for (const Token *argtok : getArguments(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 3804:            LifetimeStore{argtok, "Passed to '" + tok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byRef(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3805:                tok->next(), tokenlist, errorLogger, settings);
        -: 3806:        }
     1402: 3807:    } else if (Token::Match(tok->tokAt(-2), "std :: make_tuple|tuple_cat|make_pair|make_reverse_iterator|next|prev|move")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       89: 3808:        for (const Token *argtok : getArguments(tok)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 49% (fallthrough)
branch  7 taken 51%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
       44: 3809:            LifetimeStore{argtok, "Passed to '" + tok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byVal(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3810:                tok->next(), tokenlist, errorLogger, settings);
        -: 3811:        }
     1359: 3812:    } else if (Token::Match(tok->tokAt(-2), "%var% . push_back|push_front|insert|push|assign") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        2: 3813:               astIsContainer(tok->tokAt(-2))) {
call    0 returned 100%
call    1 returned 100%
        1: 3814:        Token *vartok = tok->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 3815:        std::vector<const Token *> args = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        1: 3816:        std::size_t n = args.size();
call    0 returned 100%
        1: 3817:        if (n > 1 && Token::typeStr(args[n - 2]) == Token::typeStr(args[n - 1]) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 3818:            (((astIsIterator(args[n - 2]) && astIsIterator(args[n - 1])) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3819:              (astIsPointer(args[n - 2]) && astIsPointer(args[n - 1]))))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3820:            LifetimeStore{args.back(), "Added to container '" + vartok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byDerefCopy(
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3821:                vartok, tokenlist, errorLogger, settings);
        1: 3822:        } else if (!args.empty() && isLifetimeBorrowed(args.back(), settings)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        1: 3823:            LifetimeStore{args.back(), "Added to container '" + vartok->str() + "'.", ValueFlow::Value::LifetimeKind::Object} .byVal(
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 never executed
call   18 never executed
call   19 never executed
        -: 3824:                vartok, tokenlist, errorLogger, settings);
        -: 3825:        }
     1356: 3826:    } else if (tok->function()) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
      270: 3827:        const Function *f = tok->function();
call    0 returned 100%
      270: 3828:        if (Function::returnsReference(f))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
       14: 3829:            return;
      512: 3830:        std::vector<const Token*> returns = findReturns(f);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      256: 3831:        const bool inconclusive = returns.size() > 1;
call    0 returned 100%
      273: 3832:        for (const Token* returnTok : returns) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       17: 3833:            if (returnTok == tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3834:                continue;
       17: 3835:            const Variable *returnVar = returnTok->variable();
call    0 returned 100%
       17: 3836:            if (returnVar && returnVar->isArgument() && (returnVar->isConst() || !isVariableChanged(returnVar, settings, tokenlist->isCPP()))) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 6% (fallthrough)
branch 15 taken 94%
        2: 3837:                LifetimeStore ls = LifetimeStore::fromFunctionArg(f, tok, returnVar, tokenlist, errorLogger);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1: 3838:                ls.inconclusive = inconclusive;
        1: 3839:                ls.byVal(tok->next(), tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3840:            }
       20: 3841:            for (const ValueFlow::Value &v : returnTok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
        3: 3842:                if (!v.isLifetimeValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 3843:                    continue;
    #####: 3844:                if (!v.tokvalue)
branch  0 never executed
branch  1 never executed
    #####: 3845:                    continue;
    #####: 3846:                const Variable *var = v.tokvalue->variable();
call    0 never executed
    #####: 3847:                LifetimeStore ls = LifetimeStore::fromFunctionArg(f, tok, var, tokenlist, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3848:                if (!ls.argtok)
branch  0 never executed
branch  1 never executed
    #####: 3849:                    continue;
    #####: 3850:                ls.inconclusive = inconclusive;
    #####: 3851:                ls.errorPath = v.errorPath;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3852:                ls.errorPath.emplace_front(returnTok, "Return " + lifetimeType(returnTok, &v) + ".");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####: 3853:                if (var->isReference() || var->isRValueReference()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3854:                    ls.byRef(tok->next(), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3855:                } else if (v.isArgumentLifetimeValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3856:                    ls.byVal(tok->next(), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3857:                }
        -: 3858:            }
        -: 3859:        }
        -: 3860:    }
        -: 3861:}
        -: 3862:
function _ZL28valueFlowLifetimeConstructorP5TokenPK4TypeP9TokenListP11ErrorLoggerPK8Settings called 44 returned 100% blocks executed 67%
       44: 3863:static void valueFlowLifetimeConstructor(Token* tok,
        -: 3864:        const Type* t,
        -: 3865:        TokenList* tokenlist,
        -: 3866:        ErrorLogger* errorLogger,
        -: 3867:        const Settings* settings)
        -: 3868:{
       44: 3869:    if (!t)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3870:        return;
       44: 3871:    if (!Token::Match(tok, "(|{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3872:        return;
       44: 3873:    const Scope* scope = t->classScope;
       44: 3874:    if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3875:        return;
        -: 3876:    // Only support aggregate constructors for now
       44: 3877:    if (scope->numConstructors == 0 && t->derivedFrom.empty() && (t->isClassType() || t->isStructType())) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 88% (fallthrough)
branch  7 taken 13%
call    8 returned 100%
branch  9 taken 69% (fallthrough)
branch 10 taken 31%
branch 11 taken 66% (fallthrough)
branch 12 taken 34%
       58: 3878:        std::vector<const Token*> args = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
       29: 3879:        std::size_t i = 0;
       41: 3880:        for (const Variable& var : scope->varlist) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 32% (fallthrough)
branch  4 taken 68%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       13: 3881:            if (i >= args.size())
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
        1: 3882:                break;
       12: 3883:            const Token* argtok = args[i];
call    0 returned 100%
        -: 3884:            LifetimeStore ls{
       24: 3885:                argtok, "Passed to constructor of '" + t->name() + "'.", ValueFlow::Value::LifetimeKind::Object};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
       12: 3886:            if (var.isReference() || var.isRValueReference()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3887:                ls.byRef(tok, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3888:            } else {
       12: 3889:                ls.byVal(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3890:            }
       12: 3891:            i++;
        -: 3892:        }
        -: 3893:    }
        -: 3894:}
function _ZL28valueFlowLifetimeConstructorP5TokenP9TokenListP11ErrorLoggerPK8Settings called 120 returned 100% blocks executed 70%
      120: 3895:static void valueFlowLifetimeConstructor(Token* tok, TokenList* tokenlist, ErrorLogger* errorLogger, const Settings* settings)
        -: 3896:{
      120: 3897:    if (!Token::Match(tok, "(|{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3898:        return;
      120: 3899:    Token* parent = tok->astParent();
call    0 returned 100%
      126: 3900:    while (Token::simpleMatch(parent, ","))
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        3: 3901:        parent = parent->astParent();
call    0 returned 100%
      120: 3902:    if (Token::simpleMatch(parent, "{") && (astIsContainer(parent->astParent()) || astIsPointer(parent->astParent()))) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 3903:        valueFlowLifetimeConstructor(tok, Token::typeOf(parent->previous()), tokenlist, errorLogger, settings);
call    0 never executed
call    1 never executed
call    2 never executed
      120: 3904:    } else if (Token::simpleMatch(tok, "{") && (astIsContainer(parent) || astIsPointer(parent))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
branch  9 taken 7% (fallthrough)
branch 10 taken 93%
       16: 3905:        std::vector<const Token *> args = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       23: 3906:        for (const Token *argtok : args) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 65% (fallthrough)
branch  4 taken 35%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       30: 3907:            LifetimeStore ls{argtok, "Passed to initializer list.", ValueFlow::Value::LifetimeKind::Object};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
       15: 3908:            ls.byVal(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3909:        }
      112: 3910:    } else if (const Type* t = Token::typeOf(tok->previous())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
       44: 3911:        valueFlowLifetimeConstructor(tok, t, tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 never executed
        -: 3912:    }
        -: 3913:}
        -: 3914:
        -: 3915:struct Lambda {
function _ZN6LambdaC2EPK5Token called 21030 returned 100% blocks executed 100%
    21030: 3916:    explicit Lambda(const Token * tok)
    21030: 3917:        : capture(nullptr), arguments(nullptr), returnTok(nullptr), bodyTok(nullptr) {
    21030: 3918:        if (!Token::simpleMatch(tok, "[") || !tok->link())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    20906: 3919:            return;
      124: 3920:        capture = tok;
        -: 3921:
      124: 3922:        if (Token::simpleMatch(capture->link(), "] (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        9: 3923:            arguments = capture->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 3924:        }
      124: 3925:        const Token * afterArguments = arguments ? arguments->link()->next() : capture->link()->next();
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
      124: 3926:        if (afterArguments && afterArguments->originalName() == "->") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        1: 3927:            returnTok = afterArguments->next();
call    0 returned 100%
        1: 3928:            bodyTok = Token::findsimplematch(returnTok, "{");
call    0 returned 100%
      123: 3929:        } else if (Token::simpleMatch(afterArguments, "{")) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        5: 3930:            bodyTok = afterArguments;
        -: 3931:        }
        -: 3932:    }
        -: 3933:
        -: 3934:    const Token * capture;
        -: 3935:    const Token * arguments;
        -: 3936:    const Token * returnTok;
        -: 3937:    const Token * bodyTok;
        -: 3938:
function _ZNK6Lambda8isLambdaEv called 21030 returned 100% blocks executed 100%
    21030: 3939:    bool isLambda() const {
    21030: 3940:        return capture && bodyTok;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -: 3941:    }
        -: 3942:};
        -: 3943:
function _ZL16isDecayedPointerPK5TokenPK8Settings called 52 returned 100% blocks executed 83%
       52: 3944:static bool isDecayedPointer(const Token *tok, const Settings *settings)
        -: 3945:{
       52: 3946:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3947:        return false;
       52: 3948:    if (astIsPointer(tok->astParent()) && !Token::simpleMatch(tok->astParent(), "return"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 12% (fallthrough)
branch  9 taken 88%
        6: 3949:        return true;
       46: 3950:    if (Token::Match(tok->astParent(), "%cop%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        2: 3951:        return true;
       44: 3952:    if (!Token::simpleMatch(tok->astParent(), "return"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       44: 3953:        return false;
    #####: 3954:    return astIsPointer(tok->astParent());
call    0 never executed
call    1 never executed
        -: 3955:}
        -: 3956:
function _ZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 956 returned 100% blocks executed 54%
      956: 3957:static void valueFlowLifetime(TokenList *tokenlist, SymbolDatabase*, ErrorLogger *errorLogger, const Settings *settings)
        -: 3958:{
    29888: 3959:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 3960:        if (!tok->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     8829: 3961:            continue;
    28932: 3962:        if (tok->scope()->type == Scope::eGlobal)
call    0 returned 100%
branch  1 taken 27% (fallthrough)
branch  2 taken 73%
     7902: 3963:            continue;
    21030: 3964:        Lambda lam(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3965:        // Lamdas
    21030: 3966:        if (lam.isLambda()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 3967:            const Scope * bodyScope = lam.bodyTok->scope();
call    0 returned 100%
        -: 3968:
       12: 3969:            std::set<const Scope *> scopes;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 3970:
function _ZZL17valueFlowLifetimeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK5TokenE_clESA_ called 25 returned 100% blocks executed 94%
       25: 3971:            auto isCapturingVariable = [&](const Token *varTok) {
       25: 3972:                const Variable *var = varTok->variable();
call    0 returned 100%
       25: 3973:                if (!var)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
       21: 3974:                    return false;
        4: 3975:                const Scope *scope = var->scope();
call    0 returned 100%
        4: 3976:                if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3977:                    return false;
        6: 3978:                if (scopes.count(scope) > 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        1: 3979:                    return false;
        3: 3980:                if (scope->isNestedIn(bodyScope))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        1: 3981:                    return false;
        2: 3982:                scopes.insert(scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        2: 3983:                return true;
        6: 3984:            };
        -: 3985:
        -: 3986:            // TODO: Handle explicit capture
        6: 3987:            bool captureByRef = Token::Match(lam.capture, "[ & ]");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 3988:            bool captureByValue = Token::Match(lam.capture, "[ = ]");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3989:
       71: 3990:            for (const Token * tok2 = lam.bodyTok; tok2 != lam.bodyTok->link(); tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
call    3 returned 100%
      130: 3991:                ErrorPath errorPath;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       65: 3992:                if (captureByRef) {
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
       25: 3993:                    LifetimeStore{tok2, "Lambda captures variable by reference here.", ValueFlow::Value::LifetimeKind::Lambda} .byRef(
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3994:                        tok, tokenlist, errorLogger, settings, isCapturingVariable);
       40: 3995:                } else if (captureByValue) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3996:                    LifetimeStore{tok2, "Lambda captures variable by value here.", ValueFlow::Value::LifetimeKind::Lambda} .byVal(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3997:                        tok, tokenlist, errorLogger, settings, isCapturingVariable);
        -: 3998:                }
        -: 3999:            }
        -: 4000:        }
        -: 4001:        // address of
    21024: 4002:        else if (tok->isUnaryOp("&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 never executed
call   12 never executed
      162: 4003:            for (const LifetimeToken& lt : getLifetimeTokens(tok->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 49% (fallthrough)
branch 10 taken 51%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
       80: 4004:                if (!settings->inconclusive && lt.inconclusive)
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4005:                    continue;
      160: 4006:                ErrorPath errorPath = lt.errorPath;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       80: 4007:                errorPath.emplace_back(tok, "Address of variable taken here.");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4008:
      160: 4009:                ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       80: 4010:                value.valueType = ValueFlow::Value::ValueType::LIFETIME;
       80: 4011:                value.lifetimeScope = ValueFlow::Value::LifetimeScope::Local;
       80: 4012:                value.tokvalue = lt.token;
       80: 4013:                value.errorPath = std::move(errorPath);
call    0 returned 100%
call    1 returned 100%
       80: 4014:                if (astIsPointer(lt.token) || !Token::Match(lt.token->astParent(), ".|["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 97% (fallthrough)
branch 10 taken 3%
branch 11 taken 98% (fallthrough)
branch 12 taken 3%
       78: 4015:                    value.lifetimeKind = ValueFlow::Value::LifetimeKind::Address;
       80: 4016:                value.setInconclusive(lt.inconclusive);
call    0 returned 100%
       80: 4017:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4018:
       80: 4019:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4020:            }
        -: 4021:        }
        -: 4022:        // container lifetimes
    20942: 4023:        else if (astIsContainer(tok)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      129: 4024:            Token * parent = astParentSkipParens(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      129: 4025:            if (!Token::Match(parent, ". %name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 96% (fallthrough)
branch  4 taken 4%
      253: 4026:                continue;
        -: 4027:
        5: 4028:            LifetimeStore ls;
call    0 returned 100%
call    1 never executed
        -: 4029:
        5: 4030:            if (astIsIterator(parent->tokAt(2)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4031:                ls = LifetimeStore{tok, "Iterator to container is created here.", ValueFlow::Value::LifetimeKind::Iterator};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
       10: 4032:            else if (astIsPointer(parent->tokAt(2)) || Token::Match(parent->next(), "data|c_str"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 4033:                ls = LifetimeStore{tok, "Pointer to container is created here.", ValueFlow::Value::LifetimeKind::Object};
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 4034:            else
        5: 4035:                continue;
        -: 4036:
        -: 4037:            // Dereferencing
    #####: 4038:            if (tok->isUnaryOp("*") || parent->originalName() == "->")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 4039:                ls.byDerefCopy(parent->tokAt(2), tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4040:            else
    #####: 4041:                ls.byRef(parent->tokAt(2), tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 0%
branch  8 taken 100%
        -: 4042:
        -: 4043:        }
        -: 4044:        // Check constructors
    20813: 4045:        else if (Token::Match(tok, "=|return|%type%|%var% {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      114: 4046:            valueFlowLifetimeConstructor(tok->next(), tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4047:        }
        -: 4048:        // Check function calls
    20699: 4049:        else if (Token::Match(tok, "%name% (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
     1351: 4050:            valueFlowLifetimeFunction(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4051:        }
        -: 4052:        // Check variables
    19348: 4053:        else if (tok->variable()) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
     5082: 4054:            ErrorPath errorPath;
call    0 returned 100%
call    1 never executed
     2940: 4055:            const Variable * var = getLifetimeVariable(tok, errorPath);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2940: 4056:            if (!var)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       27: 4057:                continue;
     2913: 4058:            if (var->nameToken() == tok)
call    0 returned 100%
branch  1 taken 26% (fallthrough)
branch  2 taken 74%
      771: 4059:                continue;
     2142: 4060:            if (var->isArray() && !var->isStlType() && !var->isArgument() && isDecayedPointer(tok, settings)) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 98% (fallthrough)
branch  8 taken 2%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 15% (fallthrough)
branch 13 taken 85%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        8: 4061:                errorPath.emplace_back(tok, "Array decayed to pointer here.");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4062:
       16: 4063:                ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 73%
branch  4 taken 27%
call    5 never executed
        8: 4064:                value.valueType = ValueFlow::Value::ValueType::LIFETIME;
        8: 4065:                value.lifetimeScope = ValueFlow::Value::LifetimeScope::Local;
        8: 4066:                value.tokvalue = var->nameToken();
call    0 returned 100%
        8: 4067:                value.errorPath = errorPath;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8: 4068:                setTokenValue(tok, value, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4069:
        8: 4070:                valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4071:            }
        -: 4072:        }
        -: 4073:    }
      956: 4074:}
        -: 4075:
function _ZL23isStdMoveOrStdForwardedP5TokenPN9ValueFlow5Value8MoveKindEPS0_ called 24018 returned 100% blocks executed 100%
    24018: 4076:static bool isStdMoveOrStdForwarded(Token * tok, ValueFlow::Value::MoveKind * moveKind, Token ** varTok = nullptr)
        -: 4077:{
    24018: 4078:    if (tok->str() != "std")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    23881: 4079:        return false;
      137: 4080:    ValueFlow::Value::MoveKind kind = ValueFlow::Value::MoveKind::NonMovedVariable;
      137: 4081:    Token * variableToken = nullptr;
      137: 4082:    if (Token::Match(tok, "std :: move ( %var% )")) {
call    0 returned 100%
branch  1 taken 53% (fallthrough)
branch  2 taken 47%
       72: 4083:        variableToken = tok->tokAt(4);
call    0 returned 100%
       72: 4084:        kind = ValueFlow::Value::MoveKind::MovedVariable;
       65: 4085:    } else if (Token::simpleMatch(tok, "std :: forward <")) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        2: 4086:        const Token * const leftAngle = tok->tokAt(3);
call    0 returned 100%
        2: 4087:        Token * rightAngle = leftAngle->link();
call    0 returned 100%
        2: 4088:        if (Token::Match(rightAngle, "> ( %var% )")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 4089:            variableToken = rightAngle->tokAt(2);
call    0 returned 100%
        2: 4090:            kind = ValueFlow::Value::MoveKind::ForwardedVariable;
        -: 4091:        }
        -: 4092:    }
      137: 4093:    if (!variableToken)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
       63: 4094:        return false;
       74: 4095:    if (variableToken->strAt(2) == ".") // Only partially moved
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        2: 4096:        return false;
        -: 4097:
       72: 4098:    if (moveKind != nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       72: 4099:        *moveKind = kind;
       72: 4100:    if (varTok != nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       72: 4101:        *varTok = variableToken;
       72: 4102:    return true;
        -: 4103:}
        -: 4104:
function _ZL42isOpenParenthesisMemberFunctionCallOfVarIdPK5Tokeni called 127 returned 100% blocks executed 100%
      127: 4105:static bool isOpenParenthesisMemberFunctionCallOfVarId(const Token * openParenthesisToken, nonneg int varId)
        -: 4106:{
      127: 4107:    const Token * varTok = openParenthesisToken->tokAt(-3);
call    0 returned 100%
      131: 4108:    return Token::Match(varTok, "%varid% . %name% (", varId) &&
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      131: 4109:           varTok->next()->originalName() == emptyString;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 4110:}
        -: 4111:
function _ZL24findOpenParentesisOfMovePK5Token called 58 returned 100% blocks executed 100%
       58: 4112:static const Token * findOpenParentesisOfMove(const Token * moveVarTok)
        -: 4113:{
       58: 4114:    const Token * tok = moveVarTok;
      174: 4115:    while (tok && tok->str() != "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
       58: 4116:        tok = tok->previous();
call    0 returned 100%
       58: 4117:    return tok;
        -: 4118:}
        -: 4119:
function _ZL33findEndOfFunctionCallForParameterPK5Token called 58 returned 100% blocks executed 95%
       58: 4120:static const Token * findEndOfFunctionCallForParameter(const Token * parameterToken)
        -: 4121:{
       58: 4122:    if (!parameterToken)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4123:        return nullptr;
       58: 4124:    const Token * parent = parameterToken->astParent();
call    0 returned 100%
       84: 4125:    while (parent && !parent->isOp() && parent->str() != "(")
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 27% (fallthrough)
branch  8 taken 73%
branch  9 taken 18% (fallthrough)
branch 10 taken 82%
       13: 4126:        parent = parent->astParent();
call    0 returned 100%
       58: 4127:    if (!parent)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        6: 4128:        return nullptr;
       52: 4129:    return nextAfterAstRightmostLeaf(parent);
call    0 returned 100%
        -: 4130:}
        -: 4131:
function _ZL18valueFlowAfterMoveP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 74%
     1192: 4132:static void valueFlowAfterMove(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 4133:{
     1192: 4134:    if (!tokenlist->isCPP() || settings->standards.cpp < Standards::CPP11)
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
       43: 4135:        return;
     2366: 4136:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     1217: 4137:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4138:            continue;
     1217: 4139:        const Token * start = scope->bodyStart;
     1217: 4140:        if (scope->function) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     1213: 4141:            const Token * memberInitializationTok = scope->function->constructorMemberInitialization();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1213: 4142:            if (memberInitializationTok)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       14: 4143:                start = memberInitializationTok;
        -: 4144:        }
        -: 4145:
    25251: 4146:        for (Token* tok = const_cast<Token*>(start); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
        -: 4147:            Token * varTok;
    24034: 4148:            if (Token::Match(tok, "%var% . reset|clear (") && tok->next()->originalName() == emptyString) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       16: 4149:                varTok = tok;
       32: 4150:                ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       16: 4151:                value.valueType = ValueFlow::Value::ValueType::MOVED;
       16: 4152:                value.moveKind = ValueFlow::Value::MoveKind::NonMovedVariable;
       16: 4153:                value.errorPath.emplace_back(tok, "Calling " + tok->next()->expressionString() + " makes " + tok->str() + " 'non-moved'");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
       16: 4154:                value.setKnown();
call    0 returned 100%
       32: 4155:                std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       16: 4156:                values.push_back(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4157:
       16: 4158:                const Variable *var = varTok->variable();
call    0 returned 100%
       16: 4159:                if (!var || (!var->isLocal() && !var->isArgument()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 4160:                    continue;
       16: 4161:                const int varId = varTok->varId();
call    0 returned 100%
       16: 4162:                const Token * const endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
       16: 4163:                setTokenValue(varTok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16: 4164:                valueFlowForwardVariable(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 4165:                    varTok->next(), endOfVarScope, var, varId, values, false, false, tokenlist, errorLogger, settings);
       16: 4166:                continue;
        -: 4167:            }
        -: 4168:            ValueFlow::Value::MoveKind moveKind;
    24018: 4169:            if (!isStdMoveOrStdForwarded(tok, &moveKind, &varTok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    23946: 4170:                continue;
       72: 4171:            const int varId = varTok->varId();
call    0 returned 100%
        -: 4172:            // x is not MOVED after assignment if code is:  x = ... std::move(x) .. ;
       72: 4173:            const Token *parent = tok->astParent();
call    0 returned 100%
      956: 4174:            while (parent && parent->str() != "=" && parent->str() != "return" &&
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 91% (fallthrough)
branch  5 taken 9%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
branch 10 taken 57% (fallthrough)
branch 11 taken 43%
branch 12 taken 75% (fallthrough)
branch 13 taken 25%
      351: 4175:                   !(parent->str() == "(" && isOpenParenthesisMemberFunctionCallOfVarId(parent, varId)))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
      220: 4176:                parent = parent->astParent();
call    0 returned 100%
      119: 4177:            if (parent &&
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
       62: 4178:                (parent->str() == "return" || // MOVED in return statement
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
       27: 4179:                 parent->str() == "(")) // MOVED in self assignment, isOpenParenthesisMemberFunctionCallOfVarId == true
call    0 returned 100%
call    1 returned 100%
       12: 4180:                continue;
       60: 4181:            if (parent && parent->astOperand1() && parent->astOperand1()->varId() == varId)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 9% (fallthrough)
branch  8 taken 91%
branch  9 taken 3% (fallthrough)
branch 10 taken 97%
        2: 4182:                continue;
       58: 4183:            const Variable *var = varTok->variable();
call    0 returned 100%
       58: 4184:            if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4185:                continue;
       58: 4186:            const Token * const endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
        -: 4187:
      116: 4188:            ValueFlow::Value value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       58: 4189:            value.valueType = ValueFlow::Value::ValueType::MOVED;
       58: 4190:            value.moveKind = moveKind;
       58: 4191:            if (moveKind == ValueFlow::Value::MoveKind::MovedVariable)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       56: 4192:                value.errorPath.emplace_back(tok, "Calling std::move(" + varTok->str() + ")");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        -: 4193:            else // if (moveKind == ValueFlow::Value::ForwardedVariable)
        2: 4194:                value.errorPath.emplace_back(tok, "Calling std::forward(" + varTok->str() + ")");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
       58: 4195:            value.setKnown();
call    0 returned 100%
      116: 4196:            std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       58: 4197:            values.push_back(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       58: 4198:            const Token * openParentesisOfMove = findOpenParentesisOfMove(varTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       58: 4199:            const Token * endOfFunctionCall = findEndOfFunctionCallForParameter(openParentesisOfMove);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       58: 4200:            if (endOfFunctionCall)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       52: 4201:                valueFlowForwardVariable(const_cast<Token*>(endOfFunctionCall),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 4202:                                         endOfVarScope,
        -: 4203:                                         var,
        -: 4204:                                         varId,
        -: 4205:                                         values,
        -: 4206:                                         false,
        -: 4207:                                         false,
        -: 4208:                                         tokenlist,
        -: 4209:                                         errorLogger,
        -: 4210:                                         settings);
        -: 4211:        }
        -: 4212:    }
        -: 4213:}
        -: 4214:
function _ZL22valueFlowForwardAssignP5TokenPK8VariableNSt7__debug4listIN9ValueFlow5ValueESaIS7_EEEbbP9TokenListP11ErrorLoggerPK8Settings called 618 returned 100% blocks executed 71%
      618: 4215:static void valueFlowForwardAssign(Token * const               tok,
        -: 4216:                                   const Variable * const      var,
        -: 4217:                                   std::list<ValueFlow::Value> values,
        -: 4218:                                   const bool                  constValue,
        -: 4219:                                   const bool                  init,
        -: 4220:                                   TokenList * const           tokenlist,
        -: 4221:                                   ErrorLogger * const         errorLogger,
        -: 4222:                                   const Settings * const      settings)
        -: 4223:{
      618: 4224:    const Token * const endOfVarScope = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
      618: 4225:    if (std::any_of(values.begin(), values.end(), std::mem_fn(&ValueFlow::Value::isLifetimeValue))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 7% (fallthrough)
branch  9 taken 93%
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
       43: 4226:        valueFlowForwardLifetime(tok, tokenlist, errorLogger, settings);
call    0 returned 100%
       43: 4227:        values.remove_if(std::mem_fn(&ValueFlow::Value::isLifetimeValue));
call    0 returned 100%
call    1 returned 100%
        -: 4228:    }
      618: 4229:    if (!var->isPointer() && !var->isSmartPointer())
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 89% (fallthrough)
branch  7 taken 11%
      550: 4230:        values.remove_if(std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 returned 100%
call    1 returned 100%
      618: 4231:    if (tok->astParent()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1239: 4232:        for (std::list<ValueFlow::Value>::iterator it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
     1242: 4233:            const std::string info = "Assignment '" + tok->astParent()->expressionString() + "', assigned value is " + it->infoString();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
      621: 4234:            it->errorPath.emplace_back(tok, info);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4235:        }
        -: 4236:    }
        -: 4237:
      618: 4238:    if (tokenlist->isCPP() && Token::Match(var->typeStartToken(), "bool|_Bool")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
       52: 4239:        std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 returned 100%
       52: 4240:        for (it = values.begin(); it != values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
       26: 4241:            if (it->isIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       26: 4242:                it->intvalue = (it->intvalue != 0);
call    0 returned 100%
call    1 returned 100%
       26: 4243:            if (it->isTokValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4244:                it ->intvalue = (it->tokvalue != nullptr);
call    0 never executed
call    1 never executed
        -: 4245:        }
        -: 4246:    }
        -: 4247:
        -: 4248:    // Static variable initialisation?
      618: 4249:    if (var->isStatic() && init)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4250:        lowerToPossible(values);
call    0 never executed
        -: 4251:
        -: 4252:    // Skip RHS
      618: 4253:    const Token * nextExpression = tok->astParent() ? nextAfterAstRightmostLeaf(tok->astParent()) : tok->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 never executed
        -: 4254:
      618: 4255:    if (std::any_of(values.begin(), values.end(), std::mem_fn(&ValueFlow::Value::isTokValue))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 7% (fallthrough)
branch  9 taken 93%
call   10 never executed
call   11 never executed
call   12 never executed
       84: 4256:        std::list<ValueFlow::Value> tokvalues;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       42: 4257:        std::copy_if(values.begin(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       84: 4258:                     values.end(),
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4259:                     std::back_inserter(tokvalues),
       42: 4260:                     std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       42: 4261:        valueFlowForwardVariable(const_cast<Token*>(nextExpression),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 4262:                                 endOfVarScope,
        -: 4263:                                 var,
        -: 4264:                                 var->declarationId(),
        -: 4265:                                 tokvalues,
        -: 4266:                                 constValue,
        -: 4267:                                 false,
        -: 4268:                                 tokenlist,
        -: 4269:                                 errorLogger,
        -: 4270:                                 settings);
       42: 4271:        values.remove_if(std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4272:    }
     1197: 4273:    for (ValueFlow::Value& value:values)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
      579: 4274:        value.tokvalue = tok;
      618: 4275:    valueFlowForwardVariable(const_cast<Token*>(nextExpression),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
        -: 4276:                             endOfVarScope,
        -: 4277:                             var,
        -: 4278:                             var->declarationId(),
        -: 4279:                             values,
        -: 4280:                             constValue,
        -: 4281:                             false,
        -: 4282:                             tokenlist,
        -: 4283:                             errorLogger,
        -: 4284:                             settings);
      618: 4285:}
        -: 4286:
function _ZL14truncateValuesNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEPK9ValueTypePK8Settings called 618 returned 100% blocks executed 97%
      618: 4287:static std::list<ValueFlow::Value> truncateValues(std::list<ValueFlow::Value> values, const ValueType *valueType, const Settings *settings)
        -: 4288:{
      618: 4289:    if (!valueType || !valueType->isIntegral())
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
branch  5 taken 6% (fallthrough)
branch  6 taken 94%
       34: 4290:        return values;
call    0 returned 100%
        -: 4291:
      584: 4292:    const size_t sz = getSizeOf(*valueType, settings);
call    0 returned 100%
        -: 4293:
     1207: 4294:    for (ValueFlow::Value &value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
      623: 4295:        if (value.isFloatValue()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4296:            value.intvalue = value.floatValue;
    #####: 4297:            value.valueType = ValueFlow::Value::INT;
        -: 4298:        }
        -: 4299:
      623: 4300:        if (value.isIntValue() && sz > 0 && sz < 8) {
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
branch  3 taken 95% (fallthrough)
branch  4 taken 5%
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
branch  7 taken 82% (fallthrough)
branch  8 taken 18%
      511: 4301:            const MathLib::biguint unsignedMaxValue = (1ULL << (sz * 8)) - 1ULL;
      511: 4302:            const MathLib::biguint signBit = 1ULL << (sz * 8 - 1);
      511: 4303:            value.intvalue &= unsignedMaxValue;
      511: 4304:            if (valueType->sign == ValueType::Sign::SIGNED && (value.intvalue & signBit))
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 4305:                value.intvalue |= ~unsignedMaxValue;
        -: 4306:        }
        -: 4307:    }
      584: 4308:    return values;
call    0 returned 100%
        -: 4309:}
        -: 4310:
function _ZL15isLiteralNumberPK5Tokenb called 618 returned 100% blocks executed 100%
      618: 4311:static bool isLiteralNumber(const Token *tok, bool cpp)
        -: 4312:{
      618: 4313:    return tok->isNumber() || tok->str() == "NULL" || (cpp && Token::Match(tok, "false|true|nullptr"));
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 11% (fallthrough)
branch 11 taken 89%
        -: 4314:}
        -: 4315:
function _ZL20valueFlowAfterAssignP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 80%
     1192: 4316:static void valueFlowAfterAssign(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 4317:{
     2450: 4318:    for (const Scope * scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     2516: 4319:        std::set<int> aliased;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    25810: 4320:        for (Token* tok = const_cast<Token*>(scope->bodyStart); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
        -: 4321:            // Alias
    24684: 4322:            if (tok->isUnaryOp("&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 never executed
call   12 never executed
      132: 4323:                aliased.insert(tok->astOperand1()->varId());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
    24066: 4324:                continue;
        -: 4325:            }
        -: 4326:
        -: 4327:            // Assignment
    24420: 4328:            if ((tok->str() != "=") || (tok->astParent()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
branch  7 taken 95% (fallthrough)
branch  8 taken 5%
    23276: 4329:                continue;
        -: 4330:
        -: 4331:            // Lhs should be a variable
     1144: 4332:            if (!tok->astOperand1() || !tok->astOperand1()->varId() || tok->astOperand1()->hasKnownValue())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 87% (fallthrough)
branch  6 taken 13%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
branch 13 taken 15% (fallthrough)
branch 14 taken 85%
      166: 4333:                continue;
      978: 4334:            const int varid = tok->astOperand1()->varId();
call    0 returned 100%
call    1 returned 100%
      978: 4335:            if (aliased.find(varid) != aliased.end())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
    #####: 4336:                continue;
      978: 4337:            const Variable *var = tok->astOperand1()->variable();
call    0 returned 100%
call    1 returned 100%
      978: 4338:            if (!var || (!var->isLocal() && !var->isGlobal() && !var->isArgument()))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 8% (fallthrough)
branch  6 taken 92%
call    7 returned 100%
branch  8 taken 86% (fallthrough)
branch  9 taken 14%
call   10 returned 100%
branch 11 taken 23% (fallthrough)
branch 12 taken 77%
branch 13 taken 2% (fallthrough)
branch 14 taken 98%
       22: 4339:                continue;
        -: 4340:
        -: 4341:            // Rhs values..
      956: 4342:            if (!tok->astOperand2() || tok->astOperand2()->values().empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 35% (fallthrough)
branch  7 taken 65%
branch  8 taken 35% (fallthrough)
branch  9 taken 65%
      338: 4343:                continue;
        -: 4344:
     1236: 4345:            std::list<ValueFlow::Value> values = truncateValues(tok->astOperand2()->values(), tok->astOperand1()->valueType(), settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
      618: 4346:            const bool constValue = isLiteralNumber(tok->astOperand2(), tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      618: 4347:            const bool init = var->nameToken() == tok->astOperand1();
call    0 returned 100%
call    1 returned 100%
      618: 4348:            valueFlowForwardAssign(tok->astOperand2(), var, values, constValue, init, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 4349:        }
        -: 4350:    }
     1192: 4351:}
        -: 4352:
function _ZL28valueFlowSetConditionToKnownPK5TokenRNSt7__debug4listIN9ValueFlow5ValueESaIS5_EEEb called 921 returned 100% blocks executed 100%
      921: 4353:static void valueFlowSetConditionToKnown(const Token* tok, std::list<ValueFlow::Value>& values, bool then)
        -: 4354:{
      921: 4355:    if (values.empty())
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       70: 4356:        return;
      851: 4357:    if (then && !Token::Match(tok, "==|!|("))
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
call    2 returned 100%
branch  3 taken 73% (fallthrough)
branch  4 taken 27%
branch  5 taken 62% (fallthrough)
branch  6 taken 38%
      526: 4358:        return;
      325: 4359:    if (!then && !Token::Match(tok, "!=|%var%|("))
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
call    2 returned 100%
branch  3 taken 62% (fallthrough)
branch  4 taken 38%
branch  5 taken 25% (fallthrough)
branch  6 taken 75%
       80: 4360:        return;
      245: 4361:    if (isConditionKnown(tok, then))
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
      189: 4362:        changePossibleToKnown(values);
call    0 returned 100%
        -: 4363:}
        -: 4364:
function _ZL12isBreakScopePK5Token called 29 returned 100% blocks executed 82%
       29: 4365:static bool isBreakScope(const Token* const endToken)
        -: 4366:{
       29: 4367:    if (!Token::simpleMatch(endToken, "}"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4368:        return false;
       29: 4369:    if (!Token::simpleMatch(endToken->link(), "{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4370:        return false;
       29: 4371:    return Token::findmatch(endToken->link(), "break|goto", endToken);
call    0 returned 100%
call    1 returned 100%
        -: 4372:}
        -: 4373:
function _ZL12asImpossibleN9ValueFlow5ValueE called 689 returned 100% blocks executed 100%
      689: 4374:static ValueFlow::Value asImpossible(ValueFlow::Value v)
        -: 4375:{
      689: 4376:    v.invertRange();
call    0 returned 100%
      689: 4377:    v.setImpossible();
call    0 returned 100%
      689: 4378:    return v;
call    0 returned 100%
        -: 4379:}
        -: 4380:
function _ZL16insertImpossibleRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEERKS4_ called 689 returned 100% blocks executed 62%
      689: 4381:static void insertImpossible(std::list<ValueFlow::Value>& values, const std::list<ValueFlow::Value>& input)
        -: 4382:{
      689: 4383:    std::transform(input.begin(), input.end(), std::back_inserter(values), &asImpossible);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
      689: 4384:}
        -: 4385:
function _ZL16getExprVariablesPK5TokenPK9TokenListPK14SymbolDatabasePK8Settings called 2167 returned 100% blocks executed 57%
     2167: 4386:static std::vector<const Variable*> getExprVariables(const Token* expr,
        -: 4387:        const TokenList* tokenlist,
        -: 4388:        const SymbolDatabase* symboldatabase,
        -: 4389:        const Settings* settings)
        -: 4390:{
     2167: 4391:    std::vector<const Variable*> result;
call    0 returned 100%
     4334: 4392:    FwdAnalysis fwdAnalysis(tokenlist->isCPP(), settings->library);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
call    4 never executed
     4334: 4393:    std::set<int> varids = fwdAnalysis.getExprVarIds(expr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
function _ZZL16getExprVariablesPK5TokenPK9TokenListPK14SymbolDatabasePK8SettingsENKUliE_clEi called 1852 returned 100% blocks executed 100%
     4019: 4394:    std::transform(varids.begin(), varids.end(), std::back_inserter(result), [&](int id) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
     1852: 4395:        return symboldatabase->getVariableFromVarId(id);
     4019: 4396:    });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
     4334: 4397:    return result;
        -: 4398:}
        -: 4399:
function _ZN25ValueFlowConditionHandlerD2Ev called 2358 returned 100% blocks executed 100%
function _ZN25ValueFlowConditionHandlerC2Ev called 2358 returned 100% blocks executed 100%
     4716: 4400:struct ValueFlowConditionHandler {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
function _ZN25ValueFlowConditionHandler9ConditionD2Ev called 6185 returned 100% blocks executed 100%
     6185: 4401:    struct Condition {
call    0 returned 100%
call    1 returned 100%
        -: 4402:        const Token *vartok;
        -: 4403:        std::list<ValueFlow::Value> true_values;
        -: 4404:        std::list<ValueFlow::Value> false_values;
        -: 4405:
function _ZN25ValueFlowConditionHandler9ConditionC2Ev called 6185 returned 100% blocks executed 100%
     6185: 4406:        Condition() : vartok(nullptr), true_values(), false_values() {}
call    0 returned 100%
call    1 returned 100%
        -: 4407:    };
        -: 4408:    std::function<bool(Token* start, const Token* stop, const Token* exprTok, const std::list<ValueFlow::Value>& values, bool constValue)>
        -: 4409:    forward;
        -: 4410:    std::function<Condition(Token *tok)> parse;
        -: 4411:
function _ZNK25ValueFlowConditionHandler14afterConditionEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 2358 returned 100% blocks executed 58%
     2358: 4412:    void afterCondition(TokenList *tokenlist,
        -: 4413:                        SymbolDatabase *symboldatabase,
        -: 4414:                        ErrorLogger *errorLogger,
        -: 4415:                        const Settings *settings) const {
     4848: 4416:        for (const Scope *scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     4980: 4417:            std::set<unsigned> aliased;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    51092: 4418:            for (Token *tok = const_cast<Token *>(scope->bodyStart); tok != scope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
    48602: 4419:                if (Token::Match(tok, "if|while|for ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
    49056: 4420:                    continue;
        -: 4421:
    47429: 4422:                if (Token::Match(tok, "= & %var% ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       48: 4423:                    aliased.insert(tok->tokAt(2)->varId());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
    47429: 4424:                const Token* top = tok->astTop();
call    0 returned 100%
    47429: 4425:                if (!top)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4426:                    continue;
        -: 4427:
    47429: 4428:                if (!Token::Match(top->previous(), "if|while|for (") && !Token::Match(tok->astParent(), "&&|%oror%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 87% (fallthrough)
branch  5 taken 13%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 99% (fallthrough)
branch 11 taken 1%
branch 12 taken 87% (fallthrough)
branch 13 taken 13%
    41244: 4429:                    continue;
        -: 4430:
     6904: 4431:                Condition cond = parse(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
     6185: 4432:                if (!cond.vartok)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
     5356: 4433:                    continue;
      829: 4434:                if (cond.true_values.empty() || cond.false_values.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4435:                    continue;
        -: 4436:
      829: 4437:                if (exprDependsOnThis(cond.vartok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        6: 4438:                    continue;
     1542: 4439:                std::vector<const Variable*> vars = getExprVariables(cond.vartok, tokenlist, symboldatabase, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 12%
branch  5 taken 88%
call    6 never executed
function _ZZNK25ValueFlowConditionHandler14afterConditionEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENUlPK8VariableE_4_FUNESB_ called 0 returned 0% blocks executed 0%
function _ZZNK25ValueFlowConditionHandler14afterConditionEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK8VariableE_clESB_ called 696 returned 100% blocks executed 100%
     1519: 4440:                if (std::any_of(vars.begin(), vars.end(), [](const Variable* var) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
call    9 never executed
call   10 never executed
        -: 4441:                return !var;
      696: 4442:            }))
call    0 never executed
       10: 4443:                continue;
      813: 4444:                if (!vars.empty() && (vars.front()))
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 70% (fallthrough)
branch  7 taken 30%
function _ZZNK25ValueFlowConditionHandler14afterConditionEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK8VariableE0_clESB_ called 680 returned 100% blocks executed 65%
     1250: 4445:                    if (std::any_of(vars.begin(), vars.end(), [&](const Variable* var) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
call    9 never executed
call   10 never executed
     1360: 4446:                    return var && aliased.find(var->declarationId()) != aliased.end();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
     1360: 4447:                    })) {
        2: 4448:                    if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4449:                        bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        -: 4450:                                errorLogger,
        -: 4451:                                cond.vartok,
        -: 4452:                                "variable is aliased so we just skip all valueflow after condition");
        2: 4453:                    continue;
        -: 4454:                }
        -: 4455:
      811: 4456:                if (Token::Match(tok->astParent(), "%oror%|&&")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
      269: 4457:                    Token *parent = tok->astParent();
call    0 returned 100%
      269: 4458:                    const std::string &op(parent->str());
call    0 returned 100%
        -: 4459:
      417: 4460:                    if (parent->astOperand1() == tok && ((op == "&&" && Token::Match(tok, "==|>=|<=|!")) ||
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
call    3 returned 100%
branch  4 taken 63% (fallthrough)
branch  5 taken 37%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 73% (fallthrough)
branch 10 taken 27%
branch 11 taken 44% (fallthrough)
branch 12 taken 56%
branch 13 taken 13% (fallthrough)
branch 14 taken 87%
      163: 4461:                                                         (op == "||" && Token::Match(tok, "%name%|!=")))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 24% (fallthrough)
branch  5 taken 76%
      123: 4462:                        for (; parent && parent->str() == op; parent = parent->astParent()) {
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
branch  6 taken 56% (fallthrough)
branch  7 taken 44%
call    8 returned 100%
       88: 4463:                            std::stack<Token *> tokens;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
       44: 4464:                            tokens.push(parent->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       44: 4465:                            bool assign = false;
      644: 4466:                            while (!tokens.empty()) {
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
      300: 4467:                                Token *rhstok = tokens.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      300: 4468:                                tokens.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      300: 4469:                                if (!rhstok)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
      172: 4470:                                    continue;
      128: 4471:                                tokens.push(rhstok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      128: 4472:                                tokens.push(rhstok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      256: 4473:                                if (isSameExpression(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
      128: 4474:                                        tokenlist->isCPP(), false, cond.vartok, rhstok, settings->library, true, false))
call    0 returned 100%
       11: 4475:                                    setTokenValue(rhstok, cond.true_values.front(), settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      117: 4476:                                else if (Token::Match(rhstok, "++|--|=") && isSameExpression(tokenlist->isCPP(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
        -: 4477:                                         false,
        -: 4478:                                         cond.vartok,
    #####: 4479:                                         rhstok->astOperand1(),
call    0 never executed
        -: 4480:                                         settings->library,
        -: 4481:                                         true,
        -: 4482:                                         false)) {
    #####: 4483:                                    assign = true;
    #####: 4484:                                    break;
        -: 4485:                                }
        -: 4486:                            }
       44: 4487:                            if (assign)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4488:                                break;
       32: 4489:                            while (parent->astParent() && parent == parent->astParent()->astOperand2())
call    0 returned 100%
branch  1 taken 63% (fallthrough)
branch  2 taken 37%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 67% (fallthrough)
branch  6 taken 33%
branch  7 taken 42% (fallthrough)
branch  8 taken 58%
       32: 4490:                                parent = parent->astParent();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
        -: 4491:                        }
        -: 4492:                    }
        -: 4493:                }
        -: 4494:
      811: 4495:                if (top && Token::Match(top->previous(), "if|while (") && !top->previous()->isExpandedMacro()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 89% (fallthrough)
branch  7 taken 11%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 89% (fallthrough)
branch 15 taken 11%
        -: 4496:                    // does condition reassign variable?
     1882: 4497:                    if (tok != top->astOperand2() && Token::Match(top->astOperand2(), "%oror%|&&") &&
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 86% (fallthrough)
branch  8 taken 14%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
     1151: 4498:                        isVariablesChanged(top, top->link(), 0, vars, settings, tokenlist->isCPP())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
call   10 returned 100%
branch 11 never executed
branch 12 never executed
call   13 never executed
        8: 4499:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4500:                            bailout(tokenlist, errorLogger, tok, "assignment in condition");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
      100: 4501:                        continue;
call    0 returned 100%
branch  1 taken 87%
branch  2 taken 13%
        -: 4502:                    }
        -: 4503:
     1346: 4504:                    std::list<ValueFlow::Value> thenValues;
call    0 returned 100%
call    1 never executed
     1346: 4505:                    std::list<ValueFlow::Value> elseValues;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 88%
branch  3 taken 12%
call    4 never executed
        -: 4506:
      715: 4507:                    if (!Token::Match(tok, "!=|=") && tok != cond.vartok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 88% (fallthrough)
branch  4 taken 12%
branch  5 taken 51% (fallthrough)
branch  6 taken 49%
branch  7 taken 45% (fallthrough)
branch  8 taken 55%
      324: 4508:                        thenValues.insert(thenValues.end(), cond.true_values.begin(), cond.true_values.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
      324: 4509:                        if (isConditionKnown(tok, false))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 68% (fallthrough)
branch  4 taken 32%
      220: 4510:                            insertImpossible(elseValues, cond.false_values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4511:                    }
      715: 4512:                    if (!Token::Match(tok, "==|!")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
      558: 4513:                        elseValues.insert(elseValues.end(), cond.false_values.begin(), cond.false_values.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
      558: 4514:                        if (isConditionKnown(tok, true))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 84% (fallthrough)
branch  4 taken 16%
      469: 4515:                            insertImpossible(thenValues, cond.true_values);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4516:                    }
        -: 4517:
        -: 4518:                    // start token of conditional code
      715: 4519:                    Token* startTokens[] = {nullptr, nullptr};
        -: 4520:
        -: 4521:                    // if astParent is "!" we need to invert codeblock
        -: 4522:                    {
      715: 4523:                        const Token *tok2 = tok;
     2553: 4524:                        while (tok2->astParent()) {
call    0 returned 100%
branch  1 taken 56% (fallthrough)
branch  2 taken 44%
      919: 4525:                            const Token *parent = tok2->astParent();
call    0 returned 100%
     1235: 4526:                            while (parent && parent->str() == "&&")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
      158: 4527:                                parent = parent->astParent();
call    0 returned 100%
      919: 4528:                            if (parent && (parent->str() == "!" || Token::simpleMatch(parent, "== false"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        6: 4529:                                std::swap(thenValues, elseValues);
call    0 returned 100%
        -: 4530:                            }
      919: 4531:                            tok2 = parent;
        -: 4532:                        }
        -: 4533:                    }
        -: 4534:
        -: 4535:                    // determine startToken(s)
      715: 4536:                    if (Token::simpleMatch(top->link(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
      701: 4537:                        startTokens[0] = top->link()->next();
call    0 returned 100%
call    1 returned 100%
      715: 4538:                    if (Token::simpleMatch(top->link()->linkAt(1), "} else {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 5% (fallthrough)
branch  8 taken 95%
       38: 4539:                        startTokens[1] = top->link()->linkAt(1)->tokAt(2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 4540:
      715: 4541:                    int changeBlock = -1;
        -: 4542:
     2145: 4543:                    for (int i = 0; i < 2; i++) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
     1430: 4544:                        const Token *const startToken = startTokens[i];
     1430: 4545:                        if (!startToken)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
      691: 4546:                            continue;
      739: 4547:                        std::list<ValueFlow::Value>& values = (i == 0 ? thenValues : elseValues);
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
      739: 4548:                        valueFlowSetConditionToKnown(tok, values, i == 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4549:
        -: 4550:                        // TODO: The endToken should not be startTokens[i]->link() in the valueFlowForwardVariable call
      739: 4551:                        if (forward(startTokens[i], startTokens[i]->link(), cond.vartok, values, true))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
       32: 4552:                            changeBlock = i;
      739: 4553:                        changeKnownToPossible(values);
call    0 returned 100%
        -: 4554:                    }
        -: 4555:                    // TODO: Values changed in noreturn blocks should not bail
      730: 4556:                    if (changeBlock >= 0 && !Token::simpleMatch(top->previous(), "while (")) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 47% (fallthrough)
branch  7 taken 53%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
       15: 4557:                        if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4558:                            bailout(tokenlist,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
        -: 4559:                                    errorLogger,
        -: 4560:                                    startTokens[changeBlock]->link(),
        -: 4561:                                    "valueFlowAfterCondition: " + cond.vartok->expressionString() +
        -: 4562:                                    " is changed in conditional block");
       15: 4563:                        continue;
        -: 4564:                    }
        -: 4565:
        -: 4566:                    // After conditional code..
      700: 4567:                    if (Token::simpleMatch(top->link(), ") {")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
      686: 4568:                        Token *after = top->link()->linkAt(1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1303: 4569:                        std::string unknownFunction;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 88%
branch  3 taken 12%
call    4 never executed
      746: 4570:                        if (settings->library.isScopeNoReturn(after, &unknownFunction)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
       60: 4571:                            if (settings->debugwarnings && !unknownFunction.empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4572:                                bailout(tokenlist, errorLogger, after, "possible noreturn scope");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
       60: 4573:                            continue;
        -: 4574:                        }
        -: 4575:
     1279: 4576:                        bool dead_if = isReturnScope(after, settings) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 87% (fallthrough)
branch  4 taken 13%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
     1121: 4577:                                       (tok->astParent() && Token::simpleMatch(tok->astParent()->previous(), "while (") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
branch  8 taken 93% (fallthrough)
branch  9 taken 7%
      655: 4578:                                        !isBreakScope(after));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      626: 4579:                        bool dead_else = false;
        -: 4580:
      626: 4581:                        if (Token::simpleMatch(after, "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
       36: 4582:                            after = after->linkAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       41: 4583:                            if (Token::simpleMatch(after->tokAt(-2), ") ; }")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
        5: 4584:                                if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4585:                                    bailout(tokenlist, errorLogger, after, "possible noreturn scope");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        5: 4586:                                continue;
        -: 4587:                            }
       31: 4588:                            dead_else = isReturnScope(after, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4589:                        }
        -: 4590:
      621: 4591:                        if (dead_if && dead_else)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        4: 4592:                            continue;
        -: 4593:
     1234: 4594:                        std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 90%
branch  4 taken 10%
call    5 never executed
      617: 4595:                        if (dead_if) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
      103: 4596:                            values = elseValues;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      514: 4597:                        } else if (dead_else) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4598:                            values = thenValues;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4599:                        } else {
      514: 4600:                            std::copy_if(thenValues.begin(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     1028: 4601:                                         thenValues.end(),
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4602:                                         std::back_inserter(values),
      514: 4603:                                         std::mem_fn(&ValueFlow::Value::isPossible));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      514: 4604:                            std::copy_if(elseValues.begin(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     1028: 4605:                                         elseValues.end(),
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4606:                                         std::back_inserter(values),
      514: 4607:                                         std::mem_fn(&ValueFlow::Value::isPossible));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4608:                        }
        -: 4609:
      617: 4610:                        if (!values.empty()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      605: 4611:                            if ((dead_if || dead_else) && !Token::Match(tok->astParent(), "&&|&")) {
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 15% (fallthrough)
branch 11 taken 85%
       91: 4612:                                valueFlowSetConditionToKnown(tok, values, true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       91: 4613:                                valueFlowSetConditionToKnown(tok, values, false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4614:                            }
        -: 4615:                            // TODO: constValue could be true if there are no assignments in the conditional blocks and
        -: 4616:                            //       perhaps if there are no && and no || in the condition
      605: 4617:                            bool constValue = false;
      605: 4618:                            forward(after, top->scope()->bodyEnd, cond.vartok, values, constValue);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4619:                        }
        -: 4620:                    }
        -: 4621:                }
        -: 4622:            }
        -: 4623:        }
     2358: 4624:    }
        -: 4625:};
        -: 4626:
function _ZL23valueFlowAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 64%
     1192: 4627:static void valueFlowAfterCondition(TokenList *tokenlist,
        -: 4628:                                    SymbolDatabase *symboldatabase,
        -: 4629:                                    ErrorLogger *errorLogger,
        -: 4630:                                    const Settings *settings)
        -: 4631:{
     2384: 4632:    ValueFlowConditionHandler handler;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1192: 4633:    handler.forward = [&](Token* start,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4634:                          const Token* stop,
        -: 4635:                          const Token* vartok,
        -: 4636:                          const std::list<ValueFlow::Value>& values,
function _ZZL23valueFlowAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlP5TokenPKS8_SB_RKNSt7__debug4listIN9ValueFlow5ValueESaISF_EEEbE_clES9_SB_SB_SJ_b called 1344 returned 100% blocks executed 62%
     1344: 4637:    bool constValue) {
     5376: 4638:        valueFlowForward(start->next(), stop, vartok, values, constValue, false, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
     4032: 4639:        std::vector<const Variable*> vars = getExprVariables(vartok, tokenlist, symboldatabase, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     4032: 4640:        return isVariablesChanged(start, stop, 0, vars, settings, tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
     2384: 4641:    };
function _ZZL23valueFlowAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK5TokenE0_clESA_ called 3131 returned 100% blocks executed 76%
     4323: 4642:    handler.parse = [&](const Token *tok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     3131: 4643:        ValueFlowConditionHandler::Condition cond;
call    0 returned 100%
     6262: 4644:        ValueFlow::Value true_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
     6262: 4645:        ValueFlow::Value false_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     3131: 4646:        const Token *vartok = parseCompareInt(tok, true_value, false_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     3131: 4647:        if (vartok) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
      391: 4648:            if (vartok->str() == "=" && vartok->astOperand1() && vartok->astOperand2())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 4649:                vartok = vartok->astOperand1();
call    0 never executed
      391: 4650:            cond.true_values.push_back(true_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      391: 4651:            cond.false_values.push_back(false_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      391: 4652:            cond.vartok = vartok;
      391: 4653:            return cond;
        -: 4654:        }
        -: 4655:
     2740: 4656:        if (tok->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       62: 4657:            vartok = tok->astOperand1();
call    0 returned 100%
        -: 4658:
     4586: 4659:        } else if (tok->astParent() && (Token::Match(tok->astParent(), "%oror%|&&") ||
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 91% (fallthrough)
branch  8 taken 9%
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
branch 11 taken 17% (fallthrough)
branch 12 taken 83%
     1908: 4660:                                        Token::Match(tok->astParent()->previous(), "if|while ("))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      456: 4661:            if (Token::simpleMatch(tok, "="))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 4662:                vartok = tok->astOperand1();
call    0 returned 100%
      455: 4663:            else if (!Token::Match(tok, "%comp%|%assign%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 82% (fallthrough)
branch  4 taken 18%
      375: 4664:                vartok = tok;
        -: 4665:        }
        -: 4666:
     2740: 4667:        if (!vartok)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
     2302: 4668:            return cond;
      438: 4669:        cond.true_values.emplace_back(tok, 0LL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      438: 4670:        cond.false_values.emplace_back(tok, 0LL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      438: 4671:        cond.vartok = vartok;
        -: 4672:
      438: 4673:        return cond;
     1192: 4674:    };
     1192: 4675:    handler.afterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1192: 4676:}
        -: 4677:
function _ZL7executePK5TokenPN12_GLOBAL__N_113ProgramMemoryEPxPb called 1496 returned 100% blocks executed 59%
     1496: 4678:static void execute(const Token *expr,
        -: 4679:                    ProgramMemory * const programMemory,
        -: 4680:                    MathLib::bigint *result,
        -: 4681:                    bool *error)
        -: 4682:{
     1496: 4683:    if (!expr)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       14: 4684:        *error = true;
        -: 4685:
     1482: 4686:    else if (expr->hasKnownIntValue()) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
      302: 4687:        *result = expr->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
        -: 4688:    }
        -: 4689:
     1180: 4690:    else if (expr->isNumber()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        4: 4691:        *result = MathLib::toLongNumber(expr->str());
call    0 returned 100%
call    1 returned 100%
        4: 4692:        if (MathLib::isFloat(expr->str()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 4693:            *error = true;
        -: 4694:    }
        -: 4695:
     1176: 4696:    else if (expr->varId() > 0) {
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
      510: 4697:        if (!programMemory->getIntValue(expr->varId(), result))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
      253: 4698:            *error = true;
        -: 4699:    }
        -: 4700:
      666: 4701:    else if (expr->isComparisonOp()) {
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
      252: 4702:        MathLib::bigint result1(0), result2(0);
      252: 4703:        execute(expr->astOperand1(), programMemory, &result1, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      252: 4704:        execute(expr->astOperand2(), programMemory, &result2, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      252: 4705:        if (expr->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
       43: 4706:            *result = result1 < result2;
      209: 4707:        else if (expr->str() == "<=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
       12: 4708:            *result = result1 <= result2;
      197: 4709:        else if (expr->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        8: 4710:            *result = result1 > result2;
      189: 4711:        else if (expr->str() == ">=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
       28: 4712:            *result = result1 >= result2;
      161: 4713:        else if (expr->str() == "==")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
       78: 4714:            *result = result1 == result2;
       83: 4715:        else if (expr->str() == "!=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       83: 4716:            *result = result1 != result2;
        -: 4717:    }
        -: 4718:
      414: 4719:    else if (expr->isAssignmentOp()) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
       26: 4720:        execute(expr->astOperand2(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       26: 4721:        if (!expr->astOperand1() || !expr->astOperand1()->varId())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 15% (fallthrough)
branch  6 taken 85%
branch  7 taken 15% (fallthrough)
branch  8 taken 85%
        4: 4722:            *error = true;
       26: 4723:        if (*error)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
       37: 4724:            return;
        -: 4725:
       15: 4726:        if (expr->str() == "=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       15: 4727:            programMemory->setIntValue(expr->astOperand1()->varId(), *result);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       15: 4728:            return;
        -: 4729:        }
        -: 4730:
        -: 4731:        long long intValue;
    #####: 4732:        if (!programMemory->getIntValue(expr->astOperand1()->varId(), &intValue)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4733:            *error = true;
    #####: 4734:            return;
        -: 4735:        }
    #####: 4736:        if (expr->str() == "+=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4737:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue + *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4738:        else if (expr->str() == "-=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4739:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue - *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4740:        else if (expr->str() == "*=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4741:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue * *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4742:        else if (expr->str() == "/=" && *result != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4743:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue / *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4744:        else if (expr->str() == "%=" && *result != 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4745:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue % *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4746:        else if (expr->str() == "&=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4747:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue & *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4748:        else if (expr->str() == "|=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4749:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue | *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4750:        else if (expr->str() == "^=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4751:            programMemory->setIntValue(expr->astOperand1()->varId(), intValue ^ *result);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4752:    }
        -: 4753:
      388: 4754:    else if (Token::Match(expr, "++|--")) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
       14: 4755:        if (!expr->astOperand1() || expr->astOperand1()->varId() == 0U)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 4756:            *error = true;
        -: 4757:        else {
        -: 4758:            long long intValue;
       14: 4759:            if (!programMemory->getIntValue(expr->astOperand1()->varId(), &intValue))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4760:                *error = true;
        -: 4761:            else {
       30: 4762:                if (intValue == 0 &&
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        3: 4763:                    expr->str() == "--" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       16: 4764:                    expr->astOperand1()->variable() &&
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1: 4765:                    expr->astOperand1()->variable()->typeStartToken()->isUnsigned())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1: 4766:                    *error = true; // overflow
       14: 4767:                *result = intValue + (expr->str() == "++" ? 1 : -1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
       14: 4768:                programMemory->setIntValue(expr->astOperand1()->varId(), *result);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 4769:            }
        -: 4770:        }
        -: 4771:    }
        -: 4772:
      374: 4773:    else if (expr->isArithmeticalOp() && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 67% (fallthrough)
branch  8 taken 33%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
       16: 4774:        MathLib::bigint result1(0), result2(0);
       16: 4775:        execute(expr->astOperand1(), programMemory, &result1, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       16: 4776:        execute(expr->astOperand2(), programMemory, &result2, error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       16: 4777:        if (expr->str() == "+")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4778:            *result = result1 + result2;
       16: 4779:        else if (expr->str() == "-")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4780:            *result = result1 - result2;
       16: 4781:        else if (expr->str() == "*") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
        7: 4782:            if (result2 && (result1 > std::numeric_limits<MathLib::bigint>::max()/result2))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4783:                *error = true;
        -: 4784:            else
        7: 4785:                *result = result1 * result2;
        9: 4786:        } else if (result2 == 0)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        5: 4787:            *error = true;
        4: 4788:        else if (expr->str() == "/")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4789:            *result = result1 / result2;
        4: 4790:        else if (expr->str() == "%")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4791:            *result = result1 % result2;
        4: 4792:        else if (expr->str() == "<<")  {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2: 4793:            if (result2 < 0 || result1 < 0 || result2 >= MathLib::bigint_bits)  { // don't perform UB
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        2: 4794:                *error= true;
        -: 4795:            } else {
    #####: 4796:                *result = result1 << result2;
        -: 4797:            }
        2: 4798:        } else if (expr->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 4799:            if (result2 < 0) { // don't perform UB
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 4800:                *error=true;
        -: 4801:            } else {
        1: 4802:                *result = result1 >> result2;
        -: 4803:            }
        -: 4804:        }
        -: 4805:    }
        -: 4806:
      358: 4807:    else if (expr->str() == "&&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       12: 4808:        bool error1 = false;
       12: 4809:        execute(expr->astOperand1(), programMemory, result, &error1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       12: 4810:        if (!error1 && *result == 0)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        5: 4811:            *result = 0;
        -: 4812:        else {
        7: 4813:            bool error2 = false;
        7: 4814:            execute(expr->astOperand2(), programMemory, result, &error2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        7: 4815:            if (error1 && error2)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 4816:                *error = true;
        7: 4817:            if (error2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5: 4818:                *result = 1;
        -: 4819:            else
        2: 4820:                *result = !!*result;
        -: 4821:        }
        -: 4822:    }
        -: 4823:
      346: 4824:    else if (expr->str() == "||") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        3: 4825:        execute(expr->astOperand1(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
        3: 4826:        if (*result == 0 && *error == false)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 4827:            execute(expr->astOperand2(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
        -: 4828:    }
        -: 4829:
      343: 4830:    else if (expr->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
       42: 4831:        execute(expr->astOperand1(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
       42: 4832:        *result = !(*result);
        -: 4833:    }
        -: 4834:
      301: 4835:    else if (expr->str() == "," && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
        6: 4836:        execute(expr->astOperand1(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
        6: 4837:        execute(expr->astOperand2(), programMemory, result, error);
call    0 returned 100%
call    1 returned 100%
        -: 4838:    }
        -: 4839:
      295: 4840:    else if (expr->str() == "[" && expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 4841:        const Token *tokvalue = nullptr;
    #####: 4842:        if (!programMemory->getTokValue(expr->astOperand1()->varId(), &tokvalue)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4843:            auto tokvalue_it = std::find_if(expr->astOperand1()->values().begin(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 4844:                                            expr->astOperand1()->values().end(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4845:                                            std::mem_fn(&ValueFlow::Value::isTokValue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 4846:            if (tokvalue_it == expr->astOperand1()->values().end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4847:                *error = true;
    #####: 4848:                return;
        -: 4849:            }
    #####: 4850:            tokvalue = tokvalue_it->tokvalue;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4851:        }
    #####: 4852:        if (!tokvalue || !tokvalue->isLiteral()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4853:            *error = true;
    #####: 4854:            return;
        -: 4855:        }
    #####: 4856:        const std::string strValue = tokvalue->strValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4857:        MathLib::bigint index = 0;
    #####: 4858:        execute(expr->astOperand2(), programMemory, &index, error);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4859:        if (index >= 0 && index < strValue.size())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4860:            *result = strValue[index];
call    0 never executed
    #####: 4861:        else if (index == strValue.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4862:            *result = 0;
        -: 4863:        else
    #####: 4864:            *error = true;
        -: 4865:    }
        -: 4866:
        -: 4867:    else
      295: 4868:        *error = true;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 4869:}
        -: 4870:
function _ZL10isInBoundsRKN9ValueFlow5ValueEx called 15 returned 100% blocks executed 50%
       15: 4871:static bool isInBounds(const ValueFlow::Value& value, MathLib::bigint x)
        -: 4872:{
       15: 4873:    if (value.intvalue == x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4874:        return true;
       15: 4875:    if (value.bound == ValueFlow::Value::Bound::Lower && value.intvalue > x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 4876:        return false;
       15: 4877:    if (value.bound == ValueFlow::Value::Bound::Upper && value.intvalue < x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 4878:        return false;
        -: 4879:    // Checking for equality is not necessary since we already know the value is not equal
       15: 4880:    if (value.bound == ValueFlow::Value::Bound::Point)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       15: 4881:        return false;
    #####: 4882:    return true;
        -: 4883:}
        -: 4884:
function _ZL13proveNotEqualRKNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEx called 335 returned 100% blocks executed 83%
      335: 4885:static const ValueFlow::Value* proveNotEqual(const std::list<ValueFlow::Value>& values, MathLib::bigint x)
        -: 4886:{
      335: 4887:    const ValueFlow::Value* result = nullptr;
      353: 4888:    for (const ValueFlow::Value& value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 31% (fallthrough)
branch  4 taken 69%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 73%
branch  9 taken 27%
call   10 returned 100%
branch 11 taken 73%
branch 12 taken 27%
      110: 4889:        if (value.valueType != ValueFlow::Value::INT)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        3: 4890:            continue;
      107: 4891:        if (result && !isInBounds(value, result->intvalue))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4892:            continue;
      107: 4893:        if (value.isImpossible()) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        4: 4894:            if (value.intvalue == x)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4895:                return &value;
        4: 4896:            if (!isInBounds(value, x))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4: 4897:                continue;
    #####: 4898:            result = &value;
        -: 4899:        } else {
      103: 4900:            if (value.intvalue == x)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       92: 4901:                return nullptr;
       11: 4902:            if (!isInBounds(value, x))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       11: 4903:                continue;
    #####: 4904:            result = nullptr;
        -: 4905:        }
        -: 4906:    }
      243: 4907:    return result;
        -: 4908:}
        -: 4909:
function _ZL23valueFlowInferConditionP9TokenListPK8Settings called 1192 returned 100% blocks executed 74%
     1192: 4910:static void valueFlowInferCondition(TokenList* tokenlist,
        -: 4911:                                    const Settings* settings)
        -: 4912:{
    39187: 4913:    for (Token* tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37995: 4914:        if (!tok->astParent())
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
    23382: 4915:            continue;
    14613: 4916:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
     2440: 4917:            continue;
    16097: 4918:        if (Token::Match(tok, "%var%") && (Token::Match(tok->astParent(), "?|&&|!|%oror%") ||
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
     3924: 4919:                                           Token::Match(tok->astParent()->previous(), "if|while ("))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      151: 4920:            const ValueFlow::Value* result = proveNotEqual(tok->values(), 0);
call    0 returned 100%
call    1 returned 100%
      151: 4921:            if (!result)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      151: 4922:                continue;
    #####: 4923:            ValueFlow::Value value = *result;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 4924:            value.intvalue = 1;
    #####: 4925:            value.setKnown();
call    0 never executed
    #####: 4926:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    12022: 4927:        } else if (Token::Match(tok, "==|!=")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
      253: 4928:            MathLib::bigint val = 0;
      253: 4929:            const Token* varTok = nullptr;
      253: 4930:            if (tok->astOperand1()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
       10: 4931:                val = tok->astOperand1()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       10: 4932:                varTok = tok->astOperand2();
call    0 returned 100%
      243: 4933:            } else if (tok->astOperand2()->hasKnownIntValue()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 72% (fallthrough)
branch  5 taken 28%
      174: 4934:                val = tok->astOperand2()->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      174: 4935:                varTok = tok->astOperand1();
call    0 returned 100%
        -: 4936:            }
      253: 4937:            if (!varTok)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      322: 4938:                continue;
      184: 4939:            if (varTok->hasKnownIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 4940:                continue;
      184: 4941:            const ValueFlow::Value* result = proveNotEqual(varTok->values(), val);
call    0 returned 100%
call    1 returned 100%
      184: 4942:            if (!result)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      184: 4943:                continue;
    #####: 4944:            ValueFlow::Value value = *result;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4945:            value.intvalue = tok->str() == "!=";
call    0 never executed
call    1 never executed
    #####: 4946:            value.setKnown();
call    0 never executed
    #####: 4947:            setTokenValue(tok, value, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4948:        }
        -: 4949:    }
     1192: 4950:}
        -: 4951:
function _ZL17valueFlowForLoop1PK5TokenPiPxS3_S3_ called 35 returned 100% blocks executed 93%
       35: 4952:static bool valueFlowForLoop1(const Token *tok, int * const varid, MathLib::bigint * const num1, MathLib::bigint * const num2, MathLib::bigint * const numAfter)
        -: 4953:{
       35: 4954:    tok = tok->tokAt(2);
call    0 returned 100%
       35: 4955:    if (!Token::Match(tok, "%type%| %var% ="))
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
       13: 4956:        return false;
       22: 4957:    const Token * const vartok = Token::Match(tok, "%var% =") ? tok : tok->next();
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
call    3 returned 100%
       22: 4958:    *varid = vartok->varId();
call    0 returned 100%
       22: 4959:    tok = vartok->tokAt(2);
call    0 returned 100%
       22: 4960:    const Token * const num1tok = Token::Match(tok, "%num% ;") ? tok : nullptr;
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
       22: 4961:    if (num1tok)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       20: 4962:        *num1 = MathLib::toLongNumber(num1tok->str());
call    0 returned 100%
call    1 returned 100%
       66: 4963:    while (Token::Match(tok, "%name%|%num%|%or%|+|-|*|/|&|[|]|("))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       22: 4964:        tok = (tok->str() == "(") ? tok->link()->next() : tok->next();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
       22: 4965:    if (!tok || tok->str() != ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
        1: 4966:        return false;
       21: 4967:    tok = tok->next();
call    0 returned 100%
       21: 4968:    const Token *num2tok = nullptr;
       21: 4969:    if (Token::Match(tok, "%varid% <|<=|!=", vartok->varId())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 81% (fallthrough)
branch  3 taken 19%
       17: 4970:        tok = tok->next();
call    0 returned 100%
       17: 4971:        num2tok = tok->astOperand2();
call    0 returned 100%
       17: 4972:        if (num2tok && num2tok->str() == "(" && !num2tok->astOperand2())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 4973:            num2tok = num2tok->astOperand1();
call    0 never executed
       17: 4974:        if (!Token::Match(num2tok, "%num% ;|%oror%")) // TODO: || enlarges the scope of the condition, so it should not cause FP, but it should no lnger be part of this pattern as soon as valueFlowForLoop2 can handle an unknown RHS of || better
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
        2: 4975:            num2tok = nullptr;
        -: 4976:    }
       21: 4977:    if (!num2tok)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        6: 4978:        return false;
       15: 4979:    *num2 = MathLib::toLongNumber(num2tok->str()) - ((tok->str()=="<=") ? 0 : 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       15: 4980:    *numAfter = *num2 + 1;
       15: 4981:    if (!num1tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4982:        *num1 = *num2;
       75: 4983:    while (tok && tok->str() != ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 67% (fallthrough)
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
       30: 4984:        tok = tok->next();
call    0 returned 100%
       15: 4985:    if (!Token::Match(tok, "; %varid% ++ ) {", vartok->varId()) && !Token::Match(tok, "; ++ %varid% ) {", vartok->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
       10: 4986:        return false;
        5: 4987:    return true;
        -: 4988:}
        -: 4989:
function _ZL17valueFlowForLoop2PK5TokenPN12_GLOBAL__N_113ProgramMemoryES4_S4_ called 30 returned 100% blocks executed 82%
       30: 4990:static bool valueFlowForLoop2(const Token *tok,
        -: 4991:                              ProgramMemory *memory1,
        -: 4992:                              ProgramMemory *memory2,
        -: 4993:                              ProgramMemory *memoryAfter)
        -: 4994:{
        -: 4995:    // for ( firstExpression ; secondExpression ; thirdExpression )
       30: 4996:    const Token *firstExpression  = tok->next()->astOperand2()->astOperand1();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       30: 4997:    const Token *secondExpression = tok->next()->astOperand2()->astOperand2()->astOperand1();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       30: 4998:    const Token *thirdExpression = tok->next()->astOperand2()->astOperand2()->astOperand2();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -: 4999:
       60: 5000:    ProgramMemory programMemory;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       30: 5001:    MathLib::bigint result(0);
       30: 5002:    bool error = false;
       30: 5003:    execute(firstExpression, &programMemory, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       30: 5004:    if (error)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       15: 5005:        return false;
       15: 5006:    execute(secondExpression, &programMemory, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       15: 5007:    if (result == 0) // 2nd expression is false => no looping
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        2: 5008:        return false;
       13: 5009:    if (error) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 5010:        // If a variable is reassigned in second expression, return false
        1: 5011:        bool reassign = false;
        1: 5012:        visitAstNodes(secondExpression,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
function _ZZL17valueFlowForLoop2PK5TokenPN12_GLOBAL__N_113ProgramMemoryES4_S4_ENKUlS1_E_clES1_ called 5 returned 100% blocks executed 50%
        5: 5013:        [&](const Token *t) {
        5: 5014:            if (t->str() == "=" && t->astOperand1() && programMemory.hasValue(t->astOperand1()->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
        -: 5015:                // TODO: investigate what variable is assigned.
    #####: 5016:                reassign = true;
        5: 5017:            return reassign ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5018:        });
        1: 5019:        if (reassign)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5020:            return false;
        -: 5021:    }
        -: 5022:
       26: 5023:    ProgramMemory startMemory(programMemory);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       26: 5024:    ProgramMemory endMemory;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 5025:
       13: 5026:    int maxcount = 10000;
       61: 5027:    while (result != 0 && !error && --maxcount > 0) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 65% (fallthrough)
branch  7 taken 35%
       24: 5028:        endMemory = programMemory;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24: 5029:        execute(thirdExpression, &programMemory, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24: 5030:        if (!error)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
       13: 5031:            execute(secondExpression, &programMemory, &result, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5032:    }
        -: 5033:
       13: 5034:    memory1->swap(startMemory);
call    0 returned 100%
       13: 5035:    if (!error) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1: 5036:        memory2->swap(endMemory);
call    0 returned 100%
        1: 5037:        memoryAfter->swap(programMemory);
call    0 returned 100%
        -: 5038:    }
        -: 5039:
       13: 5040:    return true;
        -: 5041:}
        -: 5042:
function _ZL24valueFlowForLoopSimplifyP5TokenibxP9TokenListP11ErrorLoggerPK8Settings called 24 returned 100% blocks executed 19%
       24: 5043:static void valueFlowForLoopSimplify(Token * const bodyStart, const nonneg int varid, bool globalvar, const MathLib::bigint value, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 5044:{
       24: 5045:    const Token * const bodyEnd = bodyStart->link();
call    0 returned 100%
        -: 5046:
        -: 5047:    // Is variable modified inside for loop
       24: 5048:    if (isVariableChanged(bodyStart, bodyEnd, varid, globalvar, settings, tokenlist->isCPP()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        6: 5049:        return;
        -: 5050:
       74: 5051:    for (Token *tok2 = bodyStart->next(); tok2 != bodyEnd; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
call    3 returned 100%
       56: 5052:        if (tok2->varId() == varid) {
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
        6: 5053:            const Token * parent = tok2->astParent();
call    0 returned 100%
       18: 5054:            while (parent) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12: 5055:                const Token * const p = parent;
       12: 5056:                parent = parent->astParent();
call    0 returned 100%
       12: 5057:                if (!parent || parent->str() == ":")
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        6: 5058:                    break;
        6: 5059:                if (parent->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5060:                    if (parent->astOperand2() != p)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5061:                        parent = nullptr;
    #####: 5062:                    break;
        -: 5063:                }
        -: 5064:            }
        6: 5065:            if (parent) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5066:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 5067:                    bailout(tokenlist, errorLogger, tok2, "For loop variable " + tok2->str() + " stopping on ?");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 5068:                continue;
        -: 5069:            }
        -: 5070:
       12: 5071:            ValueFlow::Value value1(value);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
        6: 5072:            value1.varId = tok2->varId();
call    0 returned 100%
        6: 5073:            setTokenValue(tok2, value1, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5074:        }
        -: 5075:
       56: 5076:        if (Token::Match(tok2, "%oror%|&&")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5077:            const ProgramMemory programMemory(getProgramMemory(tok2->astTop(), varid, ValueFlow::Value(value)));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 5078:            if ((tok2->str() == "&&" && !conditionIsTrue(tok2->astOperand1(), programMemory)) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 5079:                (tok2->str() == "||" && !conditionIsFalse(tok2->astOperand1(), programMemory))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 5080:                // Skip second expression..
    #####: 5081:                const Token *parent = tok2;
    #####: 5082:                while (parent && parent->str() == tok2->str())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5083:                    parent = parent->astParent();
call    0 never executed
        -: 5084:                // Jump to end of condition
    #####: 5085:                if (parent && parent->str() == "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5086:                    tok2 = parent->link();
call    0 never executed
        -: 5087:                    // cast
    #####: 5088:                    if (Token::simpleMatch(tok2, ") ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5089:                        tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5090:                }
        -: 5091:            }
        -: 5092:
        -: 5093:        }
      168: 5094:        if ((tok2->str() == "&&" && conditionIsFalse(tok2->astOperand1(), getProgramMemory(tok2->astTop(), varid, ValueFlow::Value(value)))) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
call   22 never executed
branch 23 taken 0% (fallthrough)
branch 24 taken 100%
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
      112: 5095:            (tok2->str() == "||" && conditionIsTrue(tok2->astOperand1(), getProgramMemory(tok2->astTop(), varid, ValueFlow::Value(value)))))
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####: 5096:            break;
        -: 5097:
       56: 5098:        else if (Token::simpleMatch(tok2, ") {") && Token::findmatch(tok2->link(), "%varid%", tok2, varid)) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
        2: 5099:            if (Token::findmatch(tok2, "continue|break|return", tok2->linkAt(1), varid)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5100:                if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 5101:                    bailout(tokenlist, errorLogger, tok2, "For loop variable bailout on conditional continue|break|return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 5102:                break;
        -: 5103:            }
        2: 5104:            if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5105:                bailout(tokenlist, errorLogger, tok2, "For loop variable skipping conditional scope");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
        2: 5106:            tok2 = tok2->next()->link();
call    0 returned 100%
call    1 returned 100%
        2: 5107:            if (Token::simpleMatch(tok2, "} else {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5108:                if (Token::findmatch(tok2, "continue|break|return", tok2->linkAt(2), varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5109:                    if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 5110:                        bailout(tokenlist, errorLogger, tok2, "For loop variable bailout on conditional continue|break|return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 5111:                    break;
        -: 5112:                }
        -: 5113:
    #####: 5114:                tok2 = tok2->linkAt(2);
call    0 never executed
        -: 5115:            }
        -: 5116:        }
        -: 5117:
       54: 5118:        else if (Token::simpleMatch(tok2, ") {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5119:            if (settings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 5120:                bailout(tokenlist, errorLogger, tok2, "For loop skipping {} code");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 5121:            tok2 = tok2->linkAt(1);
call    0 never executed
    #####: 5122:            if (Token::simpleMatch(tok2, "} else {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5123:                tok2 = tok2->linkAt(2);
call    0 never executed
        -: 5124:        }
        -: 5125:    }
        -: 5126:}
        -: 5127:
function _ZL29valueFlowForLoopSimplifyAfterP5TokenixP9TokenListP11ErrorLoggerPK8Settings called 6 returned 100% blocks executed 66%
        6: 5128:static void valueFlowForLoopSimplifyAfter(Token *fortok, nonneg int varid, const MathLib::bigint num, TokenList *tokenlist, ErrorLogger *errorLogger, const Settings *settings)
        -: 5129:{
        6: 5130:    const Token *vartok = nullptr;
       22: 5131:    for (const Token *tok = fortok; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       22: 5132:        if (tok->varId() == varid) {
call    0 returned 100%
branch  1 taken 27% (fallthrough)
branch  2 taken 73%
        6: 5133:            vartok = tok;
        6: 5134:            break;
        -: 5135:        }
        -: 5136:    }
        6: 5137:    if (!vartok || !vartok->variable())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 5138:        return;
        -: 5139:
        6: 5140:    const Variable *var = vartok->variable();
call    0 returned 100%
        6: 5141:    const Token *endToken = nullptr;
        6: 5142:    if (var->isLocal())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        6: 5143:        endToken = var->typeStartToken()->scope()->bodyEnd;
call    0 returned 100%
call    1 returned 100%
        -: 5144:    else
    #####: 5145:        endToken = fortok->scope()->bodyEnd;
call    0 never executed
        -: 5146:
       12: 5147:    std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        6: 5148:    values.emplace_back(num);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 5149:    values.back().errorPath.emplace_back(fortok,"After for loop, " + var->name() + " has value " + values.back().infoString());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        -: 5150:
        6: 5151:    valueFlowForwardVariable(
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 never executed
        -: 5152:        fortok->linkAt(1)->linkAt(1)->next(), endToken, var, varid, values, false, false, tokenlist, errorLogger, settings);
        -: 5153:}
        -: 5154:
function _ZL16valueFlowForLoopP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 84%
     1192: 5155:static void valueFlowForLoop(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 5156:{
     4620: 5157:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     3428: 5158:        if (scope.type != Scope::eFor)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     6781: 5159:            continue;
        -: 5160:
       40: 5161:        Token* tok = const_cast<Token*>(scope.classDef);
       40: 5162:        Token* const bodyStart = const_cast<Token*>(scope.bodyStart);
        -: 5163:
       75: 5164:        if (!Token::simpleMatch(tok->next()->astOperand2(), ";") ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 88% (fallthrough)
branch  6 taken 13%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 13% (fallthrough)
branch 10 taken 88%
       35: 5165:            !Token::simpleMatch(tok->next()->astOperand2()->astOperand2(), ";"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5: 5166:            continue;
        -: 5167:
       35: 5168:        int varid(0);
       35: 5169:        MathLib::bigint num1(0), num2(0), numAfter(0);
        -: 5170:
       35: 5171:        if (valueFlowForLoop1(tok, &varid, &num1, &num2, &numAfter)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
        5: 5172:            if (num1 <= num2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5: 5173:                valueFlowForLoopSimplify(bodyStart, varid, false, num1, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 5174:                valueFlowForLoopSimplify(bodyStart, varid, false, num2, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 5175:                valueFlowForLoopSimplifyAfter(tok, varid, numAfter, tokenlist, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5176:            } else
    #####: 5177:                valueFlowForLoopSimplifyAfter(tok, varid, num1, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5178:        } else {
       60: 5179:            ProgramMemory mem1, mem2, memAfter;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 never executed
       30: 5180:            if (valueFlowForLoop2(tok, &mem1, &mem2, &memAfter)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 43% (fallthrough)
branch  4 taken 57%
       26: 5181:                std::map<int, ValueFlow::Value>::const_iterator it;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       26: 5182:                for (it = mem1.values.begin(); it != mem1.values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
       13: 5183:                    if (!it->second.isIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5184:                        continue;
       13: 5185:                    valueFlowForLoopSimplify(bodyStart, it->first, false, it->second.intvalue, tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 5186:                }
       14: 5187:                for (it = mem2.values.begin(); it != mem2.values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 7% (fallthrough)
branch  9 taken 93%
call   10 returned 100%
        1: 5188:                    if (!it->second.isIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5189:                        continue;
        1: 5190:                    valueFlowForLoopSimplify(bodyStart, it->first, false, it->second.intvalue, tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 5191:                }
       14: 5192:                for (it = memAfter.values.begin(); it != memAfter.values.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 7% (fallthrough)
branch  9 taken 93%
call   10 returned 100%
        1: 5193:                    if (!it->second.isIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5194:                        continue;
        1: 5195:                    valueFlowForLoopSimplifyAfter(tok, it->first, it->second.intvalue, tokenlist, errorLogger, settings);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 5196:                }
        -: 5197:            }
        -: 5198:        }
        -: 5199:    }
     1192: 5200:}
        -: 5201:
function _ZL24valueFlowInjectParameterP9TokenListP11ErrorLoggerPK8SettingsPK8VariablePK5ScopeRKNSt7__debug4listIN9ValueFlow5ValueESaISF_EEE called 18 returned 100% blocks executed 86%
       18: 5202:static void valueFlowInjectParameter(TokenList* tokenlist, ErrorLogger* errorLogger, const Settings* settings, const Variable* arg, const Scope* functionScope, const std::list<ValueFlow::Value>& argvalues)
        -: 5203:{
        -: 5204:    // Is argument passed by value or const reference, and is it a known non-class type?
       18: 5205:    if (arg->isReference() && !arg->isConst() && !arg->isClass())
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 39% (fallthrough)
branch 10 taken 61%
        7: 5206:        return;
        -: 5207:
        -: 5208:    // Set value in function scope..
       11: 5209:    const int varid2 = arg->declarationId();
call    0 returned 100%
       11: 5210:    if (!varid2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5211:        return;
        -: 5212:
       22: 5213:    valueFlowForwardVariable(const_cast<Token*>(functionScope->bodyStart->next()),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
       11: 5214:                             functionScope->bodyEnd,
        -: 5215:                             arg,
        -: 5216:                             varid2,
        -: 5217:                             argvalues,
        -: 5218:                             false,
        -: 5219:                             true,
        -: 5220:                             tokenlist,
        -: 5221:                             errorLogger,
        -: 5222:                             settings);
        -: 5223:}
        -: 5224:
function _ZL23valueFlowSwitchVariableP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 48%
     1192: 5225:static void valueFlowSwitchVariable(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 5226:{
     4620: 5227:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     3428: 5228:        if (scope.type != Scope::ScopeType::eSwitch)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     3323: 5229:            continue;
      105: 5230:        if (!Token::Match(scope.classDef, "switch ( %var% ) {"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 70% (fallthrough)
branch  4 taken 30%
       73: 5231:            continue;
       32: 5232:        const Token *vartok = scope.classDef->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       32: 5233:        const Variable *var = vartok->variable();
call    0 returned 100%
       32: 5234:        if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5235:            continue;
        -: 5236:
        -: 5237:        // bailout: global non-const variables
       33: 5238:        if (!(var->isLocal() || var->isArgument()) && !var->isConst()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 81% (fallthrough)
branch  4 taken 19%
call    5 returned 100%
branch  6 taken 4% (fallthrough)
branch  7 taken 96%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 3% (fallthrough)
branch 12 taken 97%
        1: 5239:            if (settings->debugwarnings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5240:                bailout(tokenlist, errorLogger, vartok, "switch variable " + var->name() + " is global");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        1: 5241:            continue;
        -: 5242:        }
        -: 5243:
      598: 5244:        for (Token *tok = scope.bodyStart->next(); tok != scope.bodyEnd; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
      570: 5245:            if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        3: 5246:                tok = tok->link();
call    0 returned 100%
        3: 5247:                continue;
        -: 5248:            }
      564: 5249:            if (Token::Match(tok, "case %num% :")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
      108: 5250:                std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       54: 5251:                values.emplace_back(MathLib::toLongNumber(tok->next()->str()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 never executed
       54: 5252:                values.back().condition = tok;
call    0 returned 100%
      108: 5253:                const std::string info("case " + tok->next()->str() + ": " + vartok->str() + " is " + tok->next()->str() + " here.");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
call   28 returned 100%
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
       54: 5254:                values.back().errorPath.emplace_back(tok, info);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       54: 5255:                bool known = false;
       54: 5256:                if ((Token::simpleMatch(tok->previous(), "{") || Token::simpleMatch(tok->tokAt(-2), "break ;")) && !Token::Match(tok->tokAt(3), ";| case"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 17% (fallthrough)
branch 13 taken 83%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
branch 20 taken 100% (fallthrough)
branch 21 taken 0%
branch 22 taken 63% (fallthrough)
branch 23 taken 37%
       34: 5257:                    known = true;
       54: 5258:                while (Token::Match(tok->tokAt(3), ";| case %num% :")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5259:                    known = false;
    #####: 5260:                    tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5261:                    if (!tok->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5262:                        tok = tok->next();
call    0 never executed
    #####: 5263:                    values.emplace_back(MathLib::toLongNumber(tok->next()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 5264:                    values.back().condition = tok;
call    0 never executed
    #####: 5265:                    const std::string info2("case " + tok->next()->str() + ": " + vartok->str() + " is " + tok->next()->str() + " here.");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
    #####: 5266:                    values.back().errorPath.emplace_back(tok, info2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5267:                }
      108: 5268:                for (std::list<ValueFlow::Value>::const_iterator val = values.begin(); val != values.end(); ++val) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
      108: 5269:                    valueFlowReverse(tokenlist,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
       54: 5270:                                     const_cast<Token*>(scope.classDef),
        -: 5271:                                     vartok,
       54: 5272:                                     *val,
call    0 returned 100%
      108: 5273:                                     ValueFlow::Value(),
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 5274:                                     errorLogger,
        -: 5275:                                     settings);
        -: 5276:                }
       54: 5277:                if (vartok->variable()->scope()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       54: 5278:                    if (known)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
       34: 5279:                        values.back().setKnown();
call    0 returned 100%
call    1 returned 100%
        -: 5280:
        -: 5281:                    // FIXME We must check if there is a return. See #9276
        -: 5282:                    /*
        -: 5283:                    valueFlowForwardVariable(tok->tokAt(3),
        -: 5284:                                             vartok->variable()->scope()->bodyEnd,
        -: 5285:                                             vartok->variable(),
        -: 5286:                                             vartok->varId(),
        -: 5287:                                             values,
        -: 5288:                                             values.back().isKnown(),
        -: 5289:                                             false,
        -: 5290:                                             tokenlist,
        -: 5291:                                             errorLogger,
        -: 5292:                                             settings);
        -: 5293:                    */
        -: 5294:                }
        -: 5295:            }
        -: 5296:        }
        -: 5297:    }
     1192: 5298:}
        -: 5299:
function _ZL14setTokenValuesP5TokenRKNSt7__debug4listIN9ValueFlow5ValueESaIS4_EEEPK8Settings called 4 returned 100% blocks executed 78%
        4: 5300:static void setTokenValues(Token *tok, const std::list<ValueFlow::Value> &values, const Settings *settings)
        -: 5301:{
        8: 5302:    for (const ValueFlow::Value &value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 5303:        if (value.isIntValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4: 5304:            setTokenValue(tok, value, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5305:    }
        4: 5306:}
        -: 5307:
function _ZL8evaluatePK5TokenRKNSt7__debug6vectorINS2_4listIN9ValueFlow5ValueESaIS6_EEESaIS8_EEEPS8_ called 14 returned 100% blocks executed 49%
       14: 5308:static bool evaluate(const Token *expr, const std::vector<std::list<ValueFlow::Value>> &values, std::list<ValueFlow::Value> *result)
        -: 5309:{
       14: 5310:    if (!expr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5311:        return false;
        -: 5312:
        -: 5313:    // strlen(arg)..
       14: 5314:    if (expr->str() == "(" && Token::Match(expr->previous(), "strlen ( %name% )")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 14% (fallthrough)
branch  9 taken 86%
        2: 5315:        const Token *arg = expr->next();
call    0 returned 100%
        2: 5316:        if (arg->str().compare(0,3,"arg") != 0 || arg->str().size() != 4)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5317:            return false;
        2: 5318:        const char n = arg->str()[3];
call    0 returned 100%
call    1 returned 100%
        2: 5319:        if (n < '1' || n - '1' >= values.size())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 5320:            return false;
        4: 5321:        for (const ValueFlow::Value &argvalue : values[n - '1']) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
        2: 5322:            if (argvalue.isTokValue() && argvalue.tokvalue->tokType() == Token::eString) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        4: 5323:                ValueFlow::Value res(argvalue); // copy all "inconclusive", "condition", etc attributes
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 5324:                // set return value..
        2: 5325:                res.valueType = ValueFlow::Value::INT;
        2: 5326:                res.tokvalue = nullptr;
        2: 5327:                res.intvalue = Token::getStrLength(argvalue.tokvalue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 5328:                result->emplace_back(std::move(res));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5329:            }
        -: 5330:        }
        2: 5331:        return !result->empty();
call    0 returned 100%
        -: 5332:    }
        -: 5333:
        -: 5334:    // unary operands
       12: 5335:    if (expr->astOperand1() && !expr->astOperand2()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
branch  6 taken 17% (fallthrough)
branch  7 taken 83%
        4: 5336:        std::list<ValueFlow::Value> opvalues;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        2: 5337:        if (!evaluate(expr->astOperand1(), values, &opvalues))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5338:            return false;
        2: 5339:        if (expr->str() == "+") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5340:            result->swap(opvalues);
call    0 never executed
    #####: 5341:            return true;
        -: 5342:        }
        2: 5343:        if (expr->str() == "-") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 5344:            for (ValueFlow::Value v: opvalues) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
        2: 5345:                if (v.isIntValue()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 5346:                    v.intvalue = -v.intvalue;
        2: 5347:                    result->emplace_back(std::move(v));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5348:                }
        -: 5349:            }
        2: 5350:            return true;
        -: 5351:        }
    #####: 5352:        return false;
        -: 5353:    }
        -: 5354:    // binary/ternary operands
       10: 5355:    if (expr->astOperand1() && expr->astOperand2()) {
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 40% (fallthrough)
branch  7 taken 60%
        8: 5356:        std::list<ValueFlow::Value> lhsValues, rhsValues;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
call    6 never executed
        4: 5357:        if (!evaluate(expr->astOperand1(), values, &lhsValues))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5358:            return false;
        4: 5359:        if (expr->str() != "?" && !evaluate(expr->astOperand2(), values, &rhsValues))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 5360:            return false;
        -: 5361:
        8: 5362:        for (const ValueFlow::Value &val1 : lhsValues) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
        4: 5363:            if (!val1.isIntValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5364:                continue;
        4: 5365:            if (expr->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2: 5366:                rhsValues.clear();
call    0 returned 100%
        2: 5367:                const Token *expr2 = val1.intvalue ? expr->astOperand2()->astOperand1() : expr->astOperand2()->astOperand2();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 returned 100%
call    5 returned 100%
        2: 5368:                if (!evaluate(expr2, values, &rhsValues))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5369:                    continue;
        2: 5370:                result->insert(result->end(), rhsValues.begin(), rhsValues.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        2: 5371:                continue;
        -: 5372:            }
        -: 5373:
        4: 5374:            for (const ValueFlow::Value &val2 : rhsValues) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
        2: 5375:                if (!val2.isIntValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5376:                    continue;
        -: 5377:
        2: 5378:                if (val1.varId != 0 && val2.varId != 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 5379:                    if (val1.varId != val2.varId || val1.varvalue != val2.varvalue)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5380:                        continue;
        -: 5381:                }
        -: 5382:
        2: 5383:                if (expr->str() == "+")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5384:                    result->emplace_back(ValueFlow::Value(val1.intvalue + val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5385:                else if (expr->str() == "-")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5386:                    result->emplace_back(ValueFlow::Value(val1.intvalue - val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5387:                else if (expr->str() == "*")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5388:                    result->emplace_back(ValueFlow::Value(val1.intvalue * val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5389:                else if (expr->str() == "/" && val2.intvalue != 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5390:                    result->emplace_back(ValueFlow::Value(val1.intvalue / val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5391:                else if (expr->str() == "%" && val2.intvalue != 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5392:                    result->emplace_back(ValueFlow::Value(val1.intvalue % val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5393:                else if (expr->str() == "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5394:                    result->emplace_back(ValueFlow::Value(val1.intvalue & val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5395:                else if (expr->str() == "|")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5396:                    result->emplace_back(ValueFlow::Value(val1.intvalue | val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5397:                else if (expr->str() == "^")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5398:                    result->emplace_back(ValueFlow::Value(val1.intvalue ^ val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5399:                else if (expr->str() == "==")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5400:                    result->emplace_back(ValueFlow::Value(val1.intvalue == val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5401:                else if (expr->str() == "!=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5402:                    result->emplace_back(ValueFlow::Value(val1.intvalue != val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5403:                else if (expr->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5404:                    result->emplace_back(ValueFlow::Value(val1.intvalue < val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        2: 5405:                else if (expr->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 5406:                    result->emplace_back(ValueFlow::Value(val1.intvalue > val2.intvalue));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
    #####: 5407:                else if (expr->str() == ">=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5408:                    result->emplace_back(ValueFlow::Value(val1.intvalue >= val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5409:                else if (expr->str() == "<=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5410:                    result->emplace_back(ValueFlow::Value(val1.intvalue <= val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5411:                else if (expr->str() == "&&")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5412:                    result->emplace_back(ValueFlow::Value(val1.intvalue && val2.intvalue));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 5413:                else if (expr->str() == "||")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5414:                    result->emplace_back(ValueFlow::Value(val1.intvalue || val2.intvalue));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 5415:                else if (expr->str() == "<<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5416:                    result->emplace_back(ValueFlow::Value(val1.intvalue << val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5417:                else if (expr->str() == ">>")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5418:                    result->emplace_back(ValueFlow::Value(val1.intvalue >> val2.intvalue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 5419:                else
    #####: 5420:                    return false;
        2: 5421:                combineValueProperties(val1, val2, &result->back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5422:            }
        -: 5423:        }
        4: 5424:        return !result->empty();
call    0 returned 100%
        -: 5425:    }
        6: 5426:    if (expr->str().compare(0,3,"arg")==0) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        4: 5427:        *result = values[expr->str()[3] - '1'];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4: 5428:        return true;
        -: 5429:    }
        2: 5430:    if (expr->isNumber()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 5431:        result->emplace_back(ValueFlow::Value(MathLib::toLongNumber(expr->str())));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
call    8 never executed
        2: 5432:        result->back().setKnown();
call    0 returned 100%
call    1 returned 100%
        2: 5433:        return true;
    #####: 5434:    } else if (expr->tokType() == Token::eChar) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5435:        result->emplace_back(ValueFlow::Value(MathLib::toLongNumber(expr->str())));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5436:        result->back().setKnown();
call    0 never executed
call    1 never executed
    #####: 5437:        return true;
        -: 5438:    }
    #####: 5439:    return false;
        -: 5440:}
        -: 5441:
function _ZL25getFunctionArgumentValuesPK5Token called 812 returned 100% blocks executed 84%
      812: 5442:static std::list<ValueFlow::Value> getFunctionArgumentValues(const Token *argtok)
        -: 5443:{
      812: 5444:    std::list<ValueFlow::Value> argvalues(argtok->values());
call    0 returned 100%
call    1 returned 100%
      812: 5445:    removeImpossible(argvalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      812: 5446:    if (argvalues.empty() && Token::Match(argtok, "%comp%|%oror%|&&|!")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        7: 5447:        argvalues.emplace_back(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7: 5448:        argvalues.emplace_back(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        -: 5449:    }
      812: 5450:    return argvalues;
        -: 5451:}
        -: 5452:
function _ZL24valueFlowLibraryFunctionP5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK8Settings called 14 returned 100% blocks executed 69%
       14: 5453:static void valueFlowLibraryFunction(Token *tok, const std::string &returnValue, const Settings *settings)
        -: 5454:{
       18: 5455:    std::vector<std::list<ValueFlow::Value>> argValues;
call    0 returned 100%
call    1 never executed
       18: 5456:    for (const Token *argtok : getArguments(tok->previous())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 78% (fallthrough)
branch  8 taken 22%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 29%
branch 13 taken 71%
call   14 returned 100%
branch 15 taken 29%
branch 16 taken 71%
call   17 returned 100%
branch 18 taken 29%
branch 19 taken 71%
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
       14: 5457:        argValues.emplace_back(getFunctionArgumentValues(argtok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
       14: 5458:        if (argValues.back().empty())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 71% (fallthrough)
branch  3 taken 29%
       10: 5459:            return;
        -: 5460:    }
        4: 5461:    if (returnValue.find("arg") != std::string::npos && argValues.empty())
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5462:        return;
        -: 5463:
        8: 5464:    TokenList tokenList(settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 29%
branch  5 taken 71%
call    6 never executed
        -: 5465:    {
        8: 5466:        const std::string code = "return " + returnValue + ";";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        8: 5467:        std::istringstream istr(code);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
        4: 5468:        if (!tokenList.createTokens(istr))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5469:            return;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 5470:    }
        -: 5471:
        -: 5472:    // combine operators, set links, etc..
        8: 5473:    std::stack<Token *> lpar;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
       36: 5474:    for (Token *tok2 = tokenList.front(); tok2; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
       32: 5475:        if (Token::Match(tok2, "[!<>=] =")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5476:            tok2->str(tok2->str() + "=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 5477:            tok2->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
       32: 5478:        } else if (tok2->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        2: 5479:            lpar.push(tok2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       30: 5480:        else if (tok2->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        2: 5481:            if (lpar.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5482:                return;
        2: 5483:            Token::createMutualLinks(lpar.top(), tok2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 5484:            lpar.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5485:        }
        -: 5486:    }
        4: 5487:    if (!lpar.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5488:        return;
        -: 5489:
        -: 5490:    // Evaluate expression
        4: 5491:    tokenList.createAst();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8: 5492:    std::list<ValueFlow::Value> results;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0%
call    5 never executed
        4: 5493:    if (evaluate(tokenList.front()->astOperand1(), argValues, &results))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        4: 5494:        setTokenValues(tok, results, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5495:}
        -: 5496:
function _ZL20valueFlowSubFunctionP9TokenListP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 63%
     1192: 5497:static void valueFlowSubFunction(TokenList* tokenlist, ErrorLogger* errorLogger, const Settings* settings)
        -: 5498:{
    39187: 5499:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37995: 5500:        if (!Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 91% (fallthrough)
branch  4 taken 9%
    71239: 5501:            continue;
        -: 5502:
     3377: 5503:        const Function * const calledFunction = tok->function();
call    0 returned 100%
     3377: 5504:        if (!calledFunction) {
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 5505:            // library function?
     1490: 5506:            const std::string& returnValue(settings->library.returnValue(tok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1490: 5507:            if (!returnValue.empty())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       14: 5508:                valueFlowLibraryFunction(tok->next(), returnValue, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1490: 5509:            continue;
        -: 5510:        }
        -: 5511:
     1887: 5512:        const Scope * const calledFunctionScope = calledFunction->functionScope;
     1887: 5513:        if (!calledFunctionScope)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      513: 5514:            continue;
        -: 5515:
        -: 5516:        // TODO: Rewrite this. It does not work well to inject 1 argument at a time.
     2748: 5517:        const std::vector<const Token *> &callArguments = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     2160: 5518:        for (int argnr = 0U; argnr < callArguments.size(); ++argnr) {
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
      798: 5519:            const Token *argtok = callArguments[argnr];
call    0 returned 100%
        -: 5520:            // Get function argument
      798: 5521:            const Variable * const argvar = calledFunction->getArgumentVar(argnr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      798: 5522:            if (!argvar)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12: 5523:                break;
        -: 5524:
        -: 5525:            // passing value(s) to function
      798: 5526:            std::list<ValueFlow::Value> argvalues(getFunctionArgumentValues(argtok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        -: 5527:
        -: 5528:            // Don't forward lifetime values
      798: 5529:            argvalues.remove_if(std::mem_fn(&ValueFlow::Value::isLifetimeValue));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5530:
        -: 5531:            // Don't forward <Uninit> values, this is handled by CTU. We also had a FP #9347
      798: 5532:            argvalues.remove_if(std::mem_fn(&ValueFlow::Value::isUninitValue));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5533:
      798: 5534:            if (argvalues.empty())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      786: 5535:                continue;
        -: 5536:
        -: 5537:            // Error path..
       31: 5538:            for (ValueFlow::Value &v : argvalues) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 61% (fallthrough)
branch  4 taken 39%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       38: 5539:                const std::string nr = MathLib::toString(argnr + 1) + getOrdinalText(argnr + 1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
        -: 5540:
       38: 5541:                v.errorPath.emplace_back(argtok,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       38: 5542:                                         "Calling function '" +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       57: 5543:                                         calledFunction->name() +
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       38: 5544:                                         "', " +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       38: 5545:                                         nr +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       38: 5546:                                         " argument '" +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       76: 5547:                                         argtok->expressionString() +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
       38: 5548:                                         "' value is " +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       38: 5549:                                         v.infoString());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 5550:            }
        -: 5551:
        -: 5552:            // passed values are not "known"..
       12: 5553:            lowerToPossible(argvalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5554:
       12: 5555:            valueFlowInjectParameter(tokenlist, errorLogger, settings, argvar, calledFunctionScope, argvalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5556:            // FIXME: We need to rewrite the valueflow analysis to better handle multiple arguments
       12: 5557:            if (!argvalues.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       12: 5558:                break;
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 2%
branch  3 taken 98%
        -: 5559:        }
        -: 5560:    }
     1192: 5561:}
call    0 never executed
        -: 5562:
function _ZL33valueFlowFunctionDefaultParameterP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 79%
     1192: 5563:static void valueFlowFunctionDefaultParameter(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 5564:{
     1192: 5565:    if (!tokenlist->isCPP())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       26: 5566:        return;
        -: 5567:
     2398: 5568:    for (const Scope* scope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     1232: 5569:        const Function* function = scope->function;
     1232: 5570:        if (!function)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4: 5571:            continue;
     1246: 5572:        for (std::size_t arg = function->minArgCount(); arg < function->argCount(); arg++) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       18: 5573:            const Variable* var = function->getArgumentVar(arg);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18: 5574:            if (var && var->hasDefault() && Token::Match(var->nameToken(), "%var% = %num%|%str% [,)]")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 39% (fallthrough)
branch  4 taken 61%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 86% (fallthrough)
branch 10 taken 14%
branch 11 taken 33% (fallthrough)
branch 12 taken 67%
        6: 5575:                const std::list<ValueFlow::Value> &values = var->nameToken()->tokAt(2)->values();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
       12: 5576:                std::list<ValueFlow::Value> argvalues;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       12: 5577:                for (const ValueFlow::Value &value : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       12: 5578:                    ValueFlow::Value v(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        6: 5579:                    v.defaultArg = true;
        6: 5580:                    v.changeKnownToPossible();
call    0 returned 100%
        6: 5581:                    if (v.isPossible())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 5582:                        argvalues.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5583:                }
        6: 5584:                if (!argvalues.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 5585:                    valueFlowInjectParameter(tokenlist, errorLogger, settings, var, scope, argvalues);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5586:            }
        -: 5587:        }
        -: 5588:    }
        -: 5589:}
        -: 5590:
function _ZL7isKnownPK5Token called 790 returned 100% blocks executed 100%
      790: 5591:static bool isKnown(const Token * tok)
        -: 5592:{
      790: 5593:    return tok && tok->hasKnownIntValue();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        -: 5594:}
        -: 5595:
function _ZL23valueFlowFunctionReturnP9TokenListP11ErrorLogger called 956 returned 100% blocks executed 52%
      956: 5596:static void valueFlowFunctionReturn(TokenList *tokenlist, ErrorLogger *errorLogger)
        -: 5597:{
    29888: 5598:    for (Token *tok = tokenlist->back(); tok; tok = tok->previous()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 5599:        if (tok->str() != "(" || !tok->astOperand1() || !tok->astOperand1()->function())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
call    4 returned 100%
branch  5 taken 94% (fallthrough)
branch  6 taken 6%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 47% (fallthrough)
branch 10 taken 53%
branch 11 taken 95% (fallthrough)
branch 12 taken 5%
    56434: 5600:            continue;
        -: 5601:
     1389: 5602:        if (tok->hasKnownValue())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5603:            continue;
        -: 5604:
        -: 5605:        // Arguments..
     1430: 5606:        std::vector<MathLib::bigint> parvalues;
call    0 returned 100%
call    1 never executed
     1389: 5607:        if (tok->astOperand2()) {
call    0 returned 100%
branch  1 taken 49% (fallthrough)
branch  2 taken 51%
      674: 5608:            const Token *partok = tok->astOperand2();
call    0 returned 100%
      678: 5609:            while (partok && partok->str() == "," && isKnown(partok->astOperand2()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        2: 5610:                partok = partok->astOperand1();
call    0 returned 100%
      674: 5611:            if (!isKnown(partok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
      659: 5612:                continue;
       15: 5613:            parvalues.push_back(partok->values().front().intvalue);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       15: 5614:            partok = partok->astParent();
call    0 returned 100%
       17: 5615:            while (partok && partok->str() == ",") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
        1: 5616:                parvalues.push_back(partok->astOperand2()->values().front().intvalue);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1: 5617:                partok = partok->astParent();
call    0 returned 100%
        -: 5618:            }
       15: 5619:            if (partok != tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5620:                continue;
        -: 5621:        }
        -: 5622:
        -: 5623:        // Get scope and args of function
      730: 5624:        const Function * const function = tok->astOperand1()->function();
call    0 returned 100%
call    1 returned 100%
      730: 5625:        const Scope * const functionScope = function->functionScope;
     1419: 5626:        if (!functionScope || !Token::simpleMatch(functionScope->bodyStart, "{ return")) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 92% (fallthrough)
branch  6 taken 8%
branch  7 taken 94% (fallthrough)
branch  8 taken 6%
      689: 5627:            if (functionScope && tokenlist->getSettings()->debugwarnings && Token::findsimplematch(functionScope->bodyStart, "return", functionScope->bodyEnd))
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 5628:                bailout(tokenlist, errorLogger, tok, "function return; nontrivial function body");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
      689: 5629:            continue;
        -: 5630:        }
        -: 5631:
       82: 5632:        ProgramMemory programMemory;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3%
branch  3 taken 97%
call    4 never executed
       41: 5633:        for (std::size_t i = 0; i < parvalues.size(); ++i) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5634:            const Variable * const arg = function->getArgumentVar(i);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5635:            if (!arg || !Token::Match(arg->typeStartToken(), "%type% %name% ,|)")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5636:                if (tokenlist->getSettings()->debugwarnings)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5637:                    bailout(tokenlist, errorLogger, tok, "function return; unhandled argument type");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
    #####: 5638:                programMemory.clear();
call    0 never executed
    #####: 5639:                break;
        -: 5640:            }
    #####: 5641:            programMemory.setIntValue(arg->declarationId(), parvalues[i]);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5642:        }
       41: 5643:        if (programMemory.empty() && !parvalues.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5644:            continue;
        -: 5645:
        -: 5646:        // Determine return value of subfunction..
       41: 5647:        MathLib::bigint result = 0;
       41: 5648:        bool error = false;
       41: 5649:        execute(functionScope->bodyStart->next()->astOperand1(),
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 5650:                &programMemory,
        -: 5651:                &result,
        -: 5652:                &error);
       41: 5653:        if (!error) {
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       18: 5654:            ValueFlow::Value v(result);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0%
call    5 never executed
        9: 5655:            if (function->hasVirtualSpecifier())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5656:                v.setPossible();
call    0 never executed
        -: 5657:            else
        9: 5658:                v.setKnown();
call    0 returned 100%
        9: 5659:            setTokenValue(tok, v, tokenlist->getSettings());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5660:        }
        -: 5661:    }
      956: 5662:}
        -: 5663:
function _ZL15valueFlowUninitP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 92%
     1192: 5664:static void valueFlowUninit(TokenList *tokenlist, SymbolDatabase * /*symbolDatabase*/, ErrorLogger *errorLogger, const Settings *settings)
        -: 5665:{
    39187: 5666:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37995: 5667:        if (!Token::Match(tok,"[;{}] %type%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 90% (fallthrough)
branch  4 taken 10%
    72222: 5668:            continue;
     3694: 5669:        if (!tok->scope()->isExecutable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
      816: 5670:            continue;
     2878: 5671:        const Token *vardecl = tok->next();
call    0 returned 100%
     2878: 5672:        bool stdtype = false;
     2878: 5673:        bool pointer = false;
     9574: 5674:        while (Token::Match(vardecl, "%name%|::|*") && vardecl->varId() == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 70% (fallthrough)
branch  4 taken 30%
call    5 returned 100%
branch  6 taken 77% (fallthrough)
branch  7 taken 23%
branch  8 taken 54% (fallthrough)
branch  9 taken 46%
     3348: 5675:            stdtype |= vardecl->isStandardType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     3348: 5676:            pointer |= vardecl->str() == "*";
call    0 returned 100%
call    1 returned 100%
     3348: 5677:            vardecl = vardecl->next();
call    0 returned 100%
        -: 5678:        }
        -: 5679:        // if (!stdtype && !pointer)
        -: 5680:        // continue;
     2878: 5681:        if (!Token::Match(vardecl, "%var% ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 71% (fallthrough)
branch  4 taken 29%
     2043: 5682:            continue;
      835: 5683:        if (Token::Match(vardecl, "%varid% ; %varid% =", vardecl->varId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 77% (fallthrough)
branch  5 taken 23%
      639: 5684:            continue;
      196: 5685:        const Variable *var = vardecl->variable();
call    0 returned 100%
      196: 5686:        if (!var || var->nameToken() != vardecl)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 22% (fallthrough)
branch  4 taken 78%
branch  5 taken 22% (fallthrough)
branch  6 taken 78%
       43: 5687:            continue;
      584: 5688:        if ((!var->isPointer() && var->type() && var->type()->needInitialization != Type::NeedInitialization::True) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 93% (fallthrough)
branch  8 taken 7%
branch  9 taken 22% (fallthrough)
branch 10 taken 78%
      413: 5689:            !var->isLocal() || var->isStatic() || var->isExtern() || var->isReference() || var->isThrow())
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
       34: 5690:            continue;
      119: 5691:        if (!var->type() && !stdtype && !pointer)
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
branch  3 taken 45% (fallthrough)
branch  4 taken 55%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 38% (fallthrough)
branch  8 taken 62%
       45: 5692:            continue;
        -: 5693:
      148: 5694:        ValueFlow::Value uninitValue;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       74: 5695:        uninitValue.setKnown();
call    0 returned 100%
       74: 5696:        uninitValue.valueType = ValueFlow::Value::UNINIT;
       74: 5697:        uninitValue.tokvalue = vardecl;
      148: 5698:        std::list<ValueFlow::Value> values;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       74: 5699:        values.push_back(uninitValue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5700:
       74: 5701:        const bool constValue = true;
       74: 5702:        const bool subFunction = false;
        -: 5703:
      148: 5704:        valueFlowForwardVariable(vardecl->next(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
       74: 5705:                                 vardecl->scope()->bodyEnd,
call    0 returned 100%
        -: 5706:                                 var,
        -: 5707:                                 vardecl->varId(),
        -: 5708:                                 values,
        -: 5709:                                 constValue,
        -: 5710:                                 subFunction,
        -: 5711:                                 tokenlist,
        -: 5712:                                 errorLogger,
        -: 5713:                                 settings);
        -: 5714:    }
     1192: 5715:}
        -: 5716:
function _ZL21hasContainerSizeGuardPK5Tokeni called 2 returned 100% blocks executed 54%
        4: 5717:static bool hasContainerSizeGuard(const Token *tok, nonneg int containerId)
        -: 5718:{
        6: 5719:    for (; tok && tok->astParent(); tok = tok->astParent()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
call    7 returned 100%
        2: 5720:        const Token *parent = tok->astParent();
call    0 returned 100%
        2: 5721:        if (tok != parent->astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4: 5722:            continue;
    #####: 5723:        if (!Token::Match(parent, "%oror%|&&|?"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5724:            continue;
        -: 5725:        // is container found in lhs?
    #####: 5726:        bool found = false;
    #####: 5727:        visitAstNodes(parent->astOperand1(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
function _ZZL21hasContainerSizeGuardPK5TokeniENKUlS1_E_clES1_ called 0 returned 0% blocks executed 0%
    #####: 5728:        [&](const Token *t) {
    #####: 5729:            if (t->varId() == containerId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5730:                found = true;
    #####: 5731:            return found ? ChildrenToVisit::done : ChildrenToVisit::op1_and_op2;
branch  0 never executed
branch  1 never executed
        -: 5732:        });
    #####: 5733:        if (found)
branch  0 never executed
branch  1 never executed
    #####: 5734:            return true;
        -: 5735:    }
        2: 5736:    return false;
        -: 5737:}
        -: 5738:
function _ZL15isContainerSizePK5Token called 382 returned 100% blocks executed 18%
      382: 5739:static bool isContainerSize(const Token* tok)
        -: 5740:{
      382: 5741:    if (!Token::Match(tok, "%var% . %name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      382: 5742:        return false;
    #####: 5743:    if (!astIsContainer(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5744:        return false;
    #####: 5745:    if (tok->valueType()->container && tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::SIZE)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5746:        return true;
    #####: 5747:    if (Token::Match(tok->tokAt(2), "size|length ( )"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5748:        return true;
    #####: 5749:    return false;
        -: 5750:}
        -: 5751:
function _ZL16isContainerEmptyPK5Token called 693 returned 100% blocks executed 86%
      693: 5752:static bool isContainerEmpty(const Token* tok)
        -: 5753:{
      693: 5754:    if (!Token::Match(tok, "%var% . %name% ("))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
      672: 5755:        return false;
       21: 5756:    if (!astIsContainer(tok))
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
       19: 5757:        return false;
        2: 5758:    if (tok->valueType()->container && tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::EMPTY)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5759:        return true;
        2: 5760:    if (Token::simpleMatch(tok->tokAt(2), "empty ( )"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5761:        return true;
        2: 5762:    return false;
        -: 5763:}
        -: 5764:
        -: 5765:static bool isContainerSizeChanged(nonneg int varId, const Token *start, const Token *end, int depth = 20);
        -: 5766:
function _ZL32isContainerSizeChangedByFunctionPK5Tokeni called 4 returned 100% blocks executed 48%
        4: 5767:static bool isContainerSizeChangedByFunction(const Token *tok, int depth = 20)
        -: 5768:{
        4: 5769:    if (!tok->valueType() || !tok->valueType()->container)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5770:        return false;
        -: 5771:    // If we are accessing an element then we are not changing the container size
        4: 5772:    if (Token::Match(tok, "%name% . %name% (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5773:        Library::Container::Yield yield = tok->valueType()->container->getYield(tok->strAt(2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5774:        if (yield != Library::Container::Yield::NO_YIELD)
branch  0 never executed
branch  1 never executed
    #####: 5775:            return false;
        -: 5776:    }
        4: 5777:    if (Token::simpleMatch(tok->astParent(), "["))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5778:        return false;
        -: 5779:
        -: 5780:    // address of variable
        4: 5781:    const bool addressOf = tok->valueType()->pointer || (tok->astParent() && tok->astParent()->isUnaryOp("&"));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
call   21 returned 100%
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
        -: 5782:
        -: 5783:    int narg;
        4: 5784:    const Token * ftok = getTokenArgumentFunction(tok, narg);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4: 5785:    if (!ftok)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 5786:        return false; // not a function => variable not changed
        2: 5787:    const Function * fun = ftok->function();
call    0 returned 100%
        2: 5788:    if (fun) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5789:        const Variable *arg = fun->getArgumentVar(narg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5790:        if (arg) {
branch  0 never executed
branch  1 never executed
    #####: 5791:            if (!arg->isReference() && !addressOf)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5792:                return false;
    #####: 5793:            if (arg->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5794:                return false;
    #####: 5795:            const Scope * scope = fun->functionScope;
    #####: 5796:            if (scope) {
branch  0 never executed
branch  1 never executed
        -: 5797:                // Argument not used
    #####: 5798:                if (!arg->nameToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5799:                    return false;
    #####: 5800:                if (depth > 0)
branch  0 never executed
branch  1 never executed
    #####: 5801:                    return isContainerSizeChanged(arg->declarationId(), scope->bodyStart, scope->bodyEnd, depth - 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5802:            }
        -: 5803:            // Don't know => Safe guess
    #####: 5804:            return true;
        -: 5805:        }
        -: 5806:    }
        -: 5807:
        2: 5808:    bool inconclusive = false;
        2: 5809:    const bool isChanged = isVariableChangedByFunctionCall(tok, 0, nullptr, &inconclusive);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 5810:    return (isChanged || inconclusive);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 5811:}
        -: 5812:
function _ZL25valueFlowContainerReverseP5TokeniRKN9ValueFlow5ValueEPK8Settings called 0 returned 0% blocks executed 0%
    #####: 5813:static void valueFlowContainerReverse(Token *tok, nonneg int containerId, const ValueFlow::Value &value, const Settings *settings)
        -: 5814:{
    #####: 5815:    while (nullptr != (tok = tok->previous())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5816:        if (Token::Match(tok, "[{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5817:            break;
    #####: 5818:        if (Token::Match(tok, "return|break|continue"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5819:            break;
    #####: 5820:        if (tok->varId() != containerId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5821:            continue;
    #####: 5822:        if (Token::Match(tok, "%name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5823:            break;
    #####: 5824:        if (isContainerSizeChangedByFunction(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5825:            break;
    #####: 5826:        if (!tok->valueType() || !tok->valueType()->container)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5827:            break;
    #####: 5828:        if (Token::Match(tok, "%name% . %name% (") && tok->valueType()->container->getAction(tok->strAt(2)) != Library::Container::Action::NO_ACTION)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5829:            break;
    #####: 5830:        if (!hasContainerSizeGuard(tok, containerId))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5831:            setTokenValue(tok, value, settings);
call    0 never executed
        -: 5832:    }
    #####: 5833:}
        -: 5834:
function _ZL25valueFlowContainerForwardP5TokeniN9ValueFlow5ValueEPK8Settingsb called 10 returned 100% blocks executed 31%
       25: 5835:static void valueFlowContainerForward(Token *tok, nonneg int containerId, ValueFlow::Value value, const Settings *settings, bool cpp)
        -: 5836:{
       40: 5837:    while (nullptr != (tok = tok->next())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       25: 5838:        if (Token::Match(tok, "[{}]"))
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
        3: 5839:            break;
       22: 5840:        if (Token::Match(tok, "while|for (")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5841:            const Token *start = tok->linkAt(1)->next();
call    0 never executed
call    1 never executed
    #####: 5842:            if (!Token::simpleMatch(start->link(), "{"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5843:                break;
    #####: 5844:            if (isContainerSizeChanged(containerId, start, start->link()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5845:                break;
        -: 5846:        }
       22: 5847:        if (Token::simpleMatch(tok, ") {") && Token::Match(tok->link()->previous(), "while|for|if (")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5848:            const Token *start = tok->next();
call    0 never executed
    #####: 5849:            if (isContainerSizeChanged(containerId, start, start->link()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5850:                break;
    #####: 5851:            tok = start->link();
call    0 never executed
    #####: 5852:            if (Token::simpleMatch(tok, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5853:                start = tok->tokAt(2);
call    0 never executed
    #####: 5854:                if (isContainerSizeChanged(containerId, start, start->link()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5855:                    break;
    #####: 5856:                tok = start->link();
call    0 never executed
        -: 5857:            }
        -: 5858:        }
       22: 5859:        if (tok->varId() != containerId)
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
       13: 5860:            continue;
        9: 5861:        if (Token::Match(tok, "%name% ="))
call    0 returned 100%
branch  1 taken 56% (fallthrough)
branch  2 taken 44%
        5: 5862:            break;
        4: 5863:        if (Token::Match(tok, "%name% +=")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5864:            if (!tok->valueType() || !tok->valueType()->container || !tok->valueType()->container->stdStringLike)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 5865:                break;
    #####: 5866:            const Token *rhs = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 5867:            if (rhs->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5868:                value.intvalue += Token::getStrLength(rhs);
call    0 never executed
    #####: 5869:            else if (rhs->valueType() && rhs->valueType()->container && rhs->valueType()->container->stdStringLike) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 5870:                bool found = false;
    #####: 5871:                for (const ValueFlow::Value &rhsval : rhs->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 5872:                    if (rhsval.isKnown() && rhsval.isContainerSizeValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5873:                        value.intvalue += rhsval.intvalue;
    #####: 5874:                        found = true;
        -: 5875:                    }
        -: 5876:                }
    #####: 5877:                if (!found)
branch  0 never executed
branch  1 never executed
    #####: 5878:                    break;
        -: 5879:            } else
    #####: 5880:                break;
        -: 5881:        }
        4: 5882:        if (isLikelyStreamRead(cpp, tok->astParent()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5883:            break;
        4: 5884:        if (isContainerSizeChangedByFunction(tok))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        2: 5885:            break;
        2: 5886:        if (!tok->valueType() || !tok->valueType()->container)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5887:            break;
        2: 5888:        if (Token::Match(tok, "%name% . %name% (") && tok->valueType()->container->getAction(tok->strAt(2)) != Library::Container::Action::NO_ACTION)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5889:            break;
        2: 5890:        if (!hasContainerSizeGuard(tok, containerId))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 5891:            setTokenValue(tok, value, settings);
call    0 returned 100%
        -: 5892:    }
       10: 5893:}
        -: 5894:
function _ZL22isContainerSizeChangediPK5TokenS1_i called 0 returned 0% blocks executed 0%
    #####: 5895:static bool isContainerSizeChanged(nonneg int varId, const Token *start, const Token *end, int depth)
        -: 5896:{
    #####: 5897:    for (const Token *tok = start; tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 5898:        if (tok->varId() != varId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5899:            continue;
    #####: 5900:        if (!tok->valueType() || !tok->valueType()->container)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5901:            return true;
    #####: 5902:        if (Token::Match(tok, "%name% %assign%|<<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5903:            return true;
    #####: 5904:        if (Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5905:            Library::Container::Action action = tok->valueType()->container->getAction(tok->strAt(2));
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5906:            switch (action) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5907:            case Library::Container::Action::RESIZE:
        -: 5908:            case Library::Container::Action::CLEAR:
        -: 5909:            case Library::Container::Action::PUSH:
        -: 5910:            case Library::Container::Action::POP:
        -: 5911:            case Library::Container::Action::CHANGE:
        -: 5912:            case Library::Container::Action::INSERT:
        -: 5913:            case Library::Container::Action::ERASE:
        -: 5914:            case Library::Container::Action::CHANGE_INTERNAL:
    #####: 5915:                return true;
    #####: 5916:            case Library::Container::Action::NO_ACTION: // might be unknown action
    #####: 5917:                return true;
    #####: 5918:            case Library::Container::Action::FIND:
        -: 5919:            case Library::Container::Action::CHANGE_CONTENT:
    #####: 5920:                break;
        -: 5921:            };
        -: 5922:        }
    #####: 5923:        if (isContainerSizeChangedByFunction(tok, depth))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5924:            return true;
        -: 5925:    }
    #####: 5926:    return false;
        -: 5927:}
        -: 5928:
function _ZL21valueFlowSmartPointerP9TokenListP11ErrorLoggerPK8Settings called 1166 returned 100% blocks executed 12%
     1166: 5929:static void valueFlowSmartPointer(TokenList *tokenlist, ErrorLogger * errorLogger, const Settings *settings)
        -: 5930:{
    38451: 5931:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    37285: 5932:        if (!tok->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5933:            continue;
    37285: 5934:        if (!tok->scope()->isExecutable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
    12079: 5935:            continue;
    25206: 5936:        if (!tok->variable())
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
    21276: 5937:            continue;
     3930: 5938:        const Variable * var = tok->variable();
call    0 returned 100%
     3930: 5939:        if (!var->isSmartPointer())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     3930: 5940:            continue;
    #####: 5941:        if (var->nameToken() == tok) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5942:            if (Token::Match(tok, "%var% (|{") && tok->next()->astOperand2() && tok->next()->astOperand2()->str() != ",") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 5943:                Token * inTok = tok->next()->astOperand2();
call    0 never executed
call    1 never executed
    #####: 5944:                std::list<ValueFlow::Value> values = inTok->values();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 5945:                const bool constValue = inTok->isNumber();
call    0 never executed
    #####: 5946:                valueFlowForwardAssign(inTok, var, values, constValue, true, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 5947:
    #####: 5948:            } else if (Token::Match(tok, "%var% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5949:                std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5950:                ValueFlow::Value v(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5951:                v.setKnown();
call    0 never executed
    #####: 5952:                values.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5953:                valueFlowForwardAssign(tok, var, values, false, true, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 5954:            }
    #####: 5955:        } else if (Token::Match(tok, "%var% . reset (") && tok->next()->originalName() != "->") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5956:            if (Token::simpleMatch(tok->tokAt(3), "( )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5957:                std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 5958:                ValueFlow::Value v(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5959:                v.setKnown();
call    0 never executed
    #####: 5960:                values.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5961:                valueFlowForwardAssign(tok->tokAt(4), var, values, false, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 5962:            } else {
    #####: 5963:                tok->removeValues(std::mem_fn(&ValueFlow::Value::isIntValue));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5964:                Token * inTok = tok->tokAt(3)->astOperand2();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5965:                if (!inTok)
branch  0 never executed
branch  1 never executed
    #####: 5966:                    continue;
    #####: 5967:                std::list<ValueFlow::Value> values = inTok->values();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 5968:                const bool constValue = inTok->isNumber();
call    0 never executed
    #####: 5969:                valueFlowForwardAssign(inTok, var, values, constValue, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 5970:            }
    #####: 5971:        } else if (Token::Match(tok, "%var% . release ( )") && tok->next()->originalName() != "->") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5972:            std::list<ValueFlow::Value> values;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5973:            ValueFlow::Value v(0);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5974:            v.setKnown();
call    0 never executed
    #####: 5975:            values.push_back(v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5976:            valueFlowForwardAssign(tok->tokAt(4), var, values, false, false, tokenlist, errorLogger, settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 5977:        }
        -: 5978:    }
     1166: 5979:}
        -: 5980:
function _ZL22valueFlowContainerSizeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1166 returned 100% blocks executed 51%
     1166: 5981:static void valueFlowContainerSize(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger * /*errorLogger*/, const Settings *settings)
        -: 5982:{
        -: 5983:    // declaration
     4395: 5984:    for (const Variable *var : symboldatabase->variableList()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 73% (fallthrough)
branch  5 taken 27%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
     3229: 5985:        if (!var || !var->isLocal() || var->isPointer() || var->isReference())
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 46% (fallthrough)
branch  6 taken 54%
call    7 returned 100%
branch  8 taken 88% (fallthrough)
branch  9 taken 12%
call   10 returned 100%
branch 11 taken 3% (fallthrough)
branch 12 taken 97%
branch 13 taken 76% (fallthrough)
branch 14 taken 24%
     5669: 5986:            continue;
      780: 5987:        if (!var->valueType() || !var->valueType()->container)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
      764: 5988:            continue;
       16: 5989:        if (!Token::Match(var->nameToken(), "%name% ;"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
        7: 5990:            continue;
        9: 5991:        if (var->nameToken()->hasKnownValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5992:            continue;
       18: 5993:        ValueFlow::Value value(0);
call    0 returned 100%
call    1 never executed
        9: 5994:        if (var->valueType()->container->size_templateArgNo >= 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5995:            if (var->dimensions().size() == 1 && var->dimensions().front().tok && var->dimensions().front().tok->hasKnownIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 5996:                value.intvalue = var->dimensions().front().tok->getKnownIntValue();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5997:            else
    #####: 5998:                continue;
        -: 5999:        }
        9: 6000:        value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
        9: 6001:        value.setKnown();
call    0 returned 100%
        9: 6002:        valueFlowContainerForward(var->nameToken()->next(), var->declarationId(), value, settings, tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100%
branch 13 taken 0%
call   14 never executed
        -: 6003:    }
        -: 6004:
        -: 6005:    // after assignment
     2398: 6006:    for (const Scope *functionScope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
    25282: 6007:        for (const Token *tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
    24050: 6008:            if (Token::Match(tok, "%name%|;|{|} %var% = %str% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 6009:                const Token *containerTok = tok->next();
call    0 returned 100%
        1: 6010:                if (containerTok && containerTok->valueType() && containerTok->valueType()->container && containerTok->valueType()->container->stdStringLike) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
        2: 6011:                    ValueFlow::Value value(Token::getStrLength(containerTok->tokAt(2)));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
        1: 6012:                    value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
        1: 6013:                    value.setKnown();
call    0 returned 100%
        1: 6014:                    valueFlowContainerForward(containerTok->next(), containerTok->varId(), value, settings, tokenlist->isCPP());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        -: 6015:                }
        -: 6016:            }
        -: 6017:        }
        -: 6018:    }
        -: 6019:
        -: 6020:    // conditional conditionSize
     4528: 6021:    for (const Scope &scope : symboldatabase->scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     3362: 6022:        if (scope.type != Scope::ScopeType::eIf) // TODO: while
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     2886: 6023:            continue;
     4045: 6024:        for (const Token *tok = scope.classDef; tok && tok->str() != "{"; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 88% (fallthrough)
branch  5 taken 12%
branch  6 taken 88% (fallthrough)
branch  7 taken 12%
call    8 returned 100%
     3569: 6025:            if (!tok->isName() || !tok->valueType() || tok->valueType()->type != ValueType::CONTAINER || !tok->valueType()->container)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 36% (fallthrough)
branch  4 taken 64%
call    5 returned 100%
branch  6 taken 44% (fallthrough)
branch  7 taken 56%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
     7138: 6026:                continue;
        -: 6027:
        -: 6028:            const Token *conditionToken;
        -: 6029:            MathLib::bigint intval;
        -: 6030:
    #####: 6031:            if (Token::Match(tok, "%name% . %name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6032:                if (tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::SIZE) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6033:                    const Token *parent = tok->tokAt(3)->astParent();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6034:                    if (!parent || !parent->isComparisonOp() || !parent->astOperand2())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 6035:                        continue;
    #####: 6036:                    if (parent->astOperand1()->hasKnownIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6037:                        intval = parent->astOperand1()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6038:                    else if (parent->astOperand2()->hasKnownIntValue())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6039:                        intval = parent->astOperand2()->values().front().intvalue;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 6040:                    else
    #####: 6041:                        continue;
    #####: 6042:                    conditionToken = parent;
    #####: 6043:                } else if (tok->valueType()->container->getYield(tok->strAt(2)) == Library::Container::Yield::EMPTY) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6044:                    conditionToken = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6045:                    intval = 0;
        -: 6046:                } else {
    #####: 6047:                    continue;
        -: 6048:                }
    #####: 6049:            } else if (tok->valueType()->container->stdStringLike && Token::Match(tok, "%name% ==|!= %str%") && tok->next()->astOperand2() == tok->tokAt(2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 6050:                intval = Token::getStrLength(tok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6051:                conditionToken = tok->next();
call    0 never executed
        -: 6052:            } else {
    #####: 6053:                continue;
        -: 6054:            }
        -: 6055:
    #####: 6056:            ValueFlow::Value value(conditionToken, intval);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 6057:            value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
        -: 6058:
        -: 6059:            // possible value before condition
    #####: 6060:            valueFlowContainerReverse(const_cast<Token *>(scope.classDef), tok->varId(), value, settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6061:        }
        -: 6062:    }
     1166: 6063:}
        -: 6064:
function _ZL32valueFlowContainerAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1166 returned 100% blocks executed 64%
     1166: 6065:static void valueFlowContainerAfterCondition(TokenList *tokenlist,
        -: 6066:        SymbolDatabase *symboldatabase,
        -: 6067:        ErrorLogger *errorLogger,
        -: 6068:        const Settings *settings)
        -: 6069:{
     2332: 6070:    ValueFlowConditionHandler handler;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1166: 6071:    handler.forward =
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _ZZL32valueFlowContainerAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlP5TokenPKS8_SB_RKNSt7__debug4listIN9ValueFlow5ValueESaISF_EEEbE_clES9_SB_SB_SJ_b called 0 returned 0% blocks executed 0%
    #####: 6072:    [&](Token* start, const Token* stop, const Token* vartok, const std::list<ValueFlow::Value>& values, bool) {
        -: 6073:        // TODO: Forward multiple values
    #####: 6074:        if (values.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6075:            return false;
    #####: 6076:        const Variable* var = vartok->variable();
call    0 never executed
    #####: 6077:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 6078:            return false;
    #####: 6079:        valueFlowContainerForward(start, var->declarationId(), values.front(), settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 6080:        return isContainerSizeChanged(var->declarationId(), start, stop);
call    0 never executed
call    1 never executed
     2332: 6081:    };
function _ZZL32valueFlowContainerAfterConditionP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8SettingsENKUlPK5TokenE0_clESA_ called 3054 returned 100% blocks executed 51%
     4220: 6082:    handler.parse = [&](const Token *tok) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     3054: 6083:        ValueFlowConditionHandler::Condition cond;
call    0 returned 100%
     6108: 6084:        ValueFlow::Value true_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
     6108: 6085:        ValueFlow::Value false_value;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     3054: 6086:        const Token *vartok = parseCompareInt(tok, true_value, false_value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     3054: 6087:        if (vartok) {
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
      382: 6088:            vartok = vartok->tokAt(-3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      382: 6089:            if (!isContainerSize(vartok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      382: 6090:                return cond;
    #####: 6091:            true_value.valueType = ValueFlow::Value::CONTAINER_SIZE;
    #####: 6092:            false_value.valueType = ValueFlow::Value::CONTAINER_SIZE;
    #####: 6093:            cond.true_values.push_back(true_value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6094:            cond.false_values.push_back(false_value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6095:            cond.vartok = vartok;
    #####: 6096:            return cond;
        -: 6097:        }
        -: 6098:
        -: 6099:        // Empty check
     2672: 6100:        if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 26% (fallthrough)
branch  3 taken 74%
      693: 6101:            vartok = tok->tokAt(-3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 6102:            // TODO: Handle .size()
      693: 6103:            if (!isContainerEmpty(vartok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      693: 6104:                return cond;
    #####: 6105:            const Token *parent = tok->astParent();
call    0 never executed
    #####: 6106:            while (parent) {
branch  0 never executed
branch  1 never executed
    #####: 6107:                if (Token::Match(parent, "%comp%|!"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6108:                    return cond;
    #####: 6109:                parent = parent->astParent();
call    0 never executed
        -: 6110:            }
    #####: 6111:            ValueFlow::Value value(tok, 0LL);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 6112:            value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####: 6113:            cond.true_values.emplace_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6114:            cond.false_values.emplace_back(std::move(value));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6115:            cond.vartok = vartok;
    #####: 6116:            return cond;
        -: 6117:        }
        -: 6118:        // String compare
     1979: 6119:        if (Token::Match(tok, "==|!=")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
       65: 6120:            const Token *strtok = nullptr;
       65: 6121:            if (Token::Match(tok->astOperand1(), "%str%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 6122:                strtok = tok->astOperand1();
call    0 never executed
    #####: 6123:                vartok = tok->astOperand2();
call    0 never executed
       65: 6124:            } else if (Token::Match(tok->astOperand2(), "%str%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
        2: 6125:                strtok = tok->astOperand2();
call    0 returned 100%
        2: 6126:                vartok = tok->astOperand1();
call    0 returned 100%
        -: 6127:            }
       65: 6128:            if (!strtok)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       63: 6129:                return cond;
        2: 6130:            if (!astIsContainer(vartok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2: 6131:                return cond;
    #####: 6132:            ValueFlow::Value value(tok, Token::getStrLength(strtok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 6133:            value.valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
    #####: 6134:            cond.false_values.emplace_back(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6135:            cond.true_values.emplace_back(std::move(value));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6136:            cond.vartok = vartok;
    #####: 6137:            return cond;
        -: 6138:        }
     1914: 6139:        return cond;
     1166: 6140:    };
     1166: 6141:    handler.afterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1166: 6142:}
        -: 6143:
function _ZL20valueFlowFwdAnalysisPK9TokenListPK8Settings called 956 returned 100% blocks executed 71%
      956: 6144:static void valueFlowFwdAnalysis(const TokenList *tokenlist, const Settings *settings)
        -: 6145:{
    29888: 6146:    for (const Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 6147:        if (tok->str() != "=" || !tok->astOperand1() || !tok->astOperand2())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 97% (fallthrough)
branch 11 taken 3%
    56626: 6148:            continue;
      869: 6149:        if (!tok->scope()->isExecutable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
       37: 6150:            continue;
      832: 6151:        if (!tok->astOperand2()->hasKnownIntValue())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 56% (fallthrough)
branch  5 taken 44%
      463: 6152:            continue;
      738: 6153:        ValueFlow::Value v(tok->astOperand2()->values().front());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
      369: 6154:        v.errorPath.emplace_back(tok, tok->astOperand1()->expressionString() + " is assigned value " + MathLib::toString(v.intvalue));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
      369: 6155:        const Token *startToken = tok->findExpressionStartEndTokens().second->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      369: 6156:        const Scope *functionScope = tok->scope();
call    0 returned 100%
      557: 6157:        while (functionScope->nestedIn && functionScope->nestedIn->isExecutable())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
       94: 6158:            functionScope = functionScope->nestedIn;
      369: 6159:        const Token *endToken = functionScope->bodyEnd;
      369: 6160:        valueFlowForwardExpression(const_cast<Token*>(startToken), endToken, tok->astOperand1(), {v}, tokenlist, settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
branch 13 taken 50% (fallthrough)
branch 14 taken 50%
call   15 returned 100%
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
        -: 6161:    }
      956: 6162:}
        -: 6163:
function _ZL26valueFlowDynamicBufferSizeP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 956 returned 100% blocks executed 57%
      956: 6164:static void valueFlowDynamicBufferSize(TokenList *tokenlist, SymbolDatabase *symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 6165:{
     1963: 6166:    for (const Scope *functionScope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    19214: 6167:        for (const Token *tok = functionScope->bodyStart; tok != functionScope->bodyEnd; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
    18207: 6168:            if (!Token::Match(tok, "[;{}] %var% ="))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 96% (fallthrough)
branch  4 taken 4%
    35766: 6169:                continue;
        -: 6170:
      643: 6171:            if (!tok->next()->variable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        6: 6172:                continue;
        -: 6173:
      637: 6174:            const Token *rhs = tok->tokAt(2)->astOperand2();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
      671: 6175:            while (rhs && rhs->isCast())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 3% (fallthrough)
branch  8 taken 97%
       17: 6176:                rhs = rhs->astOperand2() ? rhs->astOperand2() : rhs->astOperand1();
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 returned 100%
      637: 6177:            if (!rhs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6178:                continue;
        -: 6179:
      637: 6180:            if (!Token::Match(rhs->previous(), "%name% ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 80% (fallthrough)
branch  5 taken 20%
      511: 6181:                continue;
        -: 6182:
      126: 6183:            const Library::AllocFunc *allocFunc = settings->library.getAllocFuncInfo(rhs->previous());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      126: 6184:            if (!allocFunc)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      121: 6185:                allocFunc = settings->library.getReallocFuncInfo(rhs->previous());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      126: 6186:            if (!allocFunc || allocFunc->bufferSize == Library::AllocFunc::BufferSize::none)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      121: 6187:                continue;
        -: 6188:
       10: 6189:            const std::vector<const Token *> args = getArguments(rhs->previous());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        -: 6190:
        5: 6191:            const Token * const arg1 = (args.size() >= allocFunc->bufferSizeArg1) ? args[allocFunc->bufferSizeArg1 - 1] : nullptr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        5: 6192:            const Token * const arg2 = (args.size() >= allocFunc->bufferSizeArg2) ? args[allocFunc->bufferSizeArg2 - 1] : nullptr;
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 6193:
        5: 6194:            MathLib::bigint sizeValue = -1;
        5: 6195:            switch (allocFunc->bufferSize) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
    #####: 6196:            case Library::AllocFunc::BufferSize::none:
    #####: 6197:                break;
        5: 6198:            case Library::AllocFunc::BufferSize::malloc:
        5: 6199:                if (arg1 && arg1->hasKnownIntValue())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        5: 6200:                    sizeValue = arg1->getKnownIntValue();
call    0 returned 100%
        5: 6201:                break;
    #####: 6202:            case Library::AllocFunc::BufferSize::calloc:
    #####: 6203:                if (arg1 && arg2 && arg1->hasKnownIntValue() && arg2->hasKnownIntValue())
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 6204:                    sizeValue = arg1->getKnownIntValue() * arg2->getKnownIntValue();
call    0 never executed
call    1 never executed
    #####: 6205:                break;
    #####: 6206:            case Library::AllocFunc::BufferSize::strdup:
    #####: 6207:                if (arg1 && arg1->hasKnownValue()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6208:                    const ValueFlow::Value &value = arg1->values().back();
call    0 never executed
call    1 never executed
    #####: 6209:                    if (value.isTokValue() && value.tokvalue->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6210:                        sizeValue = Token::getStrLength(value.tokvalue) + 1; // Add one for the null terminator
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6211:                }
    #####: 6212:                break;
        -: 6213:            };
        5: 6214:            if (sizeValue < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6215:                continue;
        -: 6216:
       10: 6217:            ValueFlow::Value value(sizeValue);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0%
call    5 never executed
        5: 6218:            value.errorPath.emplace_back(tok->tokAt(2), "Assign " + tok->strAt(1) + ", buffer with size " + MathLib::toString(sizeValue));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        5: 6219:            value.valueType = ValueFlow::Value::ValueType::BUFFER_SIZE;
        5: 6220:            value.setKnown();
call    0 returned 100%
       10: 6221:            const std::list<ValueFlow::Value> values{value};
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
call   11 returned 100%
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
       10: 6222:            valueFlowForwardVariable(const_cast<Token*>(rhs),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        5: 6223:                                     functionScope->bodyEnd,
        -: 6224:                                     tok->next()->variable(),
        -: 6225:                                     tok->next()->varId(),
        -: 6226:                                     values,
        -: 6227:                                     true,
        -: 6228:                                     false,
        -: 6229:                                     tokenlist,
        -: 6230:                                     errorLogger,
        -: 6231:                                     settings);
        -: 6232:        }
        -: 6233:    }
      956: 6234:}
        -: 6235:
function _ZL15getMinMaxValuesPK9ValueTypeRKN8cppcheck8PlatformEPxS6_ called 0 returned 0% blocks executed 0%
    #####: 6236:static bool getMinMaxValues(const ValueType *vt, const cppcheck::Platform &platform, MathLib::bigint *minValue, MathLib::bigint *maxValue)
        -: 6237:{
    #####: 6238:    if (!vt || !vt->isIntegral() || vt->pointer)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6239:        return false;
        -: 6240:
        -: 6241:    int bits;
    #####: 6242:    switch (vt->type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6243:    case ValueType::Type::BOOL:
    #####: 6244:        bits = 1;
    #####: 6245:        break;
    #####: 6246:    case ValueType::Type::CHAR:
    #####: 6247:        bits = platform.char_bit;
    #####: 6248:        break;
    #####: 6249:    case ValueType::Type::SHORT:
    #####: 6250:        bits = platform.short_bit;
    #####: 6251:        break;
    #####: 6252:    case ValueType::Type::INT:
    #####: 6253:        bits = platform.int_bit;
    #####: 6254:        break;
    #####: 6255:    case ValueType::Type::LONG:
    #####: 6256:        bits = platform.long_bit;
    #####: 6257:        break;
    #####: 6258:    case ValueType::Type::LONGLONG:
    #####: 6259:        bits = platform.long_long_bit;
    #####: 6260:        break;
    #####: 6261:    default:
    #####: 6262:        return false;
        -: 6263:    };
        -: 6264:
    #####: 6265:    if (bits == 1) {
branch  0 never executed
branch  1 never executed
    #####: 6266:        *minValue = 0;
    #####: 6267:        *maxValue = 1;
    #####: 6268:    } else if (bits < 62) {
branch  0 never executed
branch  1 never executed
    #####: 6269:        if (vt->sign == ValueType::Sign::UNSIGNED) {
branch  0 never executed
branch  1 never executed
    #####: 6270:            *minValue = 0;
    #####: 6271:            *maxValue = (1LL << bits) - 1;
        -: 6272:        } else {
    #####: 6273:            *minValue = -(1LL << (bits - 1));
    #####: 6274:            *maxValue = (1LL << (bits - 1)) - 1;
        -: 6275:        }
    #####: 6276:    } else if (bits == 64) {
branch  0 never executed
branch  1 never executed
    #####: 6277:        if (vt->sign == ValueType::Sign::UNSIGNED) {
branch  0 never executed
branch  1 never executed
    #####: 6278:            *minValue = 0;
    #####: 6279:            *maxValue = LLONG_MAX; // todo max unsigned value
        -: 6280:        } else {
    #####: 6281:            *minValue = LLONG_MIN;
    #####: 6282:            *maxValue = LLONG_MAX;
        -: 6283:        }
        -: 6284:    } else {
    #####: 6285:        return false;
        -: 6286:    }
        -: 6287:
    #####: 6288:    return true;
        -: 6289:}
        -: 6290:
function _ZL15getMinMaxValuesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK8SettingsPxSA_ called 0 returned 0% blocks executed 0%
    #####: 6291:static bool getMinMaxValues(const std::string &typestr, const Settings *settings, MathLib::bigint *minvalue, MathLib::bigint *maxvalue)
        -: 6292:{
    #####: 6293:    TokenList typeTokens(settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 6294:    std::istringstream istr(typestr+";");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 6295:    if (!typeTokens.createTokens(istr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6296:        return false;
    #####: 6297:    typeTokens.simplifyPlatformTypes();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6298:    typeTokens.simplifyStdType();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6299:    const ValueType &vt = ValueType::parseDecl(typeTokens.front(), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 6300:    return getMinMaxValues(&vt, *settings, minvalue, maxvalue);
call    0 never executed
        -: 6301:}
        -: 6302:
function _ZL22valueFlowSafeFunctionsP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 1192 returned 100% blocks executed 16%
     1192: 6303:static void valueFlowSafeFunctions(TokenList *tokenlist, SymbolDatabase *symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 6304:{
     2450: 6305:    for (const Scope *functionScope : symboldatabase->functionScopes) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     1258: 6306:        if (!functionScope->bodyStart)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6307:            continue;
     1258: 6308:        const Function *function = functionScope->function;
     1258: 6309:        if (!function)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4: 6310:            continue;
        -: 6311:
     1254: 6312:        const bool safe = function->isSafe(settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1254: 6313:        const bool all = safe && settings->platformType != cppcheck::Platform::PlatformType::Unspecified;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -: 6314:
     2000: 6315:        for (const Variable &arg : function->argumentList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 37% (fallthrough)
branch  4 taken 63%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      746: 6316:            if (!arg.nameToken() || !arg.valueType())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
      749: 6317:                continue;
        -: 6318:
      743: 6319:            if (arg.valueType()->type == ValueType::Type::CONTAINER) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       56: 6320:                if (!safe)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       56: 6321:                    continue;
    #####: 6322:                std::list<ValueFlow::Value> argValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6323:                argValues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6324:                argValues.back().valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
call    0 never executed
    #####: 6325:                argValues.back().errorPath.emplace_back(arg.nameToken(), "Assuming " + arg.name() + " is empty");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6326:                argValues.back().safe = true;
call    0 never executed
    #####: 6327:                argValues.emplace_back(1000000);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6328:                argValues.back().valueType = ValueFlow::Value::ValueType::CONTAINER_SIZE;
call    0 never executed
    #####: 6329:                argValues.back().errorPath.emplace_back(arg.nameToken(), "Assuming " + arg.name() + " size is 1000000");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6330:                argValues.back().safe = true;
call    0 never executed
    #####: 6331:                for (const ValueFlow::Value &value : argValues)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6332:                    valueFlowContainerForward(const_cast<Token*>(functionScope->bodyStart), arg.declarationId(), value, settings, tokenlist->isCPP());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 6333:                continue;
        -: 6334:            }
        -: 6335:
        -: 6336:            MathLib::bigint low, high;
      687: 6337:            bool isLow = arg.nameToken()->getCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::LOW, &low);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      687: 6338:            bool isHigh = arg.nameToken()->getCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::HIGH, &high);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 6339:
      687: 6340:            if (!isLow && !isHigh && !all)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      687: 6341:                continue;
        -: 6342:
    #####: 6343:            const bool safeLow = !isLow;
    #####: 6344:            const bool safeHigh = !isHigh;
        -: 6345:
    #####: 6346:            if ((!isLow || !isHigh) && all) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 6347:                MathLib::bigint minValue, maxValue;
    #####: 6348:                if (getMinMaxValues(arg.valueType(), *settings, &minValue, &maxValue)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6349:                    if (!isLow)
branch  0 never executed
branch  1 never executed
    #####: 6350:                        low = minValue;
    #####: 6351:                    if (!isHigh)
branch  0 never executed
branch  1 never executed
    #####: 6352:                        high = maxValue;
    #####: 6353:                    isLow = isHigh = true;
    #####: 6354:                } else if (arg.valueType()->type == ValueType::Type::FLOAT || arg.valueType()->type == ValueType::Type::DOUBLE || arg.valueType()->type == ValueType::Type::LONGDOUBLE) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 6355:                    std::list<ValueFlow::Value> argValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6356:                    argValues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6357:                    argValues.back().valueType = ValueFlow::Value::ValueType::FLOAT;
call    0 never executed
    #####: 6358:                    argValues.back().floatValue = isLow ? low : -1E25f;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6359:                    argValues.back().errorPath.emplace_back(arg.nameToken(), "Safe checks: Assuming argument has value " + MathLib::toString(argValues.back().floatValue));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6360:                    argValues.back().safe = true;
call    0 never executed
    #####: 6361:                    argValues.emplace_back(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6362:                    argValues.back().valueType = ValueFlow::Value::ValueType::FLOAT;
call    0 never executed
    #####: 6363:                    argValues.back().floatValue = isHigh ? high : 1E25f;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6364:                    argValues.back().errorPath.emplace_back(arg.nameToken(), "Safe checks: Assuming argument has value " + MathLib::toString(argValues.back().floatValue));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 6365:                    argValues.back().safe = true;
call    0 never executed
    #####: 6366:                    valueFlowForwardVariable(const_cast<Token*>(functionScope->bodyStart->next()),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 6367:                                             functionScope->bodyEnd,
        -: 6368:                                             &arg,
        -: 6369:                                             arg.declarationId(),
        -: 6370:                                             argValues,
        -: 6371:                                             false,
        -: 6372:                                             false,
        -: 6373:                                             tokenlist,
        -: 6374:                                             errorLogger,
        -: 6375:                                             settings);
    #####: 6376:                    continue;
        -: 6377:                }
        -: 6378:            }
        -: 6379:
    #####: 6380:            std::list<ValueFlow::Value> argValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6381:            if (isLow) {
branch  0 never executed
branch  1 never executed
    #####: 6382:                argValues.emplace_back(low);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6383:                argValues.back().errorPath.emplace_back(arg.nameToken(), std::string(safeLow ? "Safe checks: " : "") + "Assuming argument has value " + MathLib::toString(low));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 6384:                argValues.back().safe = safeLow;
call    0 never executed
        -: 6385:            }
    #####: 6386:            if (isHigh) {
branch  0 never executed
branch  1 never executed
    #####: 6387:                argValues.emplace_back(high);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6388:                argValues.back().errorPath.emplace_back(arg.nameToken(), std::string(safeHigh ? "Safe checks: " : "") + "Assuming argument has value " + MathLib::toString(high));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
    #####: 6389:                argValues.back().safe = safeHigh;
call    0 never executed
        -: 6390:            }
        -: 6391:
    #####: 6392:            if (!argValues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6393:                valueFlowForwardVariable(const_cast<Token*>(functionScope->bodyStart->next()),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 6394:                                         functionScope->bodyEnd,
        -: 6395:                                         &arg,
        -: 6396:                                         arg.declarationId(),
        -: 6397:                                         argValues,
        -: 6398:                                         false,
        -: 6399:                                         false,
        -: 6400:                                         tokenlist,
        -: 6401:                                         errorLogger,
        -: 6402:                                         settings);
        -: 6403:        }
        -: 6404:    }
     1192: 6405:}
        -: 6406:
function _ZL30valueFlowUnknownFunctionReturnP9TokenListPK8Settings called 956 returned 100% blocks executed 7%
      956: 6407:static void valueFlowUnknownFunctionReturn(TokenList *tokenlist, const Settings *settings)
        -: 6408:{
      956: 6409:    if (settings->checkUnknownFunctionReturn.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      956: 6410:        return;
    #####: 6411:    for (Token *tok = tokenlist->front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6412:        if (!tok->astParent() || tok->str() != "(")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6413:            continue;
    #####: 6414:        if (!Token::Match(tok->previous(), "%name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6415:            continue;
    #####: 6416:        if (settings->checkUnknownFunctionReturn.find(tok->previous()->str()) == settings->checkUnknownFunctionReturn.end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 6417:            continue;
    #####: 6418:        std::vector<MathLib::bigint> unknownValues = settings->library.unknownReturnValues(tok->astOperand1());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 6419:        if (unknownValues.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6420:            continue;
        -: 6421:
        -: 6422:        // Get min/max values for return type
    #####: 6423:        const std::string &typestr = settings->library.returnValueType(tok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6424:        MathLib::bigint minvalue, maxvalue;
    #####: 6425:        if (!getMinMaxValues(typestr, settings, &minvalue, &maxvalue))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6426:            continue;
        -: 6427:
    #####: 6428:        for (MathLib::bigint value : unknownValues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####: 6429:            if (value < minvalue)
branch  0 never executed
branch  1 never executed
    #####: 6430:                value = minvalue;
    #####: 6431:            else if (value > maxvalue)
branch  0 never executed
branch  1 never executed
    #####: 6432:                value = maxvalue;
    #####: 6433:            setTokenValue(const_cast<Token *>(tok), ValueFlow::Value(value), settings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 6434:        }
        -: 6435:    }
        -: 6436:}
        -: 6437:
function _ZN9ValueFlow5ValueC2EPK5Tokenx called 2762 returned 100% blocks executed 50%
     2762: 6438:ValueFlow::Value::Value(const Token* c, long long val)
        -: 6439:    : valueType(INT),
        -: 6440:      bound(Bound::Point),
        -: 6441:      intvalue(val),
        -: 6442:      tokvalue(nullptr),
        -: 6443:      floatValue(0.0),
        -: 6444:      moveKind(MoveKind::NonMovedVariable),
        -: 6445:      varvalue(val),
        -: 6446:      condition(c),
        -: 6447:      varId(0U),
        -: 6448:      safe(false),
        -: 6449:      conditional(false),
        -: 6450:      defaultArg(false),
        -: 6451:      indirect(0),
        -: 6452:      lifetimeKind(LifetimeKind::Object),
        -: 6453:      lifetimeScope(LifetimeScope::Local),
     2762: 6454:      valueKind(ValueKind::Possible)
call    0 returned 100%
call    1 never executed
        -: 6455:{
     2762: 6456:    errorPath.emplace_back(c, "Assuming that condition '" + c->expressionString() + "' is not redundant");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
     2762: 6457:}
        -: 6458:
function _ZNK9ValueFlow5Value10infoStringB5cxx11Ev called 716 returned 100% blocks executed 31%
      716: 6459:std::string ValueFlow::Value::infoString() const
        -: 6460:{
      716: 6461:    switch (valueType) {
branch  0 taken 93%
branch  1 taken 6%
branch  2 taken 0%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
      664: 6462:    case INT:
      664: 6463:        return MathLib::toString(intvalue);
call    0 returned 100%
       42: 6464:    case TOK:
       42: 6465:        return tokvalue->str();
call    0 returned 100%
call    1 returned 100%
    #####: 6466:    case FLOAT:
    #####: 6467:        return MathLib::toString(floatValue);
call    0 never executed
        8: 6468:    case MOVED:
        8: 6469:        return "<Moved>";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        2: 6470:    case UNINIT:
        2: 6471:        return "<Uninit>";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
    #####: 6472:    case BUFFER_SIZE:
        -: 6473:    case CONTAINER_SIZE:
    #####: 6474:        return "size=" + MathLib::toString(intvalue);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 6475:    case LIFETIME:
    #####: 6476:        return "lifetime=" + tokvalue->str();
call    0 never executed
call    1 never executed
        -: 6477:    };
    #####: 6478:    throw InternalError(nullptr, "Invalid ValueFlow Value type");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 6479:}
        -: 6480:
function _ZN9ValueFlow24valueFlowConstantFoldASTEP5TokenPK8Settings called 165 returned 100% blocks executed 100%
      165: 6481:const ValueFlow::Value *ValueFlow::valueFlowConstantFoldAST(Token *expr, const Settings *settings)
        -: 6482:{
      165: 6483:    if (expr && expr->values().empty()) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
       55: 6484:        valueFlowConstantFoldAST(expr->astOperand1(), settings);
call    0 returned 100%
call    1 returned 100%
       55: 6485:        valueFlowConstantFoldAST(expr->astOperand2(), settings);
call    0 returned 100%
call    1 returned 100%
       55: 6486:        valueFlowSetConstantValue(expr, settings, true /* TODO: this is a guess */);
call    0 returned 100%
        -: 6487:    }
      165: 6488:    return expr && expr->hasKnownValue() ? &expr->values().front() : nullptr;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
        -: 6489:}
        -: 6490:
function _ZL14getTotalValuesP9TokenList called 3340 returned 100% blocks executed 100%
     3340: 6491:static std::size_t getTotalValues(TokenList *tokenlist)
        -: 6492:{
     3340: 6493:    std::size_t n = 1;
   108262: 6494:    for (Token *tok = tokenlist->front(); tok; tok = tok->next())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
   104922: 6495:        n += tok->values().size();
call    0 returned 100%
call    1 returned 100%
     3340: 6496:    return n;
        -: 6497:}
        -: 6498:
function _ZN9ValueFlow9setValuesEP9TokenListP14SymbolDatabaseP11ErrorLoggerPK8Settings called 956 returned 100% blocks executed 100%
      956: 6499:void ValueFlow::setValues(TokenList *tokenlist, SymbolDatabase* symboldatabase, ErrorLogger *errorLogger, const Settings *settings)
        -: 6500:{
    29888: 6501:    for (Token *tok = tokenlist->front(); tok; tok = tok->next())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 6502:        tok->clearValueFlow();
call    0 returned 100%
        -: 6503:
      956: 6504:    valueFlowNumber(tokenlist);
call    0 returned 100%
      956: 6505:    valueFlowString(tokenlist);
call    0 returned 100%
      956: 6506:    valueFlowArray(tokenlist);
call    0 returned 100%
      956: 6507:    valueFlowUnknownFunctionReturn(tokenlist, settings);
call    0 returned 100%
      956: 6508:    valueFlowGlobalConstVar(tokenlist, settings);
call    0 returned 100%
      956: 6509:    valueFlowGlobalStaticVar(tokenlist, settings);
call    0 returned 100%
      956: 6510:    valueFlowPointerAlias(tokenlist);
call    0 returned 100%
      956: 6511:    valueFlowLifetime(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      956: 6512:    valueFlowFunctionReturn(tokenlist, errorLogger);
call    0 returned 100%
      956: 6513:    valueFlowBitAnd(tokenlist);
call    0 returned 100%
      956: 6514:    valueFlowSameExpressions(tokenlist);
call    0 returned 100%
      956: 6515:    valueFlowFwdAnalysis(tokenlist, settings);
call    0 returned 100%
        -: 6516:
      956: 6517:    std::size_t values = 0;
      956: 6518:    std::size_t n = 4;
     3340: 6519:    while (n > 0 && values < getTotalValues(tokenlist)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 55% (fallthrough)
branch  4 taken 45%
branch  5 taken 55% (fallthrough)
branch  6 taken 45%
     1192: 6520:        values = getTotalValues(tokenlist);
call    0 returned 100%
     1192: 6521:        valueFlowPointerAliasDeref(tokenlist);
call    0 returned 100%
     1192: 6522:        valueFlowArrayBool(tokenlist);
call    0 returned 100%
     1192: 6523:        valueFlowRightShift(tokenlist, settings);
call    0 returned 100%
     1192: 6524:        valueFlowOppositeCondition(symboldatabase, settings);
call    0 returned 100%
     1192: 6525:        valueFlowTerminatingCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6526:        valueFlowBeforeCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6527:        valueFlowAfterMove(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6528:        valueFlowAfterAssign(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6529:        valueFlowAfterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6530:        valueFlowInferCondition(tokenlist, settings);
call    0 returned 100%
     1192: 6531:        valueFlowSwitchVariable(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6532:        valueFlowForLoop(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6533:        valueFlowSubFunction(tokenlist, errorLogger, settings);
call    0 returned 100%
     1192: 6534:        valueFlowFunctionDefaultParameter(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6535:        valueFlowUninit(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6536:        if (tokenlist->isCPP()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     1166: 6537:            valueFlowSmartPointer(tokenlist, errorLogger, settings);
call    0 returned 100%
     1166: 6538:            valueFlowContainerSize(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1166: 6539:            valueFlowContainerAfterCondition(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
        -: 6540:        }
     1192: 6541:        valueFlowSafeFunctions(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
     1192: 6542:        n--;
        -: 6543:    }
        -: 6544:
      956: 6545:    valueFlowDynamicBufferSize(tokenlist, symboldatabase, errorLogger, settings);
call    0 returned 100%
      956: 6546:}
        -: 6547:
        -: 6548:
function _ZN9ValueFlow29eitherTheConditionIsRedundantB5cxx11EPK5Token called 5 returned 100% blocks executed 25%
        5: 6549:std::string ValueFlow::eitherTheConditionIsRedundant(const Token *condition)
        -: 6550:{
        5: 6551:    if (!condition)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6552:        return "Either the condition is redundant";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        5: 6553:    if (condition->str() == "case") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6554:        std::string expr;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 6555:        for (const Token *tok = condition; tok && tok->str() != ":"; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 6556:            expr += tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6557:            if (Token::Match(tok, "%name%|%num% %name%|%num%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6558:                expr += ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6559:        }
    #####: 6560:        return "Either the switch case '" + expr + "' is redundant";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 6561:    }
        5: 6562:    return "Either the condition '" + condition->expressionString() + "' is redundant";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
function _GLOBAL__sub_I__Z12lifetimeTypeB5cxx11PK5TokenPKN9ValueFlow5ValueE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 6563:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
