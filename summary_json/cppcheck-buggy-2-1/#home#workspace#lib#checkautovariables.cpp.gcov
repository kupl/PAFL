        -:    0:Source:/home/workspace/lib/checkautovariables.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkautovariables.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkautovariables.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:// Auto variables checks
        -:   21://---------------------------------------------------------------------------
        -:   22:
        -:   23:#include "checkautovariables.h"
        -:   24:
        -:   25:#include "astutils.h"
        -:   26:#include "errorlogger.h"
        -:   27:#include "library.h"
        -:   28:#include "settings.h"
        -:   29:#include "symboldatabase.h"
        -:   30:#include "token.h"
        -:   31:#include "tokenize.h"
        -:   32:#include "valueflow.h"
        -:   33:
        -:   34:#include <cstddef>
        -:   35:#include <list>
        -:   36:#include <functional>
        -:   37:
        -:   38://---------------------------------------------------------------------------
        -:   39:
        -:   40:
        -:   41:// Register this check class into cppcheck by creating a static instance of it..
        -:   42:namespace {
        1:   43:    CheckAutoVariables instance;
call    0 returned 100%
call    1 returned 100%
        -:   44:}
        -:   45:
        1:   46:static const CWE CWE398(398U);  // Indicator of Poor Code Quality
call    0 returned 100%
        1:   47:static const CWE CWE562(562U);  // Return of Stack Variable Address
call    0 returned 100%
        1:   48:static const CWE CWE590(590U);  // Free of Memory not on the Heap
call    0 returned 100%
        -:   49:
function _ZL8isPtrArgPK5Token called 0 returned 0% blocks executed 0%
    #####:   50:static bool isPtrArg(const Token *tok)
        -:   51:{
    #####:   52:    const Variable *var = tok->variable();
call    0 never executed
    #####:   53:    return (var && var->isArgument() && var->isPointer());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   54:}
        -:   55:
function _ZL10isArrayArgPK5Token called 0 returned 0% blocks executed 0%
    #####:   56:static bool isArrayArg(const Token *tok)
        -:   57:{
    #####:   58:    const Variable *var = tok->variable();
call    0 never executed
    #####:   59:    return (var && var->isArgument() && var->isArray());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   60:}
        -:   61:
function _ZL10isArrayVarPK5Token called 0 returned 0% blocks executed 0%
    #####:   62:static bool isArrayVar(const Token *tok)
        -:   63:{
    #####:   64:    const Variable *var = tok->variable();
call    0 never executed
    #####:   65:    return (var && var->isArray());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   66:}
        -:   67:
function _ZL11isRefPtrArgPK5Token called 0 returned 0% blocks executed 0%
    #####:   68:static bool isRefPtrArg(const Token *tok)
        -:   69:{
    #####:   70:    const Variable *var = tok->variable();
call    0 never executed
    #####:   71:    return (var && var->isArgument() && var->isReference() && var->isPointer());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:   72:}
        -:   73:
function _ZL17isNonReferenceArgPK5Token called 0 returned 0% blocks executed 0%
    #####:   74:static bool isNonReferenceArg(const Token *tok)
        -:   75:{
    #####:   76:    const Variable *var = tok->variable();
call    0 never executed
    #####:   77:    return (var && var->isArgument() && !var->isReference() && (var->isPointer() || var->valueType()->type >= ValueType::Type::CONTAINER || var->type()));
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
        -:   78:}
        -:   79:
function _ZL9isAutoVarPK5Token called 0 returned 0% blocks executed 0%
    #####:   80:static bool isAutoVar(const Token *tok)
        -:   81:{
    #####:   82:    const Variable *var = tok->variable();
call    0 never executed
        -:   83:
    #####:   84:    if (!var || !var->isLocal() || var->isStatic())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:   85:        return false;
        -:   86:
    #####:   87:    if (var->isReference()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   88:        // address of reference variable can be taken if the address
        -:   89:        // of the variable it points at is not a auto-var
        -:   90:        // TODO: check what the reference variable references.
    #####:   91:        return false;
        -:   92:    }
        -:   93:
    #####:   94:    if (Token::Match(tok, "%name% .|::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:        do {
    #####:   96:            tok = tok->tokAt(2);
call    0 never executed
    #####:   97:        } while (Token::Match(tok, "%name% .|::"));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   98:        if (Token::Match(tok, "%name% ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   99:            return false;
        -:  100:    }
    #####:  101:    return true;
        -:  102:}
        -:  103:
function _ZL14isAutoVarArrayPK5Token called 0 returned 0% blocks executed 0%
    #####:  104:static bool isAutoVarArray(const Token *tok)
        -:  105:{
    #####:  106:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  107:        return false;
        -:  108:
        -:  109:    // &x[..]
    #####:  110:    if (tok->isUnaryOp("&") && Token::simpleMatch(tok->astOperand1(), "["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
    #####:  111:        return isAutoVarArray(tok->astOperand1()->astOperand1());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  112:
        -:  113:    // x+y
    #####:  114:    if (tok->str() == "+")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  115:        return isAutoVarArray(tok->astOperand1()) || isAutoVarArray(tok->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  116:
        -:  117:    // x-intexpr
    #####:  118:    if (tok->str() == "-")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  119:        return isAutoVarArray(tok->astOperand1()) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  120:               tok->astOperand2() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  121:               tok->astOperand2()->valueType() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  122:               tok->astOperand2()->valueType()->isIntegral();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  123:
    #####:  124:    const Variable *var = tok->variable();
call    0 never executed
    #####:  125:    if (!var)
branch  0 never executed
branch  1 never executed
    #####:  126:        return false;
        -:  127:
        -:  128:    // Variable
    #####:  129:    if (var->isLocal() && !var->isStatic() && var->isArray() && !var->isPointer())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  130:        return true;
        -:  131:
        -:  132:    // ValueFlow
    #####:  133:    if (var->isPointer() && !var->isArgument()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  134:        for (std::list<ValueFlow::Value>::const_iterator it = tok->values().begin(); it != tok->values().end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####:  135:            const ValueFlow::Value &val = *it;
call    0 never executed
    #####:  136:            if (val.isTokValue() && isAutoVarArray(val.tokvalue))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  137:                return true;
        -:  138:        }
        -:  139:    }
        -:  140:
    #####:  141:    return false;
        -:  142:}
        -:  143:
        -:  144:// Verification that we really take the address of a local variable
function _ZL21checkRvalueExpressionPK5Token called 0 returned 0% blocks executed 0%
    #####:  145:static bool checkRvalueExpression(const Token * const vartok)
        -:  146:{
    #####:  147:    const Variable * const var = vartok->variable();
call    0 never executed
    #####:  148:    if (var == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  149:        return false;
        -:  150:
    #####:  151:    if (Token::Match(vartok->previous(), "& %name% [") && var->isPointer())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  152:        return false;
        -:  153:
    #####:  154:    const Token * const next = vartok->next();
call    0 never executed
        -:  155:    // &a.b[0]
    #####:  156:    if (Token::Match(vartok, "%name% . %var% [") && !var->isPointer()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  157:        const Variable *var2 = next->next()->variable();
call    0 never executed
call    1 never executed
    #####:  158:        return var2 && !var2->isPointer();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  159:    }
        -:  160:
    #####:  161:    return ((next->str() != "." || (!var->isPointer() && (!var->isClass() || var->type()))) && next->strAt(2) != ".");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
        -:  162:}
        -:  163:
function _ZL24isAddressOfLocalVariablePK5Token called 0 returned 0% blocks executed 0%
    #####:  164:static bool isAddressOfLocalVariable(const Token *expr)
        -:  165:{
    #####:  166:    if (!expr)
branch  0 never executed
branch  1 never executed
    #####:  167:        return false;
    #####:  168:    if (Token::Match(expr, "+|-"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  169:        return isAddressOfLocalVariable(expr->astOperand1()) || isAddressOfLocalVariable(expr->astOperand2());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  170:    if (expr->isCast())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  171:        return isAddressOfLocalVariable(expr->astOperand2() ? expr->astOperand2() : expr->astOperand1());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  172:    if (expr->isUnaryOp("&")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  173:        const Token *op = expr->astOperand1();
call    0 never executed
    #####:  174:        bool deref = false;
    #####:  175:        while (Token::Match(op, ".|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:            if (op->originalName() == "->")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  177:                return false;
    #####:  178:            if (op->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  179:                deref = true;
    #####:  180:            op = op->astOperand1();
call    0 never executed
        -:  181:        }
    #####:  182:        return op && isAutoVar(op) && (!deref || !op->variable()->isPointer());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:  183:    }
    #####:  184:    return false;
        -:  185:}
        -:  186:
function _ZL21variableIsUsedInScopePK5TokeniPK5Scope called 0 returned 0% blocks executed 0%
    #####:  187:static bool variableIsUsedInScope(const Token* start, nonneg int varId, const Scope *scope)
        -:  188:{
    #####:  189:    if (!start) // Ticket #5024
branch  0 never executed
branch  1 never executed
    #####:  190:        return false;
        -:  191:
    #####:  192:    for (const Token *tok = start; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  193:        if (tok->varId() == varId)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  194:            return true;
    #####:  195:        const Scope::ScopeType scopeType = tok->scope()->type;
call    0 never executed
    #####:  196:        if (scopeType == Scope::eFor || scopeType == Scope::eDo || scopeType == Scope::eWhile) // In case of loops, better checking would be necessary
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  197:            return true;
    #####:  198:        if (Token::simpleMatch(tok, "asm ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  199:            return true;
        -:  200:    }
    #####:  201:    return false;
        -:  202:}
        -:  203:
function _ZN18CheckAutoVariables17assignFunctionArgEv called 0 returned 0% blocks executed 0%
    #####:  204:void CheckAutoVariables::assignFunctionArg()
        -:  205:{
    #####:  206:    const bool printStyle = mSettings->isEnabled(Settings::STYLE);
call    0 never executed
    #####:  207:    const bool printWarning = mSettings->isEnabled(Settings::WARNING);
call    0 never executed
    #####:  208:    if (!printStyle && !printWarning)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  209:        return;
        -:  210:
    #####:  211:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  212:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  213:        for (const Token *tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  214:            // TODO: What happens if this is removed?
    #####:  215:            if (tok->astParent())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:                continue;
    #####:  217:            if (!(tok->isAssignmentOp() || Token::Match(tok, "++|--")) || !Token::Match(tok->astOperand1(), "%var%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  218:                continue;
    #####:  219:            const Token* const vartok = tok->astOperand1();
call    0 never executed
    #####:  220:            if (isNonReferenceArg(vartok) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  221:                !Token::Match(vartok->next(), "= %varid% ;", vartok->varId()) &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  222:                !variableIsUsedInScope(Token::findsimplematch(vartok->next(), ";"), vartok->varId(), scope) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  223:                !Token::findsimplematch(vartok, "goto", scope->bodyEnd)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  224:                if (vartok->variable()->isPointer() && printWarning)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  225:                    errorUselessAssignmentPtrArg(vartok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  226:                else if (printStyle)
branch  0 never executed
branch  1 never executed
    #####:  227:                    errorUselessAssignmentArg(vartok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  228:            }
        -:  229:        }
        -:  230:    }
        -:  231:}
        -:  232:
function _ZN18CheckAutoVariables13autoVariablesEv called 0 returned 0% blocks executed 0%
    #####:  233:void CheckAutoVariables::autoVariables()
        -:  234:{
    #####:  235:    const bool printInconclusive = mSettings->inconclusive;
    #####:  236:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  237:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  238:        for (const Token *tok = scope->bodyStart; tok && tok != scope->bodyEnd; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  239:            // Skip lambda..
    #####:  240:            if (const Token *lambdaEndToken = findLambdaEndToken(tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  241:                tok = lambdaEndToken;
    #####:  242:                continue;
        -:  243:            }
        -:  244:            // Critical assignment
    #####:  245:            if (Token::Match(tok, "[;{}] %var% = & %var%") && isRefPtrArg(tok->next()) && isAutoVar(tok->tokAt(4))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####:  246:                if (checkRvalueExpression(tok->tokAt(4)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  247:                    errorAutoVariableAssignment(tok->next(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  248:            } else if (Token::Match(tok, "[;{}] * %var% =") && isPtrArg(tok->tokAt(2)) && isAddressOfLocalVariable(tok->tokAt(3)->astOperand2())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####:  249:                errorAutoVariableAssignment(tok->next(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  250:            } else if (Token::Match(tok, "[;{}] %var% . %var% =") && isPtrArg(tok->next()) && isAddressOfLocalVariable(tok->tokAt(4)->astOperand2())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:  251:                errorAutoVariableAssignment(tok->next(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  252:            } else if (Token::Match(tok, "[;{}] %var% . %var% = %var% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  253:                // TODO: check if the parameter is only changed temporarily (#2969)
    #####:  254:                if (printInconclusive && isPtrArg(tok->next())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  255:                    if (isAutoVarArray(tok->tokAt(5)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  256:                        errorAutoVariableAssignment(tok->next(), true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  257:                }
    #####:  258:                tok = tok->tokAt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  259:            } else if (Token::Match(tok, "[;{}] * %var% = %var% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  260:                const Variable * var1 = tok->tokAt(2)->variable();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  261:                if (var1 && var1->isArgument() && Token::Match(var1->nameToken()->tokAt(-3), "%type% * *")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  262:                    if (isAutoVarArray(tok->tokAt(4)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  263:                        errorAutoVariableAssignment(tok->next(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  264:                }
    #####:  265:                tok = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  266:            } else if (Token::Match(tok, "[;{}] %var% [") && Token::simpleMatch(tok->linkAt(2), "] =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  267:                       (isPtrArg(tok->next()) || isArrayArg(tok->next())) && isAddressOfLocalVariable(tok->linkAt(2)->next()->astOperand2())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  268:                errorAutoVariableAssignment(tok->next(), false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  269:            }
        -:  270:            // Invalid pointer deallocation
    #####:  271:            else if ((Token::Match(tok, "%name% ( %var% ) ;") && mSettings->library.getDeallocFuncInfo(tok)) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  272:                     (mTokenizer->isCPP() && Token::Match(tok, "delete [| ]| (| %var% !!["))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  273:                tok = Token::findmatch(tok->next(), "%var%");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  274:                if (isArrayVar(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  275:                    errorInvalidDeallocation(tok, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  276:                else if (tok && tok->variable() && tok->variable()->isPointer()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  277:                    for (const ValueFlow::Value &v : tok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  278:                        if (v.isTokValue() && isArrayVar(v.tokvalue)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  279:                            errorInvalidDeallocation(tok, &v);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:                            break;
        -:  281:                        }
        -:  282:                    }
        -:  283:                }
    #####:  284:            } else if ((Token::Match(tok, "%name% ( & %var% ) ;") && mSettings->library.getDeallocFuncInfo(tok)) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  285:                       (mTokenizer->isCPP() && Token::Match(tok, "delete [| ]| (| & %var% !!["))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  286:                tok = Token::findmatch(tok->next(), "%var%");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  287:                if (isAutoVar(tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  288:                    errorInvalidDeallocation(tok, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:            }
        -:  290:        }
        -:  291:    }
    #####:  292:}
        -:  293:
        -:  294://---------------------------------------------------------------------------
        -:  295:
function _ZN18CheckAutoVariables32errorReturnAddressToAutoVariableEPK5Token called 0 returned 0% blocks executed 0%
    #####:  296:void CheckAutoVariables::errorReturnAddressToAutoVariable(const Token *tok)
        -:  297:{
    #####:  298:    reportError(tok, Severity::error, "returnAddressOfAutoVariable", "Address of an auto-variable returned.", CWE562, false);
call    0 never executed
    #####:  299:}
        -:  300:
function _ZN18CheckAutoVariables32errorReturnAddressToAutoVariableEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####:  301:void CheckAutoVariables::errorReturnAddressToAutoVariable(const Token *tok, const ValueFlow::Value *value)
        -:  302:{
    #####:  303:    reportError(tok, Severity::error, "returnAddressOfAutoVariable", "Address of auto-variable '" + value->tokvalue->astOperand1()->expressionString() + "' returned", CWE562, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####:  304:}
        -:  305:
function _ZN18CheckAutoVariables30errorReturnPointerToLocalArrayEPK5Token called 0 returned 0% blocks executed 0%
    #####:  306:void CheckAutoVariables::errorReturnPointerToLocalArray(const Token *tok)
        -:  307:{
    #####:  308:    reportError(tok, Severity::error, "returnLocalVariable", "Pointer to local array variable returned.", CWE562, false);
call    0 never executed
    #####:  309:}
        -:  310:
function _ZN18CheckAutoVariables27errorAutoVariableAssignmentEPK5Tokenb called 0 returned 0% blocks executed 0%
    #####:  311:void CheckAutoVariables::errorAutoVariableAssignment(const Token *tok, bool inconclusive)
        -:  312:{
    #####:  313:    if (!inconclusive) {
branch  0 never executed
branch  1 never executed
    #####:  314:        reportError(tok, Severity::error, "autoVariables",
call    0 never executed
        -:  315:                    "Address of local auto-variable assigned to a function parameter.\n"
        -:  316:                    "Dangerous assignment - the function parameter is assigned the address of a local "
        -:  317:                    "auto-variable. Local auto-variables are reserved from the stack which "
        -:  318:                    "is freed when the function ends. So the pointer to a local variable "
        -:  319:                    "is invalid after the function ends.", CWE562, false);
        -:  320:    } else {
    #####:  321:        reportError(tok, Severity::error, "autoVariables",
call    0 never executed
        -:  322:                    "Address of local auto-variable assigned to a function parameter.\n"
        -:  323:                    "Function parameter is assigned the address of a local auto-variable. "
        -:  324:                    "Local auto-variables are reserved from the stack which is freed when "
        -:  325:                    "the function ends. The address is invalid after the function ends and it "
        -:  326:                    "might 'leak' from the function through the parameter.",
        -:  327:                    CWE562,
        -:  328:                    true);
        -:  329:    }
    #####:  330:}
        -:  331:
function _ZN18CheckAutoVariables37errorReturnAddressOfFunctionParameterEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  332:void CheckAutoVariables::errorReturnAddressOfFunctionParameter(const Token *tok, const std::string &varname)
        -:  333:{
    #####:  334:    reportError(tok, Severity::error, "returnAddressOfFunctionParameter",
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  335:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  336:                "Address of function parameter '$symbol' returned.\n"
        -:  337:                "Address of the function parameter '$symbol' becomes invalid after the function exits because "
        -:  338:                "function parameters are stored on the stack which is freed when the function exits. Thus the returned "
        -:  339:                "value is invalid.", CWE562, false);
    #####:  340:}
        -:  341:
function _ZN18CheckAutoVariables25errorUselessAssignmentArgEPK5Token called 0 returned 0% blocks executed 0%
    #####:  342:void CheckAutoVariables::errorUselessAssignmentArg(const Token *tok)
        -:  343:{
    #####:  344:    reportError(tok,
call    0 never executed
        -:  345:                Severity::style,
        -:  346:                "uselessAssignmentArg",
        -:  347:                "Assignment of function parameter has no effect outside the function.", CWE398, false);
    #####:  348:}
        -:  349:
function _ZN18CheckAutoVariables28errorUselessAssignmentPtrArgEPK5Token called 0 returned 0% blocks executed 0%
    #####:  350:void CheckAutoVariables::errorUselessAssignmentPtrArg(const Token *tok)
        -:  351:{
    #####:  352:    reportError(tok,
call    0 never executed
        -:  353:                Severity::warning,
        -:  354:                "uselessAssignmentPtrArg",
        -:  355:                "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?", CWE398, false);
    #####:  356:}
        -:  357:
        -:  358://---------------------------------------------------------------------------
        -:  359:
function _ZL16astHasAutoResultPK5Token called 0 returned 0% blocks executed 0%
    #####:  360:static bool astHasAutoResult(const Token *tok)
        -:  361:{
    #####:  362:    if (tok->astOperand1() && !astHasAutoResult(tok->astOperand1()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  363:        return false;
    #####:  364:    if (tok->astOperand2() && !astHasAutoResult(tok->astOperand2()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  365:        return false;
        -:  366:
    #####:  367:    if (tok->isOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  368:        if (tok->tokType() == Token::eIncDecOp)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  369:            return false;
    #####:  370:        if ((tok->str() == "<<" || tok->str() == ">>") && tok->astOperand1()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  371:            const Token* tok2 = tok->astOperand1();
call    0 never executed
    #####:  372:            while (tok2 && tok2->isUnaryOp("*"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####:  373:                tok2 = tok2->astOperand1();
call    0 never executed
    #####:  374:            return tok2 && tok2->variable() && !tok2->variable()->isClass() && !tok2->variable()->isStlType(); // Class or unknown type on LHS: Assume it is a stream
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
        -:  375:        }
    #####:  376:        return true;
        -:  377:    }
        -:  378:
    #####:  379:    if (tok->isLiteral())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  380:        return true;
        -:  381:
    #####:  382:    if (tok->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  383:        // TODO: check function calls, struct members, arrays, etc also
    #####:  384:        if (!tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  385:            return false;
    #####:  386:        if (tok->variable()->isStlType())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  387:            return true;
    #####:  388:        if (tok->variable()->isClass() || tok->variable()->isPointer() || tok->variable()->isReference()) // TODO: Properly handle pointers/references to classes in symbol database
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  389:            return false;
        -:  390:
    #####:  391:        return true;
        -:  392:    }
        -:  393:
    #####:  394:    return false;
        -:  395:}
        -:  396:
function _ZL9isInScopePK5TokenPK5Scope called 0 returned 0% blocks executed 0%
    #####:  397:static bool isInScope(const Token * tok, const Scope * scope)
        -:  398:{
    #####:  399:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  400:        return false;
    #####:  401:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####:  402:        return false;
    #####:  403:    const Variable * var = tok->variable();
call    0 never executed
    #####:  404:    if (var && (var->isGlobal() || var->isStatic() || var->isExtern()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  405:        return false;
    #####:  406:    if (tok->scope() && tok->scope()->isNestedIn(scope))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  407:        return true;
    #####:  408:    if (!var)
branch  0 never executed
branch  1 never executed
    #####:  409:        return false;
    #####:  410:    if (var->isArgument() && !var->isReference()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  411:        const Scope * tokScope = tok->scope();
call    0 never executed
    #####:  412:        if (!tokScope)
branch  0 never executed
branch  1 never executed
    #####:  413:            return false;
    #####:  414:        for (const Scope * argScope:tokScope->nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####:  415:            if (argScope && argScope->isNestedIn(scope))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  416:                return true;
        -:  417:        }
        -:  418:    }
    #####:  419:    return false;
        -:  420:}
        -:  421:
function _ZL11isDeadScopePK5TokenPK5Scope called 0 returned 0% blocks executed 0%
    #####:  422:static bool isDeadScope(const Token * tok, const Scope * scope)
        -:  423:{
    #####:  424:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  425:        return false;
    #####:  426:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####:  427:        return false;
    #####:  428:    const Variable * var = tok->variable();
call    0 never executed
    #####:  429:    if (var && (!var->isLocal() || var->isStatic() || var->isExtern()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  430:        return false;
    #####:  431:    if (tok->scope() && tok->scope()->bodyEnd != scope->bodyEnd && precedes(tok->scope()->bodyEnd, scope->bodyEnd))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  432:        return true;
    #####:  433:    return false;
        -:  434:}
        -:  435:
function _ZL15getPointerDepthPK5Token called 0 returned 0% blocks executed 0%
    #####:  436:static int getPointerDepth(const Token *tok)
        -:  437:{
    #####:  438:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  439:        return 0;
    #####:  440:    return tok->valueType() ? tok->valueType()->pointer : 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  441:}
        -:  442:
function _ZL15isDeadTemporarybPK5TokenS1_ called 0 returned 0% blocks executed 0%
    #####:  443:static bool isDeadTemporary(bool cpp, const Token* tok, const Token* expr)
        -:  444:{
    #####:  445:    if (!isTemporary(cpp, tok))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  446:        return false;
    #####:  447:    if (expr && !precedes(nextAfterAstRightmostLeaf(tok->astTop()), nextAfterAstRightmostLeaf(expr->astTop())))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  448:        return false;
    #####:  449:    return true;
        -:  450:}
        -:  451:
function _ZN18CheckAutoVariables21checkVarLifetimeScopeEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  452:void CheckAutoVariables::checkVarLifetimeScope(const Token * start, const Token * end)
        -:  453:{
    #####:  454:    if (!start)
branch  0 never executed
branch  1 never executed
    #####:  455:        return;
    #####:  456:    const Scope * scope = start->scope();
call    0 never executed
    #####:  457:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####:  458:        return;
        -:  459:    // If the scope is not set correctly then skip checking it
    #####:  460:    if (scope->bodyStart != start)
branch  0 never executed
branch  1 never executed
    #####:  461:        return;
    #####:  462:    bool returnRef = Function::returnsReference(scope->function);
call    0 never executed
    #####:  463:    for (const Token *tok = start; tok && tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  464:        // Return reference from function
    #####:  465:        if (returnRef && Token::simpleMatch(tok->astParent(), "return")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  466:            for (const LifetimeToken& lt : getLifetimeTokens(tok)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  467:                const Variable* var = lt.token->variable();
call    0 never executed
    #####:  468:                if (var && !var->isGlobal() && !var->isStatic() && !var->isReference() && !var->isRValueReference() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:  469:                    isInScope(var->nameToken(), tok->scope())) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  470:                    errorReturnReference(tok, lt.errorPath, lt.inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  471:                    break;
    #####:  472:                } else if (isDeadTemporary(mTokenizer->isCPP(), lt.token, nullptr)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  473:                    errorReturnTempReference(tok, lt.errorPath, lt.inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  474:                    break;
        -:  475:                }
        -:  476:            }
        -:  477:            // Assign reference to non-local variable
    #####:  478:        } else if (Token::Match(tok->previous(), "&|&& %var% =") && tok->astParent() == tok->next() &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  479:                   tok->variable() && tok->variable()->nameToken() == tok &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  480:                   tok->variable()->declarationId() == tok->varId() && tok->variable()->isStatic() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  481:                   !tok->variable()->isArgument()) {
call    0 never executed
call    1 never executed
    #####:  482:            ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  483:            const Variable *var = getLifetimeVariable(tok, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  484:            if (var && isInScope(var->nameToken(), tok->scope())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  485:                errorDanglingReference(tok, var, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  486:                continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  487:            }
        -:  488:        }
    #####:  489:        for (const ValueFlow::Value& val:tok->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  490:            if (!val.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  491:                continue;
    #####:  492:            if (Token::Match(tok->astParent(), "return|throw")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  493:                if (getPointerDepth(tok) < getPointerDepth(val.tokvalue))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  494:                    continue;
    #####:  495:                if (!isLifetimeBorrowed(tok, mSettings))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  496:                    continue;
    #####:  497:                if ((val.tokvalue->variable() && isInScope(val.tokvalue->variable()->nameToken(), scope)) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  498:                    isDeadTemporary(mTokenizer->isCPP(), val.tokvalue, tok)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  499:                    errorReturnDanglingLifetime(tok, &val);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  500:                    break;
        -:  501:                }
    #####:  502:            } else if (val.tokvalue->variable() && isDeadScope(val.tokvalue->variable()->nameToken(), tok->scope())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  503:                errorInvalidLifetime(tok, &val);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  504:                break;
    #####:  505:            } else if (!val.tokvalue->variable() && isDeadTemporary(mTokenizer->isCPP(), val.tokvalue, tok)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  506:                errorDanglingTemporaryLifetime(tok, &val);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  507:                break;
    #####:  508:            } else if (val.tokvalue->variable() && isInScope(val.tokvalue->variable()->nameToken(), tok->scope())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  509:                const Variable * var = nullptr;
    #####:  510:                const Token * tok2 = tok;
    #####:  511:                if (Token::simpleMatch(tok->astParent(), "=")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  512:                    if (tok->astParent()->astOperand2() == tok) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  513:                        var = getLHSVariable(tok->astParent());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  514:                        tok2 = tok->astParent()->astOperand1();
call    0 never executed
call    1 never executed
        -:  515:                    }
    #####:  516:                } else if (tok->variable() && tok->variable()->declarationId() == tok->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  517:                    var = tok->variable();
call    0 never executed
        -:  518:                }
    #####:  519:                if (!isLifetimeBorrowed(tok, mSettings))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  520:                    continue;
    #####:  521:                if (var && !var->isLocal() && !var->isArgument() && !isVariableChanged(tok->next(), tok->scope()->bodyEnd, var->declarationId(), var->isGlobal(), mSettings, mTokenizer->isCPP())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####:  522:                    errorDanglngLifetime(tok2, &val);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  523:                    break;
        -:  524:                }
        -:  525:            }
        -:  526:        }
    #####:  527:        const Token *lambdaEndToken = findLambdaEndToken(tok);
call    0 never executed
    #####:  528:        if (lambdaEndToken) {
branch  0 never executed
branch  1 never executed
    #####:  529:            checkVarLifetimeScope(lambdaEndToken->link(), lambdaEndToken);
call    0 never executed
call    1 never executed
    #####:  530:            tok = lambdaEndToken;
        -:  531:        }
    #####:  532:        if (tok->str() == "{" && tok->scope()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  533:            // Check functions in local classes
    #####:  534:            if (tok->scope()->type == Scope::eClass ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  535:                tok->scope()->type == Scope::eStruct ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  536:                tok->scope()->type == Scope::eUnion) {
call    0 never executed
    #####:  537:                for (const Function& f:tok->scope()->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  538:                    if (f.functionScope)
branch  0 never executed
branch  1 never executed
    #####:  539:                        checkVarLifetimeScope(f.functionScope->bodyStart, f.functionScope->bodyEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  540:                }
    #####:  541:                tok = tok->link();
call    0 never executed
        -:  542:            }
        -:  543:        }
        -:  544:    }
        -:  545:}
        -:  546:
function _ZN18CheckAutoVariables16checkVarLifetimeEv called 0 returned 0% blocks executed 0%
    #####:  547:void CheckAutoVariables::checkVarLifetime()
        -:  548:{
    #####:  549:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
    #####:  550:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  551:        if (!scope->function)
branch  0 never executed
branch  1 never executed
    #####:  552:            continue;
    #####:  553:        checkVarLifetimeScope(scope->bodyStart, scope->bodyEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  554:    }
    #####:  555:}
        -:  556:
function _ZN18CheckAutoVariables27errorReturnDanglingLifetimeEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####:  557:void CheckAutoVariables::errorReturnDanglingLifetime(const Token *tok, const ValueFlow::Value *val)
        -:  558:{
    #####:  559:    const bool inconclusive = val ? val->isInconclusive() : false;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  560:    ErrorPath errorPath = val ? val->errorPath : ErrorPath();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  561:    std::string msg = "Returning " + lifetimeMessage(tok, val, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  562:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  563:    reportError(errorPath, Severity::error, "returnDanglingLifetime", msg + " that will be invalid when returning.", CWE562, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  564:}
call    0 never executed
        -:  565:
function _ZN18CheckAutoVariables20errorInvalidLifetimeEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####:  566:void CheckAutoVariables::errorInvalidLifetime(const Token *tok, const ValueFlow::Value* val)
        -:  567:{
    #####:  568:    const bool inconclusive = val ? val->isInconclusive() : false;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  569:    ErrorPath errorPath = val ? val->errorPath : ErrorPath();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  570:    std::string msg = "Using " + lifetimeMessage(tok, val, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  571:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  572:    reportError(errorPath, Severity::error, "invalidLifetime", msg + " that is out of scope.", CWE562, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  573:}
call    0 never executed
        -:  574:
function _ZN18CheckAutoVariables30errorDanglingTemporaryLifetimeEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####:  575:void CheckAutoVariables::errorDanglingTemporaryLifetime(const Token* tok, const ValueFlow::Value* val)
        -:  576:{
    #####:  577:    const bool inconclusive = val ? val->isInconclusive() : false;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  578:    ErrorPath errorPath = val ? val->errorPath : ErrorPath();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  579:    std::string msg = "Using " + lifetimeMessage(tok, val, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  580:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  581:    reportError(errorPath, Severity::error, "danglingTemporaryLifetime", msg + " to temporary.", CWE562, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  582:}
call    0 never executed
        -:  583:
function _ZN18CheckAutoVariables20errorDanglngLifetimeEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####:  584:void CheckAutoVariables::errorDanglngLifetime(const Token *tok, const ValueFlow::Value *val)
        -:  585:{
    #####:  586:    const bool inconclusive = val ? val->isInconclusive() : false;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  587:    ErrorPath errorPath = val ? val->errorPath : ErrorPath();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  588:    std::string tokName = tok ? tok->expressionString() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####:  589:    std::string msg = "Non-local variable '" + tokName + "' will use " + lifetimeMessage(tok, val, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  590:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  591:    reportError(errorPath, Severity::error, "danglingLifetime", msg + ".", CWE562, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  592:}
        -:  593:
function _ZN18CheckAutoVariables20errorReturnReferenceEPK5TokenNSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEEb called 0 returned 0% blocks executed 0%
    #####:  594:void CheckAutoVariables::errorReturnReference(const Token* tok, ErrorPath errorPath, bool inconclusive)
        -:  595:{
    #####:  596:    errorPath.emplace_back(tok, "");
call    0 never executed
    #####:  597:    reportError(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  598:        errorPath, Severity::error, "returnReference", "Reference to local variable returned.", CWE562, inconclusive);
    #####:  599:}
        -:  600:
function _ZN18CheckAutoVariables22errorDanglingReferenceEPK5TokenPK8VariableNSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISF_EEE called 0 returned 0% blocks executed 0%
    #####:  601:void CheckAutoVariables::errorDanglingReference(const Token *tok, const Variable *var, ErrorPath errorPath)
        -:  602:{
    #####:  603:    std::string tokName = tok ? tok->str() : "x";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####:  604:    std::string varName = var ? var->name() : "y";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  605:    std::string msg = "Non-local reference variable '" + tokName + "' to local variable '" + varName + "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  606:    errorPath.emplace_back(tok, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  607:    reportError(errorPath, Severity::error, "danglingReference", msg, CWE562, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  608:}
        -:  609:
function _ZN18CheckAutoVariables24errorReturnTempReferenceEPK5TokenNSt7__debug4listISt4pairIS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISC_EEEb called 0 returned 0% blocks executed 0%
    #####:  610:void CheckAutoVariables::errorReturnTempReference(const Token* tok, ErrorPath errorPath, bool inconclusive)
        -:  611:{
    #####:  612:    errorPath.emplace_back(tok, "");
call    0 never executed
    #####:  613:    reportError(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  614:        errorPath, Severity::error, "returnTempReference", "Reference to temporary returned.", CWE562, inconclusive);
    #####:  615:}
        -:  616:
function _ZN18CheckAutoVariables24errorInvalidDeallocationEPK5TokenPKN9ValueFlow5ValueE called 0 returned 0% blocks executed 0%
    #####:  617:void CheckAutoVariables::errorInvalidDeallocation(const Token *tok, const ValueFlow::Value *val)
        -:  618:{
    #####:  619:    const Variable *var = val ? val->tokvalue->variable() : (tok ? tok->variable() : nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  620:
    #####:  621:    std::string type = "auto-variable";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  622:    if (var) {
branch  0 never executed
branch  1 never executed
    #####:  623:        if (var->isGlobal())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  624:            type = "global variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  625:        else if (var->isStatic())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  626:            type = "static variable";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  627:    }
        -:  628:
    #####:  629:    if (val)
branch  0 never executed
branch  1 never executed
    #####:  630:        type += " (" + val->tokvalue->str() + ")";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  631:
    #####:  632:    reportError(getErrorPath(tok, val, "Deallocating memory that was not dynamically allocated"),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  633:                Severity::error,
        -:  634:                "autovarInvalidDeallocation",
    #####:  635:                "Deallocation of an " + type + " results in undefined behaviour.\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  636:                "The deallocation of an " + type + " results in undefined behaviour. You should only free memory "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  637:                "that has been allocated dynamically.", CWE590, false);
function _GLOBAL__sub_I__ZN18CheckAutoVariables17assignFunctionArgEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  638:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
