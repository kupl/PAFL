        -:    0:Source:/home/workspace/lib/checkfunctions.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkfunctions.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkfunctions.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkfunctionsH
        -:   22:#define checkfunctionsH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:#include "errorlogger.h"
        -:   28:#include "library.h"
        -:   29:#include "settings.h"
        -:   30:
        -:   31:#include <map>
        -:   32:#include <string>
        -:   33:#include <utility>
        -:   34:
        -:   35:class Token;
        -:   36:class Tokenizer;
        -:   37:namespace ValueFlow {
        -:   38:    class Value;
        -:   39:}  // namespace ValueFlow
        -:   40:
        -:   41:
        -:   42:/// @addtogroup Checks
        -:   43:/// @{
        -:   44:
        -:   45:/**
        -:   46: * @brief Check for bad function usage
        -:   47: */
        -:   48:
function _ZN14CheckFunctionsD0Ev called 0 returned 0% blocks executed 0%
function _ZN14CheckFunctionsD2Ev called 0 returned 0% blocks executed 0%
    #####:   49:class CPPCHECKLIB CheckFunctions : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   50:public:
        -:   51:    /** This constructor is used when registering the CheckFunctions */
function _ZN14CheckFunctionsC2Ev called 1 returned 100% blocks executed 71%
        1:   52:    CheckFunctions() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   53:    }
        -:   54:
        -:   55:    /** This constructor is used when running checks. */
function _ZN14CheckFunctionsC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   56:    CheckFunctions(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   57:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   58:    }
        -:   59:
        -:   60:    /** @brief Run checks against the normal token list */
function _ZN14CheckFunctions9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   61:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   62:        CheckFunctions checkFunctions(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   63:
        -:   64:        // Checks
    #####:   65:        checkFunctions.checkIgnoredReturnValue();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   66:
        -:   67:        // --check-library : functions with nonmatching configuration
    #####:   68:        checkFunctions.checkLibraryMatchFunctions();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   69:
    #####:   70:        checkFunctions.checkProhibitedFunctions();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:        checkFunctions.invalidFunctionUsage();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:        checkFunctions.checkMathFunctions();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:        checkFunctions.memsetZeroBytes();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:        checkFunctions.memsetInvalid2ndParam();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:    }
        -:   76:
        -:   77:    /** Check for functions that should not be used */
        -:   78:    void checkProhibitedFunctions();
        -:   79:
        -:   80:    /**
        -:   81:    * @brief Invalid function usage (invalid input value / overlapping data)
        -:   82:    *
        -:   83:    * %Check that given function parameters are valid according to the standard
        -:   84:    * - wrong radix given for strtol/strtoul
        -:   85:    * - overlapping data when using sprintf/snprintf
        -:   86:    * - wrong input value according to library
        -:   87:    */
        -:   88:    void invalidFunctionUsage();
        -:   89:
        -:   90:    /** @brief %Check for ignored return values. */
        -:   91:    void checkIgnoredReturnValue();
        -:   92:
        -:   93:    /** @brief %Check for parameters given to math function that do not make sense*/
        -:   94:    void checkMathFunctions();
        -:   95:
        -:   96:    /** @brief %Check for filling zero bytes with memset() */
        -:   97:    void memsetZeroBytes();
        -:   98:
        -:   99:    /** @brief %Check for invalid 2nd parameter of memset() */
        -:  100:    void memsetInvalid2ndParam();
        -:  101:
        -:  102:    /** @brief --check-library: warn for unconfigured function calls */
        -:  103:    void checkLibraryMatchFunctions();
        -:  104:
        -:  105:private:
        -:  106:    void invalidFunctionArgError(const Token *tok, const std::string &functionName, int argnr, const ValueFlow::Value *invalidValue, const std::string &validstr);
        -:  107:    void invalidFunctionArgBoolError(const Token *tok, const std::string &functionName, int argnr);
        -:  108:    void invalidFunctionArgStrError(const Token *tok, const std::string &functionName, nonneg int argnr);
        -:  109:    void ignoredReturnValueError(const Token* tok, const std::string& function);
        -:  110:    void mathfunctionCallWarning(const Token *tok, const nonneg int numParam = 1);
        -:  111:    void mathfunctionCallWarning(const Token *tok, const std::string& oldexp, const std::string& newexp);
        -:  112:    void memsetZeroBytesError(const Token *tok);
        -:  113:    void memsetFloatError(const Token *tok, const std::string &var_value);
        -:  114:    void memsetValueOutOfRangeError(const Token *tok, const std::string &value);
        -:  115:
function _ZNK14CheckFunctions16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  116:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:  117:        CheckFunctions c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  118:
    #####:  119:        for (std::map<std::string, Library::WarnInfo>::const_iterator i = settings->library.functionwarn.cbegin(); i != settings->library.functionwarn.cend(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  120:            c.reportError(nullptr, Severity::style, i->first+"Called", i->second.message);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  121:        }
        -:  122:
    #####:  123:        c.invalidFunctionArgError(nullptr, "func_name", 1, nullptr,"1:4");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  124:        c.invalidFunctionArgBoolError(nullptr, "func_name", 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  125:        c.invalidFunctionArgStrError(nullptr, "func_name", 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  126:        c.ignoredReturnValueError(nullptr, "malloc");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  127:        c.mathfunctionCallWarning(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  128:        c.mathfunctionCallWarning(nullptr, "1 - erf(x)", "erfc(x)");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  129:        c.memsetZeroBytesError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:        c.memsetFloatError(nullptr,  "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  131:        c.memsetValueOutOfRangeError(nullptr,  "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  132:    }
        -:  133:
function _ZN14CheckFunctions6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  134:    static std::string myName() {
    #####:  135:        return "Check function usage";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  136:    }
        -:  137:
function _ZNK14CheckFunctions9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  138:    std::string classInfo() const OVERRIDE {
        -:  139:        return "Check function usage:\n"
        -:  140:               "- return value of certain functions not used\n"
        -:  141:               "- invalid input values for functions\n"
        -:  142:               "- Warn if a function is called whose usage is discouraged\n"
        -:  143:               "- memset() third argument is zero\n"
        -:  144:               "- memset() with a value out of range as the 2nd parameter\n"
    #####:  145:               "- memset() with a float as the 2nd parameter\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  146:    }
        -:  147:};
        -:  148:/// @}
        -:  149://---------------------------------------------------------------------------
        -:  150:#endif // checkfunctionsH
