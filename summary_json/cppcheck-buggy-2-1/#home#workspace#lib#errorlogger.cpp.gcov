        -:    0:Source:/home/workspace/lib/errorlogger.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/errorlogger.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/errorlogger.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "errorlogger.h"
        -:   20:
        -:   21:#include "cppcheck.h"
        -:   22:#include "mathlib.h"
        -:   23:#include "path.h"
        -:   24:#include "token.h"
        -:   25:#include "tokenlist.h"
        -:   26:#include "utils.h"
        -:   27:
        -:   28:#include <tinyxml2.h>
        -:   29:#include <array>
        -:   30:#include <cassert>
        -:   31:#include <cctype>
        -:   32:#include <cstdlib>
        -:   33:#include <cstring>
        -:   34:#include <iomanip>
        -:   35:
function _ZN13InternalErrorC2EPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeE called 0 returned 0% blocks executed 0%
    #####:   36:InternalError::InternalError(const Token *tok, const std::string &errorMsg, Type type) :
    #####:   37:    token(tok), errorMessage(errorMsg), type(type)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:   38:{
    #####:   39:    switch (type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:   40:    case AST:
    #####:   41:        id = "internalAstError";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   42:        break;
    #####:   43:    case SYNTAX:
    #####:   44:        id = "syntaxError";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:        break;
    #####:   46:    case UNKNOWN_MACRO:
    #####:   47:        id = "unknownMacro";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   48:        break;
    #####:   49:    case INTERNAL:
    #####:   50:        id = "cppcheckError";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   51:        break;
    #####:   52:    case LIMIT:
    #####:   53:        id = "cppcheckLimit";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   54:        break;
    #####:   55:    case INSTANTIATION:
    #####:   56:        id = "instantiationError";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   57:        break;
        -:   58:    }
    #####:   59:}
        -:   60:
function _ZN11ErrorLogger12ErrorMessageC2Ev called 0 returned 0% blocks executed 0%
    #####:   61:ErrorLogger::ErrorMessage::ErrorMessage()
    #####:   62:    : severity(Severity::none), cwe(0U), inconclusive(false)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   63:{
    #####:   64:}
        -:   65:
function _ZN11ErrorLogger12ErrorMessageC2ERKNSt7__debug4listINS0_12FileLocationESaIS3_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8Severity12SeverityTypeESF_SF_b called 0 returned 0% blocks executed 0%
    #####:   66:ErrorLogger::ErrorMessage::ErrorMessage(const std::list<FileLocation> &callStack, const std::string& file1, Severity::SeverityType severity, const std::string &msg, const std::string &id, bool inconclusive) :
        -:   67:    callStack(callStack), // locations for this error message
        -:   68:    id(id),               // set the message id
        -:   69:    file0(file1),
        -:   70:    severity(severity),   // severity for this error message
        -:   71:    cwe(0U),
    #####:   72:    inconclusive(inconclusive)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:   73:{
        -:   74:    // set the summary and verbose messages
    #####:   75:    setmsg(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:}
        -:   77:
        -:   78:
        -:   79:
function _ZN11ErrorLogger12ErrorMessageC2ERKNSt7__debug4listINS0_12FileLocationESaIS3_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8Severity12SeverityTypeESF_SF_RK3CWEb called 0 returned 0% blocks executed 0%
    #####:   80:ErrorLogger::ErrorMessage::ErrorMessage(const std::list<FileLocation> &callStack, const std::string& file1, Severity::SeverityType severity, const std::string &msg, const std::string &id, const CWE &cwe, bool inconclusive) :
        -:   81:    callStack(callStack), // locations for this error message
        -:   82:    id(id),               // set the message id
        -:   83:    file0(file1),
        -:   84:    severity(severity),   // severity for this error message
    #####:   85:    cwe(cwe.id),
    #####:   86:    inconclusive(inconclusive)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:   87:{
        -:   88:    // set the summary and verbose messages
    #####:   89:    setmsg(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   90:}
        -:   91:
function _ZN11ErrorLogger12ErrorMessageC2ERKNSt7__debug4listIPK5TokenSaIS5_EEEPK9TokenListN8Severity12SeverityTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESM_b called 0 returned 0% blocks executed 0%
    #####:   92:ErrorLogger::ErrorMessage::ErrorMessage(const std::list<const Token*>& callstack, const TokenList* list, Severity::SeverityType severity, const std::string& id, const std::string& msg, bool inconclusive)
    #####:   93:    : id(id), severity(severity), cwe(0U), inconclusive(inconclusive)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:   94:{
        -:   95:    // Format callstack
    #####:   96:    for (std::list<const Token *>::const_iterator it = callstack.begin(); it != callstack.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:   97:        // --errorlist can provide null values here
    #####:   98:        if (!(*it))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   99:            continue;
        -:  100:
    #####:  101:        callStack.emplace_back(*it, list);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  102:    }
        -:  103:
    #####:  104:    if (list && !list->getFiles().empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  105:        file0 = list->getFiles()[0];
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  106:
    #####:  107:    setmsg(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:}
        -:  109:
        -:  110:
function _ZN11ErrorLogger12ErrorMessageC2ERKNSt7__debug4listIPK5TokenSaIS5_EEEPK9TokenListN8Severity12SeverityTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESM_RK3CWEb called 263 returned 100% blocks executed 66%
      263:  111:ErrorLogger::ErrorMessage::ErrorMessage(const std::list<const Token*>& callstack, const TokenList* list, Severity::SeverityType severity, const std::string& id, const std::string& msg, const CWE &cwe, bool inconclusive)
      263:  112:    : id(id), severity(severity), cwe(cwe.id), inconclusive(inconclusive)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  113:{
        -:  114:    // Format callstack
      559:  115:    for (std::list<const Token *>::const_iterator it = callstack.begin(); it != callstack.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 53% (fallthrough)
branch  5 taken 47%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
        -:  116:        // --errorlist can provide null values here
      296:  117:        if (!(*it))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  118:            continue;
        -:  119:
      296:  120:        callStack.emplace_back(*it, list);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  121:    }
        -:  122:
      263:  123:    if (list && !list->getFiles().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      263:  124:        file0 = list->getFiles()[0];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  125:
      263:  126:    setmsg(msg);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      263:  127:}
        -:  128:
function _ZN11ErrorLogger12ErrorMessageC2ERKNSt7__debug4listISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISD_EEEPK9TokenListN8Severity12SeverityTypeEPKcRKSC_RK3CWEb called 216 returned 100% blocks executed 64%
      216:  129:ErrorLogger::ErrorMessage::ErrorMessage(const ErrorPath &errorPath, const TokenList *tokenList, Severity::SeverityType severity, const char id[], const std::string &msg, const CWE &cwe, bool inconclusive)
      216:  130:    : id(id), severity(severity), cwe(cwe.id), inconclusive(inconclusive)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -:  131:{
        -:  132:    // Format callstack
      549:  133:    for (ErrorPath::const_iterator it = errorPath.begin(); it != errorPath.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 61% (fallthrough)
branch  5 taken 39%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      333:  134:        const Token *tok = it->first;
call    0 returned 100%
      333:  135:        const std::string &info = it->second;
call    0 returned 100%
        -:  136:
        -:  137:        // --errorlist can provide null values here
      333:  138:        if (tok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      333:  139:            callStack.emplace_back(tok, info, tokenList);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  140:    }
        -:  141:
      216:  142:    if (tokenList && !tokenList->getFiles().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      216:  143:        file0 = tokenList->getFiles()[0];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  144:
      216:  145:    setmsg(msg);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      216:  146:}
        -:  147:
function _ZN11ErrorLogger12ErrorMessageC2EPKN8tinyxml210XMLElementE called 0 returned 0% blocks executed 0%
    #####:  148:ErrorLogger::ErrorMessage::ErrorMessage(const tinyxml2::XMLElement * const errmsg)
        -:  149:    : severity(Severity::none),
        -:  150:      cwe(0U),
    #####:  151:      inconclusive(false)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -:  152:{
    #####:  153:    const char * const unknown = "<UNKNOWN>";
        -:  154:
    #####:  155:    const char *attr = errmsg->Attribute("id");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  156:    id = attr ? attr : unknown;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  157:
    #####:  158:    attr = errmsg->Attribute("severity");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  159:    severity = attr ? Severity::fromString(attr) : Severity::none;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
        -:  160:
    #####:  161:    attr = errmsg->Attribute("cwe");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  162:    std::istringstream(attr ? attr : "0") >> cwe.id;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -:  163:
    #####:  164:    attr = errmsg->Attribute("inconclusive");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  165:    inconclusive = attr && (std::strcmp(attr, "true") == 0);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  166:
    #####:  167:    attr = errmsg->Attribute("msg");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:    mShortMessage = attr ? attr : "";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  169:
    #####:  170:    attr = errmsg->Attribute("verbose");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  171:    mVerboseMessage = attr ? attr : "";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  172:
    #####:  173:    for (const tinyxml2::XMLElement *e = errmsg->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  174:        if (std::strcmp(e->Name(),"location")==0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  175:            const char *strfile = e->Attribute("file");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  176:            const char *strinfo = e->Attribute("info");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  177:            const char *strline = e->Attribute("line");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  178:            const char *strcolumn = e->Attribute("column");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  179:
    #####:  180:            const char *file = strfile ? strfile : unknown;
branch  0 never executed
branch  1 never executed
    #####:  181:            const char *info = strinfo ? strinfo : "";
branch  0 never executed
branch  1 never executed
    #####:  182:            const int line = strline ? std::atoi(strline) : 0;
branch  0 never executed
branch  1 never executed
    #####:  183:            const int column = strcolumn ? std::atoi(strcolumn) : 0;
branch  0 never executed
branch  1 never executed
    #####:  184:            callStack.emplace_back(file, info, line, column);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  185:        }
        -:  186:    }
    #####:  187:}
        -:  188:
function _ZN11ErrorLogger12ErrorMessage6setmsgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 687 returned 100% blocks executed 57%
      687:  189:void ErrorLogger::ErrorMessage::setmsg(const std::string &msg)
        -:  190:{
        -:  191:    // If a message ends to a '\n' and contains only a one '\n'
        -:  192:    // it will cause the mVerboseMessage to be empty which will show
        -:  193:    // as an empty message to the user if --verbose is used.
        -:  194:    // Even this doesn't cause problems with messages that have multiple
        -:  195:    // lines, none of the error messages should end into it.
      687:  196:    assert(!endsWith(msg,'\n'));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:  197:
        -:  198:    // The summary and verbose message are separated by a newline
        -:  199:    // If there is no newline then both the summary and verbose messages
        -:  200:    // are the given message
      687:  201:    const std::string::size_type pos = msg.find('\n');
call    0 returned 100%
     1374:  202:    const std::string symbolName = mSymbolNames.empty() ? std::string() : mSymbolNames.substr(0, mSymbolNames.find('\n'));
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
      687:  203:    if (pos == std::string::npos) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      235:  204:        mShortMessage = replaceStr(msg, "$symbol", symbolName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
      235:  205:        mVerboseMessage = replaceStr(msg, "$symbol", symbolName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
      452:  206:    } else if (msg.compare(0,8,"$symbol:") == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 46% (fallthrough)
branch  4 taken 54%
      208:  207:        mSymbolNames += msg.substr(8, pos-7);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
      208:  208:        setmsg(msg.substr(pos + 1));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  209:    } else {
      244:  210:        mShortMessage = replaceStr(msg.substr(0, pos), "$symbol", symbolName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
      244:  211:        mVerboseMessage = replaceStr(msg.substr(pos + 1), "$symbol", symbolName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
        -:  212:    }
      687:  213:}
        -:  214:
function _ZNK11ErrorLogger12ErrorMessage26toSuppressionsErrorMessageEv called 0 returned 0% blocks executed 0%
    #####:  215:Suppressions::ErrorMessage ErrorLogger::ErrorMessage::toSuppressionsErrorMessage() const
        -:  216:{
    #####:  217:    Suppressions::ErrorMessage ret;
call    0 never executed
    #####:  218:    ret.errorId = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:    if (!callStack.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  220:        ret.setFileName(callStack.back().getfile(false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  221:        ret.lineNumber = callStack.back().line;
call    0 never executed
        -:  222:    }
    #####:  223:    ret.inconclusive = inconclusive;
    #####:  224:    ret.symbolNames = mSymbolNames;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  225:    return ret;
        -:  226:}
        -:  227:
        -:  228:
function _ZNK11ErrorLogger12ErrorMessage9serializeB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  229:std::string ErrorLogger::ErrorMessage::serialize() const
        -:  230:{
        -:  231:    // Serialize this message into a simple string
    #####:  232:    std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  233:    oss << id.length() << " " << id;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  234:    oss << Severity::toString(severity).length() << " " << Severity::toString(severity);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  235:    oss << MathLib::toString(cwe.id).length() << " " << MathLib::toString(cwe.id);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####:  236:    if (inconclusive) {
branch  0 never executed
branch  1 never executed
    #####:  237:        const std::string inconclusive("inconclusive");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  238:        oss << inconclusive.length() << " " << inconclusive;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:  239:    }
        -:  240:
    #####:  241:    const std::string saneShortMessage = fixInvalidChars(mShortMessage);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  242:    const std::string saneVerboseMessage = fixInvalidChars(mVerboseMessage);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  243:
    #####:  244:    oss << saneShortMessage.length() << " " << saneShortMessage;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  245:    oss << saneVerboseMessage.length() << " " << saneVerboseMessage;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  246:    oss << callStack.size() << " ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  247:
    #####:  248:    for (std::list<ErrorLogger::ErrorMessage::FileLocation>::const_iterator loc = callStack.begin(); loc != callStack.end(); ++loc) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  249:        std::ostringstream smallStream;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  250:        smallStream << (*loc).line << '\t' << (*loc).column << '\t' << (*loc).getfile(false) << '\t' << loc->getOrigFile(false) << '\t' << loc->getinfo();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
call   44 never executed
call   45 never executed
call   46 never executed
    #####:  251:        oss << smallStream.str().length() << " " << smallStream.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  252:    }
        -:  253:
    #####:  254:    return oss.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  255:}
        -:  256:
function _ZN11ErrorLogger12ErrorMessage11deserializeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  257:bool ErrorLogger::ErrorMessage::deserialize(const std::string &data)
        -:  258:{
    #####:  259:    inconclusive = false;
    #####:  260:    callStack.clear();
call    0 never executed
    #####:  261:    std::istringstream iss(data);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  262:    std::array<std::string, 5> results;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  263:    std::size_t elem = 0;
    #####:  264:    while (iss.good()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  265:        unsigned int len = 0;
    #####:  266:        if (!(iss >> len))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  267:            return false;
        -:  268:
    #####:  269:        iss.get();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  270:        std::string temp;
call    0 never executed
call    1 never executed
    #####:  271:        for (unsigned int i = 0; i < len && iss.good(); ++i) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  272:            const char c = static_cast<char>(iss.get());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  273:            temp.append(1, c);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  274:        }
        -:  275:
    #####:  276:        if (temp == "inconclusive") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  277:            inconclusive = true;
    #####:  278:            continue;
        -:  279:        }
        -:  280:
    #####:  281:        results[elem++] = temp;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  282:        if (elem == 5)
branch  0 never executed
branch  1 never executed
    #####:  283:            break;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  284:    }
        -:  285:
    #####:  286:    if (elem != 5)
branch  0 never executed
branch  1 never executed
    #####:  287:        throw InternalError(nullptr, "Internal Error: Deserialization of error message failed");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  288:
    #####:  289:    id = results[0];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  290:    severity = Severity::fromString(results[1]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  291:    std::istringstream scwe(results[2]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  292:    scwe >> cwe.id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:    mShortMessage = results[3];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  294:    mVerboseMessage = results[4];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  295:
    #####:  296:    unsigned int stackSize = 0;
    #####:  297:    if (!(iss >> stackSize))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  298:        return false;
        -:  299:
    #####:  300:    while (iss.good()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  301:        unsigned int len = 0;
    #####:  302:        if (!(iss >> len))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  303:            return false;
        -:  304:
    #####:  305:        iss.get();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  306:        std::string temp;
call    0 never executed
call    1 never executed
    #####:  307:        for (unsigned int i = 0; i < len && iss.good(); ++i) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  308:            const char c = static_cast<char>(iss.get());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  309:            temp.append(1, c);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  310:        }
        -:  311:
    #####:  312:        std::vector<std::string> substrings;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  313:        for (std::string::size_type pos = 0; pos < temp.size() && substrings.size() < 5; ++pos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  314:            if (substrings.size() == 4) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  315:                substrings.push_back(temp.substr(pos));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  316:                break;
        -:  317:            }
    #####:  318:            const std::string::size_type start = pos;
    #####:  319:            pos = temp.find("\t", pos);
call    0 never executed
    #####:  320:            if (pos == std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  321:                substrings.push_back(temp.substr(start));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  322:                break;
        -:  323:            }
    #####:  324:            substrings.push_back(temp.substr(start, pos - start));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  325:        }
    #####:  326:        if (substrings.size() < 4)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  327:            throw InternalError(nullptr, "Internal Error: serializing/deserializing of error message failed!");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  328:
        -:  329:        // (*loc).line << '\t' << (*loc).column << '\t' << (*loc).getfile(false) << '\t' << loc->getOrigFile(false) << '\t' << loc->getinfo();
        -:  330:
    #####:  331:        ErrorLogger::ErrorMessage::FileLocation loc(substrings[3], MathLib::toLongNumber(substrings[0]), MathLib::toLongNumber(substrings[1]));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
    #####:  332:        loc.setfile(substrings[2]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  333:        if (substrings.size() == 5)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:            loc.setinfo(substrings[4]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  335:
    #####:  336:        callStack.push_back(loc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  337:
    #####:  338:        if (callStack.size() >= stackSize)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  339:            break;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  340:    }
        -:  341:
    #####:  342:    return true;
        -:  343:}
        -:  344:
function _ZN11ErrorLogger12ErrorMessage12getXMLHeaderB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  345:std::string ErrorLogger::ErrorMessage::getXMLHeader()
        -:  346:{
        -:  347:    // xml_version 1 is the default xml format
        -:  348:
    #####:  349:    tinyxml2::XMLPrinter printer;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  350:
        -:  351:    // standard xml header
    #####:  352:    printer.PushDeclaration("xml version=\"1.0\" encoding=\"UTF-8\"");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  353:
        -:  354:    // header
    #####:  355:    printer.OpenElement("results", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  356:
    #####:  357:    printer.PushAttribute("version", 2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  358:    printer.OpenElement("cppcheck", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  359:    printer.PushAttribute("version", CppCheck::version());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  360:    printer.CloseElement(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  361:    printer.OpenElement("errors", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  362:
    #####:  363:    return std::string(printer.CStr()) + '>';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  364:}
        -:  365:
function _ZN11ErrorLogger12ErrorMessage12getXMLFooterB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  366:std::string ErrorLogger::ErrorMessage::getXMLFooter()
        -:  367:{
    #####:  368:    return "    </errors>\n</results>";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  369:}
        -:  370:
        -:  371:// There is no utf-8 support around but the strings should at least be safe for to tinyxml2.
        -:  372:// See #5300 "Invalid encoding in XML output" and  #6431 "Invalid XML created - Invalid encoding of string literal "
function _ZN11ErrorLogger12ErrorMessage15fixInvalidCharsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  373:std::string ErrorLogger::ErrorMessage::fixInvalidChars(const std::string& raw)
        -:  374:{
    #####:  375:    std::string result;
call    0 never executed
    #####:  376:    result.reserve(raw.length());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  377:    std::string::const_iterator from=raw.begin();
call    0 never executed
    #####:  378:    while (from!=raw.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  379:        if (std::isprint(static_cast<unsigned char>(*from))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  380:            result.push_back(*from);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  381:        } else {
    #####:  382:            std::ostringstream es;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:  383:            // straight cast to (unsigned) doesn't work out.
    #####:  384:            const unsigned uFrom = (unsigned char)*from;
call    0 never executed
    #####:  385:            es << '\\' << std::setbase(8) << std::setw(3) << std::setfill('0') << uFrom;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####:  386:            result += es.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:  387:        }
    #####:  388:        ++from;
call    0 never executed
        -:  389:    }
    #####:  390:    return result;
        -:  391:}
        -:  392:
function _ZNK11ErrorLogger12ErrorMessage5toXMLB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  393:std::string ErrorLogger::ErrorMessage::toXML() const
        -:  394:{
    #####:  395:    tinyxml2::XMLPrinter printer(nullptr, false, 2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  396:    printer.OpenElement("error", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  397:    printer.PushAttribute("id", id.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  398:    printer.PushAttribute("severity", Severity::toString(severity).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  399:    printer.PushAttribute("msg", fixInvalidChars(mShortMessage).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  400:    printer.PushAttribute("verbose", fixInvalidChars(mVerboseMessage).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  401:    if (cwe.id)
branch  0 never executed
branch  1 never executed
    #####:  402:        printer.PushAttribute("cwe", cwe.id);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  403:    if (inconclusive)
branch  0 never executed
branch  1 never executed
    #####:  404:        printer.PushAttribute("inconclusive", "true");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  405:
    #####:  406:    for (std::list<FileLocation>::const_reverse_iterator it = callStack.rbegin(); it != callStack.rend(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  407:        printer.OpenElement("location", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  408:        if (!file0.empty() && (*it).getfile() != file0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
    #####:  409:            printer.PushAttribute("file0", Path::toNativeSeparators(file0).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  410:        printer.PushAttribute("file", (*it).getfile().c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:  411:        printer.PushAttribute("line", std::max((*it).line,0));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  412:        printer.PushAttribute("column", (*it).column);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  413:        if (!it->getinfo().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  414:            printer.PushAttribute("info", fixInvalidChars(it->getinfo()).c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  415:        printer.CloseElement(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  416:    }
    #####:  417:    for (std::string::size_type pos = 0; pos < mSymbolNames.size();) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  418:        const std::string::size_type pos2 = mSymbolNames.find('\n', pos);
call    0 never executed
    #####:  419:        std::string symbolName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  420:        if (pos2 == std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  421:            symbolName = mSymbolNames.substr(pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  422:            pos = pos2;
        -:  423:        } else {
    #####:  424:            symbolName = mSymbolNames.substr(pos, pos2-pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  425:            pos = pos2 + 1;
        -:  426:        }
    #####:  427:        printer.OpenElement("symbol", false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  428:        printer.PushText(symbolName.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  429:        printer.CloseElement(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  430:    }
    #####:  431:    printer.CloseElement(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  432:    return printer.CStr();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  433:}
        -:  434:
function _ZN11ErrorLogger12ErrorMessage14findAndReplaceERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS6_S9_ called 488 returned 100% blocks executed 100%
      488:  435:void ErrorLogger::ErrorMessage::findAndReplace(std::string &source, const std::string &searchFor, const std::string &replaceWith)
        -:  436:{
      488:  437:    std::string::size_type index = 0;
      836:  438:    while ((index = source.find(searchFor, index)) != std::string::npos) {
call    0 returned 100%
branch  1 taken 26% (fallthrough)
branch  2 taken 74%
      174:  439:        source.replace(index, searchFor.length(), replaceWith);
call    0 returned 100%
call    1 returned 100%
      174:  440:        index += replaceWith.length();
call    0 returned 100%
        -:  441:    }
      488:  442:}
        -:  443:
        -:  444:// TODO: read info from some shared resource instead?
function _ZL8readCodeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiiPKc called 0 returned 0% blocks executed 0%
    #####:  445:static std::string readCode(const std::string &file, int linenr, int column, const char endl[])
        -:  446:{
    #####:  447:    std::ifstream fin(file);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  448:    std::string line;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  449:    while (linenr > 0 && std::getline(fin,line)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  450:        linenr--;
        -:  451:    }
    #####:  452:    const std::string::size_type endPos = line.find_last_not_of("\r\n\t ");
call    0 never executed
    #####:  453:    if (endPos + 1 < line.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  454:        line.erase(endPos + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  455:    std::string::size_type pos = 0;
    #####:  456:    while ((pos = line.find('\t', pos)) != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  457:        line[pos] = ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  458:    return line + endl + std::string((column>0 ? column-1 : column), ' ') + '^';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -:  459:}
        -:  460:
function _ZNK11ErrorLogger12ErrorMessage8toStringEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 479 returned 100% blocks executed 37%
      479:  461:std::string ErrorLogger::ErrorMessage::toString(bool verbose, const std::string &templateFormat, const std::string &templateLocation) const
        -:  462:{
        -:  463:    // Save this ErrorMessage in plain text.
        -:  464:
        -:  465:    // No template is given
      479:  466:    if (templateFormat.empty()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
      922:  467:        std::ostringstream text;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      461:  468:        if (!callStack.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      461:  469:            text << callStackToString(callStack) << ": ";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
      461:  470:        if (severity != Severity::none) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      461:  471:            text << '(' << Severity::toString(severity);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
      461:  472:            if (inconclusive)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       57:  473:                text << ", inconclusive";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      461:  474:            text << ") ";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  475:        }
      461:  476:        text << (verbose ? mVerboseMessage : mShortMessage);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      461:  477:        return text.str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  478:    }
        -:  479:
        -:  480:    // template is given. Reformat the output according to it
       36:  481:    std::string result = templateFormat;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  482:    // Support a few special characters to allow to specific formatting, see http://sourceforge.net/apps/phpbb/cppcheck/viewtopic.php?f=4&t=494&sid=21715d362c0dbafd3791da4d9522f814
        -:  483:    // Substitution should be done first so messages from cppcheck never get translated.
       18:  484:    findAndReplace(result, "\\b", "\b");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
       18:  485:    findAndReplace(result, "\\n", "\n");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
       18:  486:    findAndReplace(result, "\\r", "\r");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
       18:  487:    findAndReplace(result, "\\t", "\t");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  488:
       18:  489:    findAndReplace(result, "{id}", id);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       18:  490:    if (result.find("{inconclusive:") != std::string::npos) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  491:        const std::string::size_type pos1 = result.find("{inconclusive:");
call    0 never executed
    #####:  492:        const std::string::size_type pos2 = result.find('}', pos1+1);
call    0 never executed
    #####:  493:        const std::string replaceFrom = result.substr(pos1,pos2-pos1+1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  494:        const std::string replaceWith = inconclusive ? result.substr(pos1+14, pos2-pos1-14) : std::string();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  495:        findAndReplace(result, replaceFrom, replaceWith);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  496:    }
       18:  497:    findAndReplace(result, "{severity}", Severity::toString(severity));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       18:  498:    findAndReplace(result, "{cwe}", MathLib::toString(cwe.id));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       18:  499:    findAndReplace(result, "{message}", verbose ? mVerboseMessage : mShortMessage);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
       18:  500:    findAndReplace(result, "{callstack}", callStack.empty() ? emptyString : callStackToString(callStack));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 never executed
call   20 never executed
call   21 never executed
       18:  501:    if (!callStack.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       18:  502:        findAndReplace(result, "{file}", callStack.back().getfile());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
       18:  503:        findAndReplace(result, "{line}", MathLib::toString(callStack.back().line));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
       18:  504:        findAndReplace(result, "{column}", MathLib::toString(callStack.back().column));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
       18:  505:        if (result.find("{code}") != std::string::npos) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  506:            const std::string::size_type pos = result.find('\r');
call    0 never executed
        -:  507:            const char *endl;
    #####:  508:            if (pos == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  509:                endl = "\n";
    #####:  510:            else if (pos+1 < result.size() && result[pos+1] == '\n')
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  511:                endl = "\r\n";
        -:  512:            else
    #####:  513:                endl = "\r";
    #####:  514:            findAndReplace(result, "{code}", readCode(callStack.back().getOrigFile(), callStack.back().line, callStack.back().column, endl));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
        -:  515:        }
        -:  516:    } else {
    #####:  517:        findAndReplace(result, "{file}", "nofile");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  518:        findAndReplace(result, "{line}", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  519:        findAndReplace(result, "{column}", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  520:        findAndReplace(result, "{code}", emptyString);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  521:    }
        -:  522:
       18:  523:    if (!templateLocation.empty() && callStack.size() >= 2U) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 94% (fallthrough)
branch  5 taken 6%
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
       51:  524:        for (const FileLocation &fileLocation : callStack) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       68:  525:            std::string text = templateLocation;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  526:
       34:  527:            findAndReplace(text, "\\b", "\b");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
       34:  528:            findAndReplace(text, "\\n", "\n");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
       34:  529:            findAndReplace(text, "\\r", "\r");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
       34:  530:            findAndReplace(text, "\\t", "\t");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  531:
       34:  532:            findAndReplace(text, "{file}", fileLocation.getfile());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       34:  533:            findAndReplace(text, "{line}", MathLib::toString(fileLocation.line));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       34:  534:            findAndReplace(text, "{column}", MathLib::toString(fileLocation.column));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
       34:  535:            findAndReplace(text, "{info}", fileLocation.getinfo().empty() ? mShortMessage : fileLocation.getinfo());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
       34:  536:            if (text.find("{code}") != std::string::npos) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  537:                const std::string::size_type pos = text.find('\r');
call    0 never executed
        -:  538:                const char *endl;
    #####:  539:                if (pos == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  540:                    endl = "\n";
    #####:  541:                else if (pos+1 < text.size() && text[pos+1] == '\n')
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  542:                    endl = "\r\n";
        -:  543:                else
    #####:  544:                    endl = "\r";
    #####:  545:                findAndReplace(text, "{code}", readCode(fileLocation.getOrigFile(), fileLocation.line, fileLocation.column, endl));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -:  546:            }
       34:  547:            result += '\n' + text;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  548:        }
        -:  549:    }
        -:  550:
       18:  551:    return result;
call    0 returned 100%
        -:  552:}
        -:  553:
function _ZN11ErrorLogger27reportUnmatchedSuppressionsERKNSt7__debug4listIN12Suppressions11SuppressionESaIS3_EEE called 0 returned 0% blocks executed 0%
    #####:  554:bool ErrorLogger::reportUnmatchedSuppressions(const std::list<Suppressions::Suppression> &unmatched)
        -:  555:{
    #####:  556:    bool err = false;
        -:  557:    // Report unmatched suppressions
    #####:  558:    for (const Suppressions::Suppression &s : unmatched) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  559:        // don't report "unmatchedSuppression" as unmatched
    #####:  560:        if (s.errorId == "unmatchedSuppression")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  561:            continue;
        -:  562:
        -:  563:        // check if this unmatched suppression is suppressed
    #####:  564:        bool suppressed = false;
    #####:  565:        for (const Suppressions::Suppression &s2 : unmatched) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  566:            if (s2.errorId == "unmatchedSuppression") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  567:                if ((s2.fileName == "*" || s2.fileName == s.fileName) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  568:                    (s2.lineNumber == Suppressions::Suppression::NO_LINE || s2.lineNumber == s.lineNumber)) {
branch  0 never executed
branch  1 never executed
    #####:  569:                    suppressed = true;
    #####:  570:                    break;
        -:  571:                }
        -:  572:            }
        -:  573:        }
        -:  574:
    #####:  575:        if (suppressed)
branch  0 never executed
branch  1 never executed
    #####:  576:            continue;
        -:  577:
    #####:  578:        std::list<ErrorLogger::ErrorMessage::FileLocation> callStack;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  579:        if (!s.fileName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  580:            callStack.emplace_back(s.fileName, s.lineNumber, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  581:        reportErr(ErrorLogger::ErrorMessage(callStack, emptyString, Severity::information, "Unmatched suppression: " + s.errorId, "unmatchedSuppression", false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####:  582:        err = true;
        -:  583:    }
    #####:  584:    return err;
        -:  585:}
        -:  586:
function _ZN11ErrorLogger17callStackToStringB5cxx11ERKNSt7__debug4listINS_12ErrorMessage12FileLocationESaIS3_EEE called 479 returned 100% blocks executed 69%
      479:  587:std::string ErrorLogger::callStackToString(const std::list<ErrorLogger::ErrorMessage::FileLocation> &callStack)
        -:  588:{
      958:  589:    std::ostringstream ostr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     1108:  590:    for (std::list<ErrorLogger::ErrorMessage::FileLocation>::const_iterator tok = callStack.begin(); tok != callStack.end(); ++tok) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 57% (fallthrough)
branch  5 taken 43%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      629:  591:        ostr << (tok == callStack.begin() ? "" : " -> ") << tok->stringify();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 76% (fallthrough)
branch  3 taken 24%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 returned 100%
call   16 never executed
call   17 never executed
        -:  592:    }
      958:  593:    return ostr.str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  594:}
        -:  595:
        -:  596:
function _ZN11ErrorLogger12ErrorMessage12FileLocationC2EPK5TokenPK9TokenList called 296 returned 100% blocks executed 90%
      296:  597:ErrorLogger::ErrorMessage::FileLocation::FileLocation(const Token* tok, const TokenList* tokenList)
      296:  598:    : fileIndex(tok->fileIndex()), line(tok->linenr()), column(tok->column()), mOrigFileName(tokenList->getOrigFile(tok)), mFileName(tokenList->file(tok))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        -:  599:{
      296:  600:}
        -:  601:
function _ZN11ErrorLogger12ErrorMessage12FileLocationC2EPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK9TokenList called 333 returned 100% blocks executed 75%
      333:  602:ErrorLogger::ErrorMessage::FileLocation::FileLocation(const Token* tok, const std::string &info, const TokenList* tokenList)
      333:  603:    : fileIndex(tok->fileIndex()), line(tok->linenr()), column(tok->column()), mOrigFileName(tokenList->getOrigFile(tok)), mFileName(tokenList->file(tok)), mInfo(info)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 never executed
call   14 never executed
        -:  604:{
      333:  605:}
        -:  606:
function _ZNK11ErrorLogger12ErrorMessage12FileLocation7getfileB5cxx11Eb called 52 returned 100% blocks executed 70%
       52:  607:std::string ErrorLogger::ErrorMessage::FileLocation::getfile(bool convert) const
        -:  608:{
       52:  609:    if (convert)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       52:  610:        return Path::toNativeSeparators(mFileName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
    #####:  611:    return mFileName;
call    0 never executed
        -:  612:}
        -:  613:
function _ZNK11ErrorLogger12ErrorMessage12FileLocation11getOrigFileB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####:  614:std::string ErrorLogger::ErrorMessage::FileLocation::getOrigFile(bool convert) const
        -:  615:{
    #####:  616:    if (convert)
branch  0 never executed
branch  1 never executed
    #####:  617:        return Path::toNativeSeparators(mOrigFileName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  618:    return mOrigFileName;
call    0 never executed
        -:  619:}
        -:  620:
function _ZN11ErrorLogger12ErrorMessage12FileLocation7setfileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  621:void ErrorLogger::ErrorMessage::FileLocation::setfile(const std::string &file)
        -:  622:{
    #####:  623:    mFileName = file;
call    0 never executed
    #####:  624:    mFileName = Path::fromNativeSeparators(mFileName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  625:    mFileName = Path::simplifyPath(mFileName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  626:}
        -:  627:
function _ZNK11ErrorLogger12ErrorMessage12FileLocation9stringifyB5cxx11Ev called 629 returned 100% blocks executed 69%
      629:  628:std::string ErrorLogger::ErrorMessage::FileLocation::stringify() const
        -:  629:{
     1258:  630:    std::ostringstream oss;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      629:  631:    oss << '[' << Path::toNativeSeparators(mFileName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
      629:  632:    if (line != Suppressions::Suppression::NO_LINE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      629:  633:        oss << ':' << line;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
      629:  634:    oss << ']';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1258:  635:    return oss.str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  636:}
        -:  637:
function _ZN11ErrorLogger5toxmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  638:std::string ErrorLogger::toxml(const std::string &str)
        -:  639:{
    #####:  640:    std::ostringstream xml;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  641:    for (unsigned char c : str) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:  642:        switch (c) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  643:        case '<':
    #####:  644:            xml << "&lt;";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  645:            break;
    #####:  646:        case '>':
    #####:  647:            xml << "&gt;";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  648:            break;
    #####:  649:        case '&':
    #####:  650:            xml << "&amp;";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  651:            break;
    #####:  652:        case '\"':
    #####:  653:            xml << "&quot;";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  654:            break;
    #####:  655:        case '\0':
    #####:  656:            xml << "\\0";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  657:            break;
    #####:  658:        default:
    #####:  659:            if (c >= ' ' && c <= 0x7f)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  660:                xml << c;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  661:            else
    #####:  662:                xml << 'x';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  663:            break;
        -:  664:        }
        -:  665:    }
    #####:  666:    return xml.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  667:}
        -:  668:
function _ZN11ErrorLogger11plistHeaderERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNSt7__debug6vectorIS5_SaIS5_EEE called 0 returned 0% blocks executed 0%
    #####:  669:std::string ErrorLogger::plistHeader(const std::string &version, const std::vector<std::string> &files)
        -:  670:{
    #####:  671:    std::ostringstream ostr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  672:    ostr << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"
        -:  673:         << "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\r\n"
        -:  674:         << "<plist version=\"1.0\">\r\n"
        -:  675:         << "<dict>\r\n"
        -:  676:         << " <key>clang_version</key>\r\n"
        -:  677:         << "<string>cppcheck version " << version << "</string>\r\n"
        -:  678:         << " <key>files</key>\r\n"
    #####:  679:         << " <array>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
    #####:  680:    for (const std::string & file : files)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  681:        ostr << "  <string>" << ErrorLogger::toxml(file) << "</string>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
        -:  682:    ostr       << " </array>\r\n"
        -:  683:               << " <key>diagnostics</key>\r\n"
    #####:  684:               << " <array>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  685:    return ostr.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  686:}
        -:  687:
function _ZL8plistLocPKcRKN11ErrorLogger12ErrorMessage12FileLocationE called 0 returned 0% blocks executed 0%
    #####:  688:static std::string plistLoc(const char indent[], const ErrorLogger::ErrorMessage::FileLocation &loc)
        -:  689:{
    #####:  690:    std::ostringstream ostr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  691:    ostr << indent << "<dict>\r\n"
    #####:  692:         << indent << ' ' << "<key>line</key><integer>" << loc.line << "</integer>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  693:         << indent << ' ' << "<key>col</key><integer>" << loc.column << "</integer>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####:  694:         << indent << ' ' << "<key>file</key><integer>" << loc.fileIndex << "</integer>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  695:         << indent << "</dict>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  696:    return ostr.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  697:}
        -:  698:
function _ZN11ErrorLogger9plistDataB5cxx11ERKNS_12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  699:std::string ErrorLogger::plistData(const ErrorLogger::ErrorMessage &msg)
        -:  700:{
    #####:  701:    std::ostringstream plist;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  702:    plist << "  <dict>\r\n"
        -:  703:          << "   <key>path</key>\r\n"
    #####:  704:          << "   <array>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  705:
    #####:  706:    std::list<ErrorLogger::ErrorMessage::FileLocation>::const_iterator prev = msg.callStack.begin();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  707:
    #####:  708:    for (std::list<ErrorLogger::ErrorMessage::FileLocation>::const_iterator it = msg.callStack.begin(); it != msg.callStack.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  709:        if (prev != it) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  710:            plist << "    <dict>\r\n"
        -:  711:                  << "     <key>kind</key><string>control</string>\r\n"
        -:  712:                  << "     <key>edges</key>\r\n"
        -:  713:                  << "      <array>\r\n"
        -:  714:                  << "       <dict>\r\n"
        -:  715:                  << "        <key>start</key>\r\n"
        -:  716:                  << "         <array>\r\n"
    #####:  717:                  << plistLoc("          ", *prev)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  718:                  << plistLoc("          ", *prev)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  719:                  << "         </array>\r\n"
        -:  720:                  << "        <key>end</key>\r\n"
        -:  721:                  << "         <array>\r\n"
    #####:  722:                  << plistLoc("          ", *it)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  723:                  << plistLoc("          ", *it)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  724:                  << "         </array>\r\n"
        -:  725:                  << "       </dict>\r\n"
        -:  726:                  << "      </array>\r\n"
    #####:  727:                  << "    </dict>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
    #####:  728:            prev = it;
call    0 never executed
        -:  729:        }
        -:  730:
    #####:  731:        std::list<ErrorLogger::ErrorMessage::FileLocation>::const_iterator next = it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  732:        ++next;
call    0 never executed
    #####:  733:        const std::string message = (it->getinfo().empty() && next == msg.callStack.end() ? msg.shortMessage() : it->getinfo());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
        -:  734:
        -:  735:        plist << "    <dict>\r\n"
        -:  736:              << "     <key>kind</key><string>event</string>\r\n"
        -:  737:              << "     <key>location</key>\r\n"
    #####:  738:              << plistLoc("     ", *it)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  739:              << "     <key>ranges</key>\r\n"
        -:  740:              << "     <array>\r\n"
        -:  741:              << "       <array>\r\n"
    #####:  742:              << plistLoc("        ", *it)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  743:              << plistLoc("        ", *it)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  744:              << "       </array>\r\n"
        -:  745:              << "     </array>\r\n"
        -:  746:              << "     <key>depth</key><integer>0</integer>\r\n"
        -:  747:              << "     <key>extended_message</key>\r\n"
    #####:  748:              << "     <string>" << ErrorLogger::toxml(message) << "</string>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  749:              << "     <key>message</key>\r\n"
    #####:  750:              << "     <string>" << ErrorLogger::toxml(message) << "</string>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  751:              << "    </dict>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
branch 46 never executed
branch 47 never executed
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
branch 52 never executed
branch 53 never executed
call   54 never executed
branch 55 never executed
branch 56 never executed
call   57 never executed
branch 58 never executed
branch 59 never executed
call   60 never executed
branch 61 never executed
branch 62 never executed
        -:  752:    }
        -:  753:
        -:  754:    plist << "   </array>\r\n"
    #####:  755:          << "   <key>description</key><string>" << ErrorLogger::toxml(msg.shortMessage()) << "</string>\r\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  756:          << "   <key>category</key><string>" << Severity::toString(msg.severity) << "</string>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  757:          << "   <key>type</key><string>" << ErrorLogger::toxml(msg.shortMessage()) << "</string>\r\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  758:          << "   <key>check_name</key><string>" << msg.id << "</string>\r\n"
        -:  759:          << "   <!-- This hash is experimental and going to change! -->\r\n"
    #####:  760:          << "   <key>issue_hash_content_of_line_in_context</key><string>" << 0 << "</string>\r\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
        -:  761:          << "  <key>issue_context_kind</key><string></string>\r\n"
        -:  762:          << "  <key>issue_context</key><string></string>\r\n"
        -:  763:          << "  <key>issue_hash_function_offset</key><string></string>\r\n"
        -:  764:          << "  <key>location</key>\r\n"
    #####:  765:          << plistLoc("  ", msg.callStack.back())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  766:          << "  </dict>\r\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    #####:  767:    return plist.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  768:}
        -:  769:
        -:  770:
function _Z10replaceStrNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S6_ called 958 returned 100% blocks executed 63%
      958:  771:std::string replaceStr(std::string s, const std::string &from, const std::string &to)
        -:  772:{
      958:  773:    std::string::size_type pos1 = 0;
     1794:  774:    while (pos1 < s.size()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1376:  775:        pos1 = s.find(from, pos1);
call    0 returned 100%
     1376:  776:        if (pos1 == std::string::npos)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
      958:  777:            return s;
call    0 returned 100%
      418:  778:        if (pos1 > 0 && (s[pos1-1] == '_' || std::isalnum(s[pos1-1]))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  779:            pos1++;
    #####:  780:            continue;
        -:  781:        }
      418:  782:        const std::string::size_type pos2 = pos1 + from.size();
call    0 returned 100%
      418:  783:        if (pos2 >= s.size())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  784:            return s.substr(0,pos1) + to;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
      418:  785:        if (s[pos2] == '_' || std::isalnum(s[pos2])) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  786:            pos1++;
    #####:  787:            continue;
        -:  788:        }
      418:  789:        s = s.substr(0,pos1) + to + s.substr(pos2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
      418:  790:        pos1 += to.size();
call    0 returned 100%
        -:  791:    }
    #####:  792:    return s;
call    0 never executed
function _GLOBAL__sub_I__ZN13InternalErrorC2EPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_4TypeE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  793:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
