        -:    0:Source:/home/workspace/lib/astutils.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/astutils.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/astutils.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "astutils.h"
        -:   22:
        -:   23:#include "library.h"
        -:   24:#include "mathlib.h"
        -:   25:#include "settings.h"
        -:   26:#include "symboldatabase.h"
        -:   27:#include "token.h"
        -:   28:#include "valueflow.h"
        -:   29:
        -:   30:#include <iterator>
        -:   31:#include <list>
        -:   32:#include <stack>
        -:   33:
        -:   34:
function _Z13visitAstNodesPK5TokenSt8functionIF15ChildrenToVisitS1_EE called 4937 returned 100% blocks executed 86%
     4937:   35:void visitAstNodes(const Token *ast, std::function<ChildrenToVisit(const Token *)> visitor)
        -:   36:{
     9874:   37:    std::stack<const Token *> tokens;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     4937:   38:    tokens.push(ast);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    50359:   39:    while (!tokens.empty()) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
    22942:   40:        const Token *tok = tokens.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    22942:   41:        tokens.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    22942:   42:        if (!tok)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
    11742:   43:            continue;
        -:   44:
    11200:   45:        ChildrenToVisit c = visitor(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   46:
    11200:   47:        if (c == ChildrenToVisit::done)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      231:   48:            break;
    10969:   49:        if (c == ChildrenToVisit::op1 || c == ChildrenToVisit::op1_and_op2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 82% (fallthrough)
branch  3 taken 18%
     9028:   50:            tokens.push(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
    10969:   51:        if (c == ChildrenToVisit::op2 || c == ChildrenToVisit::op1_and_op2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 82% (fallthrough)
branch  3 taken 18%
     8983:   52:            tokens.push(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   53:    }
     4937:   54:}
        -:   55:
function _ZL19astFlattenRecursivePK5TokenPNSt7__debug6vectorIS1_SaIS1_EEEPKci called 5415 returned 100% blocks executed 100%
     5415:   56:static void astFlattenRecursive(const Token *tok, std::vector<const Token *> *result, const char* op, nonneg int depth = 0)
        -:   57:{
     5415:   58:    ++depth;
     5415:   59:    if (!tok || depth >= 100)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1937:   60:        return;
     3478:   61:    if (tok->str() == op) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
      630:   62:        astFlattenRecursive(tok->astOperand1(), result, op, depth);
call    0 returned 100%
call    1 returned 100%
      630:   63:        astFlattenRecursive(tok->astOperand2(), result, op, depth);
call    0 returned 100%
call    1 returned 100%
        -:   64:    } else {
     2848:   65:        result->push_back(tok);
call    0 returned 100%
        -:   66:    }
        -:   67:}
        -:   68:
function _Z10astFlattenPK5TokenPKc called 4155 returned 100% blocks executed 83%
     4155:   69:std::vector<const Token*> astFlatten(const Token* tok, const char* op)
        -:   70:{
     4155:   71:    std::vector<const Token*> result;
call    0 returned 100%
     4155:   72:    astFlattenRecursive(tok, &result, op);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     4155:   73:    return result;
call    0 never executed
        -:   74:}
        -:   75:
        -:   76:
function _Z11astHasTokenPK5TokenS1_ called 0 returned 0% blocks executed 0%
    #####:   77:bool astHasToken(const Token* root, const Token * tok)
        -:   78:{
    #####:   79:    if (!root)
branch  0 never executed
branch  1 never executed
    #####:   80:        return false;
    #####:   81:    if (root == tok)
branch  0 never executed
branch  1 never executed
    #####:   82:        return true;
    #####:   83:    return astHasToken(root->astOperand1(), tok) || astHasToken(root->astOperand2(), tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   84:}
        -:   85:
function _Z9astHasVarPK5Tokeni called 558 returned 100% blocks executed 93%
      558:   86:bool astHasVar(const Token * tok, nonneg int varid)
        -:   87:{
      558:   88:    if (!tok)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
      368:   89:        return false;
      190:   90:    if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        3:   91:        return true;
      187:   92:    return astHasVar(tok->astOperand1(), varid) || astHasVar(tok->astOperand2(), varid);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:   93:}
        -:   94:
function _ZL17astIsCharWithSignPK5TokenN9ValueType4SignE called 202 returned 100% blocks executed 67%
      202:   95:static bool astIsCharWithSign(const Token *tok, ValueType::Sign sign)
        -:   96:{
      202:   97:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:        return false;
      202:   99:    const ValueType *valueType = tok->valueType();
call    0 returned 100%
      202:  100:    if (!valueType)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       56:  101:        return false;
      146:  102:    return valueType->type == ValueType::Type::CHAR && valueType->pointer == 0U && valueType->sign == sign;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  103:}
        -:  104:
function _Z15astIsSignedCharPK5Token called 138 returned 100% blocks executed 100%
      138:  105:bool astIsSignedChar(const Token *tok)
        -:  106:{
      138:  107:    return astIsCharWithSign(tok, ValueType::Sign::SIGNED);
call    0 returned 100%
        -:  108:}
        -:  109:
function _Z20astIsUnknownSignCharPK5Token called 64 returned 100% blocks executed 100%
       64:  110:bool astIsUnknownSignChar(const Token *tok)
        -:  111:{
       64:  112:    return astIsCharWithSign(tok, ValueType::Sign::UNKNOWN_SIGN);
call    0 returned 100%
        -:  113:}
        -:  114:
function _Z13astIsIntegralPK5Tokenb called 6552 returned 100% blocks executed 92%
     6552:  115:bool astIsIntegral(const Token *tok, bool unknown)
        -:  116:{
     6552:  117:    const ValueType *vt = tok ? tok->valueType() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     6552:  118:    if (!vt)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
     3953:  119:        return unknown;
     2599:  120:    return vt->isIntegral() && vt->pointer == 0U;
call    0 returned 100%
branch  1 taken 71% (fallthrough)
branch  2 taken 29%
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
        -:  121:}
        -:  122:
function _Z10astIsFloatPK5Tokenb called 245 returned 100% blocks executed 91%
      245:  123:bool astIsFloat(const Token *tok, bool unknown)
        -:  124:{
      245:  125:    const ValueType *vt = tok ? tok->valueType() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      245:  126:    if (!vt)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
       72:  127:        return unknown;
      173:  128:    return vt->type >= ValueType::Type::FLOAT && vt->pointer == 0U;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  129:}
        -:  130:
function _Z9astIsBoolPK5Token called 118 returned 100% blocks executed 92%
      118:  131:bool astIsBool(const Token *tok)
        -:  132:{
      118:  133:    return tok && (tok->isBoolean() || (tok->valueType() && tok->valueType()->type == ValueType::Type::BOOL && !tok->valueType()->pointer));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 76% (fallthrough)
branch  7 taken 24%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 returned 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
        -:  134:}
        -:  135:
function _Z12astIsPointerPK5Token called 991 returned 100% blocks executed 100%
      991:  136:bool astIsPointer(const Token *tok)
        -:  137:{
      991:  138:    return tok && tok->valueType() && tok->valueType()->pointer;
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
call    2 returned 100%
branch  3 taken 81% (fallthrough)
branch  4 taken 19%
call    5 returned 100%
branch  6 taken 51% (fallthrough)
branch  7 taken 49%
        -:  139:}
        -:  140:
function _Z17astIsSmartPointerPK5Token called 0 returned 0% blocks executed 0%
    #####:  141:bool astIsSmartPointer(const Token* tok)
        -:  142:{
    #####:  143:    return tok && tok->valueType() && tok->valueType()->smartPointerTypeToken;
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  144:}
        -:  145:
function _Z13astIsIteratorPK5Token called 5 returned 100% blocks executed 89%
        5:  146:bool astIsIterator(const Token *tok)
        -:  147:{
        5:  148:    return tok && tok->valueType() && tok->valueType()->type == ValueType::Type::ITERATOR;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  149:}
        -:  150:
function _Z14astIsContainerPK5Token called 21144 returned 100% blocks executed 100%
    21144:  151:bool astIsContainer(const Token *tok)
        -:  152:{
    21144:  153:    return getLibraryContainer(tok) != nullptr && tok->valueType()->type != ValueType::Type::ITERATOR;
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  154:}
        -:  155:
function _Z16astCanonicalTypeB5cxx11PK5Token called 540 returned 100% blocks executed 70%
      540:  156:std::string astCanonicalType(const Token *expr)
        -:  157:{
      540:  158:    if (!expr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  159:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
      540:  160:    if (expr->variable()) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
      346:  161:        const Variable *var = expr->variable();
call    0 returned 100%
      692:  162:        std::string ret;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
      802:  163:        for (const Token *type = var->typeStartToken(); Token::Match(type,"%name%|::") && type != var->nameToken(); type = type->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 81% (fallthrough)
branch  5 taken 19%
call    6 returned 100%
branch  7 taken 70% (fallthrough)
branch  8 taken 30%
branch  9 taken 57% (fallthrough)
branch 10 taken 43%
call   11 returned 100%
      456:  164:            if (!Token::Match(type, "const|static"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      456:  165:                ret += type->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  166:        }
      346:  167:        return ret;
call    0 returned 100%
        -:  168:
        -:  169:    }
        -:  170:    // TODO: handle expressions
      194:  171:    return "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  172:}
        -:  173:
function _ZL5matchPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  174:static bool match(const Token *tok, const std::string &rhs)
        -:  175:{
    #####:  176:    if (tok->str() == rhs)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  177:        return true;
    #####:  178:    if (!tok->varId() && tok->hasKnownIntValue() && MathLib::toString(tok->values().front().intvalue) == rhs)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  179:        return true;
    #####:  180:    return false;
        -:  181:}
        -:  182:
function _Z23astIsVariableComparisonPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_PS1_ called 0 returned 0% blocks executed 0%
    #####:  183:const Token * astIsVariableComparison(const Token *tok, const std::string &comp, const std::string &rhs, const Token **vartok)
        -:  184:{
    #####:  185:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  186:        return nullptr;
        -:  187:
    #####:  188:    const Token *ret = nullptr;
    #####:  189:    if (tok->isComparisonOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  190:        if (tok->astOperand1() && match(tok->astOperand1(), rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  191:            // Invert comparator
    #####:  192:            std::string s = tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  193:            if (s[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  194:                s[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:            else if (s[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  196:                s[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  197:            if (s == comp) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:                ret = tok->astOperand2();
call    0 never executed
        -:  199:            }
    #####:  200:        } else if (tok->str() == comp && tok->astOperand2() && match(tok->astOperand2(), rhs)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  201:            ret = tok->astOperand1();
call    0 never executed
        -:  202:        }
    #####:  203:    } else if (comp == "!=" && rhs == std::string("0")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  204:        ret = tok;
    #####:  205:    } else if (comp == "==" && rhs == std::string("0")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  206:        if (tok->str() == "!") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:            ret = tok->astOperand1();
call    0 never executed
        -:  208:            // handle (!(x!=0)) as (x==0)
    #####:  209:            astIsVariableComparison(ret, "!=", "0", &ret);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  210:        }
        -:  211:    }
    #####:  212:    while (ret && ret->str() == ".")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  213:        ret = ret->astOperand2();
call    0 never executed
    #####:  214:    if (ret && ret->str() == "=" && ret->astOperand1() && ret->astOperand1()->varId())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  215:        ret = ret->astOperand1();
call    0 never executed
    #####:  216:    else if (ret && ret->varId() == 0U)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  217:        ret = nullptr;
    #####:  218:    if (vartok)
branch  0 never executed
branch  1 never executed
    #####:  219:        *vartok = ret;
    #####:  220:    return ret;
        -:  221:}
        -:  222:
function _Z11isTemporarybPK5Token called 8 returned 100% blocks executed 54%
        8:  223:bool isTemporary(bool cpp, const Token* tok)
        -:  224:{
        8:  225:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  226:        return false;
        8:  227:    if (Token::simpleMatch(tok, "."))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  228:        return (tok->originalName() != "->" && isTemporary(cpp, tok->astOperand1())) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  229:               isTemporary(cpp, tok->astOperand2());
call    0 never executed
call    1 never executed
        8:  230:    if (Token::Match(tok, ",|::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  231:        return isTemporary(cpp, tok->astOperand2());
call    0 never executed
call    1 never executed
        8:  232:    if (tok->isCast() || (cpp && isCPPCast(tok)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  233:        return isTemporary(cpp, tok->astOperand2());
call    0 never executed
call    1 never executed
        8:  234:    if (Token::Match(tok, "?|.|[|++|--|%name%|%assign%"))
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        2:  235:        return false;
        6:  236:    if (tok->isUnaryOp("*"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
    #####:  237:        return false;
        6:  238:    if (Token::Match(tok, "&|<<|>>") && isLikelyStream(cpp, tok->astOperand1()))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  239:        return false;
        6:  240:    if (Token::Match(tok->previous(), "%name% ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        6:  241:        return tok->previous()->function() && !Function::returnsReference(tok->previous()->function(), true);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  242:    return true;
        -:  243:}
        -:  244:
function _ZL14isFunctionCallPK5Token called 37 returned 100% blocks executed 85%
       37:  245:static bool isFunctionCall(const Token* tok)
        -:  246:{
       37:  247:    if (Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
       35:  248:        return true;
        2:  249:    if (Token::Match(tok, "%name% <") && Token::simpleMatch(tok->next()->link(), "> ("))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
        1:  250:        return true;
        1:  251:    if (Token::Match(tok, "%name% ::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  252:        return isFunctionCall(tok->tokAt(2));
call    0 never executed
call    1 never executed
        1:  253:    return false;
        -:  254:}
        -:  255:
function _ZL8hasTokenPK5TokenS1_S1_ called 1110 returned 100% blocks executed 100%
     1110:  256:static bool hasToken(const Token * startTok, const Token * stopTok, const Token * tok)
        -:  257:{
     2288:  258:    for (const Token * tok2 = startTok; tok2 != stopTok; tok2 = tok2->next()) {
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
call    2 returned 100%
     1946:  259:        if (tok2 == tok)
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
      768:  260:            return true;
        -:  261:    }
      342:  262:    return false;
        -:  263:}
        -:  264:
function _Z25nextAfterAstRightmostLeafPK5Token called 11860 returned 100% blocks executed 100%
    11860:  265:const Token * nextAfterAstRightmostLeaf(const Token * tok)
        -:  266:{
    11860:  267:    const Token * rightmostLeaf = tok;
    11860:  268:    if (!rightmostLeaf || !rightmostLeaf->astOperand1())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
branch  5 taken 74% (fallthrough)
branch  6 taken 26%
     8744:  269:        return nullptr;
     1794:  270:    do {
     4910:  271:        if (rightmostLeaf->astOperand2())
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
     3803:  272:            rightmostLeaf = rightmostLeaf->astOperand2();
call    0 returned 100%
        -:  273:        else
     1107:  274:            rightmostLeaf = rightmostLeaf->astOperand1();
call    0 returned 100%
     4910:  275:    } while (rightmostLeaf->astOperand1());
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
      342:  276:    while (Token::Match(rightmostLeaf->next(), "]|)") && !hasToken(rightmostLeaf->next()->link(), rightmostLeaf->next(), tok))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 31% (fallthrough)
branch  9 taken 69%
branch 10 taken 10% (fallthrough)
branch 11 taken 90%
      342:  277:        rightmostLeaf = rightmostLeaf->next();
call    0 returned 100%
     3116:  278:    if (rightmostLeaf->str() == "{" && rightmostLeaf->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       15:  279:        rightmostLeaf = rightmostLeaf->link();
call    0 returned 100%
     3116:  280:    return rightmostLeaf->next();
call    0 returned 100%
        -:  281:}
        -:  282:
function _Z19astParentSkipParensPK5Token called 0 returned 0% blocks executed 0%
    #####:  283:const Token* astParentSkipParens(const Token* tok)
        -:  284:{
    #####:  285:    return astParentSkipParens(const_cast<Token*>(tok));
call    0 never executed
        -:  286:}
function _Z19astParentSkipParensP5Token called 133 returned 100% blocks executed 92%
      133:  287:Token* astParentSkipParens(Token* tok)
        -:  288:{
      133:  289:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  290:        return nullptr;
      133:  291:    Token * parent = tok->astParent();
call    0 returned 100%
      133:  292:    if (!Token::simpleMatch(parent, "("))
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
      120:  293:        return parent;
       13:  294:    if (parent->link() != nextAfterAstRightmostLeaf(tok))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
        9:  295:        return parent;
        4:  296:    return astParentSkipParens(parent);
call    0 returned 100%
        -:  297:}
        -:  298:
function _ZL25getVariableInitExpressionPK8Variable called 1619 returned 100% blocks executed 100%
     1619:  299:static const Token * getVariableInitExpression(const Variable * var)
        -:  300:{
     1619:  301:    if (!var || !var->declEndToken())
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 63% (fallthrough)
branch  6 taken 37%
     1019:  302:        return nullptr;
      600:  303:    if (Token::Match(var->declEndToken(), "; %varid% =", var->declarationId()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
      139:  304:        return var->declEndToken()->tokAt(2)->astOperand2();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      461:  305:    return var->declEndToken()->astOperand2();
call    0 returned 100%
call    1 returned 100%
        -:  306:}
        -:  307:
function _ZL17isInLoopConditionPK5Token called 350 returned 100% blocks executed 100%
      350:  308:static bool isInLoopCondition(const Token * tok)
        -:  309:{
      350:  310:    return Token::Match(tok->astTop()->previous(), "for|while (");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  311:}
        -:  312:
        -:  313:/// If tok2 comes after tok1
function _Z8precedesPK5TokenS1_ called 8910 returned 100% blocks executed 88%
     8910:  314:bool precedes(const Token * tok1, const Token * tok2)
        -:  315:{
     8910:  316:    if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  317:        return false;
     8910:  318:    if (!tok2)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  319:        return false;
     8909:  320:    return tok1->index() < tok2->index();
call    0 returned 100%
call    1 returned 100%
        -:  321:}
        -:  322:
function _Z9isAliasOfPK5Tokeni called 3466 returned 100% blocks executed 97%
     3466:  323:bool isAliasOf(const Token *tok, nonneg int varid)
        -:  324:{
     3466:  325:    if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
      203:  326:        return false;
     3263:  327:    if (tok->varId() == 0)
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
     2009:  328:        return false;
     1650:  329:    for (const ValueFlow::Value &val : tok->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 24% (fallthrough)
branch  5 taken 76%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 99%
branch 10 taken 1%
call   11 returned 100%
branch 12 taken 99%
branch 13 taken 1%
      399:  330:        if (!val.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 65% (fallthrough)
branch  2 taken 35%
      258:  331:            continue;
      141:  332:        if (val.isInconclusive())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  333:            continue;
      141:  334:        if (val.tokvalue->varId() == varid)
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        3:  335:            return true;
        -:  336:    }
     1251:  337:    return false;
        -:  338:}
        -:  339:
function _ZL9isAliasedPK5TokenS1_i called 201 returned 100% blocks executed 93%
      201:  340:static bool isAliased(const Token *startTok, const Token *endTok, nonneg int varid)
        -:  341:{
      201:  342:    if (!precedes(startTok, endTok))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  343:        return false;
     2749:  344:    for (const Token *tok = startTok; tok != endTok; tok = tok->next()) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
     2552:  345:        if (Token::Match(tok, "= & %varid% ;", varid))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        3:  346:            return true;
     2549:  347:        if (isAliasOf(tok, varid))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1:  348:            return true;
        -:  349:    }
      197:  350:    return false;
        -:  351:}
        -:  352:
function _Z9isAliasedPK8Variable called 49 returned 100% blocks executed 77%
       49:  353:bool isAliased(const Variable *var)
        -:  354:{
       49:  355:    if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  356:        return false;
       49:  357:    if (!var->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  358:        return false;
       49:  359:    const Token *start = var->declEndToken();
call    0 returned 100%
       49:  360:    if (!start)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  361:        return false;
       49:  362:    return isAliased(start, var->scope()->bodyEnd, var->declarationId());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  363:}
        -:  364:
function _Z17exprDependsOnThisPK5Tokeni called 4461 returned 100% blocks executed 94%
     4461:  365:bool exprDependsOnThis(const Token* expr, nonneg int depth)
        -:  366:{
     4461:  367:    if (!expr)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
     1826:  368:        return false;
     2635:  369:    if (depth >= 1000)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  370:        // Abort recursion to avoid stack overflow
    #####:  371:        return true;
     2635:  372:    ++depth;
        -:  373:    // calling nonstatic method?
     2635:  374:    if (Token::Match(expr->previous(), "!!:: %name% (") && expr->function() && expr->function()->nestedIn && expr->function()->nestedIn->isClassOrStruct()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
branch  5 taken 22% (fallthrough)
branch  6 taken 78%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 21% (fallthrough)
branch 13 taken 79%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        -:  375:        // is it a method of this?
        6:  376:        const Scope *nestedIn = expr->scope()->functionOf;
call    0 returned 100%
        6:  377:        if (nestedIn && nestedIn->function)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  378:            nestedIn = nestedIn->function->token->scope();
call    0 never executed
        6:  379:        while (nestedIn && nestedIn != expr->function()->nestedIn) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  380:            nestedIn = nestedIn->nestedIn;
        -:  381:        }
        6:  382:        return nestedIn == expr->function()->nestedIn;
call    0 returned 100%
     2629:  383:    } else if (Token::Match(expr, "%var%") && expr->variable()) {
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 35% (fallthrough)
branch  7 taken 65%
      931:  384:        const Variable* var = expr->variable();
call    0 returned 100%
      931:  385:        return (var->isPrivate() || var->isPublic() || var->isProtected());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -:  386:    }
     1698:  387:    if (Token::simpleMatch(expr, "."))
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       79:  388:        return exprDependsOnThis(expr->astOperand1(), depth);
call    0 returned 100%
call    1 returned 100%
     1619:  389:    return exprDependsOnThis(expr->astOperand1(), depth) || exprDependsOnThis(expr->astOperand2(), depth);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  390:}
        -:  391:
        -:  392:/// This takes a token that refers to a variable and it will return the token
        -:  393:/// to the expression that the variable is assigned to. If its not valid to
        -:  394:/// make such substitution then it will return the original token.
function _ZL24followVariableExpressionPK5TokenbS1_ called 2366 returned 100% blocks executed 88%
     2366:  395:static const Token * followVariableExpression(const Token * tok, bool cpp, const Token * end = nullptr)
        -:  396:{
     2366:  397:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  398:        return tok;
        -:  399:    // Skip following variables that is across multiple files
     2366:  400:    if (end && end->fileIndex() != tok->fileIndex())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  401:        return tok;
        -:  402:    // Skip array access
     2366:  403:    if (Token::Match(tok, "%var% ["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2:  404:        return tok;
        -:  405:    // Skip pointer indirection
     2364:  406:    if (tok->astParent() && tok->isUnaryOp("*"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
call   17 returned 100%
branch 18 taken 1% (fallthrough)
branch 19 taken 99%
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
       12:  407:        return tok;
        -:  408:    // Skip following variables if it is used in an assignment
     2352:  409:    if (Token::Match(tok->next(), "%assign%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 31% (fallthrough)
branch  5 taken 69%
      733:  410:        return tok;
     1619:  411:    const Variable * var = tok->variable();
call    0 returned 100%
     1619:  412:    const Token * varTok = getVariableInitExpression(var);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1619:  413:    if (!varTok)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
     1294:  414:        return tok;
        -:  415:    // Bailout. If variable value depends on value of "this".
      325:  416:    if (exprDependsOnThis(varTok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1:  417:        return tok;
        -:  418:    // Skip array access
      324:  419:    if (Token::simpleMatch(varTok, "["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2:  420:        return tok;
      322:  421:    if (var->isVolatile())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1:  422:        return tok;
      321:  423:    if (!var->isLocal() && !var->isConst())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 39% (fallthrough)
branch  4 taken 61%
call    5 returned 100%
branch  6 taken 81% (fallthrough)
branch  7 taken 19%
branch  8 taken 31% (fallthrough)
branch  9 taken 69%
      100:  424:        return tok;
      221:  425:    if (var->isStatic() && !var->isConst())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        1:  426:        return tok;
      220:  427:    if (var->isArgument())
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
       23:  428:        return tok;
      197:  429:    const Token * lastTok = precedes(tok, end) ? end : tok;
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
        -:  430:    // If this is in a loop then check if variables are modified in the entire scope
      197:  431:    const Token * endToken = (isInLoopCondition(tok) || isInLoopCondition(varTok) || var->scope() != tok->scope()) ? var->scope()->bodyEnd : lastTok;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 14% (fallthrough)
branch 13 taken 86%
call   14 returned 100%
      197:  432:    if (!var->isConst() && (!precedes(varTok, endToken) || isVariableChanged(varTok, endToken, tok->varId(), false, nullptr, cpp)))
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 42% (fallthrough)
branch 11 taken 58%
branch 12 taken 35% (fallthrough)
branch 13 taken 65%
       69:  433:        return tok;
      128:  434:    if (precedes(varTok, endToken) && isAliased(varTok, endToken, tok->varId()))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
branch  9 taken 2% (fallthrough)
branch 10 taken 98%
        3:  435:        return tok;
        -:  436:    // Start at beginning of initialization
      125:  437:    const Token * startToken = varTok;
      265:  438:    while (Token::Match(startToken, "%op%|.|(|{") && startToken->astOperand1())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 36% (fallthrough)
branch  4 taken 64%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 36% (fallthrough)
branch  9 taken 64%
       70:  439:        startToken = startToken->astOperand1();
call    0 returned 100%
        -:  440:    // Skip if the variable its referring to is modified
      226:  441:    for (const Token * tok2 = startToken; tok2 != endToken; tok2 = tok2->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
      225:  442:        if (Token::simpleMatch(tok2, ";"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 35% (fallthrough)
branch  4 taken 65%
       78:  443:            break;
      147:  444:        if (tok2->astParent() && tok2->isUnaryOp("*"))
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 93% (fallthrough)
branch 13 taken 7%
call   14 returned 100%
branch 15 taken 93% (fallthrough)
branch 16 taken 7%
call   17 returned 100%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####:  445:            return tok;
      441:  446:        if (tok2->tokType() == Token::eIncDecOp ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
      294:  447:            tok2->isAssignmentOp() ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
      147:  448:            Token::Match(tok2, "%name% .|[|++|--|%assign%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       17:  449:            return tok;
        -:  450:        }
        -:  451:
      130:  452:        if (const Variable * var2 = tok2->variable()) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
       33:  453:            if (!var2->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  454:                return tok;
       33:  455:            const Token * endToken2 = var2->scope() != tok->scope() ? var2->scope()->bodyEnd : endToken;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
call    4 returned 100%
       33:  456:            if (!var2->isLocal() && !var2->isConst() && !var2->isArgument())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 73% (fallthrough)
branch  4 taken 27%
call    5 returned 100%
branch  6 taken 96% (fallthrough)
branch  7 taken 4%
call    8 returned 100%
branch  9 taken 9% (fallthrough)
branch 10 taken 91%
branch 11 taken 6% (fallthrough)
branch 12 taken 94%
        2:  457:                return tok;
       31:  458:            if (var2->isStatic() && !var2->isConst())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  459:                return tok;
       31:  460:            if (!var2->isConst() && (!precedes(tok2, endToken2) || isVariableChanged(tok2, endToken2, tok2->varId(), false, nullptr, cpp)))
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 21% (fallthrough)
branch 11 taken 79%
branch 12 taken 19% (fallthrough)
branch 13 taken 81%
        6:  461:                return tok;
       25:  462:            if (precedes(tok2, endToken2) && isAliased(tok2, endToken2, tok2->varId()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
        1:  463:                return tok;
        -:  464:            // Recognized as a variable but the declaration is unknown
       97:  465:        } else if (tok2->varId() > 0) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        2:  466:            return tok;
       95:  467:        } else if (tok2->tokType() == Token::eName && !Token::Match(tok2, "sizeof|decltype|typeof") && !tok2->function()) {
call    0 returned 100%
branch  1 taken 21% (fallthrough)
branch  2 taken 79%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 90% (fallthrough)
branch  7 taken 10%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 19% (fallthrough)
branch 12 taken 81%
       18:  468:            return tok;
        -:  469:        }
        -:  470:    }
       79:  471:    return varTok;
        -:  472:}
        -:  473:
function _ZL29followVariableExpressionErrorPK5TokenS1_PNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISB_EEE called 38 returned 100% blocks executed 52%
       38:  474:static void followVariableExpressionError(const Token *tok1, const Token *tok2, ErrorPath* errors)
        -:  475:{
       38:  476:    if (!errors)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  477:        return;
call    0 never executed
       38:  478:    if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  479:        return;
       38:  480:    if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  481:        return;
       76:  482:    ErrorPathItem item = std::make_pair(tok2, "'" + tok1->str() + "' is assigned value '" + tok2->expressionString() + "' here.");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
       38:  483:    if (std::find(errors->begin(), errors->end(), item) != errors->end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  484:        return;
       38:  485:    errors->push_back(item);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -:  486:}
        -:  487:
        -:  488:template<class Predicate, class F>
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZ22isDifferentKnownValuesPK5TokenS8_EUlRKS2_E_EvS8_T_T0_ called 3335 returned 100% blocks executed 69%
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZZ22isDifferentKnownValuesPK5TokenS8_ENKUlRKS2_E_clESA_EUlSA_E_EvS8_T_T0_ called 607 returned 100% blocks executed 74%
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZ17isEqualKnownValuePK5TokenS8_EUlRKS2_E_EvS8_T_T0_ called 23 returned 100% blocks executed 69%
function _Z14findTokenValueISt7_Mem_fnIMN9ValueFlow5ValueEKFbvEEZZ17isEqualKnownValuePK5TokenS8_ENKUlRKS2_E_clESA_EUlSA_E_EvS8_T_T0_ called 22 returned 100% blocks executed 74%
     3987:  489:static void findTokenValue(const Token* const tok, Predicate pred, F f)
        -:  490:{
     7974:  491:    auto x = std::find_if(tok->values().begin(), tok->values().end(), pred);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 never executed
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 returned 100%
call   27 returned 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0% (throw)
call   30 returned 100%
call   31 returned 100%
call   32 returned 100%
call   33 never executed
call   34 never executed
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 never executed
     3987:  492:    if (x != tok->values().end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 18% (fallthrough)
branch  5 taken 82%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 18% (fallthrough)
branch 11 taken 82%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
branch 16 taken 96% (fallthrough)
branch 17 taken 4%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0%
      761:  493:        f(*x);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
     3987:  494:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  495:
function _Z17isEqualKnownValuePK5TokenS1_ called 23 returned 100% blocks executed 100%
       23:  496:bool isEqualKnownValue(const Token * const tok1, const Token * const tok2)
        -:  497:{
       23:  498:    bool result = false;
function _ZZ17isEqualKnownValuePK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ called 22 returned 100% blocks executed 100%
       45:  499:    findTokenValue(tok1, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v1) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
function _ZZZ17isEqualKnownValuePK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ENKUlS5_E_clES5_ called 22 returned 100% blocks executed 100%
       44:  500:        findTokenValue(tok2, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v2) {
call    0 returned 100%
call    1 returned 100%
       44:  501:            result = v1.equalValue(v2);
call    0 returned 100%
       22:  502:        });
       22:  503:    });
       23:  504:    return result;
        -:  505:}
        -:  506:
function _Z22isDifferentKnownValuesPK5TokenS1_ called 3335 returned 100% blocks executed 100%
     3335:  507:bool isDifferentKnownValues(const Token * const tok1, const Token * const tok2)
        -:  508:{
     3335:  509:    bool result = false;
function _ZZ22isDifferentKnownValuesPK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ called 607 returned 100% blocks executed 100%
     3942:  510:    findTokenValue(tok1, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v1) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
function _ZZZ22isDifferentKnownValuesPK5TokenS1_ENKUlRKN9ValueFlow5ValueEE_clES5_ENKUlS5_E_clES5_ called 110 returned 100% blocks executed 100%
      717:  511:        findTokenValue(tok2, std::mem_fn(&ValueFlow::Value::isKnown), [&](const ValueFlow::Value& v2) {
call    0 returned 100%
call    1 returned 100%
      717:  512:            result = !v1.equalValue(v2);
call    0 returned 100%
      110:  513:        });
      607:  514:    });
     3335:  515:    return result;
        -:  516:}
        -:  517:
function _Z16isSameExpressionbbPK5TokenS1_RK7LibrarybbPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 6582 returned 100% blocks executed 95%
     6582:  518:bool isSameExpression(bool cpp, bool macro, const Token *tok1, const Token *tok2, const Library& library, bool pure, bool followVar, ErrorPath* errors)
        -:  519:{
     6582:  520:    if (tok1 == nullptr && tok2 == nullptr)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     1807:  521:        return true;
     4775:  522:    if (tok1 == nullptr || tok2 == nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      278:  523:        return false;
     4497:  524:    if (cpp) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     4378:  525:        if (tok1->str() == "." && tok1->astOperand1() && tok1->astOperand1()->str() == "this")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        2:  526:            tok1 = tok1->astOperand2();
call    0 returned 100%
     4378:  527:        if (tok2->str() == "." && tok2->astOperand1() && tok2->astOperand1()->str() == "this")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        2:  528:            tok2 = tok2->astOperand2();
call    0 returned 100%
        -:  529:    }
        -:  530:    // Skip double not
     4497:  531:    if (Token::simpleMatch(tok1, "!") && Token::simpleMatch(tok1->astOperand1(), "!") && !Token::simpleMatch(tok1->astParent(), "=")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 23% (fallthrough)
branch  6 taken 77%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 80% (fallthrough)
branch 10 taken 20%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        4:  532:        return isSameExpression(cpp, macro, tok1->astOperand1()->astOperand1(), tok2, library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  533:    }
     4493:  534:    if (Token::simpleMatch(tok2, "!") && Token::simpleMatch(tok2->astOperand1(), "!") && !Token::simpleMatch(tok2->astParent(), "=")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 9% (fallthrough)
branch  6 taken 91%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 75% (fallthrough)
branch 10 taken 25%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        3:  535:        return isSameExpression(cpp, macro, tok1, tok2->astOperand1()->astOperand1(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  536:    }
     4490:  537:    if (tok1->str() != tok2->str() && isDifferentKnownValues(tok1, tok2))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
       56:  538:        return false;
        -:  539:    // Follow variable
     4434:  540:    if (followVar && tok1->str() != tok2->str() && (Token::Match(tok1, "%var%") || Token::Match(tok2, "%var%"))) {
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 83% (fallthrough)
branch  6 taken 17%
call    7 returned 100%
branch  8 taken 29% (fallthrough)
branch  9 taken 71%
call   10 returned 100%
branch 11 taken 26% (fallthrough)
branch 12 taken 74%
branch 13 taken 27% (fallthrough)
branch 14 taken 73%
     1192:  541:        const Token * varTok1 = followVariableExpression(tok1, cpp, tok2);
call    0 returned 100%
     1192:  542:        if (varTok1->str() == tok2->str()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
       18:  543:            followVariableExpressionError(tok1, varTok1, errors);
call    0 returned 100%
       18:  544:            return isSameExpression(cpp, macro, varTok1, tok2, library, true, followVar, errors);
call    0 returned 100%
        -:  545:        }
     1174:  546:        const Token * varTok2 = followVariableExpression(tok2, cpp, tok1);
call    0 returned 100%
     1174:  547:        if (tok1->str() == varTok2->str()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       10:  548:            followVariableExpressionError(tok2, varTok2, errors);
call    0 returned 100%
       10:  549:            return isSameExpression(cpp, macro, tok1, varTok2, library, true, followVar, errors);
call    0 returned 100%
        -:  550:        }
     1164:  551:        if (varTok1->str() == varTok2->str()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        5:  552:            followVariableExpressionError(tok1, varTok1, errors);
call    0 returned 100%
        5:  553:            followVariableExpressionError(tok2, varTok2, errors);
call    0 returned 100%
        5:  554:            return isSameExpression(cpp, macro, varTok1, varTok2, library, true, followVar, errors);
call    0 returned 100%
        -:  555:        }
        -:  556:    }
     4401:  557:    if (tok1->varId() != tok2->varId() || tok1->str() != tok2->str() || tok1->originalName() != tok2->originalName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 66% (fallthrough)
branch  8 taken 34%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
branch 14 taken 74% (fallthrough)
branch 15 taken 26%
     6505:  558:        if ((Token::Match(tok1,"<|>")   && Token::Match(tok2,"<|>")) ||
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 69% (fallthrough)
branch  5 taken 31%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
     3253:  559:            (Token::Match(tok1,"<=|>=") && Token::Match(tok2,"<=|>="))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        8:  560:            return isSameExpression(cpp, macro, tok1->astOperand1(), tok2->astOperand2(), library, pure, followVar, errors) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        8:  561:                   isSameExpression(cpp, macro, tok1->astOperand2(), tok2->astOperand1(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  562:        }
     3246:  563:        return false;
        -:  564:    }
     1149:  565:    if (macro && (tok1->isExpandedMacro() || tok2->isExpandedMacro() || tok1->isTemplateArg() || tok2->isTemplateArg()))
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 returned 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        2:  566:        return false;
     1147:  567:    if (tok1->isComplex() != tok2->isComplex())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  568:        return false;
     1147:  569:    if (tok1->isLong() != tok2->isLong())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  570:        return false;
     1147:  571:    if (tok1->isUnsigned() != tok2->isUnsigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  572:        return false;
     1147:  573:    if (tok1->isSigned() != tok2->isSigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  574:        return false;
     1147:  575:    if (pure && tok1->isName() && tok1->next()->str() == "(" && tok1->str() != "sizeof") {
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
call    2 returned 100%
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 6% (fallthrough)
branch  9 taken 94%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 90% (fallthrough)
branch 13 taken 10%
branch 14 taken 3% (fallthrough)
branch 15 taken 97%
       37:  576:        if (!tok1->function()) {
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
        6:  577:            if (Token::simpleMatch(tok1->previous(), ".")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3:  578:                const Token *lhs = tok1->previous();
call    0 returned 100%
        9:  579:                while (Token::Match(lhs, "(|.|["))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        3:  580:                    lhs = lhs->astOperand1();
call    0 returned 100%
        7:  581:                const bool lhsIsConst = (lhs->variable() && lhs->variable()->isConst()) ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        7:  582:                                        (lhs->valueType() && lhs->valueType()->constness > 0) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        5:  583:                                        (Token::Match(lhs, "%var% . %name% (") && library.isFunctionConst(lhs->tokAt(2)));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        3:  584:                if (!lhsIsConst)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  585:                    return false;
        -:  586:            } else {
        3:  587:                const Token * ftok = tok1;
        3:  588:                if (Token::simpleMatch(tok1->previous(), "::"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  589:                    ftok = tok1->previous();
call    0 never executed
        3:  590:                if (!library.isFunctionConst(ftok) && !ftok->isAttributeConst() && !ftok->isAttributePure())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 67% (fallthrough)
branch  8 taken 33%
branch  9 taken 67% (fallthrough)
branch 10 taken 33%
        2:  591:                    return false;
        -:  592:            }
        -:  593:        } else {
       31:  594:            if (tok1->function() && !tok1->function()->isConst() && !tok1->function()->isAttributeConst() && !tok1->function()->isAttributePure())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 71% (fallthrough)
branch  6 taken 29%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 91% (fallthrough)
branch 10 taken 9%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 40% (fallthrough)
branch 14 taken 60%
branch 15 taken 26% (fallthrough)
branch 16 taken 74%
        8:  595:                return false;
        -:  596:        }
        -:  597:    }
        -:  598:    // templates/casts
     2272:  599:    if ((Token::Match(tok1, "%name% <") && tok1->next()->link()) ||
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 71% (fallthrough)
branch  6 taken 29%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
     1153:  600:        (Token::Match(tok2, "%name% <") && tok2->next()->link())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  601:
        -:  602:        // non-const template function that is not a dynamic_cast => return false
        6:  603:        if (pure && Token::simpleMatch(tok1->next()->link(), "> (") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
        6:  604:            !(tok1->function() && tok1->function()->isConst()) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
        2:  605:            tok1->str() != "dynamic_cast")
call    0 returned 100%
call    1 returned 100%
        1:  606:            return false;
        -:  607:
        -:  608:        // some template/cast stuff.. check that the template arguments are same
        1:  609:        const Token *t1 = tok1->next();
call    0 returned 100%
        1:  610:        const Token *t2 = tok2->next();
call    0 returned 100%
        1:  611:        const Token *end1 = t1->link();
call    0 returned 100%
        1:  612:        const Token *end2 = t2->link();
call    0 returned 100%
        7:  613:        while (t1 && t2 && t1 != end1 && t2 != end2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 75% (fallthrough)
branch  5 taken 25%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        3:  614:            if (t1->str() != t2->str())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  615:                return false;
        3:  616:            t1 = t1->next();
call    0 returned 100%
        3:  617:            t2 = t2->next();
call    0 returned 100%
        -:  618:        }
        1:  619:        if (t1 != end1 || t2 != end2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  620:            return false;
        -:  621:    }
     1135:  622:    if (tok1->tokType() == Token::eIncDecOp || tok1->isAssignmentOp())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        8:  623:        return false;
        -:  624:    // bailout when we see ({..})
     1127:  625:    if (tok1->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1:  626:        return false;
        -:  627:    // cast => assert that the casts are equal
     2362:  628:    if (tok1->str() == "(" && tok1->previous() &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 15% (fallthrough)
branch  6 taken 85%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
     1195:  629:        !tok1->previous()->isName() &&
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
       10:  630:        !(tok1->previous()->str() == ">" && tok1->previous()->link())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        6:  631:        const Token *t1 = tok1->next();
call    0 returned 100%
        6:  632:        const Token *t2 = tok2->next();
call    0 returned 100%
       18:  633:        while (t1 && t2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 38% (fallthrough)
branch  3 taken 63%
       11:  634:               t1->str() == t2->str() &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        6:  635:               t1->isLong() == t2->isLong() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        5:  636:               t1->isUnsigned() == t2->isUnsigned() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       14:  637:               t1->isSigned() == t2->isSigned() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 25% (fallthrough)
branch  7 taken 75%
        2:  638:               (t1->isName() || t1->str() == "*")) {
call    0 returned 100%
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        2:  639:            t1 = t1->next();
call    0 returned 100%
        2:  640:            t2 = t2->next();
call    0 returned 100%
        -:  641:        }
        6:  642:        if (!t1 || !t2 || t1->str() != ")" || t2->str() != ")")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        6:  643:            return false;
        -:  644:    }
        -:  645:    bool noncommutativeEquals =
     1120:  646:        isSameExpression(cpp, macro, tok1->astOperand1(), tok2->astOperand1(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     2155:  647:    noncommutativeEquals = noncommutativeEquals &&
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
     1035:  648:                           isSameExpression(cpp, macro, tok1->astOperand2(), tok2->astOperand2(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  649:
     1120:  650:    if (noncommutativeEquals)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     1006:  651:        return true;
        -:  652:
        -:  653:    // in c++, a+b might be different to b+a, depending on the type of a and b
      114:  654:    if (cpp && tok1->str() == "+" && tok1->isBinaryOp()) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
        4:  655:        const ValueType* vt1 = tok1->astOperand1()->valueType();
call    0 returned 100%
call    1 returned 100%
        4:  656:        const ValueType* vt2 = tok1->astOperand2()->valueType();
call    0 returned 100%
call    1 returned 100%
        4:  657:        if (!(vt1 && (vt1->type >= ValueType::VOID || vt1->pointer) && vt2 && (vt2->type >= ValueType::VOID || vt2->pointer)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
        2:  658:            return false;
        -:  659:    }
        -:  660:
      112:  661:    const bool commutative = tok1->isBinaryOp() && Token::Match(tok1, "%or%|%oror%|+|*|&|&&|^|==|!=");
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
call    3 returned 100%
branch  4 taken 34% (fallthrough)
branch  5 taken 66%
      141:  662:    bool commutativeEquals = commutative &&
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
      141:  663:                             isSameExpression(cpp, macro, tok1->astOperand2(), tok2->astOperand1(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      117:  664:    commutativeEquals = commutativeEquals &&
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
        5:  665:                        isSameExpression(cpp, macro, tok1->astOperand1(), tok2->astOperand2(), library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  666:
        -:  667:
      112:  668:    return commutativeEquals;
        -:  669:}
        -:  670:
function _ZL15isZeroBoundCondPK5Token called 0 returned 0% blocks executed 0%
    #####:  671:static bool isZeroBoundCond(const Token * const cond)
        -:  672:{
    #####:  673:    if (cond == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  674:        return false;
        -:  675:    // Assume unsigned
        -:  676:    // TODO: Handle reverse conditions
    #####:  677:    const bool isZero = cond->astOperand2()->getValue(0);
call    0 never executed
call    1 never executed
    #####:  678:    if (cond->str() == "==" || cond->str() == ">=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  679:        return isZero;
    #####:  680:    if (cond->str() == "<=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  681:        return true;
    #####:  682:    if (cond->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  683:        return !isZero;
    #####:  684:    if (cond->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  685:        return false;
    #####:  686:    return false;
        -:  687:}
        -:  688:
function _Z14isOppositeCondbbPK5TokenS1_RK7LibrarybbPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 1358 returned 100% blocks executed 25%
     1358:  689:bool isOppositeCond(bool isNot, bool cpp, const Token * const cond1, const Token * const cond2, const Library& library, bool pure, bool followVar, ErrorPath* errors)
        -:  690:{
     1358:  691:    if (!cond1 || !cond2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  692:        return false;
        -:  693:
     1358:  694:    if (cond1->str() == "!") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       23:  695:        if (cond2->str() == "!=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  696:            if (cond2->astOperand1() && cond2->astOperand1()->str() == "0")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  697:                return isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand2(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  698:            if (cond2->astOperand2() && cond2->astOperand2()->str() == "0")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  699:                return isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand1(), library, pure, followVar, errors);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  700:        }
       23:  701:        return isSameExpression(cpp, true, cond1->astOperand1(), cond2, library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  702:    }
        -:  703:
     1335:  704:    if (cond2->str() == "!")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       15:  705:        return isOppositeCond(isNot, cpp, cond2, cond1, library, pure, followVar, errors);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  706:
     1320:  707:    if (!isNot) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  708:        if (cond1->str() == "==" && cond2->str() == "==") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  709:            if (isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand1(), library, pure, followVar, errors))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  710:                return isDifferentKnownValues(cond1->astOperand2(), cond2->astOperand2());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  711:            if (isSameExpression(cpp, true, cond1->astOperand2(), cond2->astOperand2(), library, pure, followVar, errors))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  712:                return isDifferentKnownValues(cond1->astOperand1(), cond2->astOperand1());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  713:        }
        -:  714:        // TODO: Handle reverse conditions
    #####:  715:        if (Library::isContainerYield(cond1, Library::Container::Yield::EMPTY, "empty") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####:  716:            Library::isContainerYield(cond2->astOperand1(), Library::Container::Yield::SIZE, "size") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  717:            cond1->astOperand1()->astOperand1()->varId() == cond2->astOperand1()->astOperand1()->astOperand1()->varId()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  718:            return !isZeroBoundCond(cond2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  719:        }
        -:  720:
    #####:  721:        if (Library::isContainerYield(cond2, Library::Container::Yield::EMPTY, "empty") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####:  722:            Library::isContainerYield(cond1->astOperand1(), Library::Container::Yield::SIZE, "size") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####:  723:            cond2->astOperand1()->astOperand1()->varId() == cond1->astOperand1()->astOperand1()->astOperand1()->varId()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  724:            return !isZeroBoundCond(cond1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  725:        }
        -:  726:    }
        -:  727:
        -:  728:
     1320:  729:    if (!cond1->isComparisonOp() || !cond2->isComparisonOp())
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 38% (fallthrough)
branch  5 taken 62%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
     1299:  730:        return false;
        -:  731:
       21:  732:    const std::string &comp1 = cond1->str();
call    0 returned 100%
        -:  733:
        -:  734:    // condition found .. get comparator
       42:  735:    std::string comp2;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       28:  736:    if (isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand1(), library, pure, followVar, errors) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 33% (fallthrough)
branch  6 taken 67%
branch  7 taken 43% (fallthrough)
branch  8 taken 57%
branch  9 taken 14% (fallthrough)
branch 10 taken 86%
        7:  737:        isSameExpression(cpp, true, cond1->astOperand2(), cond2->astOperand2(), library, pure, followVar, errors)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        3:  738:        comp2 = cond2->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       20:  739:    } else if (isSameExpression(cpp, true, cond1->astOperand1(), cond2->astOperand2(), library, pure, followVar, errors) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 11% (fallthrough)
branch  6 taken 89%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 11% (fallthrough)
branch 10 taken 89%
        2:  740:               isSameExpression(cpp, true, cond1->astOperand2(), cond2->astOperand1(), library, pure, followVar, errors)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2:  741:        comp2 = cond2->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2:  742:        if (comp2[0] == '>')
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2:  743:            comp2[0] = '<';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    #####:  744:        else if (comp2[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  745:            comp2[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  746:    }
        -:  747:
       21:  748:    if (!isNot && comp2.empty()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  749:        const Token *expr1 = nullptr, *value1 = nullptr, *expr2 = nullptr, *value2 = nullptr;
    #####:  750:        std::string op1 = cond1->str(), op2 = cond2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  751:        if (cond1->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  752:            expr1 = cond1->astOperand1();
call    0 never executed
    #####:  753:            value1 = cond1->astOperand2();
call    0 never executed
    #####:  754:        } else if (cond1->astOperand1()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  755:            expr1 = cond1->astOperand2();
call    0 never executed
    #####:  756:            value1 = cond1->astOperand1();
call    0 never executed
    #####:  757:            if (op1[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  758:                op1[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  759:            else if (op1[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  760:                op1[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  761:        }
    #####:  762:        if (cond2->astOperand2()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  763:            expr2 = cond2->astOperand1();
call    0 never executed
    #####:  764:            value2 = cond2->astOperand2();
call    0 never executed
    #####:  765:        } else if (cond2->astOperand1()->hasKnownIntValue()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  766:            expr2 = cond2->astOperand2();
call    0 never executed
    #####:  767:            value2 = cond2->astOperand1();
call    0 never executed
    #####:  768:            if (op2[0] == '>')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  769:                op2[0] = '<';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:            else if (op2[0] == '<')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  771:                op2[0] = '>';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  772:        }
    #####:  773:        if (!expr1 || !value1 || !expr2 || !value2) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  774:            return false;
        -:  775:        }
    #####:  776:        if (!isSameExpression(cpp, true, expr1, expr2, library, pure, followVar, errors))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  777:            return false;
        -:  778:
    #####:  779:        const ValueFlow::Value &rhsValue1 = value1->values().front();
call    0 never executed
call    1 never executed
    #####:  780:        const ValueFlow::Value &rhsValue2 = value2->values().front();
call    0 never executed
call    1 never executed
        -:  781:
    #####:  782:        if (op1 == "<" || op1 == "<=")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  783:            return (op2 == "==" || op2 == ">" || op2 == ">=") && (rhsValue1.intvalue < rhsValue2.intvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  784:        else if (op1 == ">=" || op1 == ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  785:            return (op2 == "==" || op2 == "<" || op2 == "<=") && (rhsValue1.intvalue > rhsValue2.intvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  786:
    #####:  787:        return false;
        -:  788:    }
        -:  789:
        -:  790:    // is condition opposite?
       53:  791:    return ((comp1 == "==" && comp2 == "!=") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 14% (fallthrough)
branch  5 taken 86%
       45:  792:            (comp1 == "!=" && comp2 == "==") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 19% (fallthrough)
branch  5 taken 81%
       46:  793:            (comp1 == "<"  && comp2 == ">=") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       42:  794:            (comp1 == "<=" && comp2 == ">") ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 10% (fallthrough)
branch  5 taken 90%
       44:  795:            (comp1 == ">"  && comp2 == "<=") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
       64:  796:            (comp1 == ">=" && comp2 == "<") ||
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
       21:  797:            (!isNot && ((comp1 == "<" && comp2 == ">") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  798:                        (comp1 == ">" && comp2 == "<") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  799:                        (comp1 == "==" && (comp2 == "!=" || comp2 == ">" || comp2 == "<")) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  800:                        ((comp1 == "!=" || comp1 == ">" || comp1 == "<") && comp2 == "==")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
       21:  801:                       )));
        -:  802:}
        -:  803:
function _Z20isOppositeExpressionbPK5TokenS1_RK7LibrarybbPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 1617 returned 100% blocks executed 63%
     1617:  804:bool isOppositeExpression(bool cpp, const Token * const tok1, const Token * const tok2, const Library& library, bool pure, bool followVar, ErrorPath* errors)
        -:  805:{
     1617:  806:    if (!tok1 || !tok2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
      278:  807:        return false;
     1339:  808:    if (isOppositeCond(true, cpp, tok1, tok2, library, pure, followVar, errors))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       13:  809:        return true;
     1326:  810:    if (tok1->isUnaryOp("-"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  811:        return isSameExpression(cpp, true, tok1->astOperand1(), tok2, library, pure, followVar, errors);
call    0 never executed
call    1 never executed
     1326:  812:    if (tok2->isUnaryOp("-"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
call   11 never executed
call   12 never executed
        5:  813:        return isSameExpression(cpp, true, tok2->astOperand1(), tok1, library, pure, followVar, errors);
call    0 returned 100%
call    1 returned 100%
     1321:  814:    return false;
        -:  815:}
        -:  816:
function _Z17isConstExpressionPK5TokenRK7Librarybb called 4632 returned 100% blocks executed 96%
     4632:  817:bool isConstExpression(const Token *tok, const Library& library, bool pure, bool cpp)
        -:  818:{
     4632:  819:    if (!tok)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
     2885:  820:        return true;
     1747:  821:    if (tok->isName() && tok->next()->str() == "(") {
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
       34:  822:        if (!tok->function() && !Token::Match(tok->previous(), ".|::") && !library.isFunctionConst(tok->str(), pure))
call    0 returned 100%
branch  1 taken 59% (fallthrough)
branch  2 taken 41%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 85% (fallthrough)
branch  6 taken 15%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 41% (fallthrough)
branch 10 taken 59%
branch 11 taken 21% (fallthrough)
branch 12 taken 79%
        7:  823:            return false;
       27:  824:        else if (tok->function() && !tok->function()->isConst())
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 93% (fallthrough)
branch  6 taken 7%
branch  7 taken 48% (fallthrough)
branch  8 taken 52%
       13:  825:            return false;
        -:  826:    }
     1727:  827:    if (tok->tokType() == Token::eIncDecOp)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       12:  828:        return false;
     1715:  829:    if (tok->isAssignmentOp())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2:  830:        return false;
     1713:  831:    if (isLikelyStreamRead(cpp, tok))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  832:        return false;
        -:  833:    // bailout when we see ({..})
     1713:  834:    if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  835:        return false;
     1713:  836:    return isConstExpression(tok->astOperand1(), library, pure, cpp) && isConstExpression(tok->astOperand2(), library, pure, cpp);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
        -:  837:}
        -:  838:
function _Z20isWithoutSideEffectsbPK5Token called 90 returned 100% blocks executed 100%
       90:  839:bool isWithoutSideEffects(bool cpp, const Token* tok)
        -:  840:{
       90:  841:    if (!cpp)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  842:        return true;
        -:  843:
       24:  844:    while (tok && tok->astOperand2() && tok->astOperand2()->str() != "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 21% (fallthrough)
branch  4 taken 79%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 21% (fallthrough)
branch 11 taken 79%
       24:  845:        tok = tok->astOperand2();
call    0 returned 100%
       89:  846:    if (tok && tok->varId()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 66% (fallthrough)
branch  4 taken 34%
branch  5 taken 66% (fallthrough)
branch  6 taken 34%
       59:  847:        const Variable* var = tok->variable();
call    0 returned 100%
       59:  848:        return var && (!var->isClass() || var->isPointer() || var->isStlType());
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -:  849:    }
       30:  850:    return true;
        -:  851:}
        -:  852:
function _Z18isUniqueExpressionPK5Token called 76 returned 100% blocks executed 79%
       76:  853:bool isUniqueExpression(const Token* tok)
        -:  854:{
       76:  855:    if (!tok)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
       25:  856:        return true;
       51:  857:    if (tok->function()) {
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
       10:  858:        const Function * fun = tok->function();
call    0 returned 100%
       10:  859:        const Scope * scope = fun->nestedIn;
       10:  860:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  861:            return true;
       15:  862:        const std::string returnType = fun->retType ? fun->retType->name() : fun->retDef->stringifyList(fun->tokenDef);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 never executed
call   12 never executed
       23:  863:        for (const Function& f:scope->functionList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 50%
branch  9 taken 50%
call   10 returned 100%
branch 11 taken 50%
branch 12 taken 50%
call   13 returned 100%
branch 14 taken 50%
branch 15 taken 50%
call   16 never executed
call   17 never executed
       18:  864:            if (f.type != Function::eFunction)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1:  865:                continue;
        -:  866:
       29:  867:            const std::string freturnType = f.retType ? f.retType->name() : f.retDef->stringifyList(f.tokenDef);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
       50:  868:            if (f.argumentList.size() == fun->argumentList.size() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
branch  4 taken 29% (fallthrough)
branch  5 taken 71%
       32:  869:                returnType == freturnType &&
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
       15:  870:                f.name() != fun->name()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        5:  871:                return false;
call    0 returned 100%
branch  1 taken 71%
branch  2 taken 29%
        -:  872:            }
        -:  873:        }
       41:  874:    } else if (tok->variable()) {
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
       15:  875:        const Variable * var = tok->variable();
call    0 returned 100%
       15:  876:        const Scope * scope = var->scope();
call    0 returned 100%
       15:  877:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        3:  878:            return true;
       15:  879:        const Type * varType = var->type();
call    0 returned 100%
        -:  880:        // Iterate over the variables in scope and the parameters of the function if possible
       15:  881:        const Function * fun = scope->function;
       15:  882:        const std::list<Variable>* setOfVars[] = {&scope->varlist, fun ? &fun->argumentList : nullptr};
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  883:
       40:  884:        for (const std::list<Variable>* vars:setOfVars) {
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
       28:  885:            if (!vars)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        2:  886:                continue;
function _ZZ18isUniqueExpressionPK5TokenENKUlRK8VariableE_clES4_ called 42 returned 100% blocks executed 100%
       94:  887:            bool other = std::any_of(vars->cbegin(), vars->cend(), [=](const Variable &v) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
       53:  888:                if (varType)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
      104:  889:                    return v.type() && v.type()->name() == varType->name() && v.name() != var->name();
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 9% (fallthrough)
branch 13 taken 91%
       33:  890:                return v.isFloatingType() == var->isFloatingType() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       33:  891:                       v.isEnumType() == var->isEnumType() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       33:  892:                       v.isClass() == var->isClass() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       33:  893:                       v.isArray() == var->isArray() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
       40:  894:                       v.isPointer() == var->isPointer() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 29% (fallthrough)
branch  5 taken 71%
       18:  895:                       v.name() != var->name();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       26:  896:            });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       26:  897:            if (other)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        3:  898:                return false;
        -:  899:        }
       26:  900:    } else if (!isUniqueExpression(tok->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 35% (fallthrough)
branch  3 taken 65%
        9:  901:        return false;
        -:  902:    }
        -:  903:
       34:  904:    return isUniqueExpression(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
        -:  905:}
        -:  906:
function _ZL9isEscapedPK5Tokenb called 1498 returned 100% blocks executed 100%
     1498:  907:static bool isEscaped(const Token* tok, bool functionsScope)
        -:  908:{
     1498:  909:    if (functionsScope)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
      870:  910:        return Token::simpleMatch(tok, "throw");
call    0 returned 100%
        -:  911:    else
      628:  912:        return Token::Match(tok, "return|throw");
call    0 returned 100%
        -:  913:}
        -:  914:
function _ZL15isEscapedOrJumpPK5Tokenb called 3718 returned 100% blocks executed 100%
     3718:  915:static bool isEscapedOrJump(const Token* tok, bool functionsScope)
        -:  916:{
     3718:  917:    if (functionsScope)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
     2454:  918:        return Token::simpleMatch(tok, "throw");
call    0 returned 100%
        -:  919:    else
     1264:  920:        return Token::Match(tok, "return|goto|throw|continue|break");
call    0 returned 100%
        -:  921:}
        -:  922:
function _Z13isReturnScopePK5TokenPK8Settingsb called 2262 returned 100% blocks executed 90%
     2262:  923:bool isReturnScope(const Token * const endToken, const Settings * settings, bool functionScope)
        -:  924:{
     2262:  925:    if (!endToken || endToken->str() != "}")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  926:        return false;
        -:  927:
     2262:  928:    const Token *prev = endToken->previous();
call    0 returned 100%
     2262:  929:    while (prev && Token::simpleMatch(prev->previous(), "; ;"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  930:        prev = prev->previous();
call    0 never executed
     2262:  931:    if (prev && Token::simpleMatch(prev->previous(), "} ;"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       18:  932:        prev = prev->previous();
call    0 returned 100%
        -:  933:
     2262:  934:    if (Token::simpleMatch(prev, "}")) {
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
      432:  935:        if (Token::simpleMatch(prev->link()->tokAt(-2), "} else {"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
       42:  936:            return isReturnScope(prev, settings, functionScope) && isReturnScope(prev->link()->tokAt(-2), settings, functionScope);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
     1148:  937:        if (Token::simpleMatch(prev->link()->previous(), ") {") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
      418:  938:            Token::simpleMatch(prev->link()->linkAt(-1)->previous(), "switch (") &&
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 36% (fallthrough)
branch  7 taken 64%
       28:  939:            !Token::findsimplematch(prev->link(), "break", prev)) {
call    0 returned 100%
call    1 returned 100%
       10:  940:            return true;
        -:  941:        }
      380:  942:        if (isEscaped(prev->link()->astTop(), functionScope))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  943:            return true;
      380:  944:        if (Token::Match(prev->link()->previous(), "[;{}] {"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        8:  945:            return isReturnScope(prev, settings, functionScope);
call    0 returned 100%
     1830:  946:    } else if (Token::simpleMatch(prev, ";")) {
call    0 returned 100%
branch  1 taken 63% (fallthrough)
branch  2 taken 37%
     1159:  947:        if (Token::simpleMatch(prev->previous(), ") ;") && Token::Match(prev->linkAt(-1)->tokAt(-2), "[;{}] %name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 26% (fallthrough)
branch  3 taken 74%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 55% (fallthrough)
branch  8 taken 45%
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
      170:  948:            const Token * ftok = prev->linkAt(-1)->previous();
call    0 returned 100%
call    1 returned 100%
      170:  949:            const Function * function = ftok->function();
call    0 returned 100%
      170:  950:            if (function) {
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       28:  951:                if (function->isEscapeFunction())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  952:                    return true;
       28:  953:                if (function->isAttributeNoreturn())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  954:                    return true;
      142:  955:            } else if (settings) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      142:  956:                if (settings->library.isnoreturn(ftok))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  957:                    return true;
        -:  958:            }
      170:  959:            return false;
        -:  960:        }
     1126:  961:        if (Token::simpleMatch(prev->previous(), ") ;") && prev->previous()->link() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 6% (fallthrough)
branch  9 taken 94%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
      137:  962:            isEscaped(prev->previous()->link()->astTop(), functionScope))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        8:  963:            return true;
      981:  964:        if (isEscaped(prev->previous()->astTop(), functionScope))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
       82:  965:            return true;
        -:  966:        // return/goto statement
      899:  967:        prev = prev->previous();
call    0 returned 100%
     8263:  968:        while (prev && !Token::Match(prev, ";|{|}") && !isEscapedOrJump(prev, functionScope))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 81% (fallthrough)
branch  4 taken 19%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 80% (fallthrough)
branch  9 taken 20%
     3682:  969:            prev = prev->previous();
call    0 returned 100%
      899:  970:        return prev && prev->isName();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
        -:  971:    }
     1043:  972:    return false;
        -:  973:}
        -:  974:
function _Z31isVariableChangedByFunctionCallPK5TokeniiPK8SettingsPb called 0 returned 0% blocks executed 0%
    #####:  975:bool isVariableChangedByFunctionCall(const Token *tok, int indirect, nonneg int varid, const Settings *settings, bool *inconclusive)
        -:  976:{
    #####:  977:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  978:        return false;
    #####:  979:    if (tok->varId() == varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  980:        return isVariableChangedByFunctionCall(tok, indirect, settings, inconclusive);
call    0 never executed
    #####:  981:    return isVariableChangedByFunctionCall(tok->astOperand1(), indirect, varid, settings, inconclusive) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  982:           isVariableChangedByFunctionCall(tok->astOperand2(), indirect, varid, settings, inconclusive);
call    0 never executed
call    1 never executed
        -:  983:}
        -:  984:
function _Z14isScopeBracketPK5Token called 1065 returned 100% blocks executed 61%
     1065:  985:bool isScopeBracket(const Token* tok)
        -:  986:{
     1065:  987:    if (!Token::Match(tok, "{|}"))
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     1042:  988:        return false;
       23:  989:    if (!tok->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  990:        return false;
       23:  991:    if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       23:  992:        return tok->scope()->bodyStart == tok;
call    0 returned 100%
    #####:  993:    if (tok->str() == "}")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  994:        return tok->scope()->bodyEnd == tok;
call    0 never executed
    #####:  995:    return false;
        -:  996:}
        -:  997:
function _Z24getTokenArgumentFunctionPK5TokenRi called 921 returned 100% blocks executed 74%
      921:  998:const Token * getTokenArgumentFunction(const Token * tok, int& argn)
        -:  999:{
      921: 1000:    argn = -1;
        -: 1001:    {
      921: 1002:        const Token *parent = tok->astParent();
call    0 returned 100%
      921: 1003:        if (parent && parent->isUnaryOp("&"))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 3% (fallthrough)
branch 10 taken 97%
branch 11 taken 98% (fallthrough)
branch 12 taken 2%
call   13 returned 100%
branch 14 taken 98% (fallthrough)
branch 15 taken 2%
call   16 returned 100%
branch 17 taken 3% (fallthrough)
branch 18 taken 97%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
       31: 1004:            parent = parent->astParent();
call    0 returned 100%
      921: 1005:        while (parent && parent->isCast())
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1006:            parent = parent->astParent();
call    0 never executed
        -: 1007:
        -: 1008:        // passing variable to subfunction?
      921: 1009:        if (Token::Match(parent, "[(,{]"))
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
        -: 1010:            ;
      473: 1011:        else if (Token::simpleMatch(parent, ":")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1012:            while (Token::Match(parent, "[?:]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1013:                parent = parent->astParent();
call    0 never executed
    #####: 1014:            while (Token::simpleMatch(parent, ","))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1015:                parent = parent->astParent();
call    0 never executed
    #####: 1016:            if (!parent || parent->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1017:                return nullptr;
        -: 1018:        } else
      473: 1019:            return nullptr;
        -: 1020:    }
        -: 1021:
        -: 1022:    // goto start of function call and get argn
      448: 1023:    argn = 0;
     1722: 1024:    while (tok && !Token::simpleMatch(tok, ";") && !isScopeBracket(tok)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 98% (fallthrough)
branch  9 taken 2%
     1059: 1025:        if (tok->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       36: 1026:            ++argn;
     1023: 1027:        else if (Token::Match(tok, ")|}"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        4: 1028:            tok = tok->link();
call    0 returned 100%
     1019: 1029:        else if (Token::Match(tok->previous(), "%name% (|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 41% (fallthrough)
branch  3 taken 59%
      414: 1030:            break;
      605: 1031:        else if (Token::Match(tok->previous(), "> (|{") && tok->previous()->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        8: 1032:            break;
      637: 1033:        tok = tok->previous();
call    0 returned 100%
        -: 1034:    }
      448: 1035:    if (!Token::Match(tok, "{|("))
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
       26: 1036:        return nullptr;
      422: 1037:    tok = tok->previous();
call    0 returned 100%
      422: 1038:    if (tok && tok->link() && tok->str() == ">")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 2% (fallthrough)
branch 10 taken 98%
        8: 1039:        tok = tok->link()->previous();
call    0 returned 100%
call    1 returned 100%
      422: 1040:    if (!Token::Match(tok, "%name% [({<]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1041:        return nullptr;
      422: 1042:    return tok;
        -: 1043:}
        -: 1044:
function _Z31isVariableChangedByFunctionCallPK5TokeniPK8SettingsPb called 917 returned 100% blocks executed 60%
      917: 1045:bool isVariableChangedByFunctionCall(const Token *tok, int indirect, const Settings *settings, bool *inconclusive)
        -: 1046:{
      917: 1047:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1048:        return false;
        -: 1049:
      917: 1050:    const Token * const tok1 = tok;
        -: 1051:
        -: 1052:    // address of variable
      917: 1053:    const bool addressOf = tok->astParent() && tok->astParent()->isUnaryOp("&");
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 3% (fallthrough)
branch 12 taken 97%
branch 13 taken 98% (fallthrough)
branch 14 taken 2%
call   15 returned 100%
branch 16 taken 98% (fallthrough)
branch 17 taken 2%
call   18 returned 100%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
        -: 1054:
        -: 1055:    int argnr;
      917: 1056:    tok = getTokenArgumentFunction(tok, argnr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      917: 1057:    if (!tok)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
      497: 1058:        return false; // not a function => variable not changed
      420: 1059:    const Token * parenTok = tok->next();
call    0 returned 100%
      420: 1060:    if (Token::simpleMatch(parenTok, "<") && parenTok->link())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
        8: 1061:        parenTok = parenTok->link()->next();
call    0 returned 100%
call    1 returned 100%
      420: 1062:    const bool possiblyPassedByReference = (parenTok->next() == tok1 || Token::Match(tok1->previous(), ", %name% [,)}]"));
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 41% (fallthrough)
branch  8 taken 59%
        -: 1063:
        -: 1064:    // Constructor call
      420: 1065:    if (tok->variable() && tok->variable()->nameToken() == tok) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -: 1066:        // Find constructor..
    #####: 1067:        const int argCount = numberOfArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1068:        const Scope *typeScope = tok->variable()->typeScope();
call    0 never executed
call    1 never executed
    #####: 1069:        if (typeScope) {
branch  0 never executed
branch  1 never executed
    #####: 1070:            for (const Function &function : typeScope->functionList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1071:                if (!function.isConstructor() || function.argCount() < argCount)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1072:                    continue;
    #####: 1073:                const Variable *arg = function.getArgumentVar(argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1074:                if (arg && arg->isReference() && !arg->isConst())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1075:                    return true;
        -: 1076:            }
    #####: 1077:            return false;
        -: 1078:        }
    #####: 1079:        if (inconclusive)
branch  0 never executed
branch  1 never executed
    #####: 1080:            *inconclusive = true;
    #####: 1081:        return false;
        -: 1082:    }
        -: 1083:
      420: 1084:    if (!tok->function()) {
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
        -: 1085:        // Check if direction (in, out, inout) is specified in the library configuration and use that
      325: 1086:        if (!addressOf && settings) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
      290: 1087:            const Library::ArgumentChecks::Direction argDirection = settings->library.getArgDirection(tok, 1 + argnr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      290: 1088:            if (argDirection == Library::ArgumentChecks::Direction::DIR_IN)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       12: 1089:                return false;
      278: 1090:            else if (argDirection == Library::ArgumentChecks::Direction::DIR_OUT ||
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1091:                     argDirection == Library::ArgumentChecks::Direction::DIR_INOUT) {
        -: 1092:                // With out or inout the direction of the content is specified, not a pointer itself, so ignore pointers for now
        4: 1093:                const ValueType * const valueType = tok1->valueType();
call    0 returned 100%
        4: 1094:                if (valueType && valueType->pointer == indirect) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1095:                    return true;
        -: 1096:                }
        -: 1097:            }
        -: 1098:        }
        -: 1099:
        -: 1100:        // if the library says 0 is invalid
        -: 1101:        // => it is assumed that parameter is an in parameter (TODO: this is a bad heuristic)
      313: 1102:        if (!addressOf && settings && settings->library.isnullargbad(tok, 1+argnr))
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        4: 1103:            return false;
        -: 1104:        // possible pass-by-reference => inconclusive
      309: 1105:        if (possiblyPassedByReference) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      281: 1106:            if (inconclusive != nullptr)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      281: 1107:                *inconclusive = true;
      281: 1108:            return false;
        -: 1109:        }
        -: 1110:        // Safe guess: Assume that parameter is changed by function call
       28: 1111:        return true;
        -: 1112:    }
        -: 1113:
       95: 1114:    const Variable *arg = tok->function()->getArgumentVar(argnr);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1115:
       95: 1116:    if (addressOf || (indirect > 0 && arg && arg->isPointer())) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
        4: 1117:        if (!(arg && arg->isConst()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
branch  5 taken 25% (fallthrough)
branch  6 taken 75%
        1: 1118:            return true;
        -: 1119:        // If const is applied to the pointer, then the value can still be modified
        3: 1120:        if (arg && Token::simpleMatch(arg->typeEndToken(), "* const"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        3: 1121:            return true;
        -: 1122:    }
        -: 1123:
       91: 1124:    return arg && !arg->isConst() && arg->isReference();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 92% (fallthrough)
branch  4 taken 8%
call    5 returned 100%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
        -: 1125:}
        -: 1126:
function _Z17isVariableChangedPK5TokeniPK8Settingsbi called 2000 returned 100% blocks executed 94%
     2000: 1127:bool isVariableChanged(const Token *tok, int indirect, const Settings *settings, bool cpp, int depth)
        -: 1128:{
     2000: 1129:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1130:        return false;
     2000: 1131:    const Token *tok2 = tok;
     4326: 1132:    while (Token::simpleMatch(tok2->astParent(), "*") || (Token::simpleMatch(tok2->astParent(), ".") && !Token::simpleMatch(tok2->astParent()->astParent(), "(")) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 4% (fallthrough)
branch  7 taken 96%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 43% (fallthrough)
branch 12 taken 57%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
branch 15 taken 5% (fallthrough)
branch 16 taken 95%
     2034: 1133:           (Token::simpleMatch(tok2->astParent(), "[") && tok2 == tok2->astParent()->astOperand1()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 48% (fallthrough)
branch  5 taken 52%
      105: 1134:        tok2 = tok2->astParent();
call    0 returned 100%
        -: 1135:
       12: 1136:    while (Token::simpleMatch(tok2->astParent(), "?") || (Token::simpleMatch(tok2->astParent(), ":") && Token::simpleMatch(tok2->astParent()->astParent(), "?")))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 60% (fallthrough)
branch 12 taken 40%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
       12: 1137:        tok2 = tok2->astParent();
call    0 returned 100%
        -: 1138:
     2000: 1139:    if (Token::Match(tok2->astParent(), "++|--"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
      303: 1140:        return true;
        -: 1141:
     1697: 1142:    if (tok2->astParent() && tok2->astParent()->isAssignmentOp()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 24% (fallthrough)
branch  6 taken 76%
branch  7 taken 24% (fallthrough)
branch  8 taken 76%
      406: 1143:        if (tok2 == tok2->astParent()->astOperand1())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 73% (fallthrough)
branch  3 taken 27%
      296: 1144:            return true;
        -: 1145:        // Check if assigning to a non-const lvalue
      110: 1146:        const Variable * var = getLHSVariable(tok2->astParent());
call    0 returned 100%
call    1 returned 100%
      110: 1147:        if (var && var->isReference() && !var->isConst() && var->nameToken() && var->nameToken()->next() == tok2->astParent()) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 8% (fallthrough)
branch 17 taken 92%
        9: 1148:            if (!var->isLocal() || isVariableChanged(var, settings, cpp, depth - 1))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        9: 1149:                return true;
        -: 1150:        }
        -: 1151:    }
        -: 1152:
     1392: 1153:    if (isLikelyStreamRead(cpp, tok->previous()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1154:        return true;
        -: 1155:
     1392: 1156:    if (isLikelyStream(cpp, tok2))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 1157:        return true;
        -: 1158:
        -: 1159:    // Member function call
     1391: 1160:    if (tok->variable() && Token::Match(tok2->astParent(), ". %name%") && isFunctionCall(tok2->astParent()->next()) && tok2->astParent()->astOperand1() == tok2) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 97% (fallthrough)
branch 11 taken 3%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 3% (fallthrough)
branch 17 taken 97%
       36: 1161:        const Variable * var = tok->variable();
call    0 returned 100%
       36: 1162:        bool isConst = var && var->isConst();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       36: 1163:        if (!isConst && var) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       36: 1164:            const ValueType * valueType = var->valueType();
call    0 returned 100%
       36: 1165:            isConst = (valueType && valueType->pointer == 1 && valueType->constness == 1);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
        -: 1166:        }
        -: 1167:
       36: 1168:        const Token *ftok = tok->tokAt(2);
call    0 returned 100%
       36: 1169:        const Function * fun = ftok->function();
call    0 returned 100%
       36: 1170:        if (!isConst && (!fun || !fun->isConst()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
call    4 returned 100%
branch  5 taken 64% (fallthrough)
branch  6 taken 36%
branch  7 taken 89% (fallthrough)
branch  8 taken 11%
       32: 1171:            return true;
        -: 1172:        else
        4: 1173:            return false;
        -: 1174:    }
        -: 1175:
     1355: 1176:    const Token *ftok = tok2;
     9021: 1177:    while (ftok && (!Token::Match(ftok, "[({]") || ftok->isCast()))
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
branch  3 taken 22% (fallthrough)
branch  4 taken 78%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 74% (fallthrough)
branch  9 taken 26%
     3833: 1178:        ftok = ftok->astParent();
call    0 returned 100%
        -: 1179:
     1355: 1180:    if (ftok && Token::Match(ftok->link(), ")|} !!{")) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 26% (fallthrough)
branch  5 taken 74%
branch  6 taken 20% (fallthrough)
branch  7 taken 80%
      269: 1181:        const Token * ptok = tok2;
      271: 1182:        while (Token::Match(ptok->astParent(), ".|::|["))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        1: 1183:            ptok = ptok->astParent();
call    0 returned 100%
      269: 1184:        bool inconclusive = false;
      269: 1185:        bool isChanged = isVariableChangedByFunctionCall(ptok, indirect, settings, &inconclusive);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      269: 1186:        isChanged |= inconclusive;
      269: 1187:        if (isChanged)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      173: 1188:            return true;
        -: 1189:    }
        -: 1190:
     1182: 1191:    const Token *parent = tok2->astParent();
call    0 returned 100%
     1182: 1192:    while (Token::Match(parent, ".|::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1193:        parent = parent->astParent();
call    0 never executed
     1182: 1194:    if (parent && parent->tokType() == Token::eIncDecOp)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1195:        return true;
        -: 1196:
     1182: 1197:    if (Token::simpleMatch(tok2->astParent(), ":") && tok2->astParent()->astParent() && Token::simpleMatch(tok2->astParent()->astParent()->previous(), "for (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        4: 1198:        const Token * varTok = tok2->astParent()->previous();
call    0 returned 100%
call    1 returned 100%
        4: 1199:        if (!varTok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1200:            return false;
        4: 1201:        const Variable * loopVar = varTok->variable();
call    0 returned 100%
        4: 1202:        if (!loopVar)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1203:            return false;
        4: 1204:        if (!loopVar->isConst() && loopVar->isReference() && isVariableChanged(loopVar, settings, cpp, depth - 1))
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
call    3 returned 100%
branch  4 taken 67% (fallthrough)
branch  5 taken 33%
call    6 returned 100%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
branch  9 taken 25% (fallthrough)
branch 10 taken 75%
        1: 1205:            return true;
        3: 1206:        return false;
        -: 1207:    }
     1178: 1208:    return false;
        -: 1209:}
        -: 1210:
function _Z17isVariableChangedPK5TokenS1_ibPK8Settingsbi called 946 returned 100% blocks executed 100%
      946: 1211:bool isVariableChanged(const Token *start, const Token *end, const nonneg int varid, bool globalvar, const Settings *settings, bool cpp, int depth)
        -: 1212:{
      946: 1213:    return findVariableChanged(start, end, 0, varid, globalvar, settings, cpp, depth) != nullptr;
call    0 returned 100%
        -: 1214:}
        -: 1215:
function _Z19findVariableChangedP5TokenPKS_iibPK8Settingsbi called 1298 returned 100% blocks executed 83%
     1298: 1216:Token* findVariableChanged(Token *start, const Token *end, int indirect, const nonneg int varid, bool globalvar, const Settings *settings, bool cpp, int depth)
        -: 1217:{
     1298: 1218:    if (!precedes(start, end))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1219:        return nullptr;
     1298: 1220:    if (depth < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1221:        return start;
     8842: 1222:    for (Token *tok = start; tok != end; tok = tok->next()) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
    15121: 1223:        if (tok->varId() != varid) {
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
     7029: 1224:            if (globalvar && Token::Match(tok, "%name% ("))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -: 1225:                // TODO: Is global variable really changed by function call?
    #####: 1226:                return tok;
     7029: 1227:            continue;
        -: 1228:        }
     1063: 1229:        if (isVariableChanged(tok, indirect, settings, cpp, depth))
call    0 returned 100%
branch  1 taken 52% (fallthrough)
branch  2 taken 48%
      548: 1230:            return tok;
        -: 1231:    }
      750: 1232:    return nullptr;
        -: 1233:}
        -: 1234:
function _Z19findVariableChangedPK5TokenS1_iibPK8Settingsbi called 946 returned 100% blocks executed 100%
      946: 1235:const Token* findVariableChanged(const Token *start, const Token *end, int indirect, const nonneg int varid, bool globalvar, const Settings *settings, bool cpp, int depth)
        -: 1236:{
      946: 1237:    return findVariableChanged(const_cast<Token*>(start), end, indirect, varid, globalvar, settings, cpp, depth);
call    0 returned 100%
        -: 1238:}
        -: 1239:
function _Z17isVariableChangedPK8VariablePK8Settingsbi called 60 returned 100% blocks executed 75%
       60: 1240:bool isVariableChanged(const Variable * var, const Settings *settings, bool cpp, int depth)
        -: 1241:{
       60: 1242:    if (!var)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1243:        return false;
       60: 1244:    if (!var->scope())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1245:        return false;
       60: 1246:    const Token * start = var->declEndToken();
call    0 returned 100%
       60: 1247:    if (!start)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1248:        return false;
       60: 1249:    if (Token::Match(start, "; %varid% =", var->declarationId()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1250:        start = start->tokAt(2);
call    0 never executed
       60: 1251:    return isVariableChanged(start->next(), var->scope()->bodyEnd, var->declarationId(), var->isGlobal(), settings, cpp, depth);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -: 1252:}
        -: 1253:
function _Z18isVariablesChangedPK5TokenS1_iNSt7__debug6vectorIPK8VariableSaIS6_EEEPK8Settingsb called 1558 returned 100% blocks executed 62%
     1558: 1254:bool isVariablesChanged(const Token* start,
        -: 1255:                        const Token* end,
        -: 1256:                        int indirect,
        -: 1257:                        std::vector<const Variable*> vars,
        -: 1258:                        const Settings* settings,
        -: 1259:                        bool cpp)
        -: 1260:{
     3116: 1261:    std::set<int> varids;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
function _ZZ18isVariablesChangedPK5TokenS1_iNSt7__debug6vectorIPK8VariableSaIS6_EEEPK8SettingsbENKUlS6_E_clES6_ called 1320 returned 100% blocks executed 100%
     2878: 1262:    std::transform(vars.begin(), vars.end(), std::inserter(varids, varids.begin()), [](const Variable* var) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 1263:        return var->declarationId();
     1320: 1264:    });
call    0 returned 100%
function _ZZ18isVariablesChangedPK5TokenS1_iNSt7__debug6vectorIPK8VariableSaIS6_EEEPK8SettingsbENKUlS6_E0_clES6_ called 1316 returned 100% blocks executed 100%
     4432: 1265:    const bool globalvar = std::any_of(vars.begin(), vars.end(), [](const Variable* var) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
        -: 1266:        return var->isGlobal();
     2874: 1267:    });
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
    10175: 1268:    for (const Token* tok = start; tok != end; tok = tok->next()) {
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
call    2 returned 100%
    16870: 1269:        if (tok->varId() == 0 || varids.count(tok->varId()) == 0) {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 56% (fallthrough)
branch  8 taken 44%
branch  9 taken 95% (fallthrough)
branch 10 taken 5%
     8204: 1270:            if (globalvar && Token::Match(tok, "%name% ("))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -: 1271:                // TODO: Is global variable really changed by function call?
    #####: 1272:                return true;
     8204: 1273:            continue;
        -: 1274:        }
      462: 1275:        if (isVariableChanged(tok, indirect, settings, cpp))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
       49: 1276:            return true;
        -: 1277:    }
     1509: 1278:    return false;
        -: 1279:}
        -: 1280:
function _Z17numberOfArgumentsPK5Token called 9937 returned 100% blocks executed 100%
     9937: 1281:int numberOfArguments(const Token *start)
        -: 1282:{
     9937: 1283:    int arguments=0;
     9937: 1284:    const Token* const openBracket = start->next();
call    0 returned 100%
     9937: 1285:    if (openBracket && openBracket->str()=="(" && openBracket->next() && openBracket->next()->str()!=")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 74% (fallthrough)
branch 13 taken 26%
branch 14 taken 74% (fallthrough)
branch 15 taken 26%
     7374: 1286:        const Token* argument=openBracket->next();
call    0 returned 100%
    24168: 1287:        while (argument) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
     8397: 1288:            ++arguments;
     8397: 1289:            argument = argument->nextArgument();
call    0 returned 100%
        -: 1290:        }
        -: 1291:    }
     9937: 1292:    return arguments;
        -: 1293:}
        -: 1294:
function _Z12getArgumentsPK5Token called 4155 returned 100% blocks executed 94%
     4155: 1295:std::vector<const Token *> getArguments(const Token *ftok)
        -: 1296:{
     4155: 1297:    const Token* tok = ftok;
     4155: 1298:    if (Token::Match(tok, "%name% (|{"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     4116: 1299:        tok = ftok->next();
call    0 returned 100%
     4155: 1300:    if (!Token::Match(tok, "(|{|["))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1301:        return std::vector<const Token *> {};
call    0 never executed
     4155: 1302:    const Token *startTok = tok->astOperand2();
call    0 returned 100%
     4155: 1303:    if (!startTok && tok->next() != tok->link())
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       16: 1304:        startTok = tok->astOperand1();
call    0 returned 100%
     4155: 1305:    return astFlatten(startTok, ",");
call    0 returned 100%
        -: 1306:}
        -: 1307:
function _Z20findLambdaStartTokenPK5Token called 4 returned 100% blocks executed 79%
        4: 1308:const Token *findLambdaStartToken(const Token *last)
        -: 1309:{
        4: 1310:    if (!last || last->str() != "}")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1311:        return nullptr;
        4: 1312:    const Token* tok = last->link();
call    0 returned 100%
        4: 1313:    if (Token::simpleMatch(tok->astParent(), "("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1314:        tok = tok->astParent();
call    0 never executed
        4: 1315:    if (Token::simpleMatch(tok->astParent(), "["))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1316:        return tok->astParent();
call    0 never executed
        4: 1317:    return nullptr;
        -: 1318:}
        -: 1319:
function _Z18findLambdaEndTokenPK5Token called 18904 returned 100% blocks executed 93%
    18904: 1320:const Token *findLambdaEndToken(const Token *first)
        -: 1321:{
    18904: 1322:    if (!first || first->str() != "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    18695: 1323:        return nullptr;
      209: 1324:    if (!Token::Match(first->link(), "] (|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
      188: 1325:        return nullptr;
       21: 1326:    if (first->astOperand1() != first->link()->next())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
        3: 1327:        return nullptr;
       18: 1328:    const Token * tok = first;
        -: 1329:
       18: 1330:    if (tok->astOperand1() && tok->astOperand1()->str() == "(")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
       18: 1331:        tok = tok->astOperand1();
call    0 returned 100%
       18: 1332:    if (tok->astOperand1() && tok->astOperand1()->str() == "{")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
       18: 1333:        return tok->astOperand1()->link();
call    0 returned 100%
call    1 returned 100%
    #####: 1334:    return nullptr;
        -: 1335:}
        -: 1336:
function _Z14isLikelyStreambPK5Token called 1876 returned 100% blocks executed 95%
     1876: 1337:bool isLikelyStream(bool cpp, const Token *stream)
        -: 1338:{
     1876: 1339:    if (!cpp)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        6: 1340:        return false;
        -: 1341:
     1870: 1342:    if (!stream)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1343:        return false;
        -: 1344:
     1870: 1345:    if (!Token::Match(stream->astParent(), "&|<<|>>") || !stream->astParent()->isBinaryOp())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 75% (fallthrough)
branch  7 taken 25%
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
     1849: 1346:        return false;
        -: 1347:
       21: 1348:    if (stream->astParent()->astOperand1() != stream)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
       12: 1349:        return false;
        -: 1350:
        9: 1351:    return !astIsIntegral(stream, false);
call    0 returned 100%
        -: 1352:}
        -: 1353:
function _Z18isLikelyStreamReadbPK5Token called 5847 returned 100% blocks executed 90%
     5847: 1354:bool isLikelyStreamRead(bool cpp, const Token *op)
        -: 1355:{
     5847: 1356:    if (!cpp)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       97: 1357:        return false;
        -: 1358:
     5750: 1359:    if (!Token::Match(op, "&|>>") || !op->isBinaryOp())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
call    3 returned 100%
branch  4 taken 56% (fallthrough)
branch  5 taken 44%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
     5625: 1360:        return false;
        -: 1361:
      125: 1362:    if (!Token::Match(op->astOperand2(), "%name%|.|*|[") && op->str() != op->astOperand2()->str())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 6% (fallthrough)
branch 11 taken 94%
        8: 1363:        return false;
        -: 1364:
      117: 1365:    const Token *parent = op;
      127: 1366:    while (parent->astParent() && parent->astParent()->str() == op->str())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
        5: 1367:        parent = parent->astParent();
call    0 returned 100%
      117: 1368:    if (parent->astParent() && !Token::Match(parent->astParent(), "%oror%|&&|(|,|!"))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 19% (fallthrough)
branch  6 taken 81%
branch  7 taken 19% (fallthrough)
branch  8 taken 81%
       22: 1369:        return false;
       95: 1370:    if (op->str() == "&" && parent->astParent())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
branch  7 taken 97% (fallthrough)
branch  8 taken 3%
       92: 1371:        return false;
        3: 1372:    if (!parent->astOperand1() || !parent->astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1373:        return false;
        3: 1374:    return (!parent->astOperand1()->valueType() || !parent->astOperand1()->valueType()->isIntegral());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1375:}
        -: 1376:
function _Z9isCPPCastPK5Token called 1202 returned 100% blocks executed 100%
     1202: 1377:bool isCPPCast(const Token* tok)
        -: 1378:{
     1202: 1379:    return tok && Token::simpleMatch(tok->previous(), "> (") && tok->astOperand2() && tok->astOperand1() && tok->astOperand1()->str().find("_cast") != std::string::npos;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
        -: 1380:}
        -: 1381:
function _Z20isConstVarExpressionPK5Token called 75 returned 100% blocks executed 83%
       75: 1382:bool isConstVarExpression(const Token *tok)
        -: 1383:{
       75: 1384:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1385:        return false;
       75: 1386:    if (Token::simpleMatch(tok->previous(), "sizeof ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 1387:        return true;
       74: 1388:    if (Token::Match(tok->previous(), "%name% (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        4: 1389:        std::vector<const Token *> args = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        2: 1390:        return std::all_of(args.begin(), args.end(), &isConstVarExpression);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
        -: 1391:    }
       72: 1392:    if (isCPPCast(tok)) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        2: 1393:        return isConstVarExpression(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
        -: 1394:    }
       70: 1395:    if (Token::Match(tok, "( %type%"))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        2: 1396:        return isConstVarExpression(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
       68: 1397:    if (Token::Match(tok, "%cop%|[|.")) {
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        7: 1398:        if (tok->astOperand1() && !isConstVarExpression(tok->astOperand1()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 71% (fallthrough)
branch  6 taken 29%
branch  7 taken 71% (fallthrough)
branch  8 taken 29%
        5: 1399:            return false;
        2: 1400:        if (tok->astOperand2() && !isConstVarExpression(tok->astOperand2()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1401:            return false;
        2: 1402:        return true;
        -: 1403:    }
       61: 1404:    if (Token::Match(tok, "%bool%|%num%|%str%|%char%|nullptr|NULL"))
call    0 returned 100%
branch  1 taken 66% (fallthrough)
branch  2 taken 34%
       40: 1405:        return true;
       21: 1406:    if (tok->isEnumerator())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1407:        return true;
       21: 1408:    if (tok->variable())
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
       19: 1409:        return tok->variable()->isConst();
call    0 returned 100%
call    1 returned 100%
        2: 1410:    return false;
        -: 1411:}
        -: 1412:
function _ZL23getLHSVariableRecursivePK5Token called 108 returned 100% blocks executed 87%
      108: 1413:static const Variable *getLHSVariableRecursive(const Token *tok)
        -: 1414:{
      108: 1415:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1416:        return nullptr;
      108: 1417:    if (Token::Match(tok, "*|&|&&|[")) {
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
       41: 1418:        const Variable *var = getLHSVariableRecursive(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
       41: 1419:        if (var || Token::simpleMatch(tok, "["))
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 83% (fallthrough)
branch  6 taken 17%
       34: 1420:            return var;
        7: 1421:        return getLHSVariableRecursive(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
        -: 1422:    }
       67: 1423:    if (Token::Match(tok->previous(), "this . %var%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1424:        return tok->next()->variable();
call    0 never executed
call    1 never executed
       67: 1425:    return tok->variable();
call    0 returned 100%
        -: 1426:}
        -: 1427:
function _Z14getLHSVariablePK5Token called 196 returned 100% blocks executed 90%
      196: 1428:const Variable *getLHSVariable(const Token *tok)
        -: 1429:{
      196: 1430:    if (!Token::Match(tok, "%assign%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1431:        return nullptr;
      196: 1432:    if (!tok->astOperand1())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1433:        return nullptr;
      196: 1434:    if (tok->astOperand1()->varId() > 0 && tok->astOperand1()->variable())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 69% (fallthrough)
branch  9 taken 31%
      136: 1435:        return tok->astOperand1()->variable();
call    0 returned 100%
call    1 returned 100%
       60: 1436:    return getLHSVariableRecursive(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
        -: 1437:}
        -: 1438:
function _ZL8nonLocalPK8Variableb called 3553 returned 100% blocks executed 100%
     3553: 1439:static bool nonLocal(const Variable* var, bool deref)
        -: 1440:{
     3553: 1441:    return !var || (!var->isLocal() && !var->isArgument()) || (deref && var->isArgument() && var->isPointer()) || var->isStatic() || var->isReference() || var->isExtern();
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 56% (fallthrough)
branch  4 taken 44%
call    5 returned 100%
branch  6 taken 97% (fallthrough)
branch  7 taken 3%
branch  8 taken 3% (fallthrough)
branch  9 taken 97%
call   10 returned 100%
branch 11 taken 60% (fallthrough)
branch 12 taken 40%
call   13 returned 100%
branch 14 taken 5% (fallthrough)
branch 15 taken 95%
call   16 returned 100%
branch 17 taken 99% (fallthrough)
branch 18 taken 1%
call   19 returned 100%
branch 20 taken 99% (fallthrough)
branch 21 taken 1%
call   22 returned 100%
branch 23 taken 0% (fallthrough)
branch 24 taken 100%
        -: 1442:}
        -: 1443:
function _ZL23hasGccCompoundStatementPK5Token called 349 returned 100% blocks executed 95%
      349: 1444:static bool hasGccCompoundStatement(const Token *tok)
        -: 1445:{
      349: 1446:    if (!tok)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      223: 1447:        return false;
      126: 1448:    if (tok->str() == "{" && Token::simpleMatch(tok->previous(), "( {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
        2: 1449:        return true;
      124: 1450:    return hasGccCompoundStatement(tok->astOperand1()) || hasGccCompoundStatement(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 1451:}
        -: 1452:
function _ZL15hasFunctionCallPK5Token called 73 returned 100% blocks executed 100%
       73: 1453:static bool hasFunctionCall(const Token *tok)
        -: 1454:{
       73: 1455:    if (!tok)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       38: 1456:        return false;
       35: 1457:    if (Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        -: 1458:        // todo, const/pure function?
        6: 1459:        return true;
       29: 1460:    return hasFunctionCall(tok->astOperand1()) || hasFunctionCall(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 79% (fallthrough)
branch  3 taken 21%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 9% (fallthrough)
branch  7 taken 91%
        -: 1461:}
        -: 1462:
function _ZN12PathAnalysis14findOuterScopeEPK5Scope called 0 returned 0% blocks executed 0%
    #####: 1463:const Scope* PathAnalysis::findOuterScope(const Scope * scope)
        -: 1464:{
    #####: 1465:    if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 1466:        return nullptr;
    #####: 1467:    if (scope->isLocal() && scope->type != Scope::eSwitch)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1468:        return findOuterScope(scope->nestedIn);
call    0 never executed
    #####: 1469:    return scope;
        -: 1470:}
        -: 1471:
function _ZL10getCondTokPK5Token called 0 returned 0% blocks executed 0%
    #####: 1472:static const Token* getCondTok(const Token* tok)
        -: 1473:{
    #####: 1474:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1475:        return nullptr;
    #####: 1476:    if (Token::simpleMatch(tok, "("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1477:        return getCondTok(tok->previous());
call    0 never executed
call    1 never executed
    #####: 1478:    if (Token::simpleMatch(tok, "for") && Token::simpleMatch(tok->next()->astOperand2(), ";") && tok->next()->astOperand2()->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1479:        return tok->next()->astOperand2()->astOperand2()->astOperand1();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1480:    if (Token::simpleMatch(tok->next()->astOperand2(), ";"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1481:        return tok->next()->astOperand2()->astOperand1();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1482:    return tok->next()->astOperand2();
call    0 never executed
call    1 never executed
        -: 1483:}
        -: 1484:
function _ZN12PathAnalysis9checkCondEPK5TokenRb called 0 returned 0% blocks executed 0%
    #####: 1485:std::pair<bool, bool> PathAnalysis::checkCond(const Token * tok, bool& known)
        -: 1486:{
    #####: 1487:    if (tok->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1488:        known = true;
    #####: 1489:        return std::make_pair(tok->values().front().intvalue, !tok->values().front().intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1490:    }
function _ZZN12PathAnalysis9checkCondEPK5TokenRbENKUlRKN9ValueFlow5ValueEE_clES7_ called 0 returned 0% blocks executed 0%
    #####: 1491:    auto it = std::find_if(tok->values().begin(), tok->values().end(), [](const ValueFlow::Value& v) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 1492:        return v.isIntValue();
    #####: 1493:    });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 1494:    // If all possible values are the same, then assume all paths have the same value
function _ZZN12PathAnalysis9checkCondEPK5TokenRbENKUlRKN9ValueFlow5ValueEE0_clES7_ called 0 returned 0% blocks executed 0%
    #####: 1495:    if (it != tok->values().end() && std::all_of(it, tok->values().end(), [&](const ValueFlow::Value& v) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
    #####: 1496:    if (v.isIntValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1497:            return v.intvalue == it->intvalue;
call    0 never executed
    #####: 1498:        return true;
        -: 1499:    })) {
    #####: 1500:        known = false;
    #####: 1501:        return std::make_pair(it->intvalue, !it->intvalue);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -: 1502:    }
    #####: 1503:    return std::make_pair(true, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1504:}
        -: 1505:
function _ZNK12PathAnalysis16forwardRecursiveEPK5TokenNS_4InfoERKSt8functionIFNS_8ProgressERKS3_EE called 0 returned 0% blocks executed 0%
    #####: 1506:PathAnalysis::Progress PathAnalysis::forwardRecursive(const Token* tok, Info info, const std::function<PathAnalysis::Progress(const Info&)>& f) const
        -: 1507:{
    #####: 1508:    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 1509:        return Progress::Continue;
    #####: 1510:    if (tok->astOperand1() && forwardRecursive(tok->astOperand1(), info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
    #####: 1511:        return Progress::Break;
    #####: 1512:    info.tok = tok;
    #####: 1513:    if (f(info) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1514:        return Progress::Break;
    #####: 1515:    if (tok->astOperand2() && forwardRecursive(tok->astOperand2(), info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 1516:        return Progress::Break;
    #####: 1517:    return Progress::Continue;
        -: 1518:}
        -: 1519:
function _ZNK12PathAnalysis12forwardRangeEPK5TokenS2_NS_4InfoERKSt8functionIFNS_8ProgressERKS3_EE called 0 returned 0% blocks executed 0%
    #####: 1520:PathAnalysis::Progress PathAnalysis::forwardRange(const Token* startToken, const Token* endToken, Info info, const std::function<PathAnalysis::Progress(const Info&)>& f) const
        -: 1521:{
    #####: 1522:    for (const Token *tok = startToken; tok && tok != endToken; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1523:        if (Token::Match(tok, "asm|goto|break|continue"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1524:            return Progress::Break;
    #####: 1525:        if (Token::Match(tok, "return|throw")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1526:            forwardRecursive(tok, info, f);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1527:            return Progress::Break;
        -: 1528:        }
    #####: 1529:        if (Token::simpleMatch(tok, "}") && Token::simpleMatch(tok->link()->previous(), ") {") && Token::Match(tok->link()->linkAt(-1)->previous(), "if|while|for (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1530:            const Token * blockStart = tok->link()->linkAt(-1)->previous();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1531:            const Token * condTok = getCondTok(blockStart);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1532:            if (!condTok)
branch  0 never executed
branch  1 never executed
    #####: 1533:                continue;
    #####: 1534:            info.errorPath.emplace_back(condTok, "Assuming condition is true.");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1535:            // Traverse a loop a second time
    #####: 1536:            if (Token::Match(blockStart, "for|while (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1537:                const Token* endCond = blockStart->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1538:                bool traverseLoop = true;
        -: 1539:                // Only traverse simple for loops
    #####: 1540:                if (Token::simpleMatch(blockStart, "for") && !Token::Match(endCond->tokAt(-3), "; ++|--|%var% %var%|++|-- ) {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1541:                    traverseLoop = false;
        -: 1542:                // Traverse loop a second time
    #####: 1543:                if (traverseLoop) {
branch  0 never executed
branch  1 never executed
        -: 1544:                    // Traverse condition
    #####: 1545:                    if (forwardRecursive(condTok, info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1546:                        return Progress::Break;
        -: 1547:                    // TODO: Should we traverse the body: forwardRange(tok->link(), tok, info, f)?
        -: 1548:                }
        -: 1549:            }
        -: 1550:        }
    #####: 1551:        if (Token::Match(tok, "if|while|for (") && Token::simpleMatch(tok->next()->link(), ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1552:            const Token * endCond = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 1553:            const Token * endBlock = endCond->next()->link();
call    0 never executed
call    1 never executed
    #####: 1554:            const Token * condTok = getCondTok(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1555:            if (!condTok)
branch  0 never executed
branch  1 never executed
    #####: 1556:                continue;
        -: 1557:            // Traverse condition
    #####: 1558:            if (forwardRange(tok->next(), tok->next()->link(), info, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    #####: 1559:                return Progress::Break;
    #####: 1560:            Info i = info;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1561:            i.known = false;
    #####: 1562:            i.errorPath.emplace_back(condTok, "Assuming condition is true.");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1563:
        -: 1564:            // Check if condition is true or false
    #####: 1565:            bool checkThen = false;
    #####: 1566:            bool checkElse = false;
    #####: 1567:            std::tie(checkThen, checkElse) = checkCond(condTok, i.known);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1568:
        -: 1569:            // Traverse then block
    #####: 1570:            if (checkThen) {
branch  0 never executed
branch  1 never executed
    #####: 1571:                if (forwardRange(endCond->next(), endBlock, i, f) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1572:                    return Progress::Break;
        -: 1573:            }
        -: 1574:            // Traverse else block
    #####: 1575:            if (Token::simpleMatch(endBlock, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1576:                if (checkElse) {
branch  0 never executed
branch  1 never executed
    #####: 1577:                    i.errorPath.back().second = "Assuming condition is false.";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1578:                    Progress result = forwardRange(endCond->next(), endBlock, i, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1579:                    if (result == Progress::Break)
branch  0 never executed
branch  1 never executed
    #####: 1580:                        return Progress::Break;
        -: 1581:                }
    #####: 1582:                tok = endBlock->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1583:            } else {
    #####: 1584:                tok = endBlock;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1585:            }
    #####: 1586:        } else if (Token::simpleMatch(tok, "} else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1587:            tok = tok->linkAt(2);
call    0 never executed
        -: 1588:        } else {
    #####: 1589:            info.tok = tok;
    #####: 1590:            if (f(info) == Progress::Break)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1591:                return Progress::Break;
        -: 1592:        }
        -: 1593:        // Prevent infinite recursion
    #####: 1594:        if (tok->next() == start)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1595:            break;
        -: 1596:    }
    #####: 1597:    return Progress::Continue;
        -: 1598:}
        -: 1599:
function _ZNK12PathAnalysis7forwardERKSt8functionIFNS_8ProgressERKNS_4InfoEEE called 0 returned 0% blocks executed 0%
    #####: 1600:void PathAnalysis::forward(const std::function<Progress(const Info&)>& f) const
        -: 1601:{
    #####: 1602:    const Scope * endScope = findOuterScope(start->scope());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1603:    if (!endScope)
branch  0 never executed
branch  1 never executed
    #####: 1604:        return;
    #####: 1605:    const Token * endToken = endScope->bodyEnd;
    #####: 1606:    Info info{start, ErrorPath{}, true};
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1607:    forwardRange(start, endToken, info, f);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1608:}
        -: 1609:
function _Z7reachesPK5TokenS1_RK7LibraryPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEE called 0 returned 0% blocks executed 0%
    #####: 1610:bool reaches(const Token * start, const Token * dest, const Library& library, ErrorPath* errorPath)
        -: 1611:{
function _ZZ7reachesPK5TokenS1_RK7LibraryPNSt7__debug4listISt4pairIS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESaISE_EEEENKUlRKN12PathAnalysis4InfoEE_clESL_ called 0 returned 0% blocks executed 0%
    #####: 1612:    PathAnalysis::Info info = PathAnalysis{start, library} .forwardFind([&](const PathAnalysis::Info& i) {
call    0 never executed
    #####: 1613:        return (i.tok == dest);
    #####: 1614:    });
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1615:    if (!info.tok)
branch  0 never executed
branch  1 never executed
    #####: 1616:        return false;
    #####: 1617:    if (errorPath)
branch  0 never executed
branch  1 never executed
    #####: 1618:        errorPath->insert(errorPath->end(), info.errorPath.begin(), info.errorPath.end());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1619:    return true;
        -: 1620:}
        -: 1621:
function _ZL11isUnchangedPK5TokenS1_RKNSt7__debug3setIiSt4lessIiESaIiEEEb called 48 returned 100% blocks executed 75%
       48: 1622:static bool isUnchanged(const Token *startToken, const Token *endToken, const std::set<int> &exprVarIds, bool local)
        -: 1623:{
      313: 1624:    for (const Token *tok = startToken; tok != endToken; tok = tok->next()) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
      289: 1625:        if (!local && Token::Match(tok, "%name% (") && !Token::simpleMatch(tok->linkAt(1), ") {"))
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        -: 1626:            // TODO: this is a quick bailout
    #####: 1627:            return false;
      289: 1628:        if (tok->varId() <= 0 || exprVarIds.find(tok->varId()) == exprVarIds.end())
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 39% (fallthrough)
branch 10 taken 61%
branch 11 taken 23% (fallthrough)
branch 12 taken 77%
call   13 returned 100%
branch 14 taken 23% (fallthrough)
branch 15 taken 77%
call   16 returned 100%
branch 17 taken 86% (fallthrough)
branch 18 taken 14%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
      248: 1629:            continue;
       41: 1630:        const Token *parent = tok;
      123: 1631:        while (parent->astParent() && !parent->astParent()->isAssignmentOp() && parent->astParent()->tokType() != Token::Type::eIncDecOp) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 85% (fallthrough)
branch  6 taken 15%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 71% (fallthrough)
branch 10 taken 29%
branch 11 taken 50% (fallthrough)
branch 12 taken 50%
       41: 1632:            if (parent->str() == "," || parent->isUnaryOp("&"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
        -: 1633:                // TODO: This is a quick bailout
    #####: 1634:                return false;
       41: 1635:            parent = parent->astParent();
call    0 returned 100%
        -: 1636:        }
       41: 1637:        if (parent->astParent()) {
call    0 returned 100%
branch  1 taken 66% (fallthrough)
branch  2 taken 34%
       27: 1638:            if (parent->astParent()->tokType() == Token::Type::eIncDecOp)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 63% (fallthrough)
branch  3 taken 37%
       17: 1639:                return false;
       10: 1640:            else if (parent->astParent()->isAssignmentOp() && parent == parent->astParent()->astOperand1())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 70% (fallthrough)
branch  7 taken 30%
branch  8 taken 70% (fallthrough)
branch  9 taken 30%
        7: 1641:                return false;
        -: 1642:        }
        -: 1643:    }
       24: 1644:    return true;
        -: 1645:}
        -: 1646:
function _ZN11FwdAnalysis14checkRecursiveEPK5TokenS2_S2_RKNSt7__debug3setIiSt4lessIiESaIiEEEbb called 1355 returned 100% blocks executed 87%
     1355: 1647:struct FwdAnalysis::Result FwdAnalysis::checkRecursive(const Token *expr, const Token *startToken, const Token *endToken, const std::set<int> &exprVarIds, bool local, bool inInnerClass)
        -: 1648:{
        -: 1649:    // Parse the given tokens
        -: 1650:
     6870: 1651:    for (const Token* tok = startToken; precedes(tok, endToken); tok = tok->next()) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
call    3 returned 100%
     6305: 1652:        if (Token::simpleMatch(tok, "try {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1653:            // TODO: handle try
        3: 1654:            return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1655:        }
        -: 1656:
     6302: 1657:        if (Token::simpleMatch(tok, "break ;")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       34: 1658:            return Result(Result::Type::BREAK, tok);
call    0 returned 100%
        -: 1659:        }
        -: 1660:
     6268: 1661:        if (Token::simpleMatch(tok, "goto"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        4: 1662:            return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1663:
     6264: 1664:        if (!inInnerClass && tok->str() == "{" && tok->scope()->isClassOrStruct()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -: 1665:            // skip returns from local class definition
    #####: 1666:            FwdAnalysis::Result result = checkRecursive(expr, tok, tok->link(), exprVarIds, local, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1667:            if (result.type != Result::Type::NONE)
branch  0 never executed
branch  1 never executed
    #####: 1668:                return result;
    #####: 1669:            tok=tok->link();
call    0 never executed
        -: 1670:        }
        -: 1671:
     6264: 1672:        if (tok->str() == "continue")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 1673:            // TODO
        7: 1674:            return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1675:
     6257: 1676:        if (const Token *lambdaEndToken = findLambdaEndToken(tok)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 1677:            tok = lambdaEndToken;
        6: 1678:            const Result lambdaResult = checkRecursive(expr, lambdaEndToken->link()->next(), lambdaEndToken, exprVarIds, local, inInnerClass);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        6: 1679:            if (lambdaResult.type == Result::Type::READ || lambdaResult.type == Result::Type::BAILOUT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3: 1680:                return lambdaResult;
        -: 1681:        }
        -: 1682:
     6254: 1683:        if (Token::Match(tok, "return|throw")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1684:            // TODO: Handle these better
        -: 1685:            // Is expr variable used in expression?
       80: 1686:            const Token *end = tok->findExpressionStartEndTokens().second->next();
call    0 returned 100%
call    1 returned 100%
      228: 1687:            for (const Token *tok2 = tok; tok2 != end; tok2 = tok2->next()) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
call    2 returned 100%
      201: 1688:                if (!local && Token::Match(tok2, "%name% ("))
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1689:                    return Result(Result::Type::READ);
call    0 never executed
      201: 1690:                if (tok2->varId() && exprVarIds.find(tok2->varId()) != exprVarIds.end())
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 79% (fallthrough)
branch 10 taken 21%
branch 11 taken 33% (fallthrough)
branch 12 taken 67%
call   13 returned 100%
branch 14 taken 33% (fallthrough)
branch 15 taken 67%
call   16 returned 100%
branch 17 taken 26% (fallthrough)
branch 18 taken 74%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
       53: 1691:                    return Result(Result::Type::READ);
call    0 returned 100%
        -: 1692:            }
        -: 1693:
        -: 1694:            // #9167: if the return is inside an inner class, it does not tell us anything
       27: 1695:            if (!inInnerClass) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27: 1696:                if (!local && mWhat == What::Reassign)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2: 1697:                    return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1698:
       25: 1699:                return Result(Result::Type::RETURN);
call    0 returned 100%
        -: 1700:            }
        -: 1701:        }
        -: 1702:
     6174: 1703:        if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -: 1704:            // Known value => possible value
      204: 1705:            if (tok->scope() == expr->scope())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
      191: 1706:                mValueFlowKnown = false;
        -: 1707:
      204: 1708:            Scope::ScopeType scopeType = tok->scope()->type;
call    0 returned 100%
      204: 1709:            if (scopeType == Scope::eWhile || scopeType == Scope::eFor || scopeType == Scope::eDo) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
        -: 1710:                // check condition
       51: 1711:                const Token *conditionStart = nullptr;
       51: 1712:                const Token *conditionEnd = nullptr;
       51: 1713:                if (Token::simpleMatch(tok->link()->previous(), ") {")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 76% (fallthrough)
branch  6 taken 24%
       39: 1714:                    conditionEnd = tok->link()->previous();
call    0 returned 100%
call    1 returned 100%
       39: 1715:                    conditionStart = conditionEnd->link();
call    0 returned 100%
       12: 1716:                } else if (Token::simpleMatch(tok->link()->previous(), "do {") && Token::simpleMatch(tok, "} while (")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
       12: 1717:                    conditionStart = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12: 1718:                    conditionEnd = conditionStart->link();
call    0 returned 100%
        -: 1719:                }
       51: 1720:                if (conditionStart && conditionEnd) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       51: 1721:                    bool used = false;
      387: 1722:                    for (const Token *condTok = conditionStart; condTok != conditionEnd; condTok = condTok->next()) {
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
call    2 returned 100%
      336: 1723:                        if (exprVarIds.find(condTok->varId()) != exprVarIds.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 13% (fallthrough)
branch  9 taken 87%
call   10 never executed
call   11 never executed
       43: 1724:                            used = true;
        -: 1725:                    }
       51: 1726:                    if (used)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
       36: 1727:                        return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1728:                }
        -: 1729:
        -: 1730:                // check loop body again..
       15: 1731:                const struct FwdAnalysis::Result &result = checkRecursive(expr, tok->link(), tok, exprVarIds, local, inInnerClass);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       15: 1732:                if (result.type == Result::Type::BAILOUT || result.type == Result::Type::READ)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       12: 1733:                    return result;
        -: 1734:            }
        -: 1735:        }
        -: 1736:
     6126: 1737:        if (Token::simpleMatch(tok, "else {"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        8: 1738:            tok = tok->linkAt(1);
call    0 returned 100%
        -: 1739:
     6126: 1740:        if (Token::simpleMatch(tok, "asm ("))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        3: 1741:            return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1742:
     6123: 1743:        if (mWhat == What::ValueFlow && (Token::Match(tok, "while|for (") || Token::simpleMatch(tok, "do {"))) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
       28: 1744:            const Token *bodyStart = nullptr;
       28: 1745:            const Token *conditionStart = nullptr;
       28: 1746:            if (Token::simpleMatch(tok, "do {")) {
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
        5: 1747:                bodyStart = tok->next();
call    0 returned 100%
        5: 1748:                if (Token::simpleMatch(bodyStart->link(), "} while ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        5: 1749:                    conditionStart = bodyStart->link()->tokAt(2);
call    0 returned 100%
call    1 returned 100%
        -: 1750:            } else {
       23: 1751:                conditionStart = tok->next();
call    0 returned 100%
       23: 1752:                if (Token::simpleMatch(conditionStart->link(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
       22: 1753:                    bodyStart = conditionStart->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 1754:            }
        -: 1755:
       28: 1756:            if (!bodyStart || !conditionStart)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1: 1757:                return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1758:
        -: 1759:            // Is expr changed in condition?
       27: 1760:            if (!isUnchanged(conditionStart, conditionStart->link(), exprVarIds, local))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
        6: 1761:                return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1762:
        -: 1763:            // Is expr changed in loop body?
       21: 1764:            if (!isUnchanged(bodyStart, bodyStart->link(), exprVarIds, local))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 86% (fallthrough)
branch  3 taken 14%
       18: 1765:                return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1766:        }
        -: 1767:
     6098: 1768:        if (!local && Token::Match(tok, "%name% (") && !Token::simpleMatch(tok->linkAt(1), ") {")) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
call    2 returned 100%
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 56% (fallthrough)
branch  8 taken 44%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        -: 1769:            // TODO: this is a quick bailout
       14: 1770:            return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1771:        }
        -: 1772:
     6084: 1773:        if (expr->isName() && Token::Match(tok, "%name% (") && tok->str().find("<") != std::string::npos && tok->str().find(expr->str()) != std::string::npos)
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
call    3 returned 100%
branch  4 taken 10% (fallthrough)
branch  5 taken 90%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 1774:            return Result(Result::Type::BAILOUT);
call    0 never executed
        -: 1775:
     6084: 1776:        if (exprVarIds.find(tok->varId()) != exprVarIds.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 9% (fallthrough)
branch  9 taken 91%
call   10 never executed
call   11 never executed
call   12 never executed
      523: 1777:            const Token *parent = tok;
      523: 1778:            bool other = false;
      523: 1779:            bool same = tok->astParent() && isSameExpression(mCpp, false, expr, tok, mLibrary, true, false, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 83% (fallthrough)
branch  5 taken 17%
      635: 1780:            while (!same && Token::Match(parent->astParent(), "*|.|::|[|(|%cop%")) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 63% (fallthrough)
branch  5 taken 37%
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
       73: 1781:                parent = parent->astParent();
call    0 returned 100%
       73: 1782:                if (parent && isSameExpression(mCpp, false, expr, parent, mLibrary, true, false, nullptr)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
branch  5 taken 40% (fallthrough)
branch  6 taken 60%
       29: 1783:                    same = true;
       29: 1784:                    if (mWhat == What::ValueFlow) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -: 1785:                        KnownAndToken v;
       16: 1786:                        v.known = mValueFlowKnown;
       16: 1787:                        v.token = parent;
       16: 1788:                        mValueFlow.push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1789:                    }
        -: 1790:                }
       73: 1791:                if (Token::Match(parent, ". %var%") && parent->next()->varId() && exprVarIds.find(parent->next()->varId()) == exprVarIds.end()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 59% (fallthrough)
branch 17 taken 41%
branch 18 taken 40% (fallthrough)
branch 19 taken 60%
call   20 returned 100%
branch 21 taken 40% (fallthrough)
branch 22 taken 60%
call   23 returned 100%
branch 24 taken 23% (fallthrough)
branch 25 taken 77%
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
       17: 1792:                    other = true;
       17: 1793:                    break;
        -: 1794:                }
        -: 1795:            }
      523: 1796:            if (mWhat != What::ValueFlow && same && Token::simpleMatch(parent->astParent(), "[") && parent == parent->astParent()->astOperand2()) {
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        2: 1797:                return Result(Result::Type::READ);
call    0 returned 100%
        -: 1798:            }
      521: 1799:            if (other)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       17: 1800:                continue;
      504: 1801:            if (Token::simpleMatch(parent->astParent(), "=") && parent == parent->astParent()->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 88% (fallthrough)
branch  7 taken 12%
branch  8 taken 22% (fallthrough)
branch  9 taken 78%
      110: 1802:                if (!local && hasFunctionCall(parent->astParent()->astOperand2())) {
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 29% (fallthrough)
branch  6 taken 71%
branch  7 taken 5% (fallthrough)
branch  8 taken 95%
        -: 1803:                    // TODO: this is a quick bailout
        6: 1804:                    return Result(Result::Type::BAILOUT);
call    0 returned 100%
        -: 1805:                }
      106: 1806:                if (hasOperand(parent->astParent()->astOperand2(), expr)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
        3: 1807:                    if (mWhat == What::Reassign)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1808:                        return Result(Result::Type::READ);
call    0 returned 100%
        2: 1809:                    continue;
        -: 1810:                }
        -: 1811:                // ({ .. })
      101: 1812:                if (hasGccCompoundStatement(parent->astParent()->astOperand2()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        2: 1813:                    return Result(Result::Type::BAILOUT);
call    0 returned 100%
       99: 1814:                const bool reassign = isSameExpression(mCpp, false, expr, parent, mLibrary, false, false, nullptr);
call    0 returned 100%
       99: 1815:                if (reassign)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       89: 1816:                    return Result(Result::Type::WRITE, parent->astParent());
call    0 returned 100%
call    1 returned 100%
       10: 1817:                return Result(Result::Type::READ);
call    0 returned 100%
      394: 1818:            } else if (mWhat == What::Reassign && parent->valueType() && parent->valueType()->pointer && Token::Match(parent->astParent(), "%assign%") && parent == parent->astParent()->astOperand1()) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
call    2 returned 100%
branch  3 taken 93% (fallthrough)
branch  4 taken 7%
call    5 returned 100%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 21% (fallthrough)
branch 11 taken 79%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 33% (fallthrough)
branch 15 taken 67%
branch 16 taken 1% (fallthrough)
branch 17 taken 99%
        2: 1819:                return Result(Result::Type::READ);
call    0 returned 100%
      400: 1820:            } else if (Token::Match(parent->astParent(), "%assign%") && !parent->astParent()->astParent() && parent == parent->astParent()->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 56% (fallthrough)
branch 11 taken 44%
branch 12 taken 5% (fallthrough)
branch 13 taken 95%
       19: 1821:                if (mWhat == What::Reassign)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
       11: 1822:                    return Result(Result::Type::BAILOUT, parent->astParent());
call    0 returned 100%
call    1 returned 100%
        8: 1823:                continue;
        -: 1824:            } else {
        -: 1825:                // TODO: this is a quick bailout
      373: 1826:                return Result(Result::Type::BAILOUT, parent->astParent());
call    0 returned 100%
call    1 returned 100%
        -: 1827:            }
        -: 1828:        }
        -: 1829:
     5561: 1830:        if (Token::Match(tok, ")|do {")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
      117: 1831:            if (tok->str() == ")" && Token::simpleMatch(tok->link()->previous(), "switch ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 40% (fallthrough)
branch 10 taken 60%
branch 11 taken 39% (fallthrough)
branch 12 taken 61%
        -: 1832:                // TODO: parse switch
       46: 1833:                return Result(Result::Type::BAILOUT);
call    0 returned 100%
       71: 1834:            const Result &result1 = checkRecursive(expr, tok->tokAt(2), tok->linkAt(1), exprVarIds, local, inInnerClass);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
       71: 1835:            if (result1.type == Result::Type::READ || result1.type == Result::Type::BAILOUT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
       23: 1836:                return result1;
       48: 1837:            if (mWhat == What::ValueFlow && result1.type == Result::Type::WRITE)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
        7: 1838:                mValueFlowKnown = false;
       48: 1839:            if (Token::simpleMatch(tok->linkAt(1), "} else {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
        4: 1840:                const Token *elseStart = tok->linkAt(1)->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        4: 1841:                const Result &result2 = checkRecursive(expr, elseStart, elseStart->link(), exprVarIds, local, inInnerClass);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4: 1842:                if (mWhat == What::ValueFlow && result2.type == Result::Type::WRITE)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1843:                    mValueFlowKnown = false;
        4: 1844:                if (result2.type == Result::Type::READ || result2.type == Result::Type::BAILOUT)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        8: 1845:                    return result2;
    #####: 1846:                if (result1.type == Result::Type::WRITE && result2.type == Result::Type::WRITE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1847:                    return result1;
    #####: 1848:                tok = elseStart->link();
call    0 never executed
        -: 1849:            } else {
       44: 1850:                tok = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1851:            }
        -: 1852:        }
        -: 1853:    }
        -: 1854:
      565: 1855:    return Result(Result::Type::NONE);
call    0 returned 100%
call    1 never executed
call    2 never executed
        -: 1856:}
        -: 1857:
function _ZNK11FwdAnalysis12isGlobalDataEPK5Token called 574 returned 100% blocks executed 67%
      574: 1858:bool FwdAnalysis::isGlobalData(const Token *expr) const
        -: 1859:{
      574: 1860:    bool globalData = false;
      574: 1861:    visitAstNodes(expr,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
function _ZZNK11FwdAnalysis12isGlobalDataEPK5TokenENKUlS2_E_clES2_ called 635 returned 100% blocks executed 94%
      635: 1862:    [&](const Token *tok) {
      635: 1863:        if (tok->varId() && !tok->variable()) {
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        -: 1864:            // Bailout, this is probably global
       77: 1865:            globalData = true;
        4: 1866:            return ChildrenToVisit::none;
        -: 1867:        }
      631: 1868:        if (tok->originalName() == "->") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        -: 1869:            // TODO check if pointer points at local data
       15: 1870:            globalData = true;
       15: 1871:            return ChildrenToVisit::none;
      616: 1872:        } else if (Token::Match(tok, "[*[]") && tok->astOperand1() && tok->astOperand1()->variable()) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 86% (fallthrough)
branch  9 taken 14%
branch 10 taken 6% (fallthrough)
branch 11 taken 94%
        -: 1873:            // TODO check if pointer points at local data
       38: 1874:            const Variable *lhsvar = tok->astOperand1()->variable();
call    0 returned 100%
call    1 returned 100%
       38: 1875:            const ValueType *lhstype = tok->astOperand1()->valueType();
call    0 returned 100%
call    1 returned 100%
       38: 1876:            if (lhsvar->isPointer()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       19: 1877:                globalData = true;
       19: 1878:                return ChildrenToVisit::none;
       19: 1879:            } else if (lhsvar->isArgument() && lhsvar->isArray()) {
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1880:                globalData = true;
    #####: 1881:                return ChildrenToVisit::none;
       19: 1882:            } else if (lhsvar->isArgument() && (!lhstype || (lhstype->type <= ValueType::Type::VOID && !lhstype->container))) {
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1883:                globalData = true;
    #####: 1884:                return ChildrenToVisit::none;
        -: 1885:            }
        -: 1886:        }
      597: 1887:        if (tok->varId() == 0 && tok->isName() && tok->previous()->str() != ".") {
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
call    3 returned 100%
branch  4 taken 8% (fallthrough)
branch  5 taken 92%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
        5: 1888:            globalData = true;
        5: 1889:            return ChildrenToVisit::none;
        -: 1890:        }
      592: 1891:        if (tok->variable()) {
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
        -: 1892:            // TODO : Check references
      532: 1893:            if (tok->variable()->isReference() && tok != tok->variable()->nameToken()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
        8: 1894:                globalData = true;
        8: 1895:                return ChildrenToVisit::none;
        -: 1896:            }
      524: 1897:            if (tok->variable()->isExtern()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 1898:                globalData = true;
        2: 1899:                return ChildrenToVisit::none;
        -: 1900:            }
      522: 1901:            if (tok->previous()->str() != "." && !tok->variable()->isLocal() && !tok->variable()->isArgument()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 11% (fallthrough)
branch  8 taken 89%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 35% (fallthrough)
branch 12 taken 65%
branch 13 taken 4% (fallthrough)
branch 14 taken 96%
       21: 1902:                globalData = true;
       21: 1903:                return ChildrenToVisit::none;
        -: 1904:            }
      501: 1905:            if (tok->variable()->isArgument() && tok->variable()->isPointer() && tok != expr) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1906:                globalData = true;
    #####: 1907:                return ChildrenToVisit::none;
        -: 1908:            }
      501: 1909:            if (tok->variable()->isPointerArray()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1910:                globalData = true;
    #####: 1911:                return ChildrenToVisit::none;
        -: 1912:            }
        -: 1913:        }
        -: 1914:        // Unknown argument type => it might be some reference type..
      561: 1915:        if (mCpp && tok->str() == "." && tok->astOperand1() && tok->astOperand1()->variable() && !tok->astOperand1()->valueType()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 77% (fallthrough)
branch 12 taken 23%
call   13 returned 100%
call   14 returned 100%
branch 15 taken 18% (fallthrough)
branch 16 taken 82%
branch 17 taken 1% (fallthrough)
branch 18 taken 99%
        3: 1916:            globalData = true;
        3: 1917:            return ChildrenToVisit::none;
        -: 1918:        }
      558: 1919:        if (Token::Match(tok, ".|["))
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       45: 1920:            return ChildrenToVisit::op1;
      513: 1921:        return ChildrenToVisit::op1_and_op2;
        -: 1922:    });
      574: 1923:    return globalData;
        -: 1924:}
        -: 1925:
function _ZNK11FwdAnalysis13getExprVarIdsEPK5TokenPbS3_ called 3877 returned 100% blocks executed 71%
     3877: 1926:std::set<int> FwdAnalysis::getExprVarIds(const Token* expr, bool* localOut, bool* unknownVarIdOut) const
        -: 1927:{
        -: 1928:    // all variable ids in expr.
     3877: 1929:    std::set<int> exprVarIds;
call    0 returned 100%
     3877: 1930:    bool local = true;
     3877: 1931:    bool unknownVarId = false;
     3877: 1932:    visitAstNodes(expr,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
call    8 never executed
function _ZZNK11FwdAnalysis13getExprVarIdsEPK5TokenPbS3_ENKUlS2_E_clES2_ called 9840 returned 100% blocks executed 89%
     9840: 1933:    [&](const Token *tok) {
     9840: 1934:        if (tok->varId() == 0 && tok->isName() && tok->previous()->str() != ".") {
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
call    3 returned 100%
branch  4 taken 29% (fallthrough)
branch  5 taken 71%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 96% (fallthrough)
branch 10 taken 4%
branch 11 taken 17% (fallthrough)
branch 12 taken 83%
        -: 1935:            // unknown variable
     1667: 1936:            unknownVarId = true;
     1667: 1937:            return ChildrenToVisit::none;
        -: 1938:        }
     8173: 1939:        if (tok->varId() > 0) {
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
     3738: 1940:            exprVarIds.insert(tok->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     3738: 1941:            if (!Token::simpleMatch(tok->previous(), ".")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
     3555: 1942:                const Variable *var = tok->variable();
call    0 returned 100%
     3555: 1943:                if (var && var->isReference() && var->isLocal() && Token::Match(var->nameToken(), "%var% [=(]") && !isGlobalData(var->nameToken()->next()->astOperand2()))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
branch  6 taken 36% (fallthrough)
branch  7 taken 64%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 86% (fallthrough)
branch 11 taken 14%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
branch 16 taken 17% (fallthrough)
branch 17 taken 83%
branch 18 taken 1% (fallthrough)
branch 19 taken 99%
        2: 1944:                    return ChildrenToVisit::none;
     3553: 1945:                const bool deref = tok->astParent() && (tok->astParent()->isUnaryOp("*") || (tok->astParent()->str() == "[" && tok == tok->astParent()->astOperand1()));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 98% (fallthrough)
branch 12 taken 2%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
branch 16 taken 2% (fallthrough)
branch 17 taken 98%
call   18 returned 100%
call   19 returned 100%
branch 20 taken 71% (fallthrough)
branch 21 taken 29%
branch 22 taken 100% (fallthrough)
branch 23 taken 0%
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0%
call   27 returned 100%
branch 28 never executed
branch 29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
     3553: 1946:                local &= !nonLocal(tok->variable(), deref);
call    0 returned 100%
call    1 returned 100%
        -: 1947:            }
        -: 1948:        }
     8171: 1949:        return ChildrenToVisit::op1_and_op2;
        -: 1950:    });
     3877: 1951:    if (localOut)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     1710: 1952:        *localOut = local;
     3877: 1953:    if (unknownVarIdOut)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     1710: 1954:        *unknownVarIdOut = unknownVarId;
     3877: 1955:    return exprVarIds;
        -: 1956:}
        -: 1957:
function _ZN11FwdAnalysis5checkEPK5TokenS2_S2_ called 1710 returned 100% blocks executed 72%
     1710: 1958:FwdAnalysis::Result FwdAnalysis::check(const Token* expr, const Token* startToken, const Token* endToken)
        -: 1959:{
        -: 1960:    // all variable ids in expr.
     1710: 1961:    bool local = true;
     1710: 1962:    bool unknownVarId = false;
     3420: 1963:    std::set<int> exprVarIds = getExprVarIds(expr, &local, &unknownVarId);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 1964:
     1710: 1965:    if (unknownVarId)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
      471: 1966:        return Result(FwdAnalysis::Result::Type::BAILOUT);
call    0 returned 100%
        -: 1967:
     1239: 1968:    if (mWhat == What::Reassign && isGlobalData(expr))
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 12% (fallthrough)
branch  6 taken 88%
branch  7 taken 5% (fallthrough)
branch  8 taken 95%
       65: 1969:        local = false;
        -: 1970:
        -: 1971:    // In unused values checking we do not want to check assignments to
        -: 1972:    // global data.
     1239: 1973:    if (mWhat == What::UnusedValue && isGlobalData(expr))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1974:        return Result(FwdAnalysis::Result::Type::BAILOUT);
call    0 never executed
        -: 1975:
     1239: 1976:    Result result = checkRecursive(expr, startToken, endToken, exprVarIds, local, false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1977:
        -: 1978:    // Break => continue checking in outer scope
     1279: 1979:    while (mWhat!=What::ValueFlow && result.type == FwdAnalysis::Result::Type::BREAK) {
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       20: 1980:        const Scope *s = result.token->scope();
call    0 returned 100%
       20: 1981:        while (s->type == Scope::eIf)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1982:            s = s->nestedIn;
       20: 1983:        if (s->type != Scope::eSwitch && s->type != Scope::eWhile && s->type != Scope::eFor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1984:            break;
       20: 1985:        result = checkRecursive(expr, s->bodyEnd->next(), endToken, exprVarIds, local, false);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1986:    }
        -: 1987:
     1239: 1988:    return result;
        -: 1989:}
        -: 1990:
function _ZNK11FwdAnalysis10hasOperandEPK5TokenS2_ called 3707 returned 100% blocks executed 100%
     3707: 1991:bool FwdAnalysis::hasOperand(const Token *tok, const Token *lhs) const
        -: 1992:{
     3707: 1993:    if (!tok)
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
     2182: 1994:        return false;
     1525: 1995:    if (isSameExpression(mCpp, false, tok, lhs, mLibrary, false, false, nullptr))
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       33: 1996:        return true;
     1492: 1997:    return hasOperand(tok->astOperand1(), lhs) || hasOperand(tok->astOperand2(), lhs);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        -: 1998:}
        -: 1999:
function _ZN11FwdAnalysis8reassignEPK5TokenS2_S2_ called 608 returned 100% blocks executed 100%
      608: 2000:const Token *FwdAnalysis::reassign(const Token *expr, const Token *startToken, const Token *endToken)
        -: 2001:{
      608: 2002:    mWhat = What::Reassign;
      608: 2003:    Result result = check(expr, startToken, endToken);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      608: 2004:    return result.type == FwdAnalysis::Result::Type::WRITE ? result.token : nullptr;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 2005:}
        -: 2006:
function _ZN11FwdAnalysis11unusedValueEPK5TokenS2_S2_ called 0 returned 0% blocks executed 0%
    #####: 2007:bool FwdAnalysis::unusedValue(const Token *expr, const Token *startToken, const Token *endToken)
        -: 2008:{
    #####: 2009:    if (isEscapedAlias(expr))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2010:        return false;
    #####: 2011:    mWhat = What::UnusedValue;
    #####: 2012:    Result result = check(expr, startToken, endToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2013:    return (result.type == FwdAnalysis::Result::Type::NONE || result.type == FwdAnalysis::Result::Type::RETURN) && !possiblyAliased(expr, startToken);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 2014:}
        -: 2015:
function _ZN11FwdAnalysis9valueFlowEPK5TokenS2_S2_ called 1102 returned 100% blocks executed 100%
     1102: 2016:std::vector<FwdAnalysis::KnownAndToken> FwdAnalysis::valueFlow(const Token *expr, const Token *startToken, const Token *endToken)
        -: 2017:{
     1102: 2018:    mWhat = What::ValueFlow;
     1102: 2019:    mValueFlowKnown = true;
     1102: 2020:    check(expr, startToken, endToken);
call    0 returned 100%
     1102: 2021:    return mValueFlow;
call    0 returned 100%
        -: 2022:}
        -: 2023:
function _ZNK11FwdAnalysis15possiblyAliasedEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####: 2024:bool FwdAnalysis::possiblyAliased(const Token *expr, const Token *startToken) const
        -: 2025:{
    #####: 2026:    if (expr->isUnaryOp("*"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 2027:        return true;
        -: 2028:
    #####: 2029:    const bool macro = false;
    #####: 2030:    const bool pure = false;
    #####: 2031:    const bool followVar = false;
    #####: 2032:    for (const Token *tok = startToken; tok; tok = tok->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2033:        if (tok->str() == "{" && tok->scope()->type == Scope::eFunction)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2034:            break;
        -: 2035:
    #####: 2036:        if (Token::Match(tok, "%name% (") && !Token::Match(tok, "if|while|for")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2037:            // Is argument passed by reference?
    #####: 2038:            const std::vector<const Token*> args = getArguments(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2039:            for (int argnr = 0; argnr < args.size(); ++argnr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2040:                if (!Token::Match(args[argnr], "%name%|.|::"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2041:                    continue;
    #####: 2042:                if (tok->function() && tok->function()->getArgumentVar(argnr) && !tok->function()->getArgumentVar(argnr)->isReference() && !tok->function()->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####: 2043:                    continue;
    #####: 2044:                for (const Token *subexpr = expr; subexpr; subexpr = subexpr->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2045:                    if (isSameExpression(mCpp, macro, subexpr, args[argnr], mLibrary, pure, followVar))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2046:                        return true;
        -: 2047:                }
        -: 2048:            }
    #####: 2049:            continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2050:        }
        -: 2051:
    #####: 2052:        const Token *addrOf = nullptr;
    #####: 2053:        if (Token::Match(tok, "& %name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2054:            addrOf = tok->tokAt(2)->astOperand2();
call    0 never executed
call    1 never executed
    #####: 2055:        else if (tok->isUnaryOp("&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####: 2056:            addrOf = tok->astOperand1();
call    0 never executed
    #####: 2057:        else if (Token::simpleMatch(tok, "std :: ref ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2058:            addrOf = tok->tokAt(3)->astOperand2();
call    0 never executed
call    1 never executed
        -: 2059:        else
    #####: 2060:            continue;
        -: 2061:
    #####: 2062:        for (const Token *subexpr = expr; subexpr; subexpr = subexpr->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2063:            if (isSameExpression(mCpp, macro, subexpr, addrOf, mLibrary, pure, followVar))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2064:                return true;
        -: 2065:        }
        -: 2066:    }
    #####: 2067:    return false;
        -: 2068:}
        -: 2069:
function _ZN11FwdAnalysis14isEscapedAliasEPK5Token called 0 returned 0% blocks executed 0%
    #####: 2070:bool FwdAnalysis::isEscapedAlias(const Token* expr)
        -: 2071:{
    #####: 2072:    for (const Token *subexpr = expr; subexpr; subexpr = subexpr->astOperand1()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2073:        for (const ValueFlow::Value &val : subexpr->values()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####: 2074:            if (!val.isLocalLifetimeValue())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2075:                continue;
    #####: 2076:            const Variable* var = val.tokvalue->variable();
call    0 never executed
    #####: 2077:            if (!var)
branch  0 never executed
branch  1 never executed
    #####: 2078:                continue;
    #####: 2079:            if (!var->isLocal())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2080:                return true;
    #####: 2081:            if (var->isArgument())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2082:                return true;
        -: 2083:
        -: 2084:        }
        -: 2085:    }
    #####: 2086:    return false;
        -: 2087:}
        -: 2088:
function _ZN11FwdAnalysis13isNullOperandEPK5Token called 681 returned 100% blocks executed 64%
      681: 2089:bool FwdAnalysis::isNullOperand(const Token *expr)
        -: 2090:{
      681: 2091:    if (!expr)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       81: 2092:        return false;
      600: 2093:    if (Token::Match(expr, "( %name% %name%| * )") && Token::Match(expr->astOperand1(), "0|NULL|nullptr"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2094:        return true;
      600: 2095:    return Token::Match(expr, "NULL|nullptr");
call    0 returned 100%
function _GLOBAL__sub_I__Z13visitAstNodesPK5TokenSt8functionIF15ChildrenToVisitS1_EE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 2096:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
