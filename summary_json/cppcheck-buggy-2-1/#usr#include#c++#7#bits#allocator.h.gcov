        -:    0:Source:/usr/include/c++/7/bits/allocator.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/valueflow.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocators -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2017 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: * Copyright (c) 1996-1997
        -:   27: * Silicon Graphics Computer Systems, Inc.
        -:   28: *
        -:   29: * Permission to use, copy, modify, distribute and sell this software
        -:   30: * and its documentation for any purpose is hereby granted without fee,
        -:   31: * provided that the above copyright notice appear in all copies and
        -:   32: * that both that copyright notice and this permission notice appear
        -:   33: * in supporting documentation.  Silicon Graphics makes no
        -:   34: * representations about the suitability of this software for any
        -:   35: * purpose.  It is provided "as is" without express or implied warranty.
        -:   36: */
        -:   37:
        -:   38:/** @file bits/allocator.h
        -:   39: *  This is an internal header file, included by other library headers.
        -:   40: *  Do not attempt to use it directly. @headername{memory}
        -:   41: */
        -:   42:
        -:   43:#ifndef _ALLOCATOR_H
        -:   44:#define _ALLOCATOR_H 1
        -:   45:
        -:   46:#include <bits/c++allocator.h> // Define the base class to std::allocator.
        -:   47:#include <bits/memoryfwd.h>
        -:   48:#if __cplusplus >= 201103L
        -:   49:#include <type_traits>
        -:   50:#endif
        -:   51:
        -:   52:#define __cpp_lib_incomplete_container_elements 201505
        -:   53:#if __cplusplus >= 201103L
        -:   54:# define __cpp_lib_allocator_is_always_equal 201411
        -:   55:#endif
        -:   56:
        -:   57:namespace std _GLIBCXX_VISIBILITY(default)
        -:   58:{
        -:   59:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   60:
        -:   61:  /**
        -:   62:   *  @addtogroup allocators
        -:   63:   *  @{
        -:   64:   */
        -:   65:
        -:   66:  /// allocator<void> specialization.
        -:   67:  template<>
        -:   68:    class allocator<void>
        -:   69:    {
        -:   70:    public:
        -:   71:      typedef size_t      size_type;
        -:   72:      typedef ptrdiff_t   difference_type;
        -:   73:      typedef void*       pointer;
        -:   74:      typedef const void* const_pointer;
        -:   75:      typedef void        value_type;
        -:   76:
        -:   77:      template<typename _Tp1>
        -:   78:	struct rebind
        -:   79:	{ typedef allocator<_Tp1> other; };
        -:   80:
        -:   81:#if __cplusplus >= 201103L
        -:   82:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   83:      // 2103. std::allocator propagate_on_container_move_assignment
        -:   84:      typedef true_type propagate_on_container_move_assignment;
        -:   85:
        -:   86:      typedef true_type is_always_equal;
        -:   87:
        -:   88:      template<typename _Up, typename... _Args>
        -:   89:	void
        -:   90:	construct(_Up* __p, _Args&&... __args)
        -:   91:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        -:   92:
        -:   93:      template<typename _Up>
        -:   94:	void
        -:   95:	destroy(_Up* __p) { __p->~_Up(); }
        -:   96:#endif
        -:   97:    };
        -:   98:
        -:   99:  /**
        -:  100:   * @brief  The @a standard allocator, as per [20.4].
        -:  101:   *
        -:  102:   *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
        -:  103:   *  for further details.
        -:  104:   *
        -:  105:   *  @tparam  _Tp  Type of allocated object.
        -:  106:   */
        -:  107:  template<typename _Tp>
        -:  108:    class allocator: public __allocator_base<_Tp>
        -:  109:    {
        -:  110:   public:
        -:  111:      typedef size_t     size_type;
        -:  112:      typedef ptrdiff_t  difference_type;
        -:  113:      typedef _Tp*       pointer;
        -:  114:      typedef const _Tp* const_pointer;
        -:  115:      typedef _Tp&       reference;
        -:  116:      typedef const _Tp& const_reference;
        -:  117:      typedef _Tp        value_type;
        -:  118:
        -:  119:      template<typename _Tp1>
        -:  120:	struct rebind
        -:  121:	{ typedef allocator<_Tp1> other; };
        -:  122:
        -:  123:#if __cplusplus >= 201103L
        -:  124:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  125:      // 2103. std::allocator propagate_on_container_move_assignment
        -:  126:      typedef true_type propagate_on_container_move_assignment;
        -:  127:
        -:  128:      typedef true_type is_always_equal;
        -:  129:#endif
        -:  130:
function _ZNSaIP5TokenEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIxEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEEC2Ev called 14 returned 100% blocks executed 100%
function _ZNSaIPK8VariableEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIPK5TokenEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeIN9ValueFlow5ValueEEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt4pairIPK5TokenPK5ScopeEEC2Ev called 1245 returned 100% blocks executed 100%
function _ZNSaIN11FwdAnalysis13KnownAndTokenEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeIjEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeIPK5ScopeEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaI13LifetimeTokenEC2Ev called 3111 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeIiEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIN9ValueFlow5ValueEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKPK8VariableN9ValueFlow5ValueEEEEC2Ev called 1912 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKiPK5TokenEEEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt4pairIKiN9ValueFlow5ValueEEEC2Ev called 323 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKiN9ValueFlow5ValueEEEEC2Ev called 497 returned 100% blocks executed 100%
function _ZNSaIN11ErrorLogger12ErrorMessage12FileLocationEEC2Ev called 0 returned 0% blocks executed 0%
     7102:  131:      allocator() throw() { }
call    0 never executed
call    1 never executed
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 returned 100%
call   12 never executed
call   13 never executed
call   14 returned 100%
call   15 never executed
call   16 returned 100%
call   17 returned 100%
call   18 never executed
        -:  132:
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKiN9ValueFlow5ValueEELb0EEEEC2ERKS7_ called 323 returned 100% blocks executed 100%
function _ZNSaINSt9__cxx199810_List_nodeIN11ErrorLogger12ErrorMessage12FileLocationEEEEC2ERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSaI13LifetimeTokenEC2ERKS0_ called 3129 returned 100% blocks executed 100%
function _ZNSaIPK8VariableEC2ERKS2_ called 3116 returned 100% blocks executed 100%
function _ZNSaINSt9__cxx199810_List_nodeIN9ValueFlow5ValueEEEEC2ERKS4_ called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEC2ERKSD_ called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKiN9ValueFlow5ValueEEEEC2ERKS6_ called 1008 returned 100% blocks executed 100%
     7576:  133:      allocator(const allocator& __a) throw()
     7576:  134:      : __allocator_base<_Tp>(__a) { }
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
call    6 returned 100%
        -:  135:
        -:  136:      template<typename _Tp1>
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKiN9ValueFlow5ValueEELb0EEEEC2IS5_EERKSaIT_E called 323 returned 100% blocks executed 100%
function _ZNSaIPP5TokenEC2IS0_EERKSaIT_E called 0 returned 0% blocks executed 0%
function _ZNSaIPNSt8__detail15_Hash_node_baseEEC2INS_10_Hash_nodeISt4pairIKiN9ValueFlow5ValueEELb0EEEEERKSaIT_E called 646 returned 100% blocks executed 100%
function _ZNSaISt4pairIKiN9ValueFlow5ValueEEEC2INSt8__detail10_Hash_nodeIS3_Lb0EEEEERKSaIT_E called 646 returned 100% blocks executed 100%
function _ZNSaISt4pairIKiN9ValueFlow5ValueEEEC2ISt13_Rb_tree_nodeIS3_EEERKSaIT_E called 30 returned 100% blocks executed 100%
function _ZNSaIN9ValueFlow5ValueEEC2INSt9__cxx199810_List_nodeIS0_EEEERKSaIT_E called 991 returned 100% blocks executed 100%
function _ZNSaINSt9__cxx199810_List_nodeISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEC2ISB_EERKSaIT_E called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeIN9ValueFlow5ValueEEEEC2IS2_EERKSaIT_E called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeIN11ErrorLogger12ErrorMessage12FileLocationEEEEC2IS3_EERKSaIT_E called 0 returned 0% blocks executed 0%
function _ZNSaISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2INSt9__cxx199810_List_nodeIS9_EEEERKSaIT_E called 0 returned 0% blocks executed 0%
     2636:  137:	allocator(const allocator<_Tp1>&) throw() { }
call    0 returned 100%
call    1 never executed
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  138:
function _ZNSaIPNSt8__detail15_Hash_node_baseEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIPP5TokenED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIxED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEED2Ev called 14 returned 100% blocks executed 100%
function _ZNSaIPK5TokenED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIP5TokenED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt4pairIPK5TokenPK5ScopeEED2Ev called 1245 returned 100% blocks executed 100%
function _ZNSaIN11FwdAnalysis13KnownAndTokenEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIPK8VariableED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt8__detail10_Hash_nodeISt4pairIKiN9ValueFlow5ValueEELb0EEEED2Ev called 646 returned 100% blocks executed 100%
function _ZNSaINSt9__cxx199810_List_nodeIN11ErrorLogger12ErrorMessage12FileLocationEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeIN9ValueFlow5ValueEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaINSt9__cxx199810_List_nodeISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeIjEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeIPK5ScopeEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaI13LifetimeTokenED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeIiEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaIN9ValueFlow5ValueEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKPK8VariableN9ValueFlow5ValueEEEED2Ev called 1912 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKiPK5TokenEEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSaISt4pairIKiN9ValueFlow5ValueEEED2Ev called 999 returned 100% blocks executed 100%
function _ZNSaISt13_Rb_tree_nodeISt4pairIKiN9ValueFlow5ValueEEEED2Ev called 1505 returned 100% blocks executed 100%
function _ZNSaIN11ErrorLogger12ErrorMessage12FileLocationEED2Ev called 0 returned 0% blocks executed 0%
     6321:  139:      ~allocator() throw() { }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 returned 100%
call    4 never executed
call    5 never executed
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 returned 100%
call   20 never executed
call   21 returned 100%
call   22 returned 100%
call   23 never executed
        -:  140:
        -:  141:      // Inherit everything else.
        -:  142:    };
        -:  143:
        -:  144:  template<typename _T1, typename _T2>
        -:  145:    inline bool
        -:  146:    operator==(const allocator<_T1>&, const allocator<_T2>&)
        -:  147:    _GLIBCXX_USE_NOEXCEPT
        -:  148:    { return true; }
        -:  149:
        -:  150:  template<typename _Tp>
        -:  151:    inline bool
function _ZSteqIN9ValueFlow5ValueEEbRKSaIT_ES5_ called 6 returned 100% blocks executed 100%
function _ZSteqISt4pairIKiN9ValueFlow5ValueEEEbRKSaIT_ES8_ called 15 returned 100% blocks executed 100%
function _ZSteqIcEbRKSaIT_ES3_ called 0 returned 0% blocks executed 0%
       21:  152:    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
        -:  153:    _GLIBCXX_USE_NOEXCEPT
       21:  154:    { return true; }
        -:  155:
        -:  156:  template<typename _T1, typename _T2>
        -:  157:    inline bool
        -:  158:    operator!=(const allocator<_T1>&, const allocator<_T2>&)
        -:  159:    _GLIBCXX_USE_NOEXCEPT
        -:  160:    { return false; }
        -:  161:
        -:  162:  template<typename _Tp>
        -:  163:    inline bool
function _ZStneISt13_Rb_tree_nodeISt4pairIKiN9ValueFlow5ValueEEEEbRKSaIT_ESA_ called 0 returned 0% blocks executed 0%
function _ZStneINSt9__cxx199810_List_nodeIN9ValueFlow5ValueEEEEbRKSaIT_ES8_ called 0 returned 0% blocks executed 0%
function _ZStneINSt9__cxx199810_List_nodeISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbRKSaIT_ESH_ called 0 returned 0% blocks executed 0%
function _ZStneIcEbRKSaIT_ES3_ called 0 returned 0% blocks executed 0%
    #####:  164:    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
        -:  165:    _GLIBCXX_USE_NOEXCEPT
    #####:  166:    { return false; }
        -:  167:
        -:  168:  /// @} group allocator
        -:  169:
        -:  170:  // Inhibit implicit instantiations for required instantiations,
        -:  171:  // which are defined via explicit instantiations elsewhere.
        -:  172:#if _GLIBCXX_EXTERN_TEMPLATE
        -:  173:  extern template class allocator<char>;
        -:  174:  extern template class allocator<wchar_t>;
        -:  175:#endif
        -:  176:
        -:  177:  // Undefine.
        -:  178:#undef __allocator_base
        -:  179:
        -:  180:  // To implement Option 3 of DR 431.
        -:  181:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  182:    struct __alloc_swap
        -:  183:    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
        -:  184:
        -:  185:  template<typename _Alloc>
        -:  186:    struct __alloc_swap<_Alloc, false>
        -:  187:    {
        -:  188:      static void
        -:  189:      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
        -:  190:      {
        -:  191:	// Precondition: swappable allocators.
        -:  192:	if (__one != __two)
        -:  193:	  swap(__one, __two);
        -:  194:      }
        -:  195:    };
        -:  196:
        -:  197:  // Optimize for stateless allocators.
        -:  198:  template<typename _Alloc, bool = __is_empty(_Alloc)>
        -:  199:    struct __alloc_neq
        -:  200:    {
        -:  201:      static bool
function _ZNSt11__alloc_neqISaINSt9__cxx199810_List_nodeIN9ValueFlow5ValueEEEELb1EE8_S_do_itERKS5_S8_ called 979 returned 100% blocks executed 100%
function _ZNSt11__alloc_neqISaINSt9__cxx199810_List_nodeISt4pairIPK5TokenNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEELb1EE8_S_do_itERKSE_SH_ called 0 returned 0% blocks executed 0%
      979:  202:      _S_do_it(const _Alloc&, const _Alloc&)
      979:  203:      { return false; }
        -:  204:    };
        -:  205:
        -:  206:  template<typename _Alloc>
        -:  207:    struct __alloc_neq<_Alloc, false>
        -:  208:    {
        -:  209:      static bool
        -:  210:      _S_do_it(const _Alloc& __one, const _Alloc& __two)
        -:  211:      { return __one != __two; }
        -:  212:    };
        -:  213:
        -:  214:#if __cplusplus >= 201103L
        -:  215:  template<typename _Tp, bool
        -:  216:    = __or_<is_copy_constructible<typename _Tp::value_type>,
        -:  217:            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
        -:  218:    struct __shrink_to_fit_aux
        -:  219:    { static bool _S_do_it(_Tp&) noexcept { return false; } };
        -:  220:
        -:  221:  template<typename _Tp>
        -:  222:    struct __shrink_to_fit_aux<_Tp, true>
        -:  223:    {
        -:  224:      static bool
        -:  225:      _S_do_it(_Tp& __c) noexcept
        -:  226:      {
        -:  227:#if __cpp_exceptions
        -:  228:	try
        -:  229:	  {
        -:  230:	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
        -:  231:		__make_move_if_noexcept_iterator(__c.end()),
        -:  232:		__c.get_allocator()).swap(__c);
        -:  233:	    return true;
        -:  234:	  }
        -:  235:	catch(...)
        -:  236:	  { return false; }
        -:  237:#else
        -:  238:	return false;
        -:  239:#endif
        -:  240:      }
        -:  241:    };
        -:  242:#endif
        -:  243:
        -:  244:_GLIBCXX_END_NAMESPACE_VERSION
        -:  245:} // namespace std
        -:  246:
        -:  247:#endif
