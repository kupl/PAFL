        -:    0:Source:/home/workspace/lib/symboldatabase.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/symboldatabase.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/symboldatabase.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#include "symboldatabase.h"
        -:   21:
        -:   22:#include "astutils.h"
        -:   23:#include "errorlogger.h"
        -:   24:#include "platform.h"
        -:   25:#include "settings.h"
        -:   26:#include "token.h"
        -:   27:#include "tokenize.h"
        -:   28:#include "tokenlist.h"
        -:   29:#include "utils.h"
        -:   30:#include "valueflow.h"
        -:   31:
        -:   32:#include <algorithm>
        -:   33:#include <cassert>
        -:   34:#include <climits>
        -:   35:#include <iomanip>
        -:   36:#include <iostream>
        -:   37://---------------------------------------------------------------------------
        -:   38:
function _ZN14SymbolDatabaseC2EPK9TokenizerPK8SettingsP11ErrorLogger called 956 returned 100% blocks executed 70%
      956:   39:SymbolDatabase::SymbolDatabase(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
      956:   40:    : mTokenizer(tokenizer), mSettings(settings), mErrorLogger(errorLogger)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:   41:{
      956:   42:    mIsCpp = isCPP();
call    0 returned 100%
        -:   43:
      956:   44:    if (mSettings->defaultSign == 's' || mSettings->defaultSign == 'S')
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      953:   45:        mDefaultSignedness = ValueType::SIGNED;
        3:   46:    else if (mSettings->defaultSign == 'u' || mSettings->defaultSign == 'U')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   47:        mDefaultSignedness = ValueType::UNSIGNED;
        -:   48:    else
        3:   49:        mDefaultSignedness = ValueType::UNKNOWN_SIGN;
        -:   50:
      956:   51:    createSymbolDatabaseFindAllScopes();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   52:    createSymbolDatabaseClassInfo();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   53:    createSymbolDatabaseVariableInfo();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   54:    createSymbolDatabaseCopyAndMoveConstructors();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   55:    createSymbolDatabaseFunctionScopes();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   56:    createSymbolDatabaseClassAndStructScopes();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   57:    createSymbolDatabaseFunctionReturnTypes();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   58:    createSymbolDatabaseNeedInitialization();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   59:    createSymbolDatabaseVariableSymbolTable();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   60:    createSymbolDatabaseSetScopePointers();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   61:    createSymbolDatabaseSetVariablePointers();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   62:    setValueTypeInTokenList(false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   63:    createSymbolDatabaseSetFunctionPointers(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   64:    createSymbolDatabaseSetTypePointers();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   65:    createSymbolDatabaseEnums();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   66:    createSymbolDatabaseEscapeFunctions();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   67:    createSymbolDatabaseIncompleteVars();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      956:   68:}
        -:   69:
function _ZL20skipScopeIdentifiersPK5Token called 6235 returned 100% blocks executed 83%
     6235:   70:static const Token* skipScopeIdentifiers(const Token* tok)
        -:   71:{
     6235:   72:    if (tok && tok->str() == "::") {
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:   73:        tok = tok->next();
call    0 never executed
        -:   74:    }
    12644:   75:    while (Token::Match(tok, "%name% ::") ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
     6282:   76:           (Token::Match(tok, "%name% <") && Token::simpleMatch(tok->linkAt(1), "> ::"))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       58:   77:        if (tok->strAt(1) == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       58:   78:            tok = tok->tokAt(2);
call    0 returned 100%
        -:   79:        else
    #####:   80:            tok = tok->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
        -:   81:    }
        -:   82:
     6235:   83:    return tok;
        -:   84:}
        -:   85:
function _ZL17isExecutableScopePK5Token called 52 returned 100% blocks executed 88%
       52:   86:static bool isExecutableScope(const Token* tok)
        -:   87:{
       52:   88:    if (!Token::simpleMatch(tok, "{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   89:        return false;
       52:   90:    const Token * tok2 = tok->link()->previous();
call    0 returned 100%
call    1 returned 100%
       52:   91:    if (Token::simpleMatch(tok2, "; }"))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
       17:   92:        return true;
       35:   93:    if (Token::Match(tok2, "{|} }")) {
call    0 returned 100%
branch  1 taken 54% (fallthrough)
branch  2 taken 46%
       19:   94:        const Token* startTok = tok2->str() == "{" ? tok2 : tok2->link();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 68% (fallthrough)
branch  3 taken 32%
call    4 returned 100%
       19:   95:        if (Token::Match(startTok->previous(), "do|try|else {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   96:            return true;
       19:   97:        if (Token::simpleMatch(startTok->previous(), ") {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
        4:   98:            return !findLambdaStartToken(tok2);
call    0 returned 100%
       15:   99:        if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       15:  100:            return false;
        -:  101:        else
    #####:  102:            return isExecutableScope(startTok);
call    0 never executed
        -:  103:    }
       16:  104:    return false;
        -:  105:}
        -:  106:
function _ZN14SymbolDatabase33createSymbolDatabaseFindAllScopesEv called 956 returned 100% blocks executed 45%
      956:  107:void SymbolDatabase::createSymbolDatabaseFindAllScopes()
        -:  108:{
        -:  109:    // create global scope
      956:  110:    scopeList.emplace_back(this, nullptr, nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  111:
        -:  112:    // pointer to current scope
      956:  113:    Scope *scope = &scopeList.back();
call    0 returned 100%
        -:  114:
        -:  115:    // Store current access in each scope (depends on evaluation progress)
     1912:  116:    std::map<const Scope*, AccessControl> access;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  117:
        -:  118:    // find all scopes
    19098:  119:    for (const Token *tok = mTokenizer->tokens(); tok; tok = tok ? tok->next() : nullptr) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
        -:  120:        // #5593 suggested to add here:
    18142:  121:        if (mErrorLogger)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    36284:  122:            mErrorLogger->reportProgress(mTokenizer->list.getSourceFilePath(),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  123:                                         "SymbolDatabase",
    18142:  124:                                         tok->progressValue());
call    0 returned 100%
        -:  125:        // Locate next class
    54174:  126:        if ((mTokenizer->isCPP() && ((Token::Match(tok, "class|struct|union|namespace ::| %name% {|:|::|<") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
    17727:  127:                                      !Token::Match(tok->previous(), "new|friend|const|enum|typedef|mutable|volatile|using|)|(|<")) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
    35118:  128:                                     (Token::Match(tok, "enum class| %name% {") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
    17554:  129:                                      Token::Match(tok, "enum class| %name% : %name% {"))))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    36111:  130:            || (mTokenizer->isC() && Token::Match(tok, "struct|union|enum %name% {"))) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      175:  131:            const Token *tok2 = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  132:
      175:  133:            if (tok->strAt(1) == "::")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  134:                tok2 = tok2->next();
call    0 never executed
      175:  135:            else if (mTokenizer->isCPP() && tok->strAt(1) == "class")
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  136:                tok2 = tok2->next();
call    0 never executed
        -:  137:
      175:  138:            while (Token::Match(tok2, ":: %name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  139:                tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
      175:  140:            while (Token::Match(tok2, "%name% :: %name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  141:                tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  142:
        -:  143:            // skip over template args
      175:  144:            while (tok2 && tok2->str() == "<" && tok2->link()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  145:                tok2 = tok2->link()->next();
call    0 never executed
call    1 never executed
    #####:  146:                while (Token::Match(tok2, ":: %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  147:                    tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  148:            }
        -:  149:
        -:  150:            // skip over final
      175:  151:            if (mTokenizer->isCPP() && Token::simpleMatch(tok2, "final"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  152:                tok2 = tok2->next();
call    0 never executed
        -:  153:
        -:  154:            // make sure we have valid code
      175:  155:            if (!Token::Match(tok2, "{|:")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  156:                // check for qualified variable
    #####:  157:                if (tok2 && tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  158:                    if (tok2->next()->str() == ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  159:                        tok = tok2->next();
call    0 never executed
    #####:  160:                    else if (Token::simpleMatch(tok2->next(), "= {") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  161:                             Token::simpleMatch(tok2->linkAt(2), "} ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  162:                        tok = tok2->linkAt(2)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  163:                    else if (Token::Match(tok2->next(), "(|{") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  164:                             tok2->next()->link()->strAt(1) == ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:  165:                        tok = tok2->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -:  166:                    // skip variable declaration
    #####:  167:                    else if (Token::Match(tok2, "*|&|>"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  168:                        continue;
    #####:  169:                    else if (Token::Match(tok2, "%name% (") && mTokenizer->isFunctionHead(tok2->next(), "{;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####:  170:                        continue;
    #####:  171:                    else if (Token::Match(tok2, "%name% ["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  172:                        continue;
        -:  173:                    // skip template
    #####:  174:                    else if (Token::simpleMatch(tok2, ";") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  175:                             Token::Match(tok->previous(), "template|> class|struct")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  176:                        tok = tok2;
    #####:  177:                        continue;
        -:  178:                    }
        -:  179:                    // forward declaration
    #####:  180:                    else if (Token::simpleMatch(tok2, ";") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  181:                             Token::Match(tok, "class|struct|union")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  182:                        // TODO: see if it can be used
    #####:  183:                        tok = tok2;
    #####:  184:                        continue;
        -:  185:                    }
        -:  186:                    // skip constructor
    #####:  187:                    else if (Token::simpleMatch(tok2, "(") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  188:                             Token::simpleMatch(tok2->link(), ") ;")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  189:                        tok = tok2->link()->next();
call    0 never executed
call    1 never executed
    #####:  190:                        continue;
        -:  191:                    } else
    #####:  192:                        throw InternalError(tok2, "SymbolDatabase bailout; unhandled code", InternalError::SYNTAX);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  193:                    continue;
        -:  194:                }
    #####:  195:                break; // bail
        -:  196:            }
        -:  197:
      175:  198:            const Token * name = tok->next();
call    0 returned 100%
        -:  199:
      175:  200:            if (name->str() == "class" && name->strAt(-1) == "enum")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  201:                name = name->next();
call    0 never executed
        -:  202:
      175:  203:            Scope *new_scope = findScope(name, scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  204:
      175:  205:            if (new_scope) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  206:                // only create base list for classes and structures
    #####:  207:                if (new_scope->isClassOrStruct()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  208:                    // goto initial '{'
    #####:  209:                    if (!new_scope->definedType)
branch  0 never executed
branch  1 never executed
    #####:  210:                        mTokenizer->syntaxError(nullptr); // #6808
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  211:                    tok2 = new_scope->definedType->initBaseInfo(tok, tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  212:                    // make sure we have valid code
    #####:  213:                    if (!tok2) {
branch  0 never executed
branch  1 never executed
    #####:  214:                        break;
        -:  215:                    }
        -:  216:                }
        -:  217:
        -:  218:                // definition may be different than declaration
    #####:  219:                if (mTokenizer->isCPP() && tok->str() == "class") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  220:                    access[new_scope] = AccessControl::Private;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  221:                    new_scope->type = Scope::eClass;
    #####:  222:                } else if (tok->str() == "struct") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  223:                    access[new_scope] = AccessControl::Public;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  224:                    new_scope->type = Scope::eStruct;
        -:  225:                }
        -:  226:
    #####:  227:                new_scope->classDef = tok;
    #####:  228:                new_scope->bodyStart = tok2;
    #####:  229:                new_scope->bodyEnd = tok2->link();
call    0 never executed
        -:  230:                // make sure we have valid code
    #####:  231:                if (!new_scope->bodyEnd) {
branch  0 never executed
branch  1 never executed
    #####:  232:                    mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  233:                }
    #####:  234:                scope = new_scope;
    #####:  235:                tok = tok2;
        -:  236:            } else {
      175:  237:                scopeList.emplace_back(this, tok, scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      175:  238:                new_scope = &scopeList.back();
call    0 returned 100%
        -:  239:
      175:  240:                if (tok->str() == "class")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
       69:  241:                    access[new_scope] = AccessControl::Private;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      106:  242:                else if (tok->str() == "struct" || tok->str() == "union")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
branch  8 taken 89% (fallthrough)
branch  9 taken 11%
       94:  243:                    access[new_scope] = AccessControl::Public;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  244:
        -:  245:                // fill typeList...
      175:  246:                if (new_scope->isClassOrStructOrUnion() || new_scope->type == Scope::eEnum) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
branch  3 taken 83% (fallthrough)
branch  4 taken 17%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
      173:  247:                    Type* new_type = findType(name, scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      173:  248:                    if (!new_type) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      173:  249:                        typeList.emplace_back(new_scope->classDef, new_scope, scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      173:  250:                        new_type = &typeList.back();
call    0 returned 100%
      173:  251:                        scope->definedTypesMap[new_type->name()] = new_type;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  252:                    } else
    #####:  253:                        new_type->classScope = new_scope;
      173:  254:                    new_scope->definedType = new_type;
        -:  255:                }
        -:  256:
        -:  257:                // only create base list for classes and structures
      175:  258:                if (new_scope->isClassOrStruct()) {
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
        -:  259:                    // goto initial '{'
      162:  260:                    tok2 = new_scope->definedType->initBaseInfo(tok, tok2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  261:
        -:  262:                    // make sure we have valid code
      162:  263:                    if (!tok2) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  264:                        mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  265:                    }
       13:  266:                } else if (new_scope->type == Scope::eEnum) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
       10:  267:                    if (tok2->str() == ":")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  268:                        tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:                }
        -:  270:
      175:  271:                new_scope->bodyStart = tok2;
      175:  272:                new_scope->bodyEnd = tok2->link();
call    0 returned 100%
        -:  273:
        -:  274:                // make sure we have valid code
      175:  275:                if (!new_scope->bodyEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  276:                    mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  277:                }
        -:  278:
      175:  279:                if (new_scope->type == Scope::eEnum) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       10:  280:                    tok2 = new_scope->addEnum(tok, mTokenizer->isCPP());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       10:  281:                    scope->nestedList.push_back(new_scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  282:
       10:  283:                    if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  284:                        mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  285:                } else {
        -:  286:                    // make the new scope the current scope
      165:  287:                    scope->nestedList.push_back(new_scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      165:  288:                    scope = new_scope;
        -:  289:                }
        -:  290:
      175:  291:                tok = tok2;
        -:  292:            }
        -:  293:        }
        -:  294:
        -:  295:        // Namespace and unknown macro (#3854)
    53488:  296:        else if (mTokenizer->isCPP() &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    17554:  297:                 Token::Match(tok, "namespace %name% %type% (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
    17967:  298:                 tok->tokAt(2)->isUpperCaseName() &&
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  299:                 Token::simpleMatch(tok->linkAt(3), ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  300:            scopeList.emplace_back(this, tok, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:
    #####:  302:            Scope *new_scope = &scopeList.back();
call    0 never executed
    #####:  303:            access[new_scope] = AccessControl::Public;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  304:
    #####:  305:            const Token *tok2 = tok->linkAt(3)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  306:
    #####:  307:            new_scope->bodyStart = tok2;
    #####:  308:            new_scope->bodyEnd = tok2->link();
call    0 never executed
        -:  309:
        -:  310:            // make sure we have valid code
    #####:  311:            if (!new_scope->bodyEnd) {
branch  0 never executed
branch  1 never executed
    #####:  312:                scopeList.pop_back();
call    0 never executed
    #####:  313:                break;
        -:  314:            }
        -:  315:
        -:  316:            // make the new scope the current scope
    #####:  317:            scope->nestedList.push_back(new_scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:            scope = &scopeList.back();
call    0 never executed
        -:  319:
    #####:  320:            tok = tok2;
        -:  321:        }
        -:  322:
        -:  323:        // forward declaration
    17986:  324:        else if (Token::Match(tok, "class|struct|union %name% ;") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       19:  325:                 tok->strAt(-1) != "friend") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       19:  326:            if (!findType(tok->next(), scope)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  327:                // fill typeList..
       19:  328:                typeList.emplace_back(tok, nullptr, scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       19:  329:                Type* new_type = &typeList.back();
call    0 returned 100%
       19:  330:                scope->definedTypesMap[new_type->name()] = new_type;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  331:            }
       19:  332:            tok = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  333:        }
        -:  334:
        -:  335:        // using namespace
    17948:  336:        else if (mTokenizer->isCPP() && Token::Match(tok, "using namespace ::| %type% ;|::")) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -:  337:            Scope::UsingInfo using_info;
        -:  338:
    #####:  339:            using_info.start = tok; // save location
    #####:  340:            using_info.scope = findNamespace(tok->tokAt(2), scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  341:
    #####:  342:            scope->usingList.push_back(using_info);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  343:
        -:  344:            // check for global namespace
    #####:  345:            if (tok->strAt(2) == "::")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  346:                tok = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  347:            else
    #####:  348:                tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  349:
        -:  350:            // skip over qualification
    #####:  351:            while (Token::Match(tok, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  352:                tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  353:        }
        -:  354:
        -:  355:        // using type alias
    17948:  356:        else if (mTokenizer->isCPP() && Token::Match(tok, "using %name% =")) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  357:            if (tok->strAt(-1) != ">" && !findType(tok->next(), scope)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -:  358:                // fill typeList..
    #####:  359:                typeList.emplace_back(tok, nullptr, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  360:                Type* new_type = &typeList.back();
call    0 never executed
    #####:  361:                scope->definedTypesMap[new_type->name()] = new_type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  362:            }
        -:  363:
    #####:  364:            tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  365:
    #####:  366:            while (tok && tok->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  367:                tok = tok->next();
call    0 never executed
        -:  368:        }
        -:  369:
        -:  370:        // unnamed struct and union
    17948:  371:        else if (Token::Match(tok, "struct|union {") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  372:                 Token::Match(tok->next()->link(), "} *|&| %name% ;|[|=")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  373:            scopeList.emplace_back(this, tok, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  374:
    #####:  375:            Scope *new_scope = &scopeList.back();
call    0 never executed
    #####:  376:            access[new_scope] = AccessControl::Public;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  377:
    #####:  378:            const Token* varNameTok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  379:            if (varNameTok->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  380:                varNameTok = varNameTok->next();
call    0 never executed
    #####:  381:            } else if (varNameTok->str() == "&") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  382:                varNameTok = varNameTok->next();
call    0 never executed
        -:  383:            }
        -:  384:
    #####:  385:            typeList.emplace_back(tok, new_scope, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  386:            {
    #####:  387:                Type* new_type = &typeList.back();
call    0 never executed
    #####:  388:                new_scope->definedType = new_type;
    #####:  389:                scope->definedTypesMap[new_type->name()] = new_type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  390:            }
        -:  391:
    #####:  392:            scope->addVariable(varNameTok, tok, tok, access[scope], new_scope->definedType, scope, mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  393:
    #####:  394:            const Token *tok2 = tok->next();
call    0 never executed
        -:  395:
    #####:  396:            new_scope->bodyStart = tok2;
    #####:  397:            new_scope->bodyEnd = tok2->link();
call    0 never executed
        -:  398:
        -:  399:            // make sure we have valid code
    #####:  400:            if (!new_scope->bodyEnd) {
branch  0 never executed
branch  1 never executed
    #####:  401:                scopeList.pop_back();
call    0 never executed
    #####:  402:                break;
        -:  403:            }
        -:  404:
        -:  405:            // make the new scope the current scope
    #####:  406:            scope->nestedList.push_back(new_scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  407:            scope = new_scope;
        -:  408:
    #####:  409:            tok = tok2;
        -:  410:        }
        -:  411:
        -:  412:        // anonymous struct, union and namespace
    35896:  413:        else if ((Token::Match(tok, "struct|union {") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    35896:  414:                  Token::simpleMatch(tok->next()->link(), "} ;")) ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    17948:  415:                 Token::simpleMatch(tok, "namespace {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    #####:  416:            scopeList.emplace_back(this, tok, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  417:
    #####:  418:            Scope *new_scope = &scopeList.back();
call    0 never executed
    #####:  419:            access[new_scope] = AccessControl::Public;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  420:
    #####:  421:            const Token *tok2 = tok->next();
call    0 never executed
        -:  422:
    #####:  423:            new_scope->bodyStart = tok2;
    #####:  424:            new_scope->bodyEnd = tok2->link();
call    0 never executed
        -:  425:
    #####:  426:            typeList.emplace_back(tok, new_scope, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  427:            {
    #####:  428:                Type* new_type = &typeList.back();
call    0 never executed
    #####:  429:                new_scope->definedType = new_type;
    #####:  430:                scope->definedTypesMap[new_type->name()] = new_type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  431:            }
        -:  432:
        -:  433:            // make sure we have valid code
    #####:  434:            if (!new_scope->bodyEnd) {
branch  0 never executed
branch  1 never executed
    #####:  435:                scopeList.pop_back();
call    0 never executed
    #####:  436:                break;
        -:  437:            }
        -:  438:
        -:  439:            // make the new scope the current scope
    #####:  440:            scope->nestedList.push_back(new_scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  441:            scope = new_scope;
        -:  442:
    #####:  443:            tok = tok2;
        -:  444:        }
        -:  445:
        -:  446:        // forward declared enum
    17948:  447:        else if (Token::Match(tok, "enum class| %name% ;") || Token::Match(tok, "enum class| %name% : %name% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  448:            typeList.emplace_back(tok, nullptr, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  449:            Type* new_type = &typeList.back();
call    0 never executed
    #####:  450:            scope->definedTypesMap[new_type->name()] = new_type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  451:            tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  452:        }
        -:  453:
        -:  454:        // check for end of scope
    19689:  455:        else if (tok == scope->bodyEnd) {
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     1741:  456:            access.erase(scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1741:  457:            scope = const_cast<Scope*>(scope->nestedIn);
     1741:  458:            continue;
        -:  459:        }
        -:  460:
        -:  461:        // check if in class or structure or union
    16207:  462:        else if (scope->isClassOrStructOrUnion()) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
      737:  463:            const Token *funcStart = nullptr;
      737:  464:            const Token *argStart = nullptr;
      737:  465:            const Token *declEnd = nullptr;
        -:  466:
        -:  467:            // What section are we in..
      737:  468:            if (tok->str() == "private:")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2:  469:                access[scope] = AccessControl::Private;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      735:  470:            else if (tok->str() == "protected:")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1:  471:                access[scope] = AccessControl::Protected;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      734:  472:            else if (tok->str() == "public:" || tok->str() == "__published:")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
       18:  473:                access[scope] = AccessControl::Public;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      716:  474:            else if (Token::Match(tok, "public|protected|private %name% :")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  475:                if (tok->str() == "private")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  476:                    access[scope] = AccessControl::Private;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  477:                else if (tok->str() == "protected")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  478:                    access[scope] = AccessControl::Protected;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  479:                else
    #####:  480:                    access[scope] = AccessControl::Public;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  481:
    #####:  482:                tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  483:            }
        -:  484:
        -:  485:            // class function?
      716:  486:            else if (isFunction(tok, scope, &funcStart, &argStart, &declEnd)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 16% (fallthrough)
branch  4 taken 84%
      114:  487:                if (tok->previous()->str() != "::" || tok->strAt(-2) == scope->className) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
      228:  488:                    Function function(mTokenizer, tok, scope, funcStart, argStart);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        -:  489:
        -:  490:                    // save the access type
      114:  491:                    function.access = access[scope];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  492:
      114:  493:                    const Token *end = function.argDef->link();
call    0 returned 100%
        -:  494:
        -:  495:                    // count the number of constructors
      114:  496:                    if (function.isConstructor())
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
       36:  497:                        scope->numConstructors++;
        -:  498:
        -:  499:                    // assume implementation is inline (definition and implementation same)
      114:  500:                    function.token = function.tokenDef;
      114:  501:                    function.arg = function.argDef;
        -:  502:
        -:  503:                    // out of line function
      114:  504:                    if (const Token *endTok = mTokenizer->isFunctionHead(end, ";")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 56% (fallthrough)
branch 10 taken 44%
call   11 never executed
call   12 never executed
       64:  505:                        tok = endTok;
       64:  506:                        scope->addFunction(function);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  507:                    }
        -:  508:
        -:  509:                    // inline function
        -:  510:                    else {
        -:  511:                        // find start of function '{'
       50:  512:                        bool foundInitList = false;
      318:  513:                        while (end && end->str() != "{" && end->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 73% (fallthrough)
branch  5 taken 27%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 73% (fallthrough)
branch 11 taken 27%
      134:  514:                            if (end->link() && Token::Match(end, "(|<")) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 17% (fallthrough)
branch  7 taken 83%
branch  8 taken 11% (fallthrough)
branch  9 taken 89%
       15:  515:                                end = end->link();
call    0 returned 100%
      167:  516:                            } else if (foundInitList &&
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      125:  517:                                       Token::Match(end, "%name%|> {") &&
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        6:  518:                                       Token::Match(end->linkAt(1), "} ,|{")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        6:  519:                                end = end->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  520:                            } else {
      113:  521:                                if (end->str() == ":")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
       15:  522:                                    foundInitList = true;
      113:  523:                                end = end->next();
call    0 returned 100%
        -:  524:                            }
        -:  525:                        }
        -:  526:
       50:  527:                        if (!end || end->str() == ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  528:                            continue;
        -:  529:
       50:  530:                        scope->addFunction(function);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  531:
       50:  532:                        Function* funcptr = &scope->functionList.back();
call    0 returned 100%
       50:  533:                        const Token *tok2 = funcStart;
        -:  534:
       50:  535:                        addNewFunction(&scope, &tok2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       50:  536:                        if (scope) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       50:  537:                            scope->functionOf = function.nestedIn;
       50:  538:                            scope->function = funcptr;
       50:  539:                            scope->function->functionScope = scope;
        -:  540:                        }
        -:  541:
       50:  542:                        tok = tok2;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -:  543:                    }
        -:  544:                }
        -:  545:
        -:  546:                // nested class or friend function?
        -:  547:                else {
        -:  548:                    /** @todo check entire qualification for match */
    #####:  549:                    const Scope * const nested = scope->findInNestedListRecursive(tok->strAt(-2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  550:
    #####:  551:                    if (nested)
branch  0 never executed
branch  1 never executed
    #####:  552:                        addClassFunction(&scope, &tok, argStart);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  553:                    else {
        -:  554:                        /** @todo handle friend functions */
        -:  555:                    }
        -:  556:                }
        -:  557:            }
        -:  558:
        -:  559:            // friend class declaration?
      602:  560:            else if (mTokenizer->isCPP() && Token::Match(tok, "friend class| ::| %any% ;|::")) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  561:                Type::FriendInfo friendInfo;
call    0 never executed
        -:  562:
        -:  563:                // save the name start
    #####:  564:                friendInfo.nameStart = tok->strAt(1) == "class" ? tok->tokAt(2) : tok->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  565:                friendInfo.nameEnd = friendInfo.nameStart;
        -:  566:
        -:  567:                // skip leading "::"
    #####:  568:                if (friendInfo.nameEnd->str() == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  569:                    friendInfo.nameEnd = friendInfo.nameEnd->next();
call    0 never executed
        -:  570:
        -:  571:                // skip qualification "name ::"
    #####:  572:                while (friendInfo.nameEnd && friendInfo.nameEnd->strAt(1) == "::")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  573:                    friendInfo.nameEnd = friendInfo.nameEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  574:
        -:  575:                // fill this in after parsing is complete
    #####:  576:                friendInfo.type = nullptr;
        -:  577:
    #####:  578:                if (!scope->definedType)
branch  0 never executed
branch  1 never executed
    #####:  579:                    mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  580:
    #####:  581:                scope->definedType->friendList.push_back(friendInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  582:            }
    15470:  583:        } else if (scope->type == Scope::eNamespace || scope->type == Scope::eGlobal) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
     2810:  584:            const Token *funcStart = nullptr;
     2810:  585:            const Token *argStart = nullptr;
     2810:  586:            const Token *declEnd = nullptr;
        -:  587:
        -:  588:            // function?
     2810:  589:            if (isFunction(tok, scope, &funcStart, &argStart, &declEnd)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 42% (fallthrough)
branch  4 taken 58%
        -:  590:                // has body?
     1174:  591:                if (declEnd && declEnd->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 82% (fallthrough)
branch  5 taken 18%
branch  6 taken 82% (fallthrough)
branch  7 taken 18%
      957:  592:                    tok = funcStart;
        -:  593:
        -:  594:                    // class function
      957:  595:                    if (tok->previous() && tok->previous()->str() == "::")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
       20:  596:                        addClassFunction(&scope, &tok, argStart);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  597:
        -:  598:                    // class destructor
     2811:  599:                    else if (tok->previous() &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      937:  600:                             tok->previous()->str() == "~" &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 never executed
branch  6 never executed
    #####:  601:                             tok->strAt(-2) == "::")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  602:                        addClassFunction(&scope, &tok, argStart);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  603:
        -:  604:                    // regular function
        -:  605:                    else {
      937:  606:                        const Function* const function = addGlobalFunction(scope, tok, argStart, funcStart);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  607:
      937:  608:                        if (!function)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  609:                            mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  610:                    }
        -:  611:
        -:  612:                    // syntax error?
      957:  613:                    if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  614:                        mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  615:                }
        -:  616:                // function prototype?
      217:  617:                else if (declEnd && declEnd->str() == ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      217:  618:                    if (tok->previous() && tok->previous()->str() == "::" &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  619:                        Token::Match(declEnd->previous(), "default|delete")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  620:                        addClassFunction(&scope, &tok, argStart);
call    0 never executed
branch  1 never executed
branch  2 never executed
      217:  621:                        continue;
        -:  622:                    }
        -:  623:
      217:  624:                    bool newFunc = true; // Is this function already in the database?
      217:  625:                    for (std::multimap<std::string, const Function *>::const_iterator i = scope->functionMap.find(tok->str()); i != scope->functionMap.end() && i->first == tok->str(); ++i) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 45% (fallthrough)
branch  9 taken 55%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
call   17 returned 100%
branch 18 taken 45% (fallthrough)
branch 19 taken 55%
call   20 never executed
call   21 returned 100%
call   22 never executed
       97:  626:                        if (Function::argsMatch(scope, i->second->argDef, argStart, emptyString, 0)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       97:  627:                            newFunc = false;
       97:  628:                            break;
        -:  629:                        }
        -:  630:                    }
        -:  631:
        -:  632:                    // save function prototype in database
      217:  633:                    if (newFunc) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
      120:  634:                        addGlobalFunctionDecl(scope, tok, argStart, funcStart);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  635:                    }
        -:  636:
      217:  637:                    tok = declEnd;
      217:  638:                    continue;
        -:  639:                }
     2593:  640:            }
    12660:  641:        } else if (scope->isExecutable()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    12660:  642:            if (Token::Match(tok, "else|try|do {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       53:  643:                const Token* tok1 = tok->next();
call    0 returned 100%
       53:  644:                if (tok->str() == "else")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
       28:  645:                    scopeList.emplace_back(this, tok, scope, Scope::eElse, tok1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       25:  646:                else if (tok->str() == "do")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 72% (fallthrough)
branch  3 taken 28%
       18:  647:                    scopeList.emplace_back(this, tok, scope, Scope::eDo, tok1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  648:                else //if (tok->str() == "try")
        7:  649:                    scopeList.emplace_back(this, tok, scope, Scope::eTry, tok1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  650:
       53:  651:                tok = tok1;
       53:  652:                scope->nestedList.push_back(&scopeList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       53:  653:                scope = &scopeList.back();
call    0 returned 100%
    12607:  654:            } else if (Token::Match(tok, "if|for|while|catch|switch (") && Token::simpleMatch(tok->next()->link(), ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 96% (fallthrough)
branch 11 taken 4%
branch 12 taken 4% (fallthrough)
branch 13 taken 96%
      489:  655:                const Token *scopeStartTok = tok->next()->link()->next();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      489:  656:                if (tok->str() == "if")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
      342:  657:                    scopeList.emplace_back(this, tok, scope, Scope::eIf, scopeStartTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      147:  658:                else if (tok->str() == "for") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 24% (fallthrough)
branch  3 taken 76%
       35:  659:                    scopeList.emplace_back(this, tok, scope, Scope::eFor, scopeStartTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      112:  660:                } else if (tok->str() == "while")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
       35:  661:                    scopeList.emplace_back(this, tok, scope, Scope::eWhile, scopeStartTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       77:  662:                else if (tok->str() == "catch") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
        7:  663:                    scopeList.emplace_back(this, tok, scope, Scope::eCatch, scopeStartTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  664:                } else // if (tok->str() == "switch")
       70:  665:                    scopeList.emplace_back(this, tok, scope, Scope::eSwitch, scopeStartTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  666:
      489:  667:                scope->nestedList.push_back(&scopeList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      489:  668:                scope = &scopeList.back();
call    0 returned 100%
      489:  669:                if (scope->type == Scope::eFor)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       35:  670:                    scope->checkVariable(tok->tokAt(2), AccessControl::Local, mSettings); // check for variable declaration and add it to new scope if found
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
      454:  671:                else if (scope->type == Scope::eCatch)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        7:  672:                    scope->checkVariable(tok->tokAt(2), AccessControl::Throw, mSettings); // check for variable declaration and add it to new scope if found
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
      489:  673:                tok = scopeStartTok;
    12118:  674:            } else if (Token::Match(tok, "%var% {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  675:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    12118:  676:            } else if (const Token *lambdaEndToken = findLambdaEndToken(tok)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        6:  677:                const Token *lambdaStartToken = lambdaEndToken->link();
call    0 returned 100%
        6:  678:                const Token * argStart = lambdaStartToken->astParent();
call    0 returned 100%
        6:  679:                const Token * funcStart = Token::simpleMatch(argStart, "[") ? argStart : argStart->astParent();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 returned 100%
        6:  680:                const Function * function = addGlobalFunction(scope, tok, argStart, funcStart);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  681:                if (!function)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  682:                    mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        6:  683:                tok = lambdaStartToken;
    12112:  684:            } else if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       52:  685:                if (isExecutableScope(tok)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
       21:  686:                    scopeList.emplace_back(this, tok, scope, Scope::eUnconditional, tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       21:  687:                    scope->nestedList.push_back(&scopeList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       21:  688:                    scope = &scopeList.back();
call    0 returned 100%
        -:  689:                } else {
       31:  690:                    tok = tok->link();
call    0 returned 100%
        -:  691:                }
        -:  692:            }
        -:  693:            // syntax error?
    12660:  694:            if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  695:                mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  696:        }
        -:  697:    }
      956:  698:}
        -:  699:
function _ZN14SymbolDatabase29createSymbolDatabaseClassInfoEv called 956 returned 100% blocks executed 62%
      956:  700:void SymbolDatabase::createSymbolDatabaseClassInfo()
        -:  701:{
      956:  702:    if (mTokenizer->isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22:  703:        return;
        -:  704:
        -:  705:    // fill in using info
     3587:  706:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
     2653:  707:        for (std::list<Scope::UsingInfo>::iterator i = it->usingList.begin(); i != it->usingList.end(); ++i) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 returned 100%
call   10 never executed
        -:  708:            // only find if not already found
    #####:  709:            if (i->scope == nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  710:                // check scope for match
    #####:  711:                const Scope * const scope = findScope(i->start->tokAt(2), &(*it));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  712:                if (scope) {
branch  0 never executed
branch  1 never executed
        -:  713:                    // set found scope
    #####:  714:                    i->scope = scope;
call    0 never executed
    #####:  715:                    break;
        -:  716:                }
        -:  717:            }
        -:  718:        }
        -:  719:    }
        -:  720:
        -:  721:    // fill in base class info
     1124:  722:    for (std::list<Type>::iterator it = typeList.begin(); it != typeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        -:  723:        // finish filling in base class info
      199:  724:        for (Type::BaseInfo & i : it->derivedFrom) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
        9:  725:            const Type* found = findType(i.nameTok, it->enclosingScope);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        9:  726:            if (found && found->findDependency(&(*it))) {
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        -:  727:                // circular dependency
        -:  728:                //mTokenizer->syntaxError(nullptr);
        -:  729:            } else {
        9:  730:                i.type = found;
        -:  731:            }
        -:  732:        }
        -:  733:    }
        -:  734:
        -:  735:    // fill in friend info
     1124:  736:    for (std::list<Type>::iterator it = typeList.begin(); it != typeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      190:  737:        for (Type::FriendInfo &friendInfo : it->friendList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
    #####:  738:            friendInfo.type = findType(friendInfo.nameStart, it->enclosingScope);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  739:        }
        -:  740:    }
        -:  741:}
        -:  742:
        -:  743:
function _ZN14SymbolDatabase32createSymbolDatabaseVariableInfoEv called 956 returned 100% blocks executed 81%
      956:  744:void SymbolDatabase::createSymbolDatabaseVariableInfo()
        -:  745:{
        -:  746:    // fill in variable info
     3663:  747:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        -:  748:        // find variables
     2707:  749:        it->getVariableList(mSettings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  750:    }
        -:  751:
        -:  752:    // fill in function arguments
     3663:  753:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     5414:  754:        std::list<Function>::iterator func;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  755:
     3872:  756:        for (func = it->functionList.begin(); func != it->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
call   10 returned 100%
        -:  757:            // add arguments
     1165:  758:            func->addArguments(this, &*it);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  759:        }
        -:  760:    }
      956:  761:}
        -:  762:
function _ZN14SymbolDatabase43createSymbolDatabaseCopyAndMoveConstructorsEv called 956 returned 100% blocks executed 75%
      956:  763:void SymbolDatabase::createSymbolDatabaseCopyAndMoveConstructors()
        -:  764:{
        -:  765:    // fill in class and struct copy/move constructors
     3663:  766:    for (std::list<Scope>::iterator scope = scopeList.begin(); scope != scopeList.end(); ++scope) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
     2707:  767:        if (!scope->isClassOrStruct())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
     2545:  768:            continue;
        -:  769:
      324:  770:        std::list<Function>::iterator func;
call    0 returned 100%
call    1 returned 100%
      276:  771:        for (func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 41% (fallthrough)
branch  9 taken 59%
call   10 returned 100%
      114:  772:            if (!func->isConstructor() || func->minArgCount() != 1)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 56% (fallthrough)
branch  7 taken 44%
branch  8 taken 86% (fallthrough)
branch  9 taken 14%
       98:  773:                continue;
        -:  774:
       16:  775:            const Variable* firstArg = func->getArgumentVar(0);
call    0 returned 100%
call    1 returned 100%
       16:  776:            if (firstArg->type() == scope->definedType) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  777:                if (firstArg->isRValueReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  778:                    func->type = Function::eMoveConstructor;
call    0 never executed
    #####:  779:                else if (firstArg->isReference() && !firstArg->isPointer())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  780:                    func->type = Function::eCopyConstructor;
call    0 never executed
        -:  781:            }
        -:  782:
       32:  783:            if (func->type == Function::eCopyConstructor ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       16:  784:                func->type == Function::eMoveConstructor)
call    0 returned 100%
    #####:  785:                scope->numCopyOrMoveConstructors++;
call    0 never executed
        -:  786:        }
        -:  787:    }
      956:  788:}
        -:  789:
function _ZN14SymbolDatabase34createSymbolDatabaseFunctionScopesEv called 956 returned 100% blocks executed 82%
      956:  790:void SymbolDatabase::createSymbolDatabaseFunctionScopes()
        -:  791:{
        -:  792:    // fill in function scopes
     3663:  793:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     2707:  794:        if (it->type == Scope::eFunction)
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
     1007:  795:            functionScopes.push_back(&*it);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  796:    }
      956:  797:}
        -:  798:
function _ZN14SymbolDatabase40createSymbolDatabaseClassAndStructScopesEv called 956 returned 100% blocks executed 83%
      956:  799:void SymbolDatabase::createSymbolDatabaseClassAndStructScopes()
        -:  800:{
        -:  801:    // fill in class and struct scopes
     3663:  802:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     2707:  803:        if (it->isClassOrStruct())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      162:  804:            classAndStructScopes.push_back(&*it);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  805:    }
      956:  806:}
        -:  807:
function _ZN14SymbolDatabase39createSymbolDatabaseFunctionReturnTypesEv called 956 returned 100% blocks executed 89%
      956:  808:void SymbolDatabase::createSymbolDatabaseFunctionReturnTypes()
        -:  809:{
        -:  810:    // fill in function return types
     3663:  811:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     5414:  812:        std::list<Function>::iterator func;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  813:
     3872:  814:        for (func = it->functionList.begin(); func != it->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
call   10 returned 100%
        -:  815:            // add return types
     1165:  816:            if (func->retDef) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
     1121:  817:                const Token *type = func->retDef;
call    0 returned 100%
     1143:  818:                while (Token::Match(type, "static|const|struct|union|enum"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       11:  819:                    type = type->next();
call    0 returned 100%
     1121:  820:                if (type) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1121:  821:                    func->retType = findVariableTypeInBase(&*it, type);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
     1121:  822:                    if (!func->retType)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1121:  823:                        func->retType = findTypeInNested(type, func->nestedIn);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  824:                }
        -:  825:            }
        -:  826:        }
        -:  827:    }
      956:  828:}
        -:  829:
function _ZN14SymbolDatabase38createSymbolDatabaseNeedInitializationEv called 956 returned 100% blocks executed 78%
      956:  830:void SymbolDatabase::createSymbolDatabaseNeedInitialization()
        -:  831:{
      956:  832:    if (mTokenizer->isC()) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -:  833:        // For C code it is easy, as there are no constructors and no default values
       76:  834:        for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 71% (fallthrough)
branch  5 taken 29%
call    6 returned 100%
call    7 returned 100%
       54:  835:            Scope *scope = &(*it);
call    0 returned 100%
       54:  836:            if (scope->definedType)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2:  837:                scope->definedType->needInitialization = Type::NeedInitialization::True;
        -:  838:        }
        -:  839:    } else {
        -:  840:        // For C++, it is more difficult: Determine if user defined type needs initialization...
      934:  841:        unsigned int unknowns = 0; // stop checking when there are no unknowns
      934:  842:        unsigned int retry = 0;    // bail if we don't resolve all the variable types for some reason
        -:  843:
        2:  844:        do {
      936:  845:            unknowns = 0;
        -:  846:
     3599:  847:            for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
     2663:  848:                Scope *scope = &(*it);
call    0 returned 100%
        -:  849:
     2663:  850:                if (!scope->definedType) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     2482:  851:                    mBlankTypes.emplace_back();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2482:  852:                    scope->definedType = &mBlankTypes.back();
call    0 returned 100%
        -:  853:                }
        -:  854:
     2663:  855:                if (scope->isClassOrStruct() && scope->definedType->needInitialization == Type::NeedInitialization::Unknown) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 6% (fallthrough)
branch  6 taken 94%
        -:  856:                    // check for default constructor
      164:  857:                    bool hasDefaultConstructor = false;
        -:  858:
      328:  859:                    std::list<Function>::const_iterator func;
call    0 returned 100%
call    1 returned 100%
        -:  860:
      257:  861:                    for (func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 42% (fallthrough)
branch  9 taken 58%
call   10 returned 100%
      107:  862:                        if (func->type == Function::eConstructor) {
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
        -:  863:                            // check for no arguments: func ( )
       33:  864:                            if (func->argCount() == 0) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
       12:  865:                                hasDefaultConstructor = true;
       12:  866:                                break;
        -:  867:                            }
        -:  868:
        -:  869:                            /** check for arguments with default values */
       21:  870:                            else if (func->argCount() == func->initializedArgCount()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 10% (fallthrough)
branch  5 taken 90%
        2:  871:                                hasDefaultConstructor = true;
        2:  872:                                break;
        -:  873:                            }
        -:  874:                        }
        -:  875:                    }
        -:  876:
        -:  877:                    // User defined types with user defined default constructor doesn't need initialization.
        -:  878:                    // We assume the default constructor initializes everything.
        -:  879:                    // Another check will figure out if the constructor actually initializes everything.
      164:  880:                    if (hasDefaultConstructor)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       14:  881:                        scope->definedType->needInitialization = Type::NeedInitialization::False;
        -:  882:
        -:  883:                    // check each member variable to see if it needs initialization
        -:  884:                    else {
      150:  885:                        bool needInitialization = false;
      150:  886:                        bool unknown = false;
        -:  887:
      300:  888:                        std::list<Variable>::const_iterator var;
call    0 returned 100%
call    1 returned 100%
      246:  889:                        for (var = scope->varlist.begin(); var != scope->varlist.end() && !needInitialization; ++var) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 46% (fallthrough)
branch  8 taken 54%
branch  9 taken 85% (fallthrough)
branch 10 taken 15%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 39% (fallthrough)
branch 15 taken 61%
call   16 returned 100%
       96:  890:                            if (var->isClass()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
       35:  891:                                if (var->type()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
        -:  892:                                    // does this type need initialization?
       19:  893:                                    if (var->type()->needInitialization == Type::NeedInitialization::True)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
        4:  894:                                        needInitialization = true;
       15:  895:                                    else if (var->type()->needInitialization == Type::NeedInitialization::Unknown) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
        4:  896:                                        if (!(var->valueType() && var->valueType()->type == ValueType::CONTAINER))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        4:  897:                                            unknown = true;
        -:  898:                                    }
        -:  899:                                }
       61:  900:                            } else if (!var->hasDefault())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
       59:  901:                                needInitialization = true;
        -:  902:                        }
        -:  903:
      150:  904:                        if (needInitialization)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
       63:  905:                            scope->definedType->needInitialization = Type::NeedInitialization::True;
       87:  906:                        else if (!unknown)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
       83:  907:                            scope->definedType->needInitialization = Type::NeedInitialization::False;
        -:  908:                        else {
        4:  909:                            if (scope->definedType->needInitialization == Type::NeedInitialization::Unknown)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  910:                                unknowns++;
        -:  911:                        }
        -:  912:                    }
     2499:  913:                } else if (scope->type == Scope::eUnion && scope->definedType->needInitialization == Type::NeedInitialization::Unknown)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1:  914:                    scope->definedType->needInitialization = Type::NeedInitialization::True;
        -:  915:            }
        -:  916:
      936:  917:            retry++;
      936:  918:        } while (unknowns && retry < 100);
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  919:
        -:  920:        // this shouldn't happen so output a debug warning
      934:  921:        if (retry == 100 && mSettings->debugwarnings) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  922:            for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  923:                const Scope *scope = &(*it);
call    0 never executed
        -:  924:
    #####:  925:                if (scope->isClassOrStruct() && scope->definedType->needInitialization == Type::NeedInitialization::Unknown)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  926:                    debugMessage(scope->classDef, "SymbolDatabase::SymbolDatabase couldn't resolve all user defined types.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  927:            }
        -:  928:        }
        -:  929:    }
      956:  930:}
        -:  931:
function _ZN14SymbolDatabase39createSymbolDatabaseVariableSymbolTableEv called 956 returned 100% blocks executed 89%
      956:  932:void SymbolDatabase::createSymbolDatabaseVariableSymbolTable()
        -:  933:{
        -:  934:    // create variable symbol table
      956:  935:    mVariableList.resize(mTokenizer->varIdCount() + 1);
call    0 returned 100%
call    1 returned 100%
      956:  936:    std::fill_n(mVariableList.begin(), mVariableList.size(), (const Variable*)nullptr);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
        -:  937:
        -:  938:    // check all scopes for variables
     3663:  939:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     2707:  940:        Scope *scope = &(*it);
call    0 returned 100%
        -:  941:
        -:  942:        // add all variables
     3505:  943:        for (std::list<Variable>::iterator var = scope->varlist.begin(); var != scope->varlist.end(); ++var) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 23% (fallthrough)
branch  5 taken 77%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      798:  944:            const unsigned int varId = var->declarationId();
call    0 returned 100%
call    1 returned 100%
      798:  945:            if (varId)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      798:  946:                mVariableList[varId] = &(*var);
call    0 returned 100%
call    1 returned 100%
        -:  947:            // fix up variables without type
      798:  948:            if (!var->type() && !var->typeStartToken()->isStandardType()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
branch 11 taken 14% (fallthrough)
branch 12 taken 86%
      108:  949:                const Type *type = findType(var->typeStartToken(), scope);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      108:  950:                if (type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  951:                    var->type(type);
call    0 never executed
call    1 never executed
        -:  952:            }
        -:  953:        }
        -:  954:
        -:  955:        // add all function parameters
     3872:  956:        for (std::list<Function>::iterator func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 30% (fallthrough)
branch  5 taken 70%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     1906:  957:            for (std::list<Variable>::iterator arg = func->argumentList.begin(); arg != func->argumentList.end(); ++arg) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 39% (fallthrough)
branch  7 taken 61%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
        -:  958:                // check for named parameters
      741:  959:                if (arg->nameToken() && arg->declarationId()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 94% (fallthrough)
branch  9 taken 6%
      698:  960:                    const unsigned int declarationId = arg->declarationId();
call    0 returned 100%
call    1 returned 100%
      698:  961:                    if (declarationId > 0U)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      698:  962:                        mVariableList[declarationId] = &(*arg);
call    0 returned 100%
call    1 returned 100%
        -:  963:                    // fix up parameters without type
      698:  964:                    if (!arg->type() && !arg->typeStartToken()->isStandardType()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 21% (fallthrough)
branch 10 taken 79%
branch 11 taken 18% (fallthrough)
branch 12 taken 82%
      128:  965:                        const Type *type = findTypeInNested(arg->typeStartToken(), scope);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      128:  966:                        if (type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  967:                            arg->type(type);
call    0 never executed
call    1 never executed
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:        }
        -:  972:    }
        -:  973:
        -:  974:    // fill in missing variables if possible
      956:  975:    const std::size_t functions = functionScopes.size();
call    0 returned 100%
     1963:  976:    for (std::size_t i = 0; i < functions; ++i) {
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
     1007:  977:        const Scope *func = functionScopes[i];
call    0 returned 100%
    18207:  978:        for (const Token *tok = func->bodyStart->next(); tok && tok != func->bodyEnd; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
call    5 returned 100%
        -:  979:            // check for member variable
    20287:  980:            if (tok->varId() && tok->next() &&
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
     5624:  981:                (tok->next()->str() == "." ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
     2813:  982:                 (tok->next()->str() == "[" && tok->linkAt(1)->strAt(1) == "."))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
      185:  983:                const Token *tok1 = tok->next()->str() == "." ? tok->tokAt(2) : tok->linkAt(1)->tokAt(2);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
      185:  984:                if (tok1 && tok1->varId() && mVariableList[tok1->varId()] == nullptr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 60% (fallthrough)
branch  4 taken 40%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 76% (fallthrough)
branch  8 taken 24%
branch  9 taken 45% (fallthrough)
branch 10 taken 55%
       84:  985:                    const Variable *var = mVariableList[tok->varId()];
call    0 returned 100%
call    1 returned 100%
       84:  986:                    if (var && var->typeScope()) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 70% (fallthrough)
branch  4 taken 30%
branch  5 taken 68% (fallthrough)
branch  6 taken 32%
        -:  987:                        // find the member variable of this variable
       57:  988:                        const Variable *var1 = var->typeScope()->getVariable(tok1->str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       57:  989:                        if (var1) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        -:  990:                            // add this variable to the look up table
       55:  991:                            mVariableList[tok1->varId()] = var1;
call    0 returned 100%
call    1 returned 100%
        -:  992:                        }
        -:  993:                    }
        -:  994:                }
        -:  995:            }
        -:  996:        }
        -:  997:    }
      956:  998:}
        -:  999:
function _ZN14SymbolDatabase36createSymbolDatabaseSetScopePointersEv called 956 returned 100% blocks executed 97%
      956: 1000:void SymbolDatabase::createSymbolDatabaseSetScopePointers()
        -: 1001:{
        -: 1002:    // Set scope pointers
     3663: 1003:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
     2707: 1004:        Token* start = const_cast<Token*>(it->bodyStart);
call    0 returned 100%
     2707: 1005:        Token* end = const_cast<Token*>(it->bodyEnd);
call    0 returned 100%
     2707: 1006:        if (it->type == Scope::eGlobal) {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
      956: 1007:            start = const_cast<Token*>(mTokenizer->list.front());
call    0 returned 100%
      956: 1008:            end = const_cast<Token*>(mTokenizer->list.back());
call    0 returned 100%
        -: 1009:        }
     2707: 1010:        assert(start);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     2707: 1011:        assert(end);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1012:
     2707: 1013:        end->scope(&*it);
call    0 returned 100%
call    1 returned 100%
        -: 1014:
    29877: 1015:        for (Token* tok = start; tok != end; tok = tok->next()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
    28515: 1016:            if (start != end && tok->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
branch  6 taken 12% (fallthrough)
branch  7 taken 88%
     3543: 1017:                bool isEndOfScope = false;
     8047: 1018:                for (std::list<Scope*>::const_iterator innerScope = it->nestedList.begin(); innerScope != it->nestedList.end(); ++innerScope) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 60% (fallthrough)
branch  9 taken 40%
call   10 returned 100%
call   11 returned 100%
     2708: 1019:                    if (tok == (*innerScope)->bodyStart) { // Is begin of inner scope
call    0 returned 100%
branch  1 taken 65% (fallthrough)
branch  2 taken 35%
     1747: 1020:                        tok = tok->link();
call    0 returned 100%
     1747: 1021:                        if (tok->next() == end || !tok->next()) {
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
call    3 returned 100%
branch  4 taken 70% (fallthrough)
branch  5 taken 30%
branch  6 taken 77% (fallthrough)
branch  7 taken 23%
     1345: 1022:                            isEndOfScope = true;
     1345: 1023:                            break;
        -: 1024:                        }
      402: 1025:                        tok = tok->next();
call    0 returned 100%
      402: 1026:                        break;
        -: 1027:                    }
        -: 1028:                }
     3543: 1029:                if (isEndOfScope)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
     1345: 1030:                    break;
        -: 1031:            }
    27170: 1032:            tok->scope(&*it);
call    0 returned 100%
call    1 returned 100%
        -: 1033:        }
        -: 1034:    }
      956: 1035:}
        -: 1036:
function _ZN14SymbolDatabase39createSymbolDatabaseSetFunctionPointersEb called 2868 returned 100% blocks executed 82%
     2868: 1037:void SymbolDatabase::createSymbolDatabaseSetFunctionPointers(bool firstPass)
        -: 1038:{
     2868: 1039:    if (firstPass) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1040:        // Set function definition and declaration pointers
     3663: 1041:        for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
     3872: 1042:            for (std::list<Function>::const_iterator func = it->functionList.begin(); func != it->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
     1165: 1043:                if (func->tokenDef)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1165: 1044:                    const_cast<Token *>(func->tokenDef)->function(&*func);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 1045:
     1165: 1046:                if (func->token)
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
     1057: 1047:                    const_cast<Token *>(func->token)->function(&*func);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 1048:            }
        -: 1049:        }
        -: 1050:    }
        -: 1051:
        -: 1052:    // Set function call pointers
    86796: 1053:    for (const Token* tok = mTokenizer->list.front(); tok != mTokenizer->list.back(); tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
    83928: 1054:        if (!tok->function() && tok->varId() == 0 && Token::Match(tok, "%name% (") && !isReservedName(tok->str())) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
call    6 returned 100%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 64% (fallthrough)
branch 12 taken 36%
branch 13 taken 4% (fallthrough)
branch 14 taken 96%
     2988: 1055:            const Function *function = findFunction(tok);
call    0 returned 100%
     2988: 1056:            if (function)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
     1436: 1057:                const_cast<Token *>(tok)->function(function);
call    0 returned 100%
        -: 1058:        }
        -: 1059:    }
        -: 1060:
        -: 1061:    // Set C++ 11 delegate constructor function call pointers
    10989: 1062:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
    11616: 1063:        for (std::list<Function>::const_iterator func = it->functionList.begin(); func != it->functionList.end(); ++func) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
        -: 1064:            // look for initializer list
     3495: 1065:            if (func->isConstructor() && func->functionScope && func->functionScope->functionOf && func->arg) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
call    4 returned 100%
branch  5 taken 83% (fallthrough)
branch  6 taken 17%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 3% (fallthrough)
branch 14 taken 97%
       90: 1066:                const Token * tok = func->arg->link()->next();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       90: 1067:                if (tok->str() == "noexcept") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1068:                    const Token * closingParenTok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1069:                    if (!closingParenTok || !closingParenTok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1070:                        continue;
        -: 1071:                    }
    #####: 1072:                    tok = closingParenTok->next();
call    0 never executed
        -: 1073:                }
       90: 1074:                if (tok->str() != ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
       45: 1075:                    continue;
        -: 1076:                }
       45: 1077:                tok = tok->next();
call    0 returned 100%
      207: 1078:                while (tok && tok != func->functionScope->bodyStart) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 64% (fallthrough)
branch  4 taken 36%
branch  5 taken 64% (fallthrough)
branch  6 taken 36%
       81: 1079:                    if (Token::Match(tok, "%name% {|(")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
       63: 1080:                        if (tok->str() == func->tokenDef->str()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1081:                            const Function *function = func->functionScope->functionOf->findFunction(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1082:                            if (function)
branch  0 never executed
branch  1 never executed
    #####: 1083:                                const_cast<Token *>(tok)->function(function);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1084:                            break;
        -: 1085:                        }
       63: 1086:                        tok = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1087:                    }
       81: 1088:                    tok = tok->next();
call    0 returned 100%
        -: 1089:                }
        -: 1090:            }
        -: 1091:        }
        -: 1092:    }
     2868: 1093:}
        -: 1094:
function _ZN14SymbolDatabase35createSymbolDatabaseSetTypePointersEv called 956 returned 100% blocks executed 82%
      956: 1095:void SymbolDatabase::createSymbolDatabaseSetTypePointers()
        -: 1096:{
     1912: 1097:    std::set<std::string> typenames;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1148: 1098:    for (const Type &t : typeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      192: 1099:        typenames.insert(t.name());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
        -: 1100:    }
        -: 1101:
        -: 1102:    // Set type pointers
    28932: 1103:    for (const Token* tok = mTokenizer->list.front(); tok != mTokenizer->list.back(); tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
    27976: 1104:        if (!tok->isName() || tok->varId() || tok->function() || tok->type() || tok->enumerator())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
call    5 returned 100%
branch  6 taken 66% (fallthrough)
branch  7 taken 34%
call    8 returned 100%
branch  9 taken 81% (fallthrough)
branch 10 taken 19%
call   11 returned 100%
branch 12 taken 97% (fallthrough)
branch 13 taken 3%
call   14 returned 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 taken 79% (fallthrough)
branch 18 taken 21%
    21999: 1105:            continue;
        -: 1106:
     5977: 1107:        if (typenames.find(tok->str()) == typenames.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 95% (fallthrough)
branch  9 taken 5%
call   10 never executed
     5700: 1108:            continue;
        -: 1109:
      277: 1110:        const Type *type = findVariableType(tok->scope(), tok);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      277: 1111:        if (type)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      256: 1112:            const_cast<Token *>(tok)->type(type);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1113:    }
      956: 1114:}
        -: 1115:
function _ZN14SymbolDatabase8fixVarIdERNSt7__debug3mapIjNS1_IjjSt4lessIjESaISt4pairIKjjEEEES3_SaIS4_IS5_S8_EEEEPK5TokenPSD_PK8Variable called 5 returned 100% blocks executed 49%
        5: 1116:void SymbolDatabase::fixVarId(VarIdMap & varIds, const Token * vartok, Token * membertok, const Variable * membervar)
        -: 1117:{
       10: 1118:    VarIdMap::iterator varId = varIds.find(vartok->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        5: 1119:    if (varId == varIds.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       10: 1120:        MemberIdMap memberId;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        5: 1121:        if (membertok->varId() == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5: 1122:            memberId[membervar->nameToken()->varId()] = const_cast<Tokenizer *>(mTokenizer)->newVarId();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5: 1123:            mVariableList.push_back(membervar);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1124:        } else
    #####: 1125:            mVariableList[membertok->varId()] = membervar;
call    0 never executed
call    1 never executed
        5: 1126:        varIds.insert(std::make_pair(vartok->varId(), memberId));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
        5: 1127:        varId = varIds.find(vartok->varId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
        -: 1128:    }
       10: 1129:    MemberIdMap::iterator memberId = varId->second.find(membervar->nameToken()->varId());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        5: 1130:    if (memberId == varId->second.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1131:        if (membertok->varId() == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1132:            varId->second.insert(std::make_pair(membervar->nameToken()->varId(), const_cast<Tokenizer *>(mTokenizer)->newVarId()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1133:            mVariableList.push_back(membervar);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1134:            memberId = varId->second.find(membervar->nameToken()->varId());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1135:        } else
    #####: 1136:            mVariableList[membertok->varId()] = membervar;
call    0 never executed
call    1 never executed
        -: 1137:    }
        5: 1138:    if (membertok->varId() == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5: 1139:        membertok->varId(memberId->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        5: 1140:}
        -: 1141:
function _ZN14SymbolDatabase39createSymbolDatabaseSetVariablePointersEv called 2868 returned 100% blocks executed 62%
     2868: 1142:void SymbolDatabase::createSymbolDatabaseSetVariablePointers()
        -: 1143:{
     5736: 1144:    VarIdMap varIds;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1145:
        -: 1146:    // Set variable pointers
    86796: 1147:    for (const Token* tok = mTokenizer->list.front(); tok != mTokenizer->list.back(); tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
    83928: 1148:        if (tok->varId())
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
    11470: 1149:            const_cast<Token *>(tok)->variable(getVariableFromVarId(tok->varId()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 1150:
        -: 1151:        // Set Token::variable pointer for array member variable
        -: 1152:        // Since it doesn't point at a fixed location it doesn't have varid
   179041: 1153:        if (tok->variable() != nullptr &&
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
    95431: 1154:            (tok->variable()->typeScope() || tok->variable()->isSmartPointer() || (tok->valueType() && tok->valueType()->type == ValueType::CONTAINER)) &&
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
call    8 returned 100%
branch  9 taken 61% (fallthrough)
branch 10 taken 39%
call   11 returned 100%
branch 12 taken 5% (fallthrough)
branch 13 taken 95%
branch 14 taken 32% (fallthrough)
branch 15 taken 68%
     1383: 1155:            Token::Match(tok, "%name% [|.")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1156:
      439: 1157:            Token *tok2 = tok->next();
call    0 returned 100%
        -: 1158:            // Locate "]"
      547: 1159:            while (tok2 && tok2->str() == "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
branch  6 taken 11% (fallthrough)
branch  7 taken 89%
       54: 1160:                tok2 = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 1161:
      439: 1162:            Token *membertok = nullptr;
      439: 1163:            if (Token::Match(tok2, ". %name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 90% (fallthrough)
branch  4 taken 10%
      395: 1164:                membertok = tok2->next();
call    0 returned 100%
       44: 1165:            else if (Token::Match(tok2, ") . %name%") && tok->strAt(-1) == "(")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1166:                membertok = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1167:
      439: 1168:            if (membertok) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
      395: 1169:                const Variable *var = tok->variable();
call    0 returned 100%
      395: 1170:                if (var && var->typeScope()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 96% (fallthrough)
branch  4 taken 4%
branch  5 taken 96% (fallthrough)
branch  6 taken 4%
      381: 1171:                    const Variable *membervar = var->typeScope()->getVariable(membertok->str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      381: 1172:                    if (membervar) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
      258: 1173:                        membertok->variable(membervar);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      258: 1174:                        if (membertok->varId() == 0 || mVariableList[membertok->varId()] == nullptr)
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
        4: 1175:                            fixVarId(varIds, tok, const_cast<Token *>(membertok), membervar);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1176:                    }
       14: 1177:                } else if (const ::Type *type = var ? var->smartPointerType() : nullptr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1178:                    const Variable *membervar = type->classScope->getVariable(membertok->str());
call    0 never executed
call    1 never executed
    #####: 1179:                    if (membervar) {
branch  0 never executed
branch  1 never executed
    #####: 1180:                        membertok->variable(membervar);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1181:                        if (membertok->varId() == 0 || mVariableList[membertok->varId()] == nullptr)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1182:                            fixVarId(varIds, tok, const_cast<Token *>(membertok), membervar);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:                    }
       14: 1184:                } else if (var && tok->valueType() && tok->valueType()->type == ValueType::CONTAINER) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
       14: 1185:                    if (Token::Match(var->typeStartToken(), "std :: %type% < %type% *| *| >")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 57% (fallthrough)
branch  5 taken 43%
        8: 1186:                        const Type * type = var->typeStartToken()->tokAt(4)->type();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        8: 1187:                        if (type && type->classScope && type->classScope->definedType) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2: 1188:                            const Variable *membervar = type->classScope->getVariable(membertok->str());
call    0 returned 100%
call    1 returned 100%
        2: 1189:                            if (membervar) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1190:                                membertok->variable(membervar);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1191:                                if (membertok->varId() == 0 || mVariableList[membertok->varId()] == nullptr)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        1: 1192:                                    fixVarId(varIds, tok, const_cast<Token *>(membertok), membervar);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1193:                            }
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:                }
        -: 1197:            }
        -: 1198:        }
        -: 1199:
        -: 1200:        // check for function returning record type
        -: 1201:        // func(...).var
        -: 1202:        // func(...)[...].var
    86362: 1203:        else if (tok->function() && tok->next()->str() == "(" &&
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
     5746: 1204:                 (Token::Match(tok->next()->link(), ") . %name% !!(") ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
     2873: 1205:                  (Token::Match(tok->next()->link(), ") [") && Token::Match(tok->next()->link()->next()->link(), "] . %name% !!(")))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1206:            const Type *type = tok->function()->retType;
call    0 never executed
    #####: 1207:            if (type) {
branch  0 never executed
branch  1 never executed
        -: 1208:                Token *membertok;
    #####: 1209:                if (tok->next()->link()->next()->str() == ".")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1210:                    membertok = tok->next()->link()->next()->next();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1211:                else
    #####: 1212:                    membertok = tok->next()->link()->next()->link()->next()->next();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 1213:                const Variable *membervar = membertok->variable();
call    0 never executed
    #####: 1214:                if (!membervar) {
branch  0 never executed
branch  1 never executed
    #####: 1215:                    if (type->classScope) {
branch  0 never executed
branch  1 never executed
    #####: 1216:                        membervar = type->classScope->getVariable(membertok->str());
call    0 never executed
call    1 never executed
    #####: 1217:                        if (membervar) {
branch  0 never executed
branch  1 never executed
    #####: 1218:                            membertok->variable(membervar);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1219:                            if (membertok->varId() == 0 || mVariableList[membertok->varId()] == nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1220:                                if (tok->function()->retDef)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1221:                                    fixVarId(varIds, tok->function()->retDef, const_cast<Token *>(membertok), membervar);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1222:                            }
        -: 1223:                        }
        -: 1224:                    }
        -: 1225:                }
        -: 1226:            }
        -: 1227:        }
        -: 1228:    }
     2868: 1229:}
        -: 1230:
function _ZN14SymbolDatabase25createSymbolDatabaseEnumsEv called 956 returned 100% blocks executed 70%
      956: 1231:void SymbolDatabase::createSymbolDatabaseEnums()
        -: 1232:{
        -: 1233:    // fill in enumerators in enum
     3663: 1234:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
     2707: 1235:        if (it->type != Scope::eEnum)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     2697: 1236:            continue;
        -: 1237:
        -: 1238:        // add enumerators to enumerator tokens
       22: 1239:        for (Enumerator & i : it->enumeratorList)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 55% (fallthrough)
branch  5 taken 45%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
       12: 1240:            const_cast<Token *>(i.name)->enumerator(&i);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1241:    }
        -: 1242:
        -: 1243:    // fill in enumerator values
     3663: 1244:    for (std::list<Scope>::iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 74% (fallthrough)
branch  5 taken 26%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     2707: 1245:        if (it->type != Scope::eEnum)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     2697: 1246:            continue;
        -: 1247:
       10: 1248:        MathLib::bigint value = 0;
        -: 1249:
       22: 1250:        for (Enumerator & enumerator : it->enumeratorList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 55% (fallthrough)
branch  5 taken 45%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
        -: 1251:            // look for initialization tokens that can be converted to enumerators and convert them
       12: 1252:            if (enumerator.start) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        8: 1253:                if (!enumerator.end)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1254:                    mTokenizer->syntaxError(enumerator.start);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       16: 1255:                for (const Token * tok3 = enumerator.start; tok3 && tok3 != enumerator.end->next(); tok3 = tok3->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
call    7 returned 100%
        8: 1256:                    if (tok3->tokType() == Token::eName) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1257:                        const Enumerator * e = findEnumerator(tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1258:                        if (e)
branch  0 never executed
branch  1 never executed
    #####: 1259:                            const_cast<Token *>(tok3)->enumerator(e);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1260:                    }
        -: 1261:                }
        -: 1262:
        -: 1263:                // look for possible constant folding expressions
        -: 1264:                // rhs of operator:
        8: 1265:                Token *rhs = enumerator.start->previous()->astOperand2();
call    0 returned 100%
call    1 returned 100%
        -: 1266:
        -: 1267:                // constant folding of expression:
        8: 1268:                ValueFlow::valueFlowConstantFoldAST(rhs, mSettings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1269:
        -: 1270:                // get constant folded value:
        8: 1271:                if (rhs && rhs->hasKnownIntValue()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        8: 1272:                    enumerator.value = rhs->values().front().intvalue;
call    0 returned 100%
call    1 returned 100%
        8: 1273:                    enumerator.value_known = true;
        8: 1274:                    value = enumerator.value + 1;
        -: 1275:                }
        -: 1276:            }
        -: 1277:
        -: 1278:            // not initialized so use default value
        -: 1279:            else {
        4: 1280:                enumerator.value = value++;
        4: 1281:                enumerator.value_known = true;
        -: 1282:            }
        -: 1283:        }
        -: 1284:    }
        -: 1285:
        -: 1286:    // find enumerators
    28932: 1287:    for (const Token* tok = mTokenizer->list.front(); tok != mTokenizer->list.back(); tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
    27976: 1288:        if (tok->tokType() != Token::eName)
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
    24214: 1289:            continue;
     3762: 1290:        const Enumerator * enumerator = findEnumerator(tok);
call    0 returned 100%
     3762: 1291:        if (enumerator)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       10: 1292:            const_cast<Token *>(tok)->enumerator(enumerator);
call    0 returned 100%
        -: 1293:    }
      956: 1294:}
        -: 1295:
function _ZN14SymbolDatabase34createSymbolDatabaseIncompleteVarsEv called 956 returned 100% blocks executed 57%
      956: 1296:void SymbolDatabase::createSymbolDatabaseIncompleteVars()
        -: 1297:{
        -: 1298:    const std::set<std::string> cpp20keywords = {
        -: 1299:        "alignas",
        -: 1300:        "alignof",
        -: 1301:        "axiom",
        -: 1302:        "co_await",
        -: 1303:        "co_return",
        -: 1304:        "co_yield",
        -: 1305:        "concept",
        -: 1306:        "synchronized",
        -: 1307:        "consteval",
        -: 1308:        "reflexpr",
        -: 1309:        "requires",
     1912: 1310:    };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 92% (fallthrough)
branch 50 taken 8%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 returned 100%
branch 64 never executed
branch 65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
        -: 1311:    const std::set<std::string> cppkeywords = {
        -: 1312:        "asm",
        -: 1313:        "auto",
        -: 1314:        "catch",
        -: 1315:        "char",
        -: 1316:        "class",
        -: 1317:        "const",
        -: 1318:        "constexpr",
        -: 1319:        "decltype",
        -: 1320:        "default",
        -: 1321:        "do",
        -: 1322:        "enum",
        -: 1323:        "explicit",
        -: 1324:        "export",
        -: 1325:        "extern",
        -: 1326:        "final",
        -: 1327:        "friend",
        -: 1328:        "inline",
        -: 1329:        "mutable",
        -: 1330:        "namespace",
        -: 1331:        "new",
        -: 1332:        "noexcept",
        -: 1333:        "override",
        -: 1334:        "private",
        -: 1335:        "protected",
        -: 1336:        "public",
        -: 1337:        "register",
        -: 1338:        "sizeof",
        -: 1339:        "static",
        -: 1340:        "static_assert",
        -: 1341:        "struct",
        -: 1342:        "template",
        -: 1343:        "this",
        -: 1344:        "thread_local",
        -: 1345:        "throw",
        -: 1346:        "try",
        -: 1347:        "typedef",
        -: 1348:        "typeid",
        -: 1349:        "typename",
        -: 1350:        "union",
        -: 1351:        "using",
        -: 1352:        "virtual",
        -: 1353:        "void",
        -: 1354:        "volatile",
     1912: 1355:    };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
call   101 returned 100%
branch 102 taken 100% (fallthrough)
branch 103 taken 0% (throw)
call   104 returned 100%
call   105 returned 100%
branch 106 taken 100% (fallthrough)
branch 107 taken 0% (throw)
call   108 returned 100%
call   109 returned 100%
branch 110 taken 100% (fallthrough)
branch 111 taken 0% (throw)
call   112 returned 100%
call   113 returned 100%
branch 114 taken 100% (fallthrough)
branch 115 taken 0% (throw)
call   116 returned 100%
call   117 returned 100%
branch 118 taken 100% (fallthrough)
branch 119 taken 0% (throw)
call   120 returned 100%
call   121 returned 100%
branch 122 taken 100% (fallthrough)
branch 123 taken 0% (throw)
call   124 returned 100%
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0% (throw)
call   136 returned 100%
call   137 returned 100%
branch 138 taken 100% (fallthrough)
branch 139 taken 0% (throw)
call   140 returned 100%
call   141 returned 100%
branch 142 taken 100% (fallthrough)
branch 143 taken 0% (throw)
call   144 returned 100%
call   145 returned 100%
branch 146 taken 100% (fallthrough)
branch 147 taken 0% (throw)
call   148 returned 100%
call   149 returned 100%
branch 150 taken 100% (fallthrough)
branch 151 taken 0% (throw)
call   152 returned 100%
call   153 returned 100%
branch 154 taken 100% (fallthrough)
branch 155 taken 0% (throw)
call   156 returned 100%
call   157 returned 100%
branch 158 taken 100% (fallthrough)
branch 159 taken 0% (throw)
call   160 returned 100%
call   161 returned 100%
branch 162 taken 100% (fallthrough)
branch 163 taken 0% (throw)
call   164 returned 100%
call   165 returned 100%
branch 166 taken 100% (fallthrough)
branch 167 taken 0% (throw)
call   168 returned 100%
call   169 returned 100%
branch 170 taken 100% (fallthrough)
branch 171 taken 0% (throw)
call   172 returned 100%
call   173 returned 100%
branch 174 taken 100% (fallthrough)
branch 175 taken 0% (throw)
call   176 returned 100%
branch 177 taken 98% (fallthrough)
branch 178 taken 2%
call   179 returned 100%
call   180 returned 100%
call   181 returned 100%
call   182 returned 100%
call   183 returned 100%
call   184 returned 100%
call   185 returned 100%
call   186 returned 100%
call   187 returned 100%
call   188 returned 100%
call   189 returned 100%
call   190 returned 100%
call   191 returned 100%
call   192 returned 100%
call   193 returned 100%
call   194 returned 100%
call   195 returned 100%
call   196 returned 100%
call   197 returned 100%
call   198 returned 100%
call   199 returned 100%
call   200 returned 100%
call   201 returned 100%
call   202 returned 100%
call   203 returned 100%
call   204 returned 100%
call   205 returned 100%
call   206 returned 100%
call   207 returned 100%
call   208 returned 100%
call   209 returned 100%
call   210 returned 100%
call   211 returned 100%
call   212 returned 100%
call   213 returned 100%
call   214 returned 100%
call   215 returned 100%
call   216 returned 100%
call   217 returned 100%
call   218 returned 100%
call   219 returned 100%
call   220 returned 100%
call   221 returned 100%
call   222 returned 100%
call   223 returned 100%
branch 224 never executed
branch 225 never executed
call   226 never executed
call   227 never executed
call   228 never executed
call   229 never executed
call   230 never executed
call   231 never executed
call   232 never executed
call   233 never executed
call   234 never executed
call   235 never executed
call   236 never executed
call   237 never executed
call   238 never executed
call   239 never executed
call   240 never executed
call   241 never executed
call   242 never executed
call   243 never executed
call   244 never executed
call   245 never executed
call   246 never executed
call   247 never executed
call   248 never executed
call   249 never executed
call   250 never executed
call   251 never executed
call   252 never executed
call   253 never executed
call   254 never executed
call   255 never executed
call   256 never executed
call   257 never executed
call   258 never executed
call   259 never executed
call   260 never executed
call   261 never executed
call   262 never executed
call   263 never executed
call   264 never executed
call   265 never executed
call   266 never executed
call   267 never executed
call   268 never executed
call   269 never executed
call   270 never executed
    28932: 1356:    for (const Token* tok = mTokenizer->list.front(); tok != mTokenizer->list.back(); tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
    27976: 1357:        const Scope * scope = tok->scope();
call    0 returned 100%
    27976: 1358:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1359:            continue;
    27976: 1360:        if (!scope->isExecutable())
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
     9754: 1361:            continue;
    18222: 1362:        if (!Token::Match(tok, "%name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 66% (fallthrough)
branch  4 taken 34%
    12048: 1363:            continue;
     6174: 1364:        if (!tok->isNameOnly())
call    0 returned 100%
branch  1 taken 78% (fallthrough)
branch  2 taken 22%
     4821: 1365:            continue;
     1353: 1366:        if (Token::Match(tok, "%var%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1367:            continue;
     1353: 1368:        if (tok->type())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1369:            continue;
     1353: 1370:        if (Token::Match(tok->next(), "::|.|(|:|%var%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 54% (fallthrough)
branch  5 taken 46%
      724: 1371:            continue;
      629: 1372:        if (Token::Match(tok->next(), "&|&&|* )|%var%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
       18: 1373:            continue;
      611: 1374:        if (Token::simpleMatch(tok->next(), ")") && Token::simpleMatch(tok->next()->link()->previous(), "catch ("))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 24% (fallthrough)
branch  5 taken 76%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 1375:            continue;
        -: 1376:        // Very likely a typelist
      611: 1377:        if (Token::Match(tok->tokAt(-2), "%type% ,"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        8: 1378:            continue;
        -: 1379:        // Inside template brackets
      603: 1380:        if (Token::Match(tok->next(), "<|>") && tok->next()->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
branch 10 taken 4% (fallthrough)
branch 11 taken 96%
       26: 1381:            continue;
      577: 1382:        if (Token::simpleMatch(tok->previous(), "<") && tok->previous()->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 71% (fallthrough)
branch  9 taken 29%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
        5: 1383:            continue;
        -: 1384:        // Skip goto labels
      572: 1385:        if (Token::simpleMatch(tok->previous(), "goto"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        8: 1386:            continue;
      564: 1387:        if (cppkeywords.count(tok->str()) > 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 23% (fallthrough)
branch  5 taken 77%
      132: 1388:            continue;
      432: 1389:        if (mSettings->standards.cpp >= Standards::CPP20 && cpp20keywords.count(tok->str()) > 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1390:            continue;
      432: 1391:        const_cast<Token *>(tok)->isIncompleteVar(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1392:    }
      956: 1393:}
call    0 never executed
        -: 1394:
function _ZN14SymbolDatabase35createSymbolDatabaseEscapeFunctionsEv called 956 returned 100% blocks executed 80%
      956: 1395:void SymbolDatabase::createSymbolDatabaseEscapeFunctions()
        -: 1396:{
     3663: 1397:    for (Scope & scope : scopeList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     2707: 1398:        if (scope.type != Scope::eFunction)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
     1700: 1399:            continue;
     1007: 1400:        Function * function = scope.function;
     1007: 1401:        if (!function)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4: 1402:            continue;
     1003: 1403:        function->isEscapeFunction(isReturnScope(scope.bodyEnd, mSettings, true));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 1404:    }
      956: 1405:}
        -: 1406:
function _ZN14SymbolDatabase32setArrayDimensionsUsingValueFlowEv called 956 returned 100% blocks executed 45%
      956: 1407:void SymbolDatabase::setArrayDimensionsUsingValueFlow()
        -: 1408:{
        -: 1409:    // set all unknown array dimensions
     3540: 1410:    for (const Variable *var : mVariableList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 73% (fallthrough)
branch  4 taken 27%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 1411:        // check each array variable
     2584: 1412:        if (!var || !var->isArray())
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
call    2 returned 100%
branch  3 taken 97% (fallthrough)
branch  4 taken 3%
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
     2534: 1413:            continue;
        -: 1414:        // check each array dimension
      101: 1415:        for (const Dimension &const_dimension : var->dimensions()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
       51: 1416:            Dimension &dimension = const_cast<Dimension &>(const_dimension);
       51: 1417:            if (dimension.num != 0 || !dimension.tok)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       51: 1418:                continue;
    #####: 1419:            dimension.known = false;
        -: 1420:
        -: 1421:            // check for a single token dimension
    #####: 1422:            if (dimension.tok->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1423:                dimension.known = true;
    #####: 1424:                dimension.num = dimension.tok->getKnownIntValue();
call    0 never executed
    #####: 1425:                continue;
        -: 1426:            }
        -: 1427:
    #####: 1428:            else if (dimension.tok->valueType() && dimension.tok->valueType()->pointer == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1429:                int bits = 0;
    #####: 1430:                switch (dimension.tok->valueType()->type) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1431:                case ValueType::Type::CHAR:
    #####: 1432:                    bits = mSettings->char_bit;
    #####: 1433:                    break;
    #####: 1434:                case ValueType::Type::SHORT:
    #####: 1435:                    bits = mSettings->short_bit;
    #####: 1436:                    break;
    #####: 1437:                case ValueType::Type::INT:
    #####: 1438:                    bits = mSettings->int_bit;
    #####: 1439:                    break;
    #####: 1440:                case ValueType::Type::LONG:
    #####: 1441:                    bits = mSettings->long_bit;
    #####: 1442:                    break;
    #####: 1443:                case ValueType::Type::LONGLONG:
    #####: 1444:                    bits = mSettings->long_long_bit;
    #####: 1445:                    break;
    #####: 1446:                default:
    #####: 1447:                    break;
        -: 1448:                };
        -: 1449:
    #####: 1450:                if (bits > 0 && bits <= 62) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1451:                    if (dimension.tok->valueType()->sign == ValueType::Sign::UNSIGNED)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1452:                        dimension.num = 1LL << bits;
        -: 1453:                    else
    #####: 1454:                        dimension.num = 1LL << (bits - 1);
        -: 1455:                }
        -: 1456:            }
        -: 1457:        }
        -: 1458:    }
      956: 1459:}
        -: 1460:
function _ZN14SymbolDatabaseD2Ev called 956 returned 100% blocks executed 100%
     1912: 1461:SymbolDatabase::~SymbolDatabase()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
        -: 1462:{
        -: 1463:    // Clear scope, type, function and variable pointers
    29888: 1464:    for (const Token* tok = mTokenizer->list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 1465:        const_cast<Token *>(tok)->scope(nullptr);
call    0 returned 100%
    28932: 1466:        const_cast<Token *>(tok)->type(nullptr);
call    0 returned 100%
    28932: 1467:        const_cast<Token *>(tok)->function(nullptr);
call    0 returned 100%
    28932: 1468:        const_cast<Token *>(tok)->variable(nullptr);
call    0 returned 100%
    28932: 1469:        const_cast<Token *>(tok)->enumerator(nullptr);
call    0 returned 100%
    28932: 1470:        const_cast<Token *>(tok)->setValueType(nullptr);
call    0 returned 100%
        -: 1471:    }
      956: 1472:}
        -: 1473:
function _ZNK14SymbolDatabase10isFunctionEPK5TokenPK5ScopePS2_S6_S6_ called 3526 returned 100% blocks executed 60%
     3526: 1474:bool SymbolDatabase::isFunction(const Token *tok, const Scope* outerScope, const Token **funcStart, const Token **argStart, const Token** declEnd) const
        -: 1475:{
     3526: 1476:    if (tok->varId())
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
      151: 1477:        return false;
        -: 1478:
        -: 1479:    // function returning function pointer? '... ( ... %name% ( ... ))( ... ) {'
        -: 1480:    // function returning reference to array '... ( & %name% ( ... ))[ ... ] {'
        -: 1481:    // TODO: Activate this again
        -: 1482:    if (false && tok->str() == "(" && tok->strAt(1) != "*" &&
        -: 1483:        (tok->link()->previous()->str() == ")" || Token::simpleMatch(tok->link()->tokAt(-2), ") const"))) {
        -: 1484:        const Token* tok2 = tok->link()->next();
        -: 1485:        if (tok2 && tok2->str() == "(" && Token::Match(tok2->link()->next(), "{|;|const|=")) {
        -: 1486:            const Token* argStartTok;
        -: 1487:            if (tok->link()->previous()->str() == "const")
        -: 1488:                argStartTok = tok->link()->linkAt(-2);
        -: 1489:            else
        -: 1490:                argStartTok = tok->link()->linkAt(-1);
        -: 1491:            *funcStart = argStartTok->previous();
        -: 1492:            *argStart = argStartTok;
        -: 1493:            *declEnd = Token::findmatch(tok2->link()->next(), "{|;");
        -: 1494:            return true;
        -: 1495:        } else if (tok2 && tok2->str() == "[") {
        -: 1496:            while (tok2 && tok2->str() == "[")
        -: 1497:                tok2 = tok2->link()->next();
        -: 1498:            if (Token::Match(tok2, "{|;|const|=")) {
        -: 1499:                const Token* argStartTok;
        -: 1500:                if (tok->link()->previous()->str() == "const")
        -: 1501:                    argStartTok = tok->link()->linkAt(-2);
        -: 1502:                else
        -: 1503:                    argStartTok = tok->link()->linkAt(-1);
        -: 1504:                *funcStart = argStartTok->previous();
        -: 1505:                *argStart = argStartTok;
        -: 1506:                *declEnd = Token::findmatch(tok2, "{|;");
        -: 1507:                return true;
        -: 1508:            }
        -: 1509:        }
        -: 1510:    }
        -: 1511:
        -: 1512:    // regular function?
     5957: 1513:    else if (Token::Match(tok, "%name% (") && !isReservedName(tok->str()) && tok->previous() &&
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
call    7 returned 100%
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
branch 12 taken 38% (fallthrough)
branch 13 taken 62%
     1325: 1514:             (Token::Match(tok->previous(), "%name%|>|&|*|::|~") || // Either a return type or scope qualifier in front of tok
call    0 returned 100%
call    1 returned 100%
branch  2 taken 81% (fallthrough)
branch  3 taken 19%
       31: 1515:              outerScope->isClassOrStructOrUnion())) { // or a ctor/dtor
call    0 returned 100%
     1288: 1516:        const Token* tok1 = tok->previous();
call    0 returned 100%
     1288: 1517:        const Token* tok2 = tok->next()->link()->next();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 1518:
     1288: 1519:        if (!mTokenizer->isFunctionHead(tok->next(), ";:{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
call   12 never executed
call   13 never executed
call   14 never executed
        1: 1520:            return false;
        -: 1521:
        -: 1522:        // skip over destructor "~"
     1287: 1523:        if (tok1->str() == "~")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 1524:            tok1 = tok1->previous();
call    0 returned 100%
        -: 1525:
        -: 1526:        // skip over qualification
     1327: 1527:        while (Token::simpleMatch(tok1, "::")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       20: 1528:            tok1 = tok1->previous();
call    0 returned 100%
       20: 1529:            if (Token::Match(tok1, "%name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       20: 1530:                tok1 = tok1->previous();
call    0 returned 100%
    #####: 1531:            else if (tok1 && tok1->str() == ">" && tok1->link() && Token::Match(tok1->link()->previous(), "%name%"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1532:                tok1 = tok1->link()->tokAt(-2);
call    0 never executed
call    1 never executed
        -: 1533:        }
        -: 1534:
        -: 1535:        // skip over const, noexcept, throw, override, final and volatile specifiers
     1351: 1536:        while (Token::Match(tok2, "const|noexcept|throw|override|final|volatile|&|&&")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       32: 1537:            tok2 = tok2->next();
call    0 returned 100%
       32: 1538:            if (tok2 && tok2->str() == "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
        2: 1539:                tok2 = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 1540:        }
        -: 1541:
        -: 1542:        // skip over trailing return type
     1287: 1543:        if (tok2 && tok2->str() == ".") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1544:            for (tok2 = tok2->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1545:                if (Token::Match(tok2, ";|{|=|override|final"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1546:                    break;
    #####: 1547:                if (tok2->link() && Token::Match(tok2, "<|[|("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1548:                    tok2 = tok2->link();
call    0 never executed
        -: 1549:            }
        -: 1550:        }
        -: 1551:
        -: 1552:        // done if constructor or destructor
     1287: 1553:        if (!Token::Match(tok1, "{|}|;|public:|protected:|private:") && tok1) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
        -: 1554:            // skip over pointers and references
     1407: 1555:            while (Token::Match(tok1, "%type%|*|&") && !endsWith(tok1->str(), ':') && (!isReservedName(tok1->str()) || tok1->str() == "const"))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 94% (fallthrough)
branch 10 taken 6%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
branch 15 taken 6% (fallthrough)
branch 16 taken 94%
       78: 1556:                tok1 = tok1->previous();
call    0 returned 100%
        -: 1557:
        -: 1558:            // skip over template
     1251: 1559:            if (tok1 && tok1->str() == ">") {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        6: 1560:                if (tok1->link())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        6: 1561:                    tok1 = tok1->link()->previous();
call    0 returned 100%
call    1 returned 100%
        -: 1562:                else
    #####: 1563:                    return false;
        -: 1564:            }
        -: 1565:
        -: 1566:            // function can't have number or variable as return type
     1251: 1567:            if (tok1 && (tok1->isNumber() || tok1->varId()))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1568:                return false;
        -: 1569:
        -: 1570:            // skip over return type
     1251: 1571:            if (Token::Match(tok1, "%name%")) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     1223: 1572:                if (tok1->str() == "return")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1573:                    return false;
     1223: 1574:                tok1 = tok1->previous();
call    0 returned 100%
        -: 1575:            }
        -: 1576:
        -: 1577:            // skip over qualification
     1265: 1578:            while (Token::simpleMatch(tok1, "::")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        7: 1579:                tok1 = tok1->previous();
call    0 returned 100%
        7: 1580:                if (Token::Match(tok1, "%name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        7: 1581:                    tok1 = tok1->previous();
call    0 returned 100%
    #####: 1582:                else if (tok1 && tok1->str() == ">" && tok1->link() && Token::Match(tok1->link()->previous(), "%name%"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 1583:                    tok1 = tok1->link()->tokAt(-2);
call    0 never executed
call    1 never executed
        -: 1584:            }
        -: 1585:
        -: 1586:            // skip over modifiers and other stuff
       21: 1587:            while (Token::Match(tok1, "const|static|extern|template|virtual|struct|class|enum|%name%")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -: 1588:                // friend type func(); is not a function
       21: 1589:                if (isCPP() && tok1->str() == "friend" && tok2->str() == ";")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 1590:                    return false;
       21: 1591:                tok1 = tok1->previous();
call    0 returned 100%
        -: 1592:            }
        -: 1593:
        -: 1594:            // should be at a sequence point if this is a function
     1251: 1595:            if (!Token::Match(tok1, ">|{|}|;|public:|protected:|private:") && tok1)
call    0 returned 100%
branch  1 taken 63% (fallthrough)
branch  2 taken 37%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        1: 1596:                return false;
        -: 1597:        }
        -: 1598:
     3858: 1599:        if (tok2 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
     1301: 1600:            (Token::Match(tok2, ";|{|=") ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
       30: 1601:             (tok2->isUpperCaseName() && Token::Match(tok2, "%name% ;|{")) ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       30: 1602:             (tok2->isUpperCaseName() && Token::Match(tok2, "%name% (") && tok2->next()->link()->strAt(1) == "{") ||
call    0 returned 100%
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
       15: 1603:             Token::Match(tok2, ": ::| %name% (|::|<|{") ||
call    0 returned 100%
branch  1 never executed
branch  2 never executed
    #####: 1604:             Token::Match(tok2, "&|&&| ;|{") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1605:             Token::Match(tok2, "= delete|default ;"))) {
call    0 never executed
     1286: 1606:            *funcStart = tok;
     1286: 1607:            *argStart = tok->next();
call    0 returned 100%
     1286: 1608:            *declEnd = Token::findmatch(tok2, "{|;");
call    0 returned 100%
     1286: 1609:            return true;
        -: 1610:        }
        -: 1611:    }
        -: 1612:
        -: 1613:    // UNKNOWN_MACRO(a,b) { ... }
     5783: 1614:    else if (outerScope->type == Scope::eGlobal &&
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1617: 1615:             Token::Match(tok, "%name% (") &&
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
       10: 1616:             tok->isUpperCaseName() &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
     2089: 1617:             Token::simpleMatch(tok->linkAt(1), ") {") &&
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
call    3 returned 100%
branch  4 never executed
branch  5 never executed
    #####: 1618:             (!tok->previous() || Token::Match(tok->previous(), "[;{}]"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1619:        *funcStart = tok;
    #####: 1620:        *argStart = tok->next();
call    0 never executed
    #####: 1621:        *declEnd = tok->linkAt(1)->next();
call    0 never executed
call    1 never executed
    #####: 1622:        return true;
        -: 1623:    }
        -: 1624:
        -: 1625:    // template constructor?
     2087: 1626:    else if (Token::Match(tok, "%name% <") && Token::simpleMatch(tok->next()->link(), "> (")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 10% (fallthrough)
branch  7 taken 90%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        2: 1627:        const Token* tok2 = tok->next()->link()->next()->link();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4: 1628:        if (Token::Match(tok2, ") const| ;|{|=") ||
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2: 1629:            Token::Match(tok2, ") : ::| %name% (|::|<|{") ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1630:            Token::Match(tok2, ") const| noexcept {|;|(")) {
call    0 never executed
        2: 1631:            *funcStart = tok;
        2: 1632:            *argStart = tok2->link();
call    0 returned 100%
        2: 1633:            *declEnd = Token::findmatch(tok2->next(), "{|;");
call    0 returned 100%
call    1 returned 100%
        2: 1634:            return true;
        -: 1635:        }
        -: 1636:    }
        -: 1637:
        -: 1638:    // regular C function with missing return or invalid C++ ?
     4185: 1639:    else if (Token::Match(tok, "%name% (") && !isReservedName(tok->str()) &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 88% (fallthrough)
branch  4 taken 13%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
     2092: 1640:             Token::simpleMatch(tok->linkAt(1), ") {") &&
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
branch  4 never executed
branch  5 never executed
    #####: 1641:             (!tok->previous() || Token::Match(tok->previous(), ";|}"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1642:        if (mTokenizer->isC()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1643:            debugMessage(tok, "SymbolDatabase::isFunction found C function '" + tok->str() + "' without a return type.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1644:            *funcStart = tok;
    #####: 1645:            *argStart = tok->next();
call    0 never executed
    #####: 1646:            *declEnd = tok->linkAt(1)->next();
call    0 never executed
call    1 never executed
    #####: 1647:            return true;
        -: 1648:        }
    #####: 1649:        mTokenizer->syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1650:    }
        -: 1651:
     2085: 1652:    return false;
        -: 1653:}
        -: 1654:
function _ZNK14SymbolDatabase24validateExecutableScopesEv called 0 returned 0% blocks executed 0%
    #####: 1655:void SymbolDatabase::validateExecutableScopes() const
        -: 1656:{
    #####: 1657:    const std::size_t functions = functionScopes.size();
call    0 never executed
    #####: 1658:    for (std::size_t i = 0; i < functions; ++i) {
branch  0 never executed
branch  1 never executed
    #####: 1659:        const Scope* const scope = functionScopes[i];
call    0 never executed
    #####: 1660:        const Function* const function = scope->function;
    #####: 1661:        if (scope->isExecutable() && !function) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1662:            const std::list<const Token*> callstack(1, scope->classDef);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 1663:            const std::string msg = std::string("Executable scope '") + scope->classDef->str() + "' with unknown function.";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####: 1664:            const ErrorLogger::ErrorMessage errmsg(callstack, &mTokenizer->list, Severity::debug,
        -: 1665:                                                   "symbolDatabaseWarning",
        -: 1666:                                                   msg,
    #####: 1667:                                                   false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1668:            mErrorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1669:        }
        -: 1670:    }
    #####: 1671:}
call    0 never executed
        -: 1672:
        -: 1673:namespace {
function _ZN12_GLOBAL__N_130getFunctionForArgumentvariableEPK8VariableRKNSt7__debug6vectorIPK5ScopeSaIS7_EEE called 0 returned 0% blocks executed 0%
    #####: 1674:    const Function* getFunctionForArgumentvariable(const Variable * const var, const std::vector<const Scope *>& functionScopes)
        -: 1675:    {
    #####: 1676:        const std::size_t functions = functionScopes.size();
call    0 never executed
    #####: 1677:        for (std::size_t i = 0; i < functions; ++i) {
branch  0 never executed
branch  1 never executed
    #####: 1678:            const Scope* const scope = functionScopes[i];
call    0 never executed
    #####: 1679:            const Function* const function = scope->function;
    #####: 1680:            if (function) {
branch  0 never executed
branch  1 never executed
    #####: 1681:                for (std::size_t arg=0; arg < function->argCount(); ++arg) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1682:                    if (var==function->getArgumentVar(arg))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1683:                        return function;
        -: 1684:                }
        -: 1685:            }
        -: 1686:        }
    #####: 1687:        return nullptr;
        -: 1688:    }
        -: 1689:}
        -: 1690:
function _ZNK14SymbolDatabase17validateVariablesEv called 0 returned 0% blocks executed 0%
    #####: 1691:void SymbolDatabase::validateVariables() const
        -: 1692:{
    #####: 1693:    for (std::vector<const Variable *>::const_iterator iter = mVariableList.begin(); iter!=mVariableList.end(); ++iter) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1694:        const Variable * const var = *iter;
call    0 never executed
    #####: 1695:        if (var) {
branch  0 never executed
branch  1 never executed
    #####: 1696:            if (!var->scope()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1697:                const Function* function = getFunctionForArgumentvariable(var, functionScopes);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1698:                if (!var->isArgument() || (function && function->hasBody())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1699:                    throw InternalError(var->nameToken(), "Analysis failed (variable without scope). If the code is valid then please report this failure.", InternalError::INTERNAL);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 1700:                    //std::cout << "!!!Variable found without scope: " << var->nameToken()->str() << std::endl;
        -: 1701:                }
        -: 1702:            }
        -: 1703:        }
        -: 1704:    }
    #####: 1705:}
        -: 1706:
function _ZNK14SymbolDatabase8validateEv called 956 returned 100% blocks executed 67%
      956: 1707:void SymbolDatabase::validate() const
        -: 1708:{
      956: 1709:    if (mSettings->debugwarnings) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1710:        validateExecutableScopes();
call    0 never executed
        -: 1711:    }
        -: 1712:    //validateVariables();
      956: 1713:}
        -: 1714:
function _ZN8VariableD2Ev called 1539 returned 100% blocks executed 100%
     3078: 1715:Variable::~Variable()
call    0 returned 100%
        -: 1716:{
     1539: 1717:    delete mValueType;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
     1539: 1718:}
        -: 1719:
function _ZNK8Variable14isPointerArrayEv called 501 returned 100% blocks executed 94%
      501: 1720:bool Variable::isPointerArray() const
        -: 1721:{
      501: 1722:    return isArray() && nameToken() && nameToken()->previous() && (nameToken()->previous()->str() == "*");
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
        -: 1723:}
        -: 1724:
function _ZNK8Variable12declEndTokenEv called 2762 returned 100% blocks executed 100%
     2762: 1725:const Token * Variable::declEndToken() const
        -: 1726:{
     2762: 1727:    Token const * declEnd = typeStartToken();
call    0 returned 100%
    16704: 1728:    while (declEnd && !Token::Match(declEnd, "[;,)={]")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 72% (fallthrough)
branch  4 taken 28%
branch  5 taken 72% (fallthrough)
branch  6 taken 28%
     6971: 1729:        if (declEnd->link() && Token::Match(declEnd,"(|["))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 19% (fallthrough)
branch  5 taken 81%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       38: 1730:            declEnd = declEnd->link();
call    0 returned 100%
     6971: 1731:        declEnd = declEnd->next();
call    0 returned 100%
        -: 1732:    }
     2762: 1733:    return declEnd;
        -: 1734:}
        -: 1735:
function _ZN8Variable8evaluateEPK8Settings called 1539 returned 100% blocks executed 89%
     1539: 1736:void Variable::evaluate(const Settings* settings)
        -: 1737:{
     1539: 1738:    const Library * const lib = settings ? &settings->library : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1739:
     1539: 1740:    if (mNameToken)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1496: 1741:        setFlag(fIsArray, arrayDimensions(settings));
call    0 returned 100%
call    1 returned 100%
        -: 1742:
     1539: 1743:    if (mTypeStartToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1539: 1744:        setValueType(ValueType::parseDecl(mTypeStartToken,settings));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        -: 1745:
     1539: 1746:    const Token* tok = mTypeStartToken;
     1895: 1747:    while (tok && tok->previous() && tok->previous()->isName())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
branch  9 taken 10% (fallthrough)
branch 10 taken 90%
      178: 1748:        tok = tok->previous();
call    0 returned 100%
     1539: 1749:    const Token* end = mTypeEndToken;
     1539: 1750:    if (end)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1539: 1751:        end = end->next();
call    0 returned 100%
     6399: 1752:    while (tok != end) {
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
     2430: 1753:        if (tok->str() == "static")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       15: 1754:            setFlag(fIsStatic, true);
call    0 returned 100%
     2415: 1755:        else if (tok->str() == "extern")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        3: 1756:            setFlag(fIsExtern, true);
call    0 returned 100%
     2412: 1757:        else if (tok->str() == "volatile")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 1758:            setFlag(fIsVolatile, true);
call    0 returned 100%
     2411: 1759:        else if (tok->str() == "mutable")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1760:            setFlag(fIsMutable, true);
call    0 never executed
     2411: 1761:        else if (tok->str() == "const")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      125: 1762:            setFlag(fIsConst, true);
call    0 returned 100%
     2286: 1763:        else if (tok->str() == "*") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
      263: 1764:            setFlag(fIsPointer, !isArray() || Token::Match(tok->previous(), "( * %name% )"));
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
      263: 1765:            setFlag(fIsConst, false); // Points to const, isn't necessarily const itself
call    0 returned 100%
     2023: 1766:        } else if (tok->str() == "&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      111: 1767:            if (isReference())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1768:                setFlag(fIsRValueRef, true);
call    0 never executed
      111: 1769:            setFlag(fIsReference, true);
call    0 returned 100%
     1912: 1770:        } else if (tok->str() == "&&") { // Before simplification, && isn't split up
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        5: 1771:            setFlag(fIsRValueRef, true);
call    0 returned 100%
        5: 1772:            setFlag(fIsReference, true); // Set also fIsReference
call    0 returned 100%
        -: 1773:        }
        -: 1774:
     2430: 1775:        if (tok->str() == "<" && tok->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
       52: 1776:            tok = tok->link();
call    0 returned 100%
        -: 1777:        else
     2378: 1778:            tok = tok->next();
call    0 returned 100%
        -: 1779:    }
        -: 1780:
     1539: 1781:    while (Token::Match(mTypeStartToken, "static|const|volatile %any%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1782:        mTypeStartToken = mTypeStartToken->next();
call    0 never executed
     1543: 1783:    while (mTypeEndToken && mTypeEndToken->previous() && Token::Match(mTypeEndToken, "const|volatile"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        2: 1784:        mTypeEndToken = mTypeEndToken->previous();
call    0 returned 100%
        -: 1785:
     1539: 1786:    if (mTypeStartToken) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     3078: 1787:        std::string strtype = mTypeStartToken->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     1652: 1788:        for (const Token *typeToken = mTypeStartToken; Token::Match(typeToken, "%type% :: %type%"); typeToken = typeToken->tokAt(2))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
      113: 1789:            strtype += "::" + typeToken->strAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
     1539: 1790:        setFlag(fIsClass, !lib->podtype(strtype) && !mTypeStartToken->isStandardType() && !isEnumType() && !isPointer() && !isReference() && strtype != "...");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 27% (fallthrough)
branch  9 taken 73%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 99% (fallthrough)
branch 14 taken 1%
call   15 returned 100%
branch 16 taken 82% (fallthrough)
branch 17 taken 18%
call   18 returned 100%
branch 19 taken 77% (fallthrough)
branch 20 taken 23%
call   21 returned 100%
branch 22 taken 99% (fallthrough)
branch 23 taken 1%
call   24 returned 100%
     1539: 1791:        setFlag(fIsStlType, Token::simpleMatch(mTypeStartToken, "std ::"));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
     1539: 1792:        setFlag(fIsStlString, isStlType() && (Token::Match(mTypeStartToken->tokAt(2), "string|wstring|u16string|u32string !!::") || (Token::simpleMatch(mTypeStartToken->tokAt(2), "basic_string <") && !Token::simpleMatch(mTypeStartToken->linkAt(3), "> ::"))));
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 53% (fallthrough)
branch 10 taken 47%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 returned 100%
     1539: 1793:        setFlag(fIsSmartPointer, lib->isSmartPointer(mTypeStartToken));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 1794:    }
     1539: 1795:    if (mAccess == AccessControl::Argument) {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
      741: 1796:        tok = mNameToken;
      741: 1797:        if (!tok) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1798:            // Argument without name
       43: 1799:            tok = mTypeEndToken;
        -: 1800:            // back up to start of array dimensions
       43: 1801:            while (tok && tok->str() == "]")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1802:                tok = tok->link()->previous();
call    0 never executed
call    1 never executed
        -: 1803:            // add array dimensions if present
       43: 1804:            if (tok && tok->next()->str() == "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1805:                setFlag(fIsArray, arrayDimensions(settings));
call    0 never executed
call    1 never executed
        -: 1806:        }
      741: 1807:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1808:            return;
      741: 1809:        tok = tok->next();
call    0 returned 100%
      743: 1810:        while (tok->str() == "[")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 1811:            tok = tok->link();
call    0 returned 100%
      741: 1812:        setFlag(fHasDefault, tok->str() == "=");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 1813:    }
        -: 1814:    // check for C++11 member initialization
     1539: 1815:    if (mScope && mScope->isClassOrStruct()) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
call    2 returned 100%
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
branch  5 taken 8% (fallthrough)
branch  6 taken 92%
        -: 1816:        // type var = x or
        -: 1817:        // type var = {x}
        -: 1818:        // type var = x; gets simplified to: type var ; var = x ;
      122: 1819:        Token const * declEnd = declEndToken();
call    0 returned 100%
      241: 1820:        if ((Token::Match(declEnd, "; %name% =") && declEnd->strAt(1) == mNameToken->str()) ||
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
      119: 1821:            Token::Match(declEnd, "=|{"))
call    0 returned 100%
        3: 1822:            setFlag(fHasDefault, true);
call    0 returned 100%
        -: 1823:    }
        -: 1824:
     1539: 1825:    if (mTypeStartToken) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1539: 1826:        if (Token::Match(mTypeStartToken, "float|double"))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
       48: 1827:            setFlag(fIsFloatType, true);
call    0 returned 100%
        -: 1828:    }
        -: 1829:}
        -: 1830:
function _ZN8Variable12setValueTypeERK9ValueType called 1545 returned 100% blocks executed 90%
     1545: 1831:void Variable::setValueType(const ValueType &valueType)
        -: 1832:{
     1545: 1833:    delete mValueType;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
     1545: 1834:    mValueType = new ValueType(valueType);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
     1545: 1835:    if ((mValueType->pointer > 0) && (!isArray() || Token::Match(mNameToken->previous(), "( * %name% )")))
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 16% (fallthrough)
branch 10 taken 84%
      246: 1836:        setFlag(fIsPointer, true);
call    0 returned 100%
     1545: 1837:    setFlag(fIsConst, mValueType->constness & (1U << mValueType->pointer));
call    0 returned 100%
     1545: 1838:    if (mValueType->smartPointerType)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1839:        setFlag(fIsSmartPointer, true);
call    0 never executed
     1545: 1840:}
        -: 1841:
function _ZNK8Variable16smartPointerTypeEv called 7813 returned 100% blocks executed 68%
     7813: 1842:const Type *Variable::smartPointerType() const
        -: 1843:{
     7813: 1844:    if (!isSmartPointer())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     7809: 1845:        return nullptr;
        -: 1846:
        4: 1847:    if (mValueType->smartPointerType)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1848:        return mValueType->smartPointerType;
        -: 1849:
        -: 1850:    // TODO: Cache result
        4: 1851:    const Token *ptrType = typeStartToken();
call    0 returned 100%
       28: 1852:    while (Token::Match(ptrType, "%name%|::"))
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
       12: 1853:        ptrType = ptrType->next();
call    0 returned 100%
        4: 1854:    if (Token::Match(ptrType, "< %name% >"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1855:        return ptrType->scope()->findType(ptrType->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        4: 1856:    return nullptr;
        -: 1857:}
        -: 1858:
function _ZN8FunctionC2EPK9TokenizerPK5TokenPK5ScopeS5_S5_ called 1165 returned 100% blocks executed 81%
     1165: 1859:Function::Function(const Tokenizer *mTokenizer,
        -: 1860:                   const Token *tok,
        -: 1861:                   const Scope *scope,
        -: 1862:                   const Token *tokDef,
     1165: 1863:                   const Token *tokArgDef)
        -: 1864:    : tokenDef(tokDef),
        -: 1865:      argDef(tokArgDef),
        -: 1866:      token(nullptr),
        -: 1867:      arg(nullptr),
        -: 1868:      retDef(nullptr),
        -: 1869:      retType(nullptr),
        -: 1870:      functionScope(nullptr),
        -: 1871:      nestedIn(scope),
        -: 1872:      initArgCount(0),
        -: 1873:      type(eFunction),
        -: 1874:      access(AccessControl::Public),
        -: 1875:      noexceptArg(nullptr),
        -: 1876:      throwArg(nullptr),
        -: 1877:      templateDef(nullptr),
     1165: 1878:      mFlags(0)
call    0 returned 100%
call    1 never executed
        -: 1879:{
        -: 1880:    // operator function
     1165: 1881:    if (tokenDef->isOperatorKeyword()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        7: 1882:        isOperator(true);
call    0 returned 100%
        -: 1883:
        -: 1884:        // 'operator =' is special
        7: 1885:        if (tokenDef->str() == "operator=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        1: 1886:            type = Function::eOperatorEqual;
        -: 1887:    }
        -: 1888:
     1158: 1889:    else if (tokenDef->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        6: 1890:        type = Function::eLambda;
        -: 1891:    }
        -: 1892:
        -: 1893:    // class constructor/destructor
     1152: 1894:    else if (tokenDef->str() == scope->className) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -: 1895:        // destructor
       38: 1896:        if (tokenDef->previous()->str() == "~")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
        2: 1897:            type = Function::eDestructor;
        -: 1898:        // constructor of any kind
        -: 1899:        else
       36: 1900:            type = Function::eConstructor;
        -: 1901:
       38: 1902:        isExplicit(tokenDef->previous()->str() == "explicit");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -: 1903:    }
        -: 1904:
     1165: 1905:    const Token *tok1 = tok;
        -: 1906:
        -: 1907:    // look for end of previous statement
     3621: 1908:    while (tok1->previous() && !Token::Match(tok1->previous(), ";|}|{|public:|protected:|private:")) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 77% (fallthrough)
branch  8 taken 23%
branch  9 taken 52% (fallthrough)
branch 10 taken 48%
     1236: 1909:        tok1 = tok1->previous();
call    0 returned 100%
        -: 1910:
        -: 1911:        // extern function
     1236: 1912:        if (tok1->str() == "extern") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1913:            isExtern(true);
call    0 never executed
        -: 1914:        }
        -: 1915:
        -: 1916:        // virtual function
     1236: 1917:        else if (tok1->str() == "virtual") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        8: 1918:            hasVirtualSpecifier(true);
call    0 returned 100%
        -: 1919:        }
        -: 1920:
        -: 1921:        // static function
     1228: 1922:        else if (tok1->str() == "static") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 1923:            isStatic(true);
call    0 returned 100%
        2: 1924:            if (scope->type == Scope::eNamespace || scope->type == Scope::eGlobal)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 1925:                isStaticLocal(true);
call    0 returned 100%
        -: 1926:        }
        -: 1927:
        -: 1928:        // friend function
     1226: 1929:        else if (tok1->str() == "friend") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1930:            isFriend(true);
call    0 never executed
        -: 1931:        }
        -: 1932:
        -: 1933:        // Function template
     1226: 1934:        else if (tok1->link() && tok1->str() == ">" && Token::simpleMatch(tok1->link()->previous(), "template <")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 61% (fallthrough)
branch  6 taken 39%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 73% (fallthrough)
branch 13 taken 27%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        8: 1935:            templateDef = tok1->link()->previous();
call    0 returned 100%
call    1 returned 100%
        8: 1936:            break;
        -: 1937:        }
        -: 1938:    }
        -: 1939:
        -: 1940:    // find the return type
     1165: 1941:    if (!isConstructor() && !isDestructor() && !isLambda()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
branch  9 taken 96% (fallthrough)
branch 10 taken 4%
        -: 1942:        // @todo auto type deduction should be checked
        -: 1943:        // @todo attributes and exception specification can also precede trailing return type
     1121: 1944:        if (Token::Match(argDef->link()->next(), "const|volatile| &|&&| .")) { // Trailing return type
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1945:            hasTrailingReturnType(true);
call    0 never executed
    #####: 1946:            if (argDef->link()->strAt(1) == ".")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1947:                retDef = argDef->link()->tokAt(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1948:            else if (argDef->link()->strAt(2) == ".")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1949:                retDef = argDef->link()->tokAt(3);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1950:            else if (argDef->link()->strAt(3) == ".")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1951:                retDef = argDef->link()->tokAt(4);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1952:        } else {
     1121: 1953:            if (tok1->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        8: 1954:                tok1 = tok1->next();
call    0 returned 100%
     1143: 1955:            while (Token::Match(tok1, "extern|virtual|static|friend|struct|union|enum"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       11: 1956:                tok1 = tok1->next();
call    0 returned 100%
     1121: 1957:            retDef = tok1;
        -: 1958:        }
        -: 1959:    }
        -: 1960:
     1165: 1961:    const Token *end = argDef->link();
call    0 returned 100%
        -: 1962:
        -: 1963:    // parse function attributes..
     1165: 1964:    tok = end->next();
call    0 returned 100%
     1235: 1965:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1200: 1966:        if (tok->str() == "const")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       27: 1967:            isConst(true);
call    0 returned 100%
     1173: 1968:        else if (tok->str() == "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1969:            hasLvalRefQualifier(true);
call    0 never executed
     1173: 1970:        else if (tok->str() == "&&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1971:            hasRvalRefQualifier(true);
call    0 never executed
     1173: 1972:        else if (tok->str() == "override")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 1973:            setFlag(fHasOverrideSpecifier, true);
call    0 returned 100%
     1172: 1974:        else if (tok->str() == "final")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1975:            setFlag(fHasFinalSpecifier, true);
call    0 never executed
     1172: 1976:        else if (tok->str() == "volatile")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1977:            isVolatile(true);
call    0 never executed
     1172: 1978:        else if (tok->str() == "noexcept") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 1979:            isNoExcept(!Token::simpleMatch(tok->next(), "( false )"));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        1: 1980:            if (tok->next()->str() == "(")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1981:                tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
     1171: 1982:        } else if (Token::simpleMatch(tok, "throw (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 1983:            isThrow(true);
call    0 returned 100%
        2: 1984:            if (tok->strAt(2) != ")")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1985:                throwArg = tok->next();
call    0 never executed
        2: 1986:            tok = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1169: 1987:        } else if (Token::Match(tok, "= 0|default|delete ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        3: 1988:            const std::string& modifier = tok->strAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 1989:            isPure(modifier == "0");
call    0 returned 100%
call    1 returned 100%
        3: 1990:            isDefault(modifier == "default");
call    0 returned 100%
call    1 returned 100%
        3: 1991:            isDelete(modifier == "delete");
call    0 returned 100%
call    1 returned 100%
     1166: 1992:        } else if (tok->str() == ".") { // trailing return type
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 1993:            // skip over return type
        3: 1994:            while (tok && !Token::Match(tok->next(), ";|{|override|final"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
        1: 1995:                tok = tok->next();
call    0 returned 100%
        -: 1996:        } else
     1165: 1997:            break;
       35: 1998:        if (tok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       35: 1999:            tok = tok->next();
call    0 returned 100%
        -: 2000:    }
        -: 2001:
     1165: 2002:    if (mTokenizer->isFunctionHead(end, ":{")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 84% (fallthrough)
branch 10 taken 16%
call   11 never executed
call   12 never executed
        -: 2003:        // assume implementation is inline (definition and implementation same)
      981: 2004:        token = tokenDef;
      981: 2005:        arg = argDef;
      981: 2006:        isInline(true);
call    0 returned 100%
      981: 2007:        hasBody(true);
call    0 returned 100%
        -: 2008:    }
     1165: 2009:}
        -: 2010:
function _ZL13qualifiedNamePK5Scope called 0 returned 0% blocks executed 0%
    #####: 2011:static std::string qualifiedName(const Scope *scope)
        -: 2012:{
    #####: 2013:    std::string name = scope->className;
call    0 never executed
    #####: 2014:    while (scope->nestedIn) {
branch  0 never executed
branch  1 never executed
    #####: 2015:        if (!scope->nestedIn->className.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2016:            name = (scope->nestedIn->className + " :: ") + name;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2017:        scope = scope->nestedIn;
        -: 2018:    }
    #####: 2019:    return name;
        -: 2020:}
        -: 2021:
function _ZL14usingNamespacePK5ScopePK5TokenS4_Ri called 194 returned 100% blocks executed 11%
      194: 2022:static bool usingNamespace(const Scope *scope, const Token *first, const Token *second, int &offset)
        -: 2023:{
      194: 2024:    offset = 0;
      388: 2025:    std::string name = first->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -: 2026:
      194: 2027:    while (Token::Match(first, "%type% :: %type%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2028:        if (offset)
branch  0 never executed
branch  1 never executed
    #####: 2029:            name += (" :: " + first->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 2030:        offset += 2;
    #####: 2031:        first = first->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2032:        if (first->str() == second->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2033:            break;
        -: 2034:        }
        -: 2035:    }
        -: 2036:
      194: 2037:    if (offset) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2038:        while (scope) {
branch  0 never executed
branch  1 never executed
    #####: 2039:            for (const auto & info : scope->usingList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2040:                if (info.scope) {
branch  0 never executed
branch  1 never executed
    #####: 2041:                    if (name == qualifiedName(info.scope))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2042:                        return true;
        -: 2043:                }
        -: 2044:                // no scope so get name from using
        -: 2045:                else {
    #####: 2046:                    const Token *start = info.start->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2047:                    std::string nsName;
call    0 never executed
call    1 never executed
    #####: 2048:                    while (start && start->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2049:                        if (!nsName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2050:                            nsName += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2051:                        nsName += start->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2052:                        start = start->next();
call    0 never executed
        -: 2053:                    }
    #####: 2054:                    if (nsName == name)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2055:                        return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2056:                }
        -: 2057:            }
    #####: 2058:            scope = scope->nestedIn;
        -: 2059:        }
        -: 2060:    }
        -: 2061:
      194: 2062:    return false;
        -: 2063:}
        -: 2064:
function _ZN8Function9argsMatchEPK5ScopePK5TokenS5_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 125 returned 100% blocks executed 56%
      125: 2065:bool Function::argsMatch(const Scope *scope, const Token *first, const Token *second, const std::string &path, nonneg int path_length)
        -: 2066:{
      125: 2067:    const bool isCPP = scope->check->isCPP();
call    0 returned 100%
      125: 2068:    if (!isCPP) // C does not support overloads
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2069:        return true;
        -: 2070:
      125: 2071:    int arg_path_length = path_length;
      125: 2072:    int offset = 0;
        -: 2073:
      901: 2074:    while (first->str() == second->str() &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      684: 2075:           first->isLong() == second->isLong() &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
      342: 2076:           first->isUnsigned() == second->isUnsigned()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 2077:
        -: 2078:        // skip optional type information
      342: 2079:        if (Token::Match(first->next(), "struct|enum|union|class"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2080:            first = first->next();
call    0 never executed
      342: 2081:        if (Token::Match(second->next(), "struct|enum|union|class"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2082:            second = second->next();
call    0 never executed
        -: 2083:
        -: 2084:        // skip const on type passed by value
      342: 2085:        if (Token::Match(first->next(), "const %type% %name%|,|)") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2086:            !Token::Match(first->next(), "const %type% %name%| ["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2087:            first = first->next();
call    0 never executed
      342: 2088:        if (Token::Match(second->next(), "const %type% %name%|,|)") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2089:            !Token::Match(second->next(), "const %type% %name%| ["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2090:            second = second->next();
call    0 never executed
        -: 2091:
        -: 2092:        // at end of argument list
      342: 2093:        if (first->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
      124: 2094:            return true;
        -: 2095:        }
        -: 2096:
        -: 2097:        // skip default value assignment
      218: 2098:        else if (first->next()->str() == "=") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        5: 2099:            first = first->nextArgument();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 2100:            if (first)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4: 2101:                first = first->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 2102:            if (second->next()->str() == "=") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2103:                second = second->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2104:                if (second)
branch  0 never executed
branch  1 never executed
    #####: 2105:                    second = second->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2106:                if (!first || !second) { // End of argument list (first or second)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2107:                    return !first && !second;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2108:                }
        5: 2109:            } else if (!first) { // End of argument list (first)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1: 2110:                return !second->nextArgument(); // End of argument list (second)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2111:            }
      213: 2112:        } else if (second->next()->str() == "=") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2113:            second = second->nextArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2114:            if (second)
branch  0 never executed
branch  1 never executed
    #####: 2115:                second = second->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2116:            if (!second) { // End of argument list (second)
branch  0 never executed
branch  1 never executed
    #####: 2117:                return false;
        -: 2118:            }
        -: 2119:        }
        -: 2120:
        -: 2121:        // definition missing variable name
      426: 2122:        else if ((first->next()->str() == "," && second->next()->str() != ",") ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 85% (fallthrough)
branch  9 taken 15%
branch 10 taken 55% (fallthrough)
branch 11 taken 45%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
      327: 2123:                 (first->next()->str() == ")" && second->next()->str() != ")")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        2: 2124:            second = second->next();
call    0 returned 100%
        -: 2125:            // skip default value assignment
        2: 2126:            if (second->next()->str() == "=") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2127:                do {
    #####: 2128:                    second = second->next();
call    0 never executed
    #####: 2129:                } while (!Token::Match(second->next(), ",|)"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2130:            }
      211: 2131:        } else if (first->next()->str() == "[" && second->next()->str() != "[")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2132:            second = second->next();
call    0 never executed
        -: 2133:
        -: 2134:        // function missing variable name
      422: 2135:        else if ((second->next()->str() == "," && first->next()->str() != ",") ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 55% (fallthrough)
branch 11 taken 45%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
      327: 2136:                 (second->next()->str() == ")" && first->next()->str() != ")")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2137:            first = first->next();
call    0 never executed
        -: 2138:            // skip default value assignment
    #####: 2139:            if (first->next()->str() == "=") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2140:                do {
    #####: 2141:                    first = first->next();
call    0 never executed
    #####: 2142:                } while (!Token::Match(first->next(), ",|)"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2143:            }
      211: 2144:        } else if (second->next()->str() == "[" && first->next()->str() != "[")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2145:            first = first->next();
call    0 never executed
        -: 2146:
        -: 2147:        // argument list has different number of arguments
      211: 2148:        else if (second->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2149:            break;
        -: 2150:
        -: 2151:        // ckeck for type * x == type x[]
      211: 2152:        else if (Token::Match(first->next(), "* %name%| ,|)|=") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2153:                 Token::Match(second->next(), "%name%| [ ] ,|)")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2154:            do {
    #####: 2155:                first = first->next();
call    0 never executed
    #####: 2156:            } while (!Token::Match(first->next(), ",|)"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2157:            do {
    #####: 2158:                second = second->next();
call    0 never executed
    #####: 2159:            } while (!Token::Match(second->next(), ",|)"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2160:        }
        -: 2161:
        -: 2162:        // const after *
      422: 2163:        else if (first->next()->str() == "*" && first->strAt(2) != "const" &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
      211: 2164:                 second->next()->str() == "*" && second->strAt(2) == "const") {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2165:            first = first->next();
call    0 never executed
    #####: 2166:            second = second->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2167:        }
        -: 2168:
        -: 2169:        // variable names are different
      465: 2170:        else if ((Token::Match(first->next(), "%name% ,|)|=|[") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 95% (fallthrough)
branch  5 taken 5%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
      252: 2171:                  Token::Match(second->next(), "%name% ,|)|[")) &&
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 41% (fallthrough)
branch  7 taken 59%
       41: 2172:                 (first->next()->str() != second->next()->str())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -: 2173:            // skip variable names
       17: 2174:            first = first->next();
call    0 returned 100%
       17: 2175:            second = second->next();
call    0 returned 100%
        -: 2176:
        -: 2177:            // skip default value assignment
       17: 2178:            if (first->next()->str() == "=") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 35% (fallthrough)
branch  4 taken 65%
        6: 2179:                do {
       12: 2180:                    first = first->next();
call    0 returned 100%
       12: 2181:                } while (!Token::Match(first->next(), ",|)"));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        -: 2182:            }
        -: 2183:        }
        -: 2184:
        -: 2185:        // using namespace
      194: 2186:        else if (usingNamespace(scope, first->next(), second->next(), offset))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2187:            first = first->tokAt(offset);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2188:
        -: 2189:        // variable with class path
      194: 2190:        else if (arg_path_length && Token::Match(first->next(), "%name%") && first->strAt(1) != "const") {
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 73% (fallthrough)
branch  7 taken 27%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 21% (fallthrough)
branch 15 taken 79%
       80: 2191:            std::string param = path;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 2192:
       40: 2193:            if (Token::simpleMatch(second->next(), param.c_str())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2194:                second = second->tokAt(int(arg_path_length));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2195:                arg_path_length = 0;
        -: 2196:            }
        -: 2197:
        -: 2198:            // nested or base class variable
      120: 2199:            else if (arg_path_length <= 2 && Token::Match(first->next(), "%name%") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
       80: 2200:                     (Token::Match(second->next(), "%name% :: %name%") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       40: 2201:                      (Token::Match(second->next(), "%name% <") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 never executed
branch  5 never executed
    #####: 2202:                       Token::Match(second->linkAt(1), "> :: %name%"))) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2203:                     ((second->next()->str() == scope->className) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       40: 2204:                      (scope->definedType && scope->definedType->isDerivedFrom(second->next()->str()))) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2205:                     (first->next()->str() == second->strAt(3))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2206:                if (Token::Match(second->next(), "%name% <"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2207:                    second = second->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 2208:                else
    #####: 2209:                    second = second->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2210:            }
        -: 2211:
        -: 2212:            // remove class name
       40: 2213:            else if (arg_path_length > 2 && first->strAt(1) != second->strAt(1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 2214:                std::string short_path = path;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2215:                unsigned int short_path_length = arg_path_length;
        -: 2216:
        -: 2217:                // remove last " :: "
    #####: 2218:                short_path.resize(short_path.size() - 4);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2219:                short_path_length--;
        -: 2220:
        -: 2221:                // remove last name
    #####: 2222:                std::string::size_type lastSpace = short_path.find_last_of(' ');
call    0 never executed
    #####: 2223:                if (lastSpace != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 2224:                    short_path.resize(lastSpace+1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2225:                    short_path_length--;
    #####: 2226:                    if (short_path[short_path.size() - 1] == '>') {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2227:                        short_path.resize(short_path.size() - 3);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2228:                        while (short_path[short_path.size() - 1] == '<') {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2229:                            lastSpace = short_path.find_last_of(' ');
call    0 never executed
    #####: 2230:                            short_path.resize(lastSpace+1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2231:                            short_path_length--;
        -: 2232:                        }
        -: 2233:                    }
        -: 2234:                }
        -: 2235:
    #####: 2236:                param = short_path;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2237:                if (Token::simpleMatch(second->next(), param.c_str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2238:                    second = second->tokAt(int(short_path_length));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2239:                    arg_path_length = 0;
        -: 2240:                }
        -: 2241:            }
        -: 2242:        }
        -: 2243:
      217: 2244:        first = first->next();
call    0 returned 100%
      217: 2245:        second = second->next();
call    0 returned 100%
        -: 2246:
        -: 2247:        // reset path length
      217: 2248:        if (first->str() == "," || second->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 12% (fallthrough)
branch  9 taken 88%
       26: 2249:            arg_path_length = path_length;
        -: 2250:    }
        -: 2251:
    #####: 2252:    return false;
        -: 2253:}
        -: 2254:
function _ZN8Function16returnsReferenceEPKS_b called 291 returned 100% blocks executed 88%
      291: 2255:bool Function::returnsReference(const Function* function, bool unknown)
        -: 2256:{
      291: 2257:    if (!function)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2258:        return false;
      291: 2259:    if (function->type != Function::eFunction)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       43: 2260:        return false;
      248: 2261:    const Token* defEnd = function->returnDefEnd();
call    0 returned 100%
      248: 2262:    if (defEnd->strAt(-1) == "&")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       28: 2263:        return true;
        -: 2264:    // Check for unknown types, which could be a reference
      220: 2265:    const Token* start = function->retDef;
      220: 2266:    while (Token::Match(start, "const|volatile"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2267:        start = start->next();
call    0 never executed
      220: 2268:    if (start->tokAt(1) == defEnd && !start->type() && !start->isStandardType())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
branch  7 taken 4% (fallthrough)
branch  8 taken 96%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
        8: 2269:        return unknown;
      212: 2270:    return false;
        -: 2271:}
        -: 2272:
function _ZNK8Function31constructorMemberInitializationEv called 2171 returned 100% blocks executed 100%
     2171: 2273:const Token * Function::constructorMemberInitialization() const
        -: 2274:{
     2171: 2275:    if (!isConstructor() || !functionScope || !functionScope->bodyStart)
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 97% (fallthrough)
branch  8 taken 3%
     2110: 2276:        return nullptr;
       61: 2277:    if (Token::Match(token, "%name% (") && Token::simpleMatch(token->linkAt(1), ") :"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 48% (fallthrough)
branch  6 taken 52%
branch  7 taken 48% (fallthrough)
branch  8 taken 52%
       29: 2278:        return token->linkAt(1)->next();
call    0 returned 100%
call    1 returned 100%
       32: 2279:    return nullptr;
        -: 2280:}
        -: 2281:
function _ZNK8Function6isSafeEPK8Settings called 1254 returned 100% blocks executed 12%
     1254: 2282:bool Function::isSafe(const Settings *settings) const
        -: 2283:{
     1254: 2284:    if (settings->safeChecks.externalFunctions) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2285:        if (nestedIn->type == Scope::ScopeType::eNamespace && token->fileIndex() != 0)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2286:            return true;
    #####: 2287:        if (nestedIn->type == Scope::ScopeType::eGlobal && (token->fileIndex() != 0 || !isStatic()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2288:            return true;
        -: 2289:    }
        -: 2290:
     1254: 2291:    if (settings->safeChecks.internalFunctions) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2292:        if (nestedIn->type == Scope::ScopeType::eNamespace && token->fileIndex() == 0)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2293:            return true;
    #####: 2294:        if (nestedIn->type == Scope::ScopeType::eGlobal && (token->fileIndex() == 0 || isStatic()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2295:            return true;
        -: 2296:    }
        -: 2297:
     1254: 2298:    if (settings->safeChecks.classes && access == AccessControl::Public && (nestedIn->type == Scope::ScopeType::eClass || nestedIn->type == Scope::ScopeType::eStruct))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2299:        return true;
        -: 2300:
     1254: 2301:    return false;
        -: 2302:}
        -: 2303:
function _ZN14SymbolDatabase17addGlobalFunctionERP5ScopeRPK5TokenS5_S5_ called 943 returned 100% blocks executed 93%
      943: 2304:Function* SymbolDatabase::addGlobalFunction(Scope*& scope, const Token*& tok, const Token *argStart, const Token* funcStart)
        -: 2305:{
      943: 2306:    Function* function = nullptr;
        -: 2307:    // Lambda functions are always unique
      943: 2308:    if (tok->str() != "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
      940: 2309:        for (std::multimap<std::string, const Function *>::iterator i = scope->functionMap.find(tok->str()); i != scope->functionMap.end() && i->first == tok->str(); ++i) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 2% (fallthrough)
branch 17 taken 98%
call   18 returned 100%
call   19 returned 100%
call   20 never executed
       15: 2310:            const Function *f = i->second;
call    0 returned 100%
       15: 2311:            if (f->hasBody())
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        3: 2312:                continue;
       12: 2313:            if (Function::argsMatch(scope, f->argDef, argStart, emptyString, 0)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       12: 2314:                function = const_cast<Function *>(i->second);
call    0 returned 100%
       12: 2315:                break;
        -: 2316:            }
        -: 2317:        }
        -: 2318:    }
        -: 2319:
      943: 2320:    if (!function)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      931: 2321:        function = addGlobalFunctionDecl(scope, tok, argStart, funcStart);
call    0 returned 100%
        -: 2322:
      943: 2323:    function->arg = argStart;
      943: 2324:    function->token = funcStart;
      943: 2325:    function->hasBody(true);
call    0 returned 100%
        -: 2326:
      943: 2327:    addNewFunction(&scope, &tok);
call    0 returned 100%
        -: 2328:
      943: 2329:    if (scope) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      943: 2330:        scope->function = function;
      943: 2331:        function->functionScope = scope;
      943: 2332:        return function;
        -: 2333:    }
    #####: 2334:    return nullptr;
        -: 2335:}
        -: 2336:
function _ZN14SymbolDatabase21addGlobalFunctionDeclERP5ScopePK5TokenS5_S5_ called 1051 returned 100% blocks executed 78%
     1051: 2337:Function* SymbolDatabase::addGlobalFunctionDecl(Scope*& scope, const Token *tok, const Token *argStart, const Token* funcStart)
        -: 2338:{
     2102: 2339:    Function function(mTokenizer, tok, scope, funcStart, argStart);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     1051: 2340:    scope->addFunction(function);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2102: 2341:    return &scope->functionList.back();
call    0 returned 100%
        -: 2342:}
        -: 2343:
function _ZN14SymbolDatabase16addClassFunctionEPP5ScopePPK5TokenS5_ called 20 returned 100% blocks executed 62%
       20: 2344:void SymbolDatabase::addClassFunction(Scope **scope, const Token **tok, const Token *argStart)
        -: 2345:{
       20: 2346:    const bool destructor((*tok)->previous()->str() == "~");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       20: 2347:    const bool has_const(argStart->link()->strAt(1) == "const");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
       20: 2348:    const bool lval(argStart->link()->strAt(has_const ? 2 : 1) == "&");
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
       20: 2349:    const bool rval(argStart->link()->strAt(has_const ? 2 : 1) == "&&");
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
       20: 2350:    int count = 0;
       24: 2351:    std::string path;
call    0 returned 100%
call    1 never executed
       20: 2352:    unsigned int path_length = 0;
       20: 2353:    const Token *tok1 = (*tok);
        -: 2354:
       20: 2355:    if (destructor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2356:        tok1 = tok1->previous();
call    0 never executed
        -: 2357:
        -: 2358:    // back up to head of path
      100: 2359:    while (tok1 && tok1->previous() && tok1->previous()->str() == "::" && tok1->tokAt(-2) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 taken 50% (fallthrough)
branch 18 taken 50%
       20: 2360:           (tok1->tokAt(-2)->isName() ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 never executed
branch  7 never executed
    #####: 2361:            (tok1->strAt(-2) == ">" && tok1->linkAt(-2) && Token::Match(tok1->linkAt(-2)->previous(), "%name%")))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
       20: 2362:        count++;
       20: 2363:        const Token * tok2 = tok1->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20: 2364:        if (tok2->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2365:            tok2 = tok2->link()->previous();
call    0 never executed
call    1 never executed
        -: 2366:
       20: 2367:        if (tok2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       20: 2368:            do {
       40: 2369:                path = tok1->previous()->str() + " " + path;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
       40: 2370:                tok1 = tok1->previous();
call    0 returned 100%
       40: 2371:                path_length++;
       40: 2372:            } while (tok1 != tok2);
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 2373:        } else
    #####: 2374:            return; // syntax error ?
        -: 2375:    }
        -: 2376:
        -: 2377:    // syntax error?
       20: 2378:    if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2379:        return;
        -: 2380:
       24: 2381:    std::list<Scope>::iterator it1;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 20%
branch  3 taken 80%
call    4 never executed
        -: 2382:
        -: 2383:    // search for match
       62: 2384:    for (it1 = scopeList.begin(); it1 != scopeList.end(); ++it1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
call    8 returned 100%
       58: 2385:        Scope *scope1 = &(*it1);
call    0 returned 100%
        -: 2386:
       58: 2387:        bool match = false;
        -: 2388:
        -: 2389:        // check in namespace if using found
       58: 2390:        if (*scope == scope1 && !scope1->usingList.empty()) {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2391:            std::list<Scope::UsingInfo>::const_iterator it2;
call    0 never executed
call    1 never executed
    #####: 2392:            for (it2 = scope1->usingList.begin(); it2 != scope1->usingList.end(); ++it2) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2393:                if (it2->scope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2394:                    Function * func = findFunctionInScope(tok1, it2->scope, path, path_length);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2395:                    if (func) {
branch  0 never executed
branch  1 never executed
    #####: 2396:                        if (!func->hasBody()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2397:                            const Token *closeParen = (*tok)->next()->link();
call    0 never executed
call    1 never executed
    #####: 2398:                            if (closeParen) {
branch  0 never executed
branch  1 never executed
    #####: 2399:                                if (Token::simpleMatch(closeParen, ") = default ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2400:                                    func->isDefault(true);
call    0 never executed
    #####: 2401:                                    return;
        -: 2402:                                }
        -: 2403:                            }
    #####: 2404:                            func->hasBody(true);
call    0 never executed
    #####: 2405:                            func->token = *tok;
    #####: 2406:                            func->arg = argStart;
    #####: 2407:                            addNewFunction(scope, tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2408:                            if (*scope) {
branch  0 never executed
branch  1 never executed
    #####: 2409:                                (*scope)->functionOf = func->nestedIn;
    #####: 2410:                                (*scope)->function = func;
    #####: 2411:                                (*scope)->function->functionScope = *scope;
        -: 2412:                            }
    #####: 2413:                            return;
        -: 2414:                        }
        -: 2415:                    }
        -: 2416:                }
        -: 2417:            }
        -: 2418:        }
        -: 2419:
       58: 2420:        if (scope1->className == tok1->str() && (scope1->type != Scope::eFunction)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 28% (fallthrough)
branch  3 taken 72%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 28% (fallthrough)
branch  7 taken 72%
        -: 2421:            // do the scopes match (same scope) or do their names match (multiple namespaces)
       32: 2422:            if ((*scope == scope1->nestedIn) || (*scope &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
    #####: 2423:                                                 (*scope)->className == scope1->nestedIn->className &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2424:                                                 !(*scope)->className.empty() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2425:                                                 (*scope)->type == scope1->nestedIn->type)) {
        -: 2426:
        -: 2427:                // nested scopes => check that they match
        -: 2428:                {
       16: 2429:                    const Scope *s1 = *scope;
       16: 2430:                    const Scope *s2 = scope1->nestedIn;
       48: 2431:                    while (s1 && s2) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       16: 2432:                        if (s1->className != s2->className)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2433:                            break;
       16: 2434:                        s1 = s1->nestedIn;
       16: 2435:                        s2 = s2->nestedIn;
        -: 2436:                    }
        -: 2437:                    // Not matching scopes
       16: 2438:                    if (s1 || s2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2439:                        continue;
        -: 2440:                }
        -: 2441:
       16: 2442:                Scope *scope2 = scope1;
        -: 2443:
       16: 2444:                while (scope2 && count > 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2445:                    count--;
    #####: 2446:                    if (tok1->strAt(1) == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2447:                        tok1 = tok1->linkAt(1)->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2448:                    else
    #####: 2449:                        tok1 = tok1->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2450:                    scope2 = scope2->findRecordInNestedList(tok1->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2451:                }
        -: 2452:
       16: 2453:                if (count == 1 && scope2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       16: 2454:                    match = true;
       16: 2455:                    scope1 = scope2;
        -: 2456:                }
        -: 2457:            }
        -: 2458:        }
        -: 2459:
       58: 2460:        if (match) {
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       16: 2461:            for (std::multimap<std::string, const Function *>::iterator it = scope1->functionMap.find((*tok)->str()); it != scope1->functionMap.end() && it->first == (*tok)->str(); ++it) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 never executed
call   19 returned 100%
branch 20 taken 0%
branch 21 taken 100%
call   22 never executed
       16: 2462:                Function * func = const_cast<Function *>(it->second);
call    0 returned 100%
       16: 2463:                if (!func->hasBody()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       16: 2464:                    if (Function::argsMatch(scope1, func->argDef, (*tok)->next(), path, path_length)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       16: 2465:                        if (func->type == Function::eDestructor && destructor) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 2466:                            func->hasBody(true);
call    0 never executed
       16: 2467:                        } else if (func->type != Function::eDestructor && !destructor) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 2468:                            // normal function?
       16: 2469:                            const Token *closeParen = (*tok)->next()->link();
call    0 returned 100%
call    1 returned 100%
       16: 2470:                            if (closeParen) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16: 2471:                                if (Token::simpleMatch(closeParen, ") = default ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2472:                                    func->isDefault(true);
call    0 never executed
    #####: 2473:                                    return;
        -: 2474:                                }
        -: 2475:
       16: 2476:                                const bool hasConstKeyword = closeParen->next()->str() == "const";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       48: 2477:                                if ((func->isConst() == hasConstKeyword) &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       32: 2478:                                    (func->hasLvalRefQualifier() == lval) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       16: 2479:                                    (func->hasRvalRefQualifier() == rval)) {
call    0 returned 100%
       16: 2480:                                    func->hasBody(true);
call    0 returned 100%
        -: 2481:                                }
        -: 2482:                            }
        -: 2483:                        }
        -: 2484:
       16: 2485:                        if (func->hasBody()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       16: 2486:                            func->token = *tok;
       16: 2487:                            func->arg = argStart;
       16: 2488:                            addNewFunction(scope, tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16: 2489:                            if (*scope) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16: 2490:                                (*scope)->functionOf = scope1;
       16: 2491:                                (*scope)->function = func;
       16: 2492:                                (*scope)->function->functionScope = *scope;
        -: 2493:                            }
       16: 2494:                            return;
        -: 2495:                        }
        -: 2496:                    }
        -: 2497:                }
        -: 2498:            }
        -: 2499:        }
        -: 2500:    }
        -: 2501:
        -: 2502:    // class function of unknown class
        4: 2503:    addNewFunction(scope, tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 20%
branch  5 taken 80%
        -: 2504:}
        -: 2505:
function _ZN14SymbolDatabase14addNewFunctionEPP5ScopePPK5Token called 1013 returned 100% blocks executed 84%
     1013: 2506:void SymbolDatabase::addNewFunction(Scope **scope, const Token **tok)
        -: 2507:{
     1013: 2508:    const Token *tok1 = *tok;
     1013: 2509:    scopeList.emplace_back(this, tok1, *scope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1013: 2510:    Scope *newScope = &scopeList.back();
call    0 returned 100%
        -: 2511:
        -: 2512:    // find start of function '{'
     1013: 2513:    bool foundInitList = false;
     7299: 2514:    while (tok1 && tok1->str() != "{" && tok1->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 76% (fallthrough)
branch  5 taken 24%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 76% (fallthrough)
branch 11 taken 24%
     3143: 2515:        if (tok1->link() && Token::Match(tok1, "(|<")) {
call    0 returned 100%
branch  1 taken 66% (fallthrough)
branch  2 taken 34%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 33% (fallthrough)
branch  9 taken 67%
     1030: 2516:            tok1 = tok1->link();
call    0 returned 100%
     2161: 2517:        } else if (foundInitList &&
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2119: 2518:                   Token::Match(tok1, "%name%|> {") &&
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        6: 2519:                   Token::Match(tok1->linkAt(1), "} ,|{")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        6: 2520:            tok1 = tok1->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2521:        } else {
     2107: 2522:            if (tok1->str() == ":")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       15: 2523:                foundInitList = true;
     2107: 2524:            tok1 = tok1->next();
call    0 returned 100%
        -: 2525:        }
        -: 2526:    }
        -: 2527:
     1013: 2528:    if (tok1 && tok1->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
     1013: 2529:        newScope->bodyStart = tok1;
     1013: 2530:        newScope->bodyEnd = tok1->link();
call    0 returned 100%
        -: 2531:
        -: 2532:        // syntax error?
     1013: 2533:        if (!newScope->bodyEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2534:            scopeList.pop_back();
call    0 never executed
    #####: 2535:            while (tok1->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2536:                tok1 = tok1->next();
call    0 never executed
    #####: 2537:            *scope = nullptr;
    #####: 2538:            *tok = tok1;
    #####: 2539:            return;
        -: 2540:        }
        -: 2541:
     1013: 2542:        (*scope)->nestedList.push_back(newScope);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1013: 2543:        *scope = newScope;
     1013: 2544:        *tok = tok1;
        -: 2545:    } else {
    #####: 2546:        scopeList.pop_back();
call    0 never executed
    #####: 2547:        *scope = nullptr;
    #####: 2548:        *tok = nullptr;
        -: 2549:    }
        -: 2550:}
        -: 2551:
function _ZN4Type12initBaseInfoEPK5TokenS2_ called 162 returned 100% blocks executed 74%
      162: 2552:const Token *Type::initBaseInfo(const Token *tok, const Token *tok1)
        -: 2553:{
        -: 2554:    // goto initial '{'
      162: 2555:    const Token *tok2 = tok1;
      180: 2556:    while (tok2 && tok2->str() != "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
        -: 2557:        // skip unsupported templates
        9: 2558:        if (tok2->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2559:            tok2 = tok2->link();
call    0 never executed
        -: 2560:
        -: 2561:        // check for base classes
        9: 2562:        else if (Token::Match(tok2, ":|,")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        9: 2563:            tok2 = tok2->next();
call    0 returned 100%
        -: 2564:
        -: 2565:            // check for invalid code
        9: 2566:            if (!tok2 || !tok2->next())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2567:                return nullptr;
        -: 2568:
       18: 2569:            Type::BaseInfo base;
call    0 returned 100%
call    1 never executed
        -: 2570:
        9: 2571:            if (tok2->str() == "virtual") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2572:                base.isVirtual = true;
    #####: 2573:                tok2 = tok2->next();
call    0 never executed
        -: 2574:            }
        -: 2575:
        9: 2576:            if (tok2->str() == "public") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        6: 2577:                base.access = AccessControl::Public;
        6: 2578:                tok2 = tok2->next();
call    0 returned 100%
        3: 2579:            } else if (tok2->str() == "protected") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2580:                base.access = AccessControl::Protected;
    #####: 2581:                tok2 = tok2->next();
call    0 never executed
        3: 2582:            } else if (tok2->str() == "private") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2583:                base.access = AccessControl::Private;
    #####: 2584:                tok2 = tok2->next();
call    0 never executed
        -: 2585:            } else {
        3: 2586:                if (tok->str() == "class")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        2: 2587:                    base.access = AccessControl::Private;
        1: 2588:                else if (tok->str() == "struct")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 2589:                    base.access = AccessControl::Public;
        -: 2590:            }
        9: 2591:            if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2592:                return nullptr;
        9: 2593:            if (tok2->str() == "virtual") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2594:                base.isVirtual = true;
    #####: 2595:                tok2 = tok2->next();
call    0 never executed
        -: 2596:            }
        9: 2597:            if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2598:                return nullptr;
        -: 2599:
        9: 2600:            base.nameTok = tok2;
        -: 2601:            // handle global namespace
        9: 2602:            if (tok2->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2603:                tok2 = tok2->next();
call    0 never executed
        -: 2604:            }
        -: 2605:
        -: 2606:            // handle derived base classes
        9: 2607:            while (Token::Match(tok2, "%name% ::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2608:                tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2609:            }
        9: 2610:            if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2611:                return nullptr;
        -: 2612:
        9: 2613:            base.name = tok2->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2614:
        9: 2615:            tok2 = tok2->next();
call    0 returned 100%
        -: 2616:            // add unhandled templates
        9: 2617:            if (tok2 && tok2->link() && tok2->str() == "<") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 2618:                for (const Token* const end = tok2->link()->next(); tok2 != end; tok2 = tok2->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 2619:                    base.name += tok2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2620:                }
        -: 2621:            }
        -: 2622:
        -: 2623:            // save pattern for base class name
        9: 2624:            derivedFrom.push_back(base);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -: 2625:        } else
    #####: 2626:            tok2 = tok2->next();
call    0 never executed
        -: 2627:    }
        -: 2628:
      162: 2629:    return tok2;
        -: 2630:}
        -: 2631:
function _ZNK4Type4nameB5cxx11Ev called 418 returned 100% blocks executed 60%
      418: 2632:const std::string& Type::name() const
        -: 2633:{
      418: 2634:    const Token* next = classDef->next();
call    0 returned 100%
      418: 2635:    if (classScope && classScope->enumClass && isEnumType())
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2636:        return next->strAt(1);
call    0 never executed
      418: 2637:    else if (next->str() == "class")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2638:        return next->strAt(1);
call    0 never executed
      418: 2639:    else if (next->isName())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      418: 2640:        return next->str();
call    0 returned 100%
    #####: 2641:    return emptyString;
        -: 2642:}
        -: 2643:
function _ZNK14SymbolDatabase12debugMessageEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 13%
        1: 2644:void SymbolDatabase::debugMessage(const Token *tok, const std::string &msg) const
        -: 2645:{
        1: 2646:    if (tok && mSettings->debugwarnings) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2647:        const std::list<const Token*> locationList(1, tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2648:        const ErrorLogger::ErrorMessage errmsg(locationList, &mTokenizer->list,
        -: 2649:                                               Severity::debug,
        -: 2650:                                               "debug",
        -: 2651:                                               msg,
    #####: 2652:                                               false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2653:        if (mErrorLogger)
branch  0 never executed
branch  1 never executed
    #####: 2654:            mErrorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2655:    }
        1: 2656:}
call    0 never executed
        -: 2657:
function _ZNK4Type11getFunctionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2658:const Function* Type::getFunction(const std::string& funcName) const
        -: 2659:{
    #####: 2660:    if (classScope) {
branch  0 never executed
branch  1 never executed
    #####: 2661:        const std::multimap<std::string, const Function *>::const_iterator it = classScope->functionMap.find(funcName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2662:
    #####: 2663:        if (it != classScope->functionMap.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2664:            return it->second;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2665:    }
        -: 2666:
    #####: 2667:    for (const Type::BaseInfo & i : derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2668:        if (i.type) {
branch  0 never executed
branch  1 never executed
    #####: 2669:            const Function* const func = i.type->getFunction(funcName);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2670:            if (func)
branch  0 never executed
branch  1 never executed
    #####: 2671:                return func;
        -: 2672:        }
        -: 2673:    }
    #####: 2674:    return nullptr;
call    0 never executed
        -: 2675:}
        -: 2676:
function _ZNK4Type23hasCircularDependenciesEPNSt7__debug3setINS_8BaseInfoESt4lessIS2_ESaIS2_EEE called 0 returned 0% blocks executed 0%
    #####: 2677:bool Type::hasCircularDependencies(std::set<BaseInfo>* ancestors) const
        -: 2678:{
    #####: 2679:    std::set<BaseInfo> knownAncestors;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2680:    if (!ancestors) {
branch  0 never executed
branch  1 never executed
    #####: 2681:        ancestors=&knownAncestors;
        -: 2682:    }
    #####: 2683:    for (std::vector<BaseInfo>::const_iterator parent=derivedFrom.begin(); parent!=derivedFrom.end(); ++parent) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2684:        if (!parent->type)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2685:            continue;
    #####: 2686:        else if (this==parent->type)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2687:            return true;
    #####: 2688:        else if (ancestors->find(*parent)!=ancestors->end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2689:            return true;
        -: 2690:        else {
    #####: 2691:            ancestors->insert(*parent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 2692:            if (parent->type->hasCircularDependencies(ancestors))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2693:                return true;
        -: 2694:        }
        -: 2695:    }
    #####: 2696:    return false;
        -: 2697:}
        -: 2698:
function _ZNK4Type14findDependencyEPKS_ called 4 returned 100% blocks executed 48%
        4: 2699:bool Type::findDependency(const Type* ancestor) const
        -: 2700:{
        4: 2701:    if (this==ancestor)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2702:        return true;
        4: 2703:    for (std::vector<BaseInfo>::const_iterator parent=derivedFrom.begin(); parent!=derivedFrom.end(); ++parent) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 never executed
    #####: 2704:        if (parent->type && parent->type->findDependency(ancestor))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2705:            return true;
        -: 2706:    }
        4: 2707:    return false;
        -: 2708:}
        -: 2709:
function _ZNK4Type13isDerivedFromERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2710:bool Type::isDerivedFrom(const std::string & ancestor) const
        -: 2711:{
    #####: 2712:    for (std::vector<BaseInfo>::const_iterator parent=derivedFrom.begin(); parent!=derivedFrom.end(); ++parent) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2713:        if (parent->name == ancestor)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2714:            return true;
    #####: 2715:        if (parent->type && parent->type->isDerivedFrom(ancestor))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2716:            return true;
        -: 2717:    }
    #####: 2718:    return false;
        -: 2719:}
        -: 2720:
function _ZN8Variable15arrayDimensionsEPK8Settings called 1496 returned 100% blocks executed 47%
     1496: 2721:bool Variable::arrayDimensions(const Settings* settings)
        -: 2722:{
     1496: 2723:    const Library::Container* container = settings->library.detectContainer(mTypeStartToken);
call    0 returned 100%
     1496: 2724:    if (container && container->arrayLike_indexOp && container->size_templateArgNo > 0) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2725:        const Token* tok = Token::findsimplematch(mTypeStartToken, "<");
call    0 never executed
    #####: 2726:        if (tok) {
branch  0 never executed
branch  1 never executed
    #####: 2727:            Dimension dimension_;
call    0 never executed
    #####: 2728:            tok = tok->next();
call    0 never executed
    #####: 2729:            for (int i = 0; i < container->size_templateArgNo && tok; i++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2730:                tok = tok->nextTemplateArgument();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2731:            }
    #####: 2732:            if (tok) {
branch  0 never executed
branch  1 never executed
    #####: 2733:                while (!tok->astParent() && !Token::Match(tok->next(), "[,<>]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2734:                    tok = tok->next();
call    0 never executed
    #####: 2735:                while (tok->astParent() && !Token::Match(tok->astParent(), "[,<>]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2736:                    tok = tok->astParent();
call    0 never executed
    #####: 2737:                dimension_.tok = tok;
    #####: 2738:                ValueFlow::valueFlowConstantFoldAST(const_cast<Token *>(dimension_.tok), settings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2739:                if (tok->hasKnownIntValue()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2740:                    dimension_.num = tok->getKnownIntValue();
call    0 never executed
    #####: 2741:                    dimension_.known = true;
        -: 2742:                }
        -: 2743:            }
    #####: 2744:            mDimensions.push_back(dimension_);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2745:            return true;
        -: 2746:        }
        -: 2747:    }
        -: 2748:
     1496: 2749:    const Token *dim = mNameToken;
     1496: 2750:    if (!dim) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2751:        // Argument without name
    #####: 2752:        dim = mTypeEndToken;
        -: 2753:        // back up to start of array dimensions
    #####: 2754:        while (dim && dim->str() == "]")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2755:            dim = dim->link()->previous();
call    0 never executed
call    1 never executed
        -: 2756:    }
     1496: 2757:    if (dim)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1496: 2758:        dim = dim->next();
call    0 returned 100%
     1496: 2759:    if (dim && dim->str() == ")")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 37% (fallthrough)
branch  5 taken 63%
branch  6 taken 37% (fallthrough)
branch  7 taken 63%
      557: 2760:        dim = dim->next();
call    0 returned 100%
        -: 2761:
     1496: 2762:    bool arr = false;
     1592: 2763:    while (dim && dim->next() && dim->str() == "[") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 3% (fallthrough)
branch  8 taken 97%
branch  9 taken 3% (fallthrough)
branch 10 taken 97%
       48: 2764:        Dimension dimension_;
call    0 returned 100%
       48: 2765:        dimension_.known = false;
        -: 2766:        // check for empty array dimension []
       48: 2767:        if (dim->next()->str() != "]") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
       47: 2768:            dimension_.tok = dim->astOperand2();
call    0 returned 100%
       47: 2769:            ValueFlow::valueFlowConstantFoldAST(const_cast<Token *>(dimension_.tok), settings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       47: 2770:            if (dimension_.tok && dimension_.tok->hasKnownIntValue()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
       47: 2771:                dimension_.num = dimension_.tok->getKnownIntValue();
call    0 returned 100%
       47: 2772:                dimension_.known = true;
        -: 2773:            }
        -: 2774:        }
       48: 2775:        mDimensions.push_back(dimension_);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       48: 2776:        dim = dim->link()->next();
call    0 returned 100%
call    1 returned 100%
       48: 2777:        arr = true;
        -: 2778:    }
     1496: 2779:    return arr;
call    0 never executed
        -: 2780:}
        -: 2781:
function _ZlsRSoN5Scope9ScopeTypeE called 0 returned 0% blocks executed 0%
    #####: 2782:static std::ostream & operator << (std::ostream & s, Scope::ScopeType type)
        -: 2783:{
    #####: 2784:    s << (type == Scope::eGlobal ? "Global" :
call    0 never executed
    #####: 2785:          type == Scope::eClass ? "Class" :
branch  0 never executed
branch  1 never executed
    #####: 2786:          type == Scope::eStruct ? "Struct" :
branch  0 never executed
branch  1 never executed
    #####: 2787:          type == Scope::eUnion ? "Union" :
branch  0 never executed
branch  1 never executed
    #####: 2788:          type == Scope::eNamespace ? "Namespace" :
branch  0 never executed
branch  1 never executed
    #####: 2789:          type == Scope::eFunction ? "Function" :
branch  0 never executed
branch  1 never executed
    #####: 2790:          type == Scope::eIf ? "If" :
branch  0 never executed
branch  1 never executed
    #####: 2791:          type == Scope::eElse ? "Else" :
branch  0 never executed
branch  1 never executed
    #####: 2792:          type == Scope::eFor ? "For" :
branch  0 never executed
branch  1 never executed
    #####: 2793:          type == Scope::eWhile ? "While" :
branch  0 never executed
branch  1 never executed
    #####: 2794:          type == Scope::eDo ? "Do" :
branch  0 never executed
branch  1 never executed
    #####: 2795:          type == Scope::eSwitch ? "Switch" :
branch  0 never executed
branch  1 never executed
    #####: 2796:          type == Scope::eTry ? "Try" :
branch  0 never executed
branch  1 never executed
    #####: 2797:          type == Scope::eCatch ? "Catch" :
branch  0 never executed
branch  1 never executed
    #####: 2798:          type == Scope::eUnconditional ? "Unconditional" :
branch  0 never executed
branch  1 never executed
    #####: 2799:          type == Scope::eLambda ? "Lambda" :
branch  0 never executed
branch  1 never executed
    #####: 2800:          type == Scope::eEnum ? "Enum" :
branch  0 never executed
branch  1 never executed
    #####: 2801:          "Unknown");
branch  0 never executed
branch  1 never executed
    #####: 2802:    return s;
        -: 2803:}
        -: 2804:
function _ZL21accessControlToStringRK13AccessControl called 0 returned 0% blocks executed 0%
    #####: 2805:static std::string accessControlToString(const AccessControl& access)
        -: 2806:{
    #####: 2807:    switch (access) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2808:    case AccessControl::Public:
    #####: 2809:        return "Public";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2810:    case AccessControl::Protected:
    #####: 2811:        return "Protected";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2812:    case AccessControl::Private:
    #####: 2813:        return "Private";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2814:    case AccessControl::Global:
    #####: 2815:        return "Global";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2816:    case AccessControl::Namespace:
    #####: 2817:        return "Namespace";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2818:    case AccessControl::Argument:
    #####: 2819:        return "Argument";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2820:    case AccessControl::Local:
    #####: 2821:        return "Local";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2822:    case AccessControl::Throw:
    #####: 2823:        return "Throw";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 2824:    }
    #####: 2825:    return "Unknown";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 2826:}
        -: 2827:
function _ZL13tokenToStringPK5TokenPK9Tokenizer called 0 returned 0% blocks executed 0%
    #####: 2828:static std::string tokenToString(const Token* tok, const Tokenizer* tokenizer)
        -: 2829:{
    #####: 2830:    std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2831:    if (tok) {
branch  0 never executed
branch  1 never executed
    #####: 2832:        oss << tok->str() << " ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2833:        oss << tokenizer->list.fileLine(tok) << " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 2834:    }
    #####: 2835:    oss << tok;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2836:    return oss.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2837:}
        -: 2838:
function _ZL13scopeToStringPK5ScopePK9Tokenizer called 0 returned 0% blocks executed 0%
    #####: 2839:static std::string scopeToString(const Scope* scope, const Tokenizer* tokenizer)
        -: 2840:{
    #####: 2841:    std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2842:    if (scope) {
branch  0 never executed
branch  1 never executed
    #####: 2843:        oss << scope->type << " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2844:        if (scope->classDef)
branch  0 never executed
branch  1 never executed
    #####: 2845:            oss << tokenizer->list.fileLine(scope->classDef) << " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 2846:    }
    #####: 2847:    oss << scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2848:    return oss.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2849:}
        -: 2850:
function _ZL9tokenTypePK5Token called 0 returned 0% blocks executed 0%
    #####: 2851:static std::string tokenType(const Token * tok)
        -: 2852:{
    #####: 2853:    std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2854:    if (tok) {
branch  0 never executed
branch  1 never executed
    #####: 2855:        if (tok->isUnsigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2856:            oss << "unsigned ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2857:        else if (tok->isSigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2858:            oss << "signed ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2859:        if (tok->isComplex())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2860:            oss << "_Complex ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2861:        if (tok->isLong())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2862:            oss << "long ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2863:        oss << tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2864:    }
    #####: 2865:    return oss.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2866:}
        -: 2867:
function _ZNK14SymbolDatabase13printVariableEPK8VariablePKc called 0 returned 0% blocks executed 0%
    #####: 2868:void SymbolDatabase::printVariable(const Variable *var, const char *indent) const
        -: 2869:{
    #####: 2870:    std::cout << indent << "mNameToken: " << tokenToString(var->nameToken(), mTokenizer) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2871:    if (var->nameToken()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2872:        std::cout << indent << "    declarationId: " << var->declarationId() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 2873:    }
    #####: 2874:    std::cout << indent << "mTypeStartToken: " << tokenToString(var->typeStartToken(), mTokenizer) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2875:    std::cout << indent << "mTypeEndToken: " << tokenToString(var->typeEndToken(), mTokenizer) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 2876:
    #####: 2877:    const Token * autoTok = nullptr;
    #####: 2878:    std::cout << indent << "   ";
call    0 never executed
call    1 never executed
    #####: 2879:    for (const Token * tok = var->typeStartToken(); tok != var->typeEndToken()->next(); tok = tok->next()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 2880:        std::cout << " " << tokenType(tok);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2881:        if (tok->str() == "auto")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2882:            autoTok = tok;
        -: 2883:    }
    #####: 2884:    std::cout << std::endl;
call    0 never executed
    #####: 2885:    if (autoTok) {
branch  0 never executed
branch  1 never executed
    #####: 2886:        const ValueType * valueType = autoTok->valueType();
call    0 never executed
    #####: 2887:        std::cout << indent << "    auto valueType: " << valueType << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2888:        if (var->typeStartToken()->valueType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2889:            std::cout << indent << "        " << valueType->str() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2890:        }
        -: 2891:    }
    #####: 2892:    std::cout << indent << "mIndex: " << var->index() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2893:    std::cout << indent << "mAccess: " << accessControlToString(var->accessControl()) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####: 2894:    std::cout << indent << "mFlags: " << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2895:    std::cout << indent << "    isMutable: " << var->isMutable() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2896:    std::cout << indent << "    isStatic: " << var->isStatic() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2897:    std::cout << indent << "    isExtern: " << var->isExtern() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2898:    std::cout << indent << "    isLocal: " << var->isLocal() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2899:    std::cout << indent << "    isConst: " << var->isConst() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2900:    std::cout << indent << "    isClass: " << var->isClass() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2901:    std::cout << indent << "    isArray: " << var->isArray() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2902:    std::cout << indent << "    isPointer: " << var->isPointer() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2903:    std::cout << indent << "    isReference: " << var->isReference() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2904:    std::cout << indent << "    isRValueRef: " << var->isRValueReference() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2905:    std::cout << indent << "    hasDefault: " << var->hasDefault() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2906:    std::cout << indent << "    isStlType: " << var->isStlType() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 2907:    std::cout << indent << "mType: ";
call    0 never executed
call    1 never executed
    #####: 2908:    if (var->type()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2909:        std::cout << var->type()->type() << " " << var->type()->name();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2910:        std::cout << " " << mTokenizer->list.fileLine(var->type()->classDef);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2911:        std::cout << " " << var->type() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2912:    } else
    #####: 2913:        std::cout << "none" << std::endl;
call    0 never executed
call    1 never executed
        -: 2914:
    #####: 2915:    if (var->nameToken()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2916:        const ValueType * valueType = var->nameToken()->valueType();
call    0 never executed
call    1 never executed
    #####: 2917:        std::cout << indent << "valueType: " << valueType << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2918:        if (valueType) {
branch  0 never executed
branch  1 never executed
    #####: 2919:            std::cout << indent << "    " << valueType->str() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2920:        }
        -: 2921:    }
        -: 2922:
    #####: 2923:    std::cout << indent << "mScope: " << scopeToString(var->scope(), mTokenizer) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
        -: 2924:
    #####: 2925:    std::cout << indent << "mDimensions:";
call    0 never executed
call    1 never executed
    #####: 2926:    for (std::size_t i = 0; i < var->dimensions().size(); i++) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2927:        std::cout << " " << var->dimension(i);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2928:        if (!var->dimensions()[i].known)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2929:            std::cout << "?";
call    0 never executed
        -: 2930:    }
    #####: 2931:    std::cout << std::endl;
call    0 never executed
    #####: 2932:}
        -: 2933:
function _ZNK14SymbolDatabase8printOutEPKc called 0 returned 0% blocks executed 0%
    #####: 2934:void SymbolDatabase::printOut(const char *title) const
        -: 2935:{
    #####: 2936:    std::cout << std::setiosflags(std::ios::boolalpha);
call    0 never executed
call    1 never executed
    #####: 2937:    if (title)
branch  0 never executed
branch  1 never executed
    #####: 2938:        std::cout << "\n### " << title << " ###\n";
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2939:
    #####: 2940:    for (std::list<Scope>::const_iterator scope = scopeList.begin(); scope != scopeList.end(); ++scope) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2941:        std::cout << "Scope: " << &*scope << " " << scope->type << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 2942:        std::cout << "    className: " << scope->className << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2943:        std::cout << "    classDef: " << tokenToString(scope->classDef, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2944:        std::cout << "    bodyStart: " << tokenToString(scope->bodyStart, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2945:        std::cout << "    bodyEnd: " << tokenToString(scope->bodyEnd, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 2946:
    #####: 2947:        std::list<Function>::const_iterator func;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2948:
        -: 2949:        // find the function body if not implemented inline
    #####: 2950:        for (func = scope->functionList.begin(); func != scope->functionList.end(); ++func) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2951:            std::cout << "    Function: " << &*func << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2952:            std::cout << "        name: " << tokenToString(func->tokenDef, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2953:            std::cout << "        type: " << (func->type == Function::eConstructor? "Constructor" :
call    0 never executed
    #####: 2954:                                              func->type == Function::eCopyConstructor ? "CopyConstructor" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2955:                                              func->type == Function::eMoveConstructor ? "MoveConstructor" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2956:                                              func->type == Function::eOperatorEqual ? "OperatorEqual" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2957:                                              func->type == Function::eDestructor ? "Destructor" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2958:                                              func->type == Function::eFunction ? "Function" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2959:                                              func->type == Function::eLambda ? "Lambda" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2960:                                              "Unknown") << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2961:            std::cout << "        access: " << accessControlToString(func->access) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 2962:            std::cout << "        hasBody: " << func->hasBody() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2963:            std::cout << "        isInline: " << func->isInline() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2964:            std::cout << "        isConst: " << func->isConst() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2965:            std::cout << "        hasVirtualSpecifier: " << func->hasVirtualSpecifier() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2966:            std::cout << "        isPure: " << func->isPure() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2967:            std::cout << "        isStatic: " << func->isStatic() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2968:            std::cout << "        isStaticLocal: " << func->isStaticLocal() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2969:            std::cout << "        isExtern: " << func->isExtern() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2970:            std::cout << "        isFriend: " << func->isFriend() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2971:            std::cout << "        isExplicit: " << func->isExplicit() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2972:            std::cout << "        isDefault: " << func->isDefault() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2973:            std::cout << "        isDelete: " << func->isDelete() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2974:            std::cout << "        hasOverrideSpecifier: " << func->hasOverrideSpecifier() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2975:            std::cout << "        hasFinalSpecifier: " << func->hasFinalSpecifier() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2976:            std::cout << "        isNoExcept: " << func->isNoExcept() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2977:            std::cout << "        isThrow: " << func->isThrow() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2978:            std::cout << "        isOperator: " << func->isOperator() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2979:            std::cout << "        hasLvalRefQual: " << func->hasLvalRefQualifier() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2980:            std::cout << "        hasRvalRefQual: " << func->hasRvalRefQualifier() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2981:            std::cout << "        isVariadic: " << func->isVariadic() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2982:            std::cout << "        isVolatile: " << func->isVolatile() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2983:            std::cout << "        hasTrailingReturnType: " << func->hasTrailingReturnType() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2984:            std::cout << "        attributes:";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2985:            if (func->isAttributeConst())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2986:                std::cout << " const ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2987:            if (func->isAttributePure())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2988:                std::cout << " pure ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2989:            if (func->isAttributeNoreturn())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2990:                std::cout << " noreturn ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2991:            if (func->isAttributeNothrow())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2992:                std::cout << " nothrow ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2993:            if (func->isAttributeConstructor())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2994:                std::cout << " constructor ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2995:            if (func->isAttributeDestructor())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2996:                std::cout << " destructor ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2997:            if (func->isAttributeNodiscard())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2998:                std::cout << " nodiscard ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2999:            std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3000:            std::cout << "        noexceptArg: " << (func->noexceptArg ? func->noexceptArg->str() : "none") << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 3001:            std::cout << "        throwArg: " << (func->throwArg ? func->throwArg->str() : "none") << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 3002:            std::cout << "        tokenDef: " << tokenToString(func->tokenDef, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3003:            std::cout << "        argDef: " << tokenToString(func->argDef, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3004:            if (!func->isConstructor() && !func->isDestructor())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3005:                std::cout << "        retDef: " << tokenToString(func->retDef, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3006:            if (func->retDef) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3007:                std::cout << "           ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3008:                for (const Token * tok = func->retDef; tok && tok != func->tokenDef && !Token::Match(tok, "{|;|override|final"); tok = tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
    #####: 3009:                    std::cout << " " << tokenType(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 3010:                std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3011:            }
    #####: 3012:            std::cout << "        retType: " << func->retType << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 3013:
    #####: 3014:            if (func->tokenDef->next()->valueType()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3015:                const ValueType * valueType = func->tokenDef->next()->valueType();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3016:                std::cout << "        valueType: " << valueType << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3017:                if (valueType) {
branch  0 never executed
branch  1 never executed
    #####: 3018:                    std::cout << "            " << valueType->str() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
        -: 3019:                }
        -: 3020:            }
        -: 3021:
    #####: 3022:            if (func->hasBody()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3023:                std::cout << "        token: " << tokenToString(func->token, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3024:                std::cout << "        arg: " << tokenToString(func->arg, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 3025:            }
    #####: 3026:            std::cout << "        nestedIn: " << scopeToString(func->nestedIn, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3027:            std::cout << "        functionScope: " << scopeToString(func->functionScope, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 3028:
    #####: 3029:            std::list<Variable>::const_iterator var;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3030:
    #####: 3031:            for (var = func->argumentList.begin(); var != func->argumentList.end(); ++var) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 3032:                std::cout << "        Variable: " << &*var << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3033:                printVariable(&*var, "            ");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3034:            }
        -: 3035:        }
        -: 3036:
    #####: 3037:        std::list<Variable>::const_iterator var;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3038:
    #####: 3039:        for (var = scope->varlist.begin(); var != scope->varlist.end(); ++var) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 3040:            std::cout << "    Variable: " << &*var << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3041:            printVariable(&*var, "        ");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3042:        }
        -: 3043:
    #####: 3044:        if (scope->type == Scope::eEnum) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3045:            std::cout << "    enumType: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3046:            if (scope->enumType)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3047:                scope->enumType->stringify(std::cout, false, true, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3048:            else
    #####: 3049:                std::cout << "int";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3050:            std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3051:            std::cout << "    enumClass: " << scope->enumClass << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3052:            for (std::vector<Enumerator>::const_iterator enumerator = scope->enumeratorList.begin(); enumerator != scope->enumeratorList.end(); ++enumerator) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3053:                std::cout << "        Enumerator: " << enumerator->name->str() << " = ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3054:                if (enumerator->value_known) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3055:                    std::cout << enumerator->value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3056:                }
        -: 3057:
    #####: 3058:                if (enumerator->start) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3059:                    const Token * tok = enumerator->start;
call    0 never executed
    #####: 3060:                    std::cout << (enumerator->value_known ? " " : "") << "[" << tok->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3061:                    while (tok && tok != enumerator->end) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3062:                        if (tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3063:                            std::cout << " " << tok->next()->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3064:                        tok = tok->next();
call    0 never executed
        -: 3065:                    }
        -: 3066:
    #####: 3067:                    std::cout << "]";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3068:                }
        -: 3069:
    #####: 3070:                std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3071:            }
        -: 3072:        }
        -: 3073:
    #####: 3074:        std::cout << "    nestedIn: " << scope->nestedIn;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3075:        if (scope->nestedIn) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3076:            std::cout << " " << scope->nestedIn->type << " "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3077:                      << scope->nestedIn->className;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3078:        }
    #####: 3079:        std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3080:
    #####: 3081:        std::cout << "    definedType: " << scope->definedType << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 3082:
    #####: 3083:        std::cout << "    nestedList[" << scope->nestedList.size() << "] = (";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 3084:
    #####: 3085:        std::list<Scope *>::const_iterator nsi;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3086:
    #####: 3087:        std::size_t count = scope->nestedList.size();
call    0 never executed
call    1 never executed
    #####: 3088:        for (nsi = scope->nestedList.begin(); nsi != scope->nestedList.end(); ++nsi) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 3089:            std::cout << " " << (*nsi) << " " << (*nsi)->type << " " << (*nsi)->className;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
    #####: 3090:            if (count-- > 1)
branch  0 never executed
branch  1 never executed
    #####: 3091:                std::cout << ",";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3092:        }
        -: 3093:
    #####: 3094:        std::cout << " )" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3095:
    #####: 3096:        std::list<Scope::UsingInfo>::const_iterator use;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3097:
    #####: 3098:        for (use = scope->usingList.begin(); use != scope->usingList.end(); ++use) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 3099:            std::cout << "    using: " << use->scope << " " << use->start->strAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 3100:            const Token *tok1 = use->start->tokAt(3);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3101:            while (tok1 && tok1->str() == "::") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3102:                std::cout << "::" << tok1->strAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3103:                tok1 = tok1->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3104:            }
    #####: 3105:            std::cout << " " << mTokenizer->list.fileLine(use->start) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 3106:        }
        -: 3107:
    #####: 3108:        std::cout << "    functionOf: " << scopeToString(scope->functionOf, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 3109:
    #####: 3110:        std::cout << "    function: " << scope->function;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3111:        if (scope->function)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3112:            std::cout << " " << scope->function->name();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3113:        std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3114:    }
        -: 3115:
    #####: 3116:    for (std::list<Type>::const_iterator type = typeList.begin(); type != typeList.end(); ++type) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 3117:        std::cout << "Type: " << &(*type) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3118:        std::cout << "    name: " << type->name() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3119:        std::cout << "    classDef: " << tokenToString(type->classDef, mTokenizer) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3120:        std::cout << "    classScope: " << type->classScope << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3121:        std::cout << "    enclosingScope: " << type->enclosingScope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3122:        if (type->enclosingScope) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3123:            std::cout << " " << type->enclosingScope->type << " "
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3124:                      << type->enclosingScope->className;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3125:        }
    #####: 3126:        std::cout << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3127:        std::cout << "    needInitialization: " << (type->needInitialization == Type::NeedInitialization::Unknown ? "Unknown" :
call    0 never executed
    #####: 3128:                  type->needInitialization == Type::NeedInitialization::True ? "True" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3129:                  type->needInitialization == Type::NeedInitialization::False ? "False" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3130:                  "Invalid") << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 3131:
    #####: 3132:        std::cout << "    derivedFrom[" << type->derivedFrom.size() << "] = (";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3133:        std::size_t count = type->derivedFrom.size();
call    0 never executed
call    1 never executed
    #####: 3134:        for (const Type::BaseInfo & i : type->derivedFrom) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3135:            if (i.isVirtual)
branch  0 never executed
branch  1 never executed
    #####: 3136:                std::cout << "Virtual ";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3137:
    #####: 3138:            std::cout << (i.access == AccessControl::Public    ? " Public" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3139:                          i.access == AccessControl::Protected ? " Protected" :
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3140:                          i.access == AccessControl::Private   ? " Private" :
    #####: 3141:                          " Unknown");
branch  0 never executed
branch  1 never executed
        -: 3142:
    #####: 3143:            if (i.type)
branch  0 never executed
branch  1 never executed
    #####: 3144:                std::cout << " " << i.type;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3145:            else
    #####: 3146:                std::cout << " Unknown";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3147:
    #####: 3148:            std::cout << " " << i.name;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3149:            if (count-- > 1)
branch  0 never executed
branch  1 never executed
    #####: 3150:                std::cout << ",";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3151:        }
        -: 3152:
    #####: 3153:        std::cout << " )" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3154:
    #####: 3155:        std::cout << "    friendList[" << type->friendList.size() << "] = (";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3156:        for (size_t i = 0; i < type->friendList.size(); i++) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3157:            if (type->friendList[i].type)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3158:                std::cout << type->friendList[i].type;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3159:            else
    #####: 3160:                std::cout << " Unknown";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3161:
    #####: 3162:            std::cout << ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3163:            if (type->friendList[i].nameEnd)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3164:                std::cout << type->friendList[i].nameEnd->str();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3165:            if (i+1 < type->friendList.size())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3166:                std::cout << ',';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3167:        }
        -: 3168:
    #####: 3169:        std::cout << " )" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3170:    }
        -: 3171:
    #####: 3172:    for (std::size_t i = 1; i < mVariableList.size(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3173:        std::cout << "mVariableList[" << i << "]: " << mVariableList[i];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 3174:        if (mVariableList[i]) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3175:            std::cout << " " << mVariableList[i]->name() << " "
call    0 never executed
call    1 never executed
    #####: 3176:                      << mTokenizer->list.fileLine(mVariableList[i]->nameToken());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 3177:        }
    #####: 3178:        std::cout << std::endl;
call    0 never executed
        -: 3179:    }
    #####: 3180:    std::cout << std::resetiosflags(std::ios::boolalpha);
call    0 never executed
call    1 never executed
    #####: 3181:}
        -: 3182:
function _ZNK14SymbolDatabase8printXmlERSo called 0 returned 0% blocks executed 0%
    #####: 3183:void SymbolDatabase::printXml(std::ostream &out) const
        -: 3184:{
    #####: 3185:    out << std::setiosflags(std::ios::boolalpha);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3186:
    #####: 3187:    std::set<const Variable *> variables;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3188:
        -: 3189:    // Scopes..
    #####: 3190:    out << "  <scopes>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3191:    for (std::list<Scope>::const_iterator scope = scopeList.begin(); scope != scopeList.end(); ++scope) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 3192:        out << "    <scope";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3193:        out << " id=\"" << &*scope << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3194:        out << " type=\"" << scope->type << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3195:        if (!scope->className.empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3196:            out << " className=\"" << ErrorLogger::toxml(scope->className) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 3197:        if (scope->bodyStart)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3198:            out << " bodyStart=\"" << scope->bodyStart << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3199:        if (scope->bodyEnd)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3200:            out << " bodyEnd=\"" << scope->bodyEnd << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3201:        if (scope->nestedIn)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3202:            out << " nestedIn=\"" << scope->nestedIn << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3203:        if (scope->function)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3204:            out << " function=\"" << scope->function << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3205:        if (scope->functionList.empty() && scope->varlist.empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3206:            out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3207:        else {
    #####: 3208:            out << '>' << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3209:            if (!scope->functionList.empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3210:                out << "      <functionList>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3211:                for (std::list<Function>::const_iterator function = scope->functionList.begin(); function != scope->functionList.end(); ++function) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3212:                    out << "        <function id=\"" << &*function << "\" tokenDef=\"" << function->tokenDef << "\" name=\"" << ErrorLogger::toxml(function->name()) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
    #####: 3213:                    out << " type=\"" << (function->type == Function::eConstructor? "Constructor" :
call    0 never executed
    #####: 3214:                                          function->type == Function::eCopyConstructor ? "CopyConstructor" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3215:                                          function->type == Function::eMoveConstructor ? "MoveConstructor" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3216:                                          function->type == Function::eOperatorEqual ? "OperatorEqual" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3217:                                          function->type == Function::eDestructor ? "Destructor" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3218:                                          function->type == Function::eFunction ? "Function" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3219:                                          function->type == Function::eLambda ? "Lambda" :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3220:                                          "Unknown") << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3221:                    if (function->nestedIn->definedType) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3222:                        if (function->hasVirtualSpecifier())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3223:                            out << " hasVirtualSpecifier=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3224:                        else if (function->isImplicitlyVirtual())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3225:                            out << " isImplicitlyVirtual=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3226:                    }
    #####: 3227:                    if (function->argCount() == 0U)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3228:                        out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3229:                    else {
    #####: 3230:                        out << ">" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3231:                        for (unsigned int argnr = 0; argnr < function->argCount(); ++argnr) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3232:                            const Variable *arg = function->getArgumentVar(argnr);
call    0 never executed
call    1 never executed
    #####: 3233:                            out << "          <arg nr=\"" << argnr+1 << "\" variable=\"" << arg << "\"/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####: 3234:                            variables.insert(arg);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 3235:                        }
    #####: 3236:                        out << "        </function>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3237:                    }
        -: 3238:                }
    #####: 3239:                out << "      </functionList>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3240:            }
    #####: 3241:            if (!scope->varlist.empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3242:                out << "      <varlist>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3243:                for (std::list<Variable>::const_iterator var = scope->varlist.begin(); var != scope->varlist.end(); ++var)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3244:                    out << "        <var id=\""   << &*var << "\"/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3245:                out << "      </varlist>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3246:            }
    #####: 3247:            out << "    </scope>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3248:        }
        -: 3249:    }
    #####: 3250:    out << "  </scopes>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3251:
        -: 3252:    // Variables..
    #####: 3253:    for (const Variable *var : mVariableList)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3254:        variables.insert(var);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 3255:    out << "  <variables>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3256:    for (const Variable *var : variables) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3257:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 3258:            continue;
    #####: 3259:        out << "    <var id=\""   << var << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3260:        out << " nameToken=\""      << var->nameToken() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3261:        out << " typeStartToken=\"" << var->typeStartToken() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3262:        out << " typeEndToken=\""   << var->typeEndToken() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3263:        out << " access=\""         << accessControlToString(var->mAccess) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####: 3264:        out << " scope=\""          << var->scope() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3265:        out << " constness=\""      << var->valueType()->constness << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3266:        out << " isArgument=\""     << var->isArgument() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3267:        out << " isArray=\""        << var->isArray() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3268:        out << " isClass=\""        << var->isClass() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3269:        out << " isConst=\""        << var->isConst() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3270:        out << " isExtern=\""       << var->isExtern() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3271:        out << " isLocal=\""        << var->isLocal() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3272:        out << " isPointer=\""      << var->isPointer() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3273:        out << " isReference=\""    << var->isReference() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3274:        out << " isStatic=\""       << var->isStatic() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 3275:        out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3276:    }
    #####: 3277:    out << "  </variables>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3278:    out << std::resetiosflags(std::ios::boolalpha);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3279:}
        -: 3280:
        -: 3281://---------------------------------------------------------------------------
        -: 3282:
function _ZL39findVariableTypeIncludingUsedNamespacesPK14SymbolDatabasePK5ScopePK5Token called 1019 returned 100% blocks executed 63%
     1019: 3283:static const Type* findVariableTypeIncludingUsedNamespaces(const SymbolDatabase* symbolDatabase, const Scope* scope, const Token* typeTok)
        -: 3284:{
     1019: 3285:    const Type* argType = symbolDatabase->findVariableType(scope, typeTok);
call    0 returned 100%
     1019: 3286:    if (argType)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      165: 3287:        return argType;
        -: 3288:
        -: 3289:    // look for variable type in any using namespace in this scope or above
     4066: 3290:    while (scope) {
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
     1606: 3291:        for (const Scope::UsingInfo &ui : scope->usingList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
    #####: 3292:            if (ui.scope) {
branch  0 never executed
branch  1 never executed
    #####: 3293:                argType = symbolDatabase->findVariableType(ui.scope, typeTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3294:                if (argType)
branch  0 never executed
branch  1 never executed
    #####: 3295:                    return argType;
        -: 3296:            }
        -: 3297:        }
     1606: 3298:        scope = scope->nestedIn;
        -: 3299:    }
      854: 3300:    return nullptr;
        -: 3301:}
        -: 3302:
        -: 3303://---------------------------------------------------------------------------
        -: 3304:
function _ZN8Function12addArgumentsEPK14SymbolDatabasePK5Scope called 1165 returned 100% blocks executed 77%
     1165: 3305:void Function::addArguments(const SymbolDatabase *symbolDatabase, const Scope *scope)
        -: 3306:{
        -: 3307:    // check for non-empty argument list "( ... )"
     1165: 3308:    const Token * start = arg ? arg : argDef;
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     1165: 3309:    if (!Token::simpleMatch(start, "("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3310:        return;
     1165: 3311:    if (!(start && start->link() != start->next() && !Token::simpleMatch(start, "( void )")))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 52% (fallthrough)
branch  5 taken 48%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 48% (fallthrough)
branch 10 taken 52%
      562: 3312:        return;
        -: 3313:
      603: 3314:    unsigned int count = 0;
        -: 3315:
      741: 3316:    for (const Token* tok = start->next(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
      741: 3317:        if (Token::Match(tok, ",|)"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3318:            return; // Syntax error
        -: 3319:
      741: 3320:        const Token* startTok = tok;
      741: 3321:        const Token* endTok   = nullptr;
      741: 3322:        const Token* nameTok  = nullptr;
        -: 3323:
     1238: 3324:        do {
     1979: 3325:            if (tok != startTok && !nameTok && Token::Match(tok, "( & %var% ) [")) {
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3326:                nameTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3327:                endTok = nameTok->previous();
call    0 never executed
    #####: 3328:                tok = tok->link();
call    0 never executed
     1979: 3329:            } else if (tok->varId() != 0) {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
      698: 3330:                nameTok = tok;
      698: 3331:                endTok = tok->previous();
call    0 returned 100%
     1281: 3332:            } else if (tok->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 3333:                // skip array dimension(s)
        1: 3334:                tok = tok->link();
call    0 returned 100%
        1: 3335:                while (tok->next()->str() == "[")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3336:                    tok = tok->next()->link();
call    0 never executed
call    1 never executed
     1280: 3337:            } else if (tok->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       37: 3338:                tok = tok->link();
call    0 returned 100%
       37: 3339:                if (!tok) // something is wrong so just bail out
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3340:                    return;
        -: 3341:            }
        -: 3342:
     1979: 3343:            tok = tok->next();
call    0 returned 100%
        -: 3344:
     1979: 3345:            if (!tok) // something is wrong so just bail
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3346:                return;
     1979: 3347:        } while (tok->str() != "," && tok->str() != ")" && tok->str() != "=");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 99% (fallthrough)
branch 11 taken 1%
branch 12 taken 63% (fallthrough)
branch 13 taken 37%
        -: 3348:
      741: 3349:        const Token *typeTok = startTok;
        -: 3350:        // skip over stuff to get to type
      911: 3351:        while (Token::Match(typeTok, "const|volatile|enum|struct|::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
       85: 3352:            typeTok = typeTok->next();
call    0 returned 100%
      741: 3353:        if (Token::Match(typeTok, ",|)")) { // #8333
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3354:            symbolDatabase->mTokenizer->syntaxError(typeTok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3355:            return;
        -: 3356:        }
        -: 3357:        // skip over qualification
      907: 3358:        while (Token::Match(typeTok, "%type% ::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
       83: 3359:            typeTok = typeTok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3360:
        -: 3361:        // check for argument with no name or missing varid
      741: 3362:        if (!endTok) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       43: 3363:            if (tok->previous()->isName() && !Token::Match(tok->tokAt(-1), "const|volatile")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 65% (fallthrough)
branch  5 taken 35%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 65% (fallthrough)
branch 15 taken 35%
       28: 3364:                if (tok->previous() != typeTok) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3365:                    nameTok = tok->previous();
call    0 never executed
    #####: 3366:                    endTok = nameTok->previous();
call    0 never executed
        -: 3367:
    #####: 3368:                    if (hasBody())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3369:                        symbolDatabase->debugMessage(nameTok, "Function::addArguments found argument \'" + nameTok->str() + "\' with varid 0.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 3370:                } else
       28: 3371:                    endTok = typeTok;
        -: 3372:            } else
       15: 3373:                endTok = tok->previous();
call    0 returned 100%
        -: 3374:        }
        -: 3375:
      741: 3376:        const ::Type *argType = nullptr;
      741: 3377:        if (!typeTok->isStandardType()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 30% (fallthrough)
branch  4 taken 70%
      221: 3378:            argType = findVariableTypeIncludingUsedNamespaces(symbolDatabase, scope, typeTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3379:
        -: 3380:            // save type
      221: 3381:            const_cast<Token *>(typeTok)->type(argType);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3382:        }
        -: 3383:
        -: 3384:        // skip default values
      741: 3385:        if (tok->str() == "=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        4: 3386:            do {
        8: 3387:                if (tok->link() && Token::Match(tok, "[{[(<]"))
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 13% (fallthrough)
branch  9 taken 88%
        1: 3388:                    tok = tok->link();
call    0 returned 100%
        8: 3389:                tok = tok->next();
call    0 returned 100%
        8: 3390:            } while (tok->str() != "," && tok->str() != ")");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
        -: 3391:        }
        -: 3392:
        -: 3393:        // skip over stuff before type
      911: 3394:        while (Token::Match(startTok, "enum|struct|const|volatile"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
       85: 3395:            startTok = startTok->next();
call    0 returned 100%
        -: 3396:
      741: 3397:        argumentList.emplace_back(nameTok, startTok, endTok, count++, AccessControl::Argument, argType, functionScope, symbolDatabase->mSettings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3398:
      741: 3399:        if (tok->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 81% (fallthrough)
branch  3 taken 19%
        -: 3400:            // check for a variadic function
      603: 3401:            if (Token::simpleMatch(startTok, "..."))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        3: 3402:                isVariadic(true);
call    0 returned 100%
        -: 3403:
      603: 3404:            break;
        -: 3405:        }
        -: 3406:    }
        -: 3407:
        -: 3408:    // count default arguments
     2871: 3409:    for (const Token* tok = argDef->next(); tok && tok != argDef->link(); tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 79% (fallthrough)
branch  5 taken 21%
branch  6 taken 79% (fallthrough)
branch  7 taken 21%
call    8 returned 100%
     2268: 3410:        if (tok->str() == "=")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       15: 3411:            initArgCount++;
        -: 3412:    }
        -: 3413:}
        -: 3414:
function _ZNK8Function19isImplicitlyVirtualEb called 39 returned 100% blocks executed 73%
       39: 3415:bool Function::isImplicitlyVirtual(bool defaultVal) const
        -: 3416:{
       39: 3417:    if (hasVirtualSpecifier()) //If it has the virtual specifier it's definitely virtual
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3418:        return true;
       39: 3419:    if (hasOverrideSpecifier()) //If it has the override specifier then it's either virtual or not going to compile
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3420:        return true;
       39: 3421:    bool foundAllBaseClasses = true;
       39: 3422:    if (getOverriddenFunction(&foundAllBaseClasses)) //If it overrides a base class's method then it's virtual
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3423:        return true;
       39: 3424:    if (foundAllBaseClasses) //If we've seen all the base classes and none of the above were true then it must not be virtual
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       39: 3425:        return false;
    #####: 3426:    return defaultVal; //If we can't see all the bases classes then we can't say conclusively
        -: 3427:}
        -: 3428:
function _ZNK8Function21getOverriddenFunctionEPb called 39 returned 100% blocks executed 100%
       39: 3429:const Function *Function::getOverriddenFunction(bool *foundAllBaseClasses) const
        -: 3430:{
       39: 3431:    if (foundAllBaseClasses)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       39: 3432:        *foundAllBaseClasses = true;
       39: 3433:    if (!nestedIn->isClassOrStruct())
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
       34: 3434:        return nullptr;
        5: 3435:    return getOverriddenFunctionRecursive(nestedIn->definedType, foundAllBaseClasses);
call    0 returned 100%
        -: 3436:}
        -: 3437:
function _ZNK8Function30getOverriddenFunctionRecursiveEPK4TypePb called 5 returned 100% blocks executed 32%
        5: 3438:const Function * Function::getOverriddenFunctionRecursive(const ::Type* baseType, bool *foundAllBaseClasses) const
        -: 3439:{
        -: 3440:    // check each base class
        6: 3441:    for (const ::Type::BaseInfo & i : baseType->derivedFrom) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
        1: 3442:        const ::Type* derivedFromType = i.type;
        -: 3443:        // check if base class exists in database
        1: 3444:        if (!derivedFromType || !derivedFromType->classScope) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3445:            if (foundAllBaseClasses)
branch  0 never executed
branch  1 never executed
    #####: 3446:                *foundAllBaseClasses = false;
    #####: 3447:            continue;
        -: 3448:        }
        -: 3449:
        1: 3450:        const Scope *parent = derivedFromType->classScope;
        -: 3451:
        -: 3452:        // check if function defined in base class
        1: 3453:        for (std::multimap<std::string, const Function *>::const_iterator it = parent->functionMap.find(tokenDef->str()); it != parent->functionMap.end() && it->first == tokenDef->str(); ++it) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
call   18 never executed
call   19 returned 100%
branch 20 taken 100%
branch 21 taken 0%
call   22 never executed
    #####: 3454:            const Function * func = it->second;
call    0 never executed
    #####: 3455:            if (func->hasVirtualSpecifier()) { // Base is virtual and of same name
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3456:                const Token *temp1 = func->tokenDef->previous();
call    0 never executed
    #####: 3457:                const Token *temp2 = tokenDef->previous();
call    0 never executed
    #####: 3458:                bool match = true;
        -: 3459:
        -: 3460:                // check for matching return parameters
    #####: 3461:                while (temp1->str() != "virtual") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3462:                    if (temp1->str() != temp2->str() &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3463:                        !(temp1->str() == derivedFromType->name() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3464:                          temp2->str() == baseType->name())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 3465:                        match = false;
    #####: 3466:                        break;
        -: 3467:                    }
        -: 3468:
    #####: 3469:                    temp1 = temp1->previous();
call    0 never executed
    #####: 3470:                    temp2 = temp2->previous();
call    0 never executed
        -: 3471:                }
        -: 3472:
        -: 3473:                // check for matching function parameters
    #####: 3474:                match = match && argsMatch(baseType->classScope, func->argDef, argDef, emptyString, 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 3475:
        -: 3476:                // check for matching cv-ref qualifiers
    #####: 3477:                match = match
    #####: 3478:                        && isConst() == func->isConst()
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3479:                        && isVolatile() == func->isVolatile()
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3480:                        && hasRvalRefQualifier() == func->hasRvalRefQualifier()
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3481:                        && hasLvalRefQualifier() == func->hasLvalRefQualifier();
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3482:
        -: 3483:                // it's a match
    #####: 3484:                if (match) {
branch  0 never executed
branch  1 never executed
    #####: 3485:                    return func;
        -: 3486:                }
        -: 3487:            }
        -: 3488:        }
        -: 3489:
        1: 3490:        if (!derivedFromType->derivedFrom.empty() && !derivedFromType->hasCircularDependencies()) {
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -: 3491:            // avoid endless recursion, see #5289 Crash: Stack overflow in isImplicitlyVirtual_rec when checking SVN and
        -: 3492:            // #5590 with a loop within the class hierarchy.
    #####: 3493:            const Function *func = getOverriddenFunctionRecursive(derivedFromType, foundAllBaseClasses);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3494:            if (func)  {
branch  0 never executed
branch  1 never executed
    #####: 3495:                return func;
        -: 3496:            }
        -: 3497:        }
        -: 3498:    }
        5: 3499:    return nullptr;
        -: 3500:}
        -: 3501:
function _ZNK8Function14getArgumentVarEi called 1844 returned 100% blocks executed 82%
     1844: 3502:const Variable* Function::getArgumentVar(nonneg int num) const
        -: 3503:{
     2325: 3504:    for (std::list<Variable>::const_iterator i = argumentList.begin(); i != argumentList.end(); ++i) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0%
branch  9 taken 100%
     2325: 3505:        if (i->index() == num)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 79% (fallthrough)
branch  3 taken 21%
     1844: 3506:            return (&*i);
call    0 returned 100%
      481: 3507:        else if (i->index() > num)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3508:            return nullptr;
        -: 3509:    }
    #####: 3510:    return nullptr;
        -: 3511:}
        -: 3512:
        -: 3513:
        -: 3514://---------------------------------------------------------------------------
        -: 3515:
function _ZN5ScopeC2EPK14SymbolDatabasePK5TokenPKS_NS_9ScopeTypeES5_ called 563 returned 100% blocks executed 100%
      563: 3516:Scope::Scope(const SymbolDatabase *check_, const Token *classDef_, const Scope *nestedIn_, ScopeType type_, const Token *start_) :
        -: 3517:    check(check_),
        -: 3518:    classDef(classDef_),
        -: 3519:    bodyStart(start_),
      563: 3520:    bodyEnd(start_->link()),
call    0 returned 100%
        -: 3521:    nestedIn(nestedIn_),
        -: 3522:    numConstructors(0),
        -: 3523:    numCopyOrMoveConstructors(0),
        -: 3524:    type(type_),
        -: 3525:    definedType(nullptr),
        -: 3526:    functionOf(nullptr),
        -: 3527:    function(nullptr),
        -: 3528:    enumType(nullptr),
     1126: 3529:    enumClass(false)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
        -: 3530:{
      563: 3531:}
        -: 3532:
function _ZN5ScopeC2EPK14SymbolDatabasePK5TokenPKS_ called 2145 returned 100% blocks executed 79%
     2145: 3533:Scope::Scope(const SymbolDatabase *check_, const Token *classDef_, const Scope *nestedIn_) :
        -: 3534:    check(check_),
        -: 3535:    classDef(classDef_),
        -: 3536:    bodyStart(nullptr),
        -: 3537:    bodyEnd(nullptr),
        -: 3538:    nestedIn(nestedIn_),
        -: 3539:    numConstructors(0),
        -: 3540:    numCopyOrMoveConstructors(0),
        -: 3541:    definedType(nullptr),
        -: 3542:    functionOf(nullptr),
        -: 3543:    function(nullptr),
        -: 3544:    enumType(nullptr),
     2145: 3545:    enumClass(false)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 3546:{
     2145: 3547:    const Token *nameTok = classDef;
     2145: 3548:    if (!classDef) {
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
      957: 3549:        type = Scope::eGlobal;
     1188: 3550:    } else if (classDef->str() == "class" && check && check->isCPP()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 6% (fallthrough)
branch 10 taken 94%
       69: 3551:        type = Scope::eClass;
       69: 3552:        nameTok = nameTok->next();
call    0 returned 100%
     1119: 3553:    } else if (classDef->str() == "struct") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
       93: 3554:        type = Scope::eStruct;
       93: 3555:        nameTok = nameTok->next();
call    0 returned 100%
     1026: 3556:    } else if (classDef->str() == "union") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 3557:        type = Scope::eUnion;
        1: 3558:        nameTok = nameTok->next();
call    0 returned 100%
     1025: 3559:    } else if (classDef->str() == "namespace") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 3560:        type = Scope::eNamespace;
        2: 3561:        nameTok = nameTok->next();
call    0 returned 100%
     1023: 3562:    } else if (classDef->str() == "enum") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       10: 3563:        type = Scope::eEnum;
       10: 3564:        nameTok = nameTok->next();
call    0 returned 100%
       10: 3565:        if (nameTok->str() == "class") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3566:            enumClass = true;
    #####: 3567:            nameTok = nameTok->next();
call    0 never executed
        -: 3568:        }
     1013: 3569:    } else if (classDef->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        6: 3570:        type = Scope::eLambda;
        -: 3571:    } else {
     1007: 3572:        type = Scope::eFunction;
        -: 3573:    }
        -: 3574:    // skip over qualification if present
     2145: 3575:    nameTok = skipScopeIdentifiers(nameTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2145: 3576:    if (nameTok && ((type == Scope::eEnum && Token::Match(nameTok, ":|{")) || nameTok->str() != "{")) // anonymous and unnamed structs/unions don't have a name
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 55% (fallthrough)
branch 14 taken 45%
     1188: 3577:        className = nameTok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     2145: 3578:}
        -: 3579:
function _ZNK5Scope21hasDefaultConstructorEv called 0 returned 0% blocks executed 0%
    #####: 3580:bool Scope::hasDefaultConstructor() const
        -: 3581:{
    #####: 3582:    if (numConstructors) {
branch  0 never executed
branch  1 never executed
    #####: 3583:        std::list<Function>::const_iterator func;
call    0 never executed
        -: 3584:
    #####: 3585:        for (func = functionList.begin(); func != functionList.end(); ++func) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3586:            if (func->type == Function::eConstructor && func->argCount() == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 3587:                return true;
        -: 3588:        }
        -: 3589:    }
    #####: 3590:    return false;
        -: 3591:}
        -: 3592:
function _ZNK5Scope13defaultAccessEv called 2707 returned 100% blocks executed 100%
     2707: 3593:AccessControl Scope::defaultAccess() const
        -: 3594:{
     2707: 3595:    switch (type) {
branch  0 taken 35%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 59%
      956: 3596:    case eGlobal:
      956: 3597:        return AccessControl::Global;
       69: 3598:    case eClass:
       69: 3599:        return AccessControl::Private;
       93: 3600:    case eStruct:
       93: 3601:        return AccessControl::Public;
        1: 3602:    case eUnion:
        1: 3603:        return AccessControl::Public;
        2: 3604:    case eNamespace:
        2: 3605:        return AccessControl::Namespace;
     1586: 3606:    default:
     1586: 3607:        return AccessControl::Local;
        -: 3608:    }
        -: 3609:}
        -: 3610:
        -: 3611:// Get variable list..
function _ZN5Scope15getVariableListEPK8Settings called 2707 returned 100% blocks executed 76%
     2707: 3612:void Scope::getVariableList(const Settings* settings)
        -: 3613:{
        -: 3614:    const Token *start;
        -: 3615:
     2707: 3616:    if (bodyStart)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
     1751: 3617:        start = bodyStart->next();
call    0 returned 100%
        -: 3618:
        -: 3619:    // global scope
      956: 3620:    else if (className.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      956: 3621:        start = check->mTokenizer->tokens();
call    0 returned 100%
        -: 3622:
        -: 3623:    // forward declaration
        -: 3624:    else
    #####: 3625:        return;
        -: 3626:
        -: 3627:    // Variable declared in condition: if (auto x = bar())
     2707: 3628:    if (Token::Match(classDef, "if|while ( %type%") && Token::simpleMatch(classDef->next()->astOperand2(), "=")) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3629:        checkVariable(classDef->tokAt(2), defaultAccess(), settings);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3630:    }
        -: 3631:
     2707: 3632:    AccessControl varaccess = defaultAccess();
call    0 returned 100%
    26201: 3633:    for (const Token *tok = start; tok && tok != bodyEnd; tok = tok->next()) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
call    4 returned 100%
        -: 3634:        // syntax error?
    23527: 3635:        if (tok->next() == nullptr)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       33: 3636:            break;
        -: 3637:
        -: 3638:        // Is it a function?
    25120: 3639:        else if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -: 3640:
     1626: 3641:            tok = tok->link();
call    0 returned 100%
     1626: 3642:            continue;
        -: 3643:        }
        -: 3644:
        -: 3645:        // Is it a nested class or structure?
    21868: 3646:        else if (Token::Match(tok, "class|struct|union|namespace %type% :|{")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      165: 3647:            tok = tok->tokAt(2);
call    0 returned 100%
      213: 3648:            while (tok && tok->str() != "{")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
       24: 3649:                tok = tok->next();
call    0 returned 100%
      330: 3650:            if (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 3651:                // skip implementation
      165: 3652:                tok = tok->link();
call    0 returned 100%
      165: 3653:                continue;
        -: 3654:            } else
    #####: 3655:                break;
    21703: 3656:        } else if (Token::Match(tok, "struct|union {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3657:            if (Token::Match(tok->next()->link(), "} %name% ;|[")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3658:                tok = tok->next()->link()->tokAt(2);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3659:                continue;
    #####: 3660:            } else if (Token::simpleMatch(tok->next()->link(), "} ;")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3661:                tok = tok->next();
call    0 never executed
    #####: 3662:                continue;
        -: 3663:            }
        -: 3664:        }
        -: 3665:
        -: 3666:        // Borland C++: Skip all variables in the __published section.
        -: 3667:        // These are automatically initialized.
    21703: 3668:        else if (tok->str() == "__published:") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3669:            for (; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3670:                if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3671:                    tok = tok->link();
call    0 never executed
    #####: 3672:                if (Token::Match(tok->next(), "private:|protected:|public:"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3673:                    break;
        -: 3674:            }
    #####: 3675:            if (tok)
branch  0 never executed
branch  1 never executed
    #####: 3676:                continue;
        -: 3677:            else
    #####: 3678:                break;
        -: 3679:        }
        -: 3680:
        -: 3681:        // "private:" "public:" "protected:" etc
    21721: 3682:        else if (tok->str() == "public:") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       18: 3683:            varaccess = AccessControl::Public;
       18: 3684:            continue;
    21686: 3685:        } else if (tok->str() == "protected:") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 3686:            varaccess = AccessControl::Protected;
        1: 3687:            continue;
    21686: 3688:        } else if (tok->str() == "private:") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 3689:            varaccess = AccessControl::Private;
        2: 3690:            continue;
        -: 3691:        }
        -: 3692:
        -: 3693:        // Is it a forward declaration?
    21701: 3694:        else if (Token::Match(tok, "class|struct|union %name% ;")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       19: 3695:            tok = tok->tokAt(2);
call    0 returned 100%
       19: 3696:            continue;
        -: 3697:        }
        -: 3698:
        -: 3699:        // Borland C++: Ignore properties..
    21663: 3700:        else if (tok->str() == "__property")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3701:            continue;
        -: 3702:
        -: 3703:        // skip return, goto and delete
    21925: 3704:        else if (Token::Match(tok, "return|delete|goto")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     3458: 3705:            while (tok->next() &&
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
     2221: 3706:                   tok->next()->str() != ";" &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
branch  7 taken 79% (fallthrough)
branch  8 taken 21%
      981: 3707:                   tok->next()->str() != "}" /* ticket #4994 */) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      978: 3708:                tok = tok->next();
call    0 returned 100%
        -: 3709:            }
      262: 3710:            continue;
        -: 3711:        }
        -: 3712:
        -: 3713:        // skip case/default
    21538: 3714:        if (Token::Match(tok, "case|default")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      417: 3715:            while (tok->next() && !Token::Match(tok->next(), "[:;{}]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 51% (fallthrough)
branch  6 taken 49%
branch  7 taken 51% (fallthrough)
branch  8 taken 49%
      140: 3716:                tok = tok->next();
call    0 returned 100%
      137: 3717:            continue;
        -: 3718:        }
        -: 3719:
        -: 3720:        // Search for start of statement..
    21264: 3721:        else if (tok->previous() && !Token::Match(tok->previous(), ";|{|}|public:|protected:|private:"))
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 83% (fallthrough)
branch  6 taken 17%
branch  7 taken 80% (fallthrough)
branch  8 taken 20%
    16994: 3722:            continue;
     4270: 3723:        else if (tok->str() == ";")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      216: 3724:            continue;
        -: 3725:
     4054: 3726:        tok = checkVariable(tok, varaccess, settings);
call    0 returned 100%
        -: 3727:
     4054: 3728:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3729:            break;
        -: 3730:    }
        -: 3731:}
        -: 3732:
function _ZN5Scope13checkVariableEPK5Token13AccessControlPK8Settings called 4096 returned 100% blocks executed 63%
     4096: 3733:const Token *Scope::checkVariable(const Token *tok, AccessControl varaccess, const Settings* settings)
        -: 3734:{
        -: 3735:    // Is it a throw..?
     4096: 3736:    if (Token::Match(tok, "throw %any% (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3737:        Token::simpleMatch(tok->linkAt(2), ") ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3738:        return tok->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3739:    }
        -: 3740:
     4096: 3741:    if ((Token::Match(tok, "throw %any% :: %any% (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3742:         Token::simpleMatch(tok->linkAt(4), ") ;"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3743:        return tok->linkAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3744:    }
        -: 3745:
        -: 3746:    // friend?
     4096: 3747:    if (Token::Match(tok, "friend %type%") && tok->next()->varId() == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 3748:        const Token *next = Token::findmatch(tok->tokAt(2), ";|{");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3749:        if (next && next->str() == "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3750:            next = next->link();
call    0 never executed
    #####: 3751:        return next;
        -: 3752:    }
        -: 3753:
        -: 3754:    // skip const|volatile|static|mutable|extern
       86: 3755:    while (Token::Match(tok, "const|volatile|static|mutable|extern")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
       86: 3756:        tok = tok->next();
call    0 returned 100%
        -: 3757:    }
        -: 3758:
        -: 3759:    // the start of the type tokens does not include the above modifiers
     4096: 3760:    const Token *typestart = tok;
        -: 3761:
     4096: 3762:    if (Token::Match(tok, "class|struct|union|enum")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       32: 3763:        tok = tok->next();
call    0 returned 100%
        -: 3764:    }
        -: 3765:
        -: 3766:    // This is the start of a statement
     4096: 3767:    const Token *vartok = nullptr;
     4096: 3768:    const Token *typetok = nullptr;
        -: 3769:
     4096: 3770:    if (tok && isVariableDeclaration(tok, vartok, typetok)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
branch  8 taken 80%
        -: 3771:        // If the vartok was set in the if-blocks above, create a entry for this variable..
      799: 3772:        tok = vartok->next();
call    0 returned 100%
      893: 3773:        while (Token::Match(tok, "[|{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
       47: 3774:            tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 3775:
      799: 3776:        if (vartok->varId() == 0) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 3777:            if (!vartok->isBoolean())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 3778:                check->debugMessage(vartok, "Scope::checkVariable found variable \'" + vartok->str() + "\' with varid 0.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        1: 3779:            return tok;
        -: 3780:        }
        -: 3781:
      798: 3782:        const Type *vType = nullptr;
        -: 3783:
      798: 3784:        if (typetok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      798: 3785:            vType = findVariableTypeIncludingUsedNamespaces(check, this, typetok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3786:
      798: 3787:            const_cast<Token *>(typetok)->type(vType);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3788:        }
        -: 3789:
        -: 3790:        // skip "enum" or "struct"
      798: 3791:        if (Token::Match(typestart, "enum|struct"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
       20: 3792:            typestart = typestart->next();
call    0 returned 100%
        -: 3793:
      798: 3794:        addVariable(vartok, typestart, vartok->previous(), varaccess, vType, this, settings);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3795:    }
        -: 3796:
     4095: 3797:    return tok;
        -: 3798:}
        -: 3799:
function _ZNK5Scope11getVariableERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 440 returned 100% blocks executed 100%
      440: 3800:const Variable *Scope::getVariable(const std::string &varname) const
        -: 3801:{
      880: 3802:    std::list<Variable>::const_iterator iter;
call    0 returned 100%
call    1 returned 100%
        -: 3803:
      526: 3804:    for (iter = varlist.begin(); iter != varlist.end(); ++iter) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 76% (fallthrough)
branch  7 taken 24%
call    8 returned 100%
      400: 3805:        if (iter->name() == varname)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 79% (fallthrough)
branch  4 taken 22%
      314: 3806:            return &*iter;
call    0 returned 100%
        -: 3807:    }
        -: 3808:
      126: 3809:    return nullptr;
        -: 3810:}
        -: 3811:
function _ZL12skipPointersPK5Token called 3109 returned 100% blocks executed 80%
     3281: 3812:static const Token* skipPointers(const Token* tok)
        -: 3813:{
     3453: 3814:    while (Token::Match(tok, "*|&|&&")  || (Token::Match(tok, "( [*&]") && Token::Match(tok->link()->next(), "(|["))) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 5% (fallthrough)
branch 12 taken 95%
      172: 3815:        tok = tok->next();
call    0 returned 100%
      172: 3816:        if (tok->strAt(-1) == "(" && Token::Match(tok, "%type% ::"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3817:            tok = tok->tokAt(2);
call    0 never executed
        -: 3818:    }
        -: 3819:
     3109: 3820:    return tok;
        -: 3821:}
        -: 3822:
function _ZL25skipPointersAndQualifiersPK5Token called 3083 returned 100% blocks executed 67%
     3083: 3823:static const Token* skipPointersAndQualifiers(const Token* tok)
        -: 3824:{
     3083: 3825:    tok = skipPointers(tok);
call    0 returned 100%
     3083: 3826:    while (Token::Match(tok, "const|volatile")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3827:        tok = tok->next();
call    0 never executed
    #####: 3828:        tok = skipPointers(tok);
call    0 never executed
        -: 3829:    }
        -: 3830:
     3083: 3831:    return tok;
        -: 3832:}
        -: 3833:
function _ZNK5Scope21isVariableDeclarationEPK5TokenRS2_S3_ called 4096 returned 100% blocks executed 83%
     4096: 3834:bool Scope::isVariableDeclaration(const Token* const tok, const Token*& vartok, const Token*& typetok) const
        -: 3835:{
     4096: 3836:    const bool isCPP = check && check->mTokenizer->isCPP();
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
        -: 3837:
     4096: 3838:    if (isCPP && Token::Match(tok, "throw|new"))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        6: 3839:        return false;
        -: 3840:
     4090: 3841:    const bool isCPP11 = isCPP && check->mSettings->standards.cpp >= Standards::CPP11;
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
        -: 3842:
     4090: 3843:    if (isCPP11 && tok->str() == "using")
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3844:        return false;
        -: 3845:
     4090: 3846:    const Token* localTypeTok = skipScopeIdentifiers(tok);
call    0 returned 100%
     4090: 3847:    const Token* localVarTok = nullptr;
        -: 3848:
     4090: 3849:    if (Token::Match(localTypeTok, "%type% <")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       29: 3850:        if (Token::Match(tok, "const_cast|dynamic_cast|reinterpret_cast|static_cast <"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3851:            return false;
        -: 3852:
       29: 3853:        const Token* closeTok = localTypeTok->next()->link();
call    0 returned 100%
call    1 returned 100%
       29: 3854:        if (closeTok) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       26: 3855:            localVarTok = skipPointers(closeTok->next());
call    0 returned 100%
call    1 returned 100%
        -: 3856:
       26: 3857:            if (Token::Match(localVarTok, ":: %type% %name% [;=({]")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3858:                if (localVarTok->strAt(3) != "(" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3859:                    Token::Match(localVarTok->linkAt(3), "[)}] ;")) {
call    0 never executed
call    1 never executed
    #####: 3860:                    localTypeTok = localVarTok->next();
call    0 never executed
    #####: 3861:                    localVarTok = localVarTok->tokAt(2);
call    0 never executed
        -: 3862:                }
        -: 3863:            }
        -: 3864:        }
     4061: 3865:    } else if (Token::Match(localTypeTok, "%type%")) {
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
     3083: 3866:        localVarTok = skipPointersAndQualifiers(localTypeTok->next());
call    0 returned 100%
call    1 returned 100%
        -: 3867:    }
        -: 3868:
     4090: 3869:    if (!localVarTok)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      981: 3870:        return false;
        -: 3871:
     3109: 3872:    if (localVarTok->str() == "const")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3873:        localVarTok = localVarTok->next();
call    0 never executed
        -: 3874:
     3109: 3875:    if (Token::Match(localVarTok, "%name% ;|=") || (localVarTok && localVarTok->varId() && localVarTok->strAt(1) == ":")) {
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 8% (fallthrough)
branch 11 taken 92%
branch 12 taken 24% (fallthrough)
branch 13 taken 76%
      744: 3876:        vartok = localVarTok;
      744: 3877:        typetok = localTypeTok;
     2365: 3878:    } else if (Token::Match(localVarTok, "%name% )|[") && localVarTok->str() != "operator") {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
       46: 3879:        vartok = localVarTok;
       46: 3880:        typetok = localTypeTok;
     2328: 3881:    } else if (localVarTok && localVarTok->varId() && Token::Match(localVarTok, "%name% (|{") &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
branch  6 taken 90% (fallthrough)
branch  7 taken 10%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
        9: 3882:               Token::Match(localVarTok->next()->link(), ")|} ;")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        9: 3883:        vartok = localVarTok;
        9: 3884:        typetok = localTypeTok;
     2315: 3885:    } else if (type == eCatch &&
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        5: 3886:               Token::Match(localVarTok, "%name% )")) {
call    0 returned 100%
    #####: 3887:        vartok = localVarTok;
    #####: 3888:        typetok = localTypeTok;
        -: 3889:    }
        -: 3890:
     3109: 3891:    return nullptr != vartok;
        -: 3892:}
        -: 3893:
function _ZN5Scope7addEnumEPK5Tokenb called 10 returned 100% blocks executed 78%
       10: 3894:const Token * Scope::addEnum(const Token * tok, bool isCpp)
        -: 3895:{
       10: 3896:    const Token * tok2 = tok->next();
call    0 returned 100%
        -: 3897:
        -: 3898:    // skip over class if present
       10: 3899:    if (isCpp && tok2->str() == "class")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3900:        tok2 = tok2->next();
call    0 never executed
        -: 3901:
        -: 3902:    // skip over name
       10: 3903:    tok2 = tok2->next();
call    0 returned 100%
        -: 3904:
        -: 3905:    // save type if present
       10: 3906:    if (tok2->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3907:        tok2 = tok2->next();
call    0 never executed
        -: 3908:
    #####: 3909:        enumType = tok2;
    #####: 3910:        tok2 = tok2->next();
call    0 never executed
        -: 3911:    }
        -: 3912:
        -: 3913:    // add enumerators
       10: 3914:    if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       10: 3915:        const Token * end = tok2->link();
call    0 returned 100%
       10: 3916:        tok2 = tok2->next();
call    0 returned 100%
        -: 3917:
       26: 3918:        while (Token::Match(tok2, "%name% =|,|}") ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
    #####: 3919:               (Token::Match(tok2, "%name% (") && Token::Match(tok2->linkAt(1), ") ,|}"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       12: 3920:            Enumerator enumerator(this);
call    0 returned 100%
        -: 3921:
        -: 3922:            // save enumerator name
       12: 3923:            enumerator.name = tok2;
        -: 3924:
        -: 3925:            // skip over name
       12: 3926:            tok2 = tok2->next();
call    0 returned 100%
        -: 3927:
       12: 3928:            if (tok2->str() == "=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        -: 3929:                // skip over "="
        8: 3930:                tok2 = tok2->next();
call    0 returned 100%
        -: 3931:
        8: 3932:                if (tok2->str() == "}")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3933:                    return nullptr;
        -: 3934:
        8: 3935:                enumerator.start = tok2;
        -: 3936:
       24: 3937:                while (!Token::Match(tok2, ",|}")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        8: 3938:                    if (tok2->link())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3939:                        tok2 = tok2->link();
call    0 never executed
        8: 3940:                    enumerator.end = tok2;
        8: 3941:                    tok2 = tok2->next();
call    0 returned 100%
        -: 3942:                }
        4: 3943:            } else if (tok2->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 3944:                // skip over unknown macro
    #####: 3945:                tok2 = tok2->link()->next();
call    0 never executed
call    1 never executed
        -: 3946:            }
        -: 3947:
       12: 3948:            if (tok2->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        2: 3949:                enumeratorList.push_back(enumerator);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 3950:                tok2 = tok2->next();
call    0 returned 100%
       10: 3951:            } else if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       10: 3952:                enumeratorList.push_back(enumerator);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       10: 3953:                break;
        -: 3954:            }
        -: 3955:        }
        -: 3956:
       10: 3957:        if (tok2 == end) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10: 3958:            tok2 = tok2->next();
call    0 returned 100%
        -: 3959:
       10: 3960:            if (tok2 && tok2->str() != ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3961:                tok2 = nullptr;
        -: 3962:        } else
    #####: 3963:            tok2 = nullptr;
        -: 3964:    } else
    #####: 3965:        tok2 = nullptr;
        -: 3966:
       10: 3967:    return tok2;
        -: 3968:}
        -: 3969:
function _ZNK14SymbolDatabase14findEnumeratorEPK5Token called 3762 returned 100% blocks executed 91%
     3762: 3970:const Enumerator * SymbolDatabase::findEnumerator(const Token * tok) const
        -: 3971:{
     3762: 3972:    const Scope * scope = tok->scope();
call    0 returned 100%
        -: 3973:
     3762: 3974:    const std::string &tokStr = tok->str();
call    0 returned 100%
        -: 3975:
     3762: 3976:    if (mTokensThatAreNotEnumeratorValues.find(tokStr) != mTokensThatAreNotEnumeratorValues.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 22% (fallthrough)
branch  8 taken 78%
call    9 never executed
      811: 3977:        return nullptr;
        -: 3978:    }
        -: 3979:
        -: 3980:    // check for qualified name
     2951: 3981:    if (tok->strAt(-1) == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -: 3982:        // find first scope
      174: 3983:        const Token *tok1 = tok;
      510: 3984:        while (Token::Match(tok1->tokAt(-2), "%name% ::"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 49% (fallthrough)
branch  3 taken 51%
      168: 3985:            tok1 = tok1->tokAt(-2);
call    0 returned 100%
        -: 3986:
      174: 3987:        if (tok1->strAt(-1) == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        7: 3988:            scope = &scopeList.front();
call    0 returned 100%
        -: 3989:        else {
        -: 3990:            // FIXME search base class here
        -: 3991:
        -: 3992:            // find first scope
      363: 3993:            while (scope && scope->nestedIn) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 38% (fallthrough)
branch  3 taken 62%
      101: 3994:                const Scope * temp = scope->nestedIn->findRecordInNestedList(tok1->str());
call    0 returned 100%
call    1 returned 100%
      101: 3995:                if (temp) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        3: 3996:                    scope = temp;
        3: 3997:                    break;
        -: 3998:                }
       98: 3999:                scope = scope->nestedIn;
        -: 4000:            }
        -: 4001:        }
        -: 4002:
      174: 4003:        if (scope) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      174: 4004:            tok1 = tok1->tokAt(2);
call    0 returned 100%
      178: 4005:            while (scope && Token::Match(tok1, "%name% ::")) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        2: 4006:                scope = scope->findRecordInNestedList(tok1->str());
call    0 returned 100%
call    1 returned 100%
        2: 4007:                tok1 = tok1->tokAt(2);
call    0 returned 100%
        -: 4008:            }
        -: 4009:
      174: 4010:            if (scope) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      172: 4011:                const Enumerator * enumerator = scope->findEnumerator(tokStr);
call    0 returned 100%
        -: 4012:
      172: 4013:                if (enumerator) // enum class
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4014:                    return enumerator;
        -: 4015:                // enum
        -: 4016:                else {
      393: 4017:                    for (std::list<Scope *>::const_iterator it = scope->nestedList.begin(), end = scope->nestedList.end(); it != end; ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 57% (fallthrough)
branch  4 taken 43%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 98%
branch  8 taken 2%
call    9 returned 100%
branch 10 taken 98%
branch 11 taken 2%
      224: 4018:                        enumerator = (*it)->findEnumerator(tokStr);
call    0 returned 100%
call    1 returned 100%
        -: 4019:
      224: 4020:                        if (enumerator)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3: 4021:                            return enumerator;
        -: 4022:                    }
        -: 4023:                }
        -: 4024:            }
        -: 4025:        }
        -: 4026:    } else {
     2777: 4027:        const Enumerator * enumerator = scope->findEnumerator(tokStr);
call    0 returned 100%
        -: 4028:
     2777: 4029:        if (enumerator)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4030:            return enumerator;
        -: 4031:
     4836: 4032:        for (std::list<Scope *>::const_iterator s = scope->nestedList.begin(); s != scope->nestedList.end(); ++s) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 99%
branch  9 taken 1%
     2066: 4033:            enumerator = (*s)->findEnumerator(tokStr);
call    0 returned 100%
call    1 returned 100%
        -: 4034:
     2066: 4035:            if (enumerator)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        7: 4036:                return enumerator;
        -: 4037:        }
        -: 4038:
     2770: 4039:        if (scope->definedType) {
branch  0 taken 98%
branch  1 taken 2%
     2708: 4040:            const std::vector<Type::BaseInfo> & derivedFrom = scope->definedType->derivedFrom;
     2711: 4041:            for (const Type::BaseInfo & i : derivedFrom) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
        3: 4042:                const Type *derivedFromType = i.type;
        3: 4043:                if (derivedFromType && derivedFromType ->classScope) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 4044:                    enumerator = derivedFromType->classScope->findEnumerator(tokStr);
call    0 never executed
        -: 4045:
    #####: 4046:                    if (enumerator)
branch  0 never executed
branch  1 never executed
    #####: 4047:                        return enumerator;
        -: 4048:                }
        -: 4049:            }
        -: 4050:        }
        -: 4051:
     8396: 4052:        while (scope->nestedIn) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     2813: 4053:            if (scope->type == Scope::eFunction && scope->functionOf)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       17: 4054:                scope = scope->functionOf;
        -: 4055:            else
     2796: 4056:                scope = scope->nestedIn;
        -: 4057:
     2813: 4058:            enumerator = scope->findEnumerator(tokStr);
call    0 returned 100%
        -: 4059:
     2813: 4060:            if (enumerator)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4061:                return enumerator;
        -: 4062:
     6052: 4063:            for (std::list<Scope*>::const_iterator s = scope->nestedList.begin(); s != scope->nestedList.end(); ++s) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 54% (fallthrough)
branch  5 taken 46%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
     3239: 4064:                enumerator = (*s)->findEnumerator(tokStr);
call    0 returned 100%
call    1 returned 100%
        -: 4065:
     3239: 4066:                if (enumerator)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4067:                    return enumerator;
        -: 4068:            }
        -: 4069:        }
        -: 4070:    }
        -: 4071:
     2941: 4072:    mTokensThatAreNotEnumeratorValues.insert(tokStr);
call    0 returned 100%
call    1 returned 100%
        -: 4073:
     2941: 4074:    return nullptr;
        -: 4075:}
        -: 4076:
        -: 4077://---------------------------------------------------------------------------
        -: 4078:
function _ZNK14SymbolDatabase22findVariableTypeInBaseEPK5ScopePK5Token called 1264 returned 100% blocks executed 80%
     1264: 4079:const Type* SymbolDatabase::findVariableTypeInBase(const Scope* scope, const Token* typeTok) const
        -: 4080:{
     1264: 4081:    if (scope && scope->definedType && !scope->definedType->derivedFrom.empty()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
call    4 returned 100%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        6: 4082:        const std::vector<Type::BaseInfo> &derivedFrom = scope->definedType->derivedFrom;
       12: 4083:        for (const Type::BaseInfo & i : derivedFrom) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
        6: 4084:            const Type *base = i.type;
        6: 4085:            if (base && base->classScope) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 4086:                const Type * type = base->classScope->findType(typeTok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 4087:                if (type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4088:                    return type;
        1: 4089:                type = findVariableTypeInBase(base->classScope, typeTok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 4090:                if (type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4091:                    return type;
        -: 4092:            }
        -: 4093:        }
        -: 4094:    }
        -: 4095:
     1264: 4096:    return nullptr;
        -: 4097:}
        -: 4098:
        -: 4099://---------------------------------------------------------------------------
        -: 4100:
function _ZNK14SymbolDatabase16findVariableTypeEPK5ScopePK5Token called 1296 returned 100% blocks executed 73%
     1296: 4101:const Type* SymbolDatabase::findVariableType(const Scope *start, const Token *typeTok) const
        -: 4102:{
     1296: 4103:    const Scope *scope = start;
        -: 4104:
        -: 4105:    // check if type does not have a namespace
     1296: 4106:    if (typeTok->strAt(-1) != "::" && typeTok->strAt(1) != "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
branch  8 taken 90% (fallthrough)
branch  9 taken 10%
        -: 4107:        // check if type same as scope
     1162: 4108:        if (start->isClassOrStruct() && typeTok->str() == start->className)
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 5% (fallthrough)
branch  6 taken 95%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        8: 4109:            return start->definedType;
        -: 4110:
     4344: 4111:        while (scope) {
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 4112:            // look for type in this scope
     2006: 4113:            const Type * type = scope->findType(typeTok->str());
call    0 returned 100%
call    1 returned 100%
        -: 4114:
     2006: 4115:            if (type)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
      411: 4116:                return type;
        -: 4117:
        -: 4118:            // look for type in base classes if possible
     1595: 4119:            if (scope->isClassOrStruct()) {
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
      142: 4120:                type = findVariableTypeInBase(scope, typeTok);
call    0 returned 100%
        -: 4121:
      142: 4122:                if (type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4123:                    return type;
        -: 4124:            }
        -: 4125:
        -: 4126:            // check if in member function class to see if it's present in class
     1595: 4127:            if (scope->type == Scope::eFunction && scope->functionOf) {
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4128:                const Scope *scope1 = scope->functionOf;
        -: 4129:
    #####: 4130:                type = scope1->findType(typeTok->str());
call    0 never executed
call    1 never executed
        -: 4131:
    #####: 4132:                if (type)
branch  0 never executed
branch  1 never executed
    #####: 4133:                    return type;
        -: 4134:
    #####: 4135:                type = findVariableTypeInBase(scope1, typeTok);
call    0 never executed
        -: 4136:
    #####: 4137:                if (type)
branch  0 never executed
branch  1 never executed
    #####: 4138:                    return type;
        -: 4139:            }
        -: 4140:
     1595: 4141:            scope = scope->nestedIn;
        -: 4142:        }
        -: 4143:    }
        -: 4144:
        -: 4145:    // check for a qualified name and use it when given
      134: 4146:    else if (typeTok->strAt(-1) == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
        -: 4147:        // check if type is not part of qualification
      113: 4148:        if (typeTok->strAt(1) == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4149:            return nullptr;
        -: 4150:
        -: 4151:        // find start of qualified function name
      113: 4152:        const Token *tok1 = typeTok;
        -: 4153:
      568: 4154:        while (Token::Match(tok1->tokAt(-2), "%type% ::") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
      113: 4155:               (Token::simpleMatch(tok1->tokAt(-2), "> ::") && tok1->linkAt(-2) && Token::Match(tok1->linkAt(-2)->tokAt(-1), "%type%"))) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
      114: 4156:            if (tok1->strAt(-1) == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      114: 4157:                tok1 = tok1->tokAt(-2);
call    0 returned 100%
        -: 4158:            else
    #####: 4159:                tok1 = tok1->linkAt(-2)->tokAt(-1);
call    0 never executed
call    1 never executed
        -: 4160:        }
        -: 4161:
        -: 4162:        // check for global scope
      113: 4163:        if (tok1->strAt(-1) == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4164:            scope = &scopeList.front();
call    0 never executed
        -: 4165:
    #####: 4166:            scope = scope->findRecordInNestedList(tok1->str());
call    0 never executed
call    1 never executed
        -: 4167:        }
        -: 4168:
        -: 4169:        // find start of qualification
        -: 4170:        else {
      419: 4171:            while (scope) {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
      155: 4172:                if (scope->className == tok1->str())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4173:                    break;
        -: 4174:                else {
      155: 4175:                    const Scope *scope1 = scope->findRecordInNestedList(tok1->str());
call    0 returned 100%
call    1 returned 100%
        -: 4176:
      155: 4177:                    if (scope1) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2: 4178:                        scope = scope1;
        2: 4179:                        break;
      153: 4180:                    } else if (scope->type == Scope::eFunction && scope->functionOf)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        1: 4181:                        scope = scope->functionOf;
        -: 4182:                    else
      152: 4183:                        scope = scope->nestedIn;
        -: 4184:                }
        -: 4185:            }
        -: 4186:        }
        -: 4187:
      113: 4188:        if (scope) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 4189:            // follow qualification
       10: 4190:            while (scope && (Token::Match(tok1, "%type% ::") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
        2: 4191:                             (Token::Match(tok1, "%type% <") && Token::simpleMatch(tok1->linkAt(1), "> ::")))) {
call    0 returned 100%
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        2: 4192:                if (tok1->strAt(1) == "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 4193:                    tok1 = tok1->tokAt(2);
call    0 returned 100%
        -: 4194:                else
    #####: 4195:                    tok1 = tok1->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
        2: 4196:                const Scope * temp = scope->findRecordInNestedList(tok1->str());
call    0 returned 100%
call    1 returned 100%
        2: 4197:                if (!temp) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4198:                    // look in base classes
    #####: 4199:                    const Type * type = findVariableTypeInBase(scope, tok1);
call    0 never executed
        -: 4200:
    #####: 4201:                    if (type)
branch  0 never executed
branch  1 never executed
    #####: 4202:                        return type;
        -: 4203:                }
        2: 4204:                scope = temp;
        -: 4205:            }
        -: 4206:
        2: 4207:            if (scope && scope->definedType)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 4208:                return scope->definedType;
        -: 4209:        }
        -: 4210:    }
        -: 4211:
      875: 4212:    return nullptr;
        -: 4213:}
        -: 4214:
function _ZNK5Scope25hasInlineOrLambdaFunctionEv called 0 returned 0% blocks executed 0%
    #####: 4215:bool Scope::hasInlineOrLambdaFunction() const
        -: 4216:{
    #####: 4217:    for (const Scope *s : nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -: 4218:        // Inline function
    #####: 4219:        if (s->type == Scope::eUnconditional && Token::simpleMatch(s->bodyStart->previous(), ") {"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4220:            return true;
        -: 4221:        // Lambda function
    #####: 4222:        if (s->type == Scope::eLambda)
branch  0 never executed
branch  1 never executed
    #####: 4223:            return true;
        -: 4224:    }
    #####: 4225:    return false;
        -: 4226:}
        -: 4227:
function _ZNK5Scope18findFunctionInBaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiRNSt7__debug6vectorIPK8FunctionSaISC_EEE called 2678 returned 100% blocks executed 76%
     2678: 4228:void Scope::findFunctionInBase(const std::string & name, nonneg int args, std::vector<const Function *> & matches) const
        -: 4229:{
     2678: 4230:    if (isClassOrStruct() && definedType && !definedType->derivedFrom.empty()) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
       17: 4231:        const std::vector<Type::BaseInfo> &derivedFrom = definedType->derivedFrom;
       34: 4232:        for (const Type::BaseInfo & i : derivedFrom) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       17: 4233:            const Type *base = i.type;
       17: 4234:            if (base && base->classScope) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 4235:                if (base->classScope == this) // Ticket #5120, #5125: Recursive class; tok should have been found already
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4236:                    continue;
        -: 4237:
        3: 4238:                for (std::multimap<std::string, const Function *>::const_iterator it = base->classScope->functionMap.find(name); it != base->classScope->functionMap.end() && it->first == name; ++it) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 33% (fallthrough)
branch  6 taken 67%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 33% (fallthrough)
branch 15 taken 67%
call   16 returned 100%
call   17 returned 100%
call   18 never executed
        1: 4239:                    const Function *func = it->second;
call    0 returned 100%
        1: 4240:                    if (args == func->argCount() || (args < func->argCount() && args >= func->minArgCount())) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        1: 4241:                        matches.push_back(func);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4242:                    }
        -: 4243:                }
        -: 4244:
        2: 4245:                base->classScope->findFunctionInBase(name, args, matches);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4246:            }
        -: 4247:        }
        -: 4248:    }
     2678: 4249:}
        -: 4250:
        -: 4251://---------------------------------------------------------------------------
        -: 4252:
function _ZL22checkVariableCallMatchPK8VariableS1_RmS2_S2_ called 454 returned 100% blocks executed 9%
      454: 4253:static void checkVariableCallMatch(const Variable* callarg, const Variable* funcarg, size_t& same, size_t& fallback1, size_t& fallback2)
        -: 4254:{
      454: 4255:    if (callarg) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      424: 4256:        ValueType::MatchResult res = ValueType::matchParameter(callarg->valueType(), callarg, funcarg);
call    0 returned 100%
call    1 returned 100%
      424: 4257:        if (res == ValueType::MatchResult::SAME) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      420: 4258:            same++;
      420: 4259:            return;
        -: 4260:        }
        4: 4261:        if (res == ValueType::MatchResult::FALLBACK1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 4262:            fallback1++;
        4: 4263:            return;
        -: 4264:        }
    #####: 4265:        if (res == ValueType::MatchResult::FALLBACK2) {
branch  0 never executed
branch  1 never executed
    #####: 4266:            fallback2++;
    #####: 4267:            return;
        -: 4268:        }
    #####: 4269:        if (res == ValueType::MatchResult::NOMATCH)
branch  0 never executed
branch  1 never executed
    #####: 4270:            return;
        -: 4271:
    #####: 4272:        bool ptrequals = callarg->isArrayOrPointer() == funcarg->isArrayOrPointer();
call    0 never executed
call    1 never executed
    #####: 4273:        bool constEquals = !callarg->isArrayOrPointer() || ((callarg->typeStartToken()->strAt(-1) == "const") == (funcarg->typeStartToken()->strAt(-1) == "const"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4274:        if (ptrequals && constEquals &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4275:            callarg->typeStartToken()->str() == funcarg->typeStartToken()->str() &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4276:            callarg->typeStartToken()->isUnsigned() == funcarg->typeStartToken()->isUnsigned() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4277:            callarg->typeStartToken()->isLong() == funcarg->typeStartToken()->isLong()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4278:            same++;
    #####: 4279:        } else if (callarg->isArrayOrPointer()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4280:            if (ptrequals && constEquals && funcarg->typeStartToken()->str() == "void")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4281:                fallback1++;
    #####: 4282:            else if (constEquals && funcarg->isStlStringType() && Token::Match(callarg->typeStartToken(), "char|wchar_t"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4283:                fallback2++;
    #####: 4284:        } else if (ptrequals) {
branch  0 never executed
branch  1 never executed
    #####: 4285:            const bool takesInt = Token::Match(funcarg->typeStartToken(), "char|short|int|long");
call    0 never executed
call    1 never executed
    #####: 4286:            const bool takesFloat = Token::Match(funcarg->typeStartToken(), "float|double");
call    0 never executed
call    1 never executed
    #####: 4287:            const bool passesInt = Token::Match(callarg->typeStartToken(), "char|short|int|long");
call    0 never executed
call    1 never executed
    #####: 4288:            const bool passesFloat = Token::Match(callarg->typeStartToken(), "float|double");
call    0 never executed
call    1 never executed
    #####: 4289:            if ((takesInt && passesInt) || (takesFloat && passesFloat))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4290:                fallback1++;
    #####: 4291:            else if ((takesInt && passesFloat) || (takesFloat && passesInt))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4292:                fallback2++;
        -: 4293:        }
        -: 4294:    }
        -: 4295:}
        -: 4296:
function _ZL13getTypeStringPK5Token called 74 returned 100% blocks executed 52%
       74: 4297:static std::string getTypeString(const Token *typeToken)
        -: 4298:{
       74: 4299:    if (!typeToken)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4300:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
       10: 4301:    while (Token::Match(typeToken, "%name%|*|&|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       84: 4302:        if (typeToken->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
       20: 4303:            std::string ret;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       30: 4304:            while (Token::Match(typeToken, ":: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
       10: 4305:                ret += "::" + typeToken->strAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
       10: 4306:                typeToken = typeToken->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4307:            }
       10: 4308:            if (typeToken->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4309:                for (const Token *tok = typeToken; tok != typeToken->link(); tok = tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4310:                    ret += tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4311:                ret += ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4312:            }
       10: 4313:            return ret;
call    0 returned 100%
        -: 4314:        }
       74: 4315:        if (Token::Match(typeToken, "%name% const| %var%|*|&")) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
       64: 4316:            return typeToken->str();
call    0 returned 100%
call    1 returned 100%
        -: 4317:        }
       10: 4318:        typeToken = typeToken->next();
call    0 returned 100%
        -: 4319:    }
    #####: 4320:    return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 4321:}
        -: 4322:
function _ZNK5Scope12findFunctionEPK5Tokenb called 2676 returned 100% blocks executed 71%
     2676: 4323:const Function* Scope::findFunction(const Token *tok, bool requireConst) const
        -: 4324:{
        -: 4325:    // make sure this is a function call
     2676: 4326:    const Token *end = tok->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     2676: 4327:    if (!end)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4328:        return nullptr;
        -: 4329:
     5352: 4330:    const std::vector<const Token *> arguments = getArguments(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 4331:
     5352: 4332:    std::vector<const Function *> matches;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4333:
        -: 4334:    // find all the possible functions that could match
     2676: 4335:    const std::size_t args = arguments.size();
call    0 returned 100%
        -: 4336:
function _ZZNK5Scope12findFunctionEPK5TokenbENKUlPKS_E_clES4_ called 2676 returned 100% blocks executed 86%
     2676: 4337:    auto addMatchingFunctions = [&](const Scope *scope) {
     4163: 4338:        for (std::multimap<std::string, const Function *>::const_iterator it = scope->functionMap.find(tok->str()); it != scope->functionMap.cend() && it->first == tok->str(); ++it) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 44% (fallthrough)
branch  7 taken 56%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 81% (fallthrough)
branch 12 taken 19%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
call   15 returned 100%
branch 16 taken 36% (fallthrough)
branch 17 taken 64%
call   18 returned 100%
call   19 returned 100%
call   20 never executed
     1487: 4339:            const Function *func = it->second;
call    0 returned 100%
     3063: 4340:            if (args == func->argCount() ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
     2974: 4341:                (func->isVariadic() && args >= (func->argCount() - 1)) ||
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 41% (fallthrough)
branch  7 taken 59%
       52: 4342:                (args < func->argCount() && args >= func->minArgCount())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     1450: 4343:                matches.push_back(func);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4344:            }
        -: 4345:        }
     5352: 4346:    };
        -: 4347:
     2676: 4348:    addMatchingFunctions(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4349:
        -: 4350:    // check in anonumous namespaces
     6039: 4351:    for (const Scope *nestedScope : nestedList) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 56% (fallthrough)
branch  4 taken 44%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
     3363: 4352:        if (nestedScope->type == eNamespace && nestedScope->className.empty())
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4353:            addMatchingFunctions(nestedScope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4354:    }
        -: 4355:
        -: 4356:    // check in base classes
     2676: 4357:    findFunctionInBase(tok->str(), args, matches);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 4358:
     2676: 4359:    const Function* fallback1Func = nullptr;
     2676: 4360:    const Function* fallback2Func = nullptr;
        -: 4361:
        -: 4362:    // check each function against the arguments in the function call for a match
     3003: 4363:    for (std::size_t i = 0; i < matches.size();) {
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
     1440: 4364:        bool constFallback = false;
     1440: 4365:        const Function * func = matches[i];
call    0 returned 100%
     1440: 4366:        size_t same = 0;
        -: 4367:
     1440: 4368:        if (requireConst && !func->isConst()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4369:            i++;
    #####: 4370:            continue;
        -: 4371:        }
        -: 4372:
     1440: 4373:        if (!requireConst || !func->isConst()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
        -: 4374:            // get the function this call is in
     1438: 4375:            const Scope * scope = tok->scope();
call    0 returned 100%
        -: 4376:
        -: 4377:            // check if this function is a member function
     1438: 4378:            if (scope && scope->functionOf && scope->functionOf->isClassOrStruct() && scope->function) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        -: 4379:                // check if isConst mismatches
       10: 4380:                if (scope->function->isConst() != func->isConst()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4381:                    if (scope->function->isConst()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4382:                        ++i;
    #####: 4383:                        continue;
        -: 4384:                    }
    #####: 4385:                    constFallback = true;
        -: 4386:                }
        -: 4387:            }
        -: 4388:        }
        -: 4389:
     1440: 4390:        size_t fallback1 = 0;
     1440: 4391:        size_t fallback2 = 0;
     1440: 4392:        bool erased = false;
     2301: 4393:        for (std::size_t j = 0; j < args; ++j) {
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 4394:
        -: 4395:            // don't check variadic arguments
      862: 4396:            if (func->isVariadic() && j > (func->argCount() - 1)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4397:                break;
        -: 4398:            }
      862: 4399:            const Variable *funcarg = func->getArgumentVar(j);
call    0 returned 100%
        -: 4400:
      862: 4401:            if (!arguments[j]->valueType()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 43% (fallthrough)
branch  3 taken 57%
      372: 4402:                const Token *vartok = arguments[j];
call    0 returned 100%
      372: 4403:                int pointer = 0;
      374: 4404:                while (vartok && (vartok->isUnaryOp("&") || vartok->isUnaryOp("*"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 99% (fallthrough)
branch 10 taken 1%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 taken 99% (fallthrough)
branch 21 taken 1%
call   22 returned 100%
branch 23 taken 99% (fallthrough)
branch 24 taken 1%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0%
call   28 returned 100%
branch 29 taken 100% (fallthrough)
branch 30 taken 0%
call   31 returned 100%
branch 32 taken 1% (fallthrough)
branch 33 taken 99%
branch 34 never executed
branch 35 never executed
call   36 never executed
branch 37 never executed
branch 38 never executed
call   39 never executed
branch 40 never executed
branch 41 never executed
call   42 never executed
branch 43 never executed
branch 44 never executed
call   45 never executed
        1: 4405:                    pointer += vartok->isUnaryOp("&") ? 1 : -1;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        1: 4406:                    vartok = vartok->astOperand1();
call    0 returned 100%
        -: 4407:                }
      372: 4408:                if (vartok && vartok->variable()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
branch  5 taken 9% (fallthrough)
branch  6 taken 91%
       32: 4409:                    const Token *callArgTypeToken = vartok->variable()->typeStartToken();
call    0 returned 100%
call    1 returned 100%
       32: 4410:                    const Token *funcArgTypeToken = funcarg->typeStartToken();
call    0 returned 100%
        -: 4411:
function _ZZNK5Scope12findFunctionEPK5TokenbENKUlS2_E0_clES2_ called 64 returned 100% blocks executed 79%
       64: 4412:                    auto parseDecl = [](const Token *typeToken) -> ValueType {
       64: 4413:                        ValueType ret;
call    0 returned 100%
       70: 4414:                        while (Token::Match(typeToken->previous(), "%name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
        3: 4415:                            typeToken = typeToken->previous();
call    0 returned 100%
      133: 4416:                        while (Token::Match(typeToken, "%name%|*|&|::|<"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 68% (fallthrough)
branch  4 taken 32%
        -: 4417:                        {
      133: 4418:                            if (typeToken->str() == "const")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        3: 4419:                                ret.constness |= (1 << ret.pointer);
      130: 4420:                            else if (typeToken->str() == "*")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4421:                                ret.pointer++;
      130: 4422:                            else if (typeToken->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4423:                                if (!typeToken->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4424:                                    break;
    #####: 4425:                                typeToken = typeToken->link();
call    0 never executed
        -: 4426:                            }
      133: 4427:                            typeToken = typeToken->next();
call    0 returned 100%
        -: 4428:                        }
       64: 4429:                        return ret;
call    0 never executed
        -: 4430:                    };
        -: 4431:
       32: 4432:                    const std::string type1 = getTypeString(callArgTypeToken);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
       32: 4433:                    const std::string type2 = getTypeString(funcArgTypeToken);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0%
branch  5 taken 100%
call    6 never executed
       32: 4434:                    if (!type1.empty() && type1 == type2) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       64: 4435:                        ValueType callArgType = parseDecl(callArgTypeToken);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0%
branch  6 taken 100%
call    7 never executed
       32: 4436:                        callArgType.pointer += pointer;
       64: 4437:                        ValueType funcArgType = parseDecl(funcArgTypeToken);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        -: 4438:
       32: 4439:                        callArgType.sign = funcArgType.sign = ValueType::Sign::SIGNED;
       32: 4440:                        callArgType.type = funcArgType.type = ValueType::Type::INT;
        -: 4441:
       32: 4442:                        ValueType::MatchResult res = ValueType::matchParameter(&callArgType, &funcArgType);
call    0 returned 100%
       32: 4443:                        if (res == ValueType::MatchResult::SAME)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       32: 4444:                            ++same;
    #####: 4445:                        else if (res == ValueType::MatchResult::FALLBACK1)
branch  0 never executed
branch  1 never executed
    #####: 4446:                            ++fallback1;
    #####: 4447:                        else if (res == ValueType::MatchResult::FALLBACK2)
branch  0 never executed
branch  1 never executed
    #####: 4448:                            ++fallback2;
       32: 4449:                        continue;
        -: 4450:                    }
        -: 4451:                }
        -: 4452:            }
        -: 4453:
        -: 4454:            // check for a match with a variable
      830: 4455:            if (Token::Match(arguments[j], "%var% ,|)")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 55% (fallthrough)
branch  5 taken 45%
      454: 4456:                const Variable * callarg = arguments[j]->variable();
call    0 returned 100%
call    1 returned 100%
      454: 4457:                checkVariableCallMatch(callarg, funcarg, same, fallback1, fallback2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4458:            }
        -: 4459:
      376: 4460:            else if (funcarg->isStlStringType() && arguments[j]->valueType() && arguments[j]->valueType()->pointer == 1 && arguments[j]->valueType()->type == ValueType::Type::CHAR)
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 66% (fallthrough)
branch  6 taken 34%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 4% (fallthrough)
branch 10 taken 96%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 4461:                fallback2++;
        -: 4462:
        -: 4463:            // check for a match with nullptr
      376: 4464:            else if (funcarg->isPointer() && Token::Match(arguments[j], "nullptr|NULL ,|)"))
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        1: 4465:                same++;
        -: 4466:
      375: 4467:            else if (arguments[j]->isNumber() && funcarg->isPointer() && MathLib::isNullValue(arguments[j]->str()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 4468:                fallback1++;
        -: 4469:
        -: 4470:            // Try to evaluate the apparently more complex expression
        -: 4471:            else {
      375: 4472:                const Token *vartok = arguments[j];
call    0 returned 100%
      383: 4473:                while (vartok->isUnaryOp("&") || vartok->isUnaryOp("*"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
branch 18 taken 99% (fallthrough)
branch 19 taken 1%
call   20 returned 100%
branch 21 taken 99% (fallthrough)
branch 22 taken 1%
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0%
call   26 returned 100%
branch 27 taken 100% (fallthrough)
branch 28 taken 0%
call   29 returned 100%
branch 30 taken 1% (fallthrough)
branch 31 taken 99%
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
call   40 never executed
branch 41 never executed
branch 42 never executed
call   43 never executed
        4: 4474:                    vartok = vartok->astOperand1();
call    0 returned 100%
      375: 4475:                ValueType::MatchResult res = ValueType::matchParameter(arguments[j]->valueType(), vartok->variable(), funcarg);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
      375: 4476:                if (res == ValueType::MatchResult::SAME)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       56: 4477:                    ++same;
      319: 4478:                else if (res == ValueType::MatchResult::FALLBACK1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4479:                    ++fallback1;
      319: 4480:                else if (res == ValueType::MatchResult::FALLBACK2)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 4481:                    ++fallback2;
      318: 4482:                else if (res == ValueType::MatchResult::NOMATCH) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 4483:                    // can't match so remove this function from possible matches
        1: 4484:                    matches.erase(matches.begin() + i);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
        1: 4485:                    erased = true;
        1: 4486:                    break;
        -: 4487:                }
        -: 4488:            }
        -: 4489:        }
        -: 4490:
     1440: 4491:        const size_t hasToBe = func->isVariadic() ? (func->argCount() - 1) : args;
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
        -: 4492:
        -: 4493:        // check if all arguments matched
     1440: 4494:        if (same == hasToBe) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
     1151: 4495:            if (constFallback || (!requireConst && func->isConst()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 3% (fallthrough)
branch  8 taken 97%
       38: 4496:                fallback1Func = func;
        -: 4497:            else
     1113: 4498:                return func;
        -: 4499:        }
        -: 4500:
      289: 4501:        else if (!fallback1Func) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      288: 4502:            if (same + fallback1 == hasToBe)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        3: 4503:                fallback1Func = func;
      285: 4504:            else if (!fallback2Func && same + fallback2 + fallback1 == hasToBe)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 4505:                fallback2Func = func;
        -: 4506:        }
        -: 4507:
      327: 4508:        if (!erased)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      326: 4509:            ++i;
        -: 4510:    }
        -: 4511:
        -: 4512:    // Fallback cases
     1563: 4513:    if (fallback1Func)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       39: 4514:        return fallback1Func;
        -: 4515:
     1524: 4516:    if (fallback2Func)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 4517:        return fallback2Func;
        -: 4518:
        -: 4519:    // Only one candidate left
     1523: 4520:    if (matches.size() == 1)
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
      283: 4521:        return matches[0];
call    0 returned 100%
        -: 4522:
     1240: 4523:    return nullptr;
        -: 4524:}
        -: 4525:
        -: 4526://---------------------------------------------------------------------------
        -: 4527:
function _ZNK14SymbolDatabase12findFunctionEPK5Token called 2988 returned 100% blocks executed 59%
     2988: 4528:const Function* SymbolDatabase::findFunction(const Token *tok) const
        -: 4529:{
        -: 4530:    // find the scope this function is in
     2988: 4531:    const Scope *currScope = tok->scope();
call    0 returned 100%
     7132: 4532:    while (currScope && currScope->isExecutable()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
branch  5 taken 41% (fallthrough)
branch  6 taken 59%
     2072: 4533:        if (currScope->functionOf)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       46: 4534:            currScope = currScope->functionOf;
        -: 4535:        else
     2026: 4536:            currScope = currScope->nestedIn;
        -: 4537:    }
        -: 4538:
        -: 4539:    // check for a qualified name and use it when given
     2988: 4540:    if (tok->strAt(-1) == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -: 4541:        // find start of qualified function name
      199: 4542:        const Token *tok1 = tok;
        -: 4543:
      567: 4544:        while (Token::Match(tok1->tokAt(-2), ">|%type% ::")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
      184: 4545:            if (tok1->strAt(-2) == ">") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4546:                if (tok1->linkAt(-2))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4547:                    tok1 = tok1->linkAt(-2)->tokAt(-1);
call    0 never executed
call    1 never executed
        -: 4548:                else {
    #####: 4549:                    if (mSettings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####: 4550:                        debugMessage(tok1->tokAt(-2), "SymbolDatabase::findFunction found '>' without link.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####: 4551:                    return nullptr;
        -: 4552:                }
        -: 4553:            } else
      184: 4554:                tok1 = tok1->tokAt(-2);
call    0 returned 100%
        -: 4555:        }
        -: 4556:
        -: 4557:        // check for global scope
      199: 4558:        if (tok1->strAt(-1) == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
       15: 4559:            currScope = &scopeList.front();
call    0 returned 100%
        -: 4560:
       15: 4561:            if (Token::Match(tok1, "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       15: 4562:                return currScope->findFunction(tok);
call    0 returned 100%
        -: 4563:
    #####: 4564:            currScope = currScope->findRecordInNestedList(tok1->str());
call    0 never executed
call    1 never executed
        -: 4565:        }
        -: 4566:
        -: 4567:        // find start of qualification
        -: 4568:        else {
      610: 4569:            while (currScope) {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
      229: 4570:                if (currScope->className == tok1->str())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4571:                    break;
        -: 4572:                else {
      229: 4573:                    const Scope *scope = currScope->findRecordInNestedList(tok1->str());
call    0 returned 100%
call    1 returned 100%
        -: 4574:
      229: 4575:                    if (scope) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       16: 4576:                        currScope = scope;
       16: 4577:                        break;
        -: 4578:                    } else
      213: 4579:                        currScope = currScope->nestedIn;
        -: 4580:                }
        -: 4581:            }
        -: 4582:        }
        -: 4583:
      184: 4584:        if (currScope) {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       16: 4585:            while (currScope && !(Token::Match(tok1, "%type% :: %any% (") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 4586:                                  (Token::Match(tok1, "%type% <") && Token::Match(tok1->linkAt(1), "> :: %any% (")))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4587:                if (tok1->strAt(1) == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4588:                    tok1 = tok1->tokAt(2);
call    0 never executed
        -: 4589:                else
    #####: 4590:                    tok1 = tok1->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
    #####: 4591:                currScope = currScope->findRecordInNestedList(tok1->str());
call    0 never executed
call    1 never executed
        -: 4592:            }
        -: 4593:
       16: 4594:            tok1 = tok1->tokAt(2);
call    0 returned 100%
        -: 4595:
       16: 4596:            if (currScope && tok1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       16: 4597:                return currScope->findFunction(tok1);
call    0 returned 100%
        -: 4598:        }
        -: 4599:    }
        -: 4600:
        -: 4601:    // check for member function
     2789: 4602:    else if (Token::Match(tok->tokAt(-2), "!!this .")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
      215: 4603:        const Token *tok1 = tok->tokAt(-2);
call    0 returned 100%
      215: 4604:        if (Token::Match(tok1, "%var% .")) {
call    0 returned 100%
branch  1 taken 65% (fallthrough)
branch  2 taken 35%
      140: 4605:            const Variable *var = getVariableFromVarId(tok1->varId());
call    0 returned 100%
call    1 returned 100%
      140: 4606:            if (var && var->typeScope())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 36% (fallthrough)
branch  4 taken 64%
branch  5 taken 36% (fallthrough)
branch  6 taken 64%
       50: 4607:                return var->typeScope()->findFunction(tok, var->valueType()->constness == 1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       90: 4608:            if (var && var->smartPointerType() && var->smartPointerType()->classScope && tok1->next()->originalName() == "->")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 4609:                return var->smartPointerType()->classScope->findFunction(tok, var->valueType()->constness == 1);
call    0 never executed
call    1 never executed
call    2 never executed
       75: 4610:        } else if (Token::simpleMatch(tok->previous()->astOperand1(), "(")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
        9: 4611:            const Token *castTok = tok->previous()->astOperand1();
call    0 returned 100%
call    1 returned 100%
        9: 4612:            if (castTok->isCast()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4613:                ValueType vt = ValueType::parseDecl(castTok->next(),mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 4614:                if (vt.typeScope)
branch  0 never executed
branch  1 never executed
    #####: 4615:                    return vt.typeScope->findFunction(tok, vt.constness == 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4616:            }
        -: 4617:        }
        -: 4618:    }
        -: 4619:
        -: 4620:    // check in enclosing scopes
        -: 4621:    else {
     4988: 4622:        while (currScope) {
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
     2595: 4623:            const Function *func = currScope->findFunction(tok);
call    0 returned 100%
     2595: 4624:            if (func)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
     1388: 4625:                return func;
     1207: 4626:            currScope = currScope->nestedIn;
        -: 4627:        }
        -: 4628:    }
     1519: 4629:    return nullptr;
        -: 4630:}
        -: 4631:
        -: 4632://---------------------------------------------------------------------------
        -: 4633:
function _ZNK14SymbolDatabase15findScopeByNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4634:const Scope *SymbolDatabase::findScopeByName(const std::string& name) const
        -: 4635:{
    #####: 4636:    for (std::list<Scope>::const_iterator it = scopeList.begin(); it != scopeList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4637:        if (it->className == name)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4638:            return &*it;
call    0 never executed
        -: 4639:    }
    #####: 4640:    return nullptr;
        -: 4641:}
        -: 4642:
        -: 4643://---------------------------------------------------------------------------
        -: 4644:
function _ZN5Scope16findInNestedListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4645:Scope *Scope::findInNestedList(const std::string & name)
        -: 4646:{
    #####: 4647:    std::list<Scope *>::iterator it;
call    0 never executed
call    1 never executed
        -: 4648:
    #####: 4649:    for (it = nestedList.begin(); it != nestedList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 4650:        if ((*it)->className == name)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4651:            return (*it);
call    0 never executed
        -: 4652:    }
    #####: 4653:    return nullptr;
        -: 4654:}
        -: 4655:
        -: 4656://---------------------------------------------------------------------------
        -: 4657:
function _ZNK5Scope22findRecordInNestedListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 823 returned 100% blocks executed 75%
      823: 4658:const Scope *Scope::findRecordInNestedList(const std::string & name) const
        -: 4659:{
     1646: 4660:    std::list<Scope *>::const_iterator it;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 4661:
     1711: 4662:    for (it = nestedList.begin(); it != nestedList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 53% (fallthrough)
branch  7 taken 47%
call    8 returned 100%
      911: 4663:        if ((*it)->className == name && (*it)->type != eFunction)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 3% (fallthrough)
branch  8 taken 97%
       23: 4664:            return (*it);
call    0 returned 100%
        -: 4665:    }
        -: 4666:
      800: 4667:    const Type * nested_type = findType(name);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 4668:
      800: 4669:    if (nested_type) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4670:        if (nested_type->isTypeAlias()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4671:            if (nested_type->typeStart == nested_type->typeEnd)
branch  0 never executed
branch  1 never executed
    #####: 4672:                return findRecordInNestedList(nested_type->typeStart->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4673:        } else
    #####: 4674:            return nested_type->classScope;
        -: 4675:    }
        -: 4676:
      800: 4677:    return nullptr;
        -: 4678:}
        -: 4679:
        -: 4680://---------------------------------------------------------------------------
        -: 4681:
function _ZNK5Scope8findTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4324 returned 100% blocks executed 35%
     4324: 4682:const Type* Scope::findType(const std::string & name) const
        -: 4683:{
     8648: 4684:    auto it = definedTypesMap.find(name);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 4685:
        -: 4686:    // Type was found
     4324: 4687:    if (definedTypesMap.end() != it)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
      427: 4688:        return (*it).second;
call    0 returned 100%
        -: 4689:
        -: 4690:    // is type defined in anonymous namespace..
     3897: 4691:    it = definedTypesMap.find("");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
     3897: 4692:    if (it != definedTypesMap.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 4693:        for (const Scope *scope : nestedList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 4694:            if (scope->className.empty() && (scope->type == eNamespace || scope->isClassOrStructOrUnion())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4695:                const Type *t = scope->findType(name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4696:                if (t)
branch  0 never executed
branch  1 never executed
    #####: 4697:                    return t;
        -: 4698:            }
        -: 4699:        }
        -: 4700:    }
        -: 4701:
        -: 4702:    // Type was not found
     3897: 4703:    return nullptr;
        -: 4704:}
        -: 4705:
        -: 4706://---------------------------------------------------------------------------
        -: 4707:
function _ZN5Scope25findInNestedListRecursiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4708:Scope *Scope::findInNestedListRecursive(const std::string & name)
        -: 4709:{
    #####: 4710:    std::list<Scope *>::iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 4711:
    #####: 4712:    for (it = nestedList.begin(); it != nestedList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 4713:        if ((*it)->className == name)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4714:            return (*it);
call    0 never executed
        -: 4715:    }
        -: 4716:
    #####: 4717:    for (it = nestedList.begin(); it != nestedList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 4718:        Scope *child = (*it)->findInNestedListRecursive(name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4719:        if (child)
branch  0 never executed
branch  1 never executed
    #####: 4720:            return child;
        -: 4721:    }
    #####: 4722:    return nullptr;
        -: 4723:}
        -: 4724:
        -: 4725://---------------------------------------------------------------------------
        -: 4726:
function _ZNK5Scope13getDestructorEv called 0 returned 0% blocks executed 0%
    #####: 4727:const Function *Scope::getDestructor() const
        -: 4728:{
    #####: 4729:    std::list<Function>::const_iterator it;
call    0 never executed
call    1 never executed
    #####: 4730:    for (it = functionList.begin(); it != functionList.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 4731:        if (it->type == Function::eDestructor)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4732:            return &(*it);
call    0 never executed
        -: 4733:    }
    #####: 4734:    return nullptr;
        -: 4735:}
        -: 4736:
        -: 4737://---------------------------------------------------------------------------
        -: 4738:
function _ZNK14SymbolDatabase5isCPPEv called 9915 returned 100% blocks executed 100%
     9915: 4739:bool SymbolDatabase::isCPP() const
        -: 4740:{
     9915: 4741:    return mTokenizer->isCPP();
call    0 returned 100%
        -: 4742:}
        -: 4743:
        -: 4744://---------------------------------------------------------------------------
        -: 4745:
function _ZNK14SymbolDatabase9findScopeEPK5TokenPK5Scope called 175 returned 100% blocks executed 57%
      175: 4746:const Scope *SymbolDatabase::findScope(const Token *tok, const Scope *startScope) const
        -: 4747:{
      175: 4748:    const Scope *scope = nullptr;
        -: 4749:    // absolute path
      175: 4750:    if (tok->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4751:        tok = tok->next();
call    0 never executed
    #####: 4752:        scope = &scopeList.front();
call    0 never executed
        -: 4753:    }
        -: 4754:    // relative path
      175: 4755:    else if (tok->isName()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      175: 4756:        scope = startScope;
        -: 4757:    }
        -: 4758:
      175: 4759:    while (scope && tok && tok->isName()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
      175: 4760:        if (tok->strAt(1) == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4761:            scope = scope->findRecordInNestedList(tok->str());
call    0 never executed
call    1 never executed
    #####: 4762:            tok = tok->tokAt(2);
call    0 never executed
      175: 4763:        } else if (tok->strAt(1) == "<" && Token::simpleMatch(tok->linkAt(1), "> ::")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 4764:            scope = scope->findRecordInNestedList(tok->str());
call    0 never executed
call    1 never executed
    #####: 4765:            tok = tok->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
        -: 4766:        } else
      175: 4767:            return scope->findRecordInNestedList(tok->str());
call    0 returned 100%
call    1 returned 100%
        -: 4768:    }
        -: 4769:
        -: 4770:    // not a valid path
    #####: 4771:    return nullptr;
        -: 4772:}
        -: 4773:
        -: 4774://---------------------------------------------------------------------------
        -: 4775:
function _ZNK14SymbolDatabase8findTypeEPK5TokenPK5Scope called 309 returned 100% blocks executed 46%
      309: 4776:const Type* SymbolDatabase::findType(const Token *startTok, const Scope *startScope) const
        -: 4777:{
        -: 4778:    // skip over struct or union
      309: 4779:    if (Token::Match(startTok, "struct|union"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4780:        startTok = startTok->next();
call    0 never executed
        -: 4781:
        -: 4782:    // type same as scope
      309: 4783:    if (startTok->str() == startScope->className && startScope->isClassOrStruct() && startTok->strAt(1) != "::")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 4784:        return startScope->definedType;
        -: 4785:
      309: 4786:    const Scope* start_scope = startScope;
        -: 4787:
        -: 4788:    // absolute path - directly start in global scope
      309: 4789:    if (startTok->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4790:        startTok = startTok->next();
call    0 never executed
    #####: 4791:        start_scope = &scopeList.front();
call    0 never executed
        -: 4792:    }
        -: 4793:
      309: 4794:    const Token* tok = startTok;
      309: 4795:    const Scope* scope = start_scope;
        -: 4796:
      379: 4797:    while (scope && tok && tok->isName()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
      344: 4798:        if (tok->strAt(1) == "::" || (tok->strAt(1) == "<" && Token::simpleMatch(tok->linkAt(1), "> ::"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 81% (fallthrough)
branch  3 taken 19%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 19% (fallthrough)
branch 13 taken 81%
       64: 4799:            scope = scope->findRecordInNestedList(tok->str());
call    0 returned 100%
call    1 returned 100%
       64: 4800:            if (scope) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4801:                if (tok->strAt(1) == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4802:                    tok = tok->tokAt(2);
call    0 never executed
        -: 4803:                else
    #####: 4804:                    tok = tok->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
        -: 4805:            } else {
       64: 4806:                start_scope = start_scope->nestedIn;
       64: 4807:                if (!start_scope)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
       29: 4808:                    break;
       35: 4809:                scope = start_scope;
       35: 4810:                tok = startTok;
        -: 4811:            }
        -: 4812:        } else {
      280: 4813:            const Type * type = scope->findType(tok->str());
call    0 returned 100%
call    1 returned 100%
      280: 4814:            if (type)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        4: 4815:                return type;
        -: 4816:            else
      276: 4817:                break;
        -: 4818:        }
        -: 4819:    }
        -: 4820:
        -: 4821:    // check using namespaces
     1195: 4822:    while (startScope) {
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
      445: 4823:        for (std::list<Scope::UsingInfo>::const_iterator it = startScope->usingList.begin();
call    0 returned 100%
call    1 never executed
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0%
call    5 never executed
      445: 4824:             it != startScope->usingList.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 4825:            tok = startTok;
    #####: 4826:            scope = it->scope;
call    0 never executed
    #####: 4827:            start_scope = startScope;
        -: 4828:
    #####: 4829:            while (scope && tok && tok->isName()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4830:                if (tok->strAt(1) == "::" || (tok->strAt(1) == "<" && Token::simpleMatch(tok->linkAt(1), "> ::"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
    #####: 4831:                    scope = scope->findRecordInNestedList(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4832:                    if (scope) {
branch  0 never executed
branch  1 never executed
    #####: 4833:                        if (tok->strAt(1) == "::")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4834:                            tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4835:                        else
    #####: 4836:                            tok = tok->linkAt(1)->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4837:                    } else {
    #####: 4838:                        start_scope = start_scope->nestedIn;
    #####: 4839:                        if (!start_scope)
branch  0 never executed
branch  1 never executed
    #####: 4840:                            break;
    #####: 4841:                        scope = start_scope;
    #####: 4842:                        tok = startTok;
        -: 4843:                    }
        -: 4844:                } else {
    #####: 4845:                    const Type * type = scope->findType(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4846:                    if (type)
branch  0 never executed
branch  1 never executed
    #####: 4847:                        return type;
        -: 4848:                    else
    #####: 4849:                        break;
        -: 4850:                }
        -: 4851:            }
        -: 4852:        }
      445: 4853:        startScope = startScope->nestedIn;
        -: 4854:    }
        -: 4855:
        -: 4856:    // not a valid path
      305: 4857:    return nullptr;
        -: 4858:}
        -: 4859:
        -: 4860://---------------------------------------------------------------------------
        -: 4861:
function _ZNK14SymbolDatabase16findTypeInNestedEPK5TokenPK5Scope called 1249 returned 100% blocks executed 75%
     1249: 4862:const Type* SymbolDatabase::findTypeInNested(const Token *startTok, const Scope *startScope) const
        -: 4863:{
        -: 4864:    // skip over struct or union
     1249: 4865:    if (Token::Match(startTok, "struct|union|enum"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4866:        startTok = startTok->next();
call    0 never executed
        -: 4867:
        -: 4868:    // type same as scope
     1249: 4869:    if (startTok->str() == startScope->className && startScope->isClassOrStruct())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        2: 4870:        return startScope->definedType;
        -: 4871:
     1247: 4872:    bool hasPath = false;
        -: 4873:
        -: 4874:    // absolute path - directly start in global scope
     1247: 4875:    if (startTok->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4876:        hasPath = true;
    #####: 4877:        startTok = startTok->next();
call    0 never executed
    #####: 4878:        startScope = &scopeList.front();
call    0 never executed
        -: 4879:    }
        -: 4880:
     1247: 4881:    const Token* tok = startTok;
     1247: 4882:    const Scope* scope = startScope;
        -: 4883:
     1417: 4884:    while (scope && tok && tok->isName()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
     1332: 4885:        if (tok->strAt(1) == "::" || (tok->strAt(1) == "<" && Token::simpleMatch(tok->linkAt(1), "> ::"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 7% (fallthrough)
branch 13 taken 93%
       95: 4886:            hasPath = true;
       95: 4887:            scope = scope->findRecordInNestedList(tok->str());
call    0 returned 100%
call    1 returned 100%
       95: 4888:            if (scope) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4889:                if (tok->strAt(1) == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4890:                    tok = tok->tokAt(2);
call    0 never executed
        -: 4891:                else
    #####: 4892:                    tok = tok->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
        -: 4893:            } else {
       95: 4894:                startScope = startScope->nestedIn;
       95: 4895:                if (!startScope)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
       90: 4896:                    break;
        5: 4897:                scope = startScope;
        5: 4898:                tok = startTok;
        -: 4899:            }
        -: 4900:        } else {
     1237: 4901:            const Type * type = scope->findType(tok->str());
call    0 returned 100%
call    1 returned 100%
     1237: 4902:            if (hasPath || type)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       12: 4903:                return type;
        -: 4904:            else {
     1225: 4905:                scope = scope->nestedIn;
     1225: 4906:                if (!scope)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     1145: 4907:                    break;
        -: 4908:            }
        -: 4909:        }
        -: 4910:    }
        -: 4911:
        -: 4912:    // not a valid path
     1235: 4913:    return nullptr;
        -: 4914:}
        -: 4915:
        -: 4916://---------------------------------------------------------------------------
        -: 4917:
function _ZNK14SymbolDatabase13findNamespaceEPK5TokenPK5Scope called 0 returned 0% blocks executed 0%
    #####: 4918:const Scope * SymbolDatabase::findNamespace(const Token * tok, const Scope * scope) const
        -: 4919:{
    #####: 4920:    const Scope * s = findScope(tok, scope);
call    0 never executed
        -: 4921:
    #####: 4922:    if (s)
branch  0 never executed
branch  1 never executed
    #####: 4923:        return s;
    #####: 4924:    else if (scope->nestedIn)
branch  0 never executed
branch  1 never executed
    #####: 4925:        return findNamespace(tok, scope->nestedIn);
call    0 never executed
        -: 4926:
    #####: 4927:    return nullptr;
        -: 4928:}
        -: 4929:
        -: 4930://---------------------------------------------------------------------------
        -: 4931:
function _ZN14SymbolDatabase19findFunctionInScopeEPK5TokenPK5ScopeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 4932:Function * SymbolDatabase::findFunctionInScope(const Token *func, const Scope *ns, const std::string & path, nonneg int path_length)
        -: 4933:{
    #####: 4934:    const Function * function = nullptr;
    #####: 4935:    const bool destructor = func->strAt(-1) == "~";
call    0 never executed
call    1 never executed
        -: 4936:
    #####: 4937:    for (std::multimap<std::string, const Function *>::const_iterator it = ns->functionMap.find(func->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 4938:         it != ns->functionMap.end() && it->first == func->str(); ++it) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
        -: 4939:
    #####: 4940:        if (Function::argsMatch(ns, it->second->argDef, func->next(), path, path_length) &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4941:            it->second->isDestructor() == destructor) {
call    0 never executed
call    1 never executed
    #####: 4942:            function = it->second;
call    0 never executed
    #####: 4943:            break;
        -: 4944:        }
        -: 4945:    }
        -: 4946:
    #####: 4947:    if (!function) {
branch  0 never executed
branch  1 never executed
    #####: 4948:        const Scope * scope = ns->findRecordInNestedList(func->str());
call    0 never executed
call    1 never executed
    #####: 4949:        if (scope && Token::Match(func->tokAt(1), "::|<")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4950:            if (func->strAt(1) == "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4951:                func = func->tokAt(2);
call    0 never executed
    #####: 4952:            else if (func->linkAt(1))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4953:                func = func->linkAt(1)->tokAt(2);
call    0 never executed
call    1 never executed
        -: 4954:            else
    #####: 4955:                return nullptr;
    #####: 4956:            if (func->str() == "~")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4957:                func = func->next();
call    0 never executed
    #####: 4958:            function = findFunctionInScope(func, scope, path, path_length);
call    0 never executed
        -: 4959:        }
        -: 4960:    }
        -: 4961:
    #####: 4962:    return const_cast<Function *>(function);
        -: 4963:}
        -: 4964:
        -: 4965://---------------------------------------------------------------------------
        -: 4966:
        -: 4967:namespace {
        -: 4968:
        -: 4969:#define C_KEYWORDS\
        -: 4970:    "_Bool", "auto", "break", "case", "char", "const", "continue", "default", "do",\
        -: 4971:        "double", "else", "enum", "extern", "float", "for", "goto", "if", "inline",\
        -: 4972:        "int", "long", "register", "restrict", "return", "short", "signed", "sizeof",\
        -: 4973:        "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile",\
        -: 4974:        "while"
        -: 4975:
        1: 4976:    const std::set<std::string> c_keywords = { C_KEYWORDS };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
call   101 returned 100%
branch 102 taken 100% (fallthrough)
branch 103 taken 0% (throw)
call   104 returned 100%
call   105 returned 100%
branch 106 taken 100% (fallthrough)
branch 107 taken 0% (throw)
call   108 returned 100%
call   109 returned 100%
branch 110 taken 100% (fallthrough)
branch 111 taken 0% (throw)
call   112 returned 100%
call   113 returned 100%
branch 114 taken 100% (fallthrough)
branch 115 taken 0% (throw)
call   116 returned 100%
call   117 returned 100%
branch 118 taken 100% (fallthrough)
branch 119 taken 0% (throw)
call   120 returned 100%
call   121 returned 100%
branch 122 taken 100% (fallthrough)
branch 123 taken 0% (throw)
call   124 returned 100%
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0% (throw)
call   136 returned 100%
call   137 returned 100%
branch 138 taken 100% (fallthrough)
branch 139 taken 0% (throw)
call   140 returned 100%
call   141 returned 100%
branch 142 taken 100% (fallthrough)
branch 143 taken 0% (throw)
call   144 returned 100%
branch 145 taken 97% (fallthrough)
branch 146 taken 3%
call   147 returned 100%
call   148 returned 100%
call   149 returned 100%
call   150 returned 100%
call   151 returned 100%
call   152 returned 100%
call   153 returned 100%
call   154 returned 100%
call   155 returned 100%
call   156 returned 100%
call   157 returned 100%
call   158 returned 100%
call   159 returned 100%
call   160 returned 100%
call   161 returned 100%
call   162 returned 100%
call   163 returned 100%
call   164 returned 100%
call   165 returned 100%
call   166 returned 100%
call   167 returned 100%
call   168 returned 100%
call   169 returned 100%
call   170 returned 100%
call   171 returned 100%
call   172 returned 100%
call   173 returned 100%
call   174 returned 100%
call   175 returned 100%
call   176 returned 100%
call   177 returned 100%
call   178 returned 100%
call   179 returned 100%
call   180 returned 100%
call   181 returned 100%
call   182 returned 100%
call   183 returned 100%
call   184 never executed
branch 185 never executed
branch 186 never executed
call   187 never executed
call   188 never executed
call   189 never executed
call   190 never executed
call   191 never executed
call   192 never executed
call   193 never executed
call   194 never executed
call   195 never executed
call   196 never executed
call   197 never executed
call   198 never executed
call   199 never executed
call   200 never executed
call   201 never executed
call   202 never executed
call   203 never executed
call   204 never executed
call   205 never executed
call   206 never executed
call   207 never executed
call   208 never executed
call   209 never executed
call   210 never executed
call   211 never executed
call   212 never executed
call   213 never executed
call   214 never executed
call   215 never executed
call   216 never executed
call   217 never executed
call   218 never executed
call   219 never executed
call   220 never executed
call   221 never executed
call   222 never executed
call   223 never executed
       87: 4977:    const std::set<std::string> cpp_keywords = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
call   101 returned 100%
branch 102 taken 100% (fallthrough)
branch 103 taken 0% (throw)
call   104 returned 100%
call   105 returned 100%
branch 106 taken 100% (fallthrough)
branch 107 taken 0% (throw)
call   108 returned 100%
call   109 returned 100%
branch 110 taken 100% (fallthrough)
branch 111 taken 0% (throw)
call   112 returned 100%
call   113 returned 100%
branch 114 taken 100% (fallthrough)
branch 115 taken 0% (throw)
call   116 returned 100%
call   117 returned 100%
branch 118 taken 100% (fallthrough)
branch 119 taken 0% (throw)
call   120 returned 100%
call   121 returned 100%
branch 122 taken 100% (fallthrough)
branch 123 taken 0% (throw)
call   124 returned 100%
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0% (throw)
call   136 returned 100%
call   137 returned 100%
branch 138 taken 100% (fallthrough)
branch 139 taken 0% (throw)
call   140 returned 100%
call   141 returned 100%
branch 142 taken 100% (fallthrough)
branch 143 taken 0% (throw)
call   144 returned 100%
call   145 returned 100%
branch 146 taken 100% (fallthrough)
branch 147 taken 0% (throw)
call   148 returned 100%
call   149 returned 100%
branch 150 taken 100% (fallthrough)
branch 151 taken 0% (throw)
call   152 returned 100%
call   153 returned 100%
branch 154 taken 100% (fallthrough)
branch 155 taken 0% (throw)
call   156 returned 100%
call   157 returned 100%
branch 158 taken 100% (fallthrough)
branch 159 taken 0% (throw)
call   160 returned 100%
call   161 returned 100%
branch 162 taken 100% (fallthrough)
branch 163 taken 0% (throw)
call   164 returned 100%
call   165 returned 100%
branch 166 taken 100% (fallthrough)
branch 167 taken 0% (throw)
call   168 returned 100%
call   169 returned 100%
branch 170 taken 100% (fallthrough)
branch 171 taken 0% (throw)
call   172 returned 100%
call   173 returned 100%
branch 174 taken 100% (fallthrough)
branch 175 taken 0% (throw)
call   176 returned 100%
call   177 returned 100%
branch 178 taken 100% (fallthrough)
branch 179 taken 0% (throw)
call   180 returned 100%
call   181 returned 100%
branch 182 taken 100% (fallthrough)
branch 183 taken 0% (throw)
call   184 returned 100%
call   185 returned 100%
branch 186 taken 100% (fallthrough)
branch 187 taken 0% (throw)
call   188 returned 100%
call   189 returned 100%
branch 190 taken 100% (fallthrough)
branch 191 taken 0% (throw)
call   192 returned 100%
call   193 returned 100%
branch 194 taken 100% (fallthrough)
branch 195 taken 0% (throw)
call   196 returned 100%
call   197 returned 100%
branch 198 taken 100% (fallthrough)
branch 199 taken 0% (throw)
call   200 returned 100%
call   201 returned 100%
branch 202 taken 100% (fallthrough)
branch 203 taken 0% (throw)
call   204 returned 100%
call   205 returned 100%
branch 206 taken 100% (fallthrough)
branch 207 taken 0% (throw)
call   208 returned 100%
call   209 returned 100%
branch 210 taken 100% (fallthrough)
branch 211 taken 0% (throw)
call   212 returned 100%
call   213 returned 100%
branch 214 taken 100% (fallthrough)
branch 215 taken 0% (throw)
call   216 returned 100%
call   217 returned 100%
branch 218 taken 100% (fallthrough)
branch 219 taken 0% (throw)
call   220 returned 100%
call   221 returned 100%
branch 222 taken 100% (fallthrough)
branch 223 taken 0% (throw)
call   224 returned 100%
call   225 returned 100%
branch 226 taken 100% (fallthrough)
branch 227 taken 0% (throw)
call   228 returned 100%
call   229 returned 100%
branch 230 taken 100% (fallthrough)
branch 231 taken 0% (throw)
call   232 returned 100%
call   233 returned 100%
branch 234 taken 100% (fallthrough)
branch 235 taken 0% (throw)
call   236 returned 100%
call   237 returned 100%
branch 238 taken 100% (fallthrough)
branch 239 taken 0% (throw)
call   240 returned 100%
call   241 returned 100%
branch 242 taken 100% (fallthrough)
branch 243 taken 0% (throw)
call   244 returned 100%
call   245 returned 100%
branch 246 taken 100% (fallthrough)
branch 247 taken 0% (throw)
call   248 returned 100%
call   249 returned 100%
branch 250 taken 100% (fallthrough)
branch 251 taken 0% (throw)
call   252 returned 100%
call   253 returned 100%
branch 254 taken 100% (fallthrough)
branch 255 taken 0% (throw)
call   256 returned 100%
call   257 returned 100%
branch 258 taken 100% (fallthrough)
branch 259 taken 0% (throw)
call   260 returned 100%
call   261 returned 100%
branch 262 taken 100% (fallthrough)
branch 263 taken 0% (throw)
call   264 returned 100%
call   265 returned 100%
branch 266 taken 100% (fallthrough)
branch 267 taken 0% (throw)
call   268 returned 100%
call   269 returned 100%
branch 270 taken 100% (fallthrough)
branch 271 taken 0% (throw)
call   272 returned 100%
call   273 returned 100%
branch 274 taken 100% (fallthrough)
branch 275 taken 0% (throw)
call   276 returned 100%
call   277 returned 100%
branch 278 taken 100% (fallthrough)
branch 279 taken 0% (throw)
call   280 returned 100%
call   281 returned 100%
branch 282 taken 100% (fallthrough)
branch 283 taken 0% (throw)
call   284 returned 100%
call   285 returned 100%
branch 286 taken 100% (fallthrough)
branch 287 taken 0% (throw)
call   288 returned 100%
call   289 returned 100%
branch 290 taken 100% (fallthrough)
branch 291 taken 0% (throw)
call   292 returned 100%
call   293 returned 100%
branch 294 taken 100% (fallthrough)
branch 295 taken 0% (throw)
call   296 returned 100%
call   297 returned 100%
branch 298 taken 100% (fallthrough)
branch 299 taken 0% (throw)
call   300 returned 100%
call   301 returned 100%
branch 302 taken 100% (fallthrough)
branch 303 taken 0% (throw)
call   304 returned 100%
call   305 returned 100%
branch 306 taken 100% (fallthrough)
branch 307 taken 0% (throw)
call   308 returned 100%
call   309 returned 100%
branch 310 taken 100% (fallthrough)
branch 311 taken 0% (throw)
call   312 returned 100%
call   313 returned 100%
branch 314 taken 100% (fallthrough)
branch 315 taken 0% (throw)
call   316 returned 100%
call   317 returned 100%
branch 318 taken 100% (fallthrough)
branch 319 taken 0% (throw)
call   320 returned 100%
call   321 returned 100%
branch 322 taken 100% (fallthrough)
branch 323 taken 0% (throw)
call   324 returned 100%
call   325 returned 100%
branch 326 taken 100% (fallthrough)
branch 327 taken 0% (throw)
call   328 returned 100%
call   329 returned 100%
branch 330 taken 100% (fallthrough)
branch 331 taken 0% (throw)
call   332 returned 100%
call   333 returned 100%
branch 334 taken 100% (fallthrough)
branch 335 taken 0% (throw)
call   336 returned 100%
call   337 returned 100%
branch 338 taken 100% (fallthrough)
branch 339 taken 0% (throw)
call   340 returned 100%
call   341 returned 100%
branch 342 taken 100% (fallthrough)
branch 343 taken 0% (throw)
call   344 returned 100%
call   345 returned 100%
branch 346 taken 100% (fallthrough)
branch 347 taken 0% (throw)
call   348 returned 100%
branch 349 taken 99% (fallthrough)
branch 350 taken 1%
call   351 returned 100%
call   352 returned 100%
call   353 returned 100%
call   354 returned 100%
call   355 returned 100%
call   356 returned 100%
call   357 returned 100%
call   358 returned 100%
call   359 returned 100%
call   360 returned 100%
call   361 returned 100%
call   362 returned 100%
call   363 returned 100%
call   364 returned 100%
call   365 returned 100%
call   366 returned 100%
call   367 returned 100%
call   368 returned 100%
call   369 returned 100%
call   370 returned 100%
call   371 returned 100%
call   372 returned 100%
call   373 returned 100%
call   374 returned 100%
call   375 returned 100%
call   376 returned 100%
call   377 returned 100%
call   378 returned 100%
call   379 returned 100%
call   380 returned 100%
call   381 returned 100%
call   382 returned 100%
call   383 returned 100%
call   384 returned 100%
call   385 returned 100%
call   386 returned 100%
call   387 returned 100%
call   388 returned 100%
call   389 returned 100%
call   390 returned 100%
call   391 returned 100%
call   392 returned 100%
call   393 returned 100%
call   394 returned 100%
call   395 returned 100%
call   396 returned 100%
call   397 returned 100%
call   398 returned 100%
call   399 returned 100%
call   400 returned 100%
call   401 returned 100%
call   402 returned 100%
call   403 returned 100%
call   404 returned 100%
call   405 returned 100%
call   406 returned 100%
call   407 returned 100%
call   408 returned 100%
call   409 returned 100%
call   410 returned 100%
call   411 returned 100%
call   412 returned 100%
call   413 returned 100%
call   414 returned 100%
call   415 returned 100%
call   416 returned 100%
call   417 returned 100%
call   418 returned 100%
call   419 returned 100%
call   420 returned 100%
call   421 returned 100%
call   422 returned 100%
call   423 returned 100%
call   424 returned 100%
call   425 returned 100%
call   426 returned 100%
call   427 returned 100%
call   428 returned 100%
call   429 returned 100%
call   430 returned 100%
call   431 returned 100%
call   432 returned 100%
call   433 returned 100%
call   434 returned 100%
call   435 returned 100%
call   436 returned 100%
call   437 returned 100%
call   438 never executed
branch 439 never executed
branch 440 never executed
call   441 never executed
call   442 never executed
call   443 never executed
call   444 never executed
call   445 never executed
call   446 never executed
call   447 never executed
call   448 never executed
call   449 never executed
call   450 never executed
call   451 never executed
call   452 never executed
call   453 never executed
call   454 never executed
call   455 never executed
call   456 never executed
call   457 never executed
call   458 never executed
call   459 never executed
call   460 never executed
call   461 never executed
call   462 never executed
call   463 never executed
call   464 never executed
call   465 never executed
call   466 never executed
call   467 never executed
call   468 never executed
call   469 never executed
call   470 never executed
call   471 never executed
call   472 never executed
call   473 never executed
call   474 never executed
call   475 never executed
call   476 never executed
call   477 never executed
call   478 never executed
call   479 never executed
call   480 never executed
call   481 never executed
call   482 never executed
call   483 never executed
call   484 never executed
call   485 never executed
call   486 never executed
call   487 never executed
call   488 never executed
call   489 never executed
call   490 never executed
call   491 never executed
call   492 never executed
call   493 never executed
call   494 never executed
call   495 never executed
call   496 never executed
call   497 never executed
call   498 never executed
call   499 never executed
call   500 never executed
call   501 never executed
call   502 never executed
call   503 never executed
call   504 never executed
call   505 never executed
call   506 never executed
call   507 never executed
call   508 never executed
call   509 never executed
call   510 never executed
call   511 never executed
call   512 never executed
call   513 never executed
call   514 never executed
call   515 never executed
call   516 never executed
call   517 never executed
call   518 never executed
call   519 never executed
call   520 never executed
call   521 never executed
call   522 never executed
call   523 never executed
call   524 never executed
call   525 never executed
call   526 never executed
        -: 4978:        C_KEYWORDS,
        -: 4979:        "alignas", "alignof", "and", "and_eq", "asm", "bitand", "bitor", "bool", "catch", "class", "compl",
        -: 4980:        "concept", "constexpr", "const_cast", "decltype",
        -: 4981:        "delete", "dynamic_cast", "explicit", "export", "false", "friend",
        -: 4982:        "mutable", "namespace", "new", "noexcept", "not", "not_eq", "nullptr", "operator",
        -: 4983:        "or", "or_eq", "private", "protected", "public", "reinterpret_cast",
        -: 4984:        "requires", "static_assert",
        -: 4985:        "static_cast", "template", "this", "thread_local", "throw",
        -: 4986:        "true", "try", "typeid", "typename", "using",
        -: 4987:        "virtual", "wchar_t", "xor", "xor_eq"
       86: 4988:    };
call    0 returned 100%
call    1 never executed
        -: 4989:}
        -: 4990:
function _ZNK14SymbolDatabase14isReservedNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7255 returned 100% blocks executed 76%
     7255: 4991:bool SymbolDatabase::isReservedName(const std::string& iName) const
        -: 4992:{
     7255: 4993:    if (isCPP())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     7111: 4994:        return cpp_keywords.find(iName) != cpp_keywords.cend();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
        -: 4995:    else
      144: 4996:        return c_keywords.find(iName) != c_keywords.cend();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        -: 4997:}
        -: 4998:
function _ZNK14SymbolDatabase10sizeOfTypeEPK5Token called 22 returned 100% blocks executed 32%
       22: 4999:nonneg int SymbolDatabase::sizeOfType(const Token *type) const
        -: 5000:{
       22: 5001:    int size = mTokenizer->sizeOfType(type);
call    0 returned 100%
        -: 5002:
       22: 5003:    if (size == 0 && type->type() && type->type()->isEnumType() && type->type()->classScope) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 5004:        size = mSettings->sizeof_int;
    #####: 5005:        const Token * enum_type = type->type()->classScope->enumType;
call    0 never executed
    #####: 5006:        if (enum_type)
branch  0 never executed
branch  1 never executed
    #####: 5007:            size = mTokenizer->sizeOfType(enum_type);
call    0 never executed
        -: 5008:    }
        -: 5009:
       22: 5010:    return size;
        -: 5011:}
        -: 5012:
        -: 5013:static const Token * parsedecl(const Token *type, ValueType * const valuetype, ValueType::Sign defaultSignedness, const Settings* settings);
        -: 5014:
function _ZN14SymbolDatabase12setValueTypeEP5TokenRK8Variable called 7709 returned 100% blocks executed 95%
     7709: 5015:void SymbolDatabase::setValueType(Token *tok, const Variable &var)
        -: 5016:{
    15418: 5017:    ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     7709: 5018:    if (var.nameToken())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     7709: 5019:        valuetype.bits = var.nameToken()->bits();
call    0 returned 100%
call    1 returned 100%
     7709: 5020:    valuetype.pointer = var.dimensions().size();
call    0 returned 100%
call    1 returned 100%
     7709: 5021:    valuetype.typeScope = var.typeScope();
call    0 returned 100%
     7709: 5022:    if (var.valueType()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     7709: 5023:        valuetype.container = var.valueType()->container;
call    0 returned 100%
        -: 5024:    }
     7709: 5025:    valuetype.smartPointerType = var.smartPointerType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     7709: 5026:    if (parsedecl(var.typeStartToken(), &valuetype, mDefaultSignedness, mSettings)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
     7153: 5027:        if (tok->str() == "." && tok->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
      177: 5028:            const ValueType * const vt = tok->astOperand1()->valueType();
call    0 returned 100%
call    1 returned 100%
      177: 5029:            if (vt && (vt->constness & 1) != 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        8: 5030:                valuetype.constness |= 1;
        -: 5031:        }
     7153: 5032:        setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5033:    }
     7709: 5034:}
        -: 5035:
function _ZN14SymbolDatabase12setValueTypeEP5TokenRK10Enumerator called 22 returned 100% blocks executed 18%
       22: 5036:void SymbolDatabase::setValueType(Token *tok, const Enumerator &enumerator)
        -: 5037:{
       44: 5038:    ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       22: 5039:    valuetype.typeScope = enumerator.scope;
       22: 5040:    const Token * type = enumerator.scope->enumType;
       22: 5041:    if (type) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5042:        valuetype.type = ValueType::typeFromString(type->str(), type->isLong());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5043:        if (valuetype.type == ValueType::Type::UNKNOWN_TYPE && type->isStandardType())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5044:            valuetype.fromLibraryType(type->str(), mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5045:
    #####: 5046:        if (valuetype.isIntegral()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5047:            if (type->isSigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5048:                valuetype.sign = ValueType::Sign::SIGNED;
    #####: 5049:            else if (type->isUnsigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5050:                valuetype.sign = ValueType::Sign::UNSIGNED;
    #####: 5051:            else if (valuetype.type == ValueType::Type::CHAR)
branch  0 never executed
branch  1 never executed
    #####: 5052:                valuetype.sign = mDefaultSignedness;
        -: 5053:            else
    #####: 5054:                valuetype.sign = ValueType::Sign::SIGNED;
        -: 5055:        }
        -: 5056:
    #####: 5057:        setValueType(tok, valuetype);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5058:    } else {
       22: 5059:        valuetype.sign = ValueType::SIGNED;
       22: 5060:        valuetype.type = ValueType::INT;
       22: 5061:        setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5062:    }
       22: 5063:}
        -: 5064:
function _ZL22setAutoTokenPropertiesP5Token called 6 returned 100% blocks executed 70%
        6: 5065:static void setAutoTokenProperties(Token * const autoTok)
        -: 5066:{
        6: 5067:    const ValueType *valuetype = autoTok->valueType();
call    0 returned 100%
        6: 5068:    if (valuetype->isIntegral() || valuetype->isFloat())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        6: 5069:        autoTok->isStandardType(true);
call    0 returned 100%
        6: 5070:}
        -: 5071:
function _ZN14SymbolDatabase12setValueTypeEP5TokenRK9ValueType called 16088 returned 100% blocks executed 69%
    16088: 5072:void SymbolDatabase::setValueType(Token *tok, const ValueType &valuetype)
        -: 5073:{
    16088: 5074:    tok->setValueType(new ValueType(valuetype));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
    16088: 5075:    Token *parent = tok->astParent();
call    0 returned 100%
    16088: 5076:    if (!parent || parent->valueType())
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
call    2 returned 100%
branch  3 taken 31% (fallthrough)
branch  4 taken 69%
branch  5 taken 51% (fallthrough)
branch  6 taken 49%
     8177: 5077:        return;
     7911: 5078:    if (!parent->astOperand1())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5079:        return;
        -: 5080:
     7911: 5081:    const ValueType *vt1 = parent->astOperand1() ? parent->astOperand1()->valueType() : nullptr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
     7911: 5082:    const ValueType *vt2 = parent->astOperand2() ? parent->astOperand2()->valueType() : nullptr;
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
call    4 returned 100%
        -: 5083:
     7911: 5084:    if (vt1 && Token::Match(parent, "<<|>>")) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       50: 5085:        if (!mIsCpp || (vt2 && vt2->isIntegral()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 48% (fallthrough)
branch  8 taken 52%
       24: 5086:            setValueType(parent, *vt1);
call    0 returned 100%
       50: 5087:        return;
        -: 5088:    }
        -: 5089:
     7861: 5090:    if (vt1 && vt1->smartPointerType && Token::Match(parent, ". %name% (") && parent->originalName() == "->" && !parent->next()->function()) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 5091:        const Scope *scope = vt1->smartPointerType->classScope;
    #####: 5092:        const Function *f = scope ? scope->findFunction(parent->next(), false) : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####: 5093:        if (f)
branch  0 never executed
branch  1 never executed
    #####: 5094:            parent->next()->function(f);
call    0 never executed
call    1 never executed
        -: 5095:    }
        -: 5096:
     7861: 5097:    if (parent->isAssignmentOp()) {
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
     1703: 5098:        if (vt1)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     1587: 5099:            setValueType(parent, *vt1);
call    0 returned 100%
      230: 5100:        else if (mIsCpp && ((Token::Match(parent->tokAt(-3), "%var% ; %var% =") && parent->strAt(-3) == parent->strAt(-1)) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 50% (fallthrough)
branch 10 taken 50%
branch 11 taken 50% (fallthrough)
branch 12 taken 50%
branch 13 taken 51% (fallthrough)
branch 14 taken 49%
      114: 5101:                            Token::Match(parent->tokAt(-1), "%var% ="))) {
call    0 returned 100%
call    1 returned 100%
       59: 5102:            Token *var1Tok = parent->strAt(-2) == ";" ? parent->tokAt(-3) : parent->tokAt(-1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
call    4 returned 100%
call    5 returned 100%
       59: 5103:            Token *autoTok = nullptr;
       59: 5104:            if (Token::Match(var1Tok->tokAt(-2), ";|{|}|(|const auto"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5105:                autoTok = var1Tok->previous();
call    0 never executed
       59: 5106:            else if (Token::Match(var1Tok->tokAt(-3), ";|{|}|(|const auto *"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5107:                autoTok = var1Tok->tokAt(-2);
call    0 never executed
       59: 5108:            if (autoTok) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5109:                ValueType vt(*vt2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5110:                if (vt.constness & (1 << vt.pointer))
branch  0 never executed
branch  1 never executed
    #####: 5111:                    vt.constness &= ~(1 << vt.pointer);
    #####: 5112:                if (autoTok->strAt(1) == "*" && vt.pointer)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5113:                    vt.pointer--;
    #####: 5114:                if (autoTok->strAt(-1) == "const")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5115:                    vt.constness |= 1;
    #####: 5116:                setValueType(autoTok, vt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5117:                setAutoTokenProperties(autoTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5118:                if (vt2->pointer > vt.pointer)
branch  0 never executed
branch  1 never executed
    #####: 5119:                    vt.pointer++;
    #####: 5120:                setValueType(var1Tok, vt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5121:                if (var1Tok != parent->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5122:                    setValueType(parent->previous(), vt);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5123:                Variable *var = const_cast<Variable *>(parent->previous()->variable());
call    0 never executed
call    1 never executed
    #####: 5124:                if (var) {
branch  0 never executed
branch  1 never executed
    #####: 5125:                    ValueType vt2_(*vt2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5126:                    if (vt2_.pointer == 0 && autoTok->strAt(1) == "*")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5127:                        vt2_.pointer = 1;
    #####: 5128:                    if ((vt.constness & (1 << vt2->pointer)) != 0)
branch  0 never executed
branch  1 never executed
    #####: 5129:                        vt2_.constness |= (1 << vt2->pointer);
    #####: 5130:                    if (!Token::Match(autoTok->tokAt(1), "*|&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5131:                        vt2_.constness = vt.constness;
    #####: 5132:                    var->setValueType(vt2_);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5133:                    if (vt2->typeScope && vt2->typeScope->definedType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5134:                        var->type(vt2->typeScope->definedType);
call    0 never executed
    #####: 5135:                        if (autoTok->valueType()->pointer == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5136:                            autoTok->type(vt2->typeScope->definedType);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5137:                    }
        -: 5138:                }
        -: 5139:            }
        -: 5140:        }
     1703: 5141:        return;
        -: 5142:    }
        -: 5143:
     6158: 5144:    if (parent->str() == "[" && (!mIsCpp || parent->astOperand1() == tok) && valuetype.pointer > 0U && !Token::Match(parent->previous(), "[{,]")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
branch  4 taken 95% (fallthrough)
branch  5 taken 5%
call    6 returned 100%
branch  7 taken 84% (fallthrough)
branch  8 taken 16%
branch  9 taken 81% (fallthrough)
branch 10 taken 19%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
branch 15 taken 3% (fallthrough)
branch 16 taken 97%
      158: 5145:        const Token *op1 = parent->astOperand1();
call    0 returned 100%
      162: 5146:        while (op1 && op1->str() == "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        2: 5147:            op1 = op1->astOperand1();
call    0 returned 100%
        -: 5148:
      316: 5149:        ValueType vt(valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -: 5150:        // the "[" is a dereference unless this is a variable declaration
      158: 5151:        if (!(op1 && op1->variable() && op1->variable()->nameToken() == op1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 96% (fallthrough)
branch  4 taken 4%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 37% (fallthrough)
branch  8 taken 63%
branch  9 taken 39% (fallthrough)
branch 10 taken 61%
       62: 5152:            vt.pointer -= 1U;
      158: 5153:        setValueType(parent, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      158: 5154:        return;
        -: 5155:    }
     6000: 5156:    if (Token::Match(parent->previous(), "%name% (") && parent->astOperand1() == tok && valuetype.pointer > 0U) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 24% (fallthrough)
branch  3 taken 76%
call    4 returned 100%
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
branch  7 taken 18% (fallthrough)
branch  8 taken 82%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       12: 5157:        ValueType vt(valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        6: 5158:        vt.pointer -= 1U;
        6: 5159:        setValueType(parent, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 5160:        return;
        -: 5161:    }
        -: 5162:    // std::move
     5994: 5163:    if (vt2 && parent->str() == "(" && Token::simpleMatch(parent->tokAt(-3), "std :: move (")) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 2% (fallthrough)
branch  9 taken 98%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       26: 5164:        setValueType(parent, valuetype);
call    0 returned 100%
       26: 5165:        return;
        -: 5166:    }
     5968: 5167:    if (parent->str() == "*" && !parent->astOperand2() && valuetype.pointer > 0U) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
call    4 returned 100%
branch  5 taken 22% (fallthrough)
branch  6 taken 78%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 2% (fallthrough)
branch 10 taken 98%
      294: 5168:        ValueType vt(valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
      147: 5169:        vt.pointer -= 1U;
      147: 5170:        setValueType(parent, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      147: 5171:        return;
        -: 5172:    }
     5821: 5173:    if (parent->str() == "*" && Token::simpleMatch(parent->astOperand2(), "[") && valuetype.pointer > 0U) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
        6: 5174:        const Token *op1 = parent->astOperand2()->astOperand1();
call    0 returned 100%
call    1 returned 100%
        6: 5175:        while (op1 && op1->str() == "[")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5176:            op1 = op1->astOperand1();
call    0 never executed
        6: 5177:        ValueType vt(valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
call    4 never executed
        6: 5178:        if (op1 && op1->variable() && op1->variable()->nameToken() == op1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
        6: 5179:            setValueType(parent, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 5180:            return;
call    0 returned 100%
branch  1 taken 0%
branch  2 taken 100%
        -: 5181:        }
        -: 5182:    }
     5815: 5183:    if (parent->str() == "&" && !parent->astOperand2()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
call    4 returned 100%
branch  5 taken 43% (fallthrough)
branch  6 taken 57%
branch  7 taken 3% (fallthrough)
branch  8 taken 97%
      292: 5184:        ValueType vt(valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
      146: 5185:        vt.pointer += 1U;
      146: 5186:        setValueType(parent, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      146: 5187:        return;
        -: 5188:    }
        -: 5189:
    17086: 5190:    if ((parent->str() == "." || parent->str() == "::") &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 7% (fallthrough)
branch  9 taken 93%
     6425: 5191:        parent->astOperand2() && parent->astOperand2()->isName()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
      377: 5192:        const Variable* var = parent->astOperand2()->variable();
call    0 returned 100%
call    1 returned 100%
      377: 5193:        if (!var && valuetype.typeScope && vt1) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
       84: 5194:            const std::string &name = parent->astOperand2()->str();
call    0 returned 100%
call    1 returned 100%
       84: 5195:            const Scope *typeScope = vt1->typeScope;
       84: 5196:            if (!typeScope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5197:                return;
      174: 5198:            for (std::list<Variable>::const_iterator it = typeScope->varlist.begin(); it != typeScope->varlist.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 8% (fallthrough)
branch  5 taken 92%
call    6 returned 100%
call    7 returned 100%
        7: 5199:                if (it->nameToken()->str() == name) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 14% (fallthrough)
branch  5 taken 86%
        1: 5200:                    var = &*it;
call    0 returned 100%
        1: 5201:                    break;
        -: 5202:                }
        -: 5203:            }
        -: 5204:        }
      377: 5205:        if (var)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      253: 5206:            setValueType(parent, *var);
call    0 returned 100%
      377: 5207:        return;
        -: 5208:    }
        -: 5209:
        -: 5210:    // range for loop, auto
     8336: 5211:    if (vt2 &&
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     3129: 5212:        parent->str() == ":" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
       99: 5213:        Token::Match(parent->astParent(), "( const| auto *|&| %var% :") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
     5314: 5214:        !parent->previous()->valueType() &&
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        8: 5215:        Token::simpleMatch(parent->astParent()->astOperand1(), "for")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        8: 5216:        const bool isconst = Token::simpleMatch(parent->astParent()->next(), "const");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        8: 5217:        Token * const autoToken = parent->astParent()->tokAt(isconst ? 2 : 1);
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
call    3 returned 100%
        8: 5218:        if (vt2->pointer) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5219:            ValueType autovt(*vt2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 5220:            autovt.pointer--;
    #####: 5221:            autovt.constness = 0;
    #####: 5222:            setValueType(autoToken, autovt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5223:            setAutoTokenProperties(autoToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5224:            ValueType varvt(*vt2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5225:            varvt.pointer--;
    #####: 5226:            if (isconst)
branch  0 never executed
branch  1 never executed
    #####: 5227:                varvt.constness |= 1;
    #####: 5228:            setValueType(parent->previous(), varvt);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5229:            Variable *var = const_cast<Variable *>(parent->previous()->variable());
call    0 never executed
call    1 never executed
    #####: 5230:            if (var) {
branch  0 never executed
branch  1 never executed
    #####: 5231:                var->setValueType(varvt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5232:                if (vt2->typeScope && vt2->typeScope->definedType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5233:                    var->type(vt2->typeScope->definedType);
call    0 never executed
    #####: 5234:                    autoToken->type(vt2->typeScope->definedType);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5235:                }
        -: 5236:            }
        8: 5237:        } else if (vt2->container) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 5238:            // TODO: Determine exact type of RHS
        8: 5239:            const Token *typeStart = parent->astOperand2();
call    0 returned 100%
       24: 5240:            while (typeStart) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16: 5241:                if (typeStart->variable())
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        8: 5242:                    typeStart = typeStart->variable()->typeStartToken();
call    0 returned 100%
call    1 returned 100%
        8: 5243:                else if (typeStart->str() == "(" && typeStart->previous() && typeStart->previous()->function())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####: 5244:                    typeStart = typeStart->previous()->function()->retDef;
call    0 never executed
call    1 never executed
        -: 5245:                else
        8: 5246:                    break;
        -: 5247:            }
        -: 5248:
        8: 5249:            const Token *containerElementType = typeStart;
       56: 5250:            while (Token::Match(containerElementType, "%name%|::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
       24: 5251:                containerElementType = containerElementType->next();
call    0 returned 100%
        -: 5252:
        -: 5253:            // Try to determine type of "auto" token.
        -: 5254:            // TODO: Get type better
        8: 5255:            bool setType = false;
       16: 5256:            ValueType autovt;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        8: 5257:            const Type *templateArgType = nullptr; // container element type / smart pointer type
        8: 5258:            if (Token::Match(containerElementType, "< %type% *| *| >")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
        6: 5259:                if (parsedecl(containerElementType->next(), &autovt, mDefaultSignedness, mSettings)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6: 5260:                    setType = true;
        6: 5261:                    templateArgType = containerElementType->next()->type();
call    0 returned 100%
call    1 returned 100%
        -: 5262:                }
        2: 5263:            } else if (mSettings->library.isSmartPointer(containerElementType->next())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5264:                const Token *smartPointerTypeTok = containerElementType->next();
call    0 never executed
    #####: 5265:                while (Token::Match(smartPointerTypeTok, "%name%|::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5266:                    smartPointerTypeTok = smartPointerTypeTok->next();
call    0 never executed
    #####: 5267:                if (Token::Match(smartPointerTypeTok, "< %name% > >") && smartPointerTypeTok->next()->type()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 5268:                    setType = true;
    #####: 5269:                    templateArgType = smartPointerTypeTok->next()->type();
call    0 never executed
call    1 never executed
    #####: 5270:                    autovt.smartPointerType = templateArgType;
    #####: 5271:                    autovt.type = ValueType::Type::NONSTD;
        -: 5272:                }
        -: 5273:            }
        -: 5274:
        8: 5275:            if (setType) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 5276:                // Type of "auto" has been determined.. set type information for "auto" and variable tokens
        6: 5277:                setValueType(autoToken, autovt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 5278:                setAutoTokenProperties(autoToken);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12: 5279:                ValueType varvt(autovt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        6: 5280:                if (isconst)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2: 5281:                    varvt.constness |= 1;
        6: 5282:                setValueType(parent->previous(), varvt);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        6: 5283:                Variable * var = const_cast<Variable *>(parent->previous()->variable());
call    0 returned 100%
call    1 returned 100%
        6: 5284:                if (var) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6: 5285:                    var->setValueType(varvt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 5286:                    if (templateArgType && templateArgType->classScope && templateArgType->classScope->definedType) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5287:                        autoToken->type(templateArgType->classScope->definedType);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5288:                        var->type(templateArgType->classScope->definedType);
call    0 never executed
        -: 5289:                    }
        -: 5290:                }
        -: 5291:            }
        -: 5292:        }
        -: 5293:    }
        -: 5294:
     5292: 5295:    if (vt1 && vt1->containerTypeToken && parent->str() == "[") {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 91% (fallthrough)
branch  7 taken 9%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
       48: 5296:        ValueType vtParent;
call    0 returned 100%
call    1 never executed
call    2 never executed
       40: 5297:        if (parsedecl(vt1->containerTypeToken, &vtParent, mDefaultSignedness, mSettings)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
       32: 5298:            setValueType(parent, vtParent);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       32: 5299:            return;
call    0 returned 100%
branch  1 taken 20%
branch  2 taken 80%
        -: 5300:        }
        -: 5301:    }
        -: 5302:
     5260: 5303:    if (!vt1)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
     2332: 5304:        return;
     2928: 5305:    if (parent->astOperand2() && !vt2)
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
branch  3 taken 70% (fallthrough)
branch  4 taken 30%
branch  5 taken 56% (fallthrough)
branch  6 taken 44%
     1634: 5306:        return;
        -: 5307:
     1294: 5308:    const bool ternary = parent->str() == ":" && parent->astParent() && parent->astParent()->str() == "?";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
branch  5 taken 97% (fallthrough)
branch  6 taken 3%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 88% (fallthrough)
branch 11 taken 12%
     1294: 5309:    if (ternary) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
       60: 5310:        if (vt2 && vt1->pointer == vt2->pointer && vt1->type == vt2->type && vt1->sign == vt2->sign)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
branch  6 taken 96% (fallthrough)
branch  7 taken 4%
       54: 5311:            setValueType(parent, *vt2);
call    0 returned 100%
       60: 5312:        parent = parent->astParent();
call    0 returned 100%
        -: 5313:    }
        -: 5314:
     1294: 5315:    if (ternary || parent->isArithmeticalOp() || parent->tokType() == Token::eIncDecOp) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
call    5 returned 100%
branch  6 taken 26% (fallthrough)
branch  7 taken 74%
branch  8 taken 43% (fallthrough)
branch  9 taken 57%
      559: 5316:        if (vt1->pointer != 0U && vt2 && vt2->pointer == 0U) {
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
branch  2 taken 56% (fallthrough)
branch  3 taken 44%
branch  4 taken 40% (fallthrough)
branch  5 taken 60%
       16: 5317:            setValueType(parent, *vt1);
call    0 returned 100%
       16: 5318:            return;
        -: 5319:        }
        -: 5320:
      543: 5321:        if (vt1->pointer == 0U && vt2 && vt2->pointer != 0U) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 52% (fallthrough)
branch  3 taken 48%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
        4: 5322:            setValueType(parent, *vt2);
call    0 returned 100%
        4: 5323:            return;
        -: 5324:        }
        -: 5325:
      539: 5326:        if (vt1->pointer != 0U) {
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       56: 5327:            if (ternary || parent->tokType() == Token::eIncDecOp) // result is pointer
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 57% (fallthrough)
branch  4 taken 43%
branch  5 taken 57% (fallthrough)
branch  6 taken 43%
       32: 5328:                setValueType(parent, *vt1);
call    0 returned 100%
        -: 5329:            else // result is pointer diff
       24: 5330:                setValueType(parent, ValueType(ValueType::Sign::SIGNED, ValueType::Type::INT, 0U, 0U, "ptrdiff_t"));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
       56: 5331:            return;
        -: 5332:        }
        -: 5333:
      483: 5334:        if (vt1->type == ValueType::Type::LONGDOUBLE || (vt2 && vt2->type == ValueType::Type::LONGDOUBLE)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 52% (fallthrough)
branch  3 taken 48%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5335:            setValueType(parent, ValueType(ValueType::Sign::UNKNOWN_SIGN, ValueType::Type::LONGDOUBLE, 0U));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 5336:            return;
        -: 5337:        }
      483: 5338:        if (vt1->type == ValueType::Type::DOUBLE || (vt2 && vt2->type == ValueType::Type::DOUBLE)) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 49% (fallthrough)
branch  3 taken 51%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
       28: 5339:            setValueType(parent, ValueType(ValueType::Sign::UNKNOWN_SIGN, ValueType::Type::DOUBLE, 0U));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
       28: 5340:            return;
        -: 5341:        }
      455: 5342:        if (vt1->type == ValueType::Type::FLOAT || (vt2 && vt2->type == ValueType::Type::FLOAT)) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        4: 5343:            setValueType(parent, ValueType(ValueType::Sign::UNKNOWN_SIGN, ValueType::Type::FLOAT, 0U));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        4: 5344:            return;
        -: 5345:        }
        -: 5346:
        -: 5347:        // iterator +/- integral = iterator
      451: 5348:        if (vt1->type == ValueType::Type::ITERATOR && vt2 && vt2->isIntegral() &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 5349:            (parent->str() == "+" || parent->str() == "-")) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5350:            setValueType(parent, *vt1);
call    0 never executed
    #####: 5351:            return;
        -: 5352:        }
        -: 5353:    }
        -: 5354:
     3486: 5355:    if (vt1->isIntegral() && vt1->pointer == 0U &&
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
branch  3 taken 49% (fallthrough)
branch  4 taken 51%
branch  5 taken 39% (fallthrough)
branch  6 taken 61%
     2141: 5356:        (!vt2 || (vt2->isIntegral() && vt2->pointer == 0U)) &&
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
branch  7 taken 94% (fallthrough)
branch  8 taken 6%
      932: 5357:        (ternary || parent->isArithmeticalOp() || parent->tokType() == Token::eBitOp || parent->tokType() == Token::eIncDecOp || parent->isAssignmentOp())) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
call    6 returned 100%
branch  7 taken 70% (fallthrough)
branch  8 taken 30%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -: 5358:
      930: 5359:        ValueType vt;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      465: 5360:        if (!vt2 || vt1->type > vt2->type) {
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
      248: 5361:            vt.type = vt1->type;
      248: 5362:            vt.sign = vt1->sign;
      248: 5363:            vt.originalTypeName = vt1->originalTypeName;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      217: 5364:        } else if (vt1->type == vt2->type) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      209: 5365:            vt.type = vt1->type;
      209: 5366:            if (vt1->sign == ValueType::Sign::UNSIGNED || vt2->sign == ValueType::Sign::UNSIGNED)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
       16: 5367:                vt.sign = ValueType::Sign::UNSIGNED;
      193: 5368:            else if (vt1->sign == ValueType::Sign::UNKNOWN_SIGN || vt2->sign == ValueType::Sign::UNKNOWN_SIGN)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        6: 5369:                vt.sign = ValueType::Sign::UNKNOWN_SIGN;
        -: 5370:            else
      187: 5371:                vt.sign = ValueType::Sign::SIGNED;
      209: 5372:            vt.originalTypeName = (vt1->originalTypeName.empty() ? vt2 : vt1)->originalTypeName;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 5373:        } else {
        8: 5374:            vt.type = vt2->type;
        8: 5375:            vt.sign = vt2->sign;
        8: 5376:            vt.originalTypeName = vt2->originalTypeName;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5377:        }
      465: 5378:        if (vt.type < ValueType::Type::INT && !(ternary && vt.type==ValueType::Type::BOOL)) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
       14: 5379:            vt.type = ValueType::Type::INT;
       14: 5380:            vt.sign = ValueType::Sign::SIGNED;
       14: 5381:            vt.originalTypeName.clear();
call    0 returned 100%
        -: 5382:        }
        -: 5383:
      465: 5384:        setValueType(parent, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      465: 5385:        return;
        -: 5386:    }
        -: 5387:}
        -: 5388:
function _ZL9parsedeclPK5TokenP9ValueTypeNS2_4SignEPK8Settings called 11571 returned 100% blocks executed 84%
    11571: 5389:static const Token * parsedecl(const Token *type, ValueType * const valuetype, ValueType::Sign defaultSignedness, const Settings* settings)
        -: 5390:{
    11571: 5391:    const Token * const previousType = type;
    11571: 5392:    const unsigned int pointer0 = valuetype->pointer;
    13569: 5393:    while (Token::Match(type->previous(), "%name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
      999: 5394:        type = type->previous();
call    0 returned 100%
    11571: 5395:    valuetype->sign = ValueType::Sign::UNKNOWN_SIGN;
    11571: 5396:    if (!valuetype->typeScope && !valuetype->smartPointerType)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
    10833: 5397:        valuetype->type = ValueType::Type::UNKNOWN_TYPE;
      738: 5398:    else if (valuetype->smartPointerType)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5399:        valuetype->type = ValueType::Type::NONSTD;
      738: 5400:    else if (valuetype->typeScope->type == Scope::eEnum) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        8: 5401:        const Token * enum_type = valuetype->typeScope->enumType;
        8: 5402:        if (enum_type) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5403:            if (enum_type->isSigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5404:                valuetype->sign = ValueType::Sign::SIGNED;
    #####: 5405:            else if (enum_type->isUnsigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5406:                valuetype->sign = ValueType::Sign::UNSIGNED;
        -: 5407:            else
    #####: 5408:                valuetype->sign = defaultSignedness;
    #####: 5409:            const ValueType::Type t = ValueType::typeFromString(enum_type->str(), enum_type->isLong());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5410:            if (t != ValueType::Type::UNKNOWN_TYPE)
branch  0 never executed
branch  1 never executed
    #####: 5411:                valuetype->type = t;
    #####: 5412:            else if (enum_type->isStandardType())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5413:                valuetype->fromLibraryType(enum_type->str(), settings);
call    0 never executed
call    1 never executed
        -: 5414:        } else
        8: 5415:            valuetype->type = ValueType::Type::INT;
        -: 5416:    } else
      730: 5417:        valuetype->type = ValueType::Type::RECORD;
    96451: 5418:    while (Token::Match(type, "%name%|*|&|::") && !Token::Match(type, "typename|template") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 71% (fallthrough)
branch  5 taken 29%
    72425: 5419:           !type->variable() && !type->function()) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 91% (fallthrough)
branch  5 taken 9%
branch  6 taken 59% (fallthrough)
branch  7 taken 41%
    16789: 5420:        if (type->isSigned())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       12: 5421:            valuetype->sign = ValueType::Sign::SIGNED;
    16777: 5422:        else if (type->isUnsigned())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
      402: 5423:            valuetype->sign = ValueType::Sign::UNSIGNED;
    45727: 5424:        if (valuetype->type == ValueType::Type::UNKNOWN_TYPE &&
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    12382: 5425:            type->type() && type->type()->isTypeAlias() && type->type()->typeStart &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    16789: 5426:            type->type()->typeStart->str() != type->str() && type->type()->typeStart != previousType)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5427:            parsedecl(type->type()->typeStart, valuetype, defaultSignedness, settings);
call    0 never executed
call    1 never executed
    16789: 5428:        else if (type->str() == "const")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
      634: 5429:            valuetype->constness |= (1 << (valuetype->pointer - pointer0));
    16155: 5430:        else if (const Library::Container *container = settings->library.detectContainer(type)) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      498: 5431:            valuetype->type = ValueType::Type::CONTAINER;
      498: 5432:            valuetype->container = container;
     4514: 5433:            while (Token::Match(type, "%name%|::|<")) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
     2008: 5434:                if (type->str() == "<" && type->link()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 10% (fallthrough)
branch  8 taken 90%
      201: 5435:                    if (container->type_templateArgNo >= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      201: 5436:                        const Token *templateType = type->next();
call    0 returned 100%
      233: 5437:                        for (int j = 0; templateType && j < container->type_templateArgNo; j++)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
       32: 5438:                            templateType = templateType->nextTemplateArgument();
call    0 returned 100%
      201: 5439:                        valuetype->containerTypeToken = templateType;
        -: 5440:                    }
      201: 5441:                    type = type->link();
call    0 returned 100%
        -: 5442:                }
     2008: 5443:                type = type->next();
call    0 returned 100%
        -: 5444:            }
      498: 5445:            continue;
    15657: 5446:        } else if (settings->library.isSmartPointer(type)) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 5447:            const Token* argTok = Token::findsimplematch(type, "<");
call    0 returned 100%
        6: 5448:            if (!argTok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5449:                continue;
        6: 5450:            valuetype->smartPointerTypeToken = argTok->next();
call    0 returned 100%
        6: 5451:            valuetype->smartPointerType = argTok->next()->type();
call    0 returned 100%
call    1 returned 100%
        6: 5452:            valuetype->type = ValueType::Type::NONSTD;
        6: 5453:            type = argTok->link();
call    0 returned 100%
        6: 5454:            continue;
    15651: 5455:        } else if (Token::Match(type, "%name% :: %name%")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      176: 5456:            std::string typestr;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       88: 5457:            const Token *end = type;
      274: 5458:            while (Token::Match(end, "%name% :: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
       93: 5459:                typestr += end->str() + "::";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       93: 5460:                end = end->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5461:            }
       88: 5462:            typestr += end->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       88: 5463:            if (valuetype->fromLibraryType(typestr, settings))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
       10: 5464:                type = end;
    15563: 5465:        } else if (ValueType::Type::UNKNOWN_TYPE != ValueType::typeFromString(type->str(), type->isLong()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 58% (fallthrough)
branch  4 taken 42%
     8987: 5466:            valuetype->type = ValueType::typeFromString(type->str(), type->isLong());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
     6576: 5467:        else if (type->str() == "auto") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       51: 5468:            const ValueType *vt = type->valueType();
call    0 returned 100%
       51: 5469:            if (!vt)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       49: 5470:                return nullptr;
        2: 5471:            valuetype->type = vt->type;
        2: 5472:            valuetype->pointer = vt->pointer;
        2: 5473:            if (vt->sign != ValueType::Sign::UNKNOWN_SIGN)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 5474:                valuetype->sign = vt->sign;
        2: 5475:            valuetype->constness = vt->constness;
        2: 5476:            valuetype->originalTypeName = vt->originalTypeName;
call    0 returned 100%
        6: 5477:            while (Token::Match(type, "%name%|*|&|::") && !type->variable())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        2: 5478:                type = type->next();
call    0 returned 100%
        2: 5479:            break;
     6525: 5480:        } else if (!valuetype->typeScope && (type->str() == "struct" || type->str() == "enum"))
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 2% (fallthrough)
branch 11 taken 98%
      103: 5481:            valuetype->type = type->str() == "struct" ? ValueType::Type::RECORD : ValueType::Type::NONSTD;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     6422: 5482:        else if (!valuetype->typeScope && type->type() && type->type()->classScope) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
call    5 returned 100%
branch  6 taken 72% (fallthrough)
branch  7 taken 28%
branch  8 taken 3% (fallthrough)
branch  9 taken 97%
      186: 5483:            valuetype->type = ValueType::Type::RECORD;
      186: 5484:            valuetype->typeScope = type->type()->classScope;
call    0 returned 100%
     6236: 5485:        } else if (type->isName() && valuetype->sign != ValueType::Sign::UNKNOWN_SIGN && valuetype->pointer == 0U)
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       85: 5486:            return nullptr;
     6151: 5487:        else if (type->str() == "*")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
     1771: 5488:            valuetype->pointer++;
     4380: 5489:        else if (type->isStandardType())
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
      161: 5490:            valuetype->fromLibraryType(type->str(), settings);
call    0 returned 100%
call    1 returned 100%
     4219: 5491:        else if (Token::Match(type->previous(), "!!:: %name% !!::"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 82% (fallthrough)
branch  3 taken 18%
     3453: 5492:            valuetype->fromLibraryType(type->str(), settings);
call    0 returned 100%
call    1 returned 100%
    16149: 5493:        if (!type->originalName().empty())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       61: 5494:            valuetype->originalTypeName = type->originalName();
call    0 returned 100%
call    1 returned 100%
    16149: 5495:        type = type->next();
call    0 returned 100%
        -: 5496:    }
        -: 5497:
        -: 5498:    // Set signedness for integral types..
    11437: 5499:    if (valuetype->isIntegral() && valuetype->sign == ValueType::Sign::UNKNOWN_SIGN) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
branch  5 taken 61% (fallthrough)
branch  6 taken 39%
     6933: 5500:        if (valuetype->type == ValueType::Type::CHAR)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
      541: 5501:            valuetype->sign = defaultSignedness;
     6392: 5502:        else if (valuetype->type >= ValueType::Type::SHORT)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     5940: 5503:            valuetype->sign = ValueType::Sign::SIGNED;
        -: 5504:    }
        -: 5505:
    11437: 5506:    return (type && (valuetype->type != ValueType::Type::UNKNOWN_TYPE || valuetype->pointer > 0)) ? type : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
branch  4 taken 26% (fallthrough)
branch  5 taken 74%
        -: 5507:}
        -: 5508:
function _ZL13getClassScopePK5Token called 1532 returned 100% blocks executed 100%
     1532: 5509:static const Scope *getClassScope(const Token *tok)
        -: 5510:{
     1536: 5511:    return tok && tok->valueType() && tok->valueType()->typeScope && tok->valueType()->typeScope->isClassOrStruct() ?
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 39% (fallthrough)
branch  4 taken 61%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
        4: 5512:           tok->valueType()->typeScope :
call    0 returned 100%
     1532: 5513:           nullptr;
        -: 5514:}
        -: 5515:
function _ZL19getOperatorFunctionPK5Token called 2 returned 100% blocks executed 54%
        2: 5516:static const Function *getOperatorFunction(const Token * const tok)
        -: 5517:{
        4: 5518:    const std::string functionName("operator" + tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4: 5519:    std::multimap<std::string, const Function *>::const_iterator it;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 5520:
        2: 5521:    const Scope *classScope = getClassScope(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
        2: 5522:    if (classScope) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 5523:        it = classScope->functionMap.find(functionName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        2: 5524:        if (it != classScope->functionMap.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        2: 5525:            return it->second;
call    0 returned 100%
        -: 5526:    }
        -: 5527:
    #####: 5528:    classScope = getClassScope(tok->astOperand2());
call    0 never executed
call    1 never executed
    #####: 5529:    if (classScope) {
branch  0 never executed
branch  1 never executed
    #####: 5530:        it = classScope->functionMap.find(functionName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5531:        if (it != classScope->functionMap.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5532:            return it->second;
call    0 never executed
        -: 5533:    }
        -: 5534:
    #####: 5535:    return nullptr;
        -: 5536:}
        -: 5537:
function _ZN14SymbolDatabase23setValueTypeInTokenListEb called 1912 returned 100% blocks executed 68%
     1912: 5538:void SymbolDatabase::setValueTypeInTokenList(bool reportDebugWarnings)
        -: 5539:{
     1912: 5540:    Token * tokens = const_cast<Tokenizer *>(mTokenizer)->list.front();
call    0 returned 100%
        -: 5541:
    59776: 5542:    for (Token *tok = tokens; tok; tok = tok->next())
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
    57864: 5543:        tok->setValueType(nullptr);
call    0 returned 100%
        -: 5544:
    59776: 5545:    for (Token *tok = tokens; tok; tok = tok->next()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
    57864: 5546:        if (tok->isNumber()) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
     2536: 5547:            if (MathLib::isFloat(tok->str())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       52: 5548:                ValueType::Type type = ValueType::Type::DOUBLE;
       52: 5549:                const char suffix = tok->str()[tok->str().size() - 1];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       52: 5550:                if (suffix == 'f' || suffix == 'F')
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        8: 5551:                    type = ValueType::Type::FLOAT;
       44: 5552:                else if (suffix == 'L' || suffix == 'l')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5553:                    type = ValueType::Type::LONGDOUBLE;
       52: 5554:                setValueType(tok, ValueType(ValueType::Sign::UNKNOWN_SIGN, type, 0U));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
     2484: 5555:            } else if (MathLib::isInt(tok->str())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     2484: 5556:                const bool unsignedSuffix = (tok->str().find_last_of("uU") != std::string::npos);
call    0 returned 100%
call    1 returned 100%
     2484: 5557:                ValueType::Sign sign = unsignedSuffix ? ValueType::Sign::UNSIGNED : ValueType::Sign::SIGNED;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 5558:                ValueType::Type type;
     2484: 5559:                const MathLib::bigint value = MathLib::toLongNumber(tok->str());
call    0 returned 100%
call    1 returned 100%
     2484: 5560:                if (mSettings->platformType == cppcheck::Platform::Unspecified)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5561:                    type = ValueType::Type::INT;
     2484: 5562:                else if (mSettings->isIntValue(unsignedSuffix ? (value >> 1) : value))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     2480: 5563:                    type = ValueType::Type::INT;
        4: 5564:                else if (mSettings->isLongValue(unsignedSuffix ? (value >> 1) : value))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4: 5565:                    type = ValueType::Type::LONG;
        -: 5566:                else
    #####: 5567:                    type = ValueType::Type::LONGLONG;
     2484: 5568:                if (MathLib::isIntHex(tok->str()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5569:                    sign = ValueType::Sign::UNSIGNED;
     2534: 5570:                for (std::size_t pos = tok->str().size() - 1U; pos > 0U; --pos) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
      416: 5571:                    const char suffix = tok->str()[pos];
call    0 returned 100%
call    1 returned 100%
      416: 5572:                    if (suffix == 'u' || suffix == 'U')
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       28: 5573:                        sign = ValueType::Sign::UNSIGNED;
      388: 5574:                    else if (suffix == 'l' || suffix == 'L')
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       22: 5575:                        type = (type == ValueType::Type::INT) ? ValueType::Type::LONG : ValueType::Type::LONGLONG;
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
      366: 5576:                    else if (pos > 2U && suffix == '4' && tok->str()[pos - 1] == '6' && tok->str()[pos - 2] == 'i') {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 43% (fallthrough)
branch  3 taken 57%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 5577:                        type = ValueType::Type::LONGLONG;
    #####: 5578:                        pos -= 2;
      366: 5579:                    } else break;
        -: 5580:                }
     2484: 5581:                setValueType(tok, ValueType(sign, type, 0U));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        -: 5582:            }
    55328: 5583:        } else if (tok->isComparisonOp() || tok->tokType() == Token::eLogicalOp) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 2% (fallthrough)
branch  7 taken 98%
     1098: 5584:            if (mIsCpp && tok->isComparisonOp() && (getClassScope(tok->astOperand1()) || getClassScope(tok->astOperand2()))) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 71% (fallthrough)
branch  4 taken 29%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
        2: 5585:                const Function *function = getOperatorFunction(tok);
call    0 returned 100%
        2: 5586:                if (function) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 5587:                    ValueType vt;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        2: 5588:                    parsedecl(function->retDef, &vt, mDefaultSignedness, mSettings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 5589:                    setValueType(tok, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 5590:                    continue;
        -: 5591:                }
        -: 5592:            }
     1096: 5593:            setValueType(tok, ValueType(ValueType::Sign::UNKNOWN_SIGN, ValueType::Type::BOOL, 0U));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
    54230: 5594:        } else if (tok->isBoolean()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       46: 5595:            setValueType(tok, ValueType(ValueType::Sign::UNKNOWN_SIGN, ValueType::Type::BOOL, 0U));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
    54184: 5596:        } else if (tok->tokType() == Token::eChar) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       16: 5597:            setValueType(tok, ValueType(ValueType::Sign::UNKNOWN_SIGN, tok->isLong() ? ValueType::Type::WCHAR_T : ValueType::Type::CHAR, 0U));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
    54168: 5598:        } else if (tok->tokType() == Token::eString) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      244: 5599:            ValueType valuetype(ValueType::Sign::UNKNOWN_SIGN, ValueType::Type::CHAR, 1U, 1U);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
      122: 5600:            if (tok->isLong()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5601:                valuetype.originalTypeName = "wchar_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5602:                valuetype.type = ValueType::Type::WCHAR_T;
        -: 5603:            }
      122: 5604:            setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    54046: 5605:        } else if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -: 5606:            // cast
     5532: 5607:            if (tok->isCast() && !tok->astOperand2() && Token::Match(tok, "( %name%")) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 3% (fallthrough)
branch 10 taken 97%
      316: 5608:                ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
      158: 5609:                if (Token::simpleMatch(parsedecl(tok->next(), &valuetype, mDefaultSignedness, mSettings), ")"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
      158: 5610:                    setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5611:            }
        -: 5612:
        -: 5613:            // C++ cast
     5374: 5614:            else if (tok->astOperand2() && Token::Match(tok->astOperand1(), "static_cast|const_cast|dynamic_cast|reinterpret_cast < %name%") && tok->astOperand1()->linkAt(1)) {
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
       28: 5615:                ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       14: 5616:                if (Token::simpleMatch(parsedecl(tok->astOperand1()->tokAt(2), &valuetype, mDefaultSignedness, mSettings), ">"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 86% (fallthrough)
branch 11 taken 14%
       12: 5617:                    setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5618:            }
        -: 5619:
        -: 5620:            // function
     5360: 5621:            else if (tok->previous() && tok->previous()->function() && tok->previous()->function()->retDef) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 27% (fallthrough)
branch  6 taken 73%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 97% (fallthrough)
branch 10 taken 3%
branch 11 taken 26% (fallthrough)
branch 12 taken 74%
     2788: 5622:                ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
     1394: 5623:                if (parsedecl(tok->previous()->function()->retDef, &valuetype, mDefaultSignedness, mSettings))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
     1373: 5624:                    setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5625:            }
        -: 5626:
     3966: 5627:            else if (Token::simpleMatch(tok->previous(), "sizeof (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 5628:                // TODO: use specified size_t type
       56: 5629:                ValueType valuetype(ValueType::Sign::UNSIGNED, ValueType::Type::LONG, 0U);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       28: 5630:                valuetype.originalTypeName = "size_t";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       28: 5631:                setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5632:
       28: 5633:                if (Token::Match(tok, "( %type% %type%| *| *| )")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
       28: 5634:                    ValueType vt;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       14: 5635:                    if (parsedecl(tok->next(), &vt, mDefaultSignedness, mSettings)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       14: 5636:                        setValueType(tok->next(), vt);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 5637:                    }
        -: 5638:                }
        -: 5639:            }
        -: 5640:
        -: 5641:            // function style cast
     3938: 5642:            else if (tok->previous() && tok->previous()->isStandardType()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        4: 5643:                ValueType valuetype;
call    0 returned 100%
call    1 never executed
call    2 never executed
        2: 5644:                if (tok->astOperand1() && valuetype.fromLibraryType(tok->astOperand1()->expressionString(), mSettings)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 5645:                    setValueType(tok, valuetype);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5646:                    continue;
        -: 5647:                }
        -: 5648:
        2: 5649:                valuetype.type = ValueType::typeFromString(tok->previous()->str(), tok->previous()->isLong());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        2: 5650:                if (tok->previous()->isUnsigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5651:                    valuetype.sign = ValueType::Sign::UNSIGNED;
        2: 5652:                else if (tok->previous()->isSigned())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5653:                    valuetype.sign = ValueType::Sign::SIGNED;
        2: 5654:                setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -: 5655:            }
        -: 5656:
        -: 5657:            // constructor call
     3936: 5658:            else if (tok->previous() && tok->previous()->function() && tok->previous()->function()->isConstructor()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 95% (fallthrough)
branch 11 taken 5%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
       82: 5659:                ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
       41: 5660:                valuetype.type = ValueType::RECORD;
       41: 5661:                valuetype.typeScope = tok->previous()->function()->token->scope();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       41: 5662:                setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5663:            }
        -: 5664:
        -: 5665:            // library type/function
     3895: 5666:            else if (tok->previous()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     3895: 5667:                if (tok->astParent() && Token::Match(tok->astOperand1(), "%name%|::")) {
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 84% (fallthrough)
branch  8 taken 16%
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
      592: 5668:                    if (const Library::Container *c = mSettings->library.detectContainer(tok->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 5669:                        ValueType vt;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5670:                        vt.pointer = 0;
    #####: 5671:                        vt.container = c;
    #####: 5672:                        vt.type = ValueType::Type::CONTAINER;
    #####: 5673:                        setValueType(tok, vt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5674:                        continue;
        -: 5675:                    }
        -: 5676:
     1184: 5677:                    const std::string e = tok->astOperand1()->expressionString();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        -: 5678:
      592: 5679:                    if ((e == "std::make_shared" || e == "std::make_unique") && Token::Match(tok->astOperand1(), ":: %name% < %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 5680:                        ValueType vt;
call    0 never executed
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
call    4 never executed
    #####: 5681:                        parsedecl(tok->astOperand1()->tokAt(3), &vt, mDefaultSignedness, mSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5682:                        if (vt.typeScope) {
branch  0 never executed
branch  1 never executed
    #####: 5683:                            vt.smartPointerType = vt.typeScope->definedType;
    #####: 5684:                            vt.typeScope = nullptr;
    #####: 5685:                            setValueType(tok, vt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5686:                            continue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5687:                        }
        -: 5688:                    }
        -: 5689:                }
        -: 5690:
     3895: 5691:                const std::string& typestr(mSettings->library.returnValueType(tok->previous()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     3895: 5692:                if (!typestr.empty()) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
      364: 5693:                    ValueType valuetype;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      182: 5694:                    if (valuetype.fromLibraryType(typestr, mSettings)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
       12: 5695:                        setValueType(tok, valuetype);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5696:                    }
        -: 5697:                }
        -: 5698:
     3895: 5699:                if (typestr.empty() || typestr == "iterator") {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
     7570: 5700:                    if (Token::simpleMatch(tok->astOperand1(), ".") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
      288: 5701:                        tok->astOperand1()->astOperand1() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      288: 5702:                        tok->astOperand1()->astOperand2() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
     3904: 5703:                        tok->astOperand1()->astOperand1()->valueType() &&
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       47: 5704:                        tok->astOperand1()->astOperand1()->valueType()->container) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    #####: 5705:                        const Library::Container *cont = tok->astOperand1()->astOperand1()->valueType()->container;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5706:                        const std::map<std::string, Library::Container::Function>::const_iterator it = cont->functions.find(tok->astOperand1()->astOperand2()->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 5707:                        if (it != cont->functions.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5708:                            if (it->second.yield == Library::Container::Yield::START_ITERATOR ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5709:                                it->second.yield == Library::Container::Yield::END_ITERATOR ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5710:                                it->second.yield == Library::Container::Yield::ITERATOR) {
call    0 never executed
    #####: 5711:                                ValueType vt;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5712:                                vt.type = ValueType::Type::ITERATOR;
    #####: 5713:                                vt.container = cont;
    #####: 5714:                                setValueType(tok, vt);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5715:                            }
        -: 5716:                        }
        -: 5717:                    }
     3713: 5718:                    continue;
        -: 5719:                }
      364: 5720:                TokenList tokenList(mSettings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
      364: 5721:                std::istringstream istr(typestr+";");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      182: 5722:                if (tokenList.createTokens(istr)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      364: 5723:                    ValueType vt;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      182: 5724:                    tokenList.simplifyPlatformTypes();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      182: 5725:                    tokenList.simplifyStdType();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      182: 5726:                    if (parsedecl(tokenList.front(), &vt, mDefaultSignedness, mSettings)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 98% (fallthrough)
branch  5 taken 2%
      178: 5727:                        setValueType(tok, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5728:                    }
        -: 5729:                }
        -: 5730:            }
    48514: 5731:        } else if (tok->variable()) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
     7456: 5732:            setValueType(tok, *tok->variable());
call    0 returned 100%
call    1 returned 100%
    41058: 5733:        } else if (tok->enumerator()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       22: 5734:            setValueType(tok, *tok->enumerator());
call    0 returned 100%
call    1 returned 100%
    41036: 5735:        } else if (mIsCpp && tok->str() == "new") {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       34: 5736:            const Token *typeTok = tok->next();
call    0 returned 100%
       34: 5737:            if (Token::Match(typeTok, "( std| ::| nothrow )"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5738:                typeTok = typeTok->link()->next();
call    0 never executed
call    1 never executed
       34: 5739:            if (const Library::Container *c = mSettings->library.detectContainer(typeTok)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5740:                ValueType vt;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5741:                vt.pointer = 1;
    #####: 5742:                vt.container = c;
    #####: 5743:                vt.type = ValueType::Type::CONTAINER;
    #####: 5744:                setValueType(tok, vt);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5745:                continue;
        -: 5746:            }
       62: 5747:            std::string typestr;
call    0 returned 100%
call    1 never executed
call    2 never executed
       34: 5748:            while (Token::Match(typeTok, "%name% :: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5749:                typestr += typeTok->str() + "::";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 5750:                typeTok = typeTok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5751:            }
       34: 5752:            if (!Token::Match(typeTok, "%type% ;|[|("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
        2: 5753:                continue;
       32: 5754:            typestr += typeTok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       60: 5755:            ValueType vt;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 82%
branch  3 taken 18%
call    4 never executed
       32: 5756:            vt.pointer = 1;
       32: 5757:            if (typeTok->type() && typeTok->type()->classScope) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5758:                vt.type = ValueType::Type::RECORD;
    #####: 5759:                vt.typeScope = typeTok->type()->classScope;
call    0 never executed
        -: 5760:            } else {
       32: 5761:                vt.type = ValueType::typeFromString(typestr, typeTok->isLong());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       32: 5762:                if (vt.type == ValueType::Type::UNKNOWN_TYPE)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        4: 5763:                    vt.fromLibraryType(typestr, mSettings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       32: 5764:                if (vt.type == ValueType::Type::UNKNOWN_TYPE)
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        4: 5765:                    continue;
       28: 5766:                if (typeTok->isUnsigned())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5767:                    vt.sign = ValueType::Sign::UNSIGNED;
       28: 5768:                else if (typeTok->isSigned())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5769:                    vt.sign = ValueType::Sign::SIGNED;
       28: 5770:                if (vt.sign == ValueType::Sign::UNKNOWN_SIGN && vt.isIntegral())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 64% (fallthrough)
branch  4 taken 36%
branch  5 taken 64% (fallthrough)
branch  6 taken 36%
       18: 5771:                    vt.sign = (vt.type == ValueType::Type::CHAR) ? mDefaultSignedness : ValueType::Sign::SIGNED;
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -: 5772:            }
       28: 5773:            setValueType(tok, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 88%
branch  5 taken 13%
    41002: 5774:        } else if (tok->str() == "return" && tok->scope()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
      484: 5775:            const Scope* fscope = tok->scope();
call    0 returned 100%
      724: 5776:            while (fscope && !fscope->function)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
      120: 5777:                fscope = fscope->nestedIn;
      484: 5778:            if (fscope && fscope->function && fscope->function->retDef) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
      956: 5779:                ValueType vt;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
      478: 5780:                parsedecl(fscope->function->retDef, &vt, mDefaultSignedness, mSettings);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      478: 5781:                setValueType(tok, vt);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 5782:            }
        -: 5783:        }
        -: 5784:    }
        -: 5785:
     1912: 5786:    if (reportDebugWarnings && mSettings->debugwarnings) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5787:        for (Token *tok = tokens; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 5788:            if (tok->str() == "auto" && !tok->valueType())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5789:                debugMessage(tok, "auto token with no type.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 5790:        }
        -: 5791:    }
        -: 5792:
        -: 5793:    // Update functions with new type information.
     1912: 5794:    createSymbolDatabaseSetFunctionPointers(false);
call    0 returned 100%
        -: 5795:
        -: 5796:    // Update auto variables with new type information.
     1912: 5797:    createSymbolDatabaseSetVariablePointers();
call    0 returned 100%
     1912: 5798:}
        -: 5799:
function _ZN9ValueType9parseDeclEPK5TokenPK8Settings called 1574 returned 100% blocks executed 78%
     1574: 5800:ValueType ValueType::parseDecl(const Token *type, const Settings *settings)
        -: 5801:{
     1574: 5802:    ValueType vt;
call    0 returned 100%
     1574: 5803:    parsedecl(type, &vt, settings->defaultSign == 'u' ? Sign::UNSIGNED : Sign::SIGNED, settings);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
     1574: 5804:    return vt;
call    0 never executed
        -: 5805:}
        -: 5806:
function _ZN9ValueType14typeFromStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 24584 returned 100% blocks executed 100%
    24584: 5807:ValueType::Type ValueType::typeFromString(const std::string &typestr, bool longType)
        -: 5808:{
    24584: 5809:    if (typestr == "void")
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
     2546: 5810:        return ValueType::Type::VOID;
    22038: 5811:    if (typestr == "bool" || typestr == "_Bool")
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 4% (fallthrough)
branch  7 taken 96%
      904: 5812:        return ValueType::Type::BOOL;
    21134: 5813:    if (typestr== "char")
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
     1306: 5814:        return ValueType::Type::CHAR;
    19828: 5815:    if (typestr == "short")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       84: 5816:        return ValueType::Type::SHORT;
    19744: 5817:    if (typestr == "wchar_t")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       46: 5818:        return ValueType::Type::WCHAR_T;
    19698: 5819:    if (typestr == "int")
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
    12012: 5820:        return ValueType::Type::INT;
     7686: 5821:    if (typestr == "long")
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
      346: 5822:        return longType ? ValueType::Type::LONGLONG : ValueType::Type::LONG;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     7340: 5823:    if (typestr == "float")
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
      282: 5824:        return ValueType::Type::FLOAT;
     7058: 5825:    if (typestr == "double")
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
      478: 5826:        return longType ? ValueType::Type::LONGDOUBLE : ValueType::Type::DOUBLE;
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
     6580: 5827:    return ValueType::Type::UNKNOWN_TYPE;
        -: 5828:}
        -: 5829:
function _ZN9ValueType15fromLibraryTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK8Settings called 3888 returned 100% blocks executed 44%
     3888: 5830:bool ValueType::fromLibraryType(const std::string &typestr, const Settings *settings)
        -: 5831:{
     3888: 5832:    const Library::PodType* podtype = settings->library.podtype(typestr);
call    0 returned 100%
     3888: 5833:    if (podtype && (podtype->sign == 's' || podtype->sign == 'u')) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 57% (fallthrough)
branch  5 taken 43%
      117: 5834:        if (podtype->size == 1)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       15: 5835:            type = ValueType::Type::CHAR;
      102: 5836:        else if (podtype->size == settings->sizeof_int)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
       30: 5837:            type = ValueType::Type::INT;
       72: 5838:        else if (podtype->size == settings->sizeof_short)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
       17: 5839:            type = ValueType::Type::SHORT;
       55: 5840:        else if (podtype->size == settings->sizeof_long)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
       27: 5841:            type = ValueType::Type::LONG;
       28: 5842:        else if (podtype->size == settings->sizeof_long_long)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        6: 5843:            type = ValueType::Type::LONGLONG;
       22: 5844:        else if (podtype->stdtype == Library::PodType::BOOL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5845:            type = ValueType::Type::BOOL;
       22: 5846:        else if (podtype->stdtype == Library::PodType::CHAR)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5847:            type = ValueType::Type::CHAR;
       22: 5848:        else if (podtype->stdtype == Library::PodType::SHORT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5849:            type = ValueType::Type::SHORT;
       22: 5850:        else if (podtype->stdtype == Library::PodType::INT)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5851:            type = ValueType::Type::INT;
       22: 5852:        else if (podtype->stdtype == Library::PodType::LONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5853:            type = ValueType::Type::LONG;
       22: 5854:        else if (podtype->stdtype == Library::PodType::LONGLONG)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5855:            type = ValueType::Type::LONGLONG;
        -: 5856:        else
       22: 5857:            type = ValueType::Type::UNKNOWN_INT;
      117: 5858:        sign = (podtype->sign == 'u') ? ValueType::UNSIGNED : ValueType::SIGNED;
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      117: 5859:        return true;
        -: 5860:    }
        -: 5861:
     3771: 5862:    const Library::PlatformType *platformType = settings->library.platform_type(typestr, settings->platformString());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
     3771: 5863:    if (platformType) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5864:        if (platformType->mType == "char")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5865:            type = ValueType::Type::CHAR;
    #####: 5866:        else if (platformType->mType == "short")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5867:            type = ValueType::Type::SHORT;
    #####: 5868:        else if (platformType->mType == "wchar_t")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5869:            type = ValueType::Type::WCHAR_T;
    #####: 5870:        else if (platformType->mType == "int")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5871:            type = platformType->_long ? ValueType::Type::LONG : ValueType::Type::INT;
branch  0 never executed
branch  1 never executed
    #####: 5872:        else if (platformType->mType == "long")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5873:            type = platformType->_long ? ValueType::Type::LONGLONG : ValueType::Type::LONG;
branch  0 never executed
branch  1 never executed
    #####: 5874:        if (platformType->_signed)
branch  0 never executed
branch  1 never executed
    #####: 5875:            sign = ValueType::SIGNED;
    #####: 5876:        else if (platformType->_unsigned)
branch  0 never executed
branch  1 never executed
    #####: 5877:            sign = ValueType::UNSIGNED;
    #####: 5878:        if (platformType->_pointer)
branch  0 never executed
branch  1 never executed
    #####: 5879:            pointer = 1;
    #####: 5880:        if (platformType->_ptr_ptr)
branch  0 never executed
branch  1 never executed
    #####: 5881:            pointer = 2;
    #####: 5882:        if (platformType->_const_ptr)
branch  0 never executed
branch  1 never executed
    #####: 5883:            constness = 1;
    #####: 5884:        return true;
     3771: 5885:    } else if (!podtype && (typestr == "size_t" || typestr == "std::size_t")) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5886:        originalTypeName = "size_t";
call    0 never executed
    #####: 5887:        sign = ValueType::UNSIGNED;
    #####: 5888:        if (settings->sizeof_size_t == settings->sizeof_long)
branch  0 never executed
branch  1 never executed
    #####: 5889:            type = ValueType::Type::LONG;
    #####: 5890:        else if (settings->sizeof_size_t == settings->sizeof_long_long)
branch  0 never executed
branch  1 never executed
    #####: 5891:            type = ValueType::Type::LONGLONG;
    #####: 5892:        else if (settings->sizeof_size_t == settings->sizeof_int)
branch  0 never executed
branch  1 never executed
    #####: 5893:            type = ValueType::Type::INT;
        -: 5894:        else
    #####: 5895:            type = ValueType::Type::UNKNOWN_INT;
    #####: 5896:        return true;
        -: 5897:    }
        -: 5898:
     3771: 5899:    return false;
        -: 5900:}
        -: 5901:
function _ZNK9ValueType4dumpB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 5902:std::string ValueType::dump() const
        -: 5903:{
    #####: 5904:    std::ostringstream ret;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5905:    switch (type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 5906:    case UNKNOWN_TYPE:
    #####: 5907:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 5908:    case NONSTD:
    #####: 5909:        ret << "valueType-type=\"nonstd\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5910:        break;
    #####: 5911:    case RECORD:
    #####: 5912:        ret << "valueType-type=\"record\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5913:        break;
    #####: 5914:    case CONTAINER:
    #####: 5915:        ret << "valueType-type=\"container\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5916:        break;
    #####: 5917:    case ITERATOR:
    #####: 5918:        ret << "valueType-type=\"iterator\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5919:        break;
    #####: 5920:    case VOID:
    #####: 5921:        ret << "valueType-type=\"void\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5922:        break;
    #####: 5923:    case BOOL:
    #####: 5924:        ret << "valueType-type=\"bool\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5925:        break;
    #####: 5926:    case CHAR:
    #####: 5927:        ret << "valueType-type=\"char\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5928:        break;
    #####: 5929:    case SHORT:
    #####: 5930:        ret << "valueType-type=\"short\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5931:        break;
    #####: 5932:    case WCHAR_T:
    #####: 5933:        ret << "valueType-type=\"wchar_t\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5934:        break;
    #####: 5935:    case INT:
    #####: 5936:        ret << "valueType-type=\"int\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5937:        break;
    #####: 5938:    case LONG:
    #####: 5939:        ret << "valueType-type=\"long\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5940:        break;
    #####: 5941:    case LONGLONG:
    #####: 5942:        ret << "valueType-type=\"long long\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5943:        break;
    #####: 5944:    case UNKNOWN_INT:
    #####: 5945:        ret << "valueType-type=\"unknown int\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5946:        break;
    #####: 5947:    case FLOAT:
    #####: 5948:        ret << "valueType-type=\"float\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5949:        break;
    #####: 5950:    case DOUBLE:
    #####: 5951:        ret << "valueType-type=\"double\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5952:        break;
    #####: 5953:    case LONGDOUBLE:
    #####: 5954:        ret << "valueType-type=\"long double\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5955:        break;
        -: 5956:    };
        -: 5957:
    #####: 5958:    switch (sign) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5959:    case Sign::UNKNOWN_SIGN:
    #####: 5960:        break;
    #####: 5961:    case Sign::SIGNED:
    #####: 5962:        ret << " valueType-sign=\"signed\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5963:        break;
    #####: 5964:    case Sign::UNSIGNED:
    #####: 5965:        ret << " valueType-sign=\"unsigned\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5966:        break;
        -: 5967:    };
        -: 5968:
    #####: 5969:    if (bits > 0)
branch  0 never executed
branch  1 never executed
    #####: 5970:        ret << " valueType-bits=\"" << bits << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5971:
    #####: 5972:    if (pointer > 0)
branch  0 never executed
branch  1 never executed
    #####: 5973:        ret << " valueType-pointer=\"" << pointer << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5974:
    #####: 5975:    if (constness > 0)
branch  0 never executed
branch  1 never executed
    #####: 5976:        ret << " valueType-constness=\"" << constness << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5977:
    #####: 5978:    if (typeScope)
branch  0 never executed
branch  1 never executed
    #####: 5979:        ret << " valueType-typeScope=\"" << typeScope << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5980:
    #####: 5981:    if (!originalTypeName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5982:        ret << " valueType-originalTypeName=\"" << originalTypeName << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5983:
    #####: 5984:    return ret.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5985:}
        -: 5986:
function _ZNK9ValueType8typeSizeERKN8cppcheck8PlatformE called 0 returned 0% blocks executed 0%
    #####: 5987:MathLib::bigint ValueType::typeSize(const cppcheck::Platform &platform) const
        -: 5988:{
    #####: 5989:    switch (type) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 5990:    case ValueType::Type::BOOL:
    #####: 5991:        return platform.sizeof_bool;
    #####: 5992:    case ValueType::Type::CHAR:
    #####: 5993:        return 1;
    #####: 5994:    case ValueType::Type::SHORT:
    #####: 5995:        return platform.sizeof_short;
    #####: 5996:    case ValueType::Type::WCHAR_T:
    #####: 5997:        return platform.sizeof_wchar_t;
    #####: 5998:    case ValueType::Type::INT:
    #####: 5999:        return platform.sizeof_int;
    #####: 6000:    case ValueType::Type::LONG:
    #####: 6001:        return platform.sizeof_long;
    #####: 6002:    case ValueType::Type::LONGLONG:
    #####: 6003:        return platform.sizeof_long_long;
    #####: 6004:    case ValueType::Type::FLOAT:
    #####: 6005:        return platform.sizeof_float;
    #####: 6006:    case ValueType::Type::DOUBLE:
    #####: 6007:        return platform.sizeof_double;
    #####: 6008:    case ValueType::Type::LONGDOUBLE:
    #####: 6009:        return platform.sizeof_long_double;
    #####: 6010:    default:
    #####: 6011:        return 0;
        -: 6012:    };
        -: 6013:
        -: 6014:}
        -: 6015:
function _ZNK9ValueType3strB5cxx11Ev called 18 returned 100% blocks executed 20%
       18: 6016:std::string ValueType::str() const
        -: 6017:{
       36: 6018:    std::string ret;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       18: 6019:    if (constness & 1)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        2: 6020:        ret = " const";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18: 6021:    if (type == VOID)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6022:        ret += " void";
call    0 never executed
branch  1 never executed
branch  2 never executed
       18: 6023:    else if (isIntegral()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6024:        if (sign == SIGNED)
branch  0 never executed
branch  1 never executed
    #####: 6025:            ret += " signed";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6026:        else if (sign == UNSIGNED)
branch  0 never executed
branch  1 never executed
    #####: 6027:            ret += " unsigned";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6028:        if (type == BOOL)
branch  0 never executed
branch  1 never executed
    #####: 6029:            ret += " bool";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6030:        else if (type == CHAR)
branch  0 never executed
branch  1 never executed
    #####: 6031:            ret += " char";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6032:        else if (type == SHORT)
branch  0 never executed
branch  1 never executed
    #####: 6033:            ret += " short";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6034:        else if (type == WCHAR_T)
branch  0 never executed
branch  1 never executed
    #####: 6035:            ret += " wchar_t";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6036:        else if (type == INT)
branch  0 never executed
branch  1 never executed
    #####: 6037:            ret += " int";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6038:        else if (type == LONG)
branch  0 never executed
branch  1 never executed
    #####: 6039:            ret += " long";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6040:        else if (type == LONGLONG)
branch  0 never executed
branch  1 never executed
    #####: 6041:            ret += " long long";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6042:        else if (type == UNKNOWN_INT)
branch  0 never executed
branch  1 never executed
    #####: 6043:            ret += " unknown_int";
call    0 never executed
branch  1 never executed
branch  2 never executed
       18: 6044:    } else if (type == FLOAT)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        8: 6045:        ret += " float";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       10: 6046:    else if (type == DOUBLE)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        6: 6047:        ret += " double";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4: 6048:    else if (type == LONGDOUBLE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 6049:        ret += " long double";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    #####: 6050:    else if ((type == ValueType::Type::NONSTD || type == ValueType::Type::RECORD) && typeScope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6051:        std::string className(typeScope->className);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 6052:        const Scope *scope = typeScope->definedType ? typeScope->definedType->enclosingScope : typeScope->nestedIn;
branch  0 never executed
branch  1 never executed
    #####: 6053:        while (scope && scope->type != Scope::eGlobal) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6054:            if (scope->type == Scope::eClass || scope->type == Scope::eStruct || scope->type == Scope::eNamespace)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6055:                className = scope->className + "::" + className;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 6056:            scope = scope->definedType ? scope->definedType->enclosingScope : scope->nestedIn;
branch  0 never executed
branch  1 never executed
        -: 6057:        }
    #####: 6058:        ret += ' ' + className;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 6059:    } else if (type == ValueType::Type::CONTAINER && container) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6060:        ret += " container(" + container->startPattern + ')';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 6061:    } else if (type == ValueType::Type::ITERATOR && container) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6062:        ret += " iterator(" + container->startPattern + ')';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 6063:    } else if (smartPointerType) {
branch  0 never executed
branch  1 never executed
    #####: 6064:        ret += " smart-pointer<" + smartPointerType->name() + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 6065:    }
       36: 6066:    for (unsigned int p = 0; p < pointer; p++) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       18: 6067:        ret += " *";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18: 6068:        if (constness & (2 << p))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6069:            ret += " const";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6070:    }
       36: 6071:    return ret.empty() ? ret : ret.substr(1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        -: 6072:}
        -: 6073:
function _ZN9ValueType14matchParameterEPKS_S1_ called 831 returned 100% blocks executed 76%
      831: 6074:ValueType::MatchResult ValueType::matchParameter(const ValueType *call, const ValueType *func)
        -: 6075:{
      831: 6076:    if (!call || !func)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      309: 6077:        return ValueType::MatchResult::UNKNOWN;
      522: 6078:    if (call->pointer != func->pointer) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 6079:        if (call->pointer > 1 && func->pointer == 1 && func->type == ValueType::Type::VOID)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 6080:            return ValueType::MatchResult::FALLBACK1;
        1: 6081:        if (call->pointer == 1 && call->type == ValueType::Type::CHAR && func->pointer == 0 && func->container && func->container->stdStringLike)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 6082:            return ValueType::MatchResult::FALLBACK2;
        1: 6083:        return ValueType::MatchResult::NOMATCH; // TODO
        -: 6084:    }
      521: 6085:    if (call->pointer > 0 && ((call->constness | func->constness) != func->constness))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6086:        return ValueType::MatchResult::NOMATCH;
      521: 6087:    if (call->type != func->type) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        9: 6088:        if (call->type == ValueType::Type::VOID || func->type == ValueType::Type::VOID)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6089:            return ValueType::MatchResult::FALLBACK1;
        9: 6090:        if (call->pointer > 0 && func->pointer > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 6091:            return func->type == ValueType::UNKNOWN_TYPE ? ValueType::MatchResult::UNKNOWN : ValueType::MatchResult::NOMATCH;
branch  0 never executed
branch  1 never executed
        9: 6092:        if (call->isIntegral() && func->isIntegral())
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
branch  6 taken 11% (fallthrough)
branch  7 taken 89%
        1: 6093:            return call->type < func->type ?
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6094:                   ValueType::MatchResult::FALLBACK1 :
        1: 6095:                   ValueType::MatchResult::FALLBACK2;
        8: 6096:        else if (call->isFloat() && func->isFloat())
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 63%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 38% (fallthrough)
branch  7 taken 63%
        3: 6097:            return ValueType::MatchResult::FALLBACK1;
        5: 6098:        else if (call->isIntegral() && func->isFloat())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 6099:            return ValueType::MatchResult::FALLBACK2;
        5: 6100:        else if (call->isFloat() && func->isIntegral())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 6101:            return ValueType::MatchResult::FALLBACK2;
        5: 6102:        return ValueType::MatchResult::UNKNOWN; // TODO
        -: 6103:    }
        -: 6104:
      512: 6105:    if (call->typeScope != nullptr || func->typeScope != nullptr)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       42: 6106:        return call->typeScope == func->typeScope ? ValueType::MatchResult::SAME : ValueType::MatchResult::NOMATCH;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 6107:
      470: 6108:    if (call->container != nullptr || func->container != nullptr) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       58: 6109:        if (call->container != func->container)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6110:            return ValueType::MatchResult::NOMATCH;
        -: 6111:    }
        -: 6112:
      441: 6113:    else if (func->type < ValueType::Type::VOID || func->type == ValueType::Type::UNKNOWN_INT)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        3: 6114:        return ValueType::MatchResult::UNKNOWN;
        -: 6115:
      467: 6116:    if (call->isIntegral() && func->isIntegral() && call->sign != ValueType::Sign::UNKNOWN_SIGN && func->sign != ValueType::Sign::UNKNOWN_SIGN && call->sign != func->sign)
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 90% (fallthrough)
branch  7 taken 10%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        1: 6117:        return ValueType::MatchResult::FALLBACK1;
        -: 6118:
      466: 6119:    return ValueType::MatchResult::SAME;
        -: 6120:}
        -: 6121:
function _ZN9ValueType14matchParameterEPKS_PK8VariableS4_ called 799 returned 100% blocks executed 82%
      799: 6122:ValueType::MatchResult ValueType::matchParameter(const ValueType *call, const Variable *callVar, const Variable *funcVar)
        -: 6123:{
      799: 6124:    ValueType::MatchResult res = ValueType::matchParameter(call, funcVar->valueType());
call    0 returned 100%
call    1 returned 100%
      799: 6125:    if (res == ValueType::MatchResult::SAME && callVar && call->container) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
       10: 6126:        const std::string type1 = getTypeString(callVar->typeStartToken());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
       10: 6127:        const std::string type2 = getTypeString(funcVar->typeStartToken());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        5: 6128:        if (type1 != type2)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6129:            return ValueType::MatchResult::NOMATCH;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 6130:    }
      799: 6131:    return res;
function _GLOBAL__sub_I__ZN14SymbolDatabaseC2EPK9TokenizerPK8SettingsP11ErrorLogger called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 50%
        3: 6132:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
