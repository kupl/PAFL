        -:    0:Source:/home/workspace/lib/library.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/library.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/library.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "library.h"
        -:   20:
        -:   21:#include "astutils.h"
        -:   22:#include "mathlib.h"
        -:   23:#include "path.h"
        -:   24:#include "symboldatabase.h"
        -:   25:#include "tinyxml2.h"
        -:   26:#include "token.h"
        -:   27:#include "tokenlist.h"
        -:   28:#include "utils.h"
        -:   29:
        -:   30:#include <cctype>
        -:   31:#include <cstdlib>
        -:   32:#include <cstring>
        -:   33:#include <list>
        -:   34:
function _ZL8getnamesPKc called 694 returned 100% blocks executed 80%
      694:   35:static std::vector<std::string> getnames(const char *names)
        -:   36:{
      694:   37:    std::vector<std::string> ret;
call    0 returned 100%
     1396:   38:    while (const char *p = std::strchr(names,',')) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
      702:   39:        ret.emplace_back(names, p-names);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
      702:   40:        names = p + 1;
      702:   41:    }
      694:   42:    ret.emplace_back(names);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      694:   43:    return ret;
        -:   44:}
        -:   45:
function _ZL21gettokenlistfromvalidRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEER9TokenList called 0 returned 0% blocks executed 0%
    #####:   46:static void gettokenlistfromvalid(const std::string& valid, TokenList& tokenList)
        -:   47:{
    #####:   48:    std::istringstream istr(valid + ',');
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   49:    tokenList.createTokens(istr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   50:    for (Token *tok = tokenList.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   51:        if (Token::Match(tok,"- %num%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   52:            tok->str("-" + tok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####:   53:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   54:        }
        -:   55:    }
    #####:   56:}
call    0 never executed
        -:   57:
function _ZN7LibraryC2Ev called 78 returned 100% blocks executed 100%
       78:   58:Library::Library() : mAllocId(0)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
        -:   59:{
       78:   60:}
        -:   61:
function _ZN7Library4loadEPKcS1_ called 1 returned 100% blocks executed 18%
        1:   62:Library::Error Library::load(const char exename[], const char path[])
        -:   63:{
        1:   64:    if (std::strchr(path,',') != nullptr) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:        std::string p(path);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   66:        for (;;) {
    #####:   67:            const std::string::size_type pos = p.find(',');
call    0 never executed
    #####:   68:            if (pos == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:   69:                break;
    #####:   70:            const Error &e = load(exename, p.substr(0,pos).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:   71:            if (e.errorcode != OK)
branch  0 never executed
branch  1 never executed
    #####:   72:                return e;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:            p = p.substr(pos+1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:   74:        }
    #####:   75:        if (!p.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   76:            return load(exename, p.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   77:        return Error();
call    0 never executed
        -:   78:    }
        -:   79:
        2:   80:    std::string absolute_path;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -:   81:    // open file..
        2:   82:    tinyxml2::XMLDocument doc;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1:   83:    tinyxml2::XMLError error = doc.LoadFile(path);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   84:    if (error == tinyxml2::XML_ERROR_FILE_READ_ERROR && Path::getFilenameExtension(path).empty())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
        -:   85:        // Reading file failed, try again...
    #####:   86:        error = tinyxml2::XML_ERROR_FILE_NOT_FOUND;
        1:   87:    if (error == tinyxml2::XML_ERROR_FILE_NOT_FOUND) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:        // failed to open file.. is there no extension?
    #####:   89:        std::string fullfilename(path);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:   90:        if (Path::getFilenameExtension(fullfilename).empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   91:            fullfilename += ".cfg";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   92:            error = doc.LoadFile(fullfilename.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   93:            if (error != tinyxml2::XML_ERROR_FILE_NOT_FOUND)
branch  0 never executed
branch  1 never executed
    #####:   94:                absolute_path = Path::getAbsoluteFilePath(fullfilename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:   95:        }
        -:   96:
    #####:   97:        std::list<std::string> cfgfolders;
call    0 never executed
call    1 never executed
call    2 never executed
        -:   98:#ifdef FILESDIR
    #####:   99:        cfgfolders.emplace_back(FILESDIR "/cfg");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  100:#endif
    #####:  101:        if (exename) {
branch  0 never executed
branch  1 never executed
    #####:  102:            const std::string exepath(Path::fromNativeSeparators(Path::getPathFromFilename(exename)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
    #####:  103:            cfgfolders.push_back(exepath + "cfg");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  104:            cfgfolders.push_back(exepath);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  105:        }
        -:  106:
    #####:  107:        while (error == tinyxml2::XML_ERROR_FILE_NOT_FOUND && !cfgfolders.empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  108:            const std::string cfgfolder(cfgfolders.front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  109:            cfgfolders.pop_front();
call    0 never executed
    #####:  110:            const char *sep = (!cfgfolder.empty() && endsWith(cfgfolder,'/') ? "" : "/");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  111:            const std::string filename(cfgfolder + sep + fullfilename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  112:            error = doc.LoadFile(filename.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  113:            if (error != tinyxml2::XML_ERROR_FILE_NOT_FOUND)
branch  0 never executed
branch  1 never executed
    #####:  114:                absolute_path = Path::getAbsoluteFilePath(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  115:        }
        -:  116:    } else
        1:  117:        absolute_path = Path::getAbsoluteFilePath(path);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        -:  118:
        1:  119:    if (error == tinyxml2::XML_SUCCESS) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  120:        if (mFiles.find(absolute_path) == mFiles.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 never executed
        2:  121:            Error err = load(doc);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        1:  122:            if (err.errorcode == OK)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  123:                mFiles.insert(absolute_path);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  124:            return err;
call    0 returned 100%
        -:  125:        }
        -:  126:
    #####:  127:        return Error(OK); // ignore duplicates
call    0 never executed
        -:  128:    }
        -:  129:
    #####:  130:    if (error == tinyxml2::XML_ERROR_FILE_NOT_FOUND)
branch  0 never executed
branch  1 never executed
    #####:  131:        return Error(FILE_NOT_FOUND);
call    0 never executed
        -:  132:    else {
    #####:  133:        doc.PrintError();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  134:        return Error(BAD_XML);
call    0 never executed
        -:  135:    }
        -:  136:}
        -:  137:
function _ZN7Library11loadxmldataEPKcm called 0 returned 0% blocks executed 0%
    #####:  138:bool Library::loadxmldata(const char xmldata[], std::size_t len)
        -:  139:{
    #####:  140:    tinyxml2::XMLDocument doc;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  141:    return (tinyxml2::XML_SUCCESS == doc.Parse(xmldata, len)) && (load(doc).errorcode == OK);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
        -:  142:}
        -:  143:
function _ZN7Library4loadERKN8tinyxml211XMLDocumentE called 2 returned 100% blocks executed 36%
        2:  144:Library::Error Library::load(const tinyxml2::XMLDocument &doc)
        -:  145:{
        2:  146:    const tinyxml2::XMLElement * const rootnode = doc.FirstChildElement();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  147:
        2:  148:    if (rootnode == nullptr) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  149:        doc.PrintError();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  150:        return Error(BAD_XML);
call    0 never executed
        -:  151:    }
        -:  152:
        2:  153:    if (strcmp(rootnode->Name(),"def") != 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  154:        return Error(UNSUPPORTED_FORMAT, rootnode->Name());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  155:
        2:  156:    const char* format_string = rootnode->Attribute("format");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  157:    int format = 1; // Assume format version 1 if nothing else is specified (very old .cfg files had no 'format' attribute)
        2:  158:    if (format_string)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  159:        format = atoi(format_string);
        -:  160:
        2:  161:    if (format > 2 || format <= 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  162:        return Error(UNSUPPORTED_FORMAT);
call    0 never executed
        -:  163:
        4:  164:    std::set<std::string> unknown_elements;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  165:
      768:  166:    for (const tinyxml2::XMLElement *node = rootnode->FirstChildElement(); node; node = node->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
     1532:  167:        const std::string nodename = node->Name();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
      766:  168:        if (nodename == "memory" || nodename == "resource") {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        -:  169:            // get allocationId to use..
        2:  170:            int allocationId = 0;
       12:  171:            for (const tinyxml2::XMLElement *memorynode = node->FirstChildElement(); memorynode; memorynode = memorynode->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 83% (fallthrough)
branch  4 taken 17%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
       10:  172:                if (strcmp(memorynode->Name(),"dealloc")==0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
        4:  173:                    const std::map<std::string, AllocFunc>::const_iterator it = mDealloc.find(memorynode->GetText());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
        2:  174:                    if (it != mDealloc.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  175:                        allocationId = it->second.groupId;
call    0 never executed
    #####:  176:                        break;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -:  177:                    }
        -:  178:                }
        -:  179:            }
        2:  180:            if (allocationId == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  181:                if (nodename == "memory")
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        2:  182:                    while (!ismemory(++mAllocId));
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  183:                else
        1:  184:                    while (!isresource(++mAllocId));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        2:  185:                allocationId = mAllocId;
        -:  186:            }
        -:  187:
        -:  188:            // add alloc/dealloc/use functions..
       12:  189:            for (const tinyxml2::XMLElement *memorynode = node->FirstChildElement(); memorynode; memorynode = memorynode->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 83% (fallthrough)
branch  4 taken 17%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
       20:  190:                const std::string memorynodename = memorynode->Name();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       10:  191:                if (memorynodename == "alloc" || memorynodename == "realloc") {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
call    3 returned 100%
branch  4 taken 60% (fallthrough)
branch  5 taken 40%
branch  6 taken 80% (fallthrough)
branch  7 taken 20%
        8:  192:                    AllocFunc temp = {0};
        8:  193:                    temp.groupId = allocationId;
        -:  194:
        8:  195:                    if (memorynode->Attribute("init", "false"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        4:  196:                        returnuninitdata.insert(memorynode->GetText());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
        -:  197:
        8:  198:                    const char *arg = memorynode->Attribute("arg");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  199:                    if (arg)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  200:                        temp.arg = atoi(arg);
        -:  201:                    else
        8:  202:                        temp.arg = -1;
        -:  203:
        8:  204:                    const char *bufferSize = memorynode->Attribute("buffer-size");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  205:                    if (!bufferSize)
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        3:  206:                        temp.bufferSize = AllocFunc::BufferSize::none;
        -:  207:                    else {
        5:  208:                        if (std::strncmp(bufferSize, "malloc", 6) == 0)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3:  209:                            temp.bufferSize = AllocFunc::BufferSize::malloc;
        2:  210:                        else if (std::strncmp(bufferSize, "calloc", 6) == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  211:                            temp.bufferSize = AllocFunc::BufferSize::calloc;
    #####:  212:                        else if (std::strncmp(bufferSize, "strdup", 6) == 0)
branch  0 never executed
branch  1 never executed
    #####:  213:                            temp.bufferSize = AllocFunc::BufferSize::strdup;
        -:  214:                        else
    #####:  215:                            return Error(BAD_ATTRIBUTE_VALUE, bufferSize);
call    0 never executed
branch  1 never executed
branch  2 never executed
        5:  216:                        temp.bufferSizeArg1 = 1;
        5:  217:                        temp.bufferSizeArg2 = 2;
        5:  218:                        if (bufferSize[6] == 0) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  219:                            // use default values
        3:  220:                        } else if (bufferSize[6] == ':' && bufferSize[7] >= '1' && bufferSize[7] <= '5') {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        3:  221:                            temp.bufferSizeArg1 = bufferSize[7] - '0';
        6:  222:                            if (bufferSize[8] == ',' && bufferSize[9] >= '1' && bufferSize[9] <= '5')
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1:  223:                                temp.bufferSizeArg2 = bufferSize[9] - '0';
        -:  224:                        } else
    #####:  225:                            return Error(BAD_ATTRIBUTE_VALUE, bufferSize);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  226:                    }
        -:  227:
        8:  228:                    if (memorynodename == "realloc") {
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 63%
        3:  229:                        const char *reallocArg =  memorynode->Attribute("realloc-arg");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  230:                        if (reallocArg)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  231:                            temp.reallocArg = atoi(reallocArg);
        -:  232:                        else
        2:  233:                            temp.reallocArg = 1;
        -:  234:                    }
        -:  235:
        8:  236:                    if (memorynodename != "realloc")
call    0 returned 100%
branch  1 taken 63% (fallthrough)
branch  2 taken 38%
        5:  237:                        mAlloc[memorynode->GetText()] = temp;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        -:  238:                    else
        3:  239:                        mRealloc[memorynode->GetText()] = temp;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        2:  240:                } else if (memorynodename == "dealloc") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  241:                    AllocFunc temp = {0};
        2:  242:                    temp.groupId = allocationId;
        2:  243:                    const char *arg = memorynode->Attribute("arg");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  244:                    if (arg)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  245:                        temp.arg = atoi(arg);
        -:  246:                    else
        2:  247:                        temp.arg = 1;
        2:  248:                    mDealloc[memorynode->GetText()] = temp;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
    #####:  249:                } else if (memorynodename == "use")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  250:                    functions[memorynode->GetText()].use = true;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  251:                else
    #####:  252:                    unknown_elements.insert(memorynodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        -:  253:            }
        -:  254:        }
        -:  255:
      764:  256:        else if (nodename == "define") {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
       56:  257:            const char *name = node->Attribute("name");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       56:  258:            if (name == nullptr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  259:                return Error(MISSING_ATTRIBUTE, "name");
call    0 never executed
branch  1 never executed
branch  2 never executed
       56:  260:            const char *value = node->Attribute("value");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       56:  261:            if (value == nullptr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  262:                return Error(MISSING_ATTRIBUTE, "value");
call    0 never executed
branch  1 never executed
branch  2 never executed
      168:  263:            defines.push_back(std::string(name) +
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
      112:  264:                              " " +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  265:                              value);
        -:  266:        }
        -:  267:
      708:  268:        else if (nodename == "function") {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
      591:  269:            const char *name = node->Attribute("name");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      591:  270:            if (name == nullptr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  271:                return Error(MISSING_ATTRIBUTE, "name");
call    0 never executed
branch  1 never executed
branch  2 never executed
     1847:  272:            for (const std::string &s : getnames(name)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 68% (fallthrough)
branch  7 taken 32%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 100%
branch 15 taken 0%
call   16 returned 100%
branch 17 taken 100%
branch 18 taken 0%
call   19 never executed
call   20 never executed
call   21 never executed
     2512:  273:                const Error &err = loadFunction(node, s, unknown_elements);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
     1256:  274:                if (err.errorcode != ErrorCode::OK)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  275:                    return err;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -:  276:            }
        -:  277:        }
        -:  278:
      117:  279:        else if (nodename == "reflection") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  280:            for (const tinyxml2::XMLElement *reflectionnode = node->FirstChildElement(); reflectionnode; reflectionnode = reflectionnode->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  281:                if (strcmp(reflectionnode->Name(), "call") != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  282:                    unknown_elements.insert(reflectionnode->Name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  283:                    continue;
        -:  284:                }
        -:  285:
    #####:  286:                const char * const argString = reflectionnode->Attribute("arg");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  287:                if (!argString)
branch  0 never executed
branch  1 never executed
    #####:  288:                    return Error(MISSING_ATTRIBUTE, "arg");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:
    #####:  290:                mReflection[reflectionnode->GetText()] = atoi(argString);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  291:            }
        -:  292:        }
        -:  293:
      117:  294:        else if (nodename == "markup") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  295:            const char * const extension = node->Attribute("ext");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  296:            if (!extension)
branch  0 never executed
branch  1 never executed
    #####:  297:                return Error(MISSING_ATTRIBUTE, "ext");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  298:            mMarkupExtensions.insert(extension);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  299:
    #####:  300:            mReportErrors[extension] = (node->Attribute("reporterrors", "true") != nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  301:            mProcessAfterCode[extension] = (node->Attribute("aftercode", "true") != nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  302:
    #####:  303:            for (const tinyxml2::XMLElement *markupnode = node->FirstChildElement(); markupnode; markupnode = markupnode->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  304:                const std::string markupnodename = markupnode->Name();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  305:                if (markupnodename == "keywords") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  306:                    for (const tinyxml2::XMLElement *librarynode = markupnode->FirstChildElement(); librarynode; librarynode = librarynode->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  307:                        if (strcmp(librarynode->Name(), "keyword") == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  308:                            const char* nodeName = librarynode->Attribute("name");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  309:                            if (nodeName == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  310:                                return Error(MISSING_ATTRIBUTE, "name");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  311:                            mKeywords[extension].insert(nodeName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -:  312:                        } else
    #####:  313:                            unknown_elements.insert(librarynode->Name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  314:                    }
        -:  315:                }
        -:  316:
    #####:  317:                else if (markupnodename == "exported") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  318:                    for (const tinyxml2::XMLElement *exporter = markupnode->FirstChildElement(); exporter; exporter = exporter->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  319:                        if (strcmp(exporter->Name(), "exporter") != 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  320:                            unknown_elements.insert(exporter->Name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  321:                            continue;
        -:  322:                        }
        -:  323:
    #####:  324:                        const char * const prefix = exporter->Attribute("prefix");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  325:                        if (!prefix)
branch  0 never executed
branch  1 never executed
    #####:  326:                            return Error(MISSING_ATTRIBUTE, "prefix");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  327:
    #####:  328:                        for (const tinyxml2::XMLElement *e = exporter->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  329:                            const std::string ename = e->Name();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  330:                            if (ename == "prefix")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  331:                                mExporters[prefix].addPrefix(e->GetText());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
    #####:  332:                            else if (ename == "suffix")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  333:                                mExporters[prefix].addSuffix(e->GetText());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
        -:  334:                            else
    #####:  335:                                unknown_elements.insert(ename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  336:                        }
        -:  337:                    }
        -:  338:                }
        -:  339:
    #####:  340:                else if (markupnodename == "imported") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  341:                    for (const tinyxml2::XMLElement *librarynode = markupnode->FirstChildElement(); librarynode; librarynode = librarynode->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  342:                        if (strcmp(librarynode->Name(), "importer") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  343:                            mImporters[extension].insert(librarynode->GetText());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
        -:  344:                        else
    #####:  345:                            unknown_elements.insert(librarynode->Name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -:  346:                    }
        -:  347:                }
        -:  348:
    #####:  349:                else if (markupnodename == "codeblocks") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  350:                    for (const tinyxml2::XMLElement *blocknode = markupnode->FirstChildElement(); blocknode; blocknode = blocknode->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  351:                        const std::string blocknodename = blocknode->Name();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  352:                        if (blocknodename == "block") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  353:                            const char * blockName = blocknode->Attribute("name");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  354:                            if (blockName)
branch  0 never executed
branch  1 never executed
    #####:  355:                                mExecutableBlocks[extension].addBlock(blockName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  356:                        } else if (blocknodename == "structure") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  357:                            const char * start = blocknode->Attribute("start");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  358:                            if (start)
branch  0 never executed
branch  1 never executed
    #####:  359:                                mExecutableBlocks[extension].setStart(start);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  360:                            const char * end = blocknode->Attribute("end");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  361:                            if (end)
branch  0 never executed
branch  1 never executed
    #####:  362:                                mExecutableBlocks[extension].setEnd(end);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  363:                            const char * offset = blocknode->Attribute("offset");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  364:                            if (offset)
branch  0 never executed
branch  1 never executed
    #####:  365:                                mExecutableBlocks[extension].setOffset(atoi(offset));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  366:                        }
        -:  367:
        -:  368:                        else
    #####:  369:                            unknown_elements.insert(blocknodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  370:                    }
        -:  371:                }
        -:  372:
        -:  373:                else
    #####:  374:                    unknown_elements.insert(markupnodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  375:            }
        -:  376:        }
        -:  377:
      117:  378:        else if (nodename == "container") {
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
       14:  379:            const char* const id = node->Attribute("id");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  380:            if (!id)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  381:                return Error(MISSING_ATTRIBUTE, "id");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  382:
       14:  383:            Container& container = containers[id];
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        -:  384:
       14:  385:            const char* const inherits = node->Attribute("inherits");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  386:            if (inherits) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
       26:  387:                const std::map<std::string, Container>::const_iterator i = containers.find(inherits);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
       13:  388:                if (i != containers.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       13:  389:                    container = i->second; // Take values from parent and overwrite them if necessary
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  390:                else
    #####:  391:                    return Error(BAD_ATTRIBUTE_VALUE, inherits);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -:  392:            }
        -:  393:
       14:  394:            const char* const startPattern = node->Attribute("startPattern");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  395:            if (startPattern) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       12:  396:                container.startPattern = startPattern;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  397:                container.startPattern2 = container.startPattern + " !!::";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:  398:            }
       14:  399:            const char* const endPattern = node->Attribute("endPattern");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  400:            if (endPattern)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        2:  401:                container.endPattern = endPattern;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  402:            const char* const itEndPattern = node->Attribute("itEndPattern");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  403:            if (itEndPattern)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:  404:                container.itEndPattern = itEndPattern;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  405:            const char* const opLessAllowed = node->Attribute("opLessAllowed");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  406:            if (opLessAllowed)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        4:  407:                container.opLessAllowed = std::string(opLessAllowed) == "true";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
        -:  408:
       37:  409:            for (const tinyxml2::XMLElement *containerNode = node->FirstChildElement(); containerNode; containerNode = containerNode->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 62% (fallthrough)
branch  4 taken 38%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
       46:  410:                const std::string containerNodeName = containerNode->Name();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       23:  411:                if (containerNodeName == "size" || containerNodeName == "access" || containerNodeName == "other") {
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
call    3 returned 100%
branch  4 taken 29% (fallthrough)
branch  5 taken 71%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 78% (fallthrough)
branch 10 taken 22%
      120:  412:                    for (const tinyxml2::XMLElement *functionNode = containerNode->FirstChildElement(); functionNode; functionNode = functionNode->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 85% (fallthrough)
branch  4 taken 15%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
      102:  413:                        if (std::string(functionNode->Name()) != "function") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
    #####:  414:                            unknown_elements.insert(functionNode->Name());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  415:                            continue;
        -:  416:                        }
        -:  417:
      102:  418:                        const char* const functionName = functionNode->Attribute("name");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      102:  419:                        if (!functionName)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  420:                            return Error(MISSING_ATTRIBUTE, "name");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  421:
      102:  422:                        const char* const action_ptr = functionNode->Attribute("action");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      102:  423:                        Container::Action action = Container::Action::NO_ACTION;
      102:  424:                        if (action_ptr) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      130:  425:                            std::string actionName = action_ptr;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
       65:  426:                            if (actionName == "resize")
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        1:  427:                                action = Container::Action::RESIZE;
       64:  428:                            else if (actionName == "clear")
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        1:  429:                                action = Container::Action::CLEAR;
       63:  430:                            else if (actionName == "push")
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
       23:  431:                                action = Container::Action::PUSH;
       40:  432:                            else if (actionName == "pop")
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 83%
        7:  433:                                action = Container::Action::POP;
       33:  434:                            else if (actionName == "find")
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
       10:  435:                                action = Container::Action::FIND;
       23:  436:                            else if (actionName == "insert")
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
        2:  437:                                action = Container::Action::INSERT;
       21:  438:                            else if (actionName == "erase")
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        2:  439:                                action = Container::Action::ERASE;
       19:  440:                            else if (actionName == "change-content")
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
        3:  441:                                action = Container::Action::CHANGE_CONTENT;
       16:  442:                            else if (actionName == "change-internal")
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 63%
        6:  443:                                action = Container::Action::CHANGE_INTERNAL;
       10:  444:                            else if (actionName == "change")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       10:  445:                                action = Container::Action::CHANGE;
        -:  446:                            else
    #####:  447:                                return Error(BAD_ATTRIBUTE_VALUE, actionName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -:  448:                        }
        -:  449:
      102:  450:                        const char* const yield_ptr = functionNode->Attribute("yields");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      102:  451:                        Container::Yield yield = Container::Yield::NO_YIELD;
      102:  452:                        if (yield_ptr) {
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
       86:  453:                            std::string yieldName = yield_ptr;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       43:  454:                            if (yieldName == "at_index")
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
        4:  455:                                yield = Container::Yield::AT_INDEX;
       39:  456:                            else if (yieldName == "item")
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
       11:  457:                                yield = Container::Yield::ITEM;
       28:  458:                            else if (yieldName == "buffer")
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
        3:  459:                                yield = Container::Yield::BUFFER;
       25:  460:                            else if (yieldName == "buffer-nt")
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        1:  461:                                yield = Container::Yield::BUFFER_NT;
       24:  462:                            else if (yieldName == "start-iterator")
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        4:  463:                                yield = Container::Yield::START_ITERATOR;
       20:  464:                            else if (yieldName == "end-iterator")
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
        4:  465:                                yield = Container::Yield::END_ITERATOR;
       16:  466:                            else if (yieldName == "iterator")
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
       12:  467:                                yield = Container::Yield::ITERATOR;
        4:  468:                            else if (yieldName == "size")
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        3:  469:                                yield = Container::Yield::SIZE;
        1:  470:                            else if (yieldName == "empty")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  471:                                yield = Container::Yield::EMPTY;
        -:  472:                            else
    #####:  473:                                return Error(BAD_ATTRIBUTE_VALUE, yieldName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -:  474:                        }
        -:  475:
      102:  476:                        container.functions[functionName].action = action;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      102:  477:                        container.functions[functionName].yield = yield;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -:  478:                    }
        -:  479:
       18:  480:                    if (containerNodeName == "size") {
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        6:  481:                        const char* const templateArg = containerNode->Attribute("templateParameter");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  482:                        if (templateArg)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  483:                            container.size_templateArgNo = atoi(templateArg);
       12:  484:                    } else if (containerNodeName == "access") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       12:  485:                        const char* const indexArg = containerNode->Attribute("indexOperator");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  486:                        if (indexArg)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        4:  487:                            container.arrayLike_indexOp = std::string(indexArg) == "array-like";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        -:  488:                    }
        5:  489:                } else if (containerNodeName == "type") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5:  490:                    const char* const templateArg = containerNode->Attribute("templateParameter");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  491:                    if (templateArg)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        3:  492:                        container.type_templateArgNo = atoi(templateArg);
        -:  493:
        5:  494:                    const char* const string = containerNode->Attribute("string");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  495:                    if (string)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  496:                        container.stdStringLike = std::string(string) == "std-like";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        5:  497:                    const char* const associative = containerNode->Attribute("associative");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  498:                    if (associative)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        2:  499:                        container.stdAssociativeLike = std::string(associative) == "std-like";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        -:  500:                } else
    #####:  501:                    unknown_elements.insert(containerNodeName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        -:  502:            }
        -:  503:        }
        -:  504:
      103:  505:        else if (nodename == "smart-pointer") {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        4:  506:            const char *className = node->Attribute("class-name");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  507:            if (className)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  508:                smartPointers.insert(className);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
        -:  509:        }
        -:  510:
       99:  511:        else if (nodename == "podtype") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       99:  512:            const char * const name = node->Attribute("name");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       99:  513:            if (!name)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  514:                return Error(MISSING_ATTRIBUTE, "name");
call    0 never executed
branch  1 never executed
branch  2 never executed
       99:  515:            PodType podType = {0};
       99:  516:            podType.stdtype = PodType::NO;
       99:  517:            const char * const stdtype = node->Attribute("stdtype");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       99:  518:            if (stdtype) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       12:  519:                if (std::strcmp(stdtype, "bool") == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1:  520:                    podType.stdtype = PodType::BOOL;
       11:  521:                else if (std::strcmp(stdtype, "char") == 0)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        3:  522:                    podType.stdtype = PodType::CHAR;
        8:  523:                else if (std::strcmp(stdtype, "short") == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        2:  524:                    podType.stdtype = PodType::SHORT;
        6:  525:                else if (std::strcmp(stdtype, "int") == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  526:                    podType.stdtype = PodType::INT;
        4:  527:                else if (std::strcmp(stdtype, "long") == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  528:                    podType.stdtype = PodType::LONG;
        2:  529:                else if (std::strcmp(stdtype, "long long") == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  530:                    podType.stdtype = PodType::LONGLONG;
        -:  531:            }
       99:  532:            const char * const size = node->Attribute("size");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       99:  533:            if (size)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       15:  534:                podType.size = atoi(size);
       99:  535:            const char * const sign = node->Attribute("sign");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       99:  536:            if (sign)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       50:  537:                podType.sign = *sign;
      235:  538:            for (const std::string &s : getnames(name))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 58% (fallthrough)
branch  7 taken 42%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
      136:  539:                mPodTypes[s] = podType;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  540:        }
        -:  541:
    #####:  542:        else if (nodename == "platformtype") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  543:            const char * const type_name = node->Attribute("name");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  544:            if (type_name == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  545:                return Error(MISSING_ATTRIBUTE, "name");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  546:            const char *value = node->Attribute("value");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  547:            if (value == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  548:                return Error(MISSING_ATTRIBUTE, "value");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  549:            PlatformType type;
call    0 never executed
call    1 never executed
    #####:  550:            type.mType = value;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  551:            std::set<std::string> platform;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  552:            for (const tinyxml2::XMLElement *typenode = node->FirstChildElement(); typenode; typenode = typenode->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  553:                const std::string typenodename = typenode->Name();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  554:                if (typenodename == "platform") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  555:                    const char * const type_attribute = typenode->Attribute("type");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  556:                    if (type_attribute == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  557:                        return Error(MISSING_ATTRIBUTE, "type");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  558:                    platform.insert(type_attribute);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  559:                } else if (typenodename == "signed")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  560:                    type._signed = true;
    #####:  561:                else if (typenodename == "unsigned")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  562:                    type._unsigned = true;
    #####:  563:                else if (typenodename == "long")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  564:                    type._long = true;
    #####:  565:                else if (typenodename == "pointer")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  566:                    type._pointer= true;
    #####:  567:                else if (typenodename == "ptr_ptr")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  568:                    type._ptr_ptr = true;
    #####:  569:                else if (typenodename == "const_ptr")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  570:                    type._const_ptr = true;
        -:  571:                else
    #####:  572:                    unknown_elements.insert(typenodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  573:            }
    #####:  574:            if (platform.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  575:                const PlatformType * const type_ptr = platform_type(type_name, emptyString);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  576:                if (type_ptr) {
branch  0 never executed
branch  1 never executed
    #####:  577:                    if (*type_ptr == type)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  578:                        return Error(DUPLICATE_PLATFORM_TYPE, type_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  579:                    return Error(PLATFORM_TYPE_REDEFINED, type_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  580:                }
    #####:  581:                mPlatformTypes[type_name] = type;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  582:            } else {
    #####:  583:                for (const std::string &p : platform) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
    #####:  584:                    const PlatformType * const type_ptr = platform_type(type_name, p);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  585:                    if (type_ptr) {
branch  0 never executed
branch  1 never executed
    #####:  586:                        if (*type_ptr == type)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  587:                            return Error(DUPLICATE_PLATFORM_TYPE, type_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  588:                        return Error(PLATFORM_TYPE_REDEFINED, type_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  589:                    }
    #####:  590:                    mPlatforms[p].mPlatformTypes[type_name] = type;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  591:                }
        -:  592:            }
        -:  593:        }
        -:  594:
        -:  595:        else
    #####:  596:            unknown_elements.insert(nodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        -:  597:    }
        2:  598:    if (!unknown_elements.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  599:        std::string str;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  600:        for (std::set<std::string>::const_iterator i = unknown_elements.begin(); i != unknown_elements.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  601:            str += *i;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  602:            if (++i != unknown_elements.end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  603:                str += ", ";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  604:        }
    #####:  605:        return Error(UNKNOWN_ELEMENT, str);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  606:    }
        2:  607:    return Error(OK);
call    0 returned 100%
        -:  608:}
        -:  609:
function _ZN7Library12loadFunctionEPKN8tinyxml210XMLElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNSt7__debug3setIS9_St4lessIS9_ESaIS9_EEE called 1256 returned 100% blocks executed 62%
     1256:  610:Library::Error Library::loadFunction(const tinyxml2::XMLElement * const node, const std::string &name, std::set<std::string> &unknown_elements)
        -:  611:{
     1256:  612:    if (name.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  613:        return Error(OK);
call    0 never executed
        -:  614:
     1256:  615:    Function& func = functions[name];
call    0 returned 100%
        -:  616:
     8077:  617:    for (const tinyxml2::XMLElement *functionnode = node->FirstChildElement(); functionnode; functionnode = functionnode->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
call    3 returned 100%
    13642:  618:        const std::string functionnodename = functionnode->Name();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
     6821:  619:        if (functionnodename == "noreturn")
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
     1254:  620:            mNoReturn[name] = (strcmp(functionnode->GetText(), "true") == 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
     5567:  621:        else if (functionnodename == "pure")
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
      542:  622:            func.ispure = true;
     5025:  623:        else if (functionnodename == "const") {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       97:  624:            func.ispure = true;
       97:  625:            func.isconst = true; // a constant function is pure
     4928:  626:        } else if (functionnodename == "leak-ignore")
call    0 returned 100%
branch  1 taken 21% (fallthrough)
branch  2 taken 79%
     1024:  627:            func.leakignore = true;
     3904:  628:        else if (functionnodename == "use-retval")
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
      780:  629:            func.useretval = true;
     3124:  630:        else if (functionnodename == "returnValue") {
call    0 returned 100%
branch  1 taken 35% (fallthrough)
branch  2 taken 65%
     1096:  631:            if (const char *expr = functionnode->GetText())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
       74:  632:                mReturnValue[name] = expr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
     1096:  633:            if (const char *type = functionnode->Attribute("type"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     1092:  634:                mReturnValueType[name] = type;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
     1096:  635:            if (const char *container = functionnode->Attribute("container"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
       27:  636:                mReturnValueContainer[name] = std::atoi(container);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1096:  637:            if (const char *unknownReturnValues = functionnode->Attribute("unknownValues")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1:  638:                if (std::strcmp(unknownReturnValues, "all") == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  639:                    std::vector<MathLib::bigint> values{LLONG_MIN, LLONG_MAX};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        1:  640:                    mUnknownReturnValues[name] = values;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  641:                }
        -:  642:            }
     2028:  643:        } else if (functionnodename == "arg") {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     1997:  644:            const char* argNrString = functionnode->Attribute("nr");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1997:  645:            if (!argNrString)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  646:                return Error(MISSING_ATTRIBUTE, "nr");
call    0 never executed
branch  1 never executed
branch  2 never executed
     1997:  647:            const bool bAnyArg = strcmp(argNrString, "any") == 0;
     1997:  648:            const bool bVariadicArg = strcmp(argNrString, "variadic") == 0;
     1997:  649:            const int nr = (bAnyArg || bVariadicArg) ? -1 : std::atoi(argNrString);
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
     1997:  650:            ArgumentChecks &ac = func.argumentChecks[nr];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1997:  651:            ac.optional  = functionnode->Attribute("default") != nullptr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1997:  652:            ac.variadic = bVariadicArg;
     1997:  653:            const char * const argDirection = functionnode->Attribute("direction");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1997:  654:            if (argDirection) {
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
     1634:  655:                const size_t argDirLen = strlen(argDirection);
     1634:  656:                if (!strncmp(argDirection, "in", argDirLen)) {
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
     1348:  657:                    ac.direction = ArgumentChecks::Direction::DIR_IN;
      286:  658:                } else if (!strncmp(argDirection, "out", argDirLen)) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      183:  659:                    ac.direction = ArgumentChecks::Direction::DIR_OUT;
      103:  660:                } else if (!strncmp(argDirection, "inout", argDirLen)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      103:  661:                    ac.direction = ArgumentChecks::Direction::DIR_INOUT;
        -:  662:                }
        -:  663:            }
     4949:  664:            for (const tinyxml2::XMLElement *argnode = functionnode->FirstChildElement(); argnode; argnode = argnode->NextSiblingElement()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 60% (fallthrough)
branch  4 taken 40%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
     5904:  665:                const std::string argnodename = argnode->Name();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
     2952:  666:                if (argnodename == "not-bool")
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      101:  667:                    ac.notbool = true;
     2851:  668:                else if (argnodename == "not-null")
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
      480:  669:                    ac.notnull = true;
     2371:  670:                else if (argnodename == "not-uninit")
call    0 returned 100%
branch  1 taken 74% (fallthrough)
branch  2 taken 26%
     1756:  671:                    ac.notuninit = true;
      615:  672:                else if (argnodename == "formatstr")
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       33:  673:                    ac.formatstr = true;
      582:  674:                else if (argnodename == "strz")
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
       81:  675:                    ac.strz = true;
      501:  676:                else if (argnodename == "valid") {
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
        -:  677:                    // Validate the validation expression
      305:  678:                    const char *p = argnode->GetText();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      305:  679:                    bool error = false;
      305:  680:                    bool range = false;
      305:  681:                    bool has_dot = false;
        -:  682:
      305:  683:                    if (!p)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  684:                        return Error(BAD_ATTRIBUTE_VALUE, "\"\"");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  685:
      305:  686:                    error = *p == '.';
     2267:  687:                    for (; *p; p++) {
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
      981:  688:                        if (std::isdigit(*p))
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
branch  2 taken 59% (fallthrough)
branch  3 taken 41%
      576:  689:                            error |= (*(p+1) == '-');
      405:  690:                        else if (*p == ':') {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
      313:  691:                            error |= range | (*(p+1) == '.');
      313:  692:                            range = true;
      313:  693:                            has_dot = false;
       92:  694:                        } else if (*p == '-')
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       20:  695:                            error |= (!std::isdigit(*(p+1)));
       72:  696:                        else if (*p == ',') {
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
       42:  697:                            range = false;
       42:  698:                            error |= *(p+1) == '.';
       42:  699:                            has_dot = false;
       30:  700:                        } else if (*p == '.') {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       30:  701:                            error |= has_dot | (!std::isdigit(*(p+1)));
       30:  702:                            has_dot = true;
        -:  703:                        } else
    #####:  704:                            error = true;
        -:  705:                    }
      305:  706:                    if (error)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  707:                        return Error(BAD_ATTRIBUTE_VALUE, argnode->GetText());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  708:
        -:  709:                    // Set validation expression
      305:  710:                    ac.valid = argnode->GetText();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  711:                }
        -:  712:
      196:  713:                else if (argnodename == "minsize") {
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
       88:  714:                    const char *typeattr = argnode->Attribute("type");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       88:  715:                    if (!typeattr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  716:                        return Error(MISSING_ATTRIBUTE, "type");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  717:
        -:  718:                    ArgumentChecks::MinSize::Type type;
       88:  719:                    if (strcmp(typeattr,"strlen")==0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        4:  720:                        type = ArgumentChecks::MinSize::Type::STRLEN;
       84:  721:                    else if (strcmp(typeattr,"argvalue")==0)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
       80:  722:                        type = ArgumentChecks::MinSize::Type::ARGVALUE;
        4:  723:                    else if (strcmp(typeattr,"sizeof")==0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  724:                        type = ArgumentChecks::MinSize::Type::SIZEOF;
        4:  725:                    else if (strcmp(typeattr,"mul")==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  726:                        type = ArgumentChecks::MinSize::Type::MUL;
    #####:  727:                    else if (strcmp(typeattr,"value")==0)
branch  0 never executed
branch  1 never executed
    #####:  728:                        type = ArgumentChecks::MinSize::Type::VALUE;
        -:  729:                    else
    #####:  730:                        return Error(BAD_ATTRIBUTE_VALUE, typeattr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  731:
       88:  732:                    if (type == ArgumentChecks::MinSize::Type::VALUE) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  733:                        const char *valueattr = argnode->Attribute("value");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  734:                        if (!valueattr)
branch  0 never executed
branch  1 never executed
    #####:  735:                            return Error(MISSING_ATTRIBUTE, "value");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:                        long long minsizevalue = 0;
        -:  737:                        try {
    #####:  738:                            minsizevalue = MathLib::toLongNumber(valueattr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    =====:  739:                        } catch (const InternalError&) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====:  740:                            return Error(BAD_ATTRIBUTE_VALUE, valueattr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  741:                        }
    #####:  742:                        if (minsizevalue <= 0)
branch  0 never executed
branch  1 never executed
    #####:  743:                            return Error(BAD_ATTRIBUTE_VALUE, valueattr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  744:                        ac.minsizes.emplace_back(type, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  745:                        ac.minsizes.back().value = minsizevalue;
call    0 never executed
        -:  746:                    } else {
       88:  747:                        const char *argattr = argnode->Attribute("arg");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       88:  748:                        if (!argattr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  749:                            return Error(MISSING_ATTRIBUTE, "arg");
call    0 never executed
branch  1 never executed
branch  2 never executed
       88:  750:                        if (strlen(argattr) != 1 || argattr[0]<'0' || argattr[0]>'9')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  751:                            return Error(BAD_ATTRIBUTE_VALUE, argattr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  752:
       88:  753:                        ac.minsizes.reserve(type == ArgumentChecks::MinSize::Type::MUL ? 2 : 1);
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       88:  754:                        ac.minsizes.emplace_back(type, argattr[0] - '0');
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       88:  755:                        if (type == ArgumentChecks::MinSize::Type::MUL) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        4:  756:                            const char *arg2attr = argnode->Attribute("arg2");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  757:                            if (!arg2attr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  758:                                return Error(MISSING_ATTRIBUTE, "arg2");
call    0 never executed
branch  1 never executed
branch  2 never executed
        4:  759:                            if (strlen(arg2attr) != 1 || arg2attr[0]<'0' || arg2attr[0]>'9')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  760:                                return Error(BAD_ATTRIBUTE_VALUE, arg2attr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        4:  761:                            ac.minsizes.back().arg2 = arg2attr[0] - '0';
call    0 returned 100%
        -:  762:                        }
        -:  763:                    }
        -:  764:                }
        -:  765:
      108:  766:                else if (argnodename == "iterator") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      108:  767:                    ac.iteratorInfo.it = true;
      108:  768:                    const char* str = argnode->Attribute("type");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      108:  769:                    ac.iteratorInfo.first = str ? (std::strcmp(str, "first") == 0) : false;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 51% (fallthrough)
branch  3 taken 49%
      108:  770:                    ac.iteratorInfo.last = str ? (std::strcmp(str, "last") == 0) : false;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 46% (fallthrough)
branch  3 taken 54%
      108:  771:                    str = argnode->Attribute("container");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      108:  772:                    ac.iteratorInfo.container = str ? std::atoi(str) : 0;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  773:                }
        -:  774:
        -:  775:                else
    #####:  776:                    unknown_elements.insert(argnodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        -:  777:            }
       31:  778:        } else if (functionnodename == "ignorefunction") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  779:            func.ignore = true;
       31:  780:        } else if (functionnodename == "formatstr") {
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
       25:  781:            func.formatstr = true;
       25:  782:            const tinyxml2::XMLAttribute* scan = functionnode->FindAttribute("scan");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       25:  783:            const tinyxml2::XMLAttribute* secure = functionnode->FindAttribute("secure");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       25:  784:            func.formatstr_scan = scan && scan->BoolValue();
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       25:  785:            func.formatstr_secure = secure && secure->BoolValue();
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        6:  786:        } else if (functionnodename == "warn") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       12:  787:            WarnInfo wi;
call    0 returned 100%
call    1 never executed
        6:  788:            const char* const severity = functionnode->Attribute("severity");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  789:            if (severity == nullptr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  790:                return Error(MISSING_ATTRIBUTE, "severity");
call    0 never executed
branch  1 never executed
branch  2 never executed
        6:  791:            wi.severity = Severity::fromString(severity);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -:  792:
        6:  793:            const char* const cstd = functionnode->Attribute("cstd");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  794:            if (cstd) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  795:                if (!wi.standards.setC(cstd))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
    #####:  796:                    return Error(BAD_ATTRIBUTE_VALUE, cstd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  797:            } else
        4:  798:                wi.standards.c = Standards::C89;
        -:  799:
        6:  800:            const char* const cppstd = functionnode->Attribute("cppstd");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  801:            if (cppstd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  802:                if (!wi.standards.setCPP(cppstd))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  803:                    return Error(BAD_ATTRIBUTE_VALUE, cppstd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  804:            } else
        6:  805:                wi.standards.cpp = Standards::CPP03;
        -:  806:
        6:  807:            const char* const reason = functionnode->Attribute("reason");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  808:            const char* const alternatives = functionnode->Attribute("alternatives");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  809:            if (reason && alternatives) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  810:                // Construct message
        4:  811:                wi.message = std::string(reason) + " function '" + name + "' called. It is recommended to use ";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        8:  812:                std::vector<std::string> alt = getnames(alternatives);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        8:  813:                for (std::size_t i = 0; i < alt.size(); ++i) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        4:  814:                    wi.message += "'" + alt[i] + "'";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        4:  815:                    if (i == alt.size() - 1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  816:                        wi.message += " instead.";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    #####:  817:                    else if (i == alt.size() - 2)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  818:                        wi.message += " or ";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  819:                    else
    #####:  820:                        wi.message += ", ";
call    0 never executed
branch  1 never executed
branch  2 never executed
        4:  821:                }
        -:  822:            } else {
        2:  823:                const char * const message = functionnode->GetText();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  824:                if (!message) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  825:                    return Error(MISSING_ATTRIBUTE, "\"reason\" and \"alternatives\" or some text.");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  826:                } else
        2:  827:                    wi.message = message;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  828:            }
        -:  829:
        6:  830:            functionwarn[name] = wi;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100%
branch  8 taken 0%
        -:  831:        } else
    #####:  832:            unknown_elements.insert(functionnodename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        -:  833:    }
     1256:  834:    return Error(OK);
call    0 returned 100%
call    1 never executed
        -:  835:}
        -:  836:
function _ZNK7Library13isIntArgValidEPK5Tokenix called 0 returned 0% blocks executed 0%
    #####:  837:bool Library::isIntArgValid(const Token *ftok, int argnr, const MathLib::bigint argvalue) const
        -:  838:{
    #####:  839:    const ArgumentChecks *ac = getarg(ftok, argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  840:    if (!ac || ac->valid.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  841:        return true;
    #####:  842:    else if (ac->valid.find('.') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  843:        return isFloatArgValid(ftok, argnr, argvalue);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:    TokenList tokenList(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  845:    gettokenlistfromvalid(ac->valid, tokenList);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  846:    for (const Token *tok = tokenList.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  847:        if (tok->isNumber() && argvalue == MathLib::toLongNumber(tok->str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  848:            return true;
    #####:  849:        if (Token::Match(tok, "%num% : %num%") && argvalue >= MathLib::toLongNumber(tok->str()) && argvalue <= MathLib::toLongNumber(tok->strAt(2)))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####:  850:            return true;
    #####:  851:        if (Token::Match(tok, "%num% : ,") && argvalue >= MathLib::toLongNumber(tok->str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  852:            return true;
    #####:  853:        if ((!tok->previous() || tok->previous()->str() == ",") && Token::Match(tok,": %num%") && argvalue <= MathLib::toLongNumber(tok->strAt(1)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
    #####:  854:            return true;
        -:  855:    }
    #####:  856:    return false;
        -:  857:}
        -:  858:
function _ZNK7Library15isFloatArgValidEPK5Tokenid called 0 returned 0% blocks executed 0%
    #####:  859:bool Library::isFloatArgValid(const Token *ftok, int argnr, double argvalue) const
        -:  860:{
    #####:  861:    const ArgumentChecks *ac = getarg(ftok, argnr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  862:    if (!ac || ac->valid.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  863:        return true;
    #####:  864:    TokenList tokenList(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  865:    gettokenlistfromvalid(ac->valid, tokenList);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  866:    for (const Token *tok = tokenList.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  867:        if (Token::Match(tok, "%num% : %num%") && argvalue >= MathLib::toDoubleNumber(tok->str()) && argvalue <= MathLib::toDoubleNumber(tok->strAt(2)))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
    #####:  868:            return true;
    #####:  869:        if (Token::Match(tok, "%num% : ,") && argvalue >= MathLib::toDoubleNumber(tok->str()))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  870:            return true;
    #####:  871:        if ((!tok->previous() || tok->previous()->str() == ",") && Token::Match(tok,": %num%") && argvalue <= MathLib::toDoubleNumber(tok->strAt(1)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
    #####:  872:            return true;
        -:  873:    }
    #####:  874:    return false;
        -:  875:}
        -:  876:
function _ZNK7Library15getFunctionNameB5cxx11EPK5TokenPb called 11626 returned 100% blocks executed 59%
    11626:  877:std::string Library::getFunctionName(const Token *ftok, bool *error) const
        -:  878:{
    11626:  879:    if (!ftok) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  880:        *error = true;
    #####:  881:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  882:    }
    11626:  883:    if (ftok->isName()) {
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
    31330:  884:        for (const Scope *scope = ftok->scope(); scope; scope = scope->nestedIn) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
    21008:  885:            if (!scope->isClassOrStruct())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
    20435:  886:                continue;
      573:  887:            const std::vector<Type::BaseInfo> &derivedFrom = scope->definedType->derivedFrom;
      595:  888:            for (const Type::BaseInfo & baseInfo : derivedFrom) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
call   15 never executed
       44:  889:                const std::string name(baseInfo.name + "::" + ftok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       22:  890:                if (functions.find(name) != functions.end() && matchArguments(ftok, name))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
call   17 returned 100%
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####:  891:                    return name;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        -:  892:            }
        -:  893:        }
    10322:  894:        return ftok->str();
call    0 returned 100%
call    1 returned 100%
        -:  895:    }
     1304:  896:    if (ftok->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 59% (fallthrough)
branch  3 taken 41%
      764:  897:        if (!ftok->astOperand2())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       17:  898:            return getFunctionName(ftok->astOperand1(), error);
call    0 returned 100%
call    1 returned 100%
      747:  899:        return getFunctionName(ftok->astOperand1(),error) + "::" + getFunctionName(ftok->astOperand2(),error);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  900:    }
      540:  901:    if (ftok->str() == "." && ftok->astOperand1()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
     1080:  902:        const std::string type = astCanonicalType(ftok->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
      540:  903:        if (type.empty()) {
call    0 returned 100%
branch  1 taken 36% (fallthrough)
branch  2 taken 64%
      194:  904:            *error = true;
      194:  905:            return "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  906:        }
        -:  907:
      346:  908:        return type + "::" + getFunctionName(ftok->astOperand2(),error);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        -:  909:    }
    #####:  910:    *error = true;
    #####:  911:    return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  912:}
        -:  913:
function _ZNK7Library15getFunctionNameB5cxx11EPK5Token called 12754 returned 100% blocks executed 75%
    12754:  914:std::string Library::getFunctionName(const Token *ftok) const
        -:  915:{
    12754:  916:    if (!Token::Match(ftok, "%name% (") && (ftok->strAt(-1) != "&" || ftok->previous()->astOperand2()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 2% (fallthrough)
branch 10 taken 98%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 taken 3% (fallthrough)
branch 16 taken 97%
      344:  917:        return "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  918:
        -:  919:    // Lookup function name using AST..
    12410:  920:    if (ftok->astParent()) {
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
     9769:  921:        bool error = false;
     9769:  922:        const Token * tok = ftok->astParent()->isUnaryOp("&") ? ftok->astParent()->astOperand1() : ftok->next()->astOperand1();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 returned 100%
call   16 never executed
call   17 never executed
    19538:  923:        const std::string ret = getFunctionName(tok, &error);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     9769:  924:        return error ? std::string() : ret;
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  925:    }
        -:  926:
        -:  927:    // Lookup function name without using AST..
     2641:  928:    if (Token::simpleMatch(ftok->previous(), "."))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
       81:  929:        return "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     2560:  930:    if (!Token::Match(ftok->tokAt(-2), "%name% ::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 97% (fallthrough)
branch  7 taken 3%
     2482:  931:        return ftok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      156:  932:    std::string ret(ftok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       78:  933:    ftok = ftok->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      234:  934:    while (Token::Match(ftok, "%name% ::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
       78:  935:        ret = ftok->str() + "::" + ret;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
       78:  936:        ftok = ftok->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  937:    }
       78:  938:    return ret;
call    0 returned 100%
        -:  939:}
        -:  940:
function _ZNK7Library12isnullargbadEPK5Tokeni called 285 returned 100% blocks executed 84%
      285:  941:bool Library::isnullargbad(const Token *ftok, int argnr) const
        -:  942:{
      285:  943:    const ArgumentChecks *arg = getarg(ftok, argnr);
call    0 returned 100%
      285:  944:    if (!arg) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:  945:        // scan format string argument should not be null
      446:  946:        const std::string funcname = getFunctionName(ftok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
      446:  947:        const std::map<std::string, Function>::const_iterator it = functions.find(funcname);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
      223:  948:        if (it != functions.cend() && it->second.formatstr && it->second.formatstr_scan)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####:  949:            return true;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -:  950:    }
      285:  951:    return arg && arg->notnull;
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  952:}
        -:  953:
function _ZNK7Library14isuninitargbadEPK5Tokeni called 7 returned 100% blocks executed 73%
        7:  954:bool Library::isuninitargbad(const Token *ftok, int argnr) const
        -:  955:{
        7:  956:    const ArgumentChecks *arg = getarg(ftok, argnr);
call    0 returned 100%
        7:  957:    if (!arg) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  958:        // non-scan format string argument should not be uninitialized
        2:  959:        const std::string funcname = getFunctionName(ftok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
        2:  960:        const std::map<std::string, Function>::const_iterator it = functions.find(funcname);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
        1:  961:        if (it != functions.cend() && it->second.formatstr && !it->second.formatstr_scan)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####:  962:            return true;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -:  963:    }
        7:  964:    return arg && arg->notuninit;
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  965:}
        -:  966:
        -:  967:
        -:  968:/** get allocation info for function */
function _ZNK7Library16getAllocFuncInfoEPK5Token called 126 returned 100% blocks executed 61%
      126:  969:const Library::AllocFunc* Library::getAllocFuncInfo(const Token *tok) const
        -:  970:{
      252:  971:    const std::string funcname = getFunctionName(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      252:  972:    return isNotLibraryFunction(tok) && functions.find(funcname) != functions.end() ? nullptr : getAllocDealloc(mAlloc, funcname);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 34% (fallthrough)
branch  4 taken 66%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
branch 15 taken 34% (fallthrough)
branch 16 taken 66%
call   17 returned 100%
branch 18 taken 34% (fallthrough)
branch 19 taken 66%
call   20 returned 100%
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
        -:  973:}
        -:  974:
        -:  975:/** get deallocation info for function */
function _ZNK7Library18getDeallocFuncInfoEPK5Token called 0 returned 0% blocks executed 0%
    #####:  976:const Library::AllocFunc* Library::getDeallocFuncInfo(const Token *tok) const
        -:  977:{
    #####:  978:    const std::string funcname = getFunctionName(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  979:    return isNotLibraryFunction(tok) && functions.find(funcname) != functions.end() ? nullptr : getAllocDealloc(mDealloc, funcname);
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
        -:  980:}
        -:  981:
        -:  982:/** get reallocation info for function */
function _ZNK7Library18getReallocFuncInfoEPK5Token called 121 returned 100% blocks executed 61%
      121:  983:const Library::AllocFunc* Library::getReallocFuncInfo(const Token *tok) const
        -:  984:{
      242:  985:    const std::string funcname = getFunctionName(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      242:  986:    return isNotLibraryFunction(tok) && functions.find(funcname) != functions.end() ? nullptr : getAllocDealloc(mRealloc, funcname);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 36% (fallthrough)
branch  4 taken 64%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
branch 15 taken 36% (fallthrough)
branch 16 taken 64%
call   17 returned 100%
branch 18 taken 36% (fallthrough)
branch 19 taken 64%
call   20 returned 100%
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
        -:  987:}
        -:  988:
        -:  989:/** get allocation id for function */
function _ZNK7Library10getAllocIdEPK5Tokeni called 0 returned 0% blocks executed 0%
    #####:  990:int Library::getAllocId(const Token *tok, int arg) const
        -:  991:{
    #####:  992:    const Library::AllocFunc* af = getAllocFuncInfo(tok);
call    0 never executed
    #####:  993:    return (af && af->arg == arg) ? af->groupId : 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  994:}
        -:  995:
        -:  996:/** get deallocation id for function */
function _ZNK7Library12getDeallocIdEPK5Tokeni called 0 returned 0% blocks executed 0%
    #####:  997:int Library::getDeallocId(const Token *tok, int arg) const
        -:  998:{
    #####:  999:    const Library::AllocFunc* af = getDeallocFuncInfo(tok);
call    0 never executed
    #####: 1000:    return (af && af->arg == arg) ? af->groupId : 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1001:}
        -: 1002:
        -: 1003:/** get reallocation id for function */
function _ZNK7Library12getReallocIdEPK5Tokeni called 0 returned 0% blocks executed 0%
    #####: 1004:int Library::getReallocId(const Token *tok, int arg) const
        -: 1005:{
    #####: 1006:    const Library::AllocFunc* af = getReallocFuncInfo(tok);
call    0 never executed
    #####: 1007:    return (af && af->arg == arg) ? af->groupId : 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1008:}
        -: 1009:
        -: 1010:
function _ZNK7Library6getargEPK5Tokeni called 582 returned 100% blocks executed 76%
      582: 1011:const Library::ArgumentChecks * Library::getarg(const Token *ftok, int argnr) const
        -: 1012:{
      582: 1013:    if (isNotLibraryFunction(ftok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 70% (fallthrough)
branch  4 taken 30%
      406: 1014:        return nullptr;
      352: 1015:    const std::map<std::string, Function>::const_iterator it1 = functions.find(getFunctionName(ftok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
      176: 1016:    if (it1 == functions.cend())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
       16: 1017:        return nullptr;
      320: 1018:    const std::map<int,ArgumentChecks>::const_iterator it2 = it1->second.argumentChecks.find(argnr);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
      160: 1019:    if (it2 != it1->second.argumentChecks.cend())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 85% (fallthrough)
branch  5 taken 15%
      136: 1020:        return &it2->second;
call    0 returned 100%
       48: 1021:    const std::map<int,ArgumentChecks>::const_iterator it3 = it1->second.argumentChecks.find(-1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
       24: 1022:    if (it3 != it1->second.argumentChecks.cend())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1023:        return &it3->second;
call    0 never executed
       24: 1024:    return nullptr;
        -: 1025:}
        -: 1026:
function _ZNK7Library15isScopeNoReturnEPK5TokenPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1090 returned 100% blocks executed 75%
     1090: 1027:bool Library::isScopeNoReturn(const Token *end, std::string *unknownFunc) const
        -: 1028:{
     1090: 1029:    if (unknownFunc)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1090: 1030:        unknownFunc->clear();
call    0 returned 100%
        -: 1031:
     1090: 1032:    if (Token::Match(end->tokAt(-2), "!!{ ; }")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
      318: 1033:        const Token *lastTop = end->tokAt(-2)->astTop();
call    0 returned 100%
call    1 returned 100%
      636: 1034:        if (Token::simpleMatch(lastTop, "<<") &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      318: 1035:            Token::simpleMatch(lastTop->astOperand1(), "(") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1036:            Token::Match(lastTop->astOperand1()->previous(), "%name% ("))
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1037:            return isnoreturn(lastTop->astOperand1()->previous());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1038:    }
        -: 1039:
     1090: 1040:    if (!Token::simpleMatch(end->tokAt(-2), ") ; }"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
      980: 1041:        return false;
        -: 1042:
      110: 1043:    const Token *funcname = end->linkAt(-2)->previous();
call    0 returned 100%
call    1 returned 100%
      110: 1044:    const Token *start = funcname;
      110: 1045:    if (Token::Match(funcname->tokAt(-3),"( * %name% )")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1046:        funcname = funcname->previous();
call    0 never executed
    #####: 1047:        start = funcname->tokAt(-3);
call    0 never executed
      110: 1048:    } else if (funcname->isName()) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
      339: 1049:        while (Token::Match(start, "%name%|.|::"))
call    0 returned 100%
branch  1 taken 54% (fallthrough)
branch  2 taken 46%
      119: 1050:            start = start->previous();
call    0 returned 100%
        -: 1051:    } else {
        9: 1052:        return false;
        -: 1053:    }
      101: 1054:    if (Token::Match(start,"[;{}]") && Token::Match(funcname, "%name% )| (")) {
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 94% (fallthrough)
branch  7 taken 6%
       95: 1055:        if (funcname->str() == "exit")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1056:            return true;
       95: 1057:        if (!isnotnoreturn(funcname)) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
       93: 1058:            if (unknownFunc && !isnoreturn(funcname))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       93: 1059:                *unknownFunc = funcname->str();
call    0 returned 100%
call    1 returned 100%
       93: 1060:            return true;
        -: 1061:        }
        -: 1062:    }
        8: 1063:    return false;
        -: 1064:}
        -: 1065:
function _ZNK7Library15detectContainerEPK5Tokenb called 18277 returned 100% blocks executed 92%
    18277: 1066:const Library::Container* Library::detectContainer(const Token* typeStart, bool iterator) const
        -: 1067:{
   255846: 1068:    for (std::map<std::string, Container>::const_iterator i = containers.begin(); i != containers.end(); ++i) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 97%
branch  9 taken 3%
call   10 never executed
   238160: 1069:        const Container& container = i->second;
call    0 returned 100%
   238160: 1070:        if (container.startPattern.empty())
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
    34122: 1071:            continue;
        -: 1072:
   204038: 1073:        if (!Token::Match(typeStart, container.startPattern2.c_str()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
   203443: 1074:            continue;
        -: 1075:
      595: 1076:        if (!iterator && container.endPattern.empty()) // If endPattern is undefined, it will always match, but itEndPattern has to be defined.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 59% (fallthrough)
branch  4 taken 41%
branch  5 taken 59% (fallthrough)
branch  6 taken 41%
      350: 1077:            return &container;
        -: 1078:
      980: 1079:        for (const Token* tok = typeStart; tok && !tok->varId(); tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
      980: 1080:            if (tok->link()) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
      245: 1081:                const std::string& endPattern = iterator ? container.itEndPattern : container.endPattern;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      245: 1082:                if (Token::Match(tok->link(), endPattern.c_str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
      241: 1083:                    return &container;
        4: 1084:                break;
        -: 1085:            }
        -: 1086:        }
        -: 1087:    }
    17686: 1088:    return nullptr;
        -: 1089:}
        -: 1090:
function _ZN7Library16isContainerYieldEPK5TokenNS_9Container5YieldERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1091:bool Library::isContainerYield(const Token * const cond, Library::Container::Yield y, const std::string& fallback)
        -: 1092:{
    #####: 1093:    if (!cond)
branch  0 never executed
branch  1 never executed
    #####: 1094:        return false;
    #####: 1095:    if (cond->str() == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1096:        const Token* tok = cond->astOperand1();
call    0 never executed
    #####: 1097:        if (tok && tok->str() == ".") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1098:            if (tok->astOperand1() && tok->astOperand1()->valueType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1099:                if (const Library::Container *container = tok->astOperand1()->valueType()->container) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1100:                    return tok->astOperand2() && y == container->getYield(tok->astOperand2()->str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1101:                }
    #####: 1102:            } else if (!fallback.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1103:                return Token::simpleMatch(cond, "( )") && cond->previous()->str() == fallback;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1104:            }
        -: 1105:        }
        -: 1106:    }
    #####: 1107:    return false;
        -: 1108:}
        -: 1109:
        -: 1110:// returns true if ftok is not a library function
function _ZNK7Library20isNotLibraryFunctionEPK5Token called 10114 returned 100% blocks executed 90%
    10114: 1111:bool Library::isNotLibraryFunction(const Token *ftok) const
        -: 1112:{
    10114: 1113:    if (ftok->function() && ftok->function()->nestedIn && ftok->function()->nestedIn->type != Scope::eGlobal)
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 39% (fallthrough)
branch  8 taken 62%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       77: 1114:        return true;
        -: 1115:
        -: 1116:    // variables are not library functions.
    10037: 1117:    if (ftok->varId())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      100: 1118:        return true;
        -: 1119:
     9937: 1120:    return !matchArguments(ftok, getFunctionName(ftok));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -: 1121:}
        -: 1122:
function _ZNK7Library14matchArgumentsEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9937 returned 100% blocks executed 98%
     9937: 1123:bool Library::matchArguments(const Token *ftok, const std::string &functionName) const
        -: 1124:{
     9937: 1125:    const int callargs = numberOfArguments(ftok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    19874: 1126:    const std::map<std::string, Function>::const_iterator it = functions.find(functionName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
     9937: 1127:    if (it == functions.cend())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 90% (fallthrough)
branch  4 taken 10%
     8973: 1128:        return (callargs == 0);
      964: 1129:    int args = 0;
      964: 1130:    int firstOptionalArg = -1;
     2059: 1131:    for (std::map<int, ArgumentChecks>::const_iterator it2 = it->second.argumentChecks.cbegin(); it2 != it->second.argumentChecks.cend(); ++it2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 60% (fallthrough)
branch  7 taken 40%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 86%
branch 11 taken 14%
     1234: 1132:        if (it2->first > args)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1234: 1133:            args = it2->first;
call    0 returned 100%
     1234: 1134:        if (it2->second.optional && (firstOptionalArg == -1 || firstOptionalArg > it2->first))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        6: 1135:            firstOptionalArg = it2->first;
call    0 returned 100%
        -: 1136:
     1234: 1137:        if (it2->second.formatstr || it2->second.variadic)
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 11% (fallthrough)
branch  7 taken 89%
      139: 1138:            return args <= callargs;
        -: 1139:    }
      825: 1140:    return (firstOptionalArg < 0) ? args == callargs : (callargs >= firstOptionalArg-1 && callargs <= args);
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -: 1141:}
        -: 1142:
function _ZNK7Library11getWarnInfoEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1143:const Library::WarnInfo* Library::getWarnInfo(const Token* ftok) const
        -: 1144:{
    #####: 1145:    if (isNotLibraryFunction(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1146:        return nullptr;
    #####: 1147:    std::map<std::string, WarnInfo>::const_iterator i = functionwarn.find(getFunctionName(ftok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1148:    if (i == functionwarn.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1149:        return nullptr;
    #####: 1150:    return &i->second;
call    0 never executed
        -: 1151:}
        -: 1152:
function _ZNK7Library18formatstr_functionEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1153:bool Library::formatstr_function(const Token* ftok) const
        -: 1154:{
    #####: 1155:    if (isNotLibraryFunction(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1156:        return false;
        -: 1157:
    #####: 1158:    const std::map<std::string, Function>::const_iterator it = functions.find(getFunctionName(ftok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1159:    if (it != functions.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1160:        return it->second.formatstr;
call    0 never executed
    #####: 1161:    return false;
        -: 1162:}
        -: 1163:
function _ZNK7Library15formatstr_argnoEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1164:int Library::formatstr_argno(const Token* ftok) const
        -: 1165:{
    #####: 1166:    const std::map<int, Library::ArgumentChecks>& argumentChecksFunc = functions.at(getFunctionName(ftok)).argumentChecks;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1167:    for (std::map<int, Library::ArgumentChecks>::const_iterator i = argumentChecksFunc.cbegin(); i != argumentChecksFunc.cend(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1168:        if (i->second.formatstr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1169:            return i->first - 1;
call    0 never executed
        -: 1170:        }
        -: 1171:    }
    #####: 1172:    return -1;
        -: 1173:}
        -: 1174:
function _ZNK7Library14formatstr_scanEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1175:bool Library::formatstr_scan(const Token* ftok) const
        -: 1176:{
    #####: 1177:    return functions.at(getFunctionName(ftok)).formatstr_scan;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1178:}
        -: 1179:
function _ZNK7Library16formatstr_secureEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1180:bool Library::formatstr_secure(const Token* ftok) const
        -: 1181:{
    #####: 1182:    return functions.at(getFunctionName(ftok)).formatstr_secure;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1183:}
        -: 1184:
function _ZNK7Library11isUseRetValEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1185:bool Library::isUseRetVal(const Token* ftok) const
        -: 1186:{
    #####: 1187:    if (isNotLibraryFunction(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1188:        return false;
    #####: 1189:    const std::map<std::string, Function>::const_iterator it = functions.find(getFunctionName(ftok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1190:    if (it != functions.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1191:        return it->second.useretval;
call    0 never executed
    #####: 1192:    return false;
        -: 1193:}
        -: 1194:
function _ZNK7Library11returnValueB5cxx11EPK5Token called 1490 returned 100% blocks executed 85%
     1490: 1195:const std::string& Library::returnValue(const Token *ftok) const
        -: 1196:{
     1490: 1197:    if (isNotLibraryFunction(ftok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
     1101: 1198:        return emptyString;
      778: 1199:    const std::map<std::string, std::string>::const_iterator it = mReturnValue.find(getFunctionName(ftok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      389: 1200:    return it != mReturnValue.end() ? it->second : emptyString;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
call    4 returned 100%
call    5 returned 100%
        -: 1201:}
        -: 1202:
function _ZNK7Library15returnValueTypeB5cxx11EPK5Token called 3895 returned 100% blocks executed 85%
     3895: 1203:const std::string& Library::returnValueType(const Token *ftok) const
        -: 1204:{
     3895: 1205:    if (isNotLibraryFunction(ftok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 65% (fallthrough)
branch  4 taken 35%
     2522: 1206:        return emptyString;
     2746: 1207:    const std::map<std::string, std::string>::const_iterator it = mReturnValueType.find(getFunctionName(ftok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
     1373: 1208:    return it != mReturnValueType.end() ? it->second : emptyString;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
call    4 returned 100%
call    5 returned 100%
        -: 1209:}
        -: 1210:
function _ZNK7Library20returnValueContainerEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1211:int Library::returnValueContainer(const Token *ftok) const
        -: 1212:{
    #####: 1213:    if (isNotLibraryFunction(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1214:        return -1;
    #####: 1215:    const std::map<std::string, int>::const_iterator it = mReturnValueContainer.find(getFunctionName(ftok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1216:    return it != mReturnValueContainer.end() ? it->second : -1;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1217:}
        -: 1218:
function _ZNK7Library19unknownReturnValuesEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1219:std::vector<MathLib::bigint> Library::unknownReturnValues(const Token *ftok) const
        -: 1220:{
    #####: 1221:    if (isNotLibraryFunction(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1222:        return std::vector<MathLib::bigint>();
call    0 never executed
    #####: 1223:    const std::map<std::string, std::vector<MathLib::bigint>>::const_iterator it = mUnknownReturnValues.find(getFunctionName(ftok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1224:    return (it == mUnknownReturnValues.end()) ? std::vector<MathLib::bigint>() : it->second;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1225:}
        -: 1226:
function _ZNK7Library10hasminsizeEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1227:bool Library::hasminsize(const Token *ftok) const
        -: 1228:{
    #####: 1229:    if (isNotLibraryFunction(ftok))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1230:        return false;
    #####: 1231:    const std::map<std::string, Function>::const_iterator it1 = functions.find(getFunctionName(ftok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1232:    if (it1 == functions.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1233:        return false;
    #####: 1234:    for (std::map<int, ArgumentChecks>::const_iterator it2 = it1->second.argumentChecks.cbegin(); it2 != it1->second.argumentChecks.cend(); ++it2) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1235:        if (!it2->second.minsizes.empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1236:            return true;
        -: 1237:    }
    #####: 1238:    return false;
        -: 1239:}
        -: 1240:
function _ZNK7Library14ignorefunctionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1241:bool Library::ignorefunction(const std::string& functionName) const
        -: 1242:{
    #####: 1243:    const std::map<std::string, Function>::const_iterator it = functions.find(functionName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1244:    if (it != functions.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1245:        return it->second.ignore;
call    0 never executed
    #####: 1246:    return false;
        -: 1247:}
function _ZNK7Library5isUseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1248:bool Library::isUse(const std::string& functionName) const
        -: 1249:{
    #####: 1250:    const std::map<std::string, Function>::const_iterator it = functions.find(functionName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1251:    if (it != functions.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1252:        return it->second.use;
call    0 never executed
    #####: 1253:    return false;
        -: 1254:}
function _ZNK7Library12isLeakIgnoreERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1255:bool Library::isLeakIgnore(const std::string& functionName) const
        -: 1256:{
    #####: 1257:    const  std::map<std::string, Function>::const_iterator it = functions.find(functionName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1258:    if (it != functions.cend())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1259:        return it->second.leakignore;
call    0 never executed
    #####: 1260:    return false;
        -: 1261:}
function _ZNK7Library15isFunctionConstERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 3070 returned 100% blocks executed 100%
     3070: 1262:bool Library::isFunctionConst(const std::string& functionName, bool pure) const
        -: 1263:{
     6140: 1264:    const std::map<std::string, Function>::const_iterator it = functions.find(functionName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
     3070: 1265:    if (it != functions.cend())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
      296: 1266:        return pure ? it->second.ispure : it->second.isconst;
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
call    2 returned 100%
call    3 returned 100%
     2774: 1267:    return false;
        -: 1268:}
function _ZNK7Library15isFunctionConstEPK5Token called 4 returned 100% blocks executed 71%
        4: 1269:bool Library::isFunctionConst(const Token *ftok) const
        -: 1270:{
        4: 1271:    if (ftok->function() && ftok->function()->isAttributeConst())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1272:        return true;
        4: 1273:    if (isNotLibraryFunction(ftok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        1: 1274:        return false;
        6: 1275:    const std::map<std::string, Function>::const_iterator it = functions.find(getFunctionName(ftok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
        3: 1276:    return (it != functions.end() && it->second.isconst);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
        -: 1277:}
function _ZNK7Library10isnoreturnEPK5Token called 1253 returned 100% blocks executed 84%
     1253: 1278:bool Library::isnoreturn(const Token *ftok) const
        -: 1279:{
     1253: 1280:    if (ftok->function() && ftok->function()->isAttributeNoreturn())
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1281:        return true;
     1253: 1282:    if (isNotLibraryFunction(ftok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 72% (fallthrough)
branch  4 taken 28%
      901: 1283:        return false;
      704: 1284:    const std::map<std::string, bool>::const_iterator it = mNoReturn.find(getFunctionName(ftok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
      352: 1285:    return (it != mNoReturn.end() && it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
call    4 returned 100%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
        -: 1286:}
        -: 1287:
function _ZNK7Library13isnotnoreturnEPK5Token called 95 returned 100% blocks executed 84%
       95: 1288:bool Library::isnotnoreturn(const Token *ftok) const
        -: 1289:{
       95: 1290:    if (ftok->function() && ftok->function()->isAttributeNoreturn())
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1291:        return false;
       95: 1292:    if (isNotLibraryFunction(ftok))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 44% (fallthrough)
branch  4 taken 56%
       42: 1293:        return false;
      106: 1294:    const std::map<std::string, bool>::const_iterator it = mNoReturn.find(getFunctionName(ftok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
       53: 1295:    return (it != mNoReturn.end() && !it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
        -: 1296:}
        -: 1297:
function _ZNK7Library10markupFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 934 returned 100% blocks executed 67%
      934: 1298:bool Library::markupFile(const std::string &path) const
        -: 1299:{
      934: 1300:    return mMarkupExtensions.find(Path::getFilenameExtensionInLowerCase(path)) != mMarkupExtensions.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        -: 1301:}
        -: 1302:
function _ZNK7Library22processMarkupAfterCodeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1303:bool Library::processMarkupAfterCode(const std::string &path) const
        -: 1304:{
    #####: 1305:    const std::map<std::string, bool>::const_iterator it = mProcessAfterCode.find(Path::getFilenameExtensionInLowerCase(path));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1306:    return (it == mProcessAfterCode.end() || it->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1307:}
        -: 1308:
function _ZNK7Library12reportErrorsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1309:bool Library::reportErrors(const std::string &path) const
        -: 1310:{
    #####: 1311:    const std::map<std::string, bool>::const_iterator it = mReportErrors.find(Path::getFilenameExtensionInLowerCase(path));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1312:    return (it == mReportErrors.end() || it->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1313:}
        -: 1314:
function _ZNK7Library17isexecutableblockERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####: 1315:bool Library::isexecutableblock(const std::string &file, const std::string &token) const
        -: 1316:{
    #####: 1317:    const std::map<std::string, CodeBlock>::const_iterator it = mExecutableBlocks.find(Path::getFilenameExtensionInLowerCase(file));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1318:    return (it != mExecutableBlocks.end() && it->second.isBlock(token));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
        -: 1319:}
        -: 1320:
function _ZNK7Library16blockstartoffsetERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1321:int Library::blockstartoffset(const std::string &file) const
        -: 1322:{
    #####: 1323:    int offset = -1;
        -: 1324:    const std::map<std::string, CodeBlock>::const_iterator map_it
    #####: 1325:        = mExecutableBlocks.find(Path::getFilenameExtensionInLowerCase(file));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1326:
    #####: 1327:    if (map_it != mExecutableBlocks.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1328:        offset = map_it->second.offset();
call    0 never executed
call    1 never executed
        -: 1329:    }
    #####: 1330:    return offset;
call    0 never executed
        -: 1331:}
        -: 1332:
function _ZNK7Library10blockstartERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1333:const std::string& Library::blockstart(const std::string &file) const
        -: 1334:{
        -: 1335:    const std::map<std::string, CodeBlock>::const_iterator map_it
    #####: 1336:        = mExecutableBlocks.find(Path::getFilenameExtensionInLowerCase(file));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 1337:
    #####: 1338:    if (map_it != mExecutableBlocks.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1339:        return map_it->second.start();
call    0 never executed
call    1 never executed
        -: 1340:    }
    #####: 1341:    return emptyString;
        -: 1342:}
        -: 1343:
function _ZNK7Library8blockendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1344:const std::string& Library::blockend(const std::string &file) const
        -: 1345:{
        -: 1346:    const std::map<std::string, CodeBlock>::const_iterator map_it
    #####: 1347:        = mExecutableBlocks.find(Path::getFilenameExtensionInLowerCase(file));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 1348:
    #####: 1349:    if (map_it != mExecutableBlocks.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1350:        return map_it->second.end();
call    0 never executed
call    1 never executed
        -: 1351:    }
    #####: 1352:    return emptyString;
        -: 1353:}
        -: 1354:
function _ZNK7Library9iskeywordERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####: 1355:bool Library::iskeyword(const std::string &file, const std::string &keyword) const
        -: 1356:{
        -: 1357:    const std::map<std::string, std::set<std::string> >::const_iterator it =
    #####: 1358:        mKeywords.find(Path::getFilenameExtensionInLowerCase(file));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1359:    return (it != mKeywords.end() && it->second.count(keyword));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
        -: 1360:}
        -: 1361:
function _ZNK7Library10isimporterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####: 1362:bool Library::isimporter(const std::string& file, const std::string &importer) const
        -: 1363:{
        -: 1364:    const std::map<std::string, std::set<std::string> >::const_iterator it =
    #####: 1365:        mImporters.find(Path::getFilenameExtensionInLowerCase(file));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 1366:    return (it != mImporters.end() && it->second.count(importer) > 0);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
        -: 1367:}
        -: 1368:
function _ZNK7Library14isSmartPointerEPK5Token called 17198 returned 100% blocks executed 76%
    17198: 1369:bool Library::isSmartPointer(const Token *tok) const
        -: 1370:{
    34396: 1371:    std::string typestr;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    68932: 1372:    while (Token::Match(tok, "%name%|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 60% (fallthrough)
branch  4 taken 40%
    25867: 1373:        typestr += tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
    25867: 1374:        tok = tok->next();
call    0 returned 100%
        -: 1375:    }
    34396: 1376:    return smartPointers.find(typestr) != smartPointers.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
        -: 1377:}
        -: 1378:
function _Z19getLibraryContainerPK5Token called 21146 returned 100% blocks executed 79%
    21146: 1379:CPPCHECKLIB const Library::Container * getLibraryContainer(const Token * tok)
        -: 1380:{
    21146: 1381:    if (!tok)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       83: 1382:        return nullptr;
        -: 1383:    // TODO: Support dereferencing iterators
        -: 1384:    // TODO: Support dereferencing with ->
    21063: 1385:    if (tok->isUnaryOp("*") && astIsPointer(tok->astOperand1())) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 83% (fallthrough)
branch 14 taken 17%
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
call   20 returned 100%
branch 21 taken 1% (fallthrough)
branch 22 taken 99%
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
       64: 1386:        for (const ValueFlow::Value& v:tok->astOperand1()->values()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 5% (fallthrough)
branch  6 taken 95%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 97%
branch 11 taken 3%
call   12 returned 100%
branch 13 taken 97%
branch 14 taken 3%
call   15 never executed
call   16 never executed
        3: 1387:            if (!v.isLocalLifetimeValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1388:                continue;
        3: 1389:            if (v.lifetimeKind != ValueFlow::Value::LifetimeKind::Address)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1390:                continue;
        2: 1391:            return getLibraryContainer(v.tokvalue);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1392:        }
        -: 1393:    }
    21061: 1394:    if (!tok->valueType())
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
    14138: 1395:        return nullptr;
     6923: 1396:    return tok->valueType()->container;
call    0 returned 100%
function _GLOBAL__sub_I__ZN7LibraryC2Ev called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 1397:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -: 1398:
