        -:    0:Source:/home/workspace/lib/checkuninitvar.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkuninitvar.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkuninitvar.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkuninitvarH
        -:   22:#define checkuninitvarH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:#include "ctu.h"
        -:   28:
        -:   29:#include <set>
        -:   30:#include <string>
        -:   31:
        -:   32:class ErrorLogger;
        -:   33:class Scope;
        -:   34:class Settings;
        -:   35:class Token;
        -:   36:class Tokenizer;
        -:   37:class Variable;
        -:   38:
        -:   39:
        -:   40:struct VariableValue {
function _ZN13VariableValueC2Ex called 0 returned 0% blocks executed 0%
    #####:   41:    explicit VariableValue(MathLib::bigint val = 0) : value(val), notEqual(false) {}
        -:   42:    MathLib::bigint value;
        -:   43:    bool notEqual;
        -:   44:};
        -:   45:
        -:   46:/// @addtogroup Checks
        -:   47:/// @{
        -:   48:
        -:   49:
        -:   50:/** @brief Checking for uninitialized variables */
        -:   51:
function _ZN14CheckUninitVarD0Ev called 0 returned 0% blocks executed 0%
function _ZN14CheckUninitVarD2Ev called 0 returned 0% blocks executed 0%
    #####:   52:class CPPCHECKLIB CheckUninitVar : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   53:public:
        -:   54:    /** @brief This constructor is used when registering the CheckUninitVar */
function _ZN14CheckUninitVarC2Ev called 1 returned 100% blocks executed 71%
        1:   55:    CheckUninitVar() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   56:    }
        -:   57:
        -:   58:    /** @brief This constructor is used when running checks. */
function _ZN14CheckUninitVarC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   59:    CheckUninitVar(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   60:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   61:    }
        -:   62:
        -:   63:    /** @brief Run checks against the normal token list */
function _ZN14CheckUninitVar9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   64:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   65:        CheckUninitVar checkUninitVar(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   66:        checkUninitVar.check();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:        checkUninitVar.valueFlowUninit();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:    }
        -:   69:
        -:   70:    /** Check for uninitialized variables */
        -:   71:    void check();
        -:   72:    void checkScope(const Scope* scope, const std::set<std::string> &arrayTypeDefs);
        -:   73:    void checkStruct(const Token *tok, const Variable &structvar);
        -:   74:    enum Alloc { NO_ALLOC, NO_CTOR_CALL, CTOR_CALL, ARRAY };
        -:   75:    bool checkScopeForVariable(const Token *tok, const Variable& var, bool* const possibleInit, bool* const noreturn, Alloc* const alloc, const std::string &membervar, std::map<int, VariableValue> variableValue);
        -:   76:    bool checkIfForWhileHead(const Token *startparentheses, const Variable& var, bool suppressErrors, bool isuninit, Alloc alloc, const std::string &membervar);
        -:   77:    bool checkLoopBody(const Token *tok, const Variable& var, const Alloc alloc, const std::string &membervar, const bool suppressErrors);
        -:   78:    void checkRhs(const Token *tok, const Variable &var, Alloc alloc, nonneg int number_of_if, const std::string &membervar);
        -:   79:    bool isVariableUsage(const Token *vartok, bool pointer, Alloc alloc) const;
        -:   80:    int isFunctionParUsage(const Token *vartok, bool pointer, Alloc alloc) const;
        -:   81:    bool isMemberVariableAssignment(const Token *tok, const std::string &membervar) const;
        -:   82:    bool isMemberVariableUsage(const Token *tok, bool isPointer, Alloc alloc, const std::string &membervar) const;
        -:   83:
        -:   84:    /** ValueFlow-based checking for uninitialized variables */
        -:   85:    void valueFlowUninit();
        -:   86:
        -:   87:    /* data for multifile checking */
function _ZN14CheckUninitVar10MyFileInfoD0Ev called 0 returned 0% blocks executed 0%
function _ZN14CheckUninitVar10MyFileInfoD2Ev called 0 returned 0% blocks executed 0%
function _ZN14CheckUninitVar10MyFileInfoC2Ev called 0 returned 0% blocks executed 0%
    #####:   88:    class MyFileInfo : public Check::FileInfo {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:   89:    public:
        -:   90:        /** function arguments that data are unconditionally read */
        -:   91:        std::list<CTU::FileInfo::UnsafeUsage> unsafeUsage;
        -:   92:
        -:   93:        /** Convert MyFileInfo data into xml string */
        -:   94:        std::string toString() const OVERRIDE;
        -:   95:    };
        -:   96:
        -:   97:    /** @brief Parse current TU and extract file info */
        -:   98:    Check::FileInfo *getFileInfo(const Tokenizer *tokenizer, const Settings *settings) const OVERRIDE;
        -:   99:
        -:  100:    Check::FileInfo * loadFileInfoFromXml(const tinyxml2::XMLElement *xmlElement) const OVERRIDE;
        -:  101:
        -:  102:    /** @brief Analyse all file infos for all TU */
        -:  103:    bool analyseWholeProgram(const CTU::FileInfo *ctu, const std::list<Check::FileInfo*> &fileInfo, const Settings& settings, ErrorLogger &errorLogger) OVERRIDE;
        -:  104:
        -:  105:    void uninitstringError(const Token *tok, const std::string &varname, bool strncpy_);
        -:  106:    void uninitdataError(const Token *tok, const std::string &varname);
        -:  107:    void uninitvarError(const Token *tok, const std::string &varname, ErrorPath errorPath);
function _ZN14CheckUninitVar14uninitvarErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  108:    void uninitvarError(const Token *tok, const std::string &varname) {
    #####:  109:        ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  110:        uninitvarError(tok, varname, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  111:    }
function _ZN14CheckUninitVar14uninitvarErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5AllocE called 0 returned 0% blocks executed 0%
    #####:  112:    void uninitvarError(const Token *tok, const std::string &varname, Alloc alloc) {
    #####:  113:        if (alloc == NO_CTOR_CALL || alloc == CTOR_CALL)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  114:            uninitdataError(tok, varname);
call    0 never executed
        -:  115:        else
    #####:  116:            uninitvarError(tok, varname);
call    0 never executed
    #####:  117:    }
        -:  118:    void uninitStructMemberError(const Token *tok, const std::string &membername);
        -:  119:
        -:  120:private:
        -:  121:    Check::FileInfo *getFileInfo() const;
        -:  122:    bool isUnsafeFunction(const Scope *scope, int argnr, const Token **tok) const;
        -:  123:
function _ZNK14CheckUninitVar16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  124:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:  125:        CheckUninitVar c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  126:
        -:  127:        // error
    #####:  128:        c.uninitstringError(nullptr, "varname", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  129:        c.uninitdataError(nullptr, "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  130:        c.uninitvarError(nullptr, "varname");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  131:        c.uninitStructMemberError(nullptr, "a.b");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  132:    }
        -:  133:
function _ZN14CheckUninitVar6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  134:    static std::string myName() {
    #####:  135:        return "Uninitialized variables";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  136:    }
        -:  137:
function _ZNK14CheckUninitVar9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  138:    std::string classInfo() const OVERRIDE {
        -:  139:        return "Uninitialized variables\n"
        -:  140:               "- using uninitialized local variables\n"
    #####:  141:               "- using allocated data before it has been initialized\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  142:    }
        -:  143:};
        -:  144:/// @}
        -:  145://---------------------------------------------------------------------------
        -:  146:#endif // checkuninitvarH
