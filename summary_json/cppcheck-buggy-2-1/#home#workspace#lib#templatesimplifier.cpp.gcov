        -:    0:Source:/home/workspace/lib/templatesimplifier.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/templatesimplifier.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/templatesimplifier.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "templatesimplifier.h"
        -:   20:
        -:   21:#include "errorlogger.h"
        -:   22:#include "mathlib.h"
        -:   23:#include "settings.h"
        -:   24:#include "token.h"
        -:   25:#include "tokenize.h"
        -:   26:#include "tokenlist.h"
        -:   27:
        -:   28:#include <algorithm>
        -:   29:#include <cassert>
        -:   30:#include <iostream>
        -:   31:#include <map>
        -:   32:#include <stack>
        -:   33:#include <utility>
        -:   34:
        -:   35:namespace {
        -:   36:    class FindToken {
        -:   37:    public:
function _ZN12_GLOBAL__N_19FindTokenC2EPK5Token called 0 returned 0% blocks executed 0%
    #####:   38:        explicit FindToken(const Token *token) : mToken(token) {}
function _ZNK12_GLOBAL__N_19FindTokenclERKN18TemplateSimplifier12TokenAndNameE called 0 returned 0% blocks executed 0%
    #####:   39:        bool operator()(const TemplateSimplifier::TokenAndName &tokenAndName) const {
    #####:   40:            return tokenAndName.token() == mToken;
call    0 never executed
        -:   41:        }
        -:   42:    private:
        -:   43:        const Token * const mToken;
        -:   44:    };
        -:   45:
function _ZN12_GLOBAL__N_18FindNameC2ERKS0_ called 0 returned 0% blocks executed 0%
function _ZN12_GLOBAL__N_18FindNameC2EOS0_ called 0 returned 0% blocks executed 0%
function _ZN12_GLOBAL__N_18FindNameD2Ev called 0 returned 0% blocks executed 0%
    #####:   46:    class FindName {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   47:    public:
function _ZN12_GLOBAL__N_18FindNameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   48:        explicit FindName(const std::string &name) : mName(name) {}
call    0 never executed
function _ZNK12_GLOBAL__N_18FindNameclERKN18TemplateSimplifier12TokenAndNameE called 0 returned 0% blocks executed 0%
    #####:   49:        bool operator()(const TemplateSimplifier::TokenAndName &tokenAndName) const {
    #####:   50:            return tokenAndName.name() == mName;
call    0 never executed
call    1 never executed
        -:   51:        }
        -:   52:    private:
        -:   53:        const std::string mName;
        -:   54:    };
        -:   55:
function _ZN12_GLOBAL__N_112FindFullNameC2ERKS0_ called 12 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_112FindFullNameC2EOS0_ called 12 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_112FindFullNameD2Ev called 30 returned 100% blocks executed 100%
       54:   56:    class FindFullName {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   57:    public:
function _ZN12_GLOBAL__N_112FindFullNameC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
        6:   58:        explicit FindFullName(const std::string &fullName) : mFullName(fullName) {}
call    0 returned 100%
function _ZNK12_GLOBAL__N_112FindFullNameclERKN18TemplateSimplifier12TokenAndNameE called 5 returned 100% blocks executed 100%
        5:   59:        bool operator()(const TemplateSimplifier::TokenAndName &tokenAndName) const {
        5:   60:            return tokenAndName.fullName() == mFullName;
call    0 returned 100%
call    1 returned 100%
        -:   61:        }
        -:   62:    private:
        -:   63:        const std::string mFullName;
        -:   64:    };
        -:   65:}
        -:   66:
function _ZN18TemplateSimplifier12TokenAndNameC2EP5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 54%
       11:   67:TemplateSimplifier::TokenAndName::TokenAndName(Token *token, const std::string &scope) :
       22:   68:    mToken(token), mScope(scope), mName(mToken ? mToken->str() : ""),
call    0 returned 100%
       23:   69:    mFullName(mScope.empty() ? mName : (mScope + " :: " + mName)),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 9% (fallthrough)
branch  5 taken 91%
call    6 returned 100%
branch  7 never executed
branch  8 never executed
call    9 never executed
       56:   70:    mNameToken(nullptr), mParamEnd(nullptr), mFlags(0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
branch 13 taken 91% (fallthrough)
branch 14 taken 9%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
        -:   71:{
       11:   72:    if (mToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       11:   73:        mToken->templateSimplifierPointer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       11:   74:}
        -:   75:
function _ZN18TemplateSimplifier12TokenAndNameC2EP5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKS1_SC_ called 13 returned 100% blocks executed 47%
       13:   76:TemplateSimplifier::TokenAndName::TokenAndName(Token *token, const std::string &scope, const Token *nameToken, const Token *paramEnd) :
       13:   77:    mToken(token), mScope(scope), mName(nameToken->str()),
call    0 returned 100%
       29:   78:    mFullName(mScope.empty() ? mName : (mScope + " :: " + mName)),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 23% (fallthrough)
branch  5 taken 77%
call    6 returned 100%
branch  7 never executed
branch  8 never executed
call    9 never executed
       55:   79:    mNameToken(nameToken), mParamEnd(paramEnd), mFlags(0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 77% (fallthrough)
branch  5 taken 23%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 never executed
call   13 never executed
call   14 never executed
        -:   80:{
        -:   81:    // only set flags for declaration
       13:   82:    if (mToken && mNameToken && mParamEnd) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       13:   83:        isSpecialization(Token::simpleMatch(mToken, "template < >"));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   84:
       13:   85:        if (!isSpecialization()) {
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
       11:   86:            if (Token::simpleMatch(mToken->next()->findClosingBracket(), "> template <")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:   87:                const Token * temp = mNameToken->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   88:                while (Token::Match(temp, ">|%name% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   89:                    if (temp->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   90:                        temp = temp->findOpeningBracket()->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   91:                    else
    #####:   92:                        temp = temp->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   93:                }
    #####:   94:                isPartialSpecialization(temp->strAt(1) == "<");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:   95:            } else
       11:   96:                isPartialSpecialization(mNameToken->strAt(1) == "<");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -:   97:        }
        -:   98:
       13:   99:        isAlias(mParamEnd->strAt(1) == "using");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -:  100:
       13:  101:        if (isAlias() && isPartialSpecialization()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  102:            throw InternalError(mToken, "partial specialization of alias templates is not permitted", InternalError::SYNTAX);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  103:        }
       13:  104:        if (isAlias() && isSpecialization()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  105:            throw InternalError(mToken, "explicit specialization of alias templates is not permitted", InternalError::SYNTAX);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  106:        }
        -:  107:
       13:  108:        isFriend(mParamEnd->strAt(1) == "friend");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
       13:  109:        const Token *next = mParamEnd->next();
call    0 returned 100%
       13:  110:        if (isFriend())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  111:            next = next->next();
call    0 never executed
        -:  112:
       13:  113:        isClass(Token::Match(next, "class|struct|union %name% <|{|:|;|::"));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       13:  114:        if (mToken->strAt(1) == "<" && !isSpecialization()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 85% (fallthrough)
branch  8 taken 15%
branch  9 taken 85% (fallthrough)
branch 10 taken 15%
       11:  115:            const Token *end = mToken->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       11:  116:            isVariadic(end && Token::findmatch(mToken->tokAt(2), "typename|class ...", end));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
        -:  117:        }
       13:  118:        const Token *tok1 = mNameToken->next();
call    0 returned 100%
       13:  119:        if (tok1->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        1:  120:            const Token *closing = tok1->findClosingBracket();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  121:            if (closing)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  122:                tok1 = closing->next();
call    0 returned 100%
        -:  123:            else
    #####:  124:                throw InternalError(mToken, "unsupported syntax", InternalError::SYNTAX);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  125:        }
       13:  126:        isFunction(tok1->str() == "(");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       13:  127:        isVariable(!isClass() && !isAlias() && !isFriend() && Token::Match(tok1, "=|;"));
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
       13:  128:        if (!isFriend()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       13:  129:            if (isVariable())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  130:                isForwardDeclaration(tok1->str() == ";");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       13:  131:            else if (!isAlias()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       13:  132:                if (isFunction())
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
       12:  133:                    tok1 = tok1->link()->next();
call    0 returned 100%
call    1 returned 100%
       15:  134:                while (tok1 && !Token::Match(tok1, ";|{")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 7% (fallthrough)
branch  6 taken 93%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
        1:  135:                    if (tok1->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  136:                        tok1 = tok1->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
        1:  137:                    else if (Token::Match(tok1, "(|[") && tok1->link())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  138:                        tok1 = tok1->link();
call    0 never executed
        1:  139:                    if (tok1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  140:                        tok1 = tok1->next();
call    0 returned 100%
        -:  141:                }
       13:  142:                if (tok1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:  143:                    isForwardDeclaration(tok1->str() == ";");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  144:            }
        -:  145:        }
        -:  146:        // check for member class or function and adjust scope
       13:  147:        if ((isFunction() || isClass()) && mNameToken->strAt(-1) == "::") {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:  148:            const Token * start = mNameToken;
        -:  149:
    #####:  150:            while (Token::Match(start->tokAt(-2), "%name% ::") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  151:                   (Token::simpleMatch(start->tokAt(-2), "> ::") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  152:                    start->tokAt(-2)->findOpeningBracket() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  153:                    Token::Match(start->tokAt(-2)->findOpeningBracket()->previous(), "%name% <"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  154:                if (start->strAt(-2) == ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  155:                    start = start->tokAt(-2)->findOpeningBracket()->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  156:                else
    #####:  157:                    start = start->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  158:            }
        -:  159:
    #####:  160:            if (start && start != nameToken) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  161:                if (!mScope.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  162:                    mScope += " ::";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  163:                while (start && start->next() != mNameToken) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  164:                    if (start->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  165:                        start = start->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  166:                    else {
    #####:  167:                        if (!mScope.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:                            mScope += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  169:                        mScope += start->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  170:                    }
    #####:  171:                    start = start->next();
call    0 never executed
        -:  172:                }
    #####:  173:                if (start)
branch  0 never executed
branch  1 never executed
    #####:  174:                    mFullName = mScope.empty() ? mName : (mScope + " :: " + mName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
        -:  175:            }
        -:  176:        }
        -:  177:    }
        -:  178:
        -:  179:    // make sure at most only one family flag is set
       13:  180:    assert(isClass() ? !(isFunction() || isVariable()) : true);
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
       13:  181:    assert(isFunction() ? !(isClass() || isVariable()) : true);
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
       13:  182:    assert(isVariable() ? !(isClass() || isFunction()) : true);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  183:
       13:  184:    if (mToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       13:  185:        mToken->templateSimplifierPointer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       13:  186:}
        -:  187:
function _ZN18TemplateSimplifier12TokenAndNameC2ERKS0_ called 18 returned 100% blocks executed 62%
       18:  188:TemplateSimplifier::TokenAndName::TokenAndName(const TokenAndName& other) :
       18:  189:    mToken(other.mToken), mScope(other.mScope), mName(other.mName), mFullName(other.mFullName),
       18:  190:    mNameToken(other.mNameToken), mParamEnd(other.mParamEnd), mFlags(other.mFlags)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 never executed
call    8 never executed
call    9 never executed
        -:  191:{
       18:  192:    if (mToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  193:        mToken->templateSimplifierPointer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18:  194:}
        -:  195:
function _ZN18TemplateSimplifier12TokenAndNameD2Ev called 42 returned 100% blocks executed 100%
       84:  196:TemplateSimplifier::TokenAndName::~TokenAndName()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  197:{
       42:  198:    if (mToken)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
       27:  199:        mToken->templateSimplifierPointers().erase(this);
call    0 returned 100%
call    1 returned 100%
       42:  200:}
        -:  201:
function _ZNK18TemplateSimplifier12TokenAndName15aliasStartTokenEv called 0 returned 0% blocks executed 0%
    #####:  202:const Token * TemplateSimplifier::TokenAndName::aliasStartToken() const
        -:  203:{
    #####:  204:    if (mParamEnd)
branch  0 never executed
branch  1 never executed
    #####:  205:        return mParamEnd->tokAt(4);
call    0 never executed
    #####:  206:    return nullptr;
        -:  207:}
        -:  208:
function _ZNK18TemplateSimplifier12TokenAndName13aliasEndTokenEv called 0 returned 0% blocks executed 0%
    #####:  209:const Token * TemplateSimplifier::TokenAndName::aliasEndToken() const
        -:  210:{
    #####:  211:    if (aliasStartToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  212:        return Token::findsimplematch(aliasStartToken(), ";");
call    0 never executed
call    1 never executed
    #####:  213:    return nullptr;
        -:  214:}
        -:  215:
function _ZNK18TemplateSimplifier12TokenAndName12isAliasTokenEPK5Token called 0 returned 0% blocks executed 0%
    #####:  216:bool TemplateSimplifier::TokenAndName::isAliasToken(const Token *tok) const
        -:  217:{
    #####:  218:    const Token *end = aliasEndToken();
call    0 never executed
        -:  219:
    #####:  220:    for (const Token *tok1 = aliasStartToken(); tok1 != end; tok1 = tok1->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  221:        if (tok1 == tok)
branch  0 never executed
branch  1 never executed
    #####:  222:            return true;
        -:  223:    }
    #####:  224:    return false;
        -:  225:}
        -:  226:
function _ZN18TemplateSimplifierC2EP9Tokenizer called 956 returned 100% blocks executed 100%
      956:  227:TemplateSimplifier::TemplateSimplifier(Tokenizer *tokenizer)
      956:  228:    : mTokenizer(tokenizer), mTokenList(tokenizer->list), mSettings(tokenizer->mSettings),
     1912:  229:      mErrorLogger(tokenizer->mErrorLogger), mChanged(false)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
        -:  230:{
      956:  231:}
        -:  232:
function _ZN18TemplateSimplifierD2Ev called 956 returned 100% blocks executed 100%
      956:  233:TemplateSimplifier::~TemplateSimplifier()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
        -:  234:{
      956:  235:}
        -:  236:
function _ZN18TemplateSimplifier16fixAngleBracketsEv called 934 returned 100% blocks executed 52%
      934:  237:void TemplateSimplifier::fixAngleBrackets()
        -:  238:{
    28547:  239:    for (Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
        -:  240:        // Ticket #6181: normalize C++11 template parameter list closing syntax
    27613:  241:        if (tok->str() == "<" && templateParameters(tok)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 52% (fallthrough)
branch  6 taken 48%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       86:  242:            Token *endTok = tok->findClosingBracket();
call    0 returned 100%
       86:  243:            if (endTok && endTok->str() == ">>") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  244:                endTok->str(">");
call    0 never executed
    #####:  245:                endTok->insertToken(">");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  246:            }
    27527:  247:        } else if (Token::Match(tok, "class|struct|union|=|:|public|protected|private %name% <")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        7:  248:            Token *endTok = tok->tokAt(2)->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
        7:  249:            if (Token::Match(endTok, ">> ;|{")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  250:                endTok->str(">");
call    0 never executed
    #####:  251:                endTok->insertToken(">");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  252:            }
        -:  253:        }
        -:  254:    }
      934:  255:}
        -:  256:
function _ZN18TemplateSimplifier20cleanupAfterSimplifyEv called 934 returned 100% blocks executed 52%
      934:  257:void TemplateSimplifier::cleanupAfterSimplify()
        -:  258:{
      934:  259:    bool goback = false;
    20849:  260:    for (Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
    19915:  261:        if (goback) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  262:            tok = tok->previous();
call    0 never executed
    #####:  263:            goback = false;
        -:  264:        }
    19915:  265:        if (tok->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
     2469:  266:            tok = tok->link();
call    0 returned 100%
        -:  267:
    17446:  268:        else if (Token::Match(tok, "template < > %name%")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1:  269:            const Token *end = tok;
       11:  270:            while (end) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  271:                if (end->str() == ";")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  272:                    break;
        6:  273:                if (end->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  274:                    end = end->link()->next();
call    0 never executed
call    1 never executed
    #####:  275:                    break;
        -:  276:                }
        6:  277:                if (!Token::Match(end, "%name%|::|<|>|,")) {
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        1:  278:                    end = nullptr;
        1:  279:                    break;
        -:  280:                }
        5:  281:                end = end->next();
call    0 returned 100%
        -:  282:            }
        1:  283:            if (end) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  284:                Token::eraseTokens(tok,end);
call    0 never executed
    #####:  285:                tok->deleteThis();
call    0 never executed
        -:  286:            }
        -:  287:        }
        -:  288:
    17491:  289:        else if (Token::Match(tok, "%type% <") &&
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 87% (fallthrough)
branch  4 taken 13%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       73:  290:                 (!tok->previous() || tok->previous()->str() == ";")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
        7:  291:            const Token *tok2 = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  292:            std::string type;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        7:  293:            while (Token::Match(tok2, "%type%|%num% ,")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  294:                type += tok2->str() + ",";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####:  295:                tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:            }
        7:  297:            if (Token::Match(tok2, "%type%|%num% > (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  298:                type += tok2->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  299:                tok->str(tok->str() + "<" + type + ">");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  300:                Token::eraseTokens(tok, tok2->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  301:                if (tok == mTokenList.front())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  302:                    goback = true;
        -:  303:            }
        -:  304:        }
        -:  305:    }
      934:  306:}
        -:  307:
        -:  308:
function _ZN18TemplateSimplifier39checkComplicatedSyntaxErrorsInTemplatesEv called 934 returned 100% blocks executed 47%
      934:  309:void TemplateSimplifier::checkComplicatedSyntaxErrorsInTemplates()
        -:  310:{
        -:  311:    // check for more complicated syntax errors when using templates..
     9710:  312:    for (const Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
call    3 returned 100%
        -:  313:        // skip executing scopes (ticket #3183)..
     8812:  314:        if (Token::simpleMatch(tok, "( {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  315:            tok = tok->link();
call    0 never executed
    #####:  316:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  317:                syntaxError(nullptr);
call    0 never executed
        -:  318:        }
        -:  319:        // skip executing scopes..
     8812:  320:        const Token *start = Tokenizer::startOfExecutableScope(tok);
call    0 returned 100%
     8812:  321:        if (start) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      982:  322:            tok = start->link();
call    0 returned 100%
        -:  323:        }
        -:  324:
        -:  325:        // skip executing scopes (ticket #1985)..
     7830:  326:        else if (Token::simpleMatch(tok, "try {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  327:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
    #####:  328:            while (Token::simpleMatch(tok, "} catch (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  329:                tok = tok->linkAt(2);
call    0 never executed
    #####:  330:                if (Token::simpleMatch(tok, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  331:                    tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -:  332:            }
        -:  333:        }
        -:  334:
     8812:  335:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  336:            syntaxError(nullptr);
call    0 never executed
        -:  337:        // not start of statement?
     8812:  338:        if (tok->previous() && !Token::Match(tok, "[;{}]"))
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
branch  4 taken 78% (fallthrough)
branch  5 taken 22%
branch  6 taken 69% (fallthrough)
branch  7 taken 31%
     6116:  339:            continue;
        -:  340:
        -:  341:        // skip starting tokens.. ;;; typedef typename foo::bar::..
      756:  342:        while (Token::Match(tok, ";|{"))
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
      756:  343:            tok = tok->next();
call    0 returned 100%
        5:  344:        while (Token::Match(tok, "typedef|typename"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        5:  345:            tok = tok->next();
call    0 returned 100%
     2730:  346:        while (Token::Match(tok, "%type% ::"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       17:  347:            tok = tok->tokAt(2);
call    0 returned 100%
     2696:  348:        if (!tok)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       36:  349:            break;
        -:  350:
        -:  351:        // template variable or type..
     2660:  352:        if (Token::Match(tok, "%type% <")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  353:            // these are used types..
       46:  354:            std::set<std::string> usedtypes;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  355:
        -:  356:            // parse this statement and see if the '<' and '>' are matching
       23:  357:            unsigned int level = 0;
      183:  358:            for (const Token *tok2 = tok; tok2 && !Token::simpleMatch(tok2, ";"); tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 94% (fallthrough)
branch  6 taken 6%
branch  7 taken 94% (fallthrough)
branch  8 taken 6%
call    9 returned 100%
      172:  359:                if (Token::simpleMatch(tok2, "{") && (!Token::Match(tok2->previous(), ">|%type%") || Token::simpleMatch(tok2->link(), "} ;")))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 8% (fallthrough)
branch 10 taken 92%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
branch 17 taken 7% (fallthrough)
branch 18 taken 93%
       12:  360:                    break;
      160:  361:                if (tok2->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
       14:  362:                    tok2 = tok2->link();
call    0 returned 100%
      146:  363:                else if (tok2->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
       25:  364:                    bool inclevel = false;
       25:  365:                    if (Token::simpleMatch(tok2->previous(), "operator <"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  366:                        ;
       25:  367:                    else if (level == 0 && Token::Match(tok2->previous(), "%type%")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        -:  368:                        // @todo add better expression detection
       25:  369:                        if (!Token::Match(tok2->next(), "*| %type%|%num% ;"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       25:  370:                            inclevel = true;
    #####:  371:                    } else if (tok2->next() && tok2->next()->isStandardType())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  372:                        inclevel = true;
    #####:  373:                    else if (Token::simpleMatch(tok2, "< typename"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  374:                        inclevel = true;
    #####:  375:                    else if (Token::Match(tok2->tokAt(-2), "<|, %type% <") && usedtypes.find(tok2->previous()->str()) != usedtypes.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
    #####:  376:                        inclevel = true;
    #####:  377:                    else if (Token::Match(tok2, "< %type%") && usedtypes.find(tok2->next()->str()) != usedtypes.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
    #####:  378:                        inclevel = true;
    #####:  379:                    else if (Token::Match(tok2, "< %type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  380:                        // is the next token a type and not a variable/constant?
        -:  381:                        // assume it's a type if there comes another "<"
    #####:  382:                        const Token *tok3 = tok2->next();
call    0 never executed
    #####:  383:                        while (Token::Match(tok3, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  384:                            tok3 = tok3->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  385:                        if (Token::Match(tok3, "%type% <"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  386:                            inclevel = true;
    #####:  387:                    } else if (tok2->strAt(-1) == ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  388:                        syntaxError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  389:
       25:  390:                    if (inclevel) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       25:  391:                        ++level;
       25:  392:                        if (Token::Match(tok2->tokAt(-2), "<|, %type% <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  393:                            usedtypes.insert(tok2->previous()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -:  394:                    }
      121:  395:                } else if (tok2->str() == ">") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 21% (fallthrough)
branch  3 taken 79%
       25:  396:                    if (level > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       25:  397:                        --level;
       96:  398:                } else if (tok2->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  399:                    if (level > 0)
branch  0 never executed
branch  1 never executed
    #####:  400:                        --level;
    #####:  401:                    if (level > 0)
branch  0 never executed
branch  1 never executed
    #####:  402:                        --level;
        -:  403:                }
        -:  404:            }
       23:  405:            if (level > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  406:                syntaxError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  407:        }
        -:  408:    }
      934:  409:}
        -:  410:
function _ZN18TemplateSimplifier18templateParametersEPK5Token called 5281 returned 100% blocks executed 48%
     5281:  411:unsigned int TemplateSimplifier::templateParameters(const Token *tok)
        -:  412:{
     5281:  413:    unsigned int numberOfParameters = 1;
        -:  414:
     5281:  415:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  416:        return 0;
     5281:  417:    if (tok->str() != "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
     4997:  418:        return 0;
      284:  419:    if (Token::Match(tok->previous(), "%var% <"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  420:        return 0;
      284:  421:    tok = tok->next();
call    0 returned 100%
      284:  422:    if (!tok || tok->str() == ">")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        2:  423:        return 0;
        -:  424:
      282:  425:    unsigned int level = 0;
        -:  426:
      584:  427:    while (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  428:        // skip template template
      433:  429:        if (level == 0 && Token::simpleMatch(tok, "template <")) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:  430:            const Token *closing = tok->next()->findClosingBracket();
call    0 never executed
call    1 never executed
    #####:  431:            if (closing) {
branch  0 never executed
branch  1 never executed
    #####:  432:                if (closing->str() == ">>")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  433:                    return numberOfParameters;
    #####:  434:                tok = closing->next();
call    0 never executed
    #####:  435:                if (tok->str() == ">" || tok->str() == ">>")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  436:                    return numberOfParameters;
    #####:  437:                else if (tok->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  438:                    ++numberOfParameters;
    #####:  439:                    tok = tok->next();
call    0 never executed
    #####:  440:                    continue;
        -:  441:                }
        -:  442:            } else
    #####:  443:                return 0;
        -:  444:        }
        -:  445:
        -:  446:        // skip const/volatile
      433:  447:        if (Token::Match(tok, "const|volatile"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  448:            tok = tok->next();
call    0 never executed
        -:  449:
        -:  450:        // skip struct/union
      433:  451:        if (Token::Match(tok, "struct|union"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  452:            tok = tok->next();
call    0 never executed
        -:  453:
        -:  454:        // Skip '&'
      433:  455:        if (Token::Match(tok, "& ::| %name%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  456:            tok = tok->next();
call    0 never executed
        -:  457:
        -:  458:        // Skip variadic types (Ticket #5774, #6059, #6172)
      433:  459:        if (Token::simpleMatch(tok, "...")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  460:            if ((tok->previous()->isName() && !Token::Match(tok->tokAt(-2), "<|,|::")) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  461:                (!tok->previous()->isName() && tok->strAt(-1) != ">"))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  462:                return 0; // syntax error
    #####:  463:            tok = tok->next();
call    0 never executed
    #####:  464:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  465:                return 0;
    #####:  466:            if (tok->str() == ">") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  467:                if (level == 0)
branch  0 never executed
branch  1 never executed
    #####:  468:                    return numberOfParameters;
    #####:  469:                --level;
    #####:  470:            } else if (tok->str() == ">>") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  471:                if (level == 1)
branch  0 never executed
branch  1 never executed
    #####:  472:                    return numberOfParameters;
    #####:  473:                level -= 2;
    #####:  474:            } else if (tok->str() == "," && level == 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  475:                ++numberOfParameters;
    #####:  476:                tok = tok->next();
call    0 never executed
    #####:  477:                continue;
        -:  478:            }
        -:  479:        }
        -:  480:
        -:  481:        // Skip '=', '?', ':'
      433:  482:        if (Token::Match(tok, "=|?|:"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2:  483:            tok = tok->next();
call    0 returned 100%
      433:  484:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  485:            return 0;
        -:  486:
        -:  487:        // Skip links
      433:  488:        if (Token::Match(tok, "(|{")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  489:            tok = tok->link();
call    0 never executed
    #####:  490:            if (tok)
branch  0 never executed
branch  1 never executed
    #####:  491:                tok = tok->next();
call    0 never executed
    #####:  492:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  493:                return 0;
    #####:  494:            if (tok->str() == ">" && level == 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  495:                return numberOfParameters;
    #####:  496:            else if (tok->str() == ">>" && level == 1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  497:                return numberOfParameters;
    #####:  498:            else if (tok->str() == "," && level == 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  499:                ++numberOfParameters;
    #####:  500:                tok = tok->next();
call    0 never executed
        -:  501:            }
    #####:  502:            continue;
        -:  503:        }
        -:  504:
        -:  505:        // skip std::
      433:  506:        if (tok && tok->str() == "::")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  507:            tok = tok->next();
call    0 never executed
      505:  508:        while (Token::Match(tok, "%name% ::")) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       36:  509:            tok = tok->tokAt(2);
call    0 returned 100%
       36:  510:            if (tok && tok->str() == "*") // Ticket #5759: Class member pointer as a template argument; skip '*'
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  511:                tok = tok->next();
call    0 never executed
        -:  512:        }
      433:  513:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  514:            return 0;
        -:  515:
        -:  516:        // num/type ..
      433:  517:        if (!tok->isNumber() && tok->tokType() != Token::eChar && !tok->isName() && !tok->isOp())
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 27% (fallthrough)
branch  8 taken 73%
call    9 returned 100%
branch 10 taken 95% (fallthrough)
branch 11 taken 5%
branch 12 taken 20% (fallthrough)
branch 13 taken 80%
       88:  518:            return 0;
      345:  519:        tok = tok->next();
call    0 returned 100%
      345:  520:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  521:            return 0;
        -:  522:
        -:  523:        // * / const
       19:  524:        while (Token::Match(tok, "*|&|&&|const"))
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       19:  525:            tok = tok->next();
call    0 returned 100%
        -:  526:
      345:  527:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  528:            return 0;
        -:  529:
        -:  530:        // Function pointer or prototype..
      355:  531:        while (Token::Match(tok, "(|[")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        5:  532:            if (!tok->link())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  533:                syntaxError(tok);
call    0 never executed
        -:  534:
        5:  535:            tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
        5:  536:            while (Token::Match(tok, "const|volatile")) // Ticket #5786: Skip function cv-qualifiers
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  537:                tok = tok->next();
call    0 never executed
        -:  538:        }
      345:  539:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  540:            return 0;
        -:  541:
        -:  542:        // inner template
      345:  543:        if (tok->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        5:  544:            ++level;
        5:  545:            tok = tok->next();
call    0 returned 100%
        -:  546:        }
        -:  547:
      345:  548:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  549:            return 0;
        -:  550:
        -:  551:        // ,/>
      355:  552:        while (Token::Match(tok, ">|>>")) {
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
      199:  553:            if (level == 0)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      194:  554:                return tok->str() == ">" && !Token::Match(tok->next(), "%num%") ? numberOfParameters : 0;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        5:  555:            --level;
        5:  556:            if (tok->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  557:                if (level == 0)
branch  0 never executed
branch  1 never executed
    #####:  558:                    return !Token::Match(tok->next(), "%num%") ? numberOfParameters : 0;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  559:                --level;
        -:  560:            }
        5:  561:            tok = tok->next();
call    0 returned 100%
        -:  562:
        5:  563:            if (Token::simpleMatch(tok,"("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  564:                tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:  565:
        5:  566:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  567:                return 0;
        -:  568:        }
        -:  569:
      151:  570:        if (tok->str() != ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
      125:  571:            continue;
       26:  572:        if (level == 0)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       24:  573:            ++numberOfParameters;
       26:  574:        tok = tok->next();
call    0 returned 100%
        -:  575:    }
    #####:  576:    return 0;
        -:  577:}
        -:  578:
function _ZN18TemplateSimplifier26findTemplateDeclarationEndEPK5Token called 0 returned 0% blocks executed 0%
    #####:  579:const Token *TemplateSimplifier::findTemplateDeclarationEnd(const Token *tok)
        -:  580:{
    #####:  581:    return const_cast<const Token *>(findTemplateDeclarationEnd(const_cast<Token *>(tok)));
call    0 never executed
        -:  582:}
        -:  583:
function _ZN18TemplateSimplifier26findTemplateDeclarationEndEP5Token called 29 returned 100% blocks executed 88%
       29:  584:Token *TemplateSimplifier::findTemplateDeclarationEnd(Token *tok)
        -:  585:{
       29:  586:    if (Token::simpleMatch(tok, "template <")) {
call    0 returned 100%
branch  1 taken 62% (fallthrough)
branch  2 taken 38%
       18:  587:        tok = tok->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
       18:  588:        if (tok)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  589:            tok = tok->next();
call    0 returned 100%
        -:  590:    }
        -:  591:
       29:  592:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  593:        return nullptr;
        -:  594:
       29:  595:    Token * tok2 = tok;
      209:  596:    while (tok2 && !Token::Match(tok2, ";|{")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 76% (fallthrough)
branch  4 taken 24%
branch  5 taken 76% (fallthrough)
branch  6 taken 24%
       90:  597:        if (tok2->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  598:            tok2 = tok2->findClosingBracket();
call    0 never executed
       90:  599:        else if (Token::Match(tok2, "(|[") && tok2->link())
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 32% (fallthrough)
branch  7 taken 68%
       29:  600:            tok2 = tok2->link();
call    0 returned 100%
       90:  601:        if (tok2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       90:  602:            tok2 = tok2->next();
call    0 returned 100%
        -:  603:    }
       29:  604:    if (tok2 && tok2->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 79% (fallthrough)
branch  5 taken 21%
branch  6 taken 79% (fallthrough)
branch  7 taken 21%
       23:  605:        tok = tok2->link();
call    0 returned 100%
       23:  606:        if (tok && tok->strAt(1) == ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  607:            tok = tok->next();
call    0 never executed
        6:  608:    } else if (tok2 && tok2->str() == ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        6:  609:        tok = tok2;
        -:  610:    else
    #####:  611:        tok = nullptr;
        -:  612:
       29:  613:    return tok;
        -:  614:}
        -:  615:
function _ZN18TemplateSimplifier11eraseTokensEP5TokenPKS0_ called 9 returned 100% blocks executed 92%
        9:  616:void TemplateSimplifier::eraseTokens(Token *begin, const Token *end)
        -:  617:{
        9:  618:    if (!begin || begin == end)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  619:        return;
        -:  620:
       99:  621:    while (begin->next() && begin->next() != end) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 92% (fallthrough)
branch  5 taken 8%
branch  6 taken 92% (fallthrough)
branch  7 taken 8%
       99:  622:        begin->deleteNext();
call    0 returned 100%
        -:  623:    }
        -:  624:}
        -:  625:
function _ZN18TemplateSimplifier11deleteTokenEP5Token called 4 returned 100% blocks executed 83%
        4:  626:void TemplateSimplifier::deleteToken(Token *tok)
        -:  627:{
        4:  628:    if (tok->next())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4:  629:        tok->next()->deletePrevious();
call    0 returned 100%
call    1 returned 100%
        -:  630:    else
    #####:  631:        tok->deleteThis();
call    0 never executed
        4:  632:}
        -:  633:
function _ZN18TemplateSimplifier14removeTemplateEP5Token called 4 returned 100% blocks executed 64%
        4:  634:bool TemplateSimplifier::removeTemplate(Token *tok)
        -:  635:{
        4:  636:    if (!Token::simpleMatch(tok, "template <"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  637:        return false;
        -:  638:
        4:  639:    int indentlevel = 0;
        4:  640:    unsigned int countgt = 0;   // Counter for ">"
       32:  641:    for (const Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -:  642:
       32:  643:        if (tok2->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 88%
        4:  644:            tok2 = tok2->link();
call    0 returned 100%
       28:  645:        } else if (tok2->str() == ")") {  // garbage code! (#3504)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  646:            eraseTokens(tok,tok2);
call    0 never executed
    #####:  647:            deleteToken(tok);
call    0 never executed
    #####:  648:            return false;
        -:  649:        }
        -:  650:
       28:  651:        else if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        4:  652:            tok2 = tok2->link();
call    0 returned 100%
        4:  653:            if (indentlevel < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  654:                tok2 = tok2->next();
call    0 returned 100%
        4:  655:                if (tok2 && tok2->str() == ";" && tok2->next())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####:  656:                    tok2 = tok2->next();
call    0 never executed
        4:  657:                eraseTokens(tok, tok2);
call    0 returned 100%
        4:  658:                deleteToken(tok);
call    0 returned 100%
        4:  659:                return true;
        -:  660:            }
       24:  661:        } else if (tok2->str() == "}") {  // garbage code! (#3449)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  662:            eraseTokens(tok,tok2);
call    0 never executed
    #####:  663:            deleteToken(tok);
call    0 never executed
    #####:  664:            return false;
        -:  665:        }
        -:  666:
        -:  667:        // Count ">"
       28:  668:        if (tok2->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        4:  669:            countgt++;
        -:  670:
        -:  671:        // don't remove constructor
       28:  672:        if (tok2->str() == "explicit" ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 57% (fallthrough)
branch  5 taken 43%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
       16:  673:            (countgt == 1 && Token::Match(tok2->previous(), "> %type% (") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:  674:             Tokenizer::startOfExecutableScope(tok2->linkAt(1)))) {
call    0 never executed
call    1 never executed
    #####:  675:            eraseTokens(tok, tok2);
call    0 never executed
    #####:  676:            deleteToken(tok);
call    0 never executed
    #####:  677:            return true;
        -:  678:        }
        -:  679:
       28:  680:        if (tok2->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  681:            tok2 = tok2->next();
call    0 never executed
    #####:  682:            eraseTokens(tok, tok2);
call    0 never executed
    #####:  683:            deleteToken(tok);
call    0 never executed
    #####:  684:            return true;
        -:  685:        }
        -:  686:
       28:  687:        if (tok2->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        4:  688:            ++indentlevel;
        -:  689:
       24:  690:        else if (indentlevel >= 2 && tok2->str() == ">")
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  691:            --indentlevel;
        -:  692:
       24:  693:        else if (Token::Match(tok2, "> class|struct|union %name% [,)]")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  694:            tok2 = tok2->next();
call    0 never executed
    #####:  695:            eraseTokens(tok, tok2);
call    0 never executed
    #####:  696:            deleteToken(tok);
call    0 never executed
    #####:  697:            return true;
        -:  698:        }
        -:  699:    }
        -:  700:
    #####:  701:    return false;
        -:  702:}
        -:  703:
function _ZN18TemplateSimplifier23getTemplateDeclarationsEv called 939 returned 100% blocks executed 75%
      939:  704:bool TemplateSimplifier::getTemplateDeclarations()
        -:  705:{
      939:  706:    bool codeWithTemplates = false;
    29642:  707:    for (Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28703:  708:        if (!Token::simpleMatch(tok, "template <"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    28690:  709:            continue;
        -:  710:        // ignore template template parameter
       13:  711:        if (tok->strAt(-1) == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  712:            continue;
        -:  713:        // ignore nested template
       13:  714:        if (tok->strAt(-1) == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  715:            continue;
        -:  716:        // skip to last nested template parameter
       13:  717:        const Token *tok1 = tok;
       13:  718:        while (tok1 && tok1->next() && Token::simpleMatch(tok1->next()->findClosingBracket(), "> template <")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####:  719:            const Token *closing = tok1->next()->findClosingBracket();
call    0 never executed
call    1 never executed
    #####:  720:            if (!closing)
branch  0 never executed
branch  1 never executed
    #####:  721:                syntaxError(tok1->next());
call    0 never executed
call    1 never executed
    #####:  722:            tok1 = closing->next();
call    0 never executed
        -:  723:        }
       13:  724:        if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  725:            syntaxError(tok);
call    0 never executed
        -:  726:        // Some syntax checks, see #6865
       13:  727:        if (!tok->tokAt(2))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  728:            syntaxError(tok->next());
call    0 never executed
call    1 never executed
       15:  729:        if (tok->strAt(2)=="typename" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        2:  730:            !Token::Match(tok->tokAt(3), "%name%|...|,|=|>"))
call    0 returned 100%
call    1 returned 100%
    #####:  731:            syntaxError(tok->next());
call    0 never executed
call    1 never executed
       13:  732:        codeWithTemplates = true;
       13:  733:        const Token * const parmEnd = tok1->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
       68:  734:        for (const Token *tok2 = parmEnd; tok2; tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       68:  735:            if (tok2->str() == "(" && tok2->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 18% (fallthrough)
branch  8 taken 82%
       12:  736:                tok2 = tok2->link();
call    0 returned 100%
       56:  737:            else if (tok2->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  738:                break;
        -:  739:            // skip decltype(...)
       56:  740:            else if (Token::simpleMatch(tok2, "decltype ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  741:                tok2 = tok2->linkAt(1);
call    0 never executed
       56:  742:            else if (Token::Match(tok2, "{|=|;")) {
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
       13:  743:                const int namepos = getTemplateNamePosition(parmEnd);
call    0 returned 100%
       13:  744:                if (namepos > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       26:  745:                    TokenAndName decl(tok, tok->scopeInfo()->name, parmEnd->tokAt(namepos), parmEnd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
       13:  746:                    if (decl.isForwardDeclaration()) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
        -:  747:                        // Declaration => add to mTemplateForwardDeclarations
        2:  748:                        mTemplateForwardDeclarations.emplace_back(std::move(decl));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  749:                    } else {
        -:  750:                        // Implementation => add to mTemplateDeclarations
       11:  751:                        mTemplateDeclarations.emplace_back(std::move(decl));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  752:                    }
       13:  753:                    break;
        -:  754:                }
        -:  755:            }
        -:  756:        }
        -:  757:    }
      939:  758:    return codeWithTemplates;
call    0 never executed
        -:  759:}
        -:  760:
function _ZN18TemplateSimplifier16addInstantiationEP5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
        6:  761:void TemplateSimplifier::addInstantiation(Token *token, const std::string &scope)
        -:  762:{
        6:  763:    simplifyTemplateArgs(token->tokAt(2), token->next()->findClosingBracket());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:  764:
        6:  765:    mTemplateInstantiations.emplace_back(token, scope);
call    0 returned 100%
        6:  766:}
        -:  767:
function _ZN18TemplateSimplifier25getTemplateInstantiationsEv called 12 returned 100% blocks executed 29%
       12:  768:void TemplateSimplifier::getTemplateInstantiations()
        -:  769:{
       24:  770:    std::multimap<std::string, const TokenAndName *> functionNameMap;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  771:
       23:  772:    for (const auto & decl : mTemplateDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       11:  773:        if (decl.isFunction())
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
       10:  774:            functionNameMap.insert(std::make_pair(decl.name(), &decl));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
        -:  775:    }
        -:  776:
       14:  777:    for (const auto & decl : mTemplateForwardDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        2:  778:        if (decl.isFunction())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  779:            functionNameMap.insert(std::make_pair(decl.name(), &decl));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
        -:  780:    }
        -:  781:
       12:  782:    const Token *skip = nullptr;
        -:  783:
      250:  784:    for (Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
        -:  785:
        -:  786:        // template definition.. skip it
      238:  787:        if (Token::simpleMatch(tok, "template <")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
       13:  788:            tok = tok->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       13:  789:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  790:                break;
        -:  791:
       13:  792:            const bool isUsing = tok->strAt(1) == "using";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
       13:  793:            if (isUsing && Token::Match(tok->tokAt(2), "%name% <")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  794:                // Can't have specialized type alias so ignore it
    #####:  795:                Token *tok2 = Token::findsimplematch(tok->tokAt(3), ";");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  796:                if (tok2)
branch  0 never executed
branch  1 never executed
    #####:  797:                    tok = tok2;
       13:  798:            } else if (tok->strAt(-1) == "<") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
        -:  799:                // Don't ignore user specialization but don't consider it an instantiation.
        -:  800:                // Instantiations in return type, function parameters, and executable code
        -:  801:                // are not ignored.
        2:  802:                unsigned int pos = getTemplateNamePosition(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  803:                if (pos > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  804:                    skip = tok->tokAt(pos);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  805:            } else {
        -:  806:                // #7914
        -:  807:                // Ignore template instantiations within template definitions: they will only be
        -:  808:                // handled if the definition is actually instantiated
        -:  809:
       11:  810:                Token * tok2 = findTemplateDeclarationEnd(tok->next());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       11:  811:                if (tok2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       11:  812:                    tok = tok2;
        -:  813:            }
      225:  814:        } else if (Token::Match(tok, "template using %name% <")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  815:            // Can't have specialized type alias so ignore it
    #####:  816:            Token *tok2 = Token::findsimplematch(tok->tokAt(3), ";");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  817:            if (tok2)
branch  0 never executed
branch  1 never executed
    #####:  818:                tok = tok2;
      225:  819:        } else if (Token::Match(tok, "using %name% <")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  820:            // Can't have specialized type alias so ignore it
    #####:  821:            Token *tok2 = Token::findsimplematch(tok->tokAt(2), ";");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  822:            if (tok2)
branch  0 never executed
branch  1 never executed
    #####:  823:                tok = tok2;
      662:  824:        } else if (Token::Match(tok->previous(), "(|{|}|;|=|>|<<|:|.|*|&|return|<|,|! %name% ::|<|(") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
      436:  825:                   Token::Match(tok->previous(), "%type% %name% ::|<") ||
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
      211:  826:                   Token::Match(tok->tokAt(-2), "[,:] private|protected|public %name% ::|<")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       20:  827:            std::string scopeName = tok->scopeInfo()->name;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       20:  828:            std::string qualification;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 43%
branch  3 taken 57%
call    4 never executed
       14:  829:            Token * qualificationTok = tok;
       18:  830:            while (Token::Match(tok, "%name% :: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 13% (fallthrough)
branch  4 taken 88%
        -:  831:                // ignore redundant namespaces
        2:  832:                if (scopeName.find(tok->str()) == std::string::npos)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  833:                    qualification += (qualification.empty() ? "" : " :: ") + tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
call   12 never executed
        2:  834:                tok = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  835:            }
        -:  836:
        -:  837:            // look for function instantiation with type deduction
        -:  838:            // fixme: only single argument functions supported
       14:  839:            if (tok->strAt(1) == "(") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
       12:  840:                std::string fullName = qualification + (qualification.empty() ? "" : " :: ") + tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
        -:  841:                // get all declarations with this name
        6:  842:                for (auto pos = functionNameMap.lower_bound(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
call    5 returned 100%
call    6 never executed
        6:  843:                     pos != functionNameMap.upper_bound(tok->str()); ++pos) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -:  844:                    // look for declaration with same qualification
    #####:  845:                    if (pos->second->fullName() == fullName) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  846:                        // make sure it is a single argument function
    #####:  847:                        if (Token::Match(pos->second->token()->tokAt(2), "typename|class %name% >") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  848:                            Token::Match(pos->second->nameToken()->tokAt(2), "const| %type% &| %name%| )") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  849:                            Token::Match(tok->tokAt(2), "%num%|%str%|%char%|%bool% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  850:                            tok->insertToken(">");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  851:                            switch (tok->tokAt(3)->tokType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  852:                            case Token::eBoolean:
    #####:  853:                                tok->insertToken("bool");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  854:                                break;
    #####:  855:                            case Token::eChar:
    #####:  856:                                if (tok->tokAt(3)->isLong())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  857:                                    tok->insertToken("wchar_t");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  858:                                else
    #####:  859:                                    tok->insertToken("char");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  860:                                break;
    #####:  861:                            case Token::eString:
    #####:  862:                                tok->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  863:                                if (tok->tokAt(4)->isLong())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  864:                                    tok->insertToken("wchar_t");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  865:                                else
    #####:  866:                                    tok->insertToken("char");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  867:                                tok->insertToken("const");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  868:                                break;
    #####:  869:                            case Token::eNumber: {
    #####:  870:                                MathLib::value num(tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  871:                                if (num.isFloat()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  872:                                    // MathLib::getSuffix doesn't work for floating point numbers
    #####:  873:                                    char suffix = tok->strAt(3).back();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  874:                                    if (suffix == 'f' || suffix == 'F')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  875:                                        tok->insertToken("float");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  876:                                    else if (suffix == 'l' || suffix == 'L') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  877:                                        tok->insertToken("double");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  878:                                        tok->insertToken("long");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  879:                                    } else
    #####:  880:                                        tok->insertToken("double");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  881:                                } else if (num.isInt()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  882:                                    std::string suffix = MathLib::getSuffix(tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  883:                                    if (suffix.find("LL") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  884:                                        tok->insertToken("long");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  885:                                        tok->insertToken("long");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  886:                                    } else if (suffix.find('L') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  887:                                        tok->insertToken("long");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  888:                                    else
    #####:  889:                                        tok->insertToken("int");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  890:                                    if (suffix.find('U') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  891:                                        tok->insertToken("unsigned");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  892:                                }
    #####:  893:                                break;
        -:  894:                            }
    #####:  895:                            default:
    #####:  896:                                break;
        -:  897:                            }
    #####:  898:                            tok->insertToken("<");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  899:                            break;
        -:  900:                        }
        -:  901:                    }
        -:  902:                }
        -:  903:            }
        -:  904:
       21:  905:            if (!Token::Match(tok, "%name% <") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
        7:  906:                Token::Match(tok, "const_cast|dynamic_cast|reinterpret_cast|static_cast"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  907:                continue;
        -:  908:
        8:  909:            if (tok == skip) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:  910:                skip = nullptr;
        1:  911:                continue;
        -:  912:            }
        -:  913:
        -:  914:            // Add inner template instantiations first => go to the ">"
        -:  915:            // and then parse backwards, adding all seen instantiations
        6:  916:            Token *tok2 = tok->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  917:
        -:  918:            // parse backwards and add template instantiations
        -:  919:            // TODO
       44:  920:            for (; tok2 && tok2 != tok; tok2 = tok2->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 76% (fallthrough)
branch  3 taken 24%
call    4 returned 100%
       19:  921:                if (Token::Match(tok2, ",|< %name% <") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  922:                    (tok2->strAt(3) == ">" || templateParameters(tok2->tokAt(2)))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  923:                    addInstantiation(tok2->next(), tok->scopeInfo()->name);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       19:  924:                } else if (Token::Match(tok2->next(), "class|struct"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  925:                    tok2->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  926:            }
        -:  927:
        -:  928:            // Add outer template..
        6:  929:            if (templateParameters(tok->next()) || tok->strAt(2) == ">") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
       12:  930:                const std::string scopeName1(scopeName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 43%
branch  6 taken 57%
call    7 never executed
        -:  931:                while (true) {
       12:  932:                    const std::string fullName = scopeName + (scopeName.empty()?"":" :: ") +
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
call   11 never executed
       12:  933:                                                 qualification + (qualification.empty()?"":" :: ") + tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
        6:  934:                    const std::list<TokenAndName>::const_iterator it = std::find_if(mTemplateDeclarations.begin(), mTemplateDeclarations.end(), FindFullName(fullName));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 0%
branch 15 taken 100%
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        6:  935:                    if (it != mTemplateDeclarations.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
        -:  936:                        // full name matches
        4:  937:                        addInstantiation(tok, it->scope());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        4:  938:                        break;
        -:  939:                    } else {
        -:  940:                        // full name doesn't match so try with using namespaces if available
        2:  941:                        bool found = false;
        2:  942:                        for (const auto & nameSpace :  tok->scopeInfo()->usingNamespaces) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
call   12 returned 100%
call   13 returned 100%
call   14 never executed
call   15 never executed
    #####:  943:                            std::string fullNameSpace = scopeName + (scopeName.empty()?"":" :: ") +
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  944:                                                        nameSpace + (qualification.empty()?"":" :: ") + qualification;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  945:                            std::string newFullName = fullNameSpace + " :: " + tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####:  946:                            const std::list<TokenAndName>::const_iterator it1 = std::find_if(mTemplateDeclarations.begin(), mTemplateDeclarations.end(), FindFullName(newFullName));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  947:                            if (it1 != mTemplateDeclarations.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  948:                                // insert using namespace into token stream
    #####:  949:                                std::string::size_type offset = 0;
    #####:  950:                                std::string::size_type pos = 0;
    #####:  951:                                while ((pos = nameSpace.substr(offset).find(' ')) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  952:                                    qualificationTok->insertToken(nameSpace.substr(offset, pos), "", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  953:                                    offset = offset + pos + 1;
        -:  954:                                }
    #####:  955:                                qualificationTok->insertToken(nameSpace.substr(offset), "", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  956:                                qualificationTok->insertToken("::", "", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  957:                                addInstantiation(tok, it1->scope());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  958:                                found = true;
    #####:  959:                                break;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  960:                            }
        -:  961:                        }
        2:  962:                        if (found)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  963:                            break;
        -:  964:
        2:  965:                        if (scopeName.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  966:                            if (!qualification.empty())
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  967:                                addInstantiation(tok, qualification);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  968:                            else
        1:  969:                                addInstantiation(tok,  tok->scopeInfo()->name);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        2:  970:                            break;
        -:  971:                        }
    #####:  972:                        const std::string::size_type pos = scopeName.rfind(" :: ");
call    0 never executed
    #####:  973:                        scopeName = (pos == std::string::npos) ? std::string() : scopeName.substr(0,pos);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 returned 100%
branch  9 taken 0%
branch 10 taken 100%
        -:  974:                    }
    #####:  975:                }
        -:  976:            }
        -:  977:        }
        -:  978:    }
       12:  979:}
        -:  980:
        -:  981:
function _ZN18TemplateSimplifier24useDefaultArgumentValuesEv called 12 returned 100% blocks executed 69%
       12:  982:void TemplateSimplifier::useDefaultArgumentValues()
        -:  983:{
       23:  984:    for (TokenAndName &declaration : mTemplateDeclarations)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
       11:  985:        useDefaultArgumentValues(declaration);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  986:
       14:  987:    for (TokenAndName &declaration : mTemplateForwardDeclarations)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        2:  988:        useDefaultArgumentValues(declaration);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  989:}
        -:  990:
function _ZN18TemplateSimplifier24useDefaultArgumentValuesERNS_12TokenAndNameE called 13 returned 100% blocks executed 14%
       13:  991:void TemplateSimplifier::useDefaultArgumentValues(TokenAndName &declaration)
        -:  992:{
        -:  993:    // Ticket #5762: Skip specialization tokens
       13:  994:    if (declaration.isSpecialization() || declaration.isAlias() || declaration.isFriend())
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 15% (fallthrough)
branch 10 taken 85%
       15:  995:        return;
        -:  996:
        -:  997:    // template parameters with default value has syntax such as:
        -:  998:    //     x = y
        -:  999:    // this list will contain all the '=' tokens for such arguments
       11: 1000:    std::list<Token *> eq;
call    0 returned 100%
call    1 never executed
        -: 1001:    // and this set the position of parameters with a default value
       11: 1002:    std::set<std::size_t> defaultedArgPos;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
call    4 never executed
        -: 1003:
        -: 1004:    // parameter number. 1,2,3,..
       11: 1005:    std::size_t templatepar = 1;
        -: 1006:
        -: 1007:    // parameter depth
       11: 1008:    std::size_t templateParmDepth = 0;
        -: 1009:
        -: 1010:    // map type parameter name to index
       11: 1011:    std::map<std::string, unsigned int> typeParameterNames;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
call    4 never executed
        -: 1012:
        -: 1013:    // Scan template declaration..
       55: 1014:    for (Token *tok = declaration.token(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
       55: 1015:        if (tok->link() && Token::Match(tok, "{|(|[")) { // Ticket #6835
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1016:            tok = tok->link();
call    0 never executed
    #####: 1017:            continue;
        -: 1018:        }
        -: 1019:
      132: 1020:        if (tok->str() == "<" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 20% (fallthrough)
branch  7 taken 80%
       55: 1021:            (tok->strAt(1) == ">" || (tok->previous()->isName() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
       88: 1022:                                      typeParameterNames.find(tok->strAt(-1)) == typeParameterNames.end())))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 20% (fallthrough)
branch  9 taken 80%
call   10 returned 100%
branch 11 taken 20% (fallthrough)
branch 12 taken 80%
call   13 returned 100%
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
       11: 1023:            ++templateParmDepth;
        -: 1024:
        -: 1025:        // end of template parameters?
       55: 1026:        if (tok->str() == ">") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
       11: 1027:            if (templateParmDepth<2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       11: 1028:                break;
        -: 1029:            else
    #####: 1030:                --templateParmDepth;
        -: 1031:        }
        -: 1032:
        -: 1033:        // map type parameter name to index
       44: 1034:        if (Token::Match(tok, "typename|class|%type% %name% ,|>"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
       11: 1035:            typeParameterNames[tok->strAt(1)] = templatepar - 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 1036:
        -: 1037:        // next template parameter
       44: 1038:        if (tok->str() == "," && (1 == templateParmDepth)) // Ticket #5823: Properly count parameters
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1039:            ++templatepar;
        -: 1040:
        -: 1041:        // default parameter value?
       44: 1042:        else if (Token::Match(tok, "= !!>")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1043:            if (defaultedArgPos.insert(templatepar).second) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1044:                eq.push_back(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1045:            } else {
        -: 1046:                // Ticket #5605: Syntax error (two equal signs for the same parameter), bail out
    #####: 1047:                eq.clear();
call    0 never executed
    #####: 1048:                break;
        -: 1049:            }
        -: 1050:        }
        -: 1051:    }
       11: 1052:    if (eq.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       11: 1053:        return;
        -: 1054:
        -: 1055:    // iterate through all template instantiations
    #####: 1056:    for (const TokenAndName &instantiation : mTemplateInstantiations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1057:        if (declaration.fullName() != instantiation.fullName())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1058:            continue;
        -: 1059:
        -: 1060:        // instantiation arguments..
    #####: 1061:        std::vector<std::vector<const Token *>> instantiationArgs;
call    0 never executed
call    1 never executed
    #####: 1062:        std::size_t index = 0;
    #####: 1063:        const Token *end = instantiation.token()->next()->findClosingBracket();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1064:        if (!end)
branch  0 never executed
branch  1 never executed
    #####: 1065:            continue;
    #####: 1066:        if (end != instantiation.token()->tokAt(2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1067:            instantiationArgs.resize(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1068:        for (const Token *tok1 = instantiation.token()->tokAt(2); tok1 && tok1 != end; tok1 = tok1->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 1069:            if (tok1->link() && Token::Match(tok1, "{|(|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1070:                const Token *endLink = tok1->link();
call    0 never executed
    #####: 1071:                do {
    #####: 1072:                    instantiationArgs[index].push_back(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1073:                    tok1 = tok1->next();
call    0 never executed
    #####: 1074:                } while (tok1 && tok1 != endLink);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1075:                instantiationArgs[index].push_back(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1076:            } else if (tok1->str() == "<" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1077:                       (tok1->strAt(1) == ">" || (tok1->previous()->isName() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1078:                                                  typeParameterNames.find(tok1->strAt(-1)) == typeParameterNames.end()))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 1079:                const Token *endLink = tok1->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1080:                do {
    #####: 1081:                    instantiationArgs[index].push_back(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1082:                    tok1 = tok1->next();
call    0 never executed
    #####: 1083:                } while (tok1 && tok1 != endLink);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1084:                instantiationArgs[index].push_back(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1085:            } else if (tok1->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1086:                ++index;
    #####: 1087:                instantiationArgs.resize(index + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1088:            } else
    #####: 1089:                instantiationArgs[index].push_back(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1090:        }
        -: 1091:
        -: 1092:        // count the parameters..
    #####: 1093:        Token *tok = instantiation.token()->next();
call    0 never executed
call    1 never executed
    #####: 1094:        unsigned int usedpar = templateParameters(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1095:        Token *instantiationEnd = tok->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1096:        tok = instantiationEnd;
        -: 1097:
    #####: 1098:        if (tok && tok->str() == ">") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1099:            tok = tok->previous();
call    0 never executed
    #####: 1100:            std::list<Token *>::const_iterator it = eq.begin();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 1101:            for (std::size_t i = (templatepar - eq.size()); it != eq.end() && i < usedpar; ++i)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1102:                ++it;
call    0 never executed
    #####: 1103:            int count = 0;
    #####: 1104:            while (it != eq.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1105:                int indentlevel = 0;
    #####: 1106:                if ((usedpar + count) && usedpar <= (instantiationArgs.size() + count)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1107:                    tok->insertToken(",");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1108:                    tok = tok->next();
call    0 never executed
        -: 1109:                }
    #####: 1110:                const Token *from = (*it)->next();
call    0 never executed
call    1 never executed
    #####: 1111:                std::stack<Token *> links;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1112:                while (from && (!links.empty() || indentlevel || !Token::Match(from, ",|>"))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1113:                    if (from->str() == "<" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1114:                        (from->strAt(1) == ">" || (from->previous()->isName() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1115:                                                   typeParameterNames.find(from->strAt(-1)) == typeParameterNames.end())))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 1116:                        ++indentlevel;
    #####: 1117:                    else if (from->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1118:                        --indentlevel;
    #####: 1119:                    auto entry = typeParameterNames.find(from->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1120:                    if (entry != typeParameterNames.end() && entry->second < instantiationArgs.size()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1121:                        for (const Token *tok1 : instantiationArgs[entry->second]) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1122:                            tok->insertToken(tok1->str(), tok1->originalName());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1123:                            tok = tok->next();
call    0 never executed
        -: 1124:
    #####: 1125:                            if (Token::Match(tok, "(|[|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1126:                                links.push(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1127:                            else if (!links.empty() && Token::Match(tok, ")|]|}")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1128:                                Token::createMutualLinks(links.top(), tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1129:                                links.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1130:                            }
        -: 1131:                        }
        -: 1132:                    } else {
    #####: 1133:                        tok->insertToken(from->str(), from->originalName());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1134:                        tok = tok->next();
call    0 never executed
        -: 1135:
    #####: 1136:                        if (Token::Match(tok, "(|[|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1137:                            links.push(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1138:                        else if (!links.empty() && Token::Match(tok, ")|]|}")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1139:                            Token::createMutualLinks(links.top(), tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1140:                            links.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1141:                        }
        -: 1142:                    }
    #####: 1143:                    from = from->next();
call    0 never executed
        -: 1144:                }
    #####: 1145:                ++it;
call    0 never executed
    #####: 1146:                count++;
    #####: 1147:                usedpar++;
        -: 1148:            }
        -: 1149:        }
        -: 1150:
    #####: 1151:        simplifyTemplateArgs(instantiation.token()->next(), instantiationEnd);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1152:    }
        -: 1153:
    #####: 1154:    for (Token * const eqtok : eq) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 returned 100%
branch 10 taken 0%
branch 11 taken 100%
call   12 never executed
call   13 never executed
        -: 1155:        Token *tok2;
    #####: 1156:        int indentlevel = 0;
    #####: 1157:        for (tok2 = eqtok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1158:            if (Token::Match(tok2, ";|)|}|]")) { // bail out #6607
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1159:                tok2 = nullptr;
    #####: 1160:                break;
        -: 1161:            }
    #####: 1162:            if (Token::Match(tok2, "(|{|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1163:                tok2 = tok2->link();
call    0 never executed
    #####: 1164:            else if (Token::Match(tok2, "%type% <") && (tok2->strAt(2) == ">" || templateParameters(tok2->next()))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1165:                std::list<TokenAndName>::iterator ti = std::find_if(mTemplateInstantiations.begin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1166:                                                       mTemplateInstantiations.end(),
call    0 never executed
    #####: 1167:                                                       FindToken(tok2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1168:                if (ti != mTemplateInstantiations.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1169:                    mTemplateInstantiations.erase(ti);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1170:                ++indentlevel;
    #####: 1171:            } else if (indentlevel > 0 && tok2->str() == ">")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1172:                --indentlevel;
    #####: 1173:            else if (indentlevel == 0 && Token::Match(tok2, ",|>"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1174:                break;
    #####: 1175:            if (indentlevel < 0)
branch  0 never executed
branch  1 never executed
    #####: 1176:                break;
        -: 1177:        }
        -: 1178:        // something went wrong, don't call eraseTokens()
        -: 1179:        // with a nullptr "end" parameter (=all remaining tokens).
    #####: 1180:        if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1181:            continue;
        -: 1182:
        -: 1183:        // don't strip args from uninstantiated templates
    #####: 1184:        std::list<TokenAndName>::iterator ti2 = std::find_if(mTemplateInstantiations.begin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1185:                                                mTemplateInstantiations.end(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1186:                                                FindName(declaration.name()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1187:
    #####: 1188:        if (ti2 == mTemplateInstantiations.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1189:            continue;
        -: 1190:
    #####: 1191:        eraseTokens(eqtok, tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1192:        eqtok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1193:
        -: 1194:        // update parameter end pointer
    #####: 1195:        declaration.paramEnd(declaration.token()->next()->findClosingBracket());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1196:    }
        -: 1197:}
        -: 1198:
function _ZN18TemplateSimplifier23simplifyTemplateAliasesEv called 12 returned 100% blocks executed 5%
       12: 1199:void TemplateSimplifier::simplifyTemplateAliases()
        -: 1200:{
       23: 1201:    for (std::list<TokenAndName>::iterator it1 = mTemplateDeclarations.begin(); it1 != mTemplateDeclarations.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 48% (fallthrough)
branch  5 taken 52%
call    6 returned 100%
call    7 never executed
       11: 1202:        TokenAndName &aliasDeclaration = *it1;
call    0 returned 100%
        -: 1203:
       22: 1204:        if (!aliasDeclaration.isAlias()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       11: 1205:            ++it1;
call    0 returned 100%
       11: 1206:            continue;
        -: 1207:        }
        -: 1208:
        -: 1209:        // alias parameters..
    #####: 1210:        std::vector<const Token *> aliasParameters;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1211:        getTemplateParametersInDeclaration(aliasDeclaration.token()->tokAt(2), aliasParameters);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1212:        std::map<std::string, unsigned int> aliasParameterNames;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1213:        for (unsigned int argnr = 0; argnr < aliasParameters.size(); ++argnr)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1214:            aliasParameterNames[aliasParameters[argnr]->str()] = argnr;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1215:
        -: 1216:        // Look for alias usages..
    #####: 1217:        bool found = false;
    #####: 1218:        for (std::list<TokenAndName>::iterator it2 = mTemplateInstantiations.begin(); it2 != mTemplateInstantiations.end();) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 1219:            TokenAndName &aliasUsage = *it2;
call    0 never executed
    #####: 1220:            if (!aliasUsage.token() || aliasUsage.fullName() != aliasDeclaration.fullName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1221:                ++it2;
call    0 never executed
    #####: 1222:                continue;
        -: 1223:            }
        -: 1224:
        -: 1225:            // don't recurse
    #####: 1226:            if (aliasDeclaration.isAliasToken(aliasUsage.token())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1227:                ++it2;
call    0 never executed
    #####: 1228:                continue;
        -: 1229:            }
        -: 1230:
    #####: 1231:            std::vector<std::pair<Token *, Token *>> args;
call    0 never executed
call    1 never executed
    #####: 1232:            Token *tok2 = aliasUsage.token()->tokAt(2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1233:            while (tok2) {
branch  0 never executed
branch  1 never executed
    #####: 1234:                Token * const start = tok2;
    #####: 1235:                while (tok2 && !Token::Match(tok2, "[,>;{}]")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1236:                    if (tok2->link() && Token::Match(tok2, "(|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1237:                        tok2 = tok2->link();
call    0 never executed
    #####: 1238:                    else if (tok2->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1239:                        tok2 = tok2->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1240:                    tok2 = tok2->next();
call    0 never executed
        -: 1241:                }
        -: 1242:
    #####: 1243:                args.emplace_back(start, tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1244:                if (tok2 && tok2->str() == ",") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1245:                    tok2 = tok2->next();
call    0 never executed
        -: 1246:                } else {
    #####: 1247:                    break;
        -: 1248:                }
        -: 1249:            }
    #####: 1250:            if (!tok2 || tok2->str() != ">" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1251:                (!aliasDeclaration.isVariadic() && (args.size() != aliasParameters.size())) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1252:                (aliasDeclaration.isVariadic() && (args.size() < aliasParameters.size()))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1253:                ++it2;
call    0 never executed
    #####: 1254:                continue;
        -: 1255:            }
        -: 1256:
    #####: 1257:            mChanged = true;
        -: 1258:
        -: 1259:            // copy template-id from declaration to after instantiation
    #####: 1260:            Token * dst = aliasUsage.token()->next()->findClosingBracket();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1261:            Token * end = TokenList::copyTokens(dst, aliasDeclaration.aliasStartToken(), aliasDeclaration.aliasEndToken()->previous(), false)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 1262:
        -: 1263:            // replace parameters
    #####: 1264:            for (Token *tok1 = dst->next(); tok1 != end; tok1 = tok1->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1265:                if (!tok1->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1266:                    continue;
    #####: 1267:                if (aliasParameterNames.find(tok1->str()) != aliasParameterNames.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1268:                    const unsigned int argnr = aliasParameterNames[tok1->str()];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1269:                    const Token * const fromStart = args[argnr].first;
call    0 never executed
    #####: 1270:                    const Token * const fromEnd   = args[argnr].second->previous();
call    0 never executed
call    1 never executed
    #####: 1271:                    Token *temp = TokenList::copyTokens(tok1, fromStart, fromEnd, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1272:                    const bool tempOK(temp && temp != tok1->next());
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1273:                    tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1274:                    if (tempOK)
branch  0 never executed
branch  1 never executed
    #####: 1275:                        tok1 = temp; // skip over inserted parameters
    #####: 1276:                } else if (tok1->str() == "typename")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1277:                    tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1278:            }
        -: 1279:
        -: 1280:            // add new instantiations
    #####: 1281:            for (Token *tok1 = dst->next(); tok1 != end; tok1 = tok1->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1282:                if (!tok1->isName())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1283:                    continue;
    #####: 1284:                if (aliasParameterNames.find(tok2->str()) == aliasParameterNames.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
        -: 1285:                    // Create template instance..
    #####: 1286:                    if (Token::Match(tok1, "%name% <")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1287:                        const std::list<TokenAndName>::iterator it = std::find_if(mTemplateInstantiations.begin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1288:                                mTemplateInstantiations.end(),
call    0 never executed
    #####: 1289:                                FindToken(tok1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1290:                        if (it != mTemplateInstantiations.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1291:                            addInstantiation(tok2, it->scope());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1292:                    }
        -: 1293:                }
        -: 1294:            }
        -: 1295:
        -: 1296:            // erase the instantiation tokens
    #####: 1297:            eraseTokens(aliasUsage.token()->previous(), dst->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1298:            found = true;
        -: 1299:
        -: 1300:            // erase this instantiation
    #####: 1301:            it2 = mTemplateInstantiations.erase(it2);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1302:        }
        -: 1303:
    #####: 1304:        if (found) {
branch  0 never executed
branch  1 never executed
    #####: 1305:            Token *end = const_cast<Token *>(aliasDeclaration.aliasEndToken());
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1306:
        -: 1307:            // remove declaration tokens
    #####: 1308:            if (aliasDeclaration.token()->previous())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1309:                eraseTokens(aliasDeclaration.token()->previous(), end->next() ? end->next() : end);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1310:            else {
    #####: 1311:                eraseTokens(mTokenList.front(), end->next() ? end->next() : end);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1312:                deleteToken(mTokenList.front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1313:            }
        -: 1314:
        -: 1315:            // remove declaration
    #####: 1316:            it1 = mTemplateDeclarations.erase(it1);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 1317:        } else
    #####: 1318:            ++it1;
call    0 never executed
        -: 1319:    }
       12: 1320:}
        -: 1321:
function _ZN18TemplateSimplifier16instantiateMatchEPK5TokenmPKc called 4 returned 100% blocks executed 82%
        4: 1322:bool TemplateSimplifier::instantiateMatch(const Token *instance, const std::size_t numberOfArguments, const char patternAfter[])
        -: 1323:{
        4: 1324:    assert(instance->strAt(1) == "<");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -: 1325:
        4: 1326:    if (numberOfArguments != templateParameters(instance->next()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1327:        return false;
        -: 1328:
        4: 1329:    if (patternAfter) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 1330:        const Token *tok = instance->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
        4: 1331:        if (!tok || !Token::Match(tok->next(), patternAfter))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1332:            return false;
        -: 1333:    }
        -: 1334:
        -: 1335:    // nothing mismatching was found..
        4: 1336:    return true;
        -: 1337:}
        -: 1338:
        -: 1339:// Utility function for TemplateSimplifier::getTemplateNamePosition, that works on template functions
function _ZN18TemplateSimplifier39getTemplateNamePositionTemplateFunctionEPK5TokenRi called 12 returned 100% blocks executed 37%
       12: 1340:bool TemplateSimplifier::getTemplateNamePositionTemplateFunction(const Token *tok, int &namepos)
        -: 1341:{
       12: 1342:    namepos = 1;
       36: 1343:    while (tok && tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       24: 1344:        if (Token::Match(tok->next(), ";|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1345:            return false;
        -: 1346:        // skip decltype(...)
       24: 1347:        else if (Token::simpleMatch(tok->next(), "decltype (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1348:            const Token * end = tok->linkAt(2)->previous();
call    0 never executed
call    1 never executed
    #####: 1349:            while (tok && tok->next() && tok != end) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1350:                tok = tok->next();
call    0 never executed
    #####: 1351:                namepos++;
        -: 1352:            }
       24: 1353:        } else if (Token::Match(tok->next(), "%type% <")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1354:            const Token *closing = tok->tokAt(2)->findClosingBracket();
call    0 never executed
call    1 never executed
    #####: 1355:            if (closing) {
branch  0 never executed
branch  1 never executed
    #####: 1356:                if (closing->strAt(1) == "(" && Tokenizer::isFunctionHead(closing->next(), ";|{|:", true))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
    #####: 1357:                    return true;
    #####: 1358:                while (tok && tok->next() && tok->next() != closing) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1359:                    tok = tok->next();
call    0 never executed
    #####: 1360:                    namepos++;
        -: 1361:                }
        -: 1362:            }
       24: 1363:        } else if (Token::Match(tok->next(), "%type% (") && Tokenizer::isFunctionHead(tok->tokAt(2), ";|{|:", true)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
branch 18 taken 50% (fallthrough)
branch 19 taken 50%
call   20 returned 100%
branch 21 taken 50% (fallthrough)
branch 22 taken 50%
call   23 returned 100%
branch 24 taken 50% (fallthrough)
branch 25 taken 50%
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
       12: 1364:            return true;
        -: 1365:        }
       12: 1366:        tok = tok->next();
call    0 returned 100%
       12: 1367:        namepos++;
        -: 1368:    }
    #####: 1369:    return false;
        -: 1370:}
        -: 1371:
function _ZN18TemplateSimplifier39getTemplateNamePositionTemplateVariableEPK5TokenRi called 12 returned 100% blocks executed 40%
       12: 1372:bool TemplateSimplifier::getTemplateNamePositionTemplateVariable(const Token *tok, int &namepos)
        -: 1373:{
       12: 1374:    namepos = 1;
       60: 1375:    while (tok && tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       36: 1376:        if (Token::Match(tok->next(), ";|{|(|using"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
       12: 1377:            return false;
        -: 1378:        // skip decltype(...)
       24: 1379:        else if (Token::simpleMatch(tok->next(), "decltype (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1380:            const Token * end = tok->linkAt(2);
call    0 never executed
    #####: 1381:            while (tok && tok->next() && tok != end) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1382:                tok = tok->next();
call    0 never executed
    #####: 1383:                namepos++;
        -: 1384:            }
       24: 1385:        } else if (Token::Match(tok->next(), "%type% <")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1386:            const Token *closing = tok->tokAt(2)->findClosingBracket();
call    0 never executed
call    1 never executed
    #####: 1387:            if (closing) {
branch  0 never executed
branch  1 never executed
    #####: 1388:                if (Token::Match(closing->next(), "=|;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1389:                    return true;
    #####: 1390:                while (tok && tok->next() && tok->next() != closing) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1391:                    tok = tok->next();
call    0 never executed
    #####: 1392:                    namepos++;
        -: 1393:                }
        -: 1394:            }
       24: 1395:        } else if (Token::Match(tok->next(), "%type% =|;")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1396:            return true;
        -: 1397:        }
       24: 1398:        tok = tok->next();
call    0 returned 100%
       24: 1399:        namepos++;
        -: 1400:    }
    #####: 1401:    return false;
        -: 1402:}
        -: 1403:
function _ZN18TemplateSimplifier36getTemplateNamePositionTemplateClassEPK5TokenRi called 13 returned 100% blocks executed 48%
       13: 1404:bool TemplateSimplifier::getTemplateNamePositionTemplateClass(const Token *tok, int &namepos)
        -: 1405:{
       13: 1406:    if (Token::Match(tok, "> friend| class|struct|union %type% :|<|;|{|::")) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
        1: 1407:        namepos = tok->strAt(1) == "friend" ? 3 : 2;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1: 1408:        tok = tok->tokAt(namepos);
call    0 returned 100%
        2: 1409:        while (Token::Match(tok, "%type% :: %type%") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        2: 1410:               (Token::Match(tok, "%type% <") && Token::Match(tok->next()->findClosingBracket(), "> :: %type%"))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1411:            if (tok->strAt(1) == "::") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1412:                tok = tok->tokAt(2);
call    0 never executed
    #####: 1413:                namepos += 2;
        -: 1414:            } else {
    #####: 1415:                const Token *end = tok->next()->findClosingBracket();
call    0 never executed
call    1 never executed
    #####: 1416:                if (!end || !end->tokAt(2)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 1417:                    // syntax error
    #####: 1418:                    namepos = -1;
    #####: 1419:                    return true;
        -: 1420:                }
    #####: 1421:                end = end->tokAt(2);
call    0 never executed
    #####: 1422:                do {
    #####: 1423:                    tok = tok->next();
call    0 never executed
    #####: 1424:                    namepos += 1;
    #####: 1425:                } while (tok && tok != end);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1426:            }
        -: 1427:        }
        1: 1428:        return true;
        -: 1429:    }
       12: 1430:    return false;
        -: 1431:}
        -: 1432:
function _ZN18TemplateSimplifier23getTemplateNamePositionEPK5Token called 15 returned 100% blocks executed 79%
       15: 1433:int TemplateSimplifier::getTemplateNamePosition(const Token *tok)
        -: 1434:{
       15: 1435:    assert(tok && tok->str() == ">");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 never executed
        -: 1436:
       30: 1437:    auto it = mTemplateNamePos.find(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       15: 1438:    if (!mSettings->debugtemplate && it != mTemplateNamePos.end()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 13% (fallthrough)
branch 10 taken 87%
        2: 1439:        return it->second;
call    0 returned 100%
        -: 1440:    }
        -: 1441:    // get the position of the template name
       13: 1442:    int namepos = 0;
       13: 1443:    if (getTemplateNamePositionTemplateClass(tok, namepos))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 92% (fallthrough)
branch  4 taken 8%
        -: 1444:        ;
       12: 1445:    else if (Token::Match(tok, "> using %name% =")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -: 1446:        // types may not be defined in alias template declarations
    #####: 1447:        if (!Token::Match(tok->tokAt(4), "class|struct|union|enum %name%| {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1448:            namepos = 2;
       12: 1449:    } else if (getTemplateNamePositionTemplateVariable(tok, namepos))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -: 1450:        ;
       12: 1451:    else if (!getTemplateNamePositionTemplateFunction(tok, namepos))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1452:        namepos = -1; // Name not found
       13: 1453:    mTemplateNamePos[tok] = namepos;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       13: 1454:    return namepos;
        -: 1455:}
        -: 1456:
function _ZN18TemplateSimplifier12addNamespaceERKNS_12TokenAndNameEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1457:void TemplateSimplifier::addNamespace(const TokenAndName &templateDeclaration, const Token *tok)
        -: 1458:{
        -: 1459:    // find start of qualification
    #####: 1460:    const Token * tokStart = tok;
    #####: 1461:    int offset = 0;
    #####: 1462:    while (Token::Match(tokStart->tokAt(-2), "%name% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1463:        tokStart = tokStart->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1464:        offset -= 2;
        -: 1465:    }
        -: 1466:    // decide if namespace needs to be inserted in or appended to token list
    #####: 1467:    const bool insert = tokStart != tok;
        -: 1468:
    #####: 1469:    std::string::size_type start = 0;
    #####: 1470:    std::string::size_type end = 0;
    #####: 1471:    bool inTemplate = false;
    #####: 1472:    int level = 0;
    #####: 1473:    while ((end = templateDeclaration.scope().find(" ", start)) != std::string::npos) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1474:        std::string token = templateDeclaration.scope().substr(start, end - start);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1475:        // done if scopes overlap
    #####: 1476:        if (token == tokStart->str() && tok->strAt(-1) != "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1477:            break;
    #####: 1478:        if (token == "<") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1479:            inTemplate = true;
    #####: 1480:            ++level;
        -: 1481:        }
    #####: 1482:        if (inTemplate) {
branch  0 never executed
branch  1 never executed
    #####: 1483:            if (insert)
branch  0 never executed
branch  1 never executed
    #####: 1484:                mTokenList.back()->tokAt(offset)->str(mTokenList.back()->strAt(offset) + token);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
        -: 1485:            else
    #####: 1486:                mTokenList.back()->str(mTokenList.back()->str() + token);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1487:            if (token == ">") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1488:                --level;
    #####: 1489:                if (level == 0)
branch  0 never executed
branch  1 never executed
    #####: 1490:                    inTemplate = false;
        -: 1491:            }
        -: 1492:        } else {
    #####: 1493:            if (insert)
branch  0 never executed
branch  1 never executed
    #####: 1494:                mTokenList.back()->tokAt(offset)->insertToken(token, "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 1495:            else
    #####: 1496:                mTokenList.addtoken(token, tok->linenr(), tok->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
        -: 1497:        }
    #####: 1498:        start = end + 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1499:    }
        -: 1500:    // don't add if it already exists
    #####: 1501:    std::string token = templateDeclaration.scope().substr(start, end - start);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1502:    if (token != tokStart->str() || tok->strAt(-1) != "::") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1503:        if (insert) {
branch  0 never executed
branch  1 never executed
    #####: 1504:            if (!inTemplate)
branch  0 never executed
branch  1 never executed
    #####: 1505:                mTokenList.back()->tokAt(offset)->insertToken(templateDeclaration.scope().substr(start), "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
        -: 1506:            else
    #####: 1507:                mTokenList.back()->tokAt(offset)->str(mTokenList.back()->strAt(offset) + templateDeclaration.scope().substr(start));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####: 1508:            mTokenList.back()->tokAt(offset)->insertToken("::", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -: 1509:        } else {
    #####: 1510:            if (!inTemplate)
branch  0 never executed
branch  1 never executed
    #####: 1511:                mTokenList.addtoken(templateDeclaration.scope().substr(start), tok->linenr(), tok->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1512:            else
    #####: 1513:                mTokenList.back()->str(mTokenList.back()->str() + templateDeclaration.scope().substr(start));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 1514:            mTokenList.addtoken("::", tok->linenr(), tok->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 1515:        }
        -: 1516:    }
    #####: 1517:}
        -: 1518:
function _ZN18TemplateSimplifier19alreadyHasNamespaceERKNS_12TokenAndNameEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1519:bool TemplateSimplifier::alreadyHasNamespace(const TokenAndName &templateDeclaration, const Token *tok)
        -: 1520:{
    #####: 1521:    std::string scope = templateDeclaration.scope();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 1522:
        -: 1523:    // get the length in tokens of the namespace
    #####: 1524:    std::string::size_type pos = 0;
    #####: 1525:    int offset = -2;
        -: 1526:
    #####: 1527:    while ((pos = scope.find("::", pos)) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1528:        offset -= 2;
    #####: 1529:        pos += 2;
        -: 1530:    }
        -: 1531:
    #####: 1532:    return Token::simpleMatch(tok->tokAt(offset), scope.c_str()) ;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1533:}
        -: 1534:
function _ZN18TemplateSimplifier14expandTemplateERKNS_12TokenAndNameES2_RKNSt7__debug6vectorIPK5TokenSaIS7_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 5 returned 100% blocks executed 32%
        5: 1535:void TemplateSimplifier::expandTemplate(
        -: 1536:    const TokenAndName &templateDeclaration,
        -: 1537:    const TokenAndName &templateInstantiation,
        -: 1538:    const std::vector<const Token *> &typeParametersInDeclaration,
        -: 1539:    const std::string &newName,
        -: 1540:    bool copy)
        -: 1541:{
        5: 1542:    bool inTemplateDefinition = false;
        5: 1543:    const Token *startOfTemplateDeclaration = nullptr;
        5: 1544:    const Token *endOfTemplateDefinition = nullptr;
        5: 1545:    const Token * const templateDeclarationNameToken = templateDeclaration.nameToken();
call    0 returned 100%
        5: 1546:    const Token * const templateDeclarationToken = templateDeclaration.paramEnd();
call    0 returned 100%
        5: 1547:    const bool isClass = templateDeclaration.isClass();
call    0 returned 100%
        5: 1548:    const bool isFunction = templateDeclaration.isFunction();
call    0 returned 100%
        5: 1549:    const bool isSpecialization = templateDeclaration.isSpecialization();
call    0 returned 100%
        5: 1550:    const bool isVariable = templateDeclaration.isVariable();
call    0 returned 100%
function _ZZN18TemplateSimplifier14expandTemplateERKNS_12TokenAndNameES2_RKNSt7__debug6vectorIPK5TokenSaIS7_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEN16newInstantiationC2EOSK_ called 0 returned 0% blocks executed 0%
function _ZZN18TemplateSimplifier14expandTemplateERKNS_12TokenAndNameES2_RKNSt7__debug6vectorIPK5TokenSaIS7_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEN16newInstantiationD2Ev called 0 returned 0% blocks executed 0%
    #####: 1551:    struct newInstantiation {
call    0 never executed
call    1 never executed
function _ZZN18TemplateSimplifier14expandTemplateERKNS_12TokenAndNameES2_RKNSt7__debug6vectorIPK5TokenSaIS7_EEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbEN16newInstantiationC2EPS5_SJ_ called 0 returned 0% blocks executed 0%
    #####: 1552:        newInstantiation(Token *t, const std::string &s) : token(t), scope(s) { }
call    0 never executed
        -: 1553:        Token *token;
        -: 1554:        std::string scope;
        -: 1555:    };
       10: 1556:    std::vector<newInstantiation> newInstantiations;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1557:
        -: 1558:    // add forward declarations
        5: 1559:    if (copy && isClass) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1560:        templateDeclaration.token()->insertToken(templateDeclarationToken->strAt(1), "", true);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####: 1561:        templateDeclaration.token()->insertToken(newName, "", true);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1562:        templateDeclaration.token()->insertToken(";", "", true);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        9: 1563:    } else if ((isFunction && (copy || isSpecialization)) ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 80% (fallthrough)
branch  7 taken 20%
        9: 1564:               (isVariable && !isSpecialization) ||
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        6: 1565:               (isClass && isSpecialization && mTemplateSpecializationMap.find(templateDeclaration.token()) != mTemplateSpecializationMap.end())) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 20% (fallthrough)
branch 11 taken 80%
call   12 returned 100%
branch 13 taken 20% (fallthrough)
branch 14 taken 80%
call   15 returned 100%
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
        4: 1566:        Token * dst = templateDeclaration.token();
call    0 returned 100%
        4: 1567:        Token * dstStart = dst->previous();
call    0 returned 100%
        4: 1568:        bool isStatic = false;
        8: 1569:        std::string scope;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1570:        Token * start;
        -: 1571:        Token * end;
        8: 1572:        auto it = mTemplateForwardDeclarationsMap.find(dst);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 1573:        if (it != mTemplateForwardDeclarationsMap.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1574:            dst = it->second;
call    0 never executed
    #####: 1575:            dstStart = dst->previous();
call    0 never executed
    #####: 1576:            const Token * temp1 = dst->tokAt(1)->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1577:            const Token * temp2 = temp1->tokAt(getTemplateNamePosition(temp1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1578:            start = temp1->next();
call    0 never executed
    #####: 1579:            end = temp2->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1580:        } else {
        8: 1581:            auto it2 = mTemplateSpecializationMap.find(dst);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        4: 1582:            if (it2 != mTemplateSpecializationMap.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1583:                dst = it2->second;
call    0 never executed
    #####: 1584:                dstStart = dst->previous();
call    0 never executed
    #####: 1585:                isStatic = dst->next()->findClosingBracket()->strAt(1) == "static";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1586:                const Token * temp = templateDeclarationNameToken;
    #####: 1587:                while (Token::Match(temp->tokAt(-2), "%name% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1588:                    scope.insert(0, temp->strAt(-2) + " :: ");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1589:                    temp = temp->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1590:                }
        -: 1591:            }
        4: 1592:            start = templateDeclarationToken->next();
call    0 returned 100%
        4: 1593:            end = templateDeclarationNameToken->next();
call    0 returned 100%
        4: 1594:            if (end->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1595:                end = end->findClosingBracket()->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        4: 1596:            if (end->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 1597:                end = end->link()->next();
call    0 returned 100%
call    1 returned 100%
    #####: 1598:            else if (isVariable && end->str() == "=") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1599:                Token *temp = end->next();
call    0 never executed
    #####: 1600:                while (temp && temp->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1601:                    if (temp->link() && Token::Match(temp, "{|[|("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1602:                        temp = temp->link();
call    0 never executed
    #####: 1603:                    temp = temp->next();
call    0 never executed
        -: 1604:                }
    #####: 1605:                end = temp;
        -: 1606:            }
        -: 1607:        }
        4: 1608:        unsigned int typeindentlevel = 0;
        4: 1609:        while (!(typeindentlevel == 0 && Token::Match(end, ";|{|:"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1610:            if (Token::Match(end, "<|(|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1611:                ++typeindentlevel;
    #####: 1612:            else if (Token::Match(end, ">|)|}"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1613:                --typeindentlevel;
    #####: 1614:            end = end->next();
call    0 never executed
        -: 1615:        }
        -: 1616:
        4: 1617:        if (isStatic)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1618:            dst->insertToken("static", "", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 1619:
        8: 1620:        std::map<const Token *, Token *> links;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4: 1621:        bool inAssignment = false;
       44: 1622:        while (start && start != end) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
       20: 1623:            if (isVariable && start->str() == "=")
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1624:                inAssignment = true;
       20: 1625:            unsigned int itype = 0;
       58: 1626:            while (itype < typeParametersInDeclaration.size() && typeParametersInDeclaration[itype]->str() != start->str())
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 95% (fallthrough)
branch  8 taken 5%
branch  9 taken 49% (fallthrough)
branch 10 taken 51%
       19: 1627:                ++itype;
        -: 1628:
       22: 1629:            if (itype < typeParametersInDeclaration.size() &&
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 5% (fallthrough)
branch  6 taken 95%
        1: 1630:                (!isVariable || !Token::Match(typeParametersInDeclaration[itype]->previous(), "<|, %type% >|,"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        1: 1631:                typeindentlevel = 0;
        2: 1632:                std::stack<Token *> brackets1; // holds "(" and "{" tokens
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        3: 1633:                for (const Token *typetok = mTypesUsedInTemplateInstantiation[itype].token();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 1634:                     typetok && (typeindentlevel > 0 || !Token::Match(typetok, ",|>"));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 67% (fallthrough)
branch  8 taken 33%
branch  9 taken 67% (fallthrough)
branch 10 taken 33%
        -: 1635:                     typetok = typetok->next()) {
        2: 1636:                    if (Token::simpleMatch(typetok, "..."))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1637:                        continue;
        2: 1638:                    if (Token::Match(typetok, "%name% <") && (typetok->strAt(2) == ">" || templateParameters(typetok->next())))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
    #####: 1639:                        ++typeindentlevel;
        2: 1640:                    else if (typeindentlevel > 0 && typetok->str() == ">")
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1641:                        --typeindentlevel;
        2: 1642:                    else if (typetok->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1643:                        ++typeindentlevel;
        2: 1644:                    else if (typetok->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1645:                        --typeindentlevel;
        2: 1646:                    dst->insertToken(typetok->str(), typetok->originalName(), true);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        2: 1647:                    Token *previous = dst->previous();
call    0 returned 100%
        2: 1648:                    previous->isTemplateArg(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1649:                    previous->isSigned(typetok->isSigned());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 1650:                    previous->isUnsigned(typetok->isUnsigned());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 1651:                    previous->isLong(typetok->isLong());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 1652:                    if (Token::Match(previous, "{|(|[")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1653:                        brackets1.push(previous);
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 1654:                    } else if (previous->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1655:                        assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1656:                        assert(brackets1.top()->str() == "{");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1657:                        Token::createMutualLinks(brackets1.top(), previous);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1658:                        brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 1659:                    } else if (previous->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1660:                        assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1661:                        assert(brackets1.top()->str() == "(");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1662:                        Token::createMutualLinks(brackets1.top(), previous);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1663:                        brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 1664:                    } else if (previous->str() == "]") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1665:                        assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1666:                        assert(brackets1.top()->str() == "[");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1667:                        Token::createMutualLinks(brackets1.top(), previous);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1668:                        brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1669:                    }
        -: 1670:                }
        -: 1671:            } else {
       19: 1672:                if (isSpecialization && !copy && !scope.empty() && Token::Match(start, (scope + templateDeclarationNameToken->str()).c_str())) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
call   19 never executed
branch 20 taken 0% (fallthrough)
branch 21 taken 100%
branch 22 never executed
branch 23 never executed
call   24 never executed
        -: 1673:                    // skip scope
    #####: 1674:                    while (start->strAt(1) != templateDeclarationNameToken->str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1675:                        start = start->next();
call    0 never executed
       27: 1676:                } else if (start->str() == templateDeclarationNameToken->str() &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 21% (fallthrough)
branch  4 taken 79%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 21% (fallthrough)
branch  8 taken 79%
       12: 1677:                           !(templateDeclaration.isFunction() && templateDeclaration.scope().empty() &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        8: 1678:                             (start->strAt(-1) == "." || Token::simpleMatch(start->tokAt(-2), ". template")))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        4: 1679:                    if (start->strAt(1) != "<" || Token::Match(start, newName.c_str()) || !inAssignment) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
        4: 1680:                        dst->insertToken(newName, "", true);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 1681:                        if (start->strAt(1) == "<")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1682:                            start = start->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1683:                    } else {
    #####: 1684:                        dst->insertToken(start->str(), "", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 1685:                        newInstantiations.emplace_back(dst->previous(), templateDeclaration.scope());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1686:                    }
        -: 1687:                } else {
        -: 1688:                    // check if type is a template
       15: 1689:                    if (start->strAt(1) == "<") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1690:                        // get the instantiated name
    #####: 1691:                        Token * closing = start->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1692:                        if (closing) {
branch  0 never executed
branch  1 never executed
    #####: 1693:                            std::string name;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1694:                            const Token * type = start;
    #####: 1695:                            while (type && type != closing->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1696:                                if (!name.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1697:                                    name += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1698:                                name += type->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1699:                                type = type->next();
call    0 never executed
        -: 1700:                            }
        -: 1701:                            // check if type is instantiated
    #####: 1702:                            for (const auto & inst : mTemplateInstantiations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1703:                                if (Token::simpleMatch(inst.token(), name.c_str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 1704:                                    // use the instantiated name
    #####: 1705:                                    dst->insertToken(name, "", true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1706:                                    start = closing;
    #####: 1707:                                    break;
        -: 1708:                                }
        -: 1709:                            }
        -: 1710:                        }
        -: 1711:                        // just copy the token if it wasn't instantiated
    #####: 1712:                        if (start != closing) {
branch  0 never executed
branch  1 never executed
    #####: 1713:                            dst->insertToken(start->str(), start->originalName(), true);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1714:                            dst->previous()->isSigned(start->isSigned());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1715:                            dst->previous()->isUnsigned(start->isUnsigned());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1716:                            dst->previous()->isLong(start->isLong());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1717:                        }
        -: 1718:                    } else {
       15: 1719:                        dst->insertToken(start->str(), start->originalName(), true);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       15: 1720:                        dst->previous()->isSigned(start->isSigned());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
       15: 1721:                        dst->previous()->isUnsigned(start->isUnsigned());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
       15: 1722:                        dst->previous()->isLong(start->isLong());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 1723:                    }
        -: 1724:                }
        -: 1725:
       19: 1726:                if (!start)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1727:                    continue;
        -: 1728:
       19: 1729:                if (start->link()) {
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
        8: 1730:                    if (Token::Match(start, "[|{|(")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        4: 1731:                        links[start->link()] = dst->previous();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        4: 1732:                    } else if (Token::Match(start, "]|}|)")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4: 1733:                        Token::createMutualLinks(links[start], dst->previous());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        4: 1734:                        links.erase(start);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1735:                    }
        -: 1736:                }
        -: 1737:            }
        -: 1738:
       20: 1739:            start = start->next();
call    0 returned 100%
        -: 1740:        }
        4: 1741:        dst->insertToken(";", "", true);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 1742:
        4: 1743:        if (isVariable || isFunction)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4: 1744:            simplifyTemplateArgs(dstStart, dst);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1745:    }
        -: 1746:
        5: 1747:    if (copy && (isClass || isFunction)) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -: 1748:        // check if this is an explicit instantiation
        4: 1749:        Token * start = templateInstantiation.token();
call    0 returned 100%
       20: 1750:        while (start && !Token::Match(start->previous(), "}|;|extern"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
        8: 1751:            start = start->previous();
call    0 returned 100%
        4: 1752:        if (Token::Match(start, "template !!<")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1753:            if (start->strAt(-1) == "extern")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1754:                start = start->previous();
call    0 never executed
    #####: 1755:            mExplicitInstantiationsToDelete.emplace_back(start, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1756:        }
        -: 1757:    }
        -: 1758:
      153: 1759:    for (Token *tok3 = mTokenList.front(); tok3; tok3 = tok3 ? tok3->next() : nullptr) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
      148: 1760:        if (inTemplateDefinition) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
       18: 1761:            if (!endOfTemplateDefinition) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18: 1762:                if (isVariable) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1763:                    Token *temp = tok3->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1764:                    if (temp) {
branch  0 never executed
branch  1 never executed
    #####: 1765:                        while (temp && temp->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1766:                            if (temp->link() && Token::Match(temp, "{|[|("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1767:                                temp = temp->link();
call    0 never executed
    #####: 1768:                            temp = temp->next();
call    0 never executed
        -: 1769:                        }
    #####: 1770:                        endOfTemplateDefinition = temp;
        -: 1771:                    }
       18: 1772:                } else if (tok3->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1773:                    endOfTemplateDefinition = tok3->link();
call    0 never executed
        -: 1774:            }
       18: 1775:            if (tok3 == endOfTemplateDefinition) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1776:                inTemplateDefinition = false;
    #####: 1777:                startOfTemplateDeclaration = nullptr;
        -: 1778:            }
        -: 1779:        }
        -: 1780:
      148: 1781:        if (tok3->str()=="template") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        5: 1782:            if (tok3->next() && tok3->next()->str()=="<") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
       10: 1783:                std::vector<const Token *> localTypeParametersInDeclaration;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        5: 1784:                getTemplateParametersInDeclaration(tok3->tokAt(2), localTypeParametersInDeclaration);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5: 1785:                if (localTypeParametersInDeclaration.size() != typeParametersInDeclaration.size())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1786:                    inTemplateDefinition = false; // Partial specialization
        -: 1787:                else
        5: 1788:                    inTemplateDefinition = true;
        -: 1789:            } else {
    #####: 1790:                inTemplateDefinition = false; // Only template instantiation
        -: 1791:            }
        5: 1792:            startOfTemplateDeclaration = tok3;
        -: 1793:        }
      148: 1794:        if (Token::Match(tok3, "(|["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
       18: 1795:            tok3 = tok3->link();
call    0 returned 100%
        -: 1796:
        -: 1797:        // Start of template..
      148: 1798:        if (tok3 == templateDeclarationToken) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        5: 1799:            tok3 = tok3->next();
call    0 returned 100%
        5: 1800:            if (tok3->str() == "static")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1801:                tok3 = tok3->next();
call    0 never executed
        -: 1802:        }
        -: 1803:
        -: 1804:        // member function implemented outside class definition
      304: 1805:        else if (inTemplateDefinition &&
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       23: 1806:                 Token::Match(tok3, "%name% <") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      148: 1807:                 templateInstantiation.name() == tok3->str() &&
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 never executed
branch  6 never executed
    #####: 1808:                 instantiateMatch(tok3, typeParametersInDeclaration.size(), ":: ~| %name% (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1809:            // there must be template..
    #####: 1810:            bool istemplate = false;
    #####: 1811:            Token * tok5 = nullptr; // start of function return type
    #####: 1812:            for (Token *prev = tok3; prev && !Token::Match(prev, "[;{}]"); prev = prev->previous()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 1813:                if (prev->str() == "template") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1814:                    istemplate = true;
    #####: 1815:                    tok5 = prev;
    #####: 1816:                    break;
        -: 1817:                }
        -: 1818:            }
    #####: 1819:            if (!istemplate)
branch  0 never executed
branch  1 never executed
    #####: 1820:                continue;
        -: 1821:
    #####: 1822:            const Token *tok4 = tok3->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1823:            while (tok4 && tok4->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1824:                tok4 = tok4->next();
call    0 never executed
    #####: 1825:            if (!Tokenizer::isFunctionHead(tok4, ":{", true))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
    #####: 1826:                continue;
        -: 1827:            // find function return type start
    #####: 1828:            tok5 = tok5->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1829:            if (tok5)
branch  0 never executed
branch  1 never executed
    #####: 1830:                tok5 = tok5->next();
call    0 never executed
        -: 1831:            // copy return type
    #####: 1832:            std::stack<Token *> brackets2; // holds "(" and "{" tokens
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1833:            while (tok5 && tok5 != tok3) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1834:                // replace name if found
    #####: 1835:                if (Token::Match(tok5, "%name% <") && tok5->str() == templateInstantiation.name()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1836:                    if (copy) {
branch  0 never executed
branch  1 never executed
    #####: 1837:                        if (!templateDeclaration.scope().empty() && tok5->strAt(-1) != "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1838:                            addNamespace(templateDeclaration, tok5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1839:                        mTokenList.addtoken(newName, tok5->linenr(), tok5->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 1840:                        tok5 = tok5->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1841:                    } else {
    #####: 1842:                        tok5->str(newName);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1843:                        eraseTokens(tok5, tok5->next()->findClosingBracket()->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 1844:                    }
    #####: 1845:                } else if (copy) {
branch  0 never executed
branch  1 never executed
    #####: 1846:                    bool added = false;
    #####: 1847:                    if (tok5->isName() && !Token::Match(tok5, "class|typename|struct") && !tok5->isStandardType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
        -: 1848:                        // search for this token in the type vector
    #####: 1849:                        unsigned int itype = 0;
    #####: 1850:                        while (itype < typeParametersInDeclaration.size() && typeParametersInDeclaration[itype]->str() != tok5->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1851:                            ++itype;
        -: 1852:
        -: 1853:                        // replace type with given type..
    #####: 1854:                        if (itype < typeParametersInDeclaration.size()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1855:                            unsigned int typeindentlevel = 0;
    #####: 1856:                            std::stack<Token *> brackets1; // holds "(" and "{" tokens
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1857:                            for (const Token *typetok = mTypesUsedInTemplateInstantiation[itype].token();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1858:                                 typetok && (typeindentlevel>0 || !Token::Match(typetok, ",|>"));
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1859:                                 typetok = typetok->next()) {
    #####: 1860:                                if (!Token::simpleMatch(typetok, "...")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1861:                                    if (Token::Match(typetok, "%name% <") && (typetok->strAt(2) == ">" || templateParameters(typetok->next())))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
    #####: 1862:                                        ++typeindentlevel;
    #####: 1863:                                    else if (typeindentlevel > 0 && typetok->str() == ">")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1864:                                        --typeindentlevel;
    #####: 1865:                                    else if (typetok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1866:                                        ++typeindentlevel;
    #####: 1867:                                    else if (typetok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1868:                                        --typeindentlevel;
    #####: 1869:                                    mTokenList.addtoken(typetok, tok5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1870:                                    Token *back = mTokenList.back();
call    0 never executed
    #####: 1871:                                    if (Token::Match(back, "{|(|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1872:                                        brackets1.push(back);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1873:                                    } else if (back->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1874:                                        assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1875:                                        assert(brackets1.top()->str() == "{");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1876:                                        Token::createMutualLinks(brackets1.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1877:                                        brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1878:                                    } else if (back->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1879:                                        assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1880:                                        assert(brackets1.top()->str() == "(");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1881:                                        Token::createMutualLinks(brackets1.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1882:                                        brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1883:                                    } else if (back->str() == "]") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1884:                                        assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1885:                                        assert(brackets1.top()->str() == "[");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1886:                                        Token::createMutualLinks(brackets1.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1887:                                        brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1888:                                    }
    #####: 1889:                                    back->isTemplateArg(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1890:                                    added = true;
    #####: 1891:                                    break;
        -: 1892:                                }
        -: 1893:                            }
        -: 1894:                        }
        -: 1895:                    }
    #####: 1896:                    if (!added) {
branch  0 never executed
branch  1 never executed
    #####: 1897:                        mTokenList.addtoken(tok5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1898:                        Token *back = mTokenList.back();
call    0 never executed
    #####: 1899:                        if (Token::Match(back, "{|(|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1900:                            brackets2.push(back);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1901:                        } else if (back->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1902:                            assert(brackets2.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1903:                            assert(brackets2.top()->str() == "{");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1904:                            Token::createMutualLinks(brackets2.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1905:                            brackets2.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1906:                        } else if (back->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1907:                            assert(brackets2.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1908:                            assert(brackets2.top()->str() == "(");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1909:                            Token::createMutualLinks(brackets2.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1910:                            brackets2.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1911:                        } else if (back->str() == "]") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1912:                            assert(brackets2.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1913:                            assert(brackets2.top()->str() == "[");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1914:                            Token::createMutualLinks(brackets2.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1915:                            brackets2.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1916:                        }
        -: 1917:                    }
        -: 1918:                }
        -: 1919:
    #####: 1920:                tok5 = tok5->next();
call    0 never executed
        -: 1921:            }
    #####: 1922:            if (copy) {
branch  0 never executed
branch  1 never executed
    #####: 1923:                if (!templateDeclaration.scope().empty() && tok3->strAt(-1) != "::")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1924:                    addNamespace(templateDeclaration, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1925:                mTokenList.addtoken(newName, tok3->linenr(), tok3->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1926:            }
        -: 1927:
    #####: 1928:            while (tok3 && tok3->str() != "::")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1929:                tok3 = tok3->next();
call    0 never executed
        -: 1930:
    #####: 1931:            std::list<TokenAndName>::iterator it = std::find_if(mTemplateDeclarations.begin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1932:                                                   mTemplateDeclarations.end(),
call    0 never executed
    #####: 1933:                                                   FindToken(startOfTemplateDeclaration));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 1934:            if (it != mTemplateDeclarations.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1935:                mMemberFunctionsToDelete.push_back(*it);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1936:        }
        -: 1937:
        -: 1938:        // not part of template.. go on to next token
        -: 1939:        else
      143: 1940:            continue;
        -: 1941:
       10: 1942:        std::stack<Token *> brackets; // holds "(", "[" and "{" tokens
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -: 1943:
        -: 1944:        // FIXME use full name matching somehow
       10: 1945:        const std::string lastName = (templateInstantiation.name().find(' ') != std::string::npos) ? templateInstantiation.name().substr(templateInstantiation.name().rfind(' ')+1) : templateInstantiation.name();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 never executed
        -: 1946:
       10: 1947:        std::stack<const Token *> templates;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      187: 1948:        for (; tok3; tok3 = tok3->next()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
       95: 1949:            if (tok3->isName() && !Token::Match(tok3, "class|typename|struct") && !tok3->isStandardType()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 84% (fallthrough)
branch 14 taken 16%
branch 15 taken 33% (fallthrough)
branch 16 taken 67%
        -: 1950:                // search for this token in the type vector
       31: 1951:                unsigned int itype = 0;
       57: 1952:                while (itype < typeParametersInDeclaration.size() && typeParametersInDeclaration[itype]->str() != tok3->str())
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 65% (fallthrough)
branch  8 taken 35%
branch  9 taken 30% (fallthrough)
branch 10 taken 70%
       13: 1953:                    ++itype;
        -: 1954:
        -: 1955:                // replace type with given type..
       31: 1956:                if (itype < typeParametersInDeclaration.size()) {
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
        7: 1957:                    unsigned int typeindentlevel = 0;
       14: 1958:                    std::stack<Token *> brackets1; // holds "(" and "{" tokens
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
       17: 1959:                    for (const Token *typetok = mTypesUsedInTemplateInstantiation[itype].token();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       17: 1960:                         typetok && (typeindentlevel > 0 || !Token::Match(typetok, ",|>"));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 59% (fallthrough)
branch  8 taken 41%
branch  9 taken 59% (fallthrough)
branch 10 taken 41%
        -: 1961:                         typetok = typetok->next()) {
       10: 1962:                        if (Token::simpleMatch(typetok, "..."))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1963:                            continue;
       10: 1964:                        if (Token::Match(typetok, "%name% <") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1965:                            (typetok->strAt(2) == ">" || templateParameters(typetok->next()))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1966:                            brackets1.push(typetok->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1967:                            ++typeindentlevel;
       10: 1968:                        } else if (typeindentlevel > 0 && typetok->str() == ">" && brackets1.top()->str() == "<") {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 1969:                            --typeindentlevel;
    #####: 1970:                            brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
       10: 1971:                        } else if (typetok->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1972:                            ++typeindentlevel;
       10: 1973:                        else if (typetok->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1974:                            --typeindentlevel;
        -: 1975:                        Token *back;
       10: 1976:                        if (copy) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10: 1977:                            mTokenList.addtoken(typetok, tok3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       10: 1978:                            back = mTokenList.back();
call    0 returned 100%
        -: 1979:                        } else
    #####: 1980:                            back = const_cast<Token *>(typetok);
       10: 1981:                        if (Token::Match(back, "{|(|["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1982:                            brackets1.push(back);
call    0 never executed
branch  1 never executed
branch  2 never executed
       10: 1983:                        else if (back->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1984:                            assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1985:                            assert(brackets1.top()->str() == "{");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1986:                            if (copy)
branch  0 never executed
branch  1 never executed
    #####: 1987:                                Token::createMutualLinks(brackets1.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1988:                            brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
       10: 1989:                        } else if (back->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1990:                            assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1991:                            assert(brackets1.top()->str() == "(");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1992:                            if (copy)
branch  0 never executed
branch  1 never executed
    #####: 1993:                                Token::createMutualLinks(brackets1.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1994:                            brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
       10: 1995:                        } else if (back->str() == "]") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1996:                            assert(brackets1.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1997:                            assert(brackets1.top()->str() == "[");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1998:                            if (copy)
branch  0 never executed
branch  1 never executed
    #####: 1999:                                Token::createMutualLinks(brackets1.top(), back);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2000:                            brackets1.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2001:                        }
       10: 2002:                        if (copy)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10: 2003:                            back->isTemplateArg(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2004:                    }
        7: 2005:                    continue;
        -: 2006:                }
        -: 2007:            }
        -: 2008:
        -: 2009:            // replace name..
       88: 2010:            if (tok3->str() == lastName) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        9: 2011:                if (Token::simpleMatch(tok3->next(), "<")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
        1: 2012:                    Token *closingBracket = tok3->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 2013:                    if (closingBracket) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2014:                        // replace multi token name with single token name
        2: 2015:                        if (tok3 == templateDeclarationNameToken ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
    #####: 2016:                            Token::Match(tok3, newName.c_str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        1: 2017:                            if (copy) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2018:                                mTokenList.addtoken(newName, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2019:                                tok3 = closingBracket;
        -: 2020:                            } else {
        1: 2021:                                tok3->str(newName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 2022:                                eraseTokens(tok3, closingBracket->next());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2023:                            }
        1: 2024:                            continue;
    #####: 2025:                        } else if (!templateDeclaration.scope().empty() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2026:                                   !alreadyHasNamespace(templateDeclaration, tok3) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2027:                                   !Token::Match(closingBracket->next(), "(|::")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2028:                            if (copy)
branch  0 never executed
branch  1 never executed
    #####: 2029:                                addNamespace(templateDeclaration, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2030:                        }
        -: 2031:                    }
        -: 2032:                } else {
        -: 2033:                    // don't modify friend
        4: 2034:                    if (Token::Match(tok3->tokAt(-3), "> friend class|struct|union")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2035:                        if (copy)
branch  0 never executed
branch  1 never executed
    #####: 2036:                            mTokenList.addtoken(tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        4: 2037:                    } else if (copy) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 2038:                        // add namespace if necessary
        4: 2039:                        if (!templateDeclaration.scope().empty() &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2040:                            (isClass ? tok3->strAt(1) != "(" : true)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2041:                            addNamespace(templateDeclaration, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2042:                        }
        4: 2043:                        mTokenList.addtoken(newName, tok3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
    #####: 2044:                    } else if (!Token::Match(tok3->next(), ":|{|="))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2045:                        tok3->str(newName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        4: 2046:                    continue;
        -: 2047:                }
        -: 2048:            }
        -: 2049:
        -: 2050:            // copy
       83: 2051:            if (copy)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       56: 2052:                mTokenList.addtoken(tok3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2053:
        -: 2054:            // look for template definitions
       83: 2055:            if (Token::simpleMatch(tok3, "template <")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2056:                Token * tok2 = findTemplateDeclarationEnd(tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2057:                if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 2058:                    templates.push(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
       83: 2059:            } else if (!templates.empty() && templates.top() == tok3)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2060:                templates.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2061:
      166: 2062:            if (Token::Match(tok3, "%type% <") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       83: 2063:                !Token::Match(tok3, "template|static_cast|const_cast|reinterpret_cast|dynamic_cast") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2064:                Token::Match(tok3->next()->findClosingBracket(), ">|>>")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2065:                const Token *closingBracket = tok3->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2066:                if (Token::simpleMatch(closingBracket->next(), "&")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2067:                    int num = 0;
    #####: 2068:                    const Token *par = tok3->next();
call    0 never executed
    #####: 2069:                    while (num < typeParametersInDeclaration.size() && par != closingBracket) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2070:                        const std::string pattern("[<,] " + typeParametersInDeclaration[num]->str() + " [,>]");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 2071:                        if (!Token::Match(par, pattern.c_str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2072:                            break;
    #####: 2073:                        ++num;
    #####: 2074:                        par = par->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2075:                    }
    #####: 2076:                    if (num < typeParametersInDeclaration.size() || par != closingBracket)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2077:                        continue;
        -: 2078:                }
        -: 2079:
    #####: 2080:                std::string scope;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2081:                const Token *prev = tok3;
    #####: 2082:                for (; Token::Match(prev->tokAt(-2), "%name% ::"); prev = prev->tokAt(-2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2083:                    if (scope.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2084:                        scope = prev->strAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2085:                    else
    #####: 2086:                        scope = prev->strAt(-2) + " :: " + scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 2087:                }
        -: 2088:
        -: 2089:                // check for global scope
    #####: 2090:                if (prev->strAt(-1) != "::") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2091:                    // adjust for current scope
    #####: 2092:                    std::string token_scope = tok3->scopeInfo()->name;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 2093:                    std::string::size_type end = token_scope.find_last_of(" :: ");
call    0 never executed
    #####: 2094:                    if (end != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 2095:                        token_scope.resize(end);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2096:                        if (scope.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2097:                            scope = token_scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2098:                        else
    #####: 2099:                            scope = token_scope + " :: " + scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 2100:                    }
        -: 2101:                }
        -: 2102:
        -: 2103:                // don't add instantiations in template definitions
    #####: 2104:                if (templates.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2105:                    if (copy)
branch  0 never executed
branch  1 never executed
    #####: 2106:                        newInstantiations.emplace_back(mTokenList.back(), scope);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2107:                    else if (!inTemplateDefinition)
branch  0 never executed
branch  1 never executed
    #####: 2108:                        newInstantiations.emplace_back(tok3, scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2109:                }
        -: 2110:            }
        -: 2111:
        -: 2112:            // link() newly tokens manually
       83: 2113:            else if (copy) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       56: 2114:                if (tok3->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 88%
        7: 2115:                    brackets.push(mTokenList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       49: 2116:                } else if (tok3->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
        8: 2117:                    brackets.push(mTokenList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       41: 2118:                } else if (tok3->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2119:                    brackets.push(mTokenList.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       41: 2120:                } else if (tok3->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        7: 2121:                    assert(brackets.empty() == false);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        7: 2122:                    assert(brackets.top()->str() == "{");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        7: 2123:                    Token::createMutualLinks(brackets.top(), mTokenList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        7: 2124:                    if (tok3->strAt(1) == ";") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2125:                        const Token * tokSemicolon = tok3->next();
call    0 never executed
    #####: 2126:                        mTokenList.addtoken(tokSemicolon, tokSemicolon->linenr(), tokSemicolon->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2127:                    }
        7: 2128:                    brackets.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7: 2129:                    if (brackets.empty() && !Token::Match(tok3, "} >|,|%cop%")) {
call    0 returned 100%
branch  1 taken 57% (fallthrough)
branch  2 taken 43%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 57% (fallthrough)
branch  9 taken 43%
        4: 2130:                        inTemplateDefinition = false;
        4: 2131:                        break;
        -: 2132:                    }
       34: 2133:                } else if (tok3->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 24% (fallthrough)
branch  3 taken 76%
        8: 2134:                    assert(brackets.empty() == false);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        8: 2135:                    assert(brackets.top()->str() == "(");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
        8: 2136:                    Token::createMutualLinks(brackets.top(), mTokenList.back());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        8: 2137:                    brackets.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       26: 2138:                } else if (tok3->str() == "]") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2139:                    assert(brackets.empty() == false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2140:                    assert(brackets.top()->str() == "[");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 2141:                    Token::createMutualLinks(brackets.top(), mTokenList.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2142:                    brackets.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2143:                }
        -: 2144:            }
        -: 2145:        }
        -: 2146:
        5: 2147:        assert(brackets.empty());
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -: 2148:    }
        -: 2149:
        -: 2150:    // add new instantiations
        5: 2151:    for (const auto & inst : newInstantiations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    #####: 2152:        std::string fullName = inst.scope + (inst.scope.empty() ? "" : " :: ") + inst.token->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2153:        simplifyTemplateArgs(inst.token->tokAt(2), inst.token->next()->findClosingBracket());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2154:        // only add recursive instantiation if its arguments are a constant expression
    #####: 2155:        if (templateDeclaration.fullName() != fullName ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2156:            (inst.token->tokAt(2)->isNumber() || inst.token->tokAt(2)->isStandardType()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2157:            mTemplateInstantiations.emplace_back(inst.token, inst.scope);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2158:    }
        5: 2159:}
        -: 2160:
function _ZL21isLowerThanLogicalAndPK5Token called 0 returned 0% blocks executed 0%
    #####: 2161:static bool isLowerThanLogicalAnd(const Token *lower)
        -: 2162:{
    #####: 2163:    return lower->isAssignmentOp() || Token::Match(lower, "}|;|(|[|]|)|,|?|:|%oror%|return|throw|case");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2164:}
function _ZL13isLowerThanOrPK5Token called 0 returned 0% blocks executed 0%
    #####: 2165:static bool isLowerThanOr(const Token* lower)
        -: 2166:{
    #####: 2167:    return isLowerThanLogicalAnd(lower) || lower->str() == "&&";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2168:}
function _ZL14isLowerThanXorPK5Token called 0 returned 0% blocks executed 0%
    #####: 2169:static bool isLowerThanXor(const Token* lower)
        -: 2170:{
    #####: 2171:    return isLowerThanOr(lower) || lower->str() == "|";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2172:}
function _ZL14isLowerThanAndPK5Token called 0 returned 0% blocks executed 0%
    #####: 2173:static bool isLowerThanAnd(const Token* lower)
        -: 2174:{
    #####: 2175:    return isLowerThanXor(lower) || lower->str() == "^";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2176:}
function _ZL16isLowerThanShiftPK5Token called 0 returned 0% blocks executed 0%
    #####: 2177:static bool isLowerThanShift(const Token* lower)
        -: 2178:{
    #####: 2179:    return isLowerThanAnd(lower) || lower->str() == "&";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2180:}
function _ZL20isLowerThanPlusMinusPK5Token called 0 returned 0% blocks executed 0%
    #####: 2181:static bool isLowerThanPlusMinus(const Token* lower)
        -: 2182:{
    #####: 2183:    return isLowerThanShift(lower) || Token::Match(lower, "%comp%|<<|>>");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2184:}
function _ZL17isLowerThanMulDivPK5Token called 0 returned 0% blocks executed 0%
    #####: 2185:static bool isLowerThanMulDiv(const Token* lower)
        -: 2186:{
    #####: 2187:    return isLowerThanPlusMinus(lower) || Token::Match(lower, "+|-");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2188:}
function _ZL22isLowerEqualThanMulDivPK5Token called 0 returned 0% blocks executed 0%
    #####: 2189:static bool isLowerEqualThanMulDiv(const Token* lower)
        -: 2190:{
    #####: 2191:    return isLowerThanMulDiv(lower) || Token::Match(lower, "[*/%]");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2192:}
        -: 2193:
        -: 2194:
function _ZN18TemplateSimplifier27simplifyNumericCalculationsEP5Tokenb called 3 returned 100% blocks executed 5%
        3: 2195:bool TemplateSimplifier::simplifyNumericCalculations(Token *tok, bool isTemplate)
        -: 2196:{
        3: 2197:    bool ret = false;
        -: 2198:    // (1-2)
        3: 2199:    while (tok->tokAt(3) && tok->isNumber() && tok->tokAt(2)->isNumber()) { // %any% %num% %any% %num% %any%
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 2200:        const Token *before = tok->previous();
call    0 never executed
    #####: 2201:        if (!before)
branch  0 never executed
branch  1 never executed
    #####: 2202:            break;
    #####: 2203:        const Token* op = tok->next();
call    0 never executed
    #####: 2204:        const Token* after = tok->tokAt(3);
call    0 never executed
    #####: 2205:        const std::string &num1 = op->previous()->str();
call    0 never executed
call    1 never executed
    #####: 2206:        const std::string &num2 = op->next()->str();
call    0 never executed
call    1 never executed
    #####: 2207:        if (Token::Match(before, "* %num% /") && (num2 != "0") && num1 == MathLib::multiply(num2, MathLib::divide(num1, num2))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
        -: 2208:            // Division where result is a whole number
    #####: 2209:        } else if (!((op->str() == "*" && (isLowerThanMulDiv(before) || before->str() == "*") && isLowerEqualThanMulDiv(after)) || // associative
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####: 2210:                     (Token::Match(op, "[/%]") && isLowerThanMulDiv(before) && isLowerEqualThanMulDiv(after)) || // NOT associative
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2211:                     (Token::Match(op, "[+-]") && isLowerThanMulDiv(before) && isLowerThanMulDiv(after)) || // Only partially (+) associative, but handled later
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2212:                     (Token::Match(op, ">>|<<") && isLowerThanShift(before) && isLowerThanPlusMinus(after)) || // NOT associative
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2213:                     (op->str() == "&" && isLowerThanShift(before) && isLowerThanShift(after)) || // associative
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2214:                     (op->str() == "^" && isLowerThanAnd(before) && isLowerThanAnd(after)) || // associative
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2215:                     (op->str() == "|" && isLowerThanXor(before) && isLowerThanXor(after)) || // associative
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2216:                     (op->str() == "&&" && isLowerThanOr(before) && isLowerThanOr(after)) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2217:                     (op->str() == "||" && isLowerThanLogicalAnd(before) && isLowerThanLogicalAnd(after))))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2218:            break;
        -: 2219:
        -: 2220:        // Don't simplify "%num% / 0"
    #####: 2221:        if (Token::Match(op, "[/%] 0")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2222:            if (isTemplate) throw InternalError(op, "Instantiation error: Divide by zero in template instantiation.", InternalError::INSTANTIATION);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    #####: 2223:            else return ret;
        -: 2224:        }
        -: 2225:
        -: 2226:        // Integer operations
    #####: 2227:        if (Token::Match(op, ">>|<<|&|^|%or%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2228:            // Don't simplify if operand is negative, shifting with negative
        -: 2229:            // operand is UB. Bitmasking with negative operand is implementation
        -: 2230:            // defined behaviour.
    #####: 2231:            if (MathLib::isNegative(num1) || MathLib::isNegative(num2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2232:                break;
        -: 2233:
    #####: 2234:            const MathLib::value v1(num1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2235:            const MathLib::value v2(num2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2236:
    #####: 2237:            if (!v1.isInt() || !v2.isInt())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2238:                break;
        -: 2239:
    #####: 2240:            switch (op->str()[0]) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2241:            case '<':
    #####: 2242:                tok->str((v1 << v2).str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 2243:                break;
    #####: 2244:            case '>':
    #####: 2245:                tok->str((v1 >> v2).str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 2246:                break;
    #####: 2247:            case '&':
    #####: 2248:                tok->str((v1 & v2).str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 2249:                break;
    #####: 2250:            case '|':
    #####: 2251:                tok->str((v1 | v2).str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 2252:                break;
    #####: 2253:            case '^':
    #####: 2254:                tok->str((v1 ^ v2).str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2255:                break;
        -: 2256:            };
        -: 2257:        }
        -: 2258:
        -: 2259:        // Logical operations
    #####: 2260:        else if (Token::Match(op, "%oror%|&&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2261:            const bool op1 = !MathLib::isNullValue(num1);
call    0 never executed
    #####: 2262:            const bool op2 = !MathLib::isNullValue(num2);
call    0 never executed
    #####: 2263:            const bool result = (op->str() == "||") ? (op1 || op2) : (op1 && op2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2264:            tok->str(result ? "1" : "0");
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2265:        }
        -: 2266:
    #####: 2267:        else if (Token::Match(tok->previous(), "- %num% - %num%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2268:            tok->str(MathLib::add(num1, num2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2269:        else if (Token::Match(tok->previous(), "- %num% + %num%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2270:            tok->str(MathLib::subtract(num1, num2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 2271:        else {
        -: 2272:            try {
    #####: 2273:                tok->str(MathLib::calculate(num1, num2, op->str()[0]));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    =====: 2274:            } catch (InternalError &e) {
call    0 never executed
call    1 never executed
    =====: 2275:                e.token = tok;
    =====: 2276:                throw;
call    0 never executed
        -: 2277:            }
        -: 2278:        }
        -: 2279:
    #####: 2280:        tok->deleteNext(2);
call    0 never executed
        -: 2281:
    #####: 2282:        ret = true;
        -: 2283:    }
        -: 2284:
        3: 2285:    return ret;
        -: 2286:}
        -: 2287:
function _ZL13skipTernaryOpP5TokenS0_ called 0 returned 0% blocks executed 0%
    #####: 2288:static Token *skipTernaryOp(Token *tok, Token *backToken)
        -: 2289:{
    #####: 2290:    unsigned int colonLevel = 1;
    #####: 2291:    while (nullptr != (tok = tok->next())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2292:        if (tok->str() == "?") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2293:            ++colonLevel;
    #####: 2294:        } else if (tok->str() == ":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2295:            --colonLevel;
    #####: 2296:            if (colonLevel == 0) {
branch  0 never executed
branch  1 never executed
    #####: 2297:                tok = tok->next();
call    0 never executed
    #####: 2298:                break;
        -: 2299:            }
        -: 2300:        }
    #####: 2301:        if (tok->link() && tok->str() == "(")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2302:            tok = tok->link();
call    0 never executed
    #####: 2303:        else if (Token::Match(tok->next(), "[{};)]") || tok->next() == backToken)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2304:            break;
        -: 2305:    }
    #####: 2306:    if (colonLevel > 0) // Ticket #5214: Make sure the ':' matches the proper '?'
branch  0 never executed
branch  1 never executed
    #####: 2307:        return nullptr;
    #####: 2308:    return tok;
        -: 2309:}
        -: 2310:
function _ZN18TemplateSimplifier20simplifyTemplateArgsEP5TokenS1_ called 10 returned 100% blocks executed 14%
       10: 2311:void TemplateSimplifier::simplifyTemplateArgs(Token *start, Token *end)
        -: 2312:{
        -: 2313:    // start could be erased so use the token before start if available
       10: 2314:    Token * first = (start && start->previous()) ? start->previous() : mTokenList.front();
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
       10: 2315:    bool again = true;
        -: 2316:
       30: 2317:    while (again) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       10: 2318:        again = false;
        -: 2319:
       38: 2320:        for (Token *tok = first->next(); tok && tok != end; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
       28: 2321:            if (tok->str() == "sizeof") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 2322:                // sizeof('x')
    #####: 2323:                if (Token::Match(tok->next(), "( %char% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2324:                    tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2325:                    tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2326:                    tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2327:                    std::ostringstream sz;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2328:                    sz << 1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2329:                    tok->str(sz.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2330:                    again = true;
        -: 2331:                }
        -: 2332:
        -: 2333:                // sizeof ("text")
    #####: 2334:                else if (Token::Match(tok->next(), "( %str% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2335:                    tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2336:                    tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2337:                    tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2338:                    std::ostringstream ostr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 2339:                    ostr << (Token::getStrLength(tok) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2340:                    tok->str(ostr.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2341:                    again = true;
        -: 2342:                }
        -: 2343:
    #####: 2344:                else if (Token::Match(tok->next(), "( %type% * )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2345:                    tok->str(MathLib::toString(mTokenizer->sizeOfType(tok->tokAt(3))));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2346:                    tok->deleteNext(4);
call    0 never executed
    #####: 2347:                    again = true;
    #####: 2348:                } else if (Token::simpleMatch(tok->next(), "( * )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2349:                    tok->str(MathLib::toString(mTokenizer->sizeOfType(tok->tokAt(2))));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2350:                    tok->deleteNext(3);
call    0 never executed
    #####: 2351:                    again = true;
    #####: 2352:                } else if (Token::Match(tok->next(), "( %type% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2353:                    const unsigned int size = mTokenizer->sizeOfType(tok->tokAt(2));
call    0 never executed
call    1 never executed
    #####: 2354:                    if (size > 0) {
branch  0 never executed
branch  1 never executed
    #####: 2355:                        tok->str(MathLib::toString(size));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2356:                        tok->deleteNext(3);
call    0 never executed
    #####: 2357:                        again = true;
        -: 2358:                    }
    #####: 2359:                } else if (tok->strAt(1) == "(") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2360:                    tok = tok->linkAt(1);
call    0 never executed
        -: 2361:                }
       56: 2362:            } else if (Token::Match(tok, "%num% %comp% %num%") &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       28: 2363:                       MathLib::isInt(tok->str()) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2364:                       MathLib::isInt(tok->strAt(2))) {
call    0 never executed
call    1 never executed
    #####: 2365:                if ((Token::Match(tok->previous(), "(|&&|%oror%|,") || tok == start) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2366:                    (Token::Match(tok->tokAt(3), ")|&&|%oror%|?") || tok->tokAt(3) == end)) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2367:                    const MathLib::bigint op1(MathLib::toLongNumber(tok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2368:                    const std::string &cmp(tok->next()->str());
call    0 never executed
call    1 never executed
    #####: 2369:                    const MathLib::bigint op2(MathLib::toLongNumber(tok->strAt(2)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2370:
    #####: 2371:                    std::string result;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2372:
    #####: 2373:                    if (cmp == "==")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2374:                        result = (op1 == op2) ? "true" : "false";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2375:                    else if (cmp == "!=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2376:                        result = (op1 != op2) ? "true" : "false";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2377:                    else if (cmp == "<=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2378:                        result = (op1 <= op2) ? "true" : "false";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2379:                    else if (cmp == ">=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2380:                        result = (op1 >= op2) ? "true" : "false";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2381:                    else if (cmp == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2382:                        result = (op1 < op2) ? "true" : "false";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2383:                    else
    #####: 2384:                        result = (op1 > op2) ? "true" : "false";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2385:
    #####: 2386:                    tok->str(result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2387:                    tok->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2388:                    again = true;
    #####: 2389:                    tok = tok->previous();
call    0 never executed
        -: 2390:                }
        -: 2391:            }
        -: 2392:        }
        -: 2393:
       10: 2394:        if (simplifyCalculations(first->next(), end))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2395:            again = true;
        -: 2396:
       38: 2397:        for (Token *tok = first->next(); tok && tok != end; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
       28: 2398:            if (tok->str() == "?" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2399:                ((tok->previous()->isNumber() || tok->previous()->isBoolean()) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2400:                 Token::Match(tok->tokAt(-3), "( %bool%|%num% )"))) {
call    0 never executed
call    1 never executed
    #####: 2401:                const int offset = (tok->previous()->str() == ")") ? 2 : 1;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2402:
        -: 2403:                // Find the token ":" then go to the next token
    #####: 2404:                Token *colon = skipTernaryOp(tok, end);
call    0 never executed
    #####: 2405:                if (!colon || colon->previous()->str() != ":" || !colon->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2406:                    continue;
        -: 2407:
        -: 2408:                //handle the GNU extension: "x ? : y" <-> "x ? x : y"
    #####: 2409:                if (colon->previous() == tok->next())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2410:                    tok->insertToken(tok->strAt(-offset));
call    0 never executed
call    1 never executed
        -: 2411:
        -: 2412:                // go back before the condition, if possible
    #####: 2413:                tok = tok->tokAt(-2);
call    0 never executed
    #####: 2414:                if (offset == 2) {
branch  0 never executed
branch  1 never executed
        -: 2415:                    // go further back before the "("
    #####: 2416:                    tok = tok->tokAt(-2);
call    0 never executed
        -: 2417:                    //simplify the parentheses
    #####: 2418:                    tok->deleteNext();
call    0 never executed
    #####: 2419:                    tok->next()->deleteNext();
call    0 never executed
call    1 never executed
        -: 2420:                }
        -: 2421:
    #####: 2422:                if (Token::Match(tok->next(), "false|0")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2423:                    // Use code after colon, remove code before it.
    #####: 2424:                    Token::eraseTokens(tok, colon);
call    0 never executed
        -: 2425:
    #####: 2426:                    tok = tok->next();
call    0 never executed
    #####: 2427:                    again = true;
        -: 2428:                }
        -: 2429:
        -: 2430:                // The condition is true. Delete the operator after the ":"..
        -: 2431:                else {
        -: 2432:                    // delete the condition token and the "?"
    #####: 2433:                    tok->deleteNext(2);
call    0 never executed
        -: 2434:
    #####: 2435:                    unsigned int ternaryOplevel = 0;
    #####: 2436:                    for (const Token *endTok = colon; endTok; endTok = endTok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2437:                        if (Token::Match(endTok, "(|[|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2438:                            endTok = endTok->link();
call    0 never executed
    #####: 2439:                        else if (endTok->str() == "<" && (endTok->strAt(1) == ">" || templateParameters(endTok)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2440:                            endTok = endTok->findClosingBracket();
call    0 never executed
    #####: 2441:                        else if (endTok->str() == "?")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2442:                            ++ternaryOplevel;
    #####: 2443:                        else if (Token::Match(endTok, ")|}|]|;|,|:|>")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2444:                            if (endTok->str() == ":" && ternaryOplevel)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2445:                                --ternaryOplevel;
    #####: 2446:                            else if (endTok->str() == ">" && !end)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2447:                                ;
        -: 2448:                            else {
    #####: 2449:                                Token::eraseTokens(colon->tokAt(-2), endTok);
call    0 never executed
call    1 never executed
    #####: 2450:                                again = true;
    #####: 2451:                                break;
        -: 2452:                            }
        -: 2453:                        }
        -: 2454:                    }
        -: 2455:                }
        -: 2456:            }
        -: 2457:        }
        -: 2458:
       38: 2459:        for (Token *tok = first->next(); tok && tok != end; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
call    5 returned 100%
       28: 2460:            if (Token::Match(tok, "( %num%|%bool% )") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2461:                (tok->previous() && !Token::Match(tok->previous(), "%name%"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2462:                tok->deleteThis();
call    0 never executed
    #####: 2463:                tok->deleteNext();
call    0 never executed
    #####: 2464:                again = true;
        -: 2465:            }
        -: 2466:        }
        -: 2467:    }
       10: 2468:}
        -: 2469:
function _ZL15validTokenStartbPK5TokenS1_i called 12 returned 100% blocks executed 63%
       12: 2470:static bool validTokenStart(bool bounded, const Token *tok, const Token *frontToken, int offset)
        -: 2471:{
       12: 2472:    if (!bounded)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2473:        return true;
        -: 2474:
       12: 2475:    if (frontToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12: 2476:        frontToken = frontToken->previous();
call    0 returned 100%
        -: 2477:
       36: 2478:    while (tok && offset <= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       24: 2479:        if (tok == frontToken)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       12: 2480:            return false;
       12: 2481:        ++offset;
       12: 2482:        tok = tok->previous();
call    0 returned 100%
        -: 2483:    }
        -: 2484:
    #####: 2485:    return tok && offset > 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2486:}
        -: 2487:
function _ZL13validTokenEndbPK5TokenS1_i called 146 returned 100% blocks executed 86%
      146: 2488:static bool validTokenEnd(bool bounded, const Token *tok, const Token *backToken, int offset)
        -: 2489:{
      146: 2490:    if (!bounded)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2491:        return true;
        -: 2492:
      349: 2493:    while (tok && offset >= 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
      457: 2494:        if (tok == backToken)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      108: 2495:            return false;
      349: 2496:        --offset;
      349: 2497:        tok = tok->next();
call    0 returned 100%
        -: 2498:    }
        -: 2499:
       38: 2500:    return tok && offset < 0;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 2501:}
        -: 2502:
        -: 2503:// TODO: This is not the correct class for simplifyCalculations(), so it
        -: 2504:// should be moved away.
function _ZN18TemplateSimplifier20simplifyCalculationsEP5TokenS1_b called 10 returned 100% blocks executed 18%
       10: 2505:bool TemplateSimplifier::simplifyCalculations(Token* frontToken, Token *backToken, bool isTemplate)
        -: 2506:{
       10: 2507:    bool ret = false;
       10: 2508:    const bool bounded = frontToken || backToken;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
       10: 2509:    if (!frontToken) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2510:        frontToken = mTokenList.front();
call    0 never executed
        -: 2511:    }
       38: 2512:    for (Token *tok = frontToken; tok && tok != backToken; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 74% (fallthrough)
branch  3 taken 26%
call    4 returned 100%
        -: 2513:        // Remove parentheses around variable..
        -: 2514:        // keep parentheses here: dynamic_cast<Fred *>(p);
        -: 2515:        // keep parentheses here: A operator * (int);
        -: 2516:        // keep parentheses here: int ( * ( * f ) ( ... ) ) (int) ;
        -: 2517:        // keep parentheses here: int ( * * ( * compilerHookVector ) (void) ) ( ) ;
        -: 2518:        // keep parentheses here: operator new [] (size_t);
        -: 2519:        // keep parentheses here: Functor()(a ... )
        -: 2520:        // keep parentheses here: ) ( var ) ;
       61: 2521:        if (validTokenEnd(bounded, tok, backToken, 4) &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       10: 2522:            (Token::Match(tok->next(), "( %name% ) ;|)|,|]") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        5: 2523:             (Token::Match(tok->next(), "( %name% ) %cop%") &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
    #####: 2524:              (tok->tokAt(2)->varId()>0 ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2525:               !Token::Match(tok->tokAt(4), "[*&+-~]")))) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2526:            !tok->isName() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2527:            tok->str() != ">" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       28: 2528:            tok->str() != ")" &&
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2529:            tok->str() != "]") {
call    0 never executed
call    1 never executed
    #####: 2530:            tok->deleteNext();
call    0 never executed
    #####: 2531:            tok = tok->next();
call    0 never executed
    #####: 2532:            tok->deleteNext();
call    0 never executed
    #####: 2533:            ret = true;
        -: 2534:        }
        -: 2535:
       37: 2536:        if (validTokenEnd(bounded, tok, backToken, 3) &&
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        9: 2537:            Token::Match(tok->previous(), "(|&&|%oror% %char% %comp% %num% &&|%oror%|)")) {
call    0 returned 100%
call    1 returned 100%
    #####: 2538:            tok->str(MathLib::toString(MathLib::toLongNumber(tok->str())));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2539:        }
        -: 2540:
       30: 2541:        if (validTokenEnd(bounded, tok, backToken, 5) &&
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        2: 2542:            Token::Match(tok, "decltype ( %type% { } )")) {
call    0 returned 100%
    #####: 2543:            tok->deleteThis();
call    0 never executed
    #####: 2544:            tok->deleteThis();
call    0 never executed
    #####: 2545:            tok->deleteNext();
call    0 never executed
    #####: 2546:            tok->deleteNext();
call    0 never executed
    #####: 2547:            tok->deleteNext();
call    0 never executed
    #####: 2548:            ret = true;
        -: 2549:        }
        -: 2550:
       37: 2551:        if (validTokenEnd(bounded, tok, backToken, 3) &&
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        9: 2552:            Token::Match(tok, "decltype ( %bool%|%num% )")) {
call    0 returned 100%
    #####: 2553:            tok->deleteThis();
call    0 never executed
    #####: 2554:            tok->deleteThis();
call    0 never executed
    #####: 2555:            if (tok->isBoolean())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2556:                tok->str("bool");
call    0 never executed
    #####: 2557:            else if (MathLib::isFloat(tok->str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2558:                // MathLib::getSuffix doesn't work for floating point numbers
    #####: 2559:                char suffix = tok->str().back();
call    0 never executed
call    1 never executed
    #####: 2560:                if (suffix == 'f' || suffix == 'F')
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2561:                    tok->str("float");
call    0 never executed
    #####: 2562:                else if (suffix == 'l' || suffix == 'L') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2563:                    tok->str("double");
call    0 never executed
    #####: 2564:                    tok->isLong(true);
call    0 never executed
        -: 2565:                } else
    #####: 2566:                    tok->str("double");
call    0 never executed
    #####: 2567:            } else if (MathLib::isInt(tok->str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2568:                std::string suffix = MathLib::getSuffix(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2569:                if (suffix.find("LL") != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2570:                    tok->str("long");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2571:                    tok->isLong(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2572:                } else if (suffix.find('L') != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2573:                    tok->str("long");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2574:                else
    #####: 2575:                    tok->str("int");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2576:                tok->isUnsigned(suffix.find('U') != std::string::npos);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2577:            }
    #####: 2578:            tok->deleteNext();
call    0 never executed
    #####: 2579:            ret = true;
        -: 2580:        }
        -: 2581:
       41: 2582:        if (validTokenEnd(bounded, tok, backToken, 2) &&
call    0 returned 100%
branch  1 taken 46% (fallthrough)
branch  2 taken 54%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       13: 2583:            Token::Match(tok, "char|short|int|long { }")) {
call    0 returned 100%
    #####: 2584:            tok->str("0"); // FIXME add type suffix
call    0 never executed
    #####: 2585:            tok->isSigned(false);
call    0 never executed
    #####: 2586:            tok->isUnsigned(false);
call    0 never executed
    #####: 2587:            tok->isLong(false);
call    0 never executed
    #####: 2588:            tok->deleteNext();
call    0 never executed
    #####: 2589:            tok->deleteNext();
call    0 never executed
    #####: 2590:            ret = true;
        -: 2591:        }
        -: 2592:
       28: 2593:        if (tok && tok->isNumber()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
branch  5 taken 11% (fallthrough)
branch  6 taken 89%
        3: 2594:            if (validTokenEnd(bounded, tok, backToken, 2) &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2595:                simplifyNumericCalculations(tok, isTemplate)) {
call    0 never executed
    #####: 2596:                ret = true;
    #####: 2597:                Token *prev = tok->tokAt(-2);
call    0 never executed
    #####: 2598:                while (validTokenStart(bounded, tok, frontToken, -2) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2599:                       prev && simplifyNumericCalculations(prev, isTemplate)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2600:                    tok = prev;
    #####: 2601:                    prev = prev->tokAt(-2);
call    0 never executed
        -: 2602:                }
        -: 2603:            }
        -: 2604:
        -: 2605:            // Remove redundant conditions (0&&x) (1||x)
        6: 2606:            if (validTokenStart(bounded, tok, frontToken, -1) &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        3: 2607:                validTokenEnd(bounded, tok, backToken, 1) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2608:                (Token::Match(tok->previous(), "[(=,] 0 &&") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2609:                 Token::Match(tok->previous(), "[(=,] 1 %oror%"))) {
call    0 never executed
call    1 never executed
    #####: 2610:                unsigned int par = 0;
    #####: 2611:                const Token *tok2 = tok;
    #####: 2612:                const bool andAnd = (tok->next()->str() == "&&");
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2613:                for (; tok2; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2614:                    if (tok2->str() == "(" || tok2->str() == "[")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2615:                        ++par;
    #####: 2616:                    else if (tok2->str() == ")" || tok2->str() == "]") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2617:                        if (par == 0)
branch  0 never executed
branch  1 never executed
    #####: 2618:                            break;
    #####: 2619:                        --par;
    #####: 2620:                    } else if (par == 0 && isLowerThanLogicalAnd(tok2) && (andAnd || tok2->str() != "||"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2621:                        break;
        -: 2622:                }
    #####: 2623:                if (tok2) {
branch  0 never executed
branch  1 never executed
    #####: 2624:                    eraseTokens(tok, tok2);
call    0 never executed
    #####: 2625:                    ret = true;
        -: 2626:                }
    #####: 2627:                continue;
        -: 2628:            }
        -: 2629:
        3: 2630:            if (tok->str() == "0" && validTokenStart(bounded, tok, frontToken, -1)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2631:                if (validTokenEnd(bounded, tok, backToken, 1) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2632:                    ((Token::Match(tok->previous(), "[+-] 0 %cop%|;") && isLowerThanMulDiv(tok->next())) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2633:                     (Token::Match(tok->previous(), "%or% 0 %cop%|;") && isLowerThanXor(tok->next())))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2634:                    tok = tok->previous();
call    0 never executed
    #####: 2635:                    if (Token::Match(tok->tokAt(-4), "[;{}] %name% = %name% [+-|] 0 ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2636:                        tok->strAt(-3) == tok->previous()->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2637:                        tok = tok->tokAt(-4);
call    0 never executed
    #####: 2638:                        tok->deleteNext(5);
call    0 never executed
        -: 2639:                    } else {
    #####: 2640:                        tok = tok->previous();
call    0 never executed
    #####: 2641:                        tok->deleteNext(2);
call    0 never executed
        -: 2642:                    }
    #####: 2643:                    ret = true;
    #####: 2644:                } else if (validTokenEnd(bounded, tok, backToken, 1) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2645:                           (Token::Match(tok->previous(), "[=([,] 0 [+|]") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2646:                            Token::Match(tok->previous(), "return|case 0 [+|]"))) {
call    0 never executed
call    1 never executed
    #####: 2647:                    tok = tok->previous();
call    0 never executed
    #####: 2648:                    tok->deleteNext(2);
call    0 never executed
    #####: 2649:                    ret = true;
    #####: 2650:                } else if ((((Token::Match(tok->previous(), "[=[(,] 0 * %name%|%num% ,|]|)|;|=|%cop%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2651:                              Token::Match(tok->previous(), "return|case 0 *|&& %name%|%num% ,|:|;|=|%cop%")) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2652:                             validTokenEnd(bounded, tok, backToken, 3)) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2653:                            (((Token::Match(tok->previous(), "[=[(,] 0 * (") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2654:                               Token::Match(tok->previous(), "return|case 0 *|&& (")) &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2655:                              validTokenEnd(bounded, tok, backToken, 2))))) {
call    0 never executed
    #####: 2656:                    tok->deleteNext();
call    0 never executed
    #####: 2657:                    if (tok->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2658:                        eraseTokens(tok, tok->next()->link());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2659:                    tok->deleteNext();
call    0 never executed
    #####: 2660:                    ret = true;
    #####: 2661:                } else if (validTokenEnd(bounded, tok, backToken, 4) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2662:                           (Token::Match(tok->previous(), "[=[(,] 0 && *|& %any% ,|]|)|;|=|%cop%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2663:                            Token::Match(tok->previous(), "return|case 0 && *|& %any% ,|:|;|=|%cop%"))) {
call    0 never executed
call    1 never executed
    #####: 2664:                    tok->deleteNext();
call    0 never executed
    #####: 2665:                    tok->deleteNext();
call    0 never executed
    #####: 2666:                    if (tok->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2667:                        eraseTokens(tok, tok->next()->link());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2668:                    tok->deleteNext();
call    0 never executed
    #####: 2669:                    ret = true;
        -: 2670:                }
        -: 2671:            }
        -: 2672:
        3: 2673:            if (tok->str() == "1" && validTokenStart(bounded, tok, frontToken, -1)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2674:                if (validTokenEnd(bounded, tok, backToken, 3) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2675:                    (Token::Match(tok->previous(), "[=[(,] 1 %oror% %any% ,|]|)|;|=|%cop%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2676:                     Token::Match(tok->previous(), "return|case 1 %oror% %any% ,|:|;|=|%cop%"))) {
call    0 never executed
call    1 never executed
    #####: 2677:                    tok->deleteNext();
call    0 never executed
    #####: 2678:                    if (tok->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2679:                        eraseTokens(tok, tok->next()->link());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2680:                    tok->deleteNext();
call    0 never executed
    #####: 2681:                    ret = true;
    #####: 2682:                } else if (validTokenEnd(bounded, tok, backToken, 4) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2683:                           (Token::Match(tok->previous(), "[=[(,] 1 %oror% *|& %any% ,|]|)|;|=|%cop%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2684:                            Token::Match(tok->previous(), "return|case 1 %oror% *|& %any% ,|:|;|=|%cop%"))) {
call    0 never executed
call    1 never executed
    #####: 2685:                    tok->deleteNext();
call    0 never executed
    #####: 2686:                    tok->deleteNext();
call    0 never executed
    #####: 2687:                    if (tok->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2688:                        eraseTokens(tok, tok->next()->link());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2689:                    tok->deleteNext();
call    0 never executed
    #####: 2690:                    ret = true;
        -: 2691:                }
        -: 2692:            }
        -: 2693:
        6: 2694:            if ((Token::Match(tok->tokAt(-2), "%any% * 1") &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6: 2695:                 validTokenStart(bounded, tok, frontToken, -2)) ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        3: 2696:                (Token::Match(tok->previous(), "%any% 1 *") &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
    #####: 2697:                 validTokenStart(bounded, tok, frontToken, -1))) {
call    0 never executed
    #####: 2698:                tok = tok->previous();
call    0 never executed
    #####: 2699:                if (tok->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2700:                    tok = tok->previous();
call    0 never executed
    #####: 2701:                tok->deleteNext(2);
call    0 never executed
    #####: 2702:                ret = true;
        -: 2703:            }
        -: 2704:
        -: 2705:            // Remove parentheses around number..
        6: 2706:            if (validTokenStart(bounded, tok, frontToken, -2) &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        3: 2707:                Token::Match(tok->tokAt(-2), "%op%|< ( %num% )") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2708:                tok->strAt(-2) != ">") {
call    0 never executed
call    1 never executed
    #####: 2709:                tok = tok->previous();
call    0 never executed
    #####: 2710:                tok->deleteThis();
call    0 never executed
    #####: 2711:                tok->deleteNext();
call    0 never executed
    #####: 2712:                ret = true;
        -: 2713:            }
        -: 2714:
        6: 2715:            if (validTokenStart(bounded, tok, frontToken, -1) &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        3: 2716:                validTokenEnd(bounded, tok, backToken, 1) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2717:                (Token::Match(tok->previous(), "( 0 [|+]") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2718:                 Token::Match(tok->previous(), "[|+-] 0 )"))) {
call    0 never executed
call    1 never executed
    #####: 2719:                tok = tok->previous();
call    0 never executed
    #####: 2720:                if (Token::Match(tok, "[|+-]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2721:                    tok = tok->previous();
call    0 never executed
    #####: 2722:                tok->deleteNext(2);
call    0 never executed
    #####: 2723:                ret = true;
        -: 2724:            }
        -: 2725:
        6: 2726:            if (validTokenEnd(bounded, tok, backToken, 2) &&
call    0 returned 100%
branch  1 never executed
branch  2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2727:                Token::Match(tok, "%num% %comp% %num%") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
        3: 2728:                MathLib::isInt(tok->str()) &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2729:                MathLib::isInt(tok->strAt(2))) {
call    0 never executed
call    1 never executed
    #####: 2730:                if (validTokenStart(bounded, tok, frontToken, -1) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2731:                    Token::Match(tok->previous(), "(|&&|%oror%") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2732:                    Token::Match(tok->tokAt(3), ")|&&|%oror%|?")) {
call    0 never executed
call    1 never executed
    #####: 2733:                    const MathLib::bigint op1(MathLib::toLongNumber(tok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2734:                    const std::string &cmp(tok->next()->str());
call    0 never executed
call    1 never executed
    #####: 2735:                    const MathLib::bigint op2(MathLib::toLongNumber(tok->strAt(2)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2736:
    #####: 2737:                    std::string result;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2738:
    #####: 2739:                    if (cmp == "==")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2740:                        result = (op1 == op2) ? "1" : "0";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2741:                    else if (cmp == "!=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2742:                        result = (op1 != op2) ? "1" : "0";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2743:                    else if (cmp == "<=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2744:                        result = (op1 <= op2) ? "1" : "0";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2745:                    else if (cmp == ">=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2746:                        result = (op1 >= op2) ? "1" : "0";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2747:                    else if (cmp == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2748:                        result = (op1 < op2) ? "1" : "0";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2749:                    else
    #####: 2750:                        result = (op1 > op2) ? "1" : "0";
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2751:
    #####: 2752:                    tok->str(result);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2753:                    tok->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2754:                    ret = true;
    #####: 2755:                    tok = tok->previous();
call    0 never executed
        -: 2756:                }
        -: 2757:            }
        -: 2758:        }
        -: 2759:    }
       10: 2760:    return ret;
        -: 2761:}
        -: 2762:
function _ZN18TemplateSimplifier34getTemplateParametersInDeclarationEPK5TokenRNSt7__debug6vectorIS2_SaIS2_EEE called 19 returned 100% blocks executed 65%
       19: 2763:const Token * TemplateSimplifier::getTemplateParametersInDeclaration(
        -: 2764:    const Token * tok,
        -: 2765:    std::vector<const Token *> & typeParametersInDeclaration)
        -: 2766:{
       19: 2767:    assert(tok->strAt(-1) == "<");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
        -: 2768:
       19: 2769:    typeParametersInDeclaration.clear();
call    0 returned 100%
       19: 2770:    const Token *end = tok->previous()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
       79: 2771:    for (; tok && tok!= end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 61% (fallthrough)
branch  3 taken 39%
call    4 returned 100%
       30: 2772:        if (Token::simpleMatch(tok, "template <")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2773:            const Token *closing = tok->next()->findClosingBracket();
call    0 never executed
call    1 never executed
    #####: 2774:            if (closing)
branch  0 never executed
branch  1 never executed
    #####: 2775:                tok = closing->next();
call    0 never executed
       30: 2776:        } else if (tok->link() && Token::Match(tok, "{|(|["))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2777:            tok = tok->link();
call    0 never executed
       30: 2778:        else if (Token::Match(tok, "%name% ,|>|="))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       15: 2779:            typeParametersInDeclaration.push_back(tok);
call    0 returned 100%
        -: 2780:    }
       19: 2781:    return tok;
        -: 2782:}
        -: 2783:
function _ZN18TemplateSimplifier19matchSpecializationEPK5TokenS2_RKNSt7__debug4listIS2_SaIS2_EEE called 5 returned 100% blocks executed 71%
        5: 2784:bool TemplateSimplifier::matchSpecialization(
        -: 2785:    const Token *templateDeclarationNameToken,
        -: 2786:    const Token *templateInstantiationNameToken,
        -: 2787:    const std::list<const Token *> & specializations)
        -: 2788:{
        -: 2789:    // Is there a matching specialization?
        9: 2790:    for (std::list<const Token *>::const_iterator it = specializations.begin(); it != specializations.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 56% (fallthrough)
branch  5 taken 44%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 80%
branch  9 taken 20%
call   10 never executed
        5: 2791:        if (!Token::Match(*it, "%name% <"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 80% (fallthrough)
branch  5 taken 20%
        8: 2792:            continue;
        1: 2793:        const Token *startToken = (*it);
call    0 returned 100%
        9: 2794:        while (startToken->previous() && !Token::Match(startToken->previous(), "[;{}]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 80% (fallthrough)
branch  8 taken 20%
branch  9 taken 80% (fallthrough)
branch 10 taken 20%
        4: 2795:            startToken = startToken->previous();
call    0 returned 100%
        1: 2796:        if (!Token::simpleMatch(startToken, "template <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2797:            continue;
        1: 2798:        std::vector<const Token *> templateParameters;
call    0 returned 100%
call    1 never executed
        1: 2799:        getTemplateParametersInDeclaration(startToken->tokAt(2), templateParameters);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 2800:
        1: 2801:        const Token *instToken = templateInstantiationNameToken->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 2802:        const Token *declToken = (*it)->tokAt(2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 2803:        const Token * const endToken = (*it)->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        1: 2804:        if (!endToken)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2805:            continue;
        1: 2806:        while (declToken != endToken) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 2807:            if (declToken->str() != instToken->str()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2808:                int nr = 0;
    #####: 2809:                while (nr < templateParameters.size() && templateParameters[nr]->str() != declToken->str())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2810:                    ++nr;
        -: 2811:
    #####: 2812:                if (nr == templateParameters.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2813:                    break;
        -: 2814:            }
        1: 2815:            declToken = declToken->next();
call    0 returned 100%
        1: 2816:            instToken = instToken->next();
call    0 returned 100%
        -: 2817:        }
        -: 2818:
        1: 2819:        if (declToken && instToken && declToken == endToken && instToken->str() == ">") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        -: 2820:            // specialization matches.
        1: 2821:            return templateDeclarationNameToken == *it;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 100%
        -: 2822:        }
        -: 2823:    }
        -: 2824:
        -: 2825:    // No specialization matches. Return true if the declaration is not a specialization.
        8: 2826:    return Token::Match(templateDeclarationNameToken, "%name% !!<") &&
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        8: 2827:           (templateDeclarationNameToken->str().find('<') == std::string::npos);
call    0 returned 100%
call    1 returned 100%
        -: 2828:}
        -: 2829:
function _ZN18TemplateSimplifier10getNewNameEP5TokenRNSt7__debug4listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEE called 5 returned 100% blocks executed 71%
        5: 2830:std::string TemplateSimplifier::getNewName(
        -: 2831:    Token *tok2,
        -: 2832:    std::list<std::string> &typeStringsUsedInTemplateInstantiation)
        -: 2833:{
        5: 2834:    std::string typeForNewName;
call    0 returned 100%
        5: 2835:    unsigned int indentlevel = 0;
        5: 2836:    const Token * endToken = tok2->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       11: 2837:    for (Token *tok3 = tok2->tokAt(2); tok3 != endToken && (indentlevel > 0 || tok3->str() != ">"); tok3 = tok3->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 55% (fallthrough)
branch  4 taken 45%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 55% (fallthrough)
branch 12 taken 45%
call   13 returned 100%
        -: 2838:        // #2721 - unhandled [ => bail out
        6: 2839:        if (tok3->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2840:            typeForNewName.clear();
call    0 never executed
    #####: 2841:            break;
        -: 2842:        }
        6: 2843:        if (!tok3->next()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2844:            typeForNewName.clear();
call    0 never executed
    #####: 2845:            break;
        -: 2846:        }
        6: 2847:        if (Token::Match(tok3->tokAt(-2), "<|,|:: %name% <") && (tok3->strAt(1) == ">" || templateParameters(tok3)))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
    #####: 2848:            ++indentlevel;
        6: 2849:        else if (indentlevel > 0 && Token::Match(tok3, "> [,>]"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 2850:            --indentlevel;
        6: 2851:        if (indentlevel == 0 && Token::Match(tok3->previous(), "[<,]")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 83% (fallthrough)
branch  7 taken 17%
branch  8 taken 83% (fallthrough)
branch  9 taken 17%
        5: 2852:            mTypesUsedInTemplateInstantiation.emplace_back(tok3, "");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2853:        }
        6: 2854:        if (tok3->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2855:            ++indentlevel;
        6: 2856:        else if (tok3->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2857:            --indentlevel;
        6: 2858:        const bool constconst = tok3->str() == "const" && tok3->strAt(1) == "const";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        6: 2859:        if (!constconst) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6: 2860:            typeStringsUsedInTemplateInstantiation.push_back(tok3->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2861:        }
        -: 2862:        // add additional type information
        6: 2863:        if (!constconst && !Token::Match(tok3, "class|struct|enum")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        6: 2864:            if (tok3->isUnsigned())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2865:                typeForNewName += "unsigned";
call    0 never executed
branch  1 never executed
branch  2 never executed
        6: 2866:            else if (tok3->isSigned())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2867:                typeForNewName += "signed";
call    0 never executed
branch  1 never executed
branch  2 never executed
        6: 2868:            if (tok3->isLong())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2869:                typeForNewName += "long";
call    0 never executed
branch  1 never executed
branch  2 never executed
        6: 2870:            if (!typeForNewName.empty())
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        1: 2871:                typeForNewName += ' ';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 2872:            typeForNewName += tok3->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2873:        }
        -: 2874:    }
        -: 2875:
        5: 2876:    return typeForNewName;
call    0 never executed
        -: 2877:}
        -: 2878:
function _ZN18TemplateSimplifier30simplifyTemplateInstantiationsERKNS_12TokenAndNameERKNSt7__debug4listIPK5TokenSaIS7_EEElRNS3_3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessISI_ESaISI_EEE called 11 returned 100% blocks executed 50%
       11: 2879:bool TemplateSimplifier::simplifyTemplateInstantiations(
        -: 2880:    const TokenAndName &templateDeclaration,
        -: 2881:    const std::list<const Token *> &specializations,
        -: 2882:    const std::time_t maxtime,
        -: 2883:    std::set<std::string> &expandedtemplates)
        -: 2884:{
        -: 2885:    // this variable is not used at the moment. The intention was to
        -: 2886:    // allow continuous instantiations until all templates has been expanded
        -: 2887:    //bool done = false;
        -: 2888:
        -: 2889:    // Contains tokens such as "T"
       22: 2890:    std::vector<const Token *> typeParametersInDeclaration;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       11: 2891:    getTemplateParametersInDeclaration(templateDeclaration.token()->tokAt(2), typeParametersInDeclaration);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
       11: 2892:    const bool printDebug = mSettings->debugwarnings;
       11: 2893:    const bool specialized = templateDeclaration.isSpecialization();
call    0 returned 100%
       11: 2894:    const bool isfunc = templateDeclaration.isFunction();
call    0 returned 100%
       11: 2895:    const bool isVar = templateDeclaration.isVariable();
call    0 returned 100%
        -: 2896:
        -: 2897:    // locate template usage..
       11: 2898:    std::string::size_type numberOfTemplateInstantiations = mTemplateInstantiations.size();
call    0 returned 100%
       11: 2899:    unsigned int recursiveCount = 0;
        -: 2900:
       11: 2901:    bool instantiated = false;
        -: 2902:
       16: 2903:    for (const TokenAndName &instantiation : mTemplateInstantiations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 31% (fallthrough)
branch  4 taken 69%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        5: 2904:        if (numberOfTemplateInstantiations != mTemplateInstantiations.size()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2905:            numberOfTemplateInstantiations = mTemplateInstantiations.size();
call    0 never executed
    #####: 2906:            ++recursiveCount;
    #####: 2907:            if (recursiveCount > 100) {
branch  0 never executed
branch  1 never executed
        -: 2908:                // bail out..
    #####: 2909:                break;
        -: 2910:            }
        -: 2911:        }
        -: 2912:
        -: 2913:        // already simplified
        5: 2914:        if (!Token::Match(instantiation.token(), "%name% <"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1: 2915:            continue;
        -: 2916:
        5: 2917:        if (instantiation.fullName() != templateDeclaration.fullName()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
        -: 2918:            // FIXME: fallback to not matching scopes until type deduction works
        -: 2919:
        -: 2920:            // names must match
        1: 2921:            if (instantiation.name() != templateDeclaration.name())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 2922:                continue;
        -: 2923:
        -: 2924:            // scopes must match when present
    #####: 2925:            if (!instantiation.scope().empty() && !templateDeclaration.scope().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2926:                continue;
        -: 2927:        }
        -: 2928:
        -: 2929:        // A global function can't be called through a pointer.
        8: 2930:        if (templateDeclaration.isFunction() && templateDeclaration.scope().empty() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
        8: 2931:            (instantiation.token()->strAt(-1) == "." ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        4: 2932:             Token::simpleMatch(instantiation.token()->tokAt(-2), ". template")))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
    #####: 2933:            continue;
        -: 2934:
        4: 2935:        if (!matchSpecialization(templateDeclaration.nameToken(), instantiation.token(), specializations))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2936:            continue;
        -: 2937:
        4: 2938:        Token * const tok2 = instantiation.token();
call    0 returned 100%
        4: 2939:        if (mErrorLogger && !mTokenList.getFiles().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        4: 2940:            mErrorLogger->reportProgress(mTokenList.getFiles()[0], "TemplateSimplifier::simplifyTemplateInstantiations()", tok2->progressValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 2941:#ifdef MAXTIME
        -: 2942:        if (std::time(0) > maxtime)
        -: 2943:            return false;
        -: 2944:#else
        -: 2945:        (void)maxtime;
        -: 2946:#endif
        4: 2947:        assert(mTokenList.validateToken(tok2)); // that assertion fails on examples from #6021
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -: 2948:
        4: 2949:        const Token *startToken = tok2;
        8: 2950:        while (Token::Match(startToken->tokAt(-2), "%name% :: %name%") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        4: 2951:               Token::Match(startToken->tokAt(-2), "> :: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
    #####: 2952:            if (startToken->strAt(-2) == ">") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2953:                const Token * tok3 = startToken->tokAt(-2)->findOpeningBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2954:                if (tok3)
branch  0 never executed
branch  1 never executed
    #####: 2955:                    startToken = tok3->previous();
call    0 never executed
        -: 2956:                else
    #####: 2957:                    break;
        -: 2958:            } else
    #####: 2959:                startToken = startToken->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2960:        }
        -: 2961:
        8: 2962:        if (Token::Match(startToken->previous(), ";|{|}|=|const") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        8: 2963:            (!specialized && !instantiateMatch(tok2, typeParametersInDeclaration.size(), isfunc ? "(" : isVar ? ";|%op%|(" : "*|&|::| %name%")))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 never executed
branch  3 never executed
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2964:            continue;
        -: 2965:
        -: 2966:        // New type..
        4: 2967:        mTypesUsedInTemplateInstantiation.clear();
call    0 returned 100%
        8: 2968:        std::list<std::string> typeStringsUsedInTemplateInstantiation;
call    0 returned 100%
call    1 never executed
        8: 2969:        std::string typeForNewName = getNewName(tok2, typeStringsUsedInTemplateInstantiation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 0%
call    7 never executed
        -: 2970:
        8: 2971:        if ((typeForNewName.empty() && !templateDeclaration.isVariadic()) ||
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        8: 2972:            (!typeParametersInDeclaration.empty() && typeParametersInDeclaration.size() != mTypesUsedInTemplateInstantiation.size())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2973:            if (printDebug && mErrorLogger) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2974:                std::list<const Token *> callstack(1, tok2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 2975:                mErrorLogger->reportErr(ErrorLogger::ErrorMessage(callstack, &mTokenList, Severity::debug, "debug",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 2976:                                        "Failed to instantiate template \"" + instantiation.name() + "\". The checking continues anyway.", false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2977:            }
    #####: 2978:            if (typeForNewName.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2979:                continue;
    #####: 2980:            break;
        -: 2981:        }
        -: 2982:
        -: 2983:        // New classname/funcname..
        8: 2984:        const std::string newName(templateDeclaration.name() + " < " + typeForNewName + " >");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100%
branch 15 taken 0%
branch 16 taken 0%
call   17 never executed
call   18 never executed
call   19 never executed
        8: 2985:        const std::string newFullName(templateDeclaration.scope() + (templateDeclaration.scope().empty() ? "" : " :: ") + newName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 never executed
        -: 2986:
        4: 2987:        if (expandedtemplates.insert(newFullName).second) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        4: 2988:            expandTemplate(templateDeclaration, instantiation, typeParametersInDeclaration, newName, !specialized && !isVar);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        4: 2989:            instantiated = true;
        4: 2990:            mChanged = true;
        -: 2991:        }
        -: 2992:
        -: 2993:        // Replace all these template usages..
        4: 2994:        replaceTemplateUsage(instantiation, typeStringsUsedInTemplateInstantiation, newName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2995:    }
        -: 2996:
        -: 2997:    // process uninstantiated templates
        -: 2998:    // TODO: remove the specialized check and handle all uninstantiated templates someday.
       11: 2999:    if (!instantiated && specialized) {
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
        2: 3000:        Token * tok2 = const_cast<Token *>(templateDeclaration.nameToken());
call    0 returned 100%
        2: 3001:        if (mErrorLogger && !mTokenList.getFiles().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        2: 3002:            mErrorLogger->reportProgress(mTokenList.getFiles()[0], "TemplateSimplifier::simplifyTemplateInstantiations()", tok2->progressValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 3003:#ifdef MAXTIME
        -: 3004:        if (std::time(0) > maxtime)
        -: 3005:            return false;
        -: 3006:#else
        -: 3007:        (void)maxtime;
        -: 3008:#endif
        2: 3009:        assert(mTokenList.validateToken(tok2)); // that assertion fails on examples from #6021
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -: 3010:
        2: 3011:        Token *startToken = tok2;
        4: 3012:        while (Token::Match(startToken->tokAt(-2), "%name% :: %name%") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        2: 3013:               Token::Match(startToken->tokAt(-2), "> :: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
    #####: 3014:            if (startToken->strAt(-2) == ">") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3015:                const Token * tok3 = startToken->tokAt(-2)->findOpeningBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3016:                if (tok3)
branch  0 never executed
branch  1 never executed
    #####: 3017:                    startToken = tok3->previous();
call    0 never executed
        -: 3018:                else
    #####: 3019:                    break;
        -: 3020:            } else
    #####: 3021:                startToken = startToken->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3022:        }
        -: 3023:
        2: 3024:        if (Token::Match(startToken->previous(), ";|{|}|=|const") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3025:            (!specialized && !instantiateMatch(tok2, typeParametersInDeclaration.size(), isfunc ? "(" : isVar ? ";|%op%|(" : "*|&|::| %name%")))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        1: 3026:            return false;
        -: 3027:
        -: 3028:        // already simplified
        2: 3029:        if (!Token::Match(tok2, "%name% <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        1: 3030:            return false;
        -: 3031:
        1: 3032:        if (!matchSpecialization(templateDeclaration.nameToken(), tok2, specializations))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 3033:            return false;
        -: 3034:
        -: 3035:        // New type..
        1: 3036:        mTypesUsedInTemplateInstantiation.clear();
call    0 returned 100%
        2: 3037:        std::list<std::string> typeStringsUsedInTemplateInstantiation;
call    0 returned 100%
call    1 never executed
        2: 3038:        std::string typeForNewName = getNewName(tok2, typeStringsUsedInTemplateInstantiation);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
        -: 3039:
        1: 3040:        if (typeForNewName.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3041:            if (printDebug && mErrorLogger) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3042:                std::list<const Token *> callstack(1, tok2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 3043:                mErrorLogger->reportErr(ErrorLogger::ErrorMessage(callstack, &mTokenList, Severity::debug, "debug",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 3044:                                        "Failed to instantiate template \"" + templateDeclaration.name() + "\". The checking continues anyway.", false));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 3045:            }
    #####: 3046:            return false;
        -: 3047:        }
        -: 3048:
        -: 3049:        // New classname/funcname..
        2: 3050:        const std::string newName(templateDeclaration.name() + " < " + typeForNewName + " >");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100%
branch 15 taken 0%
call   16 never executed
call   17 never executed
call   18 never executed
        2: 3051:        const std::string newFullName(templateDeclaration.scope() + (templateDeclaration.scope().empty() ? "" : " :: ") + newName);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
call   12 returned 100%
call   13 never executed
        -: 3052:
        1: 3053:        if (expandedtemplates.insert(newFullName).second) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1: 3054:            expandTemplate(templateDeclaration, templateDeclaration, typeParametersInDeclaration, newName, !specialized && !isVar);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        1: 3055:            instantiated = true;
        1: 3056:            mChanged = true;
        -: 3057:        }
        -: 3058:
        -: 3059:        // Replace all these template usages..
        1: 3060:        replaceTemplateUsage(templateDeclaration, typeStringsUsedInTemplateInstantiation, newName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3061:    }
        -: 3062:
        -: 3063:    // Template has been instantiated .. then remove the template declaration
       10: 3064:    return instantiated;
        -: 3065:}
        -: 3066:
function _ZL23matchTemplateParametersPK5TokenRKNSt7__debug4listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEE called 4 returned 100% blocks executed 92%
        4: 3067:static bool matchTemplateParameters(const Token *nameTok, const std::list<std::string> &strings)
        -: 3068:{
        8: 3069:    std::list<std::string>::const_iterator it = strings.begin();
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4: 3070:    const Token *tok = nameTok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14: 3071:    while (tok && it != strings.end() && *it == tok->str()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 56% (fallthrough)
branch  5 taken 44%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
call   13 returned 100%
branch 14 taken 56% (fallthrough)
branch 15 taken 44%
        5: 3072:        tok = tok->next();
call    0 returned 100%
        5: 3073:        ++it;
call    0 returned 100%
        -: 3074:    }
        8: 3075:    return it == strings.end() && tok && tok->str() == ">";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
        -: 3076:}
        -: 3077:
function _ZN18TemplateSimplifier20replaceTemplateUsageERKNS_12TokenAndNameERKNSt7__debug4listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISA_EEERKSA_ called 5 returned 100% blocks executed 76%
        5: 3078:void TemplateSimplifier::replaceTemplateUsage(
        -: 3079:    const TokenAndName &instantiation,
        -: 3080:    const std::list<std::string> &typeStringsUsedInTemplateInstantiation,
        -: 3081:    const std::string &newName)
        -: 3082:{
       10: 3083:    std::list< std::pair<Token *, Token *> > removeTokens;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      279: 3084:    for (Token *nameTok = mTokenList.front(); nameTok; nameTok = nameTok->next()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
      284: 3085:        if (!Token::Match(nameTok, "%name% <") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 4% (fallthrough)
branch  4 taken 96%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 98% (fallthrough)
branch  8 taken 2%
       10: 3086:            Token::Match(nameTok, "template|const_cast|dynamic_cast|reinterpret_cast|static_cast"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      269: 3087:            continue;
        -: 3088:
        5: 3089:        std::set<TemplateSimplifier::TokenAndName*> & pointers = nameTok->templateSimplifierPointers();
call    0 returned 100%
        -: 3090:
        -: 3091:        // check if instantiation matches token instantiation from pointer
        5: 3092:        if (pointers.size()) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
        -: 3093:            // check full name
        4: 3094:            if (instantiation.fullName() != (*pointers.begin())->fullName()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 3095:                // FIXME:  fallback to just matching name
    #####: 3096:                if (nameTok->str() != instantiation.name())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3097:                    continue;
        -: 3098:            }
        -: 3099:        }
        -: 3100:        // no pointer available look at tokens directly
        -: 3101:        else {
        -: 3102:            // FIXME:  fallback to just matching name
        1: 3103:            if (nameTok->str() != instantiation.name())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 3104:                continue;
        -: 3105:        }
        -: 3106:
        4: 3107:        if (!matchTemplateParameters(nameTok, typeStringsUsedInTemplateInstantiation))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3108:            continue;
        -: 3109:
        -: 3110:        // match parameters
        4: 3111:        Token * tok2 = nameTok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4: 3112:        const Token * endToken = nameTok->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4: 3113:        unsigned int typeCountInInstantiation = tok2->str() == ">" ? 0U : 1U;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        4: 3114:        const Token *typetok = (!mTypesUsedInTemplateInstantiation.empty()) ? mTypesUsedInTemplateInstantiation[0].token() : nullptr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
        4: 3115:        unsigned int indentlevel2 = 0;  // indentlevel for tokgt
       14: 3116:        while (tok2 != endToken && (indentlevel2 > 0 || tok2->str() != ">")) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 56% (fallthrough)
branch  9 taken 44%
        5: 3117:            if (tok2->str() == "<" && (tok2->strAt(1) == ">" || templateParameters(tok2)))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 3118:                ++indentlevel2;
        5: 3119:            else if (tok2->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3120:                ++indentlevel2;
        5: 3121:            else if (tok2->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3122:                --indentlevel2;
        5: 3123:            else if (indentlevel2 > 0 && Token::Match(tok2, "> [,>]"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3124:                --indentlevel2;
        5: 3125:            else if (indentlevel2 == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5: 3126:                if (tok2->str() != ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       10: 3127:                    if (!typetok ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       10: 3128:                        tok2->isUnsigned() != typetok->isUnsigned() ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       15: 3129:                        tok2->isSigned() != typetok->isSigned() ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        5: 3130:                        tok2->isLong() != typetok->isLong()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
    #####: 3131:                        break;
        -: 3132:                    }
        -: 3133:
        5: 3134:                    typetok = typetok->next();
call    0 returned 100%
        -: 3135:                } else {
    #####: 3136:                    if (typeCountInInstantiation < mTypesUsedInTemplateInstantiation.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3137:                        typetok = mTypesUsedInTemplateInstantiation[typeCountInInstantiation++].token();
call    0 never executed
call    1 never executed
        -: 3138:                    else
    #####: 3139:                        typetok = nullptr;
        -: 3140:                }
        -: 3141:            }
        5: 3142:            tok2 = tok2->next();
call    0 returned 100%
        -: 3143:        }
        -: 3144:
        4: 3145:        if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3146:            break;
        -: 3147:
        -: 3148:        // matching template usage => replace tokens..
        -: 3149:        // Foo < int >  =>  Foo<int>
        4: 3150:        if (tok2->str() == ">" && typeCountInInstantiation == mTypesUsedInTemplateInstantiation.size()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        4: 3151:            const Token * const nameTok1 = nameTok;
        4: 3152:            nameTok->str(newName);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3153:
       13: 3154:            for (Token *tok = nameTok1->next(); tok != tok2; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 69% (fallthrough)
branch  2 taken 31%
call    3 returned 100%
        9: 3155:                if (tok->isName() && !tok->templateSimplifierPointers().empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 11% (fallthrough)
branch 10 taken 89%
        2: 3156:                    std::list<TokenAndName>::iterator ti;
call    0 returned 100%
call    1 returned 100%
        2: 3157:                    for (ti = mTemplateInstantiations.begin(); ti != mTemplateInstantiations.end();) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        1: 3158:                        if (ti->token() == tok) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3159:                            mTemplateInstantiations.erase(ti++);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3160:                            break;
        -: 3161:                        } else {
        1: 3162:                            ++ti;
call    0 returned 100%
        -: 3163:                        }
        -: 3164:                    }
        -: 3165:                }
        -: 3166:            }
        -: 3167:            // Fix crash in #9007
        4: 3168:            if (Token::simpleMatch(nameTok->previous(), ">"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 3169:                mTemplateNamePos.erase(nameTok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        4: 3170:            removeTokens.emplace_back(nameTok, tok2->next());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3171:        }
        -: 3172:
        4: 3173:        nameTok = tok2;
        -: 3174:    }
       13: 3175:    while (!removeTokens.empty()) {
call    0 returned 100%
branch  1 taken 44% (fallthrough)
branch  2 taken 56%
        4: 3176:        eraseTokens(removeTokens.back().first, removeTokens.back().second);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        4: 3177:        removeTokens.pop_back();
call    0 returned 100%
        -: 3178:    }
        5: 3179:}
        -: 3180:
function _ZL9specMatchRKN18TemplateSimplifier12TokenAndNameES2_ called 2 returned 100% blocks executed 57%
        2: 3181:static bool specMatch(
        -: 3182:    const TemplateSimplifier::TokenAndName &spec,
        -: 3183:    const TemplateSimplifier::TokenAndName &decl)
        -: 3184:{
        -: 3185:    // make sure decl is really a declaration
        2: 3186:    if (decl.isPartialSpecialization() || decl.isSpecialization() || decl.isAlias() || decl.isFriend())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
        2: 3187:        return false;
        -: 3188:
    #####: 3189:    return spec.isSameFamily(decl);
call    0 never executed
        -: 3190:}
        -: 3191:
function _ZN18TemplateSimplifier18getSpecializationsEv called 12 returned 100% blocks executed 46%
       12: 3192:void TemplateSimplifier::getSpecializations()
        -: 3193:{
        -: 3194:    // try to locate a matching declaration for each user defined specialization
       23: 3195:    for (auto & spec : mTemplateDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       11: 3196:        if (spec.isSpecialization()) {
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
        2: 3197:            bool found = false;
        4: 3198:            for (auto & decl : mTemplateDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        2: 3199:                if (!specMatch(spec, decl))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 3200:                    continue;
        -: 3201:
        -: 3202:                // make sure the scopes and names match
    #####: 3203:                if (spec.fullName() == decl.fullName()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3204:                    // @todo make sure function parameters also match
    #####: 3205:                    mTemplateSpecializationMap[spec.token()] = decl.token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 3206:                    found = true;
        -: 3207:                }
        -: 3208:            }
        -: 3209:
        2: 3210:            if (!found) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 3211:                for (auto & decl : mTemplateForwardDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    #####: 3212:                    if (!specMatch(spec, decl))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3213:                        continue;
        -: 3214:
        -: 3215:                    // make sure the scopes and names match
    #####: 3216:                    if (spec.fullName() == decl.fullName()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3217:                        // @todo make sure function parameters also match
    #####: 3218:                        mTemplateSpecializationMap[spec.token()] = decl.token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 3219:                    }
        -: 3220:                }
        -: 3221:            }
        -: 3222:        }
        -: 3223:    }
       12: 3224:}
        -: 3225:
function _ZN18TemplateSimplifier25getPartialSpecializationsEv called 12 returned 100% blocks executed 17%
       12: 3226:void TemplateSimplifier::getPartialSpecializations()
        -: 3227:{
        -: 3228:    // try to locate a matching declaration for each user defined partial specialization
       23: 3229:    for (auto & spec : mTemplateDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       11: 3230:        if (spec.isPartialSpecialization()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3231:            bool found = false;
    #####: 3232:            for (auto & decl : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3233:                if (!specMatch(spec, decl))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3234:                    continue;
        -: 3235:
        -: 3236:                // make sure the scopes and names match
    #####: 3237:                if (spec.fullName() == decl.fullName()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3238:                    // @todo make sure function parameters also match
    #####: 3239:                    mTemplatePartialSpecializationMap[spec.token()] = decl.token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 3240:                    found = true;
        -: 3241:                }
        -: 3242:            }
        -: 3243:
    #####: 3244:            if (!found) {
branch  0 never executed
branch  1 never executed
    #####: 3245:                for (auto & decl : mTemplateForwardDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3246:                    if (!specMatch(spec, decl))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3247:                        continue;
        -: 3248:
        -: 3249:                    // make sure the scopes and names match
    #####: 3250:                    if (spec.fullName() == decl.fullName()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3251:                        // @todo make sure function parameters also match
    #####: 3252:                        mTemplatePartialSpecializationMap[spec.token()] = decl.token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 3253:                    }
        -: 3254:                }
        -: 3255:            }
        -: 3256:        }
        -: 3257:    }
       12: 3258:}
        -: 3259:
function _ZN18TemplateSimplifier39fixForwardDeclaredDefaultArgumentValuesEv called 12 returned 100% blocks executed 16%
       12: 3260:void TemplateSimplifier::fixForwardDeclaredDefaultArgumentValues()
        -: 3261:{
        -: 3262:    // try to locate a matching declaration for each forward declaration
       14: 3263:    for (const auto & forwardDecl : mTemplateForwardDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 14% (fallthrough)
branch  4 taken 86%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 3264:        std::vector<const Token *> params1;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 3265:
        2: 3266:        getTemplateParametersInDeclaration(forwardDecl.token()->tokAt(2), params1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 3267:
        2: 3268:        for (auto & decl : mTemplateDeclarations) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 3269:            // skip partializations, type aliases and friends
    #####: 3270:            if (decl.isPartialSpecialization() || decl.isAlias() || decl.isFriend())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3271:                continue;
        -: 3272:
    #####: 3273:            std::vector<const Token *> params2;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3274:
    #####: 3275:            getTemplateParametersInDeclaration(decl.token()->tokAt(2), params2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 3276:
        -: 3277:            // make sure the number of arguments match
    #####: 3278:            if (params1.size() == params2.size()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3279:                // make sure the scopes and names match
    #####: 3280:                if (forwardDecl.fullName() == decl.fullName()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3281:                    // save forward declaration for lookup later
    #####: 3282:                    if ((decl.nameToken()->strAt(1) == "(" && forwardDecl.nameToken()->strAt(1) == "(") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 3283:                        (decl.nameToken()->strAt(1) == "{" && forwardDecl.nameToken()->strAt(1) == ";")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3284:                        mTemplateForwardDeclarationsMap[decl.token()] = forwardDecl.token();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 3285:                    }
        -: 3286:
    #####: 3287:                    for (size_t k = 0; k < params1.size(); k++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3288:                        // copy default value to declaration if not present
    #####: 3289:                        if (params1[k]->strAt(1) == "=" && params2[k]->strAt(1) != "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 3290:                            int level = 0;
    #####: 3291:                            const Token *end = params1[k]->next();
call    0 never executed
call    1 never executed
    #####: 3292:                            while (end && !(level == 0 && Token::Match(end, ",|>"))) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3293:                                if (Token::Match(end, "{|(|<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3294:                                    level++;
    #####: 3295:                                else if (Token::Match(end, "}|)|>"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3296:                                    level--;
    #####: 3297:                                end = end->next();
call    0 never executed
        -: 3298:                            }
    #####: 3299:                            if (end)
branch  0 never executed
branch  1 never executed
    #####: 3300:                                TokenList::copyTokens(const_cast<Token *>(params2[k]), params1[k]->next(), end->previous());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3301:                            break;
        -: 3302:                        }
        -: 3303:                    }
        -: 3304:
        -: 3305:                    // update parameter end pointer
    #####: 3306:                    decl.paramEnd(decl.token()->next()->findClosingBracket());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -: 3307:                }
        -: 3308:            }
        -: 3309:        }
        -: 3310:    }
       12: 3311:}
        -: 3312:
function _ZNK18TemplateSimplifier8printOutERKNS_12TokenAndNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3313:void TemplateSimplifier::printOut(const TokenAndName &tokenAndName, const std::string &indent) const
        -: 3314:{
    #####: 3315:    std::cout << indent << "token: ";
call    0 never executed
call    1 never executed
    #####: 3316:    if (tokenAndName.token())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3317:        std::cout << "\"" << tokenAndName.token()->str() << "\" " << mTokenList.fileLine(tokenAndName.token());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 3318:    else
    #####: 3319:        std::cout << "nullptr";
call    0 never executed
    #####: 3320:    std::cout << std::endl;
call    0 never executed
    #####: 3321:    std::cout << indent << "scope: \"" << tokenAndName.scope() << "\"" << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3322:    std::cout << indent << "name: \"" << tokenAndName.name() << "\"" << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3323:    std::cout << indent << "fullName: \"" << tokenAndName.fullName() << "\"" << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####: 3324:    std::cout << indent << "nameToken: ";
call    0 never executed
call    1 never executed
    #####: 3325:    if (tokenAndName.nameToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3326:        std::cout << "\"" << tokenAndName.nameToken()->str() << "\" " << mTokenList.fileLine(tokenAndName.nameToken());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 3327:    else
    #####: 3328:        std::cout << "nullptr";
call    0 never executed
    #####: 3329:    std::cout << std::endl;
call    0 never executed
    #####: 3330:    std::cout << indent << "paramEnd: ";
call    0 never executed
call    1 never executed
    #####: 3331:    if (tokenAndName.paramEnd())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3332:        std::cout << "\"" << tokenAndName.paramEnd()->str() << "\" " << mTokenList.fileLine(tokenAndName.paramEnd());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 3333:    else
    #####: 3334:        std::cout << "nullptr";
call    0 never executed
    #####: 3335:    std::cout << std::endl;
call    0 never executed
    #####: 3336:    std::cout << indent << "flags: ";
call    0 never executed
call    1 never executed
    #####: 3337:    if (tokenAndName.isClass())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3338:        std::cout << " isClass";
call    0 never executed
    #####: 3339:    if (tokenAndName.isFunction())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3340:        std::cout << " isFunction";
call    0 never executed
    #####: 3341:    if (tokenAndName.isVariable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3342:        std::cout << " isVariable";
call    0 never executed
    #####: 3343:    if (tokenAndName.isAlias())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3344:        std::cout << " isAlias";
call    0 never executed
    #####: 3345:    if (tokenAndName.isSpecialization())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3346:        std::cout << " isSpecialization";
call    0 never executed
    #####: 3347:    if (tokenAndName.isPartialSpecialization())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3348:        std::cout << " isPartialSpecialization";
call    0 never executed
    #####: 3349:    if (tokenAndName.isForwardDeclaration())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3350:        std::cout << " isForwardDeclaration";
call    0 never executed
    #####: 3351:    if (tokenAndName.isVariadic())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3352:        std::cout << " isVariadic";
call    0 never executed
    #####: 3353:    if (tokenAndName.isFriend())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3354:        std::cout << " isFriend";
call    0 never executed
    #####: 3355:    std::cout << std::endl;
call    0 never executed
    #####: 3356:    if (tokenAndName.token() && !tokenAndName.paramEnd() && tokenAndName.token()->strAt(1) == "<") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 3357:        const Token *end = tokenAndName.token()->next()->findClosingBracket();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3358:        if (end) {
branch  0 never executed
branch  1 never executed
    #####: 3359:            const Token *start = tokenAndName.token()->next();
call    0 never executed
call    1 never executed
    #####: 3360:            std::cout << indent << "type: ";
call    0 never executed
call    1 never executed
    #####: 3361:            while (start && start != end) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3362:                std::cout << start->str();
call    0 never executed
call    1 never executed
    #####: 3363:                start = start->next();
call    0 never executed
        -: 3364:            }
    #####: 3365:            std::cout << end->str() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3366:        }
    #####: 3367:    } else if (tokenAndName.isAlias() && tokenAndName.paramEnd()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3368:        if (tokenAndName.aliasStartToken()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3369:            std::cout << indent << "aliasStartToken: \"" << tokenAndName.aliasStartToken()->str() << "\" "
call    0 never executed
call    1 never executed
    #####: 3370:                      << mTokenList.fileLine(tokenAndName.aliasStartToken()) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 3371:        }
    #####: 3372:        if (tokenAndName.aliasEndToken()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3373:            std::cout << indent << "aliasEndToken: \"" << tokenAndName.aliasEndToken()->str() << "\" "
call    0 never executed
call    1 never executed
    #####: 3374:                      << mTokenList.fileLine(tokenAndName.aliasEndToken()) << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
        -: 3375:        }
        -: 3376:    }
    #####: 3377:}
        -: 3378:
function _ZNK18TemplateSimplifier8printOutERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3379:void TemplateSimplifier::printOut(const std::string & text) const
        -: 3380:{
    #####: 3381:    std::cout << std::endl;
call    0 never executed
    #####: 3382:    std::cout << text << std::endl;
call    0 never executed
call    1 never executed
    #####: 3383:    std::cout << std::endl;
call    0 never executed
    #####: 3384:    std::cout << "mTemplateDeclarations: " << mTemplateDeclarations.size() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3385:    int count = 0;
    #####: 3386:    for (const auto & decl : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3387:        std::cout << "mTemplateDeclarations[" << count++ << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3388:        printOut(decl);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 3389:    }
    #####: 3390:    std::cout << "mTemplateForwardDeclarations: " << mTemplateForwardDeclarations.size() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3391:    count = 0;
    #####: 3392:    for (const auto & decl : mTemplateForwardDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3393:        std::cout << "mTemplateForwardDeclarations[" << count++ << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3394:        printOut(decl);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 3395:    }
    #####: 3396:    std::cout << "mTemplateForwardDeclarationsMap: " << mTemplateForwardDeclarationsMap.size() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3397:    unsigned int mapIndex = 0;
    #####: 3398:    for (const auto & mapItem : mTemplateForwardDeclarationsMap) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3399:        unsigned int declIndex = 0;
    #####: 3400:        for (const auto & decl : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3401:            if (mapItem.first == decl.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3402:                unsigned int forwardIndex = 0;
    #####: 3403:                for (const auto & forwardDecl : mTemplateForwardDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3404:                    if (mapItem.second == forwardDecl.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3405:                        std::cout << "mTemplateForwardDeclarationsMap[" << mapIndex << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3406:                        std::cout << "    mTemplateDeclarations[" << declIndex
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3407:                                  << "] => mTemplateForwardDeclarations[" << forwardIndex << "]" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3408:                        break;
        -: 3409:                    }
    #####: 3410:                    forwardIndex++;
        -: 3411:                }
    #####: 3412:                break;
        -: 3413:            }
    #####: 3414:            declIndex++;
        -: 3415:        }
    #####: 3416:        mapIndex++;
        -: 3417:    }
    #####: 3418:    std::cout << "mTemplateSpecializationMap: " << mTemplateSpecializationMap.size() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3419:    for (const auto & mapItem : mTemplateSpecializationMap) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3420:        unsigned int decl1Index = 0;
    #####: 3421:        for (const auto & decl1 : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3422:            if (decl1.isSpecialization() && mapItem.first == decl1.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3423:                bool found = false;
    #####: 3424:                unsigned int decl2Index = 0;
    #####: 3425:                for (const auto & decl2 : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3426:                    if (mapItem.second == decl2.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3427:                        std::cout << "mTemplateSpecializationMap[" << mapIndex << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3428:                        std::cout << "    mTemplateDeclarations[" << decl1Index
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3429:                                  << "] => mTemplateDeclarations[" << decl2Index << "]" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3430:                        found = true;
    #####: 3431:                        break;
        -: 3432:                    }
    #####: 3433:                    decl2Index++;
        -: 3434:                }
    #####: 3435:                if (!found) {
branch  0 never executed
branch  1 never executed
    #####: 3436:                    decl2Index = 0;
    #####: 3437:                    for (const auto & decl2 : mTemplateForwardDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3438:                        if (mapItem.second == decl2.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3439:                            std::cout << "mTemplateSpecializationMap[" << mapIndex << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3440:                            std::cout << "    mTemplateDeclarations[" << decl1Index
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3441:                                      << "] => mTemplateForwardDeclarations[" << decl2Index << "]" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3442:                            break;
        -: 3443:                        }
    #####: 3444:                        decl2Index++;
        -: 3445:                    }
        -: 3446:                }
    #####: 3447:                break;
        -: 3448:            }
    #####: 3449:            decl1Index++;
        -: 3450:        }
    #####: 3451:        mapIndex++;
        -: 3452:    }
    #####: 3453:    std::cout << "mTemplatePartialSpecializationMap: " << mTemplatePartialSpecializationMap.size() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3454:    for (const auto & mapItem : mTemplatePartialSpecializationMap) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 3455:        unsigned int decl1Index = 0;
    #####: 3456:        for (const auto & decl1 : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3457:            if (mapItem.first == decl1.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3458:                bool found = false;
    #####: 3459:                unsigned int decl2Index = 0;
    #####: 3460:                for (const auto & decl2 : mTemplateDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3461:                    if (mapItem.second == decl2.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3462:                        std::cout << "mTemplatePartialSpecializationMap[" << mapIndex << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3463:                        std::cout << "    mTemplateDeclarations[" << decl1Index
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3464:                                  << "] => mTemplateDeclarations[" << decl2Index << "]" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3465:                        found = true;
    #####: 3466:                        break;
        -: 3467:                    }
    #####: 3468:                    decl2Index++;
        -: 3469:                }
    #####: 3470:                if (!found) {
branch  0 never executed
branch  1 never executed
    #####: 3471:                    decl2Index = 0;
    #####: 3472:                    for (const auto & decl2 : mTemplateForwardDeclarations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3473:                        if (mapItem.second == decl2.token()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3474:                            std::cout << "mTemplatePartialSpecializationMap[" << mapIndex << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3475:                            std::cout << "    mTemplateDeclarations[" << decl1Index
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3476:                                      << "] => mTemplateForwardDeclarations[" << decl2Index << "]" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3477:                            break;
        -: 3478:                        }
    #####: 3479:                        decl2Index++;
        -: 3480:                    }
        -: 3481:                }
    #####: 3482:                break;
        -: 3483:            }
    #####: 3484:            decl1Index++;
        -: 3485:        }
    #####: 3486:        mapIndex++;
        -: 3487:    }
    #####: 3488:    std::cout << "mTemplateInstantiations: " << mTemplateInstantiations.size() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 3489:    count = 0;
    #####: 3490:    for (const auto & decl : mTemplateInstantiations) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3491:        std::cout << "mTemplateInstantiations[" << count++ << "]:" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 3492:        printOut(decl);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 3493:    }
    #####: 3494:}
        -: 3495:
function _ZN18TemplateSimplifier17simplifyTemplatesElRb called 934 returned 100% blocks executed 48%
      934: 3496:void TemplateSimplifier::simplifyTemplates(
        -: 3497:    const std::time_t maxtime,
        -: 3498:    bool &codeWithTemplates)
        -: 3499:{
        -: 3500:    // convert "sizeof ..." to "sizeof..."
    29453: 3501:    for (Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28519: 3502:        if (Token::simpleMatch(tok, "sizeof ...")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3503:            tok->str("sizeof...");
call    0 never executed
    #####: 3504:            tok->deleteNext();
call    0 never executed
        -: 3505:        }
        -: 3506:    }
        -: 3507:
        -: 3508:    // Remove "typename" unless used in template arguments or using type alias..
    29405: 3509:    for (Token *tok = mTokenList.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28471: 3510:        if (Token::Match(tok, "typename %name%") && !Token::Match(tok->tokAt(-3), "using %name% ="))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3511:            tok->deleteThis();
call    0 never executed
        -: 3512:
    28471: 3513:        if (Token::simpleMatch(tok, "template <")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       13: 3514:            tok = tok->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
       13: 3515:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3516:                break;
        -: 3517:        }
        -: 3518:    }
        -: 3519:
      934: 3520:    mTokenizer->calculateScopes();
call    0 returned 100%
        -: 3521:
      934: 3522:    unsigned int passCount = 0;
      934: 3523:    const unsigned int passCountMax = 10;
      958: 3524:    for (; passCount < passCountMax; ++passCount) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      946: 3525:        if (passCount) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 3526:            // it may take more than one pass to simplify type aliases
       12: 3527:            bool usingChanged = false;
       12: 3528:            while (mTokenizer->simplifyUsing())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3529:                usingChanged = true;
        -: 3530:
       12: 3531:            if (!usingChanged && !mChanged)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
       14: 3532:                break;
        -: 3533:
        5: 3534:            mChanged = usingChanged;
        5: 3535:            mTemplateDeclarations.clear();
call    0 returned 100%
        5: 3536:            mTemplateForwardDeclarations.clear();
call    0 returned 100%
        5: 3537:            mTemplateForwardDeclarationsMap.clear();
call    0 returned 100%
        5: 3538:            mTemplateSpecializationMap.clear();
call    0 returned 100%
        5: 3539:            mTemplatePartialSpecializationMap.clear();
call    0 returned 100%
        5: 3540:            mTemplateInstantiations.clear();
call    0 returned 100%
        5: 3541:            mInstantiatedTemplates.clear();
call    0 returned 100%
        5: 3542:            mExplicitInstantiationsToDelete.clear();
call    0 returned 100%
        5: 3543:            mTemplateNamePos.clear();
call    0 returned 100%
        -: 3544:        }
        -: 3545:
      939: 3546:        bool hasTemplates = getTemplateDeclarations();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3547:
      939: 3548:        if (passCount == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      934: 3549:            codeWithTemplates = hasTemplates;
        -: 3550:
        -: 3551:        // Make sure there is something to simplify.
      939: 3552:        if (mTemplateDeclarations.empty() && mTemplateForwardDeclarations.empty())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
      927: 3553:            return;
        -: 3554:
       12: 3555:        if (passCount != 0 && mSettings->debugtemplate && mSettings->debugnormal) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3556:            std::string title("Template Simplifier pass " + std::to_string(passCount + 1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 3557:            mTokenList.front()->printOut(title.c_str(), mTokenList.getFiles());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3558:        }
        -: 3559:
        -: 3560:        // Copy default argument values from forward declaration to declaration
       12: 3561:        fixForwardDeclaredDefaultArgumentValues();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3562:
        -: 3563:        // Locate user defined specializations.
       12: 3564:        getSpecializations();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3565:
        -: 3566:        // Locate user defined partial specializations.
       12: 3567:        getPartialSpecializations();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3568:
        -: 3569:        // Locate possible instantiations of templates..
       12: 3570:        getTemplateInstantiations();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3571:
        -: 3572:        // Template arguments with default values
       12: 3573:        useDefaultArgumentValues();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3574:
       12: 3575:        simplifyTemplateAliases();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3576:
       12: 3577:        if (mSettings->debugtemplate)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3578:            printOut("### Template Simplifier pass " + std::to_string(passCount + 1) + " ###");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 3579:
       24: 3580:        std::set<std::string> expandedtemplates;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        -: 3581:
       23: 3582:        for (std::list<TokenAndName>::reverse_iterator iter1 = mTemplateDeclarations.rbegin(); iter1 != mTemplateDeclarations.rend(); ++iter1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 48% (fallthrough)
branch  7 taken 52%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
       11: 3583:            if (iter1->isAlias() || iter1->isFriend())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 3584:                continue;
        -: 3585:
        -: 3586:            // get specializations..
       22: 3587:            std::list<const Token *> specializations;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
       22: 3588:            for (std::list<TokenAndName>::const_iterator iter2 = mTemplateDeclarations.begin(); iter2 != mTemplateDeclarations.end(); ++iter2) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
       11: 3589:                if (iter2->isAlias() || iter2->isFriend())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3590:                    continue;
        -: 3591:
       11: 3592:                if (iter1->fullName() == iter2->fullName())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
       11: 3593:                    specializations.push_back(iter2->nameToken());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 3594:            }
        -: 3595:
        -: 3596:            const bool instantiated = simplifyTemplateInstantiations(
       11: 3597:                                          *iter1,
call    0 returned 100%
        -: 3598:                                          specializations,
        -: 3599:                                          maxtime,
       11: 3600:                                          expandedtemplates);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       11: 3601:            if (instantiated)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        5: 3602:                mInstantiatedTemplates.push_back(*iter1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3603:        }
        -: 3604:
       17: 3605:        for (std::list<TokenAndName>::const_iterator it = mInstantiatedTemplates.begin(); it != mInstantiatedTemplates.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 29% (fallthrough)
branch  7 taken 71%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
       10: 3606:            std::list<TokenAndName>::iterator decl;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        5: 3607:            for (decl = mTemplateDeclarations.begin(); decl != mTemplateDeclarations.end(); ++decl) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        5: 3608:                if (decl->token() == it->token())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        5: 3609:                    break;
        -: 3610:            }
        5: 3611:            if (decl != mTemplateDeclarations.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        5: 3612:                if (it->isSpecialization()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        -: 3613:                    // delete the "template < >"
        1: 3614:                    Token * tok = it->token();
call    0 returned 100%
call    1 returned 100%
        1: 3615:                    tok->deleteNext(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 3616:                    tok->deleteThis();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3617:                } else {
        -: 3618:                    // remove forward declaration if found
        8: 3619:                    auto it1 = mTemplateForwardDeclarationsMap.find(it->token());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
        4: 3620:                    if (it1 != mTemplateForwardDeclarationsMap.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3621:                        removeTemplate(it1->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        4: 3622:                    removeTemplate(it->token());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 3623:                }
        5: 3624:                mTemplateDeclarations.erase(decl);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -: 3625:            }
        -: 3626:        }
        -: 3627:
        -: 3628:        // remove out of line member functions
       12: 3629:        while (!mMemberFunctionsToDelete.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3630:            const std::list<TokenAndName>::iterator it = std::find_if(mTemplateDeclarations.begin(),
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3631:                    mTemplateDeclarations.end(),
call    0 never executed
    #####: 3632:                    FindToken(mMemberFunctionsToDelete.begin()->token()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 3633:            // multiple functions can share the same declaration so make sure it hasn't already been deleted
    #####: 3634:            if (it != mTemplateDeclarations.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3635:                removeTemplate(it->token());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3636:                mTemplateDeclarations.erase(it);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 3637:            }
    #####: 3638:            mMemberFunctionsToDelete.erase(mMemberFunctionsToDelete.begin());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 3639:        }
        -: 3640:
        -: 3641:        // remove explicit instantiations
       12: 3642:        for (TokenAndName & j : mExplicitInstantiationsToDelete) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
    #####: 3643:            Token * start = j.token();
call    0 never executed
    #####: 3644:            if (start) {
branch  0 never executed
branch  1 never executed
    #####: 3645:                Token * end = start->next();
call    0 never executed
    #####: 3646:                while (end && end->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 3647:                    end = end->next();
call    0 never executed
    #####: 3648:                if (start->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3649:                    start = start->previous();
call    0 never executed
    #####: 3650:                if (end && end->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 3651:                    end = end->next();
call    0 never executed
    #####: 3652:                eraseTokens(start, end);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3653:            }
        -: 3654:        }
        -: 3655:    }
        -: 3656:
        7: 3657:    if (passCount == passCountMax) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3658:        if (mSettings->debugwarnings) {
branch  0 never executed
branch  1 never executed
    #####: 3659:            const std::list<const Token*> locationList(1, mTokenList.front());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 3660:            const ErrorLogger::ErrorMessage errmsg(locationList, &mTokenizer->list,
        -: 3661:                                                   Severity::debug,
        -: 3662:                                                   "debug",
        -: 3663:                                                   "TemplateSimplifier: pass count limit hit before simplifications were finished.",
    #####: 3664:                                                   false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 3665:            if (mErrorLogger)
branch  0 never executed
branch  1 never executed
    #####: 3666:                mErrorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3667:        }
        -: 3668:    }
        -: 3669:}
        -: 3670:
function _ZN18TemplateSimplifier11syntaxErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 3671:void TemplateSimplifier::syntaxError(const Token *tok)
        -: 3672:{
    #####: 3673:    throw InternalError(tok, "syntax error", InternalError::SYNTAX);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
function _GLOBAL__sub_I__ZN18TemplateSimplifier12TokenAndNameC2EP5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 3674:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
