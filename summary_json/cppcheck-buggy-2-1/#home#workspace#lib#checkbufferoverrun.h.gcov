        -:    0:Source:/home/workspace/lib/checkbufferoverrun.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkbufferoverrun.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkbufferoverrun.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkbufferoverrunH
        -:   22:#define checkbufferoverrunH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:#include "ctu.h"
        -:   28:#include "errorlogger.h"
        -:   29:#include "mathlib.h"
        -:   30:#include "tokenize.h"
        -:   31:#include "symboldatabase.h"
        -:   32:
        -:   33:#include <cstddef>
        -:   34:#include <list>
        -:   35:#include <map>
        -:   36:#include <string>
        -:   37:#include <vector>
        -:   38:
        -:   39:
        -:   40:/// @addtogroup Checks
        -:   41:/// @{
        -:   42:
        -:   43:/**
        -:   44: * @brief buffer overruns and array index out of bounds
        -:   45: *
        -:   46: * Buffer overrun and array index out of bounds are pretty much the same.
        -:   47: * But I generally use 'array index' if the code contains []. And the given
        -:   48: * index is out of bounds.
        -:   49: * I generally use 'buffer overrun' if you for example call a strcpy or
        -:   50: * other function and pass a buffer and reads or writes too much data.
        -:   51: */
function _ZN18CheckBufferOverrunD0Ev called 0 returned 0% blocks executed 0%
function _ZN18CheckBufferOverrunD2Ev called 0 returned 0% blocks executed 0%
    #####:   52:class CPPCHECKLIB CheckBufferOverrun : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   53:public:
        -:   54:
        -:   55:    /** This constructor is used when registering the CheckClass */
function _ZN18CheckBufferOverrunC2Ev called 0 returned 0% blocks executed 0%
    #####:   56:    CheckBufferOverrun() : Check(myName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   57:    }
        -:   58:
        -:   59:    /** This constructor is used when running checks. */
function _ZN18CheckBufferOverrunC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   60:    CheckBufferOverrun(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger)
    #####:   61:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   62:    }
        -:   63:
function _ZN18CheckBufferOverrun9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   64:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   65:        CheckBufferOverrun checkBufferOverrun(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   66:        checkBufferOverrun.arrayIndex();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:        checkBufferOverrun.pointerArithmetic();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:        checkBufferOverrun.bufferOverflow();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:        checkBufferOverrun.arrayIndexThenCheck();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:        checkBufferOverrun.stringNotZeroTerminated();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:        checkBufferOverrun.objectIndex();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:    }
        -:   73:
function _ZNK18CheckBufferOverrun16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:   74:    void getErrorMessages(ErrorLogger *errorLogger, const Settings *settings) const OVERRIDE {
    #####:   75:        CheckBufferOverrun c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   76:        c.arrayIndexError(nullptr, std::vector<Dimension>(), std::vector<const ValueFlow::Value *>());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   77:        c.pointerArithmeticError(nullptr, nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:        c.negativeIndexError(nullptr, std::vector<Dimension>(), std::vector<const ValueFlow::Value *>());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   79:        c.arrayIndexThenCheckError(nullptr, "i");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   80:        c.bufferOverflowError(nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   81:        c.objectIndexError(nullptr, nullptr, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:    }
        -:   83:
        -:   84:    /** @brief Parse current TU and extract file info */
        -:   85:    Check::FileInfo *getFileInfo(const Tokenizer *tokenizer, const Settings *settings) const OVERRIDE;
        -:   86:
        -:   87:    /** @brief Analyse all file infos for all TU */
        -:   88:    bool analyseWholeProgram(const CTU::FileInfo *ctu, const std::list<Check::FileInfo*> &fileInfo, const Settings& settings, ErrorLogger &errorLogger) OVERRIDE;
        -:   89:
        -:   90:private:
        -:   91:
        -:   92:    void arrayIndex();
        -:   93:    void arrayIndexError(const Token *tok, const std::vector<Dimension> &dimensions, const std::vector<const ValueFlow::Value *> &indexes);
        -:   94:    void negativeIndexError(const Token *tok, const std::vector<Dimension> &dimensions, const std::vector<const ValueFlow::Value *> &indexes);
        -:   95:
        -:   96:    void pointerArithmetic();
        -:   97:    void pointerArithmeticError(const Token *tok, const Token *indexToken, const ValueFlow::Value *indexValue);
        -:   98:
        -:   99:    void bufferOverflow();
        -:  100:    void bufferOverflowError(const Token *tok, const ValueFlow::Value *value);
        -:  101:
        -:  102:    void arrayIndexThenCheck();
        -:  103:    void arrayIndexThenCheckError(const Token *tok, const std::string &indexName);
        -:  104:
        -:  105:    void stringNotZeroTerminated();
        -:  106:    void terminateStrncpyError(const Token *tok, const std::string &varname);
        -:  107:    void bufferNotZeroTerminatedError(const Token *tok, const std::string &varname, const std::string &function);
        -:  108:
        -:  109:    void objectIndex();
        -:  110:    void objectIndexError(const Token *tok, const ValueFlow::Value *v, bool known);
        -:  111:
        -:  112:    ValueFlow::Value getBufferSize(const Token *bufTok) const;
        -:  113:
        -:  114:    // CTU
        -:  115:
        -:  116:    /** data for multifile checking */
function _ZN18CheckBufferOverrun10MyFileInfoD0Ev called 0 returned 0% blocks executed 0%
function _ZN18CheckBufferOverrun10MyFileInfoD2Ev called 0 returned 0% blocks executed 0%
function _ZN18CheckBufferOverrun10MyFileInfoC2Ev called 0 returned 0% blocks executed 0%
    #####:  117:    class MyFileInfo : public Check::FileInfo {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  118:    public:
        -:  119:        /** unsafe array index usage */
        -:  120:        std::list<CTU::FileInfo::UnsafeUsage> unsafeArrayIndex;
        -:  121:
        -:  122:        /** unsafe pointer arithmetics */
        -:  123:        std::list<CTU::FileInfo::UnsafeUsage> unsafePointerArith;
        -:  124:
        -:  125:        /** Convert MyFileInfo data into xml string */
        -:  126:        std::string toString() const OVERRIDE;
        -:  127:    };
        -:  128:
        -:  129:    static bool isCtuUnsafeBufferUsage(const Check *check, const Token *argtok, MathLib::bigint *offset, int type);
        -:  130:    static bool isCtuUnsafeArrayIndex(const Check *check, const Token *argtok, MathLib::bigint *offset);
        -:  131:    static bool isCtuUnsafePointerArith(const Check *check, const Token *argtok, MathLib::bigint *offset);
        -:  132:
        -:  133:    Check::FileInfo * loadFileInfoFromXml(const tinyxml2::XMLElement *xmlElement) const OVERRIDE;
        -:  134:    bool analyseWholeProgram1(const CTU::FileInfo *ctu, const std::map<std::string, std::list<const CTU::FileInfo::CallBase *>> &callsMap, const CTU::FileInfo::UnsafeUsage &unsafeUsage, int type, ErrorLogger &errorLogger);
        -:  135:
        -:  136:
function _ZN18CheckBufferOverrun6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  137:    static std::string myName() {
    #####:  138:        return "Bounds checking";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  139:    }
        -:  140:
function _ZNK18CheckBufferOverrun9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  141:    std::string classInfo() const OVERRIDE {
        -:  142:        return "Out of bounds checking:\n"
        -:  143:               "- Array index out of bounds\n"
        -:  144:               "- Pointer arithmetic overflow\n"
        -:  145:               "- Buffer overflow\n"
        -:  146:               "- Dangerous usage of strncat()\n"
        -:  147:               "- Using array index before checking it\n"
    #####:  148:               "- Partial string write that leads to buffer that is not zero terminated.\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  149:    }
        -:  150:};
        -:  151:/// @}
        -:  152://---------------------------------------------------------------------------
        -:  153:#endif // checkbufferoverrunH
