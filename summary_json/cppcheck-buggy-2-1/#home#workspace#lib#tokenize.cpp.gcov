        -:    0:Source:/home/workspace/lib/tokenize.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/tokenize.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/tokenize.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:#include "tokenize.h"
        -:   21:
        -:   22:#include "check.h"
        -:   23:#include "library.h"
        -:   24:#include "mathlib.h"
        -:   25:#include "path.h"
        -:   26:#include "platform.h"
        -:   27:#include "settings.h"
        -:   28:#include "standards.h"
        -:   29:#include "symboldatabase.h"
        -:   30:#include "templatesimplifier.h"
        -:   31:#include "timer.h"
        -:   32:#include "token.h"
        -:   33:#include "utils.h"
        -:   34:#include "valueflow.h"
        -:   35:
        -:   36:#include <algorithm>
        -:   37:#include <cassert>
        -:   38:#include <cctype>
        -:   39:#include <cstring>
        -:   40:#include <ctime>
        -:   41:#include <iostream>
        -:   42:#include <set>
        -:   43:#include <stack>
        -:   44:#include <unordered_map>
        -:   45:#include <utility>
        -:   46:#include <vector>
        -:   47://---------------------------------------------------------------------------
        -:   48:
        -:   49:namespace {
        -:   50:    // local struct used in setVarId
        -:   51:    // in order to store information about the scope
        -:   52:    struct VarIdScopeInfo {
function _ZN12_GLOBAL__N_114VarIdScopeInfoC2Ev called 956 returned 100% blocks executed 100%
      956:   53:        VarIdScopeInfo()
      956:   54:            :isExecutable(false), isStructInit(false), isEnum(false), startVarid(0) {
      956:   55:        }
function _ZN12_GLOBAL__N_114VarIdScopeInfoC2Ebbbi called 1795 returned 100% blocks executed 100%
     1795:   56:        VarIdScopeInfo(bool isExecutable, bool isStructInit, bool isEnum, nonneg int startVarid)
     1795:   57:            :isExecutable(isExecutable), isStructInit(isStructInit), isEnum(isEnum), startVarid(startVarid) {
     1795:   58:        }
        -:   59:
        -:   60:        const bool isExecutable;
        -:   61:        const bool isStructInit;
        -:   62:        const bool isEnum;
        -:   63:        const nonneg int startVarid;
        -:   64:    };
        -:   65:}
        -:   66:
        -:   67:/** Return whether tok is the "{" that starts an enumerator list */
function _ZL11isEnumStartPK5Token called 370 returned 100% blocks executed 89%
      370:   68:static bool isEnumStart(const Token* tok)
        -:   69:{
      370:   70:    if (!tok || tok->str() != "{")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:   71:        return false;
      370:   72:    return (tok->strAt(-1) == "enum") || (tok->strAt(-2) == "enum");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
        -:   73:}
        -:   74:
        -:   75:template<typename T>
function _Z12skipEnumBodyIK5TokenEvPPT_ called 0 returned 0% blocks executed 0%
function _Z12skipEnumBodyI5TokenEvPPT_ called 0 returned 0% blocks executed 0%
    #####:   76:static void skipEnumBody(T **tok)
        -:   77:{
    #####:   78:    T *defStart = *tok;
    #####:   79:    while (Token::Match(defStart, "%name%|::|:"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   80:        defStart = defStart->next();
call    0 never executed
call    1 never executed
    #####:   81:    if (defStart && defStart->str() == "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:   82:        *tok = defStart->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:   83:}
        -:   84:
function _ZNK9Tokenizer14isFunctionHeadEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7572 returned 100% blocks executed 100%
     7572:   85:const Token * Tokenizer::isFunctionHead(const Token *tok, const std::string &endsWith) const
        -:   86:{
     7572:   87:    return Tokenizer::isFunctionHead(tok, endsWith, isCPP());
call    0 returned 100%
call    1 returned 100%
        -:   88:}
        -:   89:
function _ZN9Tokenizer14isFunctionHeadEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 10160 returned 100% blocks executed 91%
    10160:   90:const Token * Tokenizer::isFunctionHead(const Token *tok, const std::string &endsWith, bool cpp)
        -:   91:{
    10160:   92:    if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:        return nullptr;
    10160:   94:    if (tok->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 62% (fallthrough)
branch  3 taken 38%
     6301:   95:        tok = tok->link();
call    0 returned 100%
    10160:   96:    if (Token::Match(tok, ") ;|{|[")) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
     9339:   97:        tok = tok->next();
call    0 returned 100%
     9341:   98:        while (tok && tok->str() == "[" && tok->link())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        1:   99:            tok = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
     9339:  100:        return (tok && endsWith.find(tok->str()) != std::string::npos) ? tok : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 83% (fallthrough)
branch  5 taken 17%
        -:  101:    }
      821:  102:    if (cpp && tok->str() == ")") {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
      811:  103:        tok = tok->next();
call    0 returned 100%
     2411:  104:        while (Token::Match(tok, "const|noexcept|override|final|volatile|&|&& !!(") ||
call    0 returned 100%
branch  1 taken 76% (fallthrough)
branch  2 taken 24%
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
branch  5 taken 24% (fallthrough)
branch  6 taken 76%
      872:  105:               (Token::Match(tok, "%name% !!(") && tok->isUpperCaseName()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
      263:  106:            tok = tok->next();
call    0 returned 100%
      811:  107:        if (tok && tok->str() == ")")
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
      121:  108:            tok = tok->next();
call    0 returned 100%
      811:  109:        while (tok && tok->str() == "[")
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  110:            tok = tok->link()->next();
call    0 never executed
call    1 never executed
      811:  111:        if (Token::Match(tok, "throw|noexcept ("))
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       18:  112:            tok = tok->linkAt(1)->next();
call    0 returned 100%
call    1 returned 100%
      811:  113:        if (Token::Match(tok, "%name% (") && tok->isUpperCaseName())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  114:            tok = tok->linkAt(1)->next();
call    0 never executed
call    1 never executed
      811:  115:        if (tok && tok->originalName() == "->") { // trailing return type
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       11:  116:            for (tok = tok->next(); tok && !Token::Match(tok, ";|{|override|final"); tok = tok->next())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 55% (fallthrough)
branch  5 taken 45%
branch  6 taken 55% (fallthrough)
branch  7 taken 45%
call    8 returned 100%
        6:  117:                if (tok->link() && Token::Match(tok, "<|[|("))
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 17% (fallthrough)
branch  7 taken 83%
        1:  118:                    tok = tok->link();
call    0 returned 100%
        -:  119:        }
      811:  120:        while (Token::Match(tok, "override|final !!(") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
      877:  121:               (Token::Match(tok, "%name% !!(") && tok->isUpperCaseName()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  122:            tok = tok->next();
call    0 never executed
      811:  123:        if (Token::Match(tok, "= 0|default|delete ;"))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
       24:  124:            tok = tok->tokAt(2);
call    0 returned 100%
        -:  125:
      811:  126:        return (tok && endsWith.find(tok->str()) != std::string::npos) ? tok : nullptr;
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 36% (fallthrough)
branch  5 taken 64%
        -:  127:    }
       10:  128:    return nullptr;
        -:  129:}
        -:  130:
        -:  131:/**
        -:  132: * is tok the start brace { of a class, struct, union, or enum
        -:  133: */
function _ZL27isClassStructUnionEnumStartPK5Token called 125 returned 100% blocks executed 100%
      125:  134:static bool isClassStructUnionEnumStart(const Token * tok)
        -:  135:{
      125:  136:    if (!Token::Match(tok->previous(), "class|struct|union|enum|%name%|>|>> {"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 39% (fallthrough)
branch  3 taken 61%
       49:  137:        return false;
       76:  138:    const Token * tok2 = tok->previous();
call    0 returned 100%
      298:  139:    while (tok2 && !Token::Match(tok2, "class|struct|union|enum|{|}|;"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 59% (fallthrough)
branch  4 taken 41%
branch  5 taken 59% (fallthrough)
branch  6 taken 41%
      111:  140:        tok2 = tok2->previous();
call    0 returned 100%
       76:  141:    return Token::Match(tok2, "class|struct|union|enum");
call    0 returned 100%
        -:  142:}
        -:  143:
        -:  144://---------------------------------------------------------------------------
        -:  145:
function _ZN9TokenizerC2Ev called 0 returned 0% blocks executed 0%
    #####:  146:Tokenizer::Tokenizer() :
        -:  147:    list(nullptr),
        -:  148:    mSettings(nullptr),
        -:  149:    mErrorLogger(nullptr),
        -:  150:    mSymbolDatabase(nullptr),
        -:  151:    mTemplateSimplifier(nullptr),
        -:  152:    mVarId(0),
        -:  153:    mUnnamedCount(0),
        -:  154:    mCodeWithTemplates(false), //is there any templates?
    #####:  155:    mTimerResults(nullptr)
call    0 never executed
call    1 never executed
call    2 never executed
        -:  156:#ifdef MAXTIME
        -:  157:    ,mMaxTime(std::time(0) + MAXTIME)
        -:  158:#endif
        -:  159:{
    #####:  160:}
        -:  161:
function _ZN9TokenizerC2EPK8SettingsP11ErrorLogger called 956 returned 100% blocks executed 50%
      956:  162:Tokenizer::Tokenizer(const Settings *settings, ErrorLogger *errorLogger) :
        -:  163:    list(settings),
        -:  164:    mSettings(settings),
        -:  165:    mErrorLogger(errorLogger),
        -:  166:    mSymbolDatabase(nullptr),
        -:  167:    mTemplateSimplifier(nullptr),
        -:  168:    mVarId(0),
        -:  169:    mUnnamedCount(0),
        -:  170:    mCodeWithTemplates(false), //is there any templates?
      956:  171:    mTimerResults(nullptr)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 never executed
call    4 never executed
call    5 never executed
        -:  172:#ifdef MAXTIME
        -:  173:    ,mMaxTime(std::time(0) + MAXTIME)
        -:  174:#endif
        -:  175:{
        -:  176:    // make sure settings are specified
      956:  177:    assert(mSettings);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  178:
      956:  179:    mTemplateSimplifier = new TemplateSimplifier(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
      956:  180:}
        -:  181:
function _ZN9TokenizerD2Ev called 956 returned 100% blocks executed 100%
     1912:  182:Tokenizer::~Tokenizer()
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  183:{
      956:  184:    delete mSymbolDatabase;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
      956:  185:    delete mTemplateSimplifier;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
      956:  186:}
        -:  187:
        -:  188:
        -:  189://---------------------------------------------------------------------------
        -:  190:// SizeOfType - gives the size of a type
        -:  191://---------------------------------------------------------------------------
        -:  192:
function _ZNK9Tokenizer10sizeOfTypeEPK5Token called 30 returned 100% blocks executed 66%
       30:  193:nonneg int Tokenizer::sizeOfType(const Token *type) const
        -:  194:{
       30:  195:    if (!type || type->str().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  196:        return 0;
        -:  197:
       30:  198:    if (type->tokType() == Token::eString)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  199:        return Token::getStrLength(type) + 1U;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  200:
       60:  201:    const std::map<std::string, int>::const_iterator it = mTypeSize.find(type->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       30:  202:    if (it == mTypeSize.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
        7:  203:        const Library::PodType* podtype = mSettings->library.podtype(type->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        7:  204:        if (!podtype)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        3:  205:            return 0;
        -:  206:
        4:  207:        return podtype->size;
       23:  208:    } else if (type->isLong()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  209:        if (type->str() == "double")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  210:            return mSettings->sizeof_long_double;
    #####:  211:        else if (type->str() == "long")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  212:            return mSettings->sizeof_long_long;
        -:  213:    }
        -:  214:
       23:  215:    return it->second;
call    0 returned 100%
        -:  216:}
        -:  217://---------------------------------------------------------------------------
        -:  218:
        -:  219:// check if this statement is a duplicate definition
function _ZNK9Tokenizer16duplicateTypedefEPP5TokenPKS0_S4_ called 13 returned 100% blocks executed 18%
       13:  220:bool Tokenizer::duplicateTypedef(Token **tokPtr, const Token *name, const Token *typeDef) const
        -:  221:{
        -:  222:    // check for an end of definition
       13:  223:    const Token * tok = *tokPtr;
       13:  224:    if (tok && Token::Match(tok->next(), ";|,|[|=|)|>|(|{")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 31% (fallthrough)
branch  5 taken 69%
branch  6 taken 31% (fallthrough)
branch  7 taken 69%
        4:  225:        const Token * end = tok->next();
call    0 returned 100%
        -:  226:
        4:  227:        if (end->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  228:            if (!end->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  229:                syntaxError(end); // invalid code
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  230:            end = end->link()->next();
call    0 never executed
call    1 never executed
        4:  231:        } else if (end->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  232:            // check for derived class
    #####:  233:            if (Token::Match(tok->previous(), "public|private|protected"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  234:                return false;
        -:  235:
        -:  236:            // find end of definition
    #####:  237:            while (end && end->next() && !Token::Match(end->next(), ";|)|>")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  238:                if (end->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  239:                    end = end->linkAt(1);
call    0 never executed
        -:  240:
    #####:  241:                end = (end)?end->next():nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  242:            }
    #####:  243:            if (end)
branch  0 never executed
branch  1 never executed
    #####:  244:                end = end->next();
call    0 never executed
        4:  245:        } else if (end->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  246:            if (tok->previous()->str().compare(0, 8, "operator")  == 0) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  247:                // conversion operator
    #####:  248:                return false;
    #####:  249:            } else if (tok->previous()->str() == "typedef") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  250:                // typedef of function returning this type
    #####:  251:                return false;
    #####:  252:            } else if (Token::Match(tok->previous(), "public:|private:|protected:")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  253:                return false;
    #####:  254:            } else if (tok->previous()->str() == ">") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  255:                if (!Token::Match(tok->tokAt(-2), "%type%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  256:                    return false;
        -:  257:
    #####:  258:                if (!Token::Match(tok->tokAt(-3), ",|<"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  259:                    return false;
        -:  260:
    #####:  261:                *tokPtr = end->link();
call    0 never executed
    #####:  262:                return true;
        -:  263:            }
        -:  264:        }
        -:  265:
        4:  266:        if (end) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  267:            if (Token::simpleMatch(end, ") {")) { // function parameter ?
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  268:                // look backwards
    #####:  269:                if (Token::Match(tok->previous(), "%type%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  270:                    !Token::Match(tok->previous(), "return|new|const|struct")) {
call    0 never executed
call    1 never executed
        -:  271:                    // duplicate definition so skip entire function
    #####:  272:                    *tokPtr = end->next()->link();
call    0 never executed
call    1 never executed
    #####:  273:                    return true;
        -:  274:                }
        4:  275:            } else if (end->str() == ">") { // template parameter ?
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        -:  276:                // look backwards
        3:  277:                if (Token::Match(tok->previous(), "%type%") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  278:                    !Token::Match(tok->previous(), "return|new|const|volatile")) {
call    0 never executed
call    1 never executed
        -:  279:                    // duplicate definition so skip entire template
    #####:  280:                    while (end && end->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  281:                        end = end->next();
call    0 never executed
    #####:  282:                    if (end) {
branch  0 never executed
branch  1 never executed
    #####:  283:                        *tokPtr = end->link();
call    0 never executed
    #####:  284:                        return true;
        -:  285:                    }
        -:  286:                }
        -:  287:            } else {
        -:  288:                // look backwards
        3:  289:                if (Token::Match(tok->previous(), "typedef|}|>") ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  290:                    (end->str() == ";" && tok->previous()->str() == ",") ||
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        3:  291:                    (tok->previous()->str() == "*" && tok->next()->str() != "(") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        1:  292:                    (Token::Match(tok->previous(), "%type%") &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
    #####:  293:                     (!Token::Match(tok->previous(), "return|new|const|friend|public|private|protected|throw|extern") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  294:                      !Token::simpleMatch(tok->tokAt(-2), "friend class")))) {
call    0 never executed
call    1 never executed
        -:  295:                    // scan backwards for the end of the previous statement
    #####:  296:                    while (tok && tok->previous() && !Token::Match(tok->previous(), ";|{")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  297:                        if (tok->previous()->str() == "}") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  298:                            tok = tok->previous()->link();
call    0 never executed
call    1 never executed
    #####:  299:                        } else if (tok->previous()->str() == "typedef") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  300:                            return true;
    #####:  301:                        } else if (tok->previous()->str() == "enum") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  302:                            return true;
    #####:  303:                        } else if (tok->previous()->str() == "struct") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  304:                            if (tok->strAt(-2) == "typedef" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  305:                                tok->next()->str() == "{" &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  306:                                typeDef->strAt(3) != "{") {
call    0 never executed
call    1 never executed
        -:  307:                                // declaration after forward declaration
    #####:  308:                                return true;
    #####:  309:                            } else if (tok->next()->str() == "{") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  310:                                return true;
    #####:  311:                            } else if (Token::Match(tok->next(), ")|*")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  312:                                return true;
    #####:  313:                            } else if (tok->next()->str() == name->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  314:                                return true;
    #####:  315:                            } else if (tok->next()->str() != ";") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  316:                                return true;
        -:  317:                            } else {
    #####:  318:                                return false;
        -:  319:                            }
    #####:  320:                        } else if (tok->previous()->str() == "union") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  321:                            if (tok->next()->str() != ";") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  322:                                return true;
        -:  323:                            } else {
    #####:  324:                                return false;
        -:  325:                            }
    #####:  326:                        } else if (isCPP() && tok->previous()->str() == "class") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  327:                            if (tok->next()->str() != ";") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  328:                                return true;
        -:  329:                            } else {
    #####:  330:                                return false;
        -:  331:                            }
        -:  332:                        }
    #####:  333:                        if (tok)
branch  0 never executed
branch  1 never executed
    #####:  334:                            tok = tok->previous();
call    0 never executed
        -:  335:                    }
        -:  336:
    #####:  337:                    if ((*tokPtr)->strAt(1) != "(" || !Token::Match((*tokPtr)->linkAt(1), ") .|(|["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  338:                        return true;
        -:  339:                }
        -:  340:            }
        -:  341:        }
        -:  342:    }
        -:  343:
       13:  344:    return false;
        -:  345:}
        -:  346:
function _ZNK9Tokenizer18unsupportedTypedefEPK5Token called 0 returned 0% blocks executed 0%
    #####:  347:void Tokenizer::unsupportedTypedef(const Token *tok) const
        -:  348:{
    #####:  349:    if (!mSettings->debugwarnings)
branch  0 never executed
branch  1 never executed
    #####:  350:        return;
        -:  351:
    #####:  352:    std::ostringstream str;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  353:    const Token *tok1 = tok;
    #####:  354:    int level = 0;
    #####:  355:    while (tok) {
branch  0 never executed
branch  1 never executed
    #####:  356:        if (level == 0 && tok->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  357:            break;
    #####:  358:        else if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  359:            ++level;
    #####:  360:        else if (tok->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  361:            if (level == 0)
branch  0 never executed
branch  1 never executed
    #####:  362:                break;
    #####:  363:            --level;
        -:  364:        }
        -:  365:
    #####:  366:        if (tok != tok1)
branch  0 never executed
branch  1 never executed
    #####:  367:            str << " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  368:        str << tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  369:        tok = tok->next();
call    0 never executed
        -:  370:    }
    #####:  371:    if (tok)
branch  0 never executed
branch  1 never executed
    #####:  372:        str << " ;";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  373:
    #####:  374:    reportError(tok1, Severity::debug, "debug",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  375:                "Failed to parse \'" + str.str() + "\'. The checking continues anyway.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  376:}
        -:  377:
function _ZN9Tokenizer20deleteInvalidTypedefEP5Token called 0 returned 0% blocks executed 0%
    #####:  378:Token * Tokenizer::deleteInvalidTypedef(Token *typeDef)
        -:  379:{
    #####:  380:    Token *tok = nullptr;
        -:  381:
        -:  382:    // remove typedef but leave ;
    #####:  383:    while (typeDef->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  384:        if (typeDef->next()->str() == ";") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  385:            typeDef->deleteNext();
call    0 never executed
    #####:  386:            break;
    #####:  387:        } else if (typeDef->next()->str() == "{")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  388:            Token::eraseTokens(typeDef, typeDef->linkAt(1));
call    0 never executed
call    1 never executed
    #####:  389:        else if (typeDef->next()->str() == "}")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  390:            break;
    #####:  391:        typeDef->deleteNext();
call    0 never executed
        -:  392:    }
        -:  393:
    #####:  394:    if (typeDef != list.front()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  395:        tok = typeDef->previous();
call    0 never executed
    #####:  396:        tok->deleteNext();
call    0 never executed
        -:  397:    } else {
    #####:  398:        list.front()->deleteThis();
call    0 never executed
call    1 never executed
    #####:  399:        tok = list.front();
call    0 never executed
        -:  400:    }
        -:  401:
    #####:  402:    return tok;
        -:  403:}
        -:  404:
        -:  405:namespace {
function _ZN12_GLOBAL__N_15SpaceC2EOS0_ called 5 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_15SpaceC2ERKS0_ called 338 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_15SpaceD2Ev called 681 returned 100% blocks executed 100%
     1024:  406:    struct Space {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function _ZN12_GLOBAL__N_15SpaceC2Ev called 338 returned 100% blocks executed 100%
      338:  407:        Space() : bodyEnd(nullptr), isNamespace(false) { }
call    0 returned 100%
        -:  408:        std::string className;
        -:  409:        const Token * bodyEnd;
        -:  410:        bool isNamespace;
        -:  411:    };
        -:  412:}
        -:  413:
function _ZL26splitDefinitionFromTypedefP5TokenPi called 3 returned 100% blocks executed 37%
        3:  414:static Token *splitDefinitionFromTypedef(Token *tok, nonneg int *unnamedCount)
        -:  415:{
        -:  416:    Token *tok1;
        6:  417:    std::string name;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        3:  418:    bool isConst = false;
        -:  419:
        3:  420:    if (tok->next()->str() == "const") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  421:        tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  422:        isConst = true;
        -:  423:    }
        -:  424:
        3:  425:    if (tok->strAt(2) == "{") { // unnamed
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  426:        tok1 = tok->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  427:
    #####:  428:        if (tok1 && tok1->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  429:            // use typedef name if available
    #####:  430:            if (Token::Match(tok1->next(), "%type%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  431:                name = tok1->next()->str();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  432:            else // create a unique name
    #####:  433:                name = "Unnamed" + MathLib::toString((*unnamedCount)++);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  434:            tok->next()->insertToken(name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  435:        } else
    #####:  436:            return nullptr;
        3:  437:    } else if (tok->strAt(3) == ":") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  438:        tok1 = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  439:        while (tok1 && tok1->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  440:            tok1 = tok1->next();
call    0 never executed
    #####:  441:        if (!tok1)
branch  0 never executed
branch  1 never executed
    #####:  442:            return nullptr;
        -:  443:
    #####:  444:        tok1 = tok1->link();
call    0 never executed
        -:  445:
    #####:  446:        name = tok->strAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  447:    } else { // has a name
        3:  448:        tok1 = tok->linkAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  449:
        3:  450:        if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  451:            return nullptr;
        -:  452:
        3:  453:        name = tok->strAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  454:    }
        -:  455:
        3:  456:    tok1->insertToken(";");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        3:  457:    tok1 = tok1->next();
call    0 returned 100%
        -:  458:
        3:  459:    if (tok1->next() && tok1->next()->str() == ";" && tok1->previous()->str() == "}") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####:  460:        tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  461:        tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  462:        return nullptr;
        -:  463:    } else {
        3:  464:        tok1->insertToken("typedef");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        3:  465:        tok1 = tok1->next();
call    0 returned 100%
        3:  466:        Token * tok3 = tok1;
        3:  467:        if (isConst) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  468:            tok1->insertToken("const");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  469:            tok1 = tok1->next();
call    0 never executed
        -:  470:        }
        3:  471:        tok1->insertToken(tok->next()->str()); // struct, union or enum
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        3:  472:        tok1 = tok1->next();
call    0 returned 100%
        3:  473:        tok1->insertToken(name);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  474:        tok->deleteThis();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  475:        tok = tok3;
        -:  476:    }
        -:  477:
        3:  478:    return tok;
        -:  479:}
        -:  480:
        -:  481:/* This function is called when processing function related typedefs.
        -:  482: * If simplifyTypedef generates an "Internal Error" message and the
        -:  483: * code that generated it deals in some way with functions, then this
        -:  484: * function will probably need to be extended to handle a new function
        -:  485: * related pattern */
function _ZNK9Tokenizer11processFuncEP5Tokenb called 0 returned 0% blocks executed 0%
    #####:  486:Token *Tokenizer::processFunc(Token *tok2, bool inOperator) const
        -:  487:{
    #####:  488:    if (tok2->next() && tok2->next()->str() != ")" &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  489:        tok2->next()->str() != ",") {
call    0 never executed
call    1 never executed
call    2 never executed
        -:  490:        // skip over tokens for some types of canonicalization
    #####:  491:        if (Token::Match(tok2->next(), "( * %type% ) ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  492:            tok2 = tok2->linkAt(5);
call    0 never executed
    #####:  493:        else if (Token::Match(tok2->next(), "* ( * %type% ) ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  494:            tok2 = tok2->linkAt(6);
call    0 never executed
    #####:  495:        else if (Token::Match(tok2->next(), "* ( * %type% ) ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  496:            tok2 = tok2->tokAt(5);
call    0 never executed
    #####:  497:        else if (Token::Match(tok2->next(), "* ( %type% [") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  498:                 Token::Match(tok2->linkAt(4), "] ) ;|="))
call    0 never executed
call    1 never executed
    #####:  499:            tok2 = tok2->linkAt(4)->next();
call    0 never executed
call    1 never executed
    #####:  500:        else if (Token::Match(tok2->next(), "* ( * %type% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  501:            tok2 = tok2->linkAt(5)->next();
call    0 never executed
call    1 never executed
    #####:  502:        else if (Token::simpleMatch(tok2->next(), "* [") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  503:                 Token::simpleMatch(tok2->linkAt(2), "] ;"))
call    0 never executed
call    1 never executed
    #####:  504:            tok2 = tok2->next();
call    0 never executed
        -:  505:        else {
    #####:  506:            if (tok2->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  507:                tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
    #####:  508:            else if (!inOperator && !Token::Match(tok2->next(), "[|>|;")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  509:                tok2 = tok2->next();
call    0 never executed
        -:  510:
    #####:  511:                while (Token::Match(tok2, "*|&") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  512:                       !Token::Match(tok2->next(), ")|>"))
call    0 never executed
call    1 never executed
    #####:  513:                    tok2 = tok2->next();
call    0 never executed
        -:  514:
        -:  515:                // skip over namespace
    #####:  516:                while (Token::Match(tok2, "%name% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  517:                    tok2 = tok2->tokAt(2);
call    0 never executed
        -:  518:
    #####:  519:                if (!tok2)
branch  0 never executed
branch  1 never executed
    #####:  520:                    return nullptr;
        -:  521:
    #####:  522:                if (tok2->str() == "(" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  523:                    tok2->link()->next() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  524:                    tok2->link()->next()->str() == "(") {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  525:                    tok2 = tok2->link();
call    0 never executed
        -:  526:
    #####:  527:                    if (tok2->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  528:                        tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
        -:  529:                }
        -:  530:
        -:  531:                // skip over typedef parameter
    #####:  532:                if (tok2->next() && tok2->next()->str() == "(") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  533:                    tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
    #####:  534:                    if (!tok2->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  535:                        syntaxError(tok2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  536:
    #####:  537:                    if (tok2->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  538:                        tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
        -:  539:                }
        -:  540:            }
        -:  541:        }
        -:  542:    }
    #####:  543:    return tok2;
        -:  544:}
        -:  545:
function _ZN9Tokenizer15simplifyTypedefEv called 956 returned 100% blocks executed 23%
      956:  546:void Tokenizer::simplifyTypedef()
        -:  547:{
     1912:  548:    std::vector<Space> spaceInfo;
call    0 returned 100%
call    1 never executed
      956:  549:    bool isNamespace = false;
     1912:  550:    std::string className;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
call    4 never executed
      956:  551:    bool hasClass = false;
      956:  552:    bool goback = false;
    30128:  553:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
    29172:  554:        if (mErrorLogger && !list.getFiles().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
    29172:  555:            mErrorLogger->reportProgress(list.getFiles()[0], "Tokenize (typedef)", tok->progressValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:  556:
    29172:  557:        if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  558:            return;
        -:  559:
    29172:  560:        if (isMaxTime())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  561:            return;
        -:  562:
    29172:  563:        if (goback) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  564:            //jump back once, see the comment at the end of the function
        1:  565:            goback = false;
        1:  566:            tok = tok->previous();
call    0 returned 100%
        -:  567:        }
        -:  568:
    29172:  569:        if (tok->str() != "typedef") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    29167:  570:            if (tok->str() == "(" && tok->strAt(1) == "typedef") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  571:                // Skip typedefs inside parentheses (#2453 and #4002)
    #####:  572:                tok = tok->next();
call    0 never executed
    29601:  573:            } else if (Token::Match(tok, "class|struct|namespace %any%") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 35% (fallthrough)
branch  6 taken 65%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
      292:  574:                       (!tok->previous() || tok->previous()->str() != "enum")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      217:  575:                isNamespace = (tok->str() == "namespace");
call    0 returned 100%
call    1 returned 100%
      217:  576:                hasClass = true;
      217:  577:                className = tok->next()->str();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
    28950:  578:            } else if (hasClass && tok->str() == ";") {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       38:  579:                hasClass = false;
    28912:  580:            } else if (hasClass && tok->str() == "{") {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 34% (fallthrough)
branch  5 taken 66%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
      356:  581:                Space info;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      178:  582:                info.isNamespace = isNamespace;
      178:  583:                info.className = className;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      178:  584:                info.bodyEnd = tok->link();
call    0 returned 100%
      178:  585:                spaceInfo.push_back(info);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  586:
      178:  587:                hasClass = false;
    28734:  588:            } else if (!spaceInfo.empty() && tok->str() == "}" && spaceInfo.back().bodyEnd == tok) {
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 11% (fallthrough)
branch  6 taken 89%
call    7 returned 100%
branch  8 taken 74% (fallthrough)
branch  9 taken 26%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
      178:  589:                spaceInfo.pop_back();
call    0 returned 100%
        -:  590:            }
    58334:  591:            continue;
        -:  592:        }
        -:  593:
        -:  594:        // pull struct, union, enum or class definition out of typedef
        -:  595:        // use typedef name for unnamed struct, union, enum or class
        5:  596:        if (Token::Match(tok->next(), "const| struct|enum|union|class %type%| {")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 60% (fallthrough)
branch  5 taken 40%
        3:  597:            Token *tok1 = splitDefinitionFromTypedef(tok, &mUnnamedCount);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:  598:            if (!tok1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  599:                continue;
        3:  600:            tok = tok1;
        2:  601:        } else if (Token::Match(tok->next(), "const| struct|class %type% :")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  602:            Token *tok1 = tok;
    #####:  603:            while (tok1 && tok1->str() != ";" && tok1->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  604:                tok1 = tok1->next();
call    0 never executed
    #####:  605:            if (tok1 && tok1->str() == "{") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  606:                tok1 = splitDefinitionFromTypedef(tok, &mUnnamedCount);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  607:                if (!tok1)
branch  0 never executed
branch  1 never executed
    #####:  608:                    continue;
    #####:  609:                tok = tok1;
        -:  610:            }
        -:  611:        }
        -:  612:
        -:  613:        /** @todo add support for union */
        5:  614:        if (Token::Match(tok->next(), "enum %type% %type% ;") && tok->strAt(2) == tok->strAt(3)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####:  615:            tok->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  616:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  617:            if (tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  618:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  619:            //now the next token to process is 'tok', not 'tok->next()';
    #####:  620:            goback = true;
    #####:  621:            continue;
        -:  622:        }
        -:  623:
        -:  624:        Token *typeName;
        5:  625:        Token *typeStart = nullptr;
        5:  626:        Token *typeEnd = nullptr;
        5:  627:        Token *argStart = nullptr;
        5:  628:        Token *argEnd = nullptr;
        5:  629:        Token *arrayStart = nullptr;
        5:  630:        Token *arrayEnd = nullptr;
        5:  631:        Token *specStart = nullptr;
        5:  632:        Token *specEnd = nullptr;
        5:  633:        Token *typeDef = tok;
        5:  634:        Token *argFuncRetStart = nullptr;
        5:  635:        Token *argFuncRetEnd = nullptr;
        5:  636:        Token *funcStart = nullptr;
        5:  637:        Token *funcEnd = nullptr;
        5:  638:        Token *tokOffset = tok->next();
call    0 returned 100%
        5:  639:        bool function = false;
        5:  640:        bool functionPtr = false;
        5:  641:        bool functionRetFuncPtr = false;
        5:  642:        bool functionPtrRetFuncPtr = false;
        5:  643:        bool ptrToArray = false;
        5:  644:        bool refToArray = false;
        5:  645:        bool ptrMember = false;
        5:  646:        bool typeOf = false;
        5:  647:        Token *namespaceStart = nullptr;
        5:  648:        Token *namespaceEnd = nullptr;
        -:  649:
        -:  650:        // check for invalid input
        5:  651:        if (!tokOffset)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  652:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  653:
        -:  654:
        5:  655:        if (tokOffset->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  656:            typeStart = tokOffset;
    #####:  657:            tokOffset = tokOffset->next();
call    0 never executed
        -:  658:
    #####:  659:            while (Token::Match(tokOffset, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  660:                tokOffset = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  661:
    #####:  662:            typeEnd = tokOffset;
        -:  663:
    #####:  664:            if (Token::Match(tokOffset, "%type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  665:                tokOffset = tokOffset->next();
call    0 never executed
        5:  666:        } else if (Token::Match(tokOffset, "%type% ::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
        1:  667:            typeStart = tokOffset;
        -:  668:
    #####:  669:            do {
        1:  670:                tokOffset = tokOffset->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  671:            } while (Token::Match(tokOffset, "%type% ::"));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  672:
        1:  673:            typeEnd = tokOffset;
        -:  674:
        1:  675:            if (Token::Match(tokOffset, "%type%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1:  676:                tokOffset = tokOffset->next();
call    0 returned 100%
        4:  677:        } else if (Token::Match(tokOffset, "%type%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4:  678:            typeStart = tokOffset;
        -:  679:
       17:  680:            while (Token::Match(tokOffset, "const|struct|enum %type%") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 57% (fallthrough)
branch  4 taken 43%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 43% (fallthrough)
branch  8 taken 57%
        8:  681:                   (tokOffset->next() && tokOffset->next()->isStandardType()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        3:  682:                tokOffset = tokOffset->next();
call    0 returned 100%
        -:  683:
        4:  684:            typeEnd = tokOffset;
        4:  685:            tokOffset = tokOffset->next();
call    0 returned 100%
        -:  686:
        7:  687:            while (Token::Match(tokOffset, "%type%") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        6:  688:                   (tokOffset->isStandardType() || Token::Match(tokOffset, "unsigned|signed"))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  689:                typeEnd = tokOffset;
    #####:  690:                tokOffset = tokOffset->next();
call    0 never executed
        -:  691:            }
        -:  692:
        4:  693:            bool atEnd = false;
       12:  694:            while (!atEnd) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        4:  695:                if (tokOffset && tokOffset->str() == "::") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  696:                    typeEnd = tokOffset;
    #####:  697:                    tokOffset = tokOffset->next();
call    0 never executed
        -:  698:                }
        -:  699:
       11:  700:                if (Token::Match(tokOffset, "%type%") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        7:  701:                    tokOffset->next() && !Token::Match(tokOffset->next(), "[|;|,|(")) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  702:                    typeEnd = tokOffset;
    #####:  703:                    tokOffset = tokOffset->next();
call    0 never executed
        4:  704:                } else if (Token::simpleMatch(tokOffset, "const (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  705:                    typeEnd = tokOffset;
    #####:  706:                    tokOffset = tokOffset->next();
call    0 never executed
    #####:  707:                    atEnd = true;
        -:  708:                } else
        4:  709:                    atEnd = true;
        -:  710:            }
        -:  711:        } else
    #####:  712:            continue; // invalid input
        -:  713:
        -:  714:        // check for invalid input
        5:  715:        if (!tokOffset)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  716:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  717:
        -:  718:        // check for template
        5:  719:        if (!isC() && tokOffset->str() == "<") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 20% (fallthrough)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
branch  8 taken 80%
        1:  720:            typeEnd = tokOffset->findClosingBracket();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  721:
        1:  722:            while (typeEnd && Token::Match(typeEnd->next(), ":: %type%"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:  723:                typeEnd = typeEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  724:
        1:  725:            if (!typeEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  726:                // internal error
    #####:  727:                return;
        -:  728:            }
        -:  729:
    #####:  730:            while (Token::Match(typeEnd->next(), "const|volatile"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  731:                typeEnd = typeEnd->next();
call    0 never executed
        -:  732:
        1:  733:            tok = typeEnd;
        1:  734:            tokOffset = tok->next();
call    0 returned 100%
        -:  735:        }
        -:  736:
       10:  737:        std::list<std::string> pointers;
call    0 returned 100%
call    1 never executed
        -:  738:        // check for pointers and references
        7:  739:        while (Token::Match(tokOffset, "*|&|&&|const")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
        1:  740:            pointers.push_back(tokOffset->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1:  741:            tokOffset = tokOffset->next();
call    0 returned 100%
        -:  742:        }
        -:  743:
        -:  744:        // check for invalid input
        5:  745:        if (!tokOffset)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  746:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  747:
        5:  748:        if (Token::Match(tokOffset, "%type%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  749:            // found the type name
        5:  750:            typeName = tokOffset;
        5:  751:            tokOffset = tokOffset->next();
call    0 returned 100%
        -:  752:
        -:  753:            // check for array
        5:  754:            if (tokOffset && tokOffset->str() == "[") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  755:                arrayStart = tokOffset;
        -:  756:
    #####:  757:                bool atEnd = false;
    #####:  758:                while (!atEnd) {
branch  0 never executed
branch  1 never executed
    #####:  759:                    while (tokOffset->next() && !Token::Match(tokOffset->next(), ";|,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  760:                        tokOffset = tokOffset->next();
call    0 never executed
        -:  761:                    }
        -:  762:
    #####:  763:                    if (!tokOffset->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  764:                        return; // invalid input
    #####:  765:                    else if (tokOffset->next()->str() == ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  766:                        atEnd = true;
    #####:  767:                    else if (tokOffset->str() == "]")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  768:                        atEnd = true;
        -:  769:                    else
    #####:  770:                        tokOffset = tokOffset->next();
call    0 never executed
        -:  771:                }
        -:  772:
    #####:  773:                arrayEnd = tokOffset;
    #####:  774:                tokOffset = tokOffset->next();
call    0 never executed
        -:  775:            }
        -:  776:
        -:  777:            // check for end or another
        5:  778:            if (Token::Match(tokOffset, ";|,"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        5:  779:                tok = tokOffset;
        -:  780:
        -:  781:            // or a function typedef
    #####:  782:            else if (tokOffset && tokOffset->str() == "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  783:                Token *tokOffset2 = nullptr;
    #####:  784:                if (Token::Match(tokOffset, "( *|%name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  785:                    tokOffset2 = tokOffset->next();
call    0 never executed
    #####:  786:                    if (tokOffset2->str() == "typename")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  787:                        tokOffset2 = tokOffset2->next();
call    0 never executed
    #####:  788:                    while (Token::Match(tokOffset2, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  789:                        tokOffset2 = tokOffset2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  790:                }
        -:  791:
        -:  792:                // unhandled typedef, skip it and continue
    #####:  793:                if (typeName->str() == "void") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  794:                    unsupportedTypedef(typeDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:                    tok = deleteInvalidTypedef(typeDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:                    if (tok == list.front())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  797:                        //now the next token to process is 'tok', not 'tok->next()';
    #####:  798:                        goback = true;
    #####:  799:                    continue;
        -:  800:                }
        -:  801:
        -:  802:                // function pointer
    #####:  803:                else if (Token::Match(tokOffset2, "* %name% ) (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  804:                    // name token wasn't a name, it was part of the type
    #####:  805:                    typeEnd = typeEnd->next();
call    0 never executed
    #####:  806:                    functionPtr = true;
    #####:  807:                    funcStart = funcEnd = tokOffset2; // *
    #####:  808:                    tokOffset = tokOffset2->tokAt(3); // (
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  809:                    typeName = tokOffset->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  810:                    argStart = tokOffset;
    #####:  811:                    argEnd = tokOffset->link();
call    0 never executed
    #####:  812:                    tok = argEnd->next();
call    0 never executed
        -:  813:                }
        -:  814:
        -:  815:                // function
    #####:  816:                else if (isFunctionHead(tokOffset->link(), ";,")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:  817:                    function = true;
    #####:  818:                    if (tokOffset->link()->next()->str() == "const") {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  819:                        specStart = tokOffset->link()->next();
call    0 never executed
call    1 never executed
    #####:  820:                        specEnd = specStart;
        -:  821:                    }
    #####:  822:                    argStart = tokOffset;
    #####:  823:                    argEnd = tokOffset->link();
call    0 never executed
    #####:  824:                    tok = argEnd->next();
call    0 never executed
    #####:  825:                    if (specStart)
branch  0 never executed
branch  1 never executed
    #####:  826:                        tok = tok->next();
call    0 never executed
        -:  827:                }
        -:  828:
        -:  829:                // syntax error
        -:  830:                else
    #####:  831:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  832:            }
        -:  833:
        -:  834:            // unhandled typedef, skip it and continue
        -:  835:            else {
    #####:  836:                unsupportedTypedef(typeDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  837:                tok = deleteInvalidTypedef(typeDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  838:                if (tok == list.front())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:                    //now the next token to process is 'tok', not 'tok->next()';
    #####:  840:                    goback = true;
    #####:  841:                continue;
        -:  842:            }
        -:  843:        }
        -:  844:
        -:  845:        // typeof: typedef typeof ( ... ) type;
    #####:  846:        else if (Token::simpleMatch(tokOffset->previous(), "typeof (") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  847:                 Token::Match(tokOffset->link(), ") %type% ;")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  848:            argStart = tokOffset;
    #####:  849:            argEnd = tokOffset->link();
call    0 never executed
    #####:  850:            typeName = tokOffset->link()->next();
call    0 never executed
call    1 never executed
    #####:  851:            tok = typeName->next();
call    0 never executed
    #####:  852:            typeOf = true;
        -:  853:        }
        -:  854:
        -:  855:        // function: typedef ... ( ... type )( ... );
        -:  856:        //           typedef ... (( ... type )( ... ));
        -:  857:        //           typedef ... ( * ( ... type )( ... ));
    #####:  858:        else if (tokOffset->str() == "(" && (
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  859:                     (tokOffset->link() && Token::Match(tokOffset->link()->previous(), "%type% ) (") &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  860:                      Token::Match(tokOffset->link()->next()->link(), ") const|volatile|;")) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  861:                     (Token::simpleMatch(tokOffset, "( (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  862:                      tokOffset->next() && Token::Match(tokOffset->next()->link()->previous(), "%type% ) (") &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  863:                      Token::Match(tokOffset->next()->link()->next()->link(), ") const|volatile| ) ;|,")) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  864:                     (Token::simpleMatch(tokOffset, "( * (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  865:                      tokOffset->linkAt(2) && Token::Match(tokOffset->linkAt(2)->previous(), "%type% ) (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  866:                      Token::Match(tokOffset->linkAt(2)->next()->link(), ") const|volatile| ) ;|,")))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  867:            if (tokOffset->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  868:                tokOffset = tokOffset->next();
call    0 never executed
    #####:  869:            else if (Token::simpleMatch(tokOffset, "( * (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  870:                pointers.emplace_back("*");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  871:                tokOffset = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  872:            }
        -:  873:
    #####:  874:            if (tokOffset->link()->strAt(-2) == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  875:                functionPtr = true;
        -:  876:            else
    #####:  877:                function = true;
    #####:  878:            funcStart = tokOffset->next();
call    0 never executed
    #####:  879:            tokOffset = tokOffset->link();
call    0 never executed
    #####:  880:            funcEnd = tokOffset->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  881:            typeName = tokOffset->previous();
call    0 never executed
    #####:  882:            argStart = tokOffset->next();
call    0 never executed
    #####:  883:            argEnd = tokOffset->next()->link();
call    0 never executed
call    1 never executed
    #####:  884:            if (!argEnd)
branch  0 never executed
branch  1 never executed
    #####:  885:                syntaxError(argStart);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  886:
    #####:  887:            tok = argEnd->next();
call    0 never executed
    #####:  888:            Token *spec = tok;
    #####:  889:            if (Token::Match(spec, "const|volatile")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  890:                specStart = spec;
    #####:  891:                specEnd = spec;
    #####:  892:                while (Token::Match(spec->next(), "const|volatile")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  893:                    specEnd = spec->next();
call    0 never executed
    #####:  894:                    spec = specEnd;
        -:  895:                }
    #####:  896:                tok = specEnd->next();
call    0 never executed
        -:  897:            }
    #####:  898:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:  899:                syntaxError(specEnd);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  900:
    #####:  901:            if (tok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  902:                tok = tok->next();
call    0 never executed
        -:  903:        }
        -:  904:
    #####:  905:        else if (Token::Match(tokOffset, "( %type% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  906:            function = true;
    #####:  907:            if (tokOffset->link()->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  908:                tok = tokOffset->link()->next();
call    0 never executed
call    1 never executed
    #####:  909:                tokOffset = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:                typeName = tokOffset->previous();
call    0 never executed
    #####:  911:                argStart = tokOffset;
    #####:  912:                argEnd = tokOffset->link();
call    0 never executed
        -:  913:            } else {
        -:  914:                // internal error
    #####:  915:                continue;
        -:  916:            }
        -:  917:        }
        -:  918:
        -:  919:        // pointer to function returning pointer to function
    #####:  920:        else if (Token::Match(tokOffset, "( * ( * %type% ) (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  921:                 Token::simpleMatch(tokOffset->linkAt(6), ") ) (") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  922:                 Token::Match(tokOffset->linkAt(6)->linkAt(2), ") ;|,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  923:            functionPtrRetFuncPtr = true;
        -:  924:
    #####:  925:            tokOffset = tokOffset->tokAt(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:            typeName = tokOffset->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:            argStart = tokOffset;
    #####:  928:            argEnd = tokOffset->link();
call    0 never executed
    #####:  929:            if (!argEnd)
branch  0 never executed
branch  1 never executed
    #####:  930:                syntaxError(arrayStart);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  931:
    #####:  932:            argFuncRetStart = argEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:            argFuncRetEnd = argFuncRetStart->link();
call    0 never executed
    #####:  934:            if (!argFuncRetEnd)
branch  0 never executed
branch  1 never executed
    #####:  935:                syntaxError(argFuncRetStart);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  936:
    #####:  937:            tok = argFuncRetEnd->next();
call    0 never executed
        -:  938:        }
        -:  939:
        -:  940:        // function returning pointer to function
    #####:  941:        else if (Token::Match(tokOffset, "( * %type% (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  942:                 Token::simpleMatch(tokOffset->linkAt(3), ") ) (") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  943:                 Token::Match(tokOffset->linkAt(3)->linkAt(2), ") ;|,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  944:            functionRetFuncPtr = true;
        -:  945:
    #####:  946:            tokOffset = tokOffset->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:            typeName = tokOffset->previous();
call    0 never executed
    #####:  948:            argStart = tokOffset;
    #####:  949:            argEnd = tokOffset->link();
call    0 never executed
        -:  950:
    #####:  951:            argFuncRetStart = argEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:            if (!argFuncRetStart)
branch  0 never executed
branch  1 never executed
    #####:  953:                syntaxError(tokOffset);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  954:
    #####:  955:            argFuncRetEnd = argFuncRetStart->link();
call    0 never executed
    #####:  956:            if (!argFuncRetEnd)
branch  0 never executed
branch  1 never executed
    #####:  957:                syntaxError(tokOffset);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  958:
    #####:  959:            tok = argFuncRetEnd->next();
call    0 never executed
    #####:  960:        } else if (Token::Match(tokOffset, "( * ( %type% ) (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  961:            functionRetFuncPtr = true;
        -:  962:
    #####:  963:            tokOffset = tokOffset->tokAt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  964:            typeName = tokOffset->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:            argStart = tokOffset;
    #####:  966:            argEnd = tokOffset->link();
call    0 never executed
    #####:  967:            if (!argEnd)
branch  0 never executed
branch  1 never executed
    #####:  968:                syntaxError(arrayStart);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  969:
    #####:  970:            argFuncRetStart = argEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  971:            if (!argFuncRetStart)
branch  0 never executed
branch  1 never executed
    #####:  972:                syntaxError(tokOffset);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  973:
    #####:  974:            argFuncRetEnd = argFuncRetStart->link();
call    0 never executed
    #####:  975:            if (!argFuncRetEnd)
branch  0 never executed
branch  1 never executed
    #####:  976:                syntaxError(tokOffset);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  977:
    #####:  978:            tok = argFuncRetEnd->next();
call    0 never executed
        -:  979:        }
        -:  980:
        -:  981:        // pointer/reference to array
    #####:  982:        else if (Token::Match(tokOffset, "( *|& %type% ) [")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  983:            ptrToArray = (tokOffset->next()->str() == "*");
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  984:            refToArray = !ptrToArray;
    #####:  985:            tokOffset = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  986:            typeName = tokOffset;
    #####:  987:            arrayStart = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  988:            arrayEnd = arrayStart->link();
call    0 never executed
    #####:  989:            if (!arrayEnd)
branch  0 never executed
branch  1 never executed
    #####:  990:                syntaxError(arrayStart);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  991:
    #####:  992:            tok = arrayEnd->next();
call    0 never executed
        -:  993:        }
        -:  994:
        -:  995:        // pointer to class member
    #####:  996:        else if (Token::Match(tokOffset, "( %type% :: * %type% ) ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  997:            tokOffset = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  998:            namespaceStart = tokOffset->previous();
call    0 never executed
    #####:  999:            namespaceEnd = tokOffset;
    #####: 1000:            ptrMember = true;
    #####: 1001:            tokOffset = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:            typeName = tokOffset;
    #####: 1003:            tok = tokOffset->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1004:        }
        -: 1005:
        -: 1006:        // unhandled typedef, skip it and continue
        -: 1007:        else {
    #####: 1008:            unsupportedTypedef(typeDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1009:            tok = deleteInvalidTypedef(typeDef);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:            if (tok == list.front())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:                //now the next token to process is 'tok', not 'tok->next()';
    #####: 1012:                goback = true;
    #####: 1013:            continue;
        -: 1014:        }
        -: 1015:
        5: 1016:        bool done = false;
        5: 1017:        bool ok = true;
        -: 1018:
       15: 1019:        while (!done) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       10: 1020:            std::string pattern = typeName->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        5: 1021:            int scope = 0;
        5: 1022:            bool simplifyType = false;
        5: 1023:            bool inMemberFunc = false;
        5: 1024:            int memberScope = 0;
        5: 1025:            bool globalScope = false;
        5: 1026:            int classLevel = spaceInfo.size();
call    0 returned 100%
        -: 1027:
      157: 1028:            for (Token *tok2 = tok; tok2; tok2 = tok2->next()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
      152: 1029:                if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1030:                    return;
        -: 1031:
      152: 1032:                if (tok2->link()) { // Pre-check for performance
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
        -: 1033:                    // check for end of scope
       34: 1034:                    if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
        -: 1035:                        // check for end of member function
        6: 1036:                        if (inMemberFunc) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1037:                            --memberScope;
    #####: 1038:                            if (memberScope == 0)
branch  0 never executed
branch  1 never executed
    #####: 1039:                                inMemberFunc = false;
        -: 1040:                        }
        -: 1041:
        6: 1042:                        if (classLevel > 0 && tok2 == spaceInfo[classLevel - 1].bodyEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1043:                            --classLevel;
    #####: 1044:                            pattern.clear();
call    0 never executed
        -: 1045:
    #####: 1046:                            for (int i = classLevel; i < spaceInfo.size(); ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1047:                                pattern += (spaceInfo[i].className + " :: ");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1048:
    #####: 1049:                            pattern += typeName->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1050:                        } else {
        6: 1051:                            if (scope == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1052:                                break;
        6: 1053:                            --scope;
        -: 1054:                        }
        -: 1055:                    }
        -: 1056:
        -: 1057:                    // check for member functions
       28: 1058:                    else if (isCPP() && Token::Match(tok2, ")|] const| {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
branch  8 taken 14% (fallthrough)
branch  9 taken 86%
        4: 1059:                        const Token *temp = tok2;
        4: 1060:                        while (temp && temp->str() == "]" && temp->link() && temp->link()->previous())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 1061:                            temp = temp->link()->previous();
call    0 never executed
call    1 never executed
        4: 1062:                        if (!temp || !temp->link() || !temp->link()->previous())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1063:                            continue;
        4: 1064:                        const Token *func = temp->link()->previous();
call    0 returned 100%
call    1 returned 100%
        4: 1065:                        if (temp->str() != ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1066:                            continue;
        4: 1067:                        if (!func || !func->previous()) // Ticket #4239
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1068:                            continue;
        -: 1069:
        -: 1070:                        /** @todo add support for multi-token operators */
        4: 1071:                        if (func->previous()->str() == "operator")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1072:                            func = func->previous();
call    0 never executed
        -: 1073:
        4: 1074:                        if (!func->previous())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1075:                            syntaxError(func);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1076:
        -: 1077:                        // check for qualifier
        4: 1078:                        if (func->previous()->str() == "::") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -: 1079:                            // check for available and matching class name
    #####: 1080:                            if (!spaceInfo.empty() && classLevel < spaceInfo.size() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1081:                                func->strAt(-2) == spaceInfo[classLevel].className) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1082:                                memberScope = 0;
    #####: 1083:                                inMemberFunc = true;
        -: 1084:                            }
        -: 1085:                        }
        -: 1086:                    }
        -: 1087:
        -: 1088:                    // check for entering a new scope
       24: 1089:                    else if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -: 1090:                        // check for entering a new namespace
        6: 1091:                        if (isCPP() && tok2->strAt(-2) == "namespace") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1092:                            if (classLevel < spaceInfo.size() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1093:                                spaceInfo[classLevel].isNamespace &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1094:                                spaceInfo[classLevel].className == tok2->previous()->str()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1095:                                spaceInfo[classLevel].bodyEnd = tok2->link();
call    0 never executed
call    1 never executed
    #####: 1096:                                ++classLevel;
    #####: 1097:                                pattern.clear();
call    0 never executed
    #####: 1098:                                for (int i = classLevel; i < spaceInfo.size(); ++i)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1099:                                    pattern += spaceInfo[i].className + " :: ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1100:
    #####: 1101:                                pattern += typeName->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1102:                            }
    #####: 1103:                            ++scope;
        -: 1104:                        }
        -: 1105:
        -: 1106:                        // keep track of scopes within member function
        6: 1107:                        if (inMemberFunc)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1108:                            ++memberScope;
        -: 1109:
        6: 1110:                        ++scope;
        -: 1111:                    }
        -: 1112:                }
        -: 1113:
        -: 1114:                // check for operator typedef
        -: 1115:                /** @todo add support for multi-token operators */
      354: 1116:                else if (isCPP() &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      118: 1117:                         tok2->str() == "operator" &&
call    0 returned 100%
call    1 returned 100%
branch  2 never executed
branch  3 never executed
    #####: 1118:                         tok2->next() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1119:                         tok2->next()->str() == typeName->str() &&
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1120:                         tok2->linkAt(2) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
      118: 1121:                         tok2->strAt(2) == "(" &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1122:                         Token::Match(tok2->linkAt(2), ") const| {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1123:                    // check for qualifier
    #####: 1124:                    if (tok2->previous()->str() == "::") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1125:                        // check for available and matching class name
    #####: 1126:                        if (!spaceInfo.empty() && classLevel < spaceInfo.size() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1127:                            tok2->strAt(-2) == spaceInfo[classLevel].className) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1128:                            tok2 = tok2->next();
call    0 never executed
    #####: 1129:                            simplifyType = true;
        -: 1130:                        }
        -: 1131:                    }
        -: 1132:                }
        -: 1133:
        -: 1134:                // check for typedef that can be substituted
      131: 1135:                else if (Token::simpleMatch(tok2, pattern.c_str()) ||
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 89% (fallthrough)
branch  5 taken 11%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 11% (fallthrough)
branch  9 taken 89%
    #####: 1136:                         (inMemberFunc && tok2->str() == typeName->str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1137:                    // member function class variables don't need qualification
       13: 1138:                    if (!(inMemberFunc && tok2->str() == typeName->str()) && pattern.find("::") != std::string::npos) { // has a "something ::"
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1139:                        Token *start = tok2;
    #####: 1140:                        int count = 0;
    #####: 1141:                        int back = classLevel - 1;
    #####: 1142:                        bool good = true;
        -: 1143:                        // check for extra qualification
    #####: 1144:                        while (back >= 0) {
branch  0 never executed
branch  1 never executed
    #####: 1145:                            Token *qualificationTok = start->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1146:                            if (!Token::Match(qualificationTok, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1147:                                break;
    #####: 1148:                            if (qualificationTok->str() == spaceInfo[back].className) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1149:                                start = qualificationTok;
    #####: 1150:                                back--;
    #####: 1151:                                count++;
        -: 1152:                            } else {
    #####: 1153:                                good = false;
    #####: 1154:                                break;
        -: 1155:                            }
        -: 1156:                        }
        -: 1157:                        // check global namespace
    #####: 1158:                        if (good && back == 0 && start->strAt(-1) == "::")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1159:                            good = false;
        -: 1160:
    #####: 1161:                        if (good) {
branch  0 never executed
branch  1 never executed
        -: 1162:                            // remove any extra qualification if present
    #####: 1163:                            while (count) {
branch  0 never executed
branch  1 never executed
    #####: 1164:                                tok2->tokAt(-3)->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:                                --count;
        -: 1166:                            }
        -: 1167:
        -: 1168:                            // remove global namespace if present
    #####: 1169:                            if (tok2->strAt(-1) == "::") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1170:                                tok2->tokAt(-2)->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1171:                                globalScope = true;
        -: 1172:                            }
        -: 1173:
        -: 1174:                            // remove qualification if present
    #####: 1175:                            for (int i = classLevel; i < spaceInfo.size(); ++i) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1176:                                tok2->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1177:                            }
    #####: 1178:                            simplifyType = true;
        -: 1179:                        }
        -: 1180:                    } else {
       13: 1181:                        if (tok2->strAt(-1) == "::") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1182:                            int relativeSpaceInfoSize = spaceInfo.size();
call    0 never executed
    #####: 1183:                            Token * tokBeforeType = tok2->previous();
call    0 never executed
    #####: 1184:                            while (relativeSpaceInfoSize != 0 &&
branch  0 never executed
branch  1 never executed
    #####: 1185:                                   tokBeforeType && tokBeforeType->str() == "::" &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1186:                                   tokBeforeType->strAt(-1) == spaceInfo[relativeSpaceInfoSize-1].className) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 1187:                                tokBeforeType = tokBeforeType->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1188:                                --relativeSpaceInfoSize;
        -: 1189:                            }
    #####: 1190:                            if (tokBeforeType && tokBeforeType->str() != "::") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1191:                                Token::eraseTokens(tokBeforeType, tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1192:                                simplifyType = true;
        -: 1193:                            }
       13: 1194:                        } else if (Token::Match(tok2->previous(), "case|;|{|} %type% :")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1195:                            tok2 = tok2->next();
call    0 never executed
       13: 1196:                        } else if (duplicateTypedef(&tok2, typeName, typeDef)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -: 1197:                            // skip to end of scope if not already there
    #####: 1198:                            if (tok2->str() != "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1199:                                while (tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1200:                                    if (tok2->next()->str() == "{")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1201:                                        tok2 = tok2->linkAt(1)->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1202:                                    else if (tok2->next()->str() == "}")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1203:                                        break;
        -: 1204:
    #####: 1205:                                    tok2 = tok2->next();
call    0 never executed
        -: 1206:                                }
        -: 1207:                            }
       13: 1208:                        } else if (Token::Match(tok2->tokAt(-2), "%type% *|&")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 92% (fallthrough)
branch  7 taken 8%
        -: 1209:                            // Ticket #5868: Don't substitute variable names
       12: 1210:                        } else if (tok2->previous()->str() != ".") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       12: 1211:                            simplifyType = true;
        -: 1212:                        }
        -: 1213:                    }
        -: 1214:                }
        -: 1215:
      152: 1216:                if (simplifyType) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1217:                    // can't simplify 'operator functionPtr ()' and 'functionPtr operator ... ()'
       12: 1218:                    if (functionPtr && (tok2->previous()->str() == "operator" ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 1219:                                        (tok2->next() && tok2->next()->str() == "operator"))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1220:                        simplifyType = false;
    #####: 1221:                        tok2 = tok2->next();
call    0 never executed
    #####: 1222:                        continue;
        -: 1223:                    }
        -: 1224:
        -: 1225:                    // There are 2 categories of typedef substitutions:
        -: 1226:                    // 1. variable declarations that preserve the variable name like
        -: 1227:                    //    global, local, and function parameters
        -: 1228:                    // 2. not variable declarations that have no name like derived
        -: 1229:                    //    classes, casts, operators, and template parameters
        -: 1230:
        -: 1231:                    // try to determine which category this substitution is
       12: 1232:                    bool inCast = false;
       12: 1233:                    bool inTemplate = false;
       12: 1234:                    bool inOperator = false;
       12: 1235:                    bool inSizeof = false;
        -: 1236:
       12: 1237:                    const bool sameStartEnd = (typeStart == typeEnd);
        -: 1238:
        -: 1239:                    // check for derived class: class A : some_typedef {
       12: 1240:                    const bool isDerived = Token::Match(tok2->previous(), "public|protected|private %type% {|,");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1241:
        -: 1242:                    // check for cast: (some_typedef) A or static_cast<some_typedef>(A)
        -: 1243:                    // todo: check for more complicated casts like: (const some_typedef *)A
       39: 1244:                    if ((tok2->previous()->str() == "(" && tok2->next()->str() == ")" && tok2->strAt(-2) != "sizeof") ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 25% (fallthrough)
branch 15 taken 75%
branch 16 taken 25% (fallthrough)
branch 17 taken 75%
       36: 1245:                        (tok2->previous()->str() == "<" && Token::simpleMatch(tok2->next(), "> (")) ||
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
        9: 1246:                        Token::Match(tok2->tokAt(-2), "( const %name% )"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        3: 1247:                        inCast = true;
        -: 1248:
        -: 1249:                    // check for template parameters: t<some_typedef> t1
        9: 1250:                    else if (Token::Match(tok2->previous(), "<|,") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 1251:                             Token::Match(tok2->next(), "&|*| &|*| >|,"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1252:                        inTemplate = true;
        -: 1253:
        9: 1254:                    else if (Token::Match(tok2->tokAt(-2), "sizeof ( %type% )"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1255:                        inSizeof = true;
        -: 1256:
        -: 1257:                    // check for operator
       24: 1258:                    if (tok2->strAt(-1) == "operator" ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
       12: 1259:                        Token::simpleMatch(tok2->tokAt(-2), "operator const"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
    #####: 1260:                        inOperator = true;
        -: 1261:
       12: 1262:                    if (typeStart->str() == "typename" && tok2->strAt(-1)=="typename") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -: 1263:                        // Remove one typename if it is already contained in the goal
    #####: 1264:                        typeStart = typeStart->next();
call    0 never executed
        -: 1265:                    }
        -: 1266:
        -: 1267:                    // skip over class or struct in derived class declaration
       12: 1268:                    bool structRemoved = false;
       12: 1269:                    if (isDerived && Token::Match(typeStart, "class|struct")) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1270:                        if (typeStart->str() == "struct")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1271:                            structRemoved = true;
    #####: 1272:                        typeStart = typeStart->next();
call    0 never executed
        -: 1273:                    }
       12: 1274:                    if (Token::Match(typeStart, "struct|class") && Token::Match(tok2, "%name% ::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1275:                        typeStart = typeStart->next();
call    0 never executed
        -: 1276:
       12: 1277:                    if (sameStartEnd)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        3: 1278:                        typeEnd = typeStart;
        -: 1279:
        -: 1280:                    // start substituting at the typedef name by replacing it with the type
       12: 1281:                    tok2->str(typeStart->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1282:
        -: 1283:                    // restore qualification if it was removed
       12: 1284:                    if (typeStart->str() == "struct" || structRemoved) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 25% (fallthrough)
branch  7 taken 75%
        3: 1285:                        if (structRemoved)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1286:                            tok2 = tok2->previous();
call    0 never executed
        -: 1287:
        3: 1288:                        if (globalScope) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1289:                            tok2->insertToken("::");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1290:                            tok2 = tok2->next();
call    0 never executed
        -: 1291:                        }
        -: 1292:
        3: 1293:                        for (int i = classLevel; i < spaceInfo.size(); ++i) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1294:                            tok2->insertToken(spaceInfo[i].className);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1295:                            tok2 = tok2->next();
call    0 never executed
    #####: 1296:                            tok2->insertToken("::");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1297:                            tok2 = tok2->next();
call    0 never executed
        -: 1298:                        }
        -: 1299:                    }
        -: 1300:
        -: 1301:                    // add remainder of type
       12: 1302:                    tok2 = TokenList::copyTokens(tok2, typeStart->next(), typeEnd);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1303:
       12: 1304:                    if (!pointers.empty()) {
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        4: 1305:                        for (const std::string &p : pointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        2: 1306:                            tok2->insertToken(p);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1307:                            tok2 = tok2->next();
call    0 returned 100%
        -: 1308:                        }
        -: 1309:                    }
        -: 1310:
       12: 1311:                    if (funcStart && funcEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 1312:                        tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1313:                        tok2 = tok2->next();
call    0 never executed
    #####: 1314:                        Token *tok3 = tok2;
    #####: 1315:                        tok2 = TokenList::copyTokens(tok2, funcStart, funcEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1316:
    #####: 1317:                        if (!inCast)
branch  0 never executed
branch  1 never executed
    #####: 1318:                            tok2 = processFunc(tok2, inOperator);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1319:
    #####: 1320:                        if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1321:                            break;
        -: 1322:
    #####: 1323:                        tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1324:                        tok2 = tok2->next();
call    0 never executed
    #####: 1325:                        Token::createMutualLinks(tok2, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1326:
    #####: 1327:                        tok2 = TokenList::copyTokens(tok2, argStart, argEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1328:
    #####: 1329:                        if (specStart) {
branch  0 never executed
branch  1 never executed
    #####: 1330:                            Token *spec = specStart;
    #####: 1331:                            tok2->insertToken(spec->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1332:                            tok2 = tok2->next();
call    0 never executed
    #####: 1333:                            while (spec != specEnd) {
branch  0 never executed
branch  1 never executed
    #####: 1334:                                spec = spec->next();
call    0 never executed
    #####: 1335:                                tok2->insertToken(spec->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1336:                                tok2 = tok2->next();
call    0 never executed
        -: 1337:                            }
    #####: 1338:                        }
        -: 1339:                    }
        -: 1340:
       12: 1341:                    else if (functionPtr || function) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1342:                        // don't add parentheses around function names because it
        -: 1343:                        // confuses other simplifications
    #####: 1344:                        bool needParen = true;
    #####: 1345:                        if (!inTemplate && function && tok2->next() && tok2->next()->str() != "*")
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1346:                            needParen = false;
    #####: 1347:                        if (needParen) {
branch  0 never executed
branch  1 never executed
    #####: 1348:                            tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1349:                            tok2 = tok2->next();
call    0 never executed
        -: 1350:                        }
    #####: 1351:                        Token *tok3 = tok2;
    #####: 1352:                        if (namespaceStart) {
branch  0 never executed
branch  1 never executed
    #####: 1353:                            const Token *tok4 = namespaceStart;
        -: 1354:
    #####: 1355:                            while (tok4 != namespaceEnd) {
branch  0 never executed
branch  1 never executed
    #####: 1356:                                tok2->insertToken(tok4->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1357:                                tok2 = tok2->next();
call    0 never executed
    #####: 1358:                                tok4 = tok4->next();
call    0 never executed
        -: 1359:                            }
    #####: 1360:                            tok2->insertToken(namespaceEnd->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1361:                            tok2 = tok2->next();
call    0 never executed
        -: 1362:                        }
    #####: 1363:                        if (functionPtr) {
branch  0 never executed
branch  1 never executed
    #####: 1364:                            tok2->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1365:                            tok2 = tok2->next();
call    0 never executed
        -: 1366:                        }
        -: 1367:
    #####: 1368:                        if (!inCast)
branch  0 never executed
branch  1 never executed
    #####: 1369:                            tok2 = processFunc(tok2, inOperator);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1370:
    #####: 1371:                        if (needParen) {
branch  0 never executed
branch  1 never executed
    #####: 1372:                            if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1373:                                syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1374:
    #####: 1375:                            tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1376:                            tok2 = tok2->next();
call    0 never executed
    #####: 1377:                            Token::createMutualLinks(tok2, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1378:                        }
    #####: 1379:                        if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1380:                            syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1381:
    #####: 1382:                        tok2 = TokenList::copyTokens(tok2, argStart, argEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1383:                        if (inTemplate) {
branch  0 never executed
branch  1 never executed
    #####: 1384:                            if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1385:                                syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1386:
    #####: 1387:                            tok2 = tok2->next();
call    0 never executed
        -: 1388:                        }
        -: 1389:
    #####: 1390:                        if (specStart) {
branch  0 never executed
branch  1 never executed
    #####: 1391:                            Token *spec = specStart;
    #####: 1392:                            tok2->insertToken(spec->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1393:                            tok2 = tok2->next();
call    0 never executed
    #####: 1394:                            while (spec != specEnd) {
branch  0 never executed
branch  1 never executed
    #####: 1395:                                spec = spec->next();
call    0 never executed
    #####: 1396:                                tok2->insertToken(spec->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1397:                                tok2 = tok2->next();
call    0 never executed
        -: 1398:                            }
    #####: 1399:                        }
       12: 1400:                    } else if (functionRetFuncPtr || functionPtrRetFuncPtr) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1401:                        tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1402:                        tok2 = tok2->next();
call    0 never executed
    #####: 1403:                        Token *tok3 = tok2;
    #####: 1404:                        tok2->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1405:                        tok2 = tok2->next();
call    0 never executed
        -: 1406:
    #####: 1407:                        Token * tok4 = nullptr;
    #####: 1408:                        if (functionPtrRetFuncPtr) {
branch  0 never executed
branch  1 never executed
    #####: 1409:                            tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1410:                            tok2 = tok2->next();
call    0 never executed
    #####: 1411:                            tok4 = tok2;
    #####: 1412:                            tok2->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1413:                            tok2 = tok2->next();
call    0 never executed
        -: 1414:                        }
        -: 1415:
        -: 1416:                        // skip over variable name if there
    #####: 1417:                        if (!inCast) {
branch  0 never executed
branch  1 never executed
    #####: 1418:                            if (!tok2 || !tok2->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1419:                                syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1420:
    #####: 1421:                            if (tok2->next()->str() != ")")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1422:                                tok2 = tok2->next();
call    0 never executed
        -: 1423:                        }
        -: 1424:
    #####: 1425:                        if (tok4 && functionPtrRetFuncPtr) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1426:                            tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1427:                            tok2 = tok2->next();
call    0 never executed
    #####: 1428:                            Token::createMutualLinks(tok2, tok4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1429:                        }
        -: 1430:
    #####: 1431:                        tok2 = TokenList::copyTokens(tok2, argStart, argEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1432:
    #####: 1433:                        tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1434:                        tok2 = tok2->next();
call    0 never executed
    #####: 1435:                        Token::createMutualLinks(tok2, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1436:
    #####: 1437:                        tok2 = TokenList::copyTokens(tok2, argFuncRetStart, argFuncRetEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
       12: 1438:                    } else if (ptrToArray || refToArray) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1439:                        tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1440:                        tok2 = tok2->next();
call    0 never executed
    #####: 1441:                        Token *tok3 = tok2;
        -: 1442:
    #####: 1443:                        if (ptrToArray)
branch  0 never executed
branch  1 never executed
    #####: 1444:                            tok2->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1445:                        else
    #####: 1446:                            tok2->insertToken("&");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1447:                        tok2 = tok2->next();
call    0 never executed
        -: 1448:
        -: 1449:                        // skip over name
    #####: 1450:                        if (tok2->next() && tok2->next()->str() != ")") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1451:                            if (tok2->next()->str() != "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1452:                                tok2 = tok2->next();
call    0 never executed
        -: 1453:
        -: 1454:                            // check for function and skip over args
    #####: 1455:                            if (tok2 && tok2->next() && tok2->next()->str() == "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1456:                                tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
        -: 1457:
        -: 1458:                            // check for array
    #####: 1459:                            if (tok2 && tok2->next() && tok2->next()->str() == "[")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1460:                                tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
        -: 1461:                        } else {
        -: 1462:                            // syntax error
        -: 1463:                        }
        -: 1464:
    #####: 1465:                        tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1466:                        Token::createMutualLinks(tok2->next(), tok3);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
       12: 1467:                    } else if (ptrMember) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1468:                        if (Token::simpleMatch(tok2, "* (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1469:                            tok2->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1470:                            tok2 = tok2->next();
call    0 never executed
        -: 1471:                        } else {
        -: 1472:                            // This is the case of casting operator.
        -: 1473:                            // Name is not available, and () should not be
        -: 1474:                            // inserted
    #####: 1475:                            const bool castOperator = inOperator && Token::Match(tok2, "%type% (");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1476:                            Token *openParenthesis = nullptr;
        -: 1477:
    #####: 1478:                            if (!castOperator) {
branch  0 never executed
branch  1 never executed
    #####: 1479:                                tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1480:                                tok2 = tok2->next();
call    0 never executed
        -: 1481:
    #####: 1482:                                openParenthesis = tok2;
        -: 1483:                            }
        -: 1484:
    #####: 1485:                            const Token *tok4 = namespaceStart;
        -: 1486:
    #####: 1487:                            while (tok4 != namespaceEnd) {
branch  0 never executed
branch  1 never executed
    #####: 1488:                                tok2->insertToken(tok4->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1489:                                tok2 = tok2->next();
call    0 never executed
    #####: 1490:                                tok4 = tok4->next();
call    0 never executed
        -: 1491:                            }
    #####: 1492:                            tok2->insertToken(namespaceEnd->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1493:                            tok2 = tok2->next();
call    0 never executed
        -: 1494:
    #####: 1495:                            tok2->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1496:                            tok2 = tok2->next();
call    0 never executed
        -: 1497:
    #####: 1498:                            if (openParenthesis) {
branch  0 never executed
branch  1 never executed
        -: 1499:                                // Skip over name, if any
    #####: 1500:                                if (Token::Match(tok2->next(), "%name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1501:                                    tok2 = tok2->next();
call    0 never executed
        -: 1502:
    #####: 1503:                                tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1504:                                tok2 = tok2->next();
call    0 never executed
        -: 1505:
    #####: 1506:                                Token::createMutualLinks(tok2, openParenthesis);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1507:                            }
        -: 1508:                        }
       12: 1509:                    } else if (typeOf) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1510:                        tok2 = TokenList::copyTokens(tok2, argStart, argEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
       12: 1511:                    } else if (Token::Match(tok2, "%name% [")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1512:                        while (Token::Match(tok2, "%name%|] [")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1513:                            tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1514:                        }
    #####: 1515:                        tok2 = tok2->previous();
call    0 never executed
        -: 1516:                    }
        -: 1517:
       12: 1518:                    if (arrayStart && arrayEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 1519:                        do {
    #####: 1520:                            if (!tok2->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1521:                                syntaxError(tok2); // can't recover so quit
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1522:
    #####: 1523:                            if (!inCast && !inSizeof && !inTemplate)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1524:                                tok2 = tok2->next();
call    0 never executed
        -: 1525:
    #####: 1526:                            if (tok2->str() == "const")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1527:                                tok2 = tok2->next();
call    0 never executed
        -: 1528:
        -: 1529:                            // reference or pointer to array?
    #####: 1530:                            if (tok2->str() == "&" || tok2->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1531:                                tok2 = tok2->previous();
call    0 never executed
    #####: 1532:                                tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1533:                                Token *tok3 = tok2->next();
call    0 never executed
        -: 1534:
        -: 1535:                                // handle missing variable name
    #####: 1536:                                if (tok2->strAt(3) == ")" || tok2->strAt(3) == "," || tok2->strAt(3) == "(")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####: 1537:                                    tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1538:                                else
    #####: 1539:                                    tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1540:                                if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 1541:                                    syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1542:
    #####: 1543:                                while (tok2->strAt(1) == "::")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1544:                                    tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1545:
        -: 1546:                                // skip over function parameters
    #####: 1547:                                if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1548:                                    tok2 = tok2->link();
call    0 never executed
        -: 1549:
    #####: 1550:                                if (tok2->strAt(1) == "(")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1551:                                    tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1552:
        -: 1553:                                // skip over const/noexcept
    #####: 1554:                                while (Token::Match(tok2->next(), "const|noexcept"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1555:                                    tok2 = tok2->next();
call    0 never executed
        -: 1556:
    #####: 1557:                                tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1558:                                tok2 = tok2->next();
call    0 never executed
    #####: 1559:                                Token::createMutualLinks(tok2, tok3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1560:                            }
        -: 1561:
    #####: 1562:                            if (!tok2->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1563:                                syntaxError(tok2); // can't recover so quit
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1564:
        -: 1565:                            // skip over array dimensions
    #####: 1566:                            while (tok2->next()->str() == "[")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1567:                                tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1568:
    #####: 1569:                            tok2 = TokenList::copyTokens(tok2, arrayStart, arrayEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1570:                            if (!tok2->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1571:                                syntaxError(tok2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1572:
    #####: 1573:                            if (tok2->str() == "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1574:                                if (!tok2->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1575:                                    syntaxError(tok2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1576:                                if (tok2->next()->str() == "{")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1577:                                    tok2 = tok2->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1578:                                else if (tok2->next()->str().at(0) == '\"')
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1579:                                    tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1580:                            }
    #####: 1581:                        } while (Token::Match(tok2, ", %name% ;|=|,"));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 1582:                    }
        -: 1583:
       12: 1584:                    simplifyType = false;
        -: 1585:                }
      152: 1586:                if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1587:                    break;
        -: 1588:            }
        -: 1589:
        5: 1590:            if (!tok)
branch  0 taken 0%
branch  1 taken 100%
    #####: 1591:                syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1592:
        5: 1593:            if (tok->str() == ";")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        5: 1594:                done = true;
    #####: 1595:            else if (tok->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1596:                arrayStart = nullptr;
    #####: 1597:                arrayEnd = nullptr;
    #####: 1598:                tokOffset = tok->next();
call    0 never executed
    #####: 1599:                pointers.clear();
call    0 never executed
        -: 1600:
    #####: 1601:                while (Token::Match(tokOffset, "*|&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1602:                    pointers.push_back(tokOffset->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1603:                    tokOffset = tokOffset->next();
call    0 never executed
        -: 1604:                }
        -: 1605:
    #####: 1606:                if (Token::Match(tokOffset, "%type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1607:                    typeName = tokOffset;
    #####: 1608:                    tokOffset = tokOffset->next();
call    0 never executed
        -: 1609:
    #####: 1610:                    if (tokOffset && tokOffset->str() == "[") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1611:                        arrayStart = tokOffset;
        -: 1612:
    #####: 1613:                        for (;;) {
    #####: 1614:                            while (tokOffset->next() && !Token::Match(tokOffset->next(), ";|,"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1615:                                tokOffset = tokOffset->next();
call    0 never executed
        -: 1616:
    #####: 1617:                            if (!tokOffset->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1618:                                return; // invalid input
    #####: 1619:                            else if (tokOffset->next()->str() == ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1620:                                break;
    #####: 1621:                            else if (tokOffset->str() == "]")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1622:                                break;
        -: 1623:                            else
    #####: 1624:                                tokOffset = tokOffset->next();
call    0 never executed
        -: 1625:                        }
        -: 1626:
    #####: 1627:                        arrayEnd = tokOffset;
    #####: 1628:                        tokOffset = tokOffset->next();
call    0 never executed
        -: 1629:                    }
        -: 1630:
    #####: 1631:                    if (Token::Match(tokOffset, ";|,"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1632:                        tok = tokOffset;
        -: 1633:                    else {
        -: 1634:                        // we encountered a typedef we don't support yet so just continue
    #####: 1635:                        done = true;
    #####: 1636:                        ok = false;
        -: 1637:                    }
        -: 1638:                } else {
        -: 1639:                    // we encountered a typedef we don't support yet so just continue
    #####: 1640:                    done = true;
    #####: 1641:                    ok = false;
        -: 1642:                }
        -: 1643:            } else {
        -: 1644:                // something is really wrong (internal error)
    #####: 1645:                done = true;
    #####: 1646:                ok = false;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 1647:            }
        -: 1648:        }
        -: 1649:
        5: 1650:        if (ok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1651:            // remove typedef
        5: 1652:            Token::eraseTokens(typeDef, tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1653:
        5: 1654:            if (typeDef != list.front()) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
        4: 1655:                tok = typeDef->previous();
call    0 returned 100%
        4: 1656:                tok->deleteNext();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1657:                //no need to remove last token in the list
        4: 1658:                if (tok->tokAt(2))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4: 1659:                    tok->deleteNext();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1660:            } else {
        1: 1661:                list.front()->deleteThis();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1662:                //no need to remove last token in the list
        1: 1663:                if (list.front()->next())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 1664:                    list.front()->deleteThis();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 1665:                tok = list.front();
call    0 returned 100%
        -: 1666:                //now the next token to process is 'tok', not 'tok->next()';
        1: 1667:                goback = true;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
        -: 1668:            }
        -: 1669:        }
        -: 1670:    }
        -: 1671:}
        -: 1672:
        -: 1673:namespace {
function _ZN12_GLOBAL__N_110ScopeInfo3D2Ev called 1157 returned 100% blocks executed 100%
     1157: 1674:    struct ScopeInfo3 {
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_110ScopeInfo3C2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPK5Token called 1157 returned 100% blocks executed 100%
     1157: 1675:        ScopeInfo3(const std::string &name_, const Token *bodyEnd_) : name(name_), bodyEnd(bodyEnd_) {}
call    0 returned 100%
call    1 returned 100%
        -: 1676:        const std::string name;
        -: 1677:        const Token * const bodyEnd;
        -: 1678:        std::set<std::string> usingNamespaces;
        -: 1679:    };
        -: 1680:
function _ZN12_GLOBAL__N_112getScopeNameERKNSt7__debug4listINS_10ScopeInfo3ESaIS2_EEE called 3 returned 100% blocks executed 45%
        3: 1681:    std::string getScopeName(const std::list<ScopeInfo3> &scopeInfo)
        -: 1682:    {
        3: 1683:        std::string ret;
call    0 returned 100%
        7: 1684:        for (const ScopeInfo3 &i : scopeInfo) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 57% (fallthrough)
branch  4 taken 43%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        4: 1685:            if (!i.name.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1686:                ret += (ret.empty() ? "" : " :: ") + i.name;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1687:        }
        3: 1688:        return ret;
        -: 1689:    }
        -: 1690:
function _ZN12_GLOBAL__N_112setScopeInfoEP5TokenPNSt7__debug4listINS_10ScopeInfo3ESaIS4_EEEb called 3844 returned 100% blocks executed 62%
     4032: 1691:    void setScopeInfo(Token *tok, std::list<ScopeInfo3> *scopeInfo, bool all = false)
        -: 1692:    {
     4220: 1693:        while (tok->str() == "}" && !scopeInfo->empty() && tok == scopeInfo->back().bodyEnd)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 9% (fallthrough)
branch  9 taken 91%
branch 10 taken 5% (fallthrough)
branch 11 taken 95%
      188: 1694:            scopeInfo->pop_back();
call    0 returned 100%
     3844: 1695:        if (!Token::Match(tok, "namespace|class|struct|union %name% {|:|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 96% (fallthrough)
branch  4 taken 4%
        -: 1696:            // check for using namespace
     3677: 1697:            if (Token::Match(tok, "using namespace %name% ;|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1698:                const Token * tok1 = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1699:                std::string nameSpace;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1700:                while (tok1 && tok1->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1701:                    if (!nameSpace.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1702:                        nameSpace += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1703:                    nameSpace += tok1->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1704:                    tok1 = tok1->next();
call    0 never executed
        -: 1705:                }
    #####: 1706:                scopeInfo->back().usingNamespaces.insert(nameSpace);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1707:            }
        -: 1708:            // check for member function
     3677: 1709:            else if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 49% (fallthrough)
branch  3 taken 51%
     1810: 1710:                bool added = false;
     1810: 1711:                Token *tok1 = tok;
     1830: 1712:                while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
       10: 1713:                    tok1 = tok1->previous();
call    0 returned 100%
     1810: 1714:                if (tok1 && tok1->previous() && tok1->strAt(-1) == ")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 83% (fallthrough)
branch 10 taken 17%
branch 11 taken 83% (fallthrough)
branch 12 taken 17%
     1502: 1715:                    tok1 = tok1->linkAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1502: 1716:                    if (Token::Match(tok1->previous(), "throw|noexcept")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1717:                        tok1 = tok1->previous();
call    0 never executed
    #####: 1718:                        while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1719:                            tok1 = tok1->previous();
call    0 never executed
    #####: 1720:                        if (tok1->strAt(-1) != ")")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
     3677: 1721:                            return;
     1502: 1722:                    } else if (Token::Match(tok->tokAt(-2), ":|, %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1723:                        tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1724:                        if (tok1->strAt(-1) != ")")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1725:                            return;
        -: 1726:                    }
     1502: 1727:                    if (tok1->strAt(-1) == ">")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        1: 1728:                        tok1 = tok1->previous()->findOpeningBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     2984: 1729:                    if (tok1 && (Token::Match(tok1->tokAt(-3), "%name% :: %name%") ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
     1482: 1730:                                 Token::Match(tok1->tokAt(-4), "%name% :: ~ %name%"))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       20: 1731:                        tok1 = tok1->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20: 1732:                        if (tok1->str() == "~")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1733:                            tok1 = tok1->previous();
call    0 never executed
       40: 1734:                        std::string scope = tok1->strAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
       20: 1735:                        while (Token::Match(tok1->tokAt(-2), ":: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1736:                            scope = tok1->strAt(-3) + " :: " + scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 1737:                            tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1738:                        }
       20: 1739:                        scopeInfo->emplace_back(scope, tok->link());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       20: 1740:                        added = true;
        -: 1741:                    }
        -: 1742:                }
        -: 1743:
     1810: 1744:                if (all && !added)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1: 1745:                    scopeInfo->emplace_back("", tok->link());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1746:            }
     3677: 1747:            return;
        -: 1748:        }
        -: 1749:
      167: 1750:        tok = tok->next();
call    0 returned 100%
      334: 1751:        std::string classname = tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
      167: 1752:        while (Token::Match(tok, "%name% :: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1753:            tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1754:            classname += " :: " + tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1755:        }
      167: 1756:        tok = tok->next();
call    0 returned 100%
      167: 1757:        if (tok && tok->str() == ":") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
       57: 1758:            while (tok && !Token::Match(tok, ";|{"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 73% (fallthrough)
branch  6 taken 27%
branch  7 taken 73% (fallthrough)
branch  8 taken 27%
       24: 1759:                tok = tok->next();
call    0 returned 100%
        -: 1760:        }
      167: 1761:        if (tok && tok->str() == "{") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      167: 1762:            scopeInfo->emplace_back(classname,tok->link());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1763:        }
        -: 1764:    }
        -: 1765:
function _ZN12_GLOBAL__N_113findSemicolonEP5Token called 2 returned 100% blocks executed 75%
        2: 1766:    Token *findSemicolon(Token *tok)
        -: 1767:    {
        2: 1768:        int level = 0;
        -: 1769:
       10: 1770:        for (; tok && (level > 0 || tok->str() != ";"); tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
call   10 returned 100%
        4: 1771:            if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1772:                ++level;
        4: 1773:            else if (level > 0 && tok->str() == "}")
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1774:                --level;
        -: 1775:        }
        -: 1776:
        2: 1777:        return tok;
        -: 1778:    }
        -: 1779:
function _ZN12_GLOBAL__N_110usingMatchEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPS0_SA_RKNSt7__debug4listINS_10ScopeInfo3ESaISF_EEE called 14 returned 100% blocks executed 8%
       14: 1780:    bool usingMatch(
        -: 1781:        const Token *nameToken,
        -: 1782:        const std::string &scope,
        -: 1783:        Token **tok,
        -: 1784:        const std::string &scope1,
        -: 1785:        const std::list<ScopeInfo3> &scopeList1)
        -: 1786:    {
       14: 1787:        Token *tok1 = *tok;
        -: 1788:
       14: 1789:        if (tok1 && tok1->str() != nameToken->str())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 93% (fallthrough)
branch  6 taken 7%
branch  7 taken 93% (fallthrough)
branch  8 taken 7%
       13: 1790:            return false;
        -: 1791:
        -: 1792:        // skip this using
        1: 1793:        if (tok1 == nameToken) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1794:            *tok = findSemicolon(tok1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1795:            return false;
        -: 1796:        }
        -: 1797:
        -: 1798:        // skip other using with this name
    #####: 1799:        if (tok1->strAt(-1) == "using") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1800:            // fixme: this is wrong
        -: 1801:            // skip to end of scope
    #####: 1802:            if (scopeList1.back().bodyEnd)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1803:                *tok = scopeList1.back().bodyEnd->previous();
call    0 never executed
call    1 never executed
    #####: 1804:            return false;
        -: 1805:        }
        -: 1806:
    #####: 1807:        if (Token::Match(tok1->tokAt(-1), "class|struct|union|enum")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 1808:            // fixme
    #####: 1809:            return false;
        -: 1810:        }
        -: 1811:
        -: 1812:        // get qualification
    #####: 1813:        std::string qualification;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1814:        const Token* tok2 = tok1;
    #####: 1815:        std::string::size_type index = scope.size();
call    0 never executed
    #####: 1816:        std::string::size_type new_index = std::string::npos;
    #####: 1817:        bool match = true;
    #####: 1818:        while (tok2->strAt(-1) == "::") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1819:            std::string last;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1820:            if (match && !scope1.empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1821:                new_index = scope1.rfind(' ', index - 1);
call    0 never executed
    #####: 1822:                if (new_index != std::string::npos)
branch  0 never executed
branch  1 never executed
    #####: 1823:                    last = scope1.substr(new_index, index - new_index);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1824:                else if (!qualification.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1825:                    last.clear();
call    0 never executed
        -: 1826:                else
    #####: 1827:                    last = scope1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1828:            } else
    #####: 1829:                match = false;
    #####: 1830:            if (match && tok2->strAt(-2) == last)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1831:                index = new_index;
        -: 1832:            else {
    #####: 1833:                if (!qualification.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1834:                    qualification = " :: " + qualification;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1835:                qualification = tok2->strAt(-2) + qualification;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 1836:            }
    #####: 1837:            tok2 = tok2->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1838:        }
        -: 1839:
    #####: 1840:        std::string fullScope1 = scope1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1841:        if (!scope1.empty() && !qualification.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1842:            fullScope1 += " :: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1843:        fullScope1 += qualification;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1844:
    #####: 1845:        if (scope == fullScope1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1846:            return true;
        -: 1847:
        -: 1848:        // check using namespace
    #####: 1849:        if (!scopeList1.back().usingNamespaces.empty()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1850:            if (qualification.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1851:                if (scopeList1.back().usingNamespaces.find(scope) != scopeList1.back().usingNamespaces.end())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 1852:                    return true;
        -: 1853:            } else {
    #####: 1854:                for (auto ns : scopeList1.back().usingNamespaces) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 1855:                    if (scope == ns + " :: " + qualification)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 1856:                        return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1857:                }
        -: 1858:            }
        -: 1859:        }
        -: 1860:
    #####: 1861:        std::string newScope1 = scope1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1862:
        -: 1863:        // scopes didn't match so try higher scopes
    #####: 1864:        index = newScope1.size();
call    0 never executed
    #####: 1865:        while (!newScope1.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1866:            std::string::size_type separator = newScope1.rfind(" :: ", index - 1);
call    0 never executed
    #####: 1867:            if (separator != std::string::npos)
branch  0 never executed
branch  1 never executed
    #####: 1868:                newScope1 = newScope1.substr(0, separator);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 1869:            else
    #####: 1870:                newScope1.clear();
call    0 never executed
        -: 1871:
    #####: 1872:            std::string newFullScope1 = newScope1;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 1873:            if (!newScope1.empty() && !qualification.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1874:                newFullScope1 += " :: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1875:            newFullScope1 += qualification;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1876:
    #####: 1877:            if (scope == newFullScope1)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1878:                return true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1879:        }
        -: 1880:
    #####: 1881:        return false;
        -: 1882:    }
        -: 1883:
function _ZN12_GLOBAL__N_119memberFunctionScopeEPK5Token called 0 returned 0% blocks executed 0%
    #####: 1884:    std::string memberFunctionScope(const Token *tok)
        -: 1885:    {
    #####: 1886:        std::string qualification;
call    0 never executed
    #####: 1887:        const Token *qualTok = tok->strAt(-2) == "~" ? tok->tokAt(-4) : tok->tokAt(-3);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1888:        while (Token::Match(qualTok, "%type% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1889:            if (!qualification.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1890:                qualification = " :: " + qualification;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 1891:            qualification = qualTok->str() + qualification;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1892:            qualTok = qualTok->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1893:        }
    #####: 1894:        return qualification;
call    0 never executed
        -: 1895:    }
        -: 1896:} // namespace
        -: 1897:
function _ZNK9Tokenizer16isMemberFunctionEPK5Token called 14 returned 100% blocks executed 46%
       14: 1898:bool Tokenizer::isMemberFunction(const Token *openParen) const
        -: 1899:{
       28: 1900:    return (Token::Match(openParen->tokAt(-2), ":: %name% (") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
       28: 1901:            Token::Match(openParen->tokAt(-3), ":: ~ %name% (")) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 never executed
branch  9 never executed
       14: 1902:           isFunctionHead(openParen, "{|:");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
        -: 1903:}
        -: 1904:
function _ZN9Tokenizer13simplifyUsingEv called 968 returned 100% blocks executed 21%
      968: 1905:bool Tokenizer::simplifyUsing()
        -: 1906:{
      968: 1907:    bool substitute = false;
     1936: 1908:    std::list<ScopeInfo3> scopeList;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1909:    struct Using {
function _ZZN9Tokenizer13simplifyUsingEvEN5UsingC2EP5TokenS2_ called 1 returned 100% blocks executed 100%
        1: 1910:        Using(Token *start, Token *end) : startTok(start), endTok(end) { }
        -: 1911:        Token *startTok;
        -: 1912:        Token *endTok;
        -: 1913:    };
     1936: 1914:    std::list<Using> usingList;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 1915:
      968: 1916:    scopeList.emplace_back("", nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1917:
    30283: 1918:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29315: 1919:        if (mErrorLogger && !list.getFiles().empty())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
    29315: 1920:            mErrorLogger->reportProgress(list.getFiles()[0], "Tokenize (using)", tok->progressValue());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -: 1921:
    29315: 1922:        if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1923:            return substitute;
        -: 1924:
    54788: 1925:        if (Token::Match(tok, "{|}|namespace|class|struct|union") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 87% (fallthrough)
branch  4 taken 13%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 13% (fallthrough)
branch  8 taken 87%
    25473: 1926:            Token::Match(tok, "using namespace %name% ;|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     3842: 1927:            setScopeInfo(tok, &scopeList);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1928:        }
        -: 1929:
        -: 1930:        // skip template declarations
    29315: 1931:        if (Token::Match(tok, "template < !!>")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       18: 1932:            Token *endToken = TemplateSimplifier::findTemplateDeclarationEnd(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       18: 1933:            if (endToken)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18: 1934:                tok = endToken;
    29332: 1935:            continue;
        -: 1936:        }
        -: 1937:
        -: 1938:        // look for non-template type aliases
    87756: 1939:        if (!(tok->strAt(-1) != ">" &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
    58325: 1940:              (Token::Match(tok, "using %name% = ::| %name%") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    29162: 1941:               (Token::Match(tok, "using %name% [ [") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
    #####: 1942:                Token::Match(tok->linkAt(2), "] ] = ::| %name%")))))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    29296: 1943:            continue;
        -: 1944:
        2: 1945:        std::list<ScopeInfo3> scopeList1;
call    0 returned 100%
call    1 never executed
        1: 1946:        scopeList1.emplace_back("", nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1947:        std::string name = tok->strAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100%
branch  8 taken 0%
call    9 never executed
        1: 1948:        const Token *nameToken = tok->next();
call    0 returned 100%
        2: 1949:        std::string scope = getScopeName(scopeList);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
        1: 1950:        Token *usingStart = tok;
        -: 1951:        Token *start;
        1: 1952:        if (tok->strAt(2) == "=")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1: 1953:            start = tok->tokAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1954:        else
    #####: 1955:            start = tok->linkAt(2)->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        1: 1956:        Token *usingEnd = findSemicolon(start);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1957:        if (!usingEnd)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1958:            continue;
        -: 1959:
        -: 1960:        // Move struct defined in using out of using.
        -: 1961:        // using T = struct t { }; => struct t { }; using T = struct t;
        -: 1962:        // fixme: this doesn't handle attributes
        1: 1963:        if (Token::Match(start, "struct|union|enum %name%| {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1964:            if (start->strAt(1) != "{") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1965:                Token *structEnd = start->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1966:                structEnd->insertToken(";", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####: 1967:                TokenList::copyTokens(structEnd->next(), tok, start->next());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1968:                usingStart = structEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1969:                nameToken = usingStart->next();
call    0 never executed
    #####: 1970:                if (usingStart->strAt(2) == "=")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1971:                    start = usingStart->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1972:                else
    #####: 1973:                    start = usingStart->linkAt(2)->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1974:                usingEnd = findSemicolon(start);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1975:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1976:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1977:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1978:                tok = usingStart;
        -: 1979:            } else {
    #####: 1980:                Token *structEnd = start->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1981:                structEnd->insertToken(";", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####: 1982:                std::string newName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1983:                if (structEnd->strAt(2) == ";")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1984:                    newName = name;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1985:                else
    #####: 1986:                    newName = "Unnamed" + MathLib::toString(mUnnamedCount++);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 1987:                TokenList::copyTokens(structEnd->next(), tok, start);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1988:                structEnd->tokAt(5)->insertToken(newName, "");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1989:                start->insertToken(newName, "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 1990:
    #####: 1991:                usingStart = structEnd->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1992:                nameToken = usingStart->next();
call    0 never executed
    #####: 1993:                if (usingStart->strAt(2) == "=")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1994:                    start = usingStart->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1995:                else
    #####: 1996:                    start = usingStart->linkAt(2)->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1997:                usingEnd = findSemicolon(start);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1998:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1999:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2000:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2001:                tok = usingStart;
        -: 2002:            }
        -: 2003:        }
        -: 2004:
        -: 2005:        // remove 'typename' and 'template'
        1: 2006:        else if (start->str() == "typename") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2007:            start->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2008:            Token *temp = start;
    #####: 2009:            while (Token::Match(temp, "%name% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2010:                temp = temp->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2011:            if (Token::Match(temp, "template %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2012:                temp->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2013:        }
        -: 2014:
        -: 2015:        // Unfortunately we have to start searching from the beginning
        -: 2016:        // of the token stream because templates are instantiated at
        -: 2017:        // the end of the token stream and it may be used before then.
        2: 2018:        std::string scope1;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100%
branch  4 taken 0%
call    5 never executed
        1: 2019:        bool skip = false; // don't erase type aliases we can't parse
       17: 2020:        for (Token* tok1 = list.front(); tok1; tok1 = tok1->next()) {
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
call    3 returned 100%
       32: 2021:            if ((Token::Match(tok1, "{|}|namespace|class|struct|union") && tok1->strAt(-1) != "using") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 13% (fallthrough)
branch  4 taken 88%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 13% (fallthrough)
branch 14 taken 88%
       14: 2022:                Token::Match(tok1, "using namespace %name% ;|::")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 2023:                setScopeInfo(tok1, &scopeList1, true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 2024:                scope1 = getScopeName(scopeList1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
       18: 2025:                continue;
        -: 2026:            }
        -: 2027:
        -: 2028:            // skip template definitions
       14: 2029:            if (Token::Match(tok1, "template < !!>")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2030:                Token *endToken = TemplateSimplifier::findTemplateDeclarationEnd(tok1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2031:                if (endToken)
branch  0 never executed
branch  1 never executed
    #####: 2032:                    tok1 = endToken;
    #####: 2033:                continue;
        -: 2034:            }
        -: 2035:
        -: 2036:            // check for member function and adjust scope
       14: 2037:            if (isMemberFunction(tok1)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2038:                if (!scope1.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2039:                    scope1 += " :: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2040:                scope1 += memberFunctionScope(tok1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -: 2041:            }
        -: 2042:
       14: 2043:            if (!usingMatch(nameToken, scope, &tok1, scope1, scopeList1))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       14: 2044:                continue;
        -: 2045:
        -: 2046:            // remove the qualification
    #####: 2047:            std::string fullScope = scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 2048:            while (tok1->strAt(-1) == "::") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2049:                if (fullScope == tok1->strAt(-2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2050:                    tok1->deletePrevious();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2051:                    tok1->deletePrevious();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2052:                    break;
        -: 2053:                } else {
    #####: 2054:                    const std::string::size_type idx = fullScope.rfind(" ");
call    0 never executed
        -: 2055:
    #####: 2056:                    if (idx == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####: 2057:                        break;
        -: 2058:
    #####: 2059:                    if (tok1->strAt(-2) == fullScope.substr(idx + 1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 2060:                        tok1->deletePrevious();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2061:                        tok1->deletePrevious();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2062:                        fullScope.resize(idx - 3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2063:                    } else
    #####: 2064:                        break;
        -: 2065:                }
        -: 2066:            }
        -: 2067:
    #####: 2068:            Token * arrayStart = nullptr;
        -: 2069:
        -: 2070:            // parse the type
    #####: 2071:            Token *type = start;
    #####: 2072:            if (type->str() == "::") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2073:                type = type->next();
call    0 never executed
    #####: 2074:                while (Token::Match(type, "%type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2075:                    type = type->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2076:                if (Token::Match(type, "%type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2077:                    type = type->next();
call    0 never executed
    #####: 2078:            } else if (Token::Match(type, "%type% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2079:                do {
    #####: 2080:                    type = type->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2081:                } while (Token::Match(type, "%type% ::"));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2082:                if (Token::Match(type, "%type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2083:                    type = type->next();
call    0 never executed
    #####: 2084:            } else if (Token::Match(type, "%type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2085:                while (Token::Match(type, "const|struct|union|enum %type%") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2086:                       (type->next() && type->next()->isStandardType()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2087:                    type = type->next();
call    0 never executed
        -: 2088:
    #####: 2089:                type = type->next();
call    0 never executed
        -: 2090:
    #####: 2091:                while (Token::Match(type, "%type%") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2092:                       (type->isStandardType() || Token::Match(type, "unsigned|signed"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2093:                    type = type->next();
call    0 never executed
        -: 2094:                }
        -: 2095:
    #####: 2096:                bool atEnd = false;
    #####: 2097:                while (!atEnd) {
branch  0 never executed
branch  1 never executed
    #####: 2098:                    if (type && type->str() == "::") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2099:                        type = type->next();
call    0 never executed
        -: 2100:                    }
        -: 2101:
    #####: 2102:                    if (Token::Match(type, "%type%") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2103:                        type->next() && !Token::Match(type->next(), "[|;|,|(")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2104:                        type = type->next();
call    0 never executed
    #####: 2105:                    } else if (Token::simpleMatch(type, "const (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2106:                        type = type->next();
call    0 never executed
    #####: 2107:                        atEnd = true;
        -: 2108:                    } else
    #####: 2109:                        atEnd = true;
        -: 2110:                }
        -: 2111:            } else
    #####: 2112:                syntaxError(type);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2113:
        -: 2114:            // check for invalid input
    #####: 2115:            if (!type)
branch  0 never executed
branch  1 never executed
    #####: 2116:                syntaxError(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2117:
        -: 2118:            // check for template
    #####: 2119:            if (type->str() == "<") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2120:                type = type->findClosingBracket();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2121:
    #####: 2122:                while (type && Token::Match(type->next(), ":: %type%"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2123:                    type = type->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2124:
    #####: 2125:                if (!type) {
branch  0 never executed
branch  1 never executed
    #####: 2126:                    syntaxError(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2127:                }
        -: 2128:
    #####: 2129:                while (Token::Match(type->next(), "const|volatile"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2130:                    type = type->next();
call    0 never executed
        -: 2131:
    #####: 2132:                type = type->next();
call    0 never executed
        -: 2133:            }
        -: 2134:
        -: 2135:            // check for pointers and references
    #####: 2136:            std::list<std::string> pointers;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2137:            while (Token::Match(type, "*|&|&&|const")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2138:                pointers.push_back(type->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2139:                type = type->next();
call    0 never executed
        -: 2140:            }
        -: 2141:
        -: 2142:            // check for array
    #####: 2143:            if (type && type->str() == "[") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2144:                do {
    #####: 2145:                    if (!arrayStart)
branch  0 never executed
branch  1 never executed
    #####: 2146:                        arrayStart = type;
        -: 2147:
    #####: 2148:                    bool atEnd = false;
    #####: 2149:                    while (!atEnd) {
branch  0 never executed
branch  1 never executed
    #####: 2150:                        while (type->next() && !Token::Match(type->next(), ";|,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2151:                            type = type->next();
call    0 never executed
        -: 2152:                        }
        -: 2153:
    #####: 2154:                        if (!type->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2155:                            syntaxError(type); // invalid input
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2156:                        else if (type->next()->str() == ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2157:                            atEnd = true;
    #####: 2158:                        else if (type->str() == "]")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2159:                            atEnd = true;
        -: 2160:                        else
    #####: 2161:                            type = type->next();
call    0 never executed
        -: 2162:                    }
        -: 2163:
    #####: 2164:                    type = type->next();
call    0 never executed
    #####: 2165:                } while (type && type->str() == "[");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2166:            }
        -: 2167:
    #####: 2168:            Token* after = tok1->next();
call    0 never executed
        -: 2169:            // check if type was parsed
    #####: 2170:            if (type && type == usingEnd) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2171:                // check for array syntax and add type around variable
    #####: 2172:                if (arrayStart) {
branch  0 never executed
branch  1 never executed
    #####: 2173:                    if (Token::Match(tok1->next(), "%name%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2174:                        TokenList::copyTokens(tok1->next(), arrayStart, usingEnd->previous());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2175:                        TokenList::copyTokens(tok1, start, arrayStart->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2176:                        tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2177:                        substitute = true;
        -: 2178:                    }
        -: 2179:                } else {
        -: 2180:                    // just replace simple type aliases
    #####: 2181:                    TokenList::copyTokens(tok1, start, usingEnd->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2182:                    tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2183:                    substitute = true;
        -: 2184:                }
        -: 2185:            } else {
    #####: 2186:                skip = true;
    #####: 2187:                if (mSettings->debugwarnings && mErrorLogger) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2188:                    std::string str;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2189:                    for (Token *tok3 = usingStart; tok3 && tok3 != usingEnd; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 2190:                        if (!str.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2191:                            str += ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2192:                        str += tok3->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2193:                    }
    #####: 2194:                    str += " ;";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2195:                    std::list<const Token *> callstack(1, usingStart);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2196:                    mErrorLogger->reportErr(ErrorLogger::ErrorMessage(callstack, &list, Severity::debug, "debug",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 2197:                                            "Failed to parse \'" + str + "\'. The checking continues anyway.", false));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 2198:                }
        -: 2199:            }
    #####: 2200:            tok1 = after;
        -: 2201:        }
        -: 2202:
        1: 2203:        if (!skip)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2204:            usingList.emplace_back(usingStart, usingEnd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2205:    }
        -: 2206:
        -: 2207:    // delete all used type alias definitions
      969: 2208:    for (std::list<Using>::reverse_iterator it = usingList.rbegin(); it != usingList.rend(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
        1: 2209:        Token *usingStart = it->startTok;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 2210:        Token *usingEnd = it->endTok;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 2211:        if (usingStart->previous()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2212:            if (usingEnd->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2213:                Token::eraseTokens(usingStart->previous(), usingEnd->next());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 2214:            else {
    #####: 2215:                Token::eraseTokens(usingStart->previous(), usingEnd);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2216:                usingEnd->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2217:            }
        -: 2218:        } else {
        1: 2219:            if (usingEnd->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 2220:                Token::eraseTokens(usingStart, usingEnd->next());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 2221:                usingStart->deleteThis();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2222:            } else {
        -: 2223:                // this is the only code being checked so leave ';'
    #####: 2224:                Token::eraseTokens(usingStart, usingEnd);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2225:                usingStart->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2226:            }
        -: 2227:        }
        -: 2228:    }
        -: 2229:
      968: 2230:    return substitute;
        -: 2231:}
function _ZN9Tokenizer20simplifyMulAndParensEv called 956 returned 100% blocks executed 53%
      956: 2232:void Tokenizer::simplifyMulAndParens()
        -: 2233:{
      956: 2234:    if (!list.front())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2235:        return;
    26479: 2236:    for (Token *tok = list.front()->tokAt(3); tok; tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
call    4 returned 100%
    25523: 2237:        if (!tok->isName())
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
    16243: 2238:            continue;
        -: 2239:        //fix ticket #2784 - improved by ticket #3184
     9280: 2240:        int closedPars = 0;
     9280: 2241:        Token *tokend = tok->next();
call    0 returned 100%
     9280: 2242:        Token *tokbegin = tok->previous();
call    0 returned 100%
    12268: 2243:        while (tokend && tokend->str() == ")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 14% (fallthrough)
branch  5 taken 86%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
     1494: 2244:            ++closedPars;
     1494: 2245:            tokend = tokend->next();
call    0 returned 100%
        -: 2246:        }
     9280: 2247:        if (!tokend || !(tokend->isAssignmentOp()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 90% (fallthrough)
branch  4 taken 10%
branch  5 taken 90% (fallthrough)
branch  6 taken 10%
     8390: 2248:            continue;
      890: 2249:        while (Token::Match(tokbegin, "&|(")) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
       38: 2250:            if (tokbegin->str() == "&") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 61% (fallthrough)
branch  3 taken 39%
       23: 2251:                if (Token::Match(tokbegin->tokAt(-2), "[;{}&(] *")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 2252:                    //remove '* &'
    #####: 2253:                    tokbegin = tokbegin->tokAt(-2);
call    0 never executed
    #####: 2254:                    tokbegin->deleteNext(2);
call    0 never executed
       23: 2255:                } else if (Token::Match(tokbegin->tokAt(-3), "[;{}&(] * (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2256:                    if (closedPars == 0)
branch  0 never executed
branch  1 never executed
    #####: 2257:                        break;
    #####: 2258:                    --closedPars;
        -: 2259:                    //remove ')'
    #####: 2260:                    tok->deleteNext();
call    0 never executed
        -: 2261:                    //remove '* ( &'
    #####: 2262:                    tokbegin = tokbegin->tokAt(-3);
call    0 never executed
    #####: 2263:                    tokbegin->deleteNext(3);
call    0 never executed
        -: 2264:                } else
       23: 2265:                    break;
       15: 2266:            } else if (tokbegin->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       15: 2267:                if (closedPars == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       15: 2268:                    break;
        -: 2269:
        -: 2270:                //find consecutive opening parentheses
    #####: 2271:                int openPars = 0;
    #####: 2272:                while (tokbegin && tokbegin->str() == "(" && openPars <= closedPars) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2273:                    ++openPars;
    #####: 2274:                    tokbegin = tokbegin->previous();
call    0 never executed
        -: 2275:                }
    #####: 2276:                if (!tokbegin || openPars > closedPars)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2277:                    break;
        -: 2278:
    #####: 2279:                if ((openPars == closedPars && Token::Match(tokbegin, "[;{}]")) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2280:                    Token::Match(tokbegin->tokAt(-2), "[;{}&(] * &") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2281:                    Token::Match(tokbegin->tokAt(-3), "[;{}&(] * ( &")) {
call    0 never executed
call    1 never executed
        -: 2282:                    //remove the excessive parentheses around the variable
    #####: 2283:                    while (openPars > 0) {
branch  0 never executed
branch  1 never executed
    #####: 2284:                        tok->deleteNext();
call    0 never executed
    #####: 2285:                        tokbegin->deleteNext();
call    0 never executed
    #####: 2286:                        --closedPars;
    #####: 2287:                        --openPars;
        -: 2288:                    }
        -: 2289:                } else
    #####: 2290:                    break;
        -: 2291:            }
        -: 2292:        }
        -: 2293:    }
        -: 2294:}
        -: 2295:
function _ZN9Tokenizer12createTokensERSiRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 954 returned 100% blocks executed 80%
      954: 2296:bool Tokenizer::createTokens(std::istream &code,
        -: 2297:                             const std::string& FileName)
        -: 2298:{
        -: 2299:    // make sure settings specified
      954: 2300:    assert(mSettings);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2301:
      954: 2302:    return list.createTokens(code, FileName);
call    0 returned 100%
        -: 2303:}
        -: 2304:
function _ZN9Tokenizer12createTokensEPKN9simplecpp9TokenListE called 2 returned 100% blocks executed 75%
        2: 2305:void Tokenizer::createTokens(const simplecpp::TokenList *tokenList)
        -: 2306:{
        -: 2307:    // make sure settings specified
        2: 2308:    assert(mSettings);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2: 2309:    list.createTokens(tokenList);
call    0 returned 100%
        2: 2310:}
        -: 2311:
function _ZN9Tokenizer15simplifyTokens1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 956 returned 100% blocks executed 23%
      956: 2312:bool Tokenizer::simplifyTokens1(const std::string &configuration)
        -: 2313:{
        -: 2314:    // Fill the map mTypeSize..
      956: 2315:    fillTypeSizes();
call    0 returned 100%
        -: 2316:
      956: 2317:    mConfiguration = configuration;
call    0 returned 100%
        -: 2318:
      956: 2319:    if (!simplifyTokenList1(list.getFiles().front().c_str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2320:        return false;
        -: 2321:
      956: 2322:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2323:        Timer t("Tokenizer::simplifyTokens1::createAst", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 2324:        list.createAst();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2325:        list.validateAst();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2326:    } else {
      956: 2327:        list.createAst();
call    0 returned 100%
      956: 2328:        list.validateAst();
call    0 returned 100%
        -: 2329:    }
        -: 2330:
      956: 2331:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2332:        Timer t("Tokenizer::simplifyTokens1::createSymbolDatabase", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 2333:        createSymbolDatabase();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2334:    } else {
      956: 2335:        createSymbolDatabase();
call    0 returned 100%
        -: 2336:    }
        -: 2337:
      956: 2338:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2339:        Timer t("Tokenizer::simplifyTokens1::setValueType", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 2340:        mSymbolDatabase->setValueTypeInTokenList(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2341:    } else {
      956: 2342:        mSymbolDatabase->setValueTypeInTokenList(true);
call    0 returned 100%
        -: 2343:    }
        -: 2344:
      956: 2345:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2346:        Timer t("Tokenizer::simplifyTokens1::ValueFlow", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2347:        ValueFlow::setValues(&list, mSymbolDatabase, mErrorLogger, mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2348:    } else {
      956: 2349:        ValueFlow::setValues(&list, mSymbolDatabase, mErrorLogger, mSettings);
call    0 returned 100%
        -: 2350:    }
        -: 2351:
      956: 2352:    mSymbolDatabase->setArrayDimensionsUsingValueFlow();
call    0 returned 100%
        -: 2353:
      956: 2354:    printDebugOutput(1);
call    0 returned 100%
        -: 2355:
      956: 2356:    return true;
call    0 never executed
        -: 2357:}
        -: 2358:
function _ZN9Tokenizer8tokenizeERSiPKcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 954 returned 100% blocks executed 63%
      954: 2359:bool Tokenizer::tokenize(std::istream &code,
        -: 2360:                         const char FileName[],
        -: 2361:                         const std::string &configuration)
        -: 2362:{
      954: 2363:    if (!createTokens(code, FileName))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
call   12 never executed
    #####: 2364:        return false;
        -: 2365:
      954: 2366:    return simplifyTokens1(configuration);
call    0 returned 100%
        -: 2367:}
        -: 2368://---------------------------------------------------------------------------
        -: 2369:
function _ZN9Tokenizer38findComplicatedSyntaxErrorsInTemplatesEv called 934 returned 100% blocks executed 100%
      934: 2370:void Tokenizer::findComplicatedSyntaxErrorsInTemplates()
        -: 2371:{
      934: 2372:    validate();
call    0 returned 100%
      934: 2373:    mTemplateSimplifier->checkComplicatedSyntaxErrorsInTemplates();
call    0 returned 100%
      934: 2374:}
        -: 2375:
function _ZN9Tokenizer24checkForEnumsWithTypedefEv called 956 returned 100% blocks executed 52%
      956: 2376:void Tokenizer::checkForEnumsWithTypedef()
        -: 2377:{
    29334: 2378:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28378: 2379:        if (Token::Match(tok, "enum %name% {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        2: 2380:            tok = tok->tokAt(2);
call    0 returned 100%
        2: 2381:            const Token *tok2 = Token::findsimplematch(tok, "typedef", tok->link());
call    0 returned 100%
call    1 returned 100%
        2: 2382:            if (tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2383:                syntaxError(tok2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        2: 2384:            tok = tok->link();
call    0 returned 100%
        -: 2385:        }
        -: 2386:    }
      956: 2387:}
        -: 2388:
function _ZN9Tokenizer13fillTypeSizesEv called 956 returned 100% blocks executed 47%
      956: 2389:void Tokenizer::fillTypeSizes()
        -: 2390:{
      956: 2391:    mTypeSize.clear();
call    0 returned 100%
      956: 2392:    mTypeSize["char"] = 1;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2393:    mTypeSize["_Bool"] = mSettings->sizeof_bool;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2394:    mTypeSize["bool"] = mSettings->sizeof_bool;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2395:    mTypeSize["short"] = mSettings->sizeof_short;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2396:    mTypeSize["int"] = mSettings->sizeof_int;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2397:    mTypeSize["long"] = mSettings->sizeof_long;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2398:    mTypeSize["float"] = mSettings->sizeof_float;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2399:    mTypeSize["double"] = mSettings->sizeof_double;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2400:    mTypeSize["wchar_t"] = mSettings->sizeof_wchar_t;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2401:    mTypeSize["size_t"] = mSettings->sizeof_size_t;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
      956: 2402:    mTypeSize["*"] = mSettings->sizeof_pointer;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      956: 2403:}
        -: 2404:
function _ZN9Tokenizer16combineOperatorsEv called 956 returned 100% blocks executed 58%
      956: 2405:void Tokenizer::combineOperators()
        -: 2406:{
      956: 2407:    const bool cpp = isCPP();
call    0 returned 100%
        -: 2408:
        -: 2409:    // Combine tokens..
    28047: 2410:    for (Token *tok = list.front(); tok && tok->next(); tok = tok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 taken 97% (fallthrough)
branch  7 taken 3%
call    8 returned 100%
    27091: 2411:        const char c1 = tok->str()[0];
call    0 returned 100%
call    1 returned 100%
        -: 2412:
    27091: 2413:        if (tok->str().length() == 1 && tok->next()->str().length() == 1) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 71% (fallthrough)
branch  8 taken 29%
branch  9 taken 49% (fallthrough)
branch 10 taken 51%
    13257: 2414:            const char c2 = tok->next()->str()[0];
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 2415:
        -: 2416:            // combine +-*/ and =
    13257: 2417:            if (c2 == '=' && (std::strchr("+-*/%|^=!<>", c1))) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 2418:                // skip templates
    #####: 2419:                if (cpp && tok->str() == ">") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2420:                    const Token *opening = tok->findOpeningBracket();
call    0 never executed
    #####: 2421:                    if (opening) {
branch  0 never executed
branch  1 never executed
    #####: 2422:                        if (Token::Match(opening->previous(), "%name%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2423:                            continue;
        -: 2424:                    }
        -: 2425:                }
    #####: 2426:                tok->str(tok->str() + c2);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2427:                tok->deleteNext();
call    0 never executed
    #####: 2428:                continue;
        -: 2429:            }
    13834: 2430:        } else if (tok->next()->str() == "=") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      206: 2431:            if (tok->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2432:                tok->str(">>=");
call    0 never executed
    #####: 2433:                tok->deleteNext();
call    0 never executed
      206: 2434:            } else if (tok->str() == "<<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2435:                tok->str("<<=");
call    0 never executed
    #####: 2436:                tok->deleteNext();
call    0 never executed
        -: 2437:            }
    13810: 2438:        } else if (cpp && (c1 == 'p' || c1 == '_') &&
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 12% (fallthrough)
branch  7 taken 88%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      182: 2439:                   Token::Match(tok, "private|protected|public|__published : !!:")) {
call    0 returned 100%
       21: 2440:            bool simplify = false;
       21: 2441:            int par = 0;
       21: 2442:            for (const Token *prev = tok->previous(); prev; prev = prev->previous()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
       21: 2443:                if (prev->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2444:                    ++par;
       21: 2445:                } else if (prev->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2446:                    if (par == 0U)
branch  0 never executed
branch  1 never executed
    #####: 2447:                        break;
    #####: 2448:                    --par;
        -: 2449:                }
       21: 2450:                if (par != 0U || prev->str() == "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2451:                    continue;
       21: 2452:                if (Token::Match(prev, "[;{}]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       21: 2453:                    simplify = true;
       21: 2454:                    break;
        -: 2455:                }
    #####: 2456:                if (prev->isName() && prev->isUpperCaseName())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2457:                    continue;
    #####: 2458:                if (prev->isName() && endsWith(prev->str(), ':'))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2459:                    simplify = true;
    #####: 2460:                break;
        -: 2461:            }
       21: 2462:            if (simplify) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       21: 2463:                tok->str(tok->str() + ":");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
       21: 2464:                tok->deleteNext();
call    0 returned 100%
        -: 2465:            }
    13607: 2466:        } else if (tok->str() == "->") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 2467:            // If the preceding sequence is "( & %name% )", replace it by "%name%"
       59: 2468:            Token *t = tok->tokAt(-4);
call    0 returned 100%
       59: 2469:            if (Token::Match(t, "( & %name% )")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2470:                t->deleteThis();
call    0 never executed
    #####: 2471:                t->deleteThis();
call    0 never executed
    #####: 2472:                t->deleteNext();
call    0 never executed
        -: 2473:            }
        -: 2474:
       59: 2475:            tok->str(".");
call    0 returned 100%
       59: 2476:            tok->originalName("->");
call    0 returned 100%
        -: 2477:        }
        -: 2478:    }
      956: 2479:}
        -: 2480:
function _ZN9Tokenizer28combineStringAndCharLiteralsEv called 956 returned 100% blocks executed 62%
      956: 2481:void Tokenizer::combineStringAndCharLiterals()
        -: 2482:{
        -: 2483:    // Combine strings
    29144: 2484:    for (Token *tok = list.front();
call    0 returned 100%
call    1 returned 100%
    29144: 2485:         tok;
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -: 2486:         tok = tok->next()) {
    28188: 2487:        if (!isStringLiteral(tok->str()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    28121: 2488:            continue;
        -: 2489:
       67: 2490:        tok->str(simplifyString(tok->str()));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
call    7 never executed
       67: 2491:        while (tok->next() && tok->next()->tokType() == Token::eString) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
        -: 2492:            // Two strings after each other, combine them
    #####: 2493:            tok->concatStr(simplifyString(tok->next()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2494:            tok->deleteNext();
call    0 never executed
        -: 2495:        }
        -: 2496:    }
      956: 2497:}
        -: 2498:
function _ZN9Tokenizer39concatenateNegativeNumberAndAnyPositiveEv called 956 returned 100% blocks executed 88%
      956: 2499:void Tokenizer::concatenateNegativeNumberAndAnyPositive()
        -: 2500:{
    28977: 2501:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28021: 2502:        if (!Token::Match(tok, "?|:|,|(|[|{|return|case|sizeof|%op% +|-") || tok->tokType() == Token::eIncDecOp)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    27990: 2503:            continue;
        -: 2504:
    #####: 2505:        while (tok->str() != ">" && tok->next() && tok->next()->str() == "+")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 2506:            tok->deleteNext();
call    0 never executed
        -: 2507:
       31: 2508:        if (Token::Match(tok->next(), "- %num%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
       26: 2509:            tok->deleteNext();
call    0 returned 100%
       26: 2510:            tok->next()->str("-" + tok->next()->str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 2511:        }
        -: 2512:    }
      956: 2513:}
        -: 2514:
function _ZN9Tokenizer15simplifyExternCEv called 934 returned 100% blocks executed 97%
      934: 2515:void Tokenizer::simplifyExternC()
        -: 2516:{
      934: 2517:    if (isC())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2518:        return;
        -: 2519:
        -: 2520:    // Add attributes to all tokens within `extern "C"` inlines and blocks, and remove the `extern "C"` tokens.
    28380: 2521:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27446: 2522:        if (Token::simpleMatch(tok, "extern \"C\"")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        4: 2523:            Token *tok2 = tok->next();
call    0 returned 100%
        4: 2524:            if (tok->strAt(2) == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2: 2525:                tok2 = tok2->next(); // skip {
call    0 returned 100%
       78: 2526:                while ((tok2 = tok2->next()) && tok2 != tok->linkAt(2))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 95% (fallthrough)
branch  5 taken 5%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
       38: 2527:                    tok2->isExternC(true);
call    0 returned 100%
        2: 2528:                tok->linkAt(2)->deleteThis(); // }
call    0 returned 100%
call    1 returned 100%
        2: 2529:                tok->deleteNext(2); // "C" {
call    0 returned 100%
        -: 2530:            } else {
       17: 2531:                while ((tok2 = tok2->next()) && !Token::simpleMatch(tok2, ";"))
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 89% (fallthrough)
branch  7 taken 11%
       17: 2532:                    tok2->isExternC(true);
call    0 returned 100%
        2: 2533:                tok->deleteNext(); // "C"
call    0 returned 100%
        -: 2534:            }
        4: 2535:            tok->deleteThis(); // extern
call    0 returned 100%
        -: 2536:        }
        -: 2537:    }
        -: 2538:}
        -: 2539:
function _ZN9Tokenizer29simplifyRoundCurlyParenthesesEv called 956 returned 100% blocks executed 27%
      956: 2540:void Tokenizer::simplifyRoundCurlyParentheses()
        -: 2541:{
    28965: 2542:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28009: 2543:        while (Token::Match(tok, "[;{}:] ( {") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2544:               Token::simpleMatch(tok->linkAt(2), "} ) ;")) {
call    0 never executed
call    1 never executed
    #####: 2545:            if (tok->str() == ":" && !Token::Match(tok->tokAt(-2),"[;{}] %type% :"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 2546:                break;
    #####: 2547:            Token *end = tok->linkAt(2)->tokAt(-3);
call    0 never executed
call    1 never executed
    #####: 2548:            if (Token::Match(end, "[;{}] %num%|%str% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2549:                end->deleteNext(2);
call    0 never executed
    #####: 2550:            tok->linkAt(2)->previous()->deleteNext(3);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2551:            tok->deleteNext(2);
call    0 never executed
        -: 2552:        }
    28009: 2553:        if (Token::Match(tok, "( { %bool%|%char%|%num%|%str%|%name% ; } )")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2554:            tok->deleteNext();
call    0 never executed
    #####: 2555:            tok->deleteThis();
call    0 never executed
    #####: 2556:            tok->deleteNext(3);
call    0 never executed
        -: 2557:        }
        -: 2558:    }
      956: 2559:}
        -: 2560:
function _ZN9Tokenizer11simplifySQLEv called 956 returned 100% blocks executed 10%
      956: 2561:void Tokenizer::simplifySQL()
        -: 2562:{
    29144: 2563:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28188: 2564:        if (!Token::simpleMatch(tok, "__CPPCHECK_EMBEDDED_SQL_EXEC__ SQL"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
    28188: 2565:            continue;
        -: 2566:
    #####: 2567:        const Token *end = findSQLBlockEnd(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2568:        if (end == nullptr)
branch  0 never executed
branch  1 never executed
    #####: 2569:            syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2570:
    #####: 2571:        const std::string instruction = tok->stringifyList(end);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 2572:        // delete all tokens until the embedded SQL block end
    #####: 2573:        Token::eraseTokens(tok, end);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2574:
        -: 2575:        // insert "asm ( "instruction" ) ;"
    #####: 2576:        tok->str("asm");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2577:        // it can happen that 'end' is NULL when wrong code is inserted
    #####: 2578:        if (!tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2579:            tok->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2580:        tok->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2581:        tok->insertToken("\"" + instruction + "\"");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2582:        tok->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2583:        // jump to ';' and continue
    #####: 2584:        tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2585:    }
      956: 2586:}
        -: 2587:
function _ZN9Tokenizer25simplifyArrayAccessSyntaxEv called 956 returned 100% blocks executed 46%
      956: 2588:void Tokenizer::simplifyArrayAccessSyntax()
        -: 2589:{
        -: 2590:    // 0[a] -> a[0]
    30020: 2591:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29064: 2592:        if (tok->isNumber() && Token::Match(tok, "%num% [ %name% ]")) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2593:            const std::string number(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2594:            Token* indexTok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2595:            tok->str(indexTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2596:            tok->varId(indexTok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2597:            indexTok->str(number);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2598:        }
        -: 2599:    }
      956: 2600:}
        -: 2601:
function _ZN9Tokenizer21simplifyParameterVoidEv called 956 returned 100% blocks executed 100%
      956: 2602:void Tokenizer::simplifyParameterVoid()
        -: 2603:{
    29896: 2604:    for (Token* tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28940: 2605:        if (Token::Match(tok, "%name% ( void )"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      123: 2606:            tok->next()->deleteNext();
call    0 returned 100%
call    1 returned 100%
        -: 2607:    }
      956: 2608:}
        -: 2609:
function _ZN9Tokenizer34simplifyRedundantConsecutiveBracesEv called 956 returned 100% blocks executed 100%
      956: 2610:void Tokenizer::simplifyRedundantConsecutiveBraces()
        -: 2611:{
        -: 2612:    // Remove redundant consecutive braces, i.e. '.. { { .. } } ..' -> '.. { .. } ..'.
    29816: 2613:    for (Token *tok = list.front(); tok;) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
    28860: 2614:        if (Token::simpleMatch(tok, "= {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       17: 2615:            tok = tok->linkAt(1);
call    0 returned 100%
    28843: 2616:        } else if (Token::simpleMatch(tok, "{ {") && Token::simpleMatch(tok->next()->link(), "} }")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 89% (fallthrough)
branch  7 taken 11%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        -: 2617:            //remove internal parentheses
        8: 2618:            tok->next()->link()->deleteThis();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        8: 2619:            tok->deleteNext();
call    0 returned 100%
        -: 2620:        } else
    28835: 2621:            tok = tok->next();
call    0 returned 100%
        -: 2622:    }
      956: 2623:}
        -: 2624:
function _ZN9Tokenizer32simplifyDoublePlusAndDoubleMinusEv called 956 returned 100% blocks executed 37%
      956: 2625:void Tokenizer::simplifyDoublePlusAndDoubleMinus()
        -: 2626:{
        -: 2627:    // Convert - - into + and + - into -
    30020: 2628:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29064: 2629:        while (tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
    28108: 2630:            if (tok->str() == "+") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       68: 2631:                if (tok->next()->str()[0] == '-') {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2632:                    tok = tok->next();
call    0 never executed
    #####: 2633:                    if (tok->str().size() == 1) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2634:                        tok = tok->previous();
call    0 never executed
    #####: 2635:                        tok->str("-");
call    0 never executed
    #####: 2636:                        tok->deleteNext();
call    0 never executed
    #####: 2637:                    } else if (tok->isNumber()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2638:                        tok->str(tok->str().substr(1));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 2639:                        tok = tok->previous();
call    0 never executed
    #####: 2640:                        tok->str("-");
call    0 never executed
        -: 2641:                    }
    #####: 2642:                    continue;
        -: 2643:                }
    28040: 2644:            } else if (tok->str() == "-") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       35: 2645:                if (tok->next()->str()[0] == '-') {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2646:                    tok = tok->next();
call    0 never executed
    #####: 2647:                    if (tok->str().size() == 1) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2648:                        tok = tok->previous();
call    0 never executed
    #####: 2649:                        tok->str("+");
call    0 never executed
    #####: 2650:                        tok->deleteNext();
call    0 never executed
    #####: 2651:                    } else if (tok->isNumber()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2652:                        tok->str(tok->str().substr(1));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 2653:                        tok = tok->previous();
call    0 never executed
    #####: 2654:                        tok->str("+");
call    0 never executed
        -: 2655:                    }
    #####: 2656:                    continue;
        -: 2657:                }
        -: 2658:            }
        -: 2659:
    28108: 2660:            break;
        -: 2661:        }
        -: 2662:    }
      956: 2663:}
        -: 2664:
        -: 2665:/** Specify array size if it hasn't been given */
        -: 2666:
function _ZN9Tokenizer9arraySizeEv called 956 returned 100% blocks executed 53%
      956: 2667:void Tokenizer::arraySize()
        -: 2668:{
    29999: 2669:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29043: 2670:        if (!tok->isName() || !Token::Match(tok, "%var% [ ] ="))
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    29041: 2671:            continue;
        2: 2672:        bool addlength = false;
        2: 2673:        if (Token::Match(tok, "%var% [ ] = { %str% } ;")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2674:            Token *t = tok->tokAt(3);
call    0 never executed
    #####: 2675:            t->deleteNext();
call    0 never executed
    #####: 2676:            t->next()->deleteNext();
call    0 never executed
call    1 never executed
    #####: 2677:            addlength = true;
        -: 2678:        }
        -: 2679:
        2: 2680:        if (addlength || Token::Match(tok, "%var% [ ] = %str% ;")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 2681:            tok = tok->next();
call    0 never executed
    #####: 2682:            const int sz = Token::getStrSize(tok->tokAt(3));
call    0 never executed
call    1 never executed
    #####: 2683:            tok->insertToken(MathLib::toString(sz));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####: 2684:            tok = tok->tokAt(5);
call    0 never executed
        -: 2685:        }
        -: 2686:
        2: 2687:        else if (Token::Match(tok, "%var% [ ] = {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 2688:            MathLib::biguint sz = 1;
        2: 2689:            tok = tok->next();
call    0 returned 100%
        2: 2690:            Token *end = tok->linkAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8: 2691:            for (Token *tok2 = tok->tokAt(4); tok2 && tok2 != end; tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 75% (fallthrough)
branch  6 taken 25%
call    7 returned 100%
        6: 2692:                if (tok2->link() && Token::Match(tok2, "{|(|[|<")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 2693:                    if (tok2->str() == "[" && tok2->link()->strAt(1) == "=") { // designated initializer
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 2694:                        if (Token::Match(tok2, "[ %num% ]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 2695:                            sz = std::max(sz, MathLib::toULongNumber(tok2->strAt(1)) + 1U);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -: 2696:                        else {
    #####: 2697:                            sz = 0;
    #####: 2698:                            break;
        -: 2699:                        }
        -: 2700:                    }
    #####: 2701:                    tok2 = tok2->link();
call    0 never executed
        6: 2702:                } else if (tok2->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        2: 2703:                    if (!Token::Match(tok2->next(), "[},]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2: 2704:                        ++sz;
        -: 2705:                    else {
    #####: 2706:                        tok2 = tok2->previous();
call    0 never executed
    #####: 2707:                        tok2->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2708:                    }
        -: 2709:                }
        -: 2710:            }
        -: 2711:
        2: 2712:            if (sz != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 2713:                tok->insertToken(MathLib::toString(sz));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 2714:
        2: 2715:            tok = end->next() ? end->next() : end;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -: 2716:        }
        -: 2717:    }
      956: 2718:}
        -: 2719:
function _ZL13skipTernaryOpP5Token called 1 returned 100% blocks executed 77%
        1: 2720:static Token *skipTernaryOp(Token *tok)
        -: 2721:{
        1: 2722:    int colonLevel = 1;
        3: 2723:    while (nullptr != (tok = tok->next())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 2724:        if (tok->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2725:            ++colonLevel;
        2: 2726:        } else if (tok->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        1: 2727:            --colonLevel;
        1: 2728:            if (colonLevel == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2729:                tok = tok->next();
call    0 returned 100%
        1: 2730:                break;
        -: 2731:            }
        -: 2732:        }
        1: 2733:        if (tok->link() && Token::Match(tok, "[(<]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2734:            tok = tok->link();
call    0 never executed
        1: 2735:        else if (Token::Match(tok->next(), "[{};)]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 2736:            break;
        -: 2737:    }
        1: 2738:    if (colonLevel > 0) // Ticket #5214: Make sure the ':' matches the proper '?'
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2739:        return nullptr;
        1: 2740:    return tok;
        -: 2741:}
        -: 2742:
function _ZN9Tokenizer22startOfExecutableScopeEPK5Token called 30325 returned 100% blocks executed 83%
    30325: 2743:const Token * Tokenizer::startOfExecutableScope(const Token * tok)
        -: 2744:{
    30325: 2745:    if (tok->str() != ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
    27749: 2746:        return nullptr;
        -: 2747:
     2576: 2748:    tok = isFunctionHead(tok, ":{", true);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 2749:
     2576: 2750:    if (Token::Match(tok, ": %name% [({]")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      114: 2751:        while (Token::Match(tok, "[:,] %name% [({]"))
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
       42: 2752:            tok = tok->linkAt(2)->next();
call    0 returned 100%
call    1 returned 100%
        -: 2753:    }
        -: 2754:
     2576: 2755:    return (tok && tok->str() == "{") ? tok : nullptr;
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -: 2756:}
        -: 2757:
        -: 2758:
        -: 2759:/** simplify labels and case|default in the code: add a ";" if not already in.*/
        -: 2760:
function _ZN9Tokenizer25simplifyLabelsCaseDefaultEv called 956 returned 100% blocks executed 66%
      956: 2761:void Tokenizer::simplifyLabelsCaseDefault()
        -: 2762:{
      956: 2763:    const bool cpp = isCPP();
call    0 returned 100%
      956: 2764:    bool executablescope = false;
      956: 2765:    int indentLevel = 0;
    22469: 2766:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
        -: 2767:        // Simplify labels in the executable scope..
    21513: 2768:        Token *start = const_cast<Token *>(startOfExecutableScope(tok));
call    0 returned 100%
    21513: 2769:        if (start) {
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     1004: 2770:            tok = start;
     1004: 2771:            executablescope = true;
        -: 2772:        }
        -: 2773:
    21513: 2774:        if (!executablescope)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
     8722: 2775:            continue;
        -: 2776:
    12791: 2777:        if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 13% (fallthrough)
branch  3 taken 87%
     1617: 2778:            if (tok->previous()->str() == "=")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       16: 2779:                tok = tok->link();
call    0 returned 100%
        -: 2780:            else
     1601: 2781:                ++indentLevel;
    11174: 2782:        } else if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
     1601: 2783:            --indentLevel;
     2605: 2784:            if (indentLevel == 0) {
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
     1004: 2785:                executablescope = false;
     1004: 2786:                continue;
        -: 2787:            }
     9573: 2788:        } else if (Token::Match(tok, "(|["))
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
     1296: 2789:            tok = tok->link();
call    0 returned 100%
        -: 2790:
    11787: 2791:        if (Token::Match(tok, "[;{}:] case")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      398: 2792:            while (nullptr != (tok = tok->next())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      263: 2793:                if (Token::Match(tok, "(|[")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 2794:                    tok = tok->link();
call    0 returned 100%
      262: 2795:                } else if (tok->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 2796:                    Token *tok1 = skipTernaryOp(tok);
call    0 returned 100%
        1: 2797:                    if (!tok1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2798:                        syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2799:                    }
        1: 2800:                    tok = tok1;
        -: 2801:                }
      263: 2802:                if (Token::Match(tok->next(),"[:{};]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 49% (fallthrough)
branch  3 taken 51%
      128: 2803:                    break;
        -: 2804:            }
      128: 2805:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2806:                break;
      128: 2807:            if (tok->str() != "case" && tok->next() && tok->next()->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
      128: 2808:                tok = tok->next();
call    0 returned 100%
      128: 2809:                if (!tok->next())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2810:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
      128: 2811:                if (tok->next()->str() != ";" && tok->next()->str() != "case")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 99% (fallthrough)
branch 11 taken 1%
      127: 2812:                    tok->insertToken(";");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2813:                else
        1: 2814:                    tok = tok->previous();
call    0 returned 100%
        -: 2815:            } else {
    #####: 2816:                syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2817:            }
    11659: 2818:        } else if (Token::Match(tok, "[;{}] %name% : !!;")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       21: 2819:            if (!cpp || !Token::Match(tok->next(), "class|struct|enum")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       21: 2820:                tok = tok->tokAt(2);
call    0 returned 100%
       21: 2821:                tok->insertToken(";");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 2822:            }
        -: 2823:        }
        -: 2824:    }
      956: 2825:}
        -: 2826:
        -: 2827:
function _ZN9Tokenizer17simplifyCaseRangeEv called 956 returned 100% blocks executed 6%
      956: 2828:void Tokenizer::simplifyCaseRange()
        -: 2829:{
    29198: 2830:    for (Token* tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28242: 2831:        if (Token::Match(tok, "case %num% ... %num% :")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2832:            const MathLib::bigint start = MathLib::toLongNumber(tok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2833:            MathLib::bigint end = MathLib::toLongNumber(tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2834:            end = std::min(start + 50, end); // Simplify it 50 times at maximum
call    0 never executed
    #####: 2835:            if (start < end) {
branch  0 never executed
branch  1 never executed
    #####: 2836:                tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2837:                tok->str(":");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2838:                tok->insertToken("case");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2839:                for (MathLib::bigint i = end-1; i > start; i--) {
branch  0 never executed
branch  1 never executed
    #####: 2840:                    tok->insertToken(":");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 2841:                    tok->insertToken(MathLib::toString(i));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 2842:                    tok->insertToken("case");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 2843:                }
        -: 2844:            }
    28242: 2845:        } else if (Token::Match(tok, "case %char% ... %char% :")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2846:            const char start = tok->strAt(1)[1];
call    0 never executed
call    1 never executed
    #####: 2847:            const char end = tok->strAt(3)[1];
call    0 never executed
call    1 never executed
    #####: 2848:            if (start < end) {
branch  0 never executed
branch  1 never executed
    #####: 2849:                tok = tok->tokAt(2);
call    0 never executed
    #####: 2850:                tok->str(":");
call    0 never executed
    #####: 2851:                tok->insertToken("case");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2852:                for (char i = end - 1; i > start; i--) {
branch  0 never executed
branch  1 never executed
    #####: 2853:                    tok->insertToken(":");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 2854:                    if (i == '\\') {
branch  0 never executed
branch  1 never executed
    #####: 2855:                        tok->insertToken(std::string("\'\\") + i + '\'');
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
        -: 2856:                    } else {
    #####: 2857:                        tok->insertToken(std::string(1, '\'') + i + '\'');
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
        -: 2858:                    }
    #####: 2859:                    tok->insertToken("case");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 2860:                }
        -: 2861:            }
        -: 2862:        }
        -: 2863:    }
      956: 2864:}
        -: 2865:
function _ZN9Tokenizer15calculateScopesEv called 934 returned 100% blocks executed 59%
      934: 2866:void Tokenizer::calculateScopes()
        -: 2867:{
    29453: 2868:    for (auto tok = list.front(); tok; tok = tok->next())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28519: 2869:        tok->scopeInfo(nullptr);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -: 2870:
     1868: 2871:    std::string nextScopeNameAddition;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1868: 2872:    std::shared_ptr<ScopeInfo2> primaryScope = std::make_shared<ScopeInfo2>("", nullptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
      934: 2873:    list.front()->scopeInfo(primaryScope);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
        -: 2874:
    29453: 2875:    for (Token* tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28519: 2876:        if (tok == list.front() || !tok->scopeInfo()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 94% (fallthrough)
branch  8 taken 6%
branch  9 taken 97% (fallthrough)
branch 10 taken 3%
call   11 returned 100%
branch 12 taken 94% (fallthrough)
branch 13 taken 6%
branch 14 never executed
branch 15 never executed
call   16 never executed
    26750: 2877:            if (tok != list.front())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
    25816: 2878:                tok->scopeInfo(tok->previous()->scopeInfo());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -: 2879:
    26750: 2880:            if (Token::Match(tok, "using namespace %name% ::|<|;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 2881:                std::string usingNamespaceName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2882:                for (const Token* namespaceNameToken = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 2883:                     namespaceNameToken && namespaceNameToken->str() != ";";
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2884:                     namespaceNameToken = namespaceNameToken->next()) {
    #####: 2885:                    usingNamespaceName += namespaceNameToken->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2886:                    usingNamespaceName += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2887:                }
    #####: 2888:                if (usingNamespaceName.length() > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2889:                    usingNamespaceName = usingNamespaceName.substr(0, usingNamespaceName.length() - 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2890:                tok->scopeInfo()->usingNamespaces.insert(usingNamespaceName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    26750: 2891:            } else if (Token::Match(tok, "namespace|class|struct|union %name% {|::|:|<")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      326: 2892:                for (Token* nameTok = tok->next(); nameTok && !Token::Match(nameTok, "{|:"); nameTok = nameTok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
call   10 returned 100%
      164: 2893:                    if (Token::Match(nameTok, ";|<")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 2894:                        nextScopeNameAddition = "";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 2895:                        break;
        -: 2896:                    }
      163: 2897:                    nextScopeNameAddition.append(nameTok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      163: 2898:                    nextScopeNameAddition.append(" ");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2899:                }
      163: 2900:                if (nextScopeNameAddition.length() > 0)
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
      162: 2901:                    nextScopeNameAddition = nextScopeNameAddition.substr(0, nextScopeNameAddition.length() - 1);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
        -: 2902:            }
        -: 2903:
    26750: 2904:            if (Token::simpleMatch(tok, "{")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
        -: 2905:                // This might be the opening of a member function
     1769: 2906:                Token *tok1 = tok;
     1783: 2907:                while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        7: 2908:                    tok1 = tok1->previous();
call    0 returned 100%
     1769: 2909:                if (tok1 && tok1->previous() && tok1->strAt(-1) == ")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 83% (fallthrough)
branch 10 taken 17%
branch 11 taken 83% (fallthrough)
branch 12 taken 17%
     1474: 2910:                    bool member = true;
     1474: 2911:                    tok1 = tok1->linkAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1474: 2912:                    if (Token::Match(tok1->previous(), "throw|noexcept")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 2913:                        tok1 = tok1->previous();
call    0 never executed
    #####: 2914:                        while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2915:                            tok1 = tok1->previous();
call    0 never executed
    #####: 2916:                        if (tok1->strAt(-1) != ")")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2917:                            member = false;
     1474: 2918:                    } else if (Token::Match(tok->tokAt(-2), ":|, %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2919:                        tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2920:                        if (tok1->strAt(-1) != ")")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2921:                            member = false;
        -: 2922:                    }
     1474: 2923:                    if (member) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1474: 2924:                        if (tok1->strAt(-1) == ">")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        1: 2925:                            tok1 = tok1->previous()->findOpeningBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1474: 2926:                        if (tok1 && Token::Match(tok1->tokAt(-3), "%name% :: %name%")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       20: 2927:                            tok1 = tok1->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       40: 2928:                            std::string scope = tok1->strAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
call    8 never executed
       20: 2929:                            while (Token::Match(tok1->tokAt(-2), ":: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2930:                                scope = tok1->strAt(-3) + " :: " + scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 2931:                                tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2932:                            }
        -: 2933:
       20: 2934:                            if (!nextScopeNameAddition.empty() && !scope.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 2935:                                nextScopeNameAddition += " :: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
       20: 2936:                            nextScopeNameAddition += scope;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2937:                        }
        -: 2938:                    }
        -: 2939:                }
        -: 2940:
        -: 2941:                // New scope is opening, record it here
     3538: 2942:                std::shared_ptr<ScopeInfo2> newScopeInfo = std::make_shared<ScopeInfo2>(tok->scopeInfo()->name, tok->link(), tok->scopeInfo()->usingNamespaces);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
call   14 returned 100%
call   15 never executed
call   16 never executed
        -: 2943:
     1769: 2944:                if (newScopeInfo->name != "" && nextScopeNameAddition != "")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
call    4 returned 100%
branch  5 taken 6% (fallthrough)
branch  6 taken 94%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        4: 2945:                    newScopeInfo->name.append(" :: ");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1769: 2946:                newScopeInfo->name.append(nextScopeNameAddition);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1769: 2947:                nextScopeNameAddition = "";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 2948:
     1769: 2949:                if (tok->link())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1769: 2950:                    tok->link()->scopeInfo(tok->scopeInfo());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
     1769: 2951:                tok->scopeInfo(newScopeInfo);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -: 2952:            }
        -: 2953:        }
        -: 2954:    }
      934: 2955:}
        -: 2956:
function _ZN9Tokenizer17simplifyTemplatesEv called 934 returned 100% blocks executed 80%
      934: 2957:void Tokenizer::simplifyTemplates()
        -: 2958:{
      934: 2959:    if (isC())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2960:        return;
        -: 2961:
      934: 2962:    mTemplateSimplifier->simplifyTemplates(
call    0 returned 100%
        -: 2963:#ifdef MAXTIME
        -: 2964:        mMaxTime,
        -: 2965:#else
        -: 2966:        0, // ignored
        -: 2967:#endif
        -: 2968:        mCodeWithTemplates);
        -: 2969:}
        -: 2970://---------------------------------------------------------------------------
        -: 2971:
        -: 2972:
function _ZL24setVarIdParseDeclarationPPK5TokenRKNSt7__debug3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessISA_ESaISt4pairIKSA_iEEEEbbb called 8273 returned 100% blocks executed 91%
     8273: 2973:static bool setVarIdParseDeclaration(const Token **tok, const std::map<std::string,int> &variableId, bool executableScope, bool cpp, bool c)
        -: 2974:{
     8273: 2975:    const Token *tok2 = *tok;
     8273: 2976:    if (!tok2->isName())
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
     2793: 2977:        return false;
        -: 2978:
     5480: 2979:    int typeCount = 0;
     5480: 2980:    int singleNameCount = 0;
     5480: 2981:    bool hasstruct = false;   // Is there a "struct" or "class"?
     5480: 2982:    bool bracket = false;
     5480: 2983:    bool ref = false;
    22266: 2984:    while (tok2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    13873: 2985:        if (tok2->isName()) {
call    0 returned 100%
branch  1 taken 64% (fallthrough)
branch  2 taken 36%
     8837: 2986:            if (cpp && Token::Match(tok2, "namespace|public|private|protected"))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        2: 2987:                return false;
     8835: 2988:            if (Token::Match(tok2, "struct|union|enum") || (!c && Token::Match(tok2, "class|typename"))) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 3% (fallthrough)
branch  9 taken 97%
      230: 2989:                hasstruct = true;
      230: 2990:                typeCount = 0;
      230: 2991:                singleNameCount = 0;
     8605: 2992:            } else if (tok2->str() == "const") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
        -: 2993:                ;  // just skip "const"
     8465: 2994:            } else if (!hasstruct && variableId.find(tok2->str()) != variableId.end() && tok2->previous()->str() != "::") {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 13% (fallthrough)
branch  9 taken 87%
call   10 returned 100%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
branch 15 taken 97% (fallthrough)
branch 16 taken 3%
call   17 returned 100%
branch 18 taken 97% (fallthrough)
branch 19 taken 3%
call   20 returned 100%
branch 21 taken 13% (fallthrough)
branch 22 taken 87%
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
     1101: 2995:                ++typeCount;
     1101: 2996:                tok2 = tok2->next();
call    0 returned 100%
     1101: 2997:                if (!tok2 || tok2->str() != "::")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
     1101: 2998:                    break;
        -: 2999:            } else {
     7364: 3000:                if (tok2->str() != "void" || Token::Match(tok2, "void const| *|(")) // just "void" cannot be a variable type
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
branch  7 taken 85% (fallthrough)
branch  8 taken 15%
     6251: 3001:                    ++typeCount;
     7364: 3002:                ++singleNameCount;
        -: 3003:            }
     9930: 3004:        } else if (!c && ((TemplateSimplifier::templateParameters(tok2) > 0) ||
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
     4894: 3005:                          Token::simpleMatch(tok2, "< >") /* Ticket #4764 */)) {
call    0 returned 100%
       57: 3006:            const Token *start = *tok;
       57: 3007:            if (Token::Match(start->previous(), "%or%|%oror%|&&|&|^|+|-|*|/"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3008:                return false;
       57: 3009:            const Token * const closingBracket = tok2->findClosingBracket();
call    0 returned 100%
       57: 3010:            if (closingBracket == nullptr) { /* Ticket #8151 */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3011:                throw tok2;
call    0 never executed
call    1 never executed
        -: 3012:            }
       57: 3013:            tok2 = closingBracket;
       57: 3014:            if (tok2->str() != ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3015:                break;
       57: 3016:            singleNameCount = 1;
       57: 3017:            if (Token::Match(tok2, "> %name% %or%|%oror%|&&|&|^|+|-|*|/") && !Token::Match(tok2, "> const [*&]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3018:                return false;
       57: 3019:            if (Token::Match(tok2, "> %name% )")) {
call    0 returned 100%
branch  1 taken 28% (fallthrough)
branch  2 taken 72%
       16: 3020:                if (Token::Match(tok2->linkAt(2)->previous(), "if|for|while ("))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3021:                    return false;
       16: 3022:                if (!Token::Match(tok2->linkAt(2)->previous(), "%name% ("))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3023:                    return false;
        -: 3024:            }
     4979: 3025:        } else if (Token::Match(tok2, "&|&&")) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      143: 3026:            ref = !bracket;
     4836: 3027:        } else if (singleNameCount == 1 && Token::Match(tok2, "( [*&]") && Token::Match(tok2->link()->next(), "(|[")) {
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 3028:            bracket = true; // Skip: Seems to be valid pointer to array or function pointer
     4836: 3029:        } else if (tok2->str() == "::") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
      172: 3030:            singleNameCount = 0;
     4664: 3031:        } else if (tok2->str() != "*" && tok2->str() != "::" && tok2->str() != "...") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 94% (fallthrough)
branch 13 taken 6%
     4377: 3032:            break;
        -: 3033:        }
     8393: 3034:        tok2 = tok2->next();
call    0 returned 100%
        -: 3035:    }
        -: 3036:
     5478: 3037:    if (tok2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5478: 3038:        bool isLambdaArg = false;
        -: 3039:        {
     5478: 3040:            const Token *tok3 = (*tok)->previous();
call    0 returned 100%
     5478: 3041:            if (tok3 && tok3->str() == ",") {
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
     1758: 3042:                while (tok3 && !Token::Match(tok3,";|(|[|{")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 82% (fallthrough)
branch  4 taken 18%
branch  5 taken 82% (fallthrough)
branch  6 taken 18%
      793: 3043:                    if (Token::Match(tok3, ")|]"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       10: 3044:                        tok3 = tok3->link();
call    0 returned 100%
      793: 3045:                    tok3 = tok3->previous();
call    0 returned 100%
        -: 3046:                }
        -: 3047:
      172: 3048:                if (tok3 && executableScope && Token::Match(tok3->previous(), "%name% (")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        1: 3049:                    const Token *fdecl = tok3->previous();
call    0 returned 100%
        1: 3050:                    int count = 0;
        3: 3051:                    while (Token::Match(fdecl, "%name%|*")) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 3052:                        fdecl = fdecl->previous();
call    0 returned 100%
        1: 3053:                        count++;
        -: 3054:                    }
        1: 3055:                    if (!Token::Match(fdecl, "[;{}] %name%") || count <= 1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        1: 3056:                        return false;
        -: 3057:                }
        -: 3058:            }
        -: 3059:
     5477: 3060:            if (cpp && tok3 && Token::simpleMatch(tok3->previous(), "] (") && Token::simpleMatch(tok3->link(), ") {"))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
        2: 3061:                isLambdaArg = true;
        -: 3062:        }
        -: 3063:
        -: 3064:
     5477: 3065:        *tok = tok2;
        -: 3066:
        -: 3067:        // In executable scopes, references must be assigned
        -: 3068:        // Catching by reference is an exception
     5477: 3069:        if (executableScope && ref && !isLambdaArg) {
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       33: 3070:            if (Token::Match(tok2, "(|=|{|:"))
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
        -: 3071:                ;   // reference is assigned => ok
        8: 3072:            else if (tok2->str() != ")" || tok2->link()->strAt(-1) != "catch")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 38% (fallthrough)
branch  3 taken 63%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 33% (fallthrough)
branch  8 taken 67%
branch  9 taken 75% (fallthrough)
branch 10 taken 25%
        6: 3073:                return false;   // not catching by reference => not declaration
        -: 3074:        }
        -: 3075:    }
        -: 3076:
        -: 3077:    // Check if array declaration is valid (#2638)
        -: 3078:    // invalid declaration: AAA a[4] = 0;
     5471: 3079:    if (typeCount >= 2 && executableScope && tok2 && tok2->str() == "[") {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
branch  2 taken 37% (fallthrough)
branch  3 taken 63%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 5% (fallthrough)
branch  9 taken 95%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       35: 3080:        const Token *tok3 = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
       37: 3081:        while (tok3 && tok3->str() == "[") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
        1: 3082:            tok3 = tok3->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 3083:        }
       35: 3084:        if (Token::Match(tok3, "= %num%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3085:            return false;
        -: 3086:    }
        -: 3087:
     5471: 3088:    return (typeCount >= 2 && tok2 && Token::Match(tok2->tokAt(-2), "!!:: %type%"));
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 97% (fallthrough)
branch  7 taken 3%
        -: 3089:}
        -: 3090:
        -: 3091:
function _ZN9Tokenizer21setVarIdStructMembersEPP5TokenRNSt7__debug3mapIiNS4_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessISA_ESaISt4pairIKSA_iEEEESB_IiESaISD_IKiSH_EEEEPi called 3698 returned 100% blocks executed 72%
     3698: 3092:void Tokenizer::setVarIdStructMembers(Token **tok1,
        -: 3093:                                      std::map<int, std::map<std::string, int> >& structMembers,
        -: 3094:                                      nonneg int *varId)
        -: 3095:{
     3698: 3096:    Token *tok = *tok1;
        -: 3097:
     3698: 3098:    if (Token::Match(tok, "%name% = { . %name% =")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 3099:        const int struct_varid = tok->varId();
call    0 returned 100%
        1: 3100:        if (struct_varid == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3101:            return;
        -: 3102:
        1: 3103:        std::map<std::string, int>& members = structMembers[struct_varid];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3104:
        1: 3105:        tok = tok->tokAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       11: 3106:        while (tok->str() != "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
        5: 3107:            if (Token::Match(tok, "{|[|("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3108:                tok = tok->link();
call    0 never executed
        5: 3109:            if (Token::Match(tok->previous(), "[,{] . %name% =")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
        1: 3110:                tok = tok->next();
call    0 returned 100%
        2: 3111:                const std::map<std::string, int>::iterator it = members.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
call    6 never executed
        1: 3112:                if (it == members.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 3113:                    members[tok->str()] = ++(*varId);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 3114:                    tok->varId(*varId);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3115:                } else {
    #####: 3116:                    tok->varId(it->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3117:                }
        -: 3118:            }
        5: 3119:            tok = tok->next();
call    0 returned 100%
        -: 3120:        }
        -: 3121:
        1: 3122:        return;
        -: 3123:    }
        -: 3124:
     3925: 3125:    while (Token::Match(tok->next(), ")| . %name% !!(")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -: 3126:        // Don't set varid for trailing return type
      230: 3127:        if (tok->strAt(1) == ")" && tok->linkAt(1)->previous()->isName() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed
branch 16 never executed
branch 17 taken 0% (fallthrough)
branch 18 taken 100%
      115: 3128:            isFunctionHead(tok->linkAt(1), "{|;")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 never executed
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
    #####: 3129:            tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3130:            continue;
        -: 3131:        }
      115: 3132:        const int struct_varid = tok->varId();
call    0 returned 100%
      115: 3133:        tok = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      115: 3134:        if (struct_varid == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3135:            continue;
        -: 3136:
      115: 3137:        if (tok->str() == ".")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        3: 3138:            tok = tok->next();
call    0 returned 100%
        -: 3139:
        -: 3140:        // Don't set varid for template function
      115: 3141:        if (TemplateSimplifier::templateParameters(tok->next()) > 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        1: 3142:            break;
        -: 3143:
      114: 3144:        std::map<std::string, int>& members = structMembers[struct_varid];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      228: 3145:        const std::map<std::string, int>::iterator it = members.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
      114: 3146:        if (it == members.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 69% (fallthrough)
branch  4 taken 31%
       79: 3147:            members[tok->str()] = ++(*varId);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       79: 3148:            tok->varId(*varId);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3149:        } else {
       35: 3150:            tok->varId(it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3151:        }
        -: 3152:    }
        -: 3153:    // tok can't be null
     3697: 3154:    *tok1 = tok;
        -: 3155:}
        -: 3156:
        -: 3157:
function _ZN9Tokenizer24setVarIdClassDeclarationEPK5TokenRKNS_11VariableMapEiRNSt7__debug3mapIiNS7_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiSt4lessISD_ESaISt4pairIKSD_iEEEESE_IiESaISG_IKiSK_EEEE called 173 returned 100% blocks executed 79%
      173: 3158:void Tokenizer::setVarIdClassDeclaration(const Token * const startToken,
        -: 3159:        const VariableMap &variableMap,
        -: 3160:        const nonneg int scopeStartVarId,
        -: 3161:        std::map<int, std::map<std::string,int> >& structMembers)
        -: 3162:{
        -: 3163:    // end of scope
      173: 3164:    const Token * const endToken = startToken->link();
call    0 returned 100%
        -: 3165:
        -: 3166:    // determine class name
      346: 3167:    std::string className;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      369: 3168:    for (const Token *tok = startToken->previous(); tok; tok = tok->previous()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
      368: 3169:        if (!tok->isName() && tok->str() != ":")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 18% (fallthrough)
branch  8 taken 82%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        2: 3170:            break;
      366: 3171:        if (Token::Match(tok, "class|struct|enum %type% [:{]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 46% (fallthrough)
branch  4 taken 54%
      170: 3172:            className = tok->next()->str();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
      170: 3173:            break;
        -: 3174:        }
        -: 3175:    }
        -: 3176:
        -: 3177:    // replace varids..
      173: 3178:    int indentlevel = 0;
      173: 3179:    bool initList = false;
      173: 3180:    bool inEnum = false;
      173: 3181:    const Token *initListArgLastToken = nullptr;
     2031: 3182:    for (Token *tok = startToken->next(); tok != endToken; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
call    3 returned 100%
     1858: 3183:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3184:            syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
     1858: 3185:        if (initList) {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      164: 3186:            if (tok == initListArgLastToken)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       21: 3187:                initListArgLastToken = nullptr;
      207: 3188:            else if (!initListArgLastToken &&
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
      164: 3189:                     Token::Match(tok->previous(), "%name%|>|>> {|(") &&
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       21: 3190:                     Token::Match(tok->link(), "}|) ,|{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       21: 3191:                initListArgLastToken = tok->link();
call    0 returned 100%
        -: 3192:        }
     1858: 3193:        if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       64: 3194:            inEnum = isEnumStart(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       64: 3195:            if (initList && !initListArgLastToken)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 71% (fallthrough)
branch  3 taken 29%
       15: 3196:                initList = false;
       64: 3197:            ++indentlevel;
     1794: 3198:        } else if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
       64: 3199:            --indentlevel;
       64: 3200:            inEnum = false;
     1730: 3201:        } else if (initList && indentlevel == 0 && Token::Match(tok->previous(), "[,:] %name% [({]")) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 20% (fallthrough)
branch  9 taken 80%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
       42: 3202:            const std::map<std::string, int>::const_iterator it = variableMap.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       21: 3203:            if (it != variableMap.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 81% (fallthrough)
branch  4 taken 19%
       17: 3204:                tok->varId(it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3205:            }
     1709: 3206:        } else if (tok->isName() && tok->varId() <= scopeStartVarId) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
branch  6 taken 71% (fallthrough)
branch  7 taken 29%
branch  8 taken 36% (fallthrough)
branch  9 taken 64%
      623: 3207:            if (indentlevel > 0 || initList) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       85: 3208:                if (Token::Match(tok->previous(), "::|.") && tok->strAt(-2) != "this" && !Token::simpleMatch(tok->tokAt(-5), "( * this ) ."))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
branch 20 taken 25% (fallthrough)
branch 21 taken 75%
       21: 3209:                    continue;
       64: 3210:                if (!tok->next())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3211:                    syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       64: 3212:                if (tok->next()->str() == "::") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 31% (fallthrough)
branch  4 taken 69%
       40: 3213:                    if (tok->str() == className)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3214:                        tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3215:                    else
       20: 3216:                        continue;
        -: 3217:                }
        -: 3218:
       44: 3219:                if (!inEnum) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
       82: 3220:                    const std::map<std::string, int>::const_iterator it = variableMap.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       41: 3221:                    if (it != variableMap.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 32% (fallthrough)
branch  4 taken 68%
       13: 3222:                        tok->varId(it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       13: 3223:                        setVarIdStructMembers(&tok, structMembers, variableMap.getVarId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3224:                    }
        -: 3225:                }
        -: 3226:            }
     1086: 3227:        } else if (indentlevel == 0 && tok->str() == ":" && !initListArgLastToken)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
       16: 3228:            initList = true;
        -: 3229:    }
      173: 3230:}
        -: 3231:
        -: 3232:
        -: 3233:
        -: 3234:// Update the variable ids..
        -: 3235:// Parse each function..
function _ZN9Tokenizer21setVarIdClassFunctionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5TokenPKS8_RKNSt7__debug3mapIS5_iSt4lessIS5_ESaISt4pairIS6_iEEEERNSD_IiSJ_SE_IiESaISG_IKiSJ_EEEEPi called 52 returned 100% blocks executed 83%
       52: 3236:void Tokenizer::setVarIdClassFunction(const std::string &classname,
        -: 3237:                                      Token * const startToken,
        -: 3238:                                      const Token * const endToken,
        -: 3239:                                      const std::map<std::string, int> &varlist,
        -: 3240:                                      std::map<int, std::map<std::string, int> >& structMembers,
        -: 3241:                                      nonneg int *varId_)
        -: 3242:{
      311: 3243:    for (Token *tok2 = startToken; tok2 && tok2 != endToken; tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
call    4 returned 100%
      259: 3244:        if (tok2->varId() != 0 || !tok2->isName())
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80% (fallthrough)
branch  7 taken 20%
branch  8 taken 83% (fallthrough)
branch  9 taken 17%
      442: 3245:            continue;
       44: 3246:        if (Token::Match(tok2->tokAt(-2), ("!!" + classname + " ::").c_str()))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
call   14 returned 100%
branch 15 taken 23% (fallthrough)
branch 16 taken 77%
call   17 never executed
call   18 never executed
       10: 3247:            continue;
       34: 3248:        if (Token::Match(tok2->tokAt(-4), "%name% :: %name% ::")) // Currently unsupported
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3249:            continue;
       34: 3250:        if (Token::Match(tok2->tokAt(-2), "!!this .") && !Token::simpleMatch(tok2->tokAt(-5), "( * this ) ."))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 6% (fallthrough)
branch 17 taken 94%
        2: 3251:            continue;
        -: 3252:
       64: 3253:        const std::map<std::string,int>::const_iterator it = varlist.find(tok2->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       32: 3254:        if (it != varlist.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 22% (fallthrough)
branch  4 taken 78%
        7: 3255:            tok2->varId(it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        7: 3256:            setVarIdStructMembers(&tok2, structMembers, varId_);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3257:        }
        -: 3258:    }
       52: 3259:}
        -: 3260:
        -: 3261:
        -: 3262:
function _ZN9Tokenizer8setVarIdEv called 956 returned 100% blocks executed 100%
      956: 3263:void Tokenizer::setVarId()
        -: 3264:{
        -: 3265:    // Clear all variable ids
    30017: 3266:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29061: 3267:        if (tok->isName())
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
    11526: 3268:            tok->varId(0);
call    0 returned 100%
        -: 3269:    }
        -: 3270:
      956: 3271:    setPodTypes();
call    0 returned 100%
        -: 3272:
      956: 3273:    setVarIdPass1();
call    0 returned 100%
        -: 3274:
      956: 3275:    setVarIdPass2();
call    0 returned 100%
      956: 3276:}
        -: 3277:
        -: 3278:
        -: 3279:// Variable declarations can't start with "return" etc.
        -: 3280:#define NOTSTART_C "case", "default", "goto", "NOT", "return", "sizeof", "typedef"
        1: 3281:static const std::set<std::string> notstart_c = { NOTSTART_C };
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
branch 33 taken 88% (fallthrough)
branch 34 taken 13%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
       20: 3282:static const std::set<std::string> notstart_cpp = { NOTSTART_C,
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
branch 81 taken 95% (fallthrough)
branch 82 taken 5%
call   83 returned 100%
call   84 returned 100%
call   85 returned 100%
call   86 returned 100%
call   87 returned 100%
call   88 returned 100%
call   89 returned 100%
call   90 returned 100%
call   91 returned 100%
call   92 returned 100%
call   93 returned 100%
call   94 returned 100%
call   95 returned 100%
call   96 returned 100%
call   97 returned 100%
call   98 returned 100%
call   99 returned 100%
call   100 returned 100%
call   101 returned 100%
call   102 returned 100%
call   103 never executed
branch 104 never executed
branch 105 never executed
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
call   120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
        -: 3283:                                                    "delete", "friend", "new", "throw", "using", "virtual", "explicit", "const_cast", "dynamic_cast", "reinterpret_cast", "static_cast", "template"
       19: 3284:                                                  };
call    0 returned 100%
call    1 never executed
        -: 3285:
function _ZN9Tokenizer13setVarIdPass1Ev called 956 returned 100% blocks executed 81%
      956: 3286:void Tokenizer::setVarIdPass1()
        -: 3287:{
        -: 3288:    // Variable declarations can't start with "return" etc.
      956: 3289:    const std::set<std::string>& notstart = (isC()) ? notstart_c : notstart_cpp;
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -: 3290:
     1912: 3291:    VariableMap variableMap;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
     1912: 3292:    std::map<int, std::map<std::string, int> > structMembers;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
call    4 never executed
        -: 3293:
     1912: 3294:    std::stack<VarIdScopeInfo> scopeStack;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
        -: 3295:
      956: 3296:    scopeStack.push(VarIdScopeInfo());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     1912: 3297:    std::stack<const Token *> functionDeclEndStack;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
call    6 never executed
      956: 3298:    const Token *functionDeclEndToken = nullptr;
      956: 3299:    bool initlist = false;
      956: 3300:    bool inlineFunction = false;
    24524: 3301:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
    24523: 3302:        if (tok->isOp())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 9% (fallthrough)
branch  4 taken 91%
     2194: 3303:            continue;
    22329: 3304:        if (tok == functionDeclEndToken) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
     1789: 3305:            functionDeclEndStack.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1789: 3306:            functionDeclEndToken = functionDeclEndStack.empty() ? nullptr : functionDeclEndStack.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
branch  4 never executed
branch  5 never executed
     1789: 3307:            if (tok->str() == ":")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       15: 3308:                initlist = true;
     1774: 3309:            else if (tok->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
      285: 3310:                if (!variableMap.leaveScope())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3311:                    cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
     1489: 3312:            } else if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     1489: 3313:                scopeStack.push(VarIdScopeInfo(true, scopeStack.top().isStructInit || tok->strAt(-1) == "=", /*isEnum=*/false, *variableMap.getVarId()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
    20540: 3314:        } else if (!initlist && tok->str()=="(") {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
     2740: 3315:            const Token * newFunctionDeclEnd = nullptr;
     2740: 3316:            if (!scopeStack.top().isExecutable)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 48% (fallthrough)
branch  4 taken 52%
     1302: 3317:                newFunctionDeclEnd = isFunctionHead(tok, "{:;");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 3318:            else {
     1438: 3319:                Token const * const tokenLinkNext = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
     1438: 3320:                if (tokenLinkNext && tokenLinkNext->str() == "{") // might be for- or while-loop or if-statement
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 34% (fallthrough)
branch  5 taken 66%
branch  6 taken 34% (fallthrough)
branch  7 taken 66%
      496: 3321:                    newFunctionDeclEnd = tokenLinkNext;
        -: 3322:            }
     2740: 3323:            if (newFunctionDeclEnd && newFunctionDeclEnd != functionDeclEndToken) {
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
     1789: 3324:                functionDeclEndStack.push(newFunctionDeclEnd);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1789: 3325:                functionDeclEndToken = newFunctionDeclEnd;
     1789: 3326:                variableMap.enterScope();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3327:            }
    17800: 3328:        } else if (Token::Match(tok, "{|}")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 12% (fallthrough)
branch  4 taken 88%
     2113: 3329:            inlineFunction = false;
        -: 3330:
     2113: 3331:            const Token * const startToken = (tok->str() == "{") ? tok : tok->link();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
call    4 returned 100%
        -: 3332:
        -: 3333:            // parse anonymous unions as part of the current scope
     6327: 3334:            if (!Token::Match(startToken->previous(), "union|struct|enum {") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
     2140: 3335:                !(initlist && Token::Match(startToken->previous(), "%name%|>|>>") && Token::Match(startToken->link(), "} ,|{"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -: 3336:
     2101: 3337:                if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
        -: 3338:                    bool isExecutable;
      306: 3339:                    const Token *prev = tok->previous();
call    0 returned 100%
     1138: 3340:                    while (Token::Match(prev, "%name%|."))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 58% (fallthrough)
branch  4 taken 42%
      416: 3341:                        prev = prev->previous();
call    0 returned 100%
      306: 3342:                    const bool isLambda = prev && prev->str() == ")" && Token::simpleMatch(prev->link()->previous(), "] (");
branch  0 taken 59% (fallthrough)
branch  1 taken 41%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 8% (fallthrough)
branch 12 taken 92%
      321: 3343:                    if ((!isLambda && (tok->strAt(-1) == ")" || Token::Match(tok->tokAt(-2), ") %type%"))) ||
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 96% (fallthrough)
branch  7 taken 4%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 1% (fallthrough)
branch 17 taken 99%
branch 18 taken 5% (fallthrough)
branch 19 taken 95%
        3: 3344:                        (initlist && tok->strAt(-1) == "}")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
       15: 3345:                        isExecutable = true;
        -: 3346:                    } else {
      416: 3347:                        isExecutable = ((scopeStack.top().isExecutable || initlist || tok->strAt(-1) == "else") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 57% (fallthrough)
branch  4 taken 43%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 91% (fallthrough)
branch 14 taken 9%
      125: 3348:                                        !isClassStructUnionEnumStart(tok));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      291: 3349:                        if (!(scopeStack.top().isStructInit || tok->strAt(-1) == "="))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 94% (fallthrough)
branch 10 taken 6%
branch 11 taken 94% (fallthrough)
branch 12 taken 6%
      273: 3350:                            variableMap.enterScope();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3351:                    }
      306: 3352:                    initlist = false;
      306: 3353:                    scopeStack.push(VarIdScopeInfo(isExecutable, scopeStack.top().isStructInit || tok->strAt(-1) == "=", isEnumStart(tok), *variableMap.getVarId()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 6% (fallthrough)
branch 14 taken 94%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
        -: 3354:                } else { /* if (tok->str() == "}") */
     1795: 3355:                    bool isNamespace = false;
     2215: 3356:                    for (const Token *tok1 = tok->link()->previous(); tok1 && tok1->isName(); tok1 = tok1->previous()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 20% (fallthrough)
branch  8 taken 80%
branch  9 taken 19% (fallthrough)
branch 10 taken 81%
call   11 returned 100%
      422: 3357:                        if (tok1->str() == "namespace") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 3358:                            isNamespace = true;
        2: 3359:                            break;
        -: 3360:                        }
        -: 3361:                    }
        -: 3362:                    // Set variable ids in class declaration..
     1795: 3363:                    if (!initlist && !isC() && !scopeStack.top().isExecutable && tok->link() && !isNamespace) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 10% (fallthrough)
branch  9 taken 90%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 99% (fallthrough)
branch 14 taken 1%
branch 15 taken 10% (fallthrough)
branch 16 taken 90%
      173: 3364:                        setVarIdClassDeclaration(tok->link(),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3365:                                                 variableMap,
      173: 3366:                                                 scopeStack.top().startVarid,
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3367:                                                 structMembers);
        -: 3368:                    }
        -: 3369:
     1795: 3370:                    if (!scopeStack.top().isStructInit) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     1777: 3371:                        variableMap.leaveScope();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3372:                    }
        -: 3373:
     1795: 3374:                    scopeStack.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1795: 3375:                    if (scopeStack.empty()) {  // should be impossible
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3376:                        scopeStack.push(VarIdScopeInfo());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3377:                    }
        -: 3378:                }
        -: 3379:            }
        -: 3380:        }
        -: 3381:
    76574: 3382:        if (!scopeStack.top().isStructInit &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 96% (fallthrough)
branch  6 taken 4%
branch  7 taken 43% (fallthrough)
branch  8 taken 57%
    43566: 3383:            (tok == list.front() ||
call    0 returned 100%
branch  1 taken 69% (fallthrough)
branch  2 taken 31%
    35964: 3384:             Token::Match(tok, "[;{}]") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
    52853: 3385:             (tok->str() == "(" && isFunctionHead(tok,"{")) ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 44% (fallthrough)
branch 10 taken 56%
branch 11 taken 9% (fallthrough)
branch 12 taken 91%
branch 13 taken 12% (fallthrough)
branch 14 taken 88%
call   15 returned 100%
branch 16 taken 12% (fallthrough)
branch 17 taken 88%
call   18 returned 100%
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    49435: 3386:             (tok->str() == "(" && !scopeStack.top().isExecutable && isFunctionHead(tok,";:")) ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 27% (fallthrough)
branch  6 taken 73%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 6% (fallthrough)
branch 15 taken 94%
branch 16 taken 2% (fallthrough)
branch 17 taken 98%
branch 18 taken 1% (fallthrough)
branch 19 taken 99%
call   20 returned 100%
branch 21 taken 1% (fallthrough)
branch 22 taken 99%
call   23 returned 100%
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
    25724: 3387:             (tok->str() == "," && (!scopeStack.top().isExecutable || inlineFunction)) ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 43% (fallthrough)
branch  6 taken 57%
branch  7 taken 98% (fallthrough)
branch  8 taken 2%
branch  9 taken 54% (fallthrough)
branch 10 taken 46%
    19383: 3388:             (tok->isName() && endsWith(tok->str(), ':')))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        -: 3389:
        -: 3390:            // No variable declarations in sizeof
     9655: 3391:            if (Token::simpleMatch(tok->previous(), "sizeof (")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      430: 3392:                continue;
        -: 3393:            }
        -: 3394:
     9652: 3395:            if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3396:                return;
        -: 3397:
        -: 3398:            // locate the variable name..
     9652: 3399:            const Token *tok2 = (tok->isName()) ? tok : tok->next();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
call    5 returned 100%
        -: 3400:
        -: 3401:            // private: protected: public: etc
     9738: 3402:            while (tok2 && endsWith(tok2->str(), ':')) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       43: 3403:                tok2 = tok2->next();
call    0 returned 100%
        -: 3404:            }
     9652: 3405:            if (!tok2)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      955: 3406:                break;
        -: 3407:
        -: 3408:            // Variable declaration can't start with "return", etc
     8697: 3409:            if (notstart.find(tok2->str()) != notstart.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 5% (fallthrough)
branch  9 taken 95%
call   10 never executed
branch 11 never executed
branch 12 never executed
      424: 3410:                continue;
        -: 3411:
     8273: 3412:            if (!isC() && Token::simpleMatch(tok2, "const new"))
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3413:                continue;
        -: 3414:
        -: 3415:            bool decl;
        -: 3416:            try { /* Ticket #8151 */
     8273: 3417:                decl = setVarIdParseDeclaration(&tok2, variableMap.map(), scopeStack.top().isExecutable, isCPP(), isC());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
    =====: 3418:            } catch (const Token * errTok) {
call    0 never executed
call    1 never executed
call    2 never executed
    =====: 3419:                syntaxError(errTok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 3420:            }
     8273: 3421:            if (decl) {
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
     1796: 3422:                if (tok->str() == "(" && isFunctionHead(tok,"{") && scopeStack.top().isExecutable)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 34% (fallthrough)
branch  3 taken 66%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 88% (fallthrough)
branch 12 taken 12%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 5% (fallthrough)
branch 17 taken 95%
branch 18 taken 34% (fallthrough)
branch 19 taken 66%
call   20 returned 100%
branch 21 taken 34% (fallthrough)
branch 22 taken 66%
call   23 returned 100%
branch 24 taken 2% (fallthrough)
branch 25 taken 98%
branch 26 never executed
branch 27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
       28: 3423:                    inlineFunction = true;
        -: 3424:
     1796: 3425:                const Token* prev2 = tok2->previous();
call    0 returned 100%
     1796: 3426:                if (Token::Match(prev2, "%type% [;[=,)]") && tok2->previous()->str() != "const")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 85% (fallthrough)
branch  4 taken 15%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 15% (fallthrough)
branch 11 taken 85%
        -: 3427:                    ;
      268: 3428:                else if (Token::Match(prev2, "%type% :") && tok->strAt(-1) == "for")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 98% (fallthrough)
branch 12 taken 2%
        -: 3429:                    ;
      263: 3430:                else if (Token::Match(prev2, "%type% ( !!)") && Token::simpleMatch(tok2->link(), ") ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 54% (fallthrough)
branch  4 taken 46%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 18% (fallthrough)
branch 10 taken 82%
branch 11 taken 10% (fallthrough)
branch 12 taken 90%
        -: 3431:                    // In C++ , a variable can't be called operator+ or something like that.
       50: 3432:                    if (isCPP() &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       25: 3433:                        prev2->isOperatorKeyword())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    #####: 3434:                        continue;
        -: 3435:
       25: 3436:                    const Token *tok3 = tok2->next();
call    0 returned 100%
       25: 3437:                    if (!tok3->isStandardType() && tok3->str() != "void" && !Token::Match(tok3, "struct|union|class %type%") && tok3->str() != "." && !Token::Match(tok2->link()->previous(), "[&*]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 64% (fallthrough)
branch  4 taken 36%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
branch 23 taken 100% (fallthrough)
branch 24 taken 0%
branch 25 taken 64% (fallthrough)
branch 26 taken 36%
       16: 3438:                        if (!scopeStack.top().isExecutable) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 38% (fallthrough)
branch  4 taken 63%
        -: 3439:                            // Detecting initializations with () in non-executable scope is hard and often impossible to be done safely. Thus, only treat code as a variable that definitely is one.
        6: 3440:                            decl = false;
        6: 3441:                            bool rhs = false;
       18: 3442:                            for (; tok3; tok3 = tok3->nextArgumentBeforeCreateLinks2()) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        6: 3443:                                if (tok3->str() == "=") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3444:                                    rhs = true;
    #####: 3445:                                    continue;
        -: 3446:                                }
        -: 3447:
        6: 3448:                                if (tok3->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3449:                                    rhs = false;
    #####: 3450:                                    continue;
        -: 3451:                                }
        -: 3452:
        6: 3453:                                if (rhs)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3454:                                    continue;
        -: 3455:
       18: 3456:                                if (tok3->isLiteral() ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       18: 3457:                                    (tok3->isName() && variableMap.hasVariable(tok3->str())) ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
       12: 3458:                                    tok3->isOp() ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
       36: 3459:                                    tok3->str() == "(" ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       24: 3460:                                    notstart.find(tok3->str()) != notstart.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
    #####: 3461:                                    decl = true;
    #####: 3462:                                    break;
        -: 3463:                                }
        -: 3464:                            }
        -: 3465:                        }
        -: 3466:                    } else
        9: 3467:                        decl = false;
      238: 3468:                } else if (isCPP() && Token::Match(prev2, "%type% {") && Token::simpleMatch(tok2->link(), "} ;")) { // C++11 initialization style
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 3469:                    if (Token::Match(prev2, "do|try|else") || Token::Match(prev2->tokAt(-2), "struct|class|:"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 3470:                        continue;
        -: 3471:                } else
      238: 3472:                    decl = false;
        -: 3473:
     1796: 3474:                if (decl) {
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1543: 3475:                    variableMap.addVariable(prev2->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3476:
        -: 3477:                    // set varid for template parameters..
     1543: 3478:                    tok = tok->next();
call    0 returned 100%
     7719: 3479:                    while (Token::Match(tok, "%name%|::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
     3088: 3480:                        tok = tok->next();
call    0 returned 100%
     1543: 3481:                    if (tok && tok->str() == "<") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
       52: 3482:                        const Token *end = tok->findClosingBracket();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      368: 3483:                        while (tok != end) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      158: 3484:                            if (tok->isName()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 49% (fallthrough)
branch  4 taken 51%
      156: 3485:                                const std::map<std::string, int>::const_iterator it = variableMap.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
       78: 3486:                                if (it != variableMap.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3487:                                    tok->varId(it->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3488:                            }
      158: 3489:                            tok = tok->next();
call    0 returned 100%
        -: 3490:                        }
        -: 3491:                    }
        -: 3492:
     1543: 3493:                    tok = tok2->previous();
call    0 returned 100%
        -: 3494:                }
        -: 3495:            }
        -: 3496:        }
        -: 3497:
    20947: 3498:        if (tok->isName()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 44% (fallthrough)
branch  4 taken 56%
        -: 3499:            // don't set variable id after a struct|enum|union
     9243: 3500:            if (Token::Match(tok->previous(), "struct|enum|union") || (isCPP() && tok->strAt(-1) == "class"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 98% (fallthrough)
branch  8 taken 2%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
branch 15 taken 2% (fallthrough)
branch 16 taken 98%
      199: 3501:                continue;
        -: 3502:
     9044: 3503:            if (!isC()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     8861: 3504:                if (tok->previous() && tok->previous()->str() == "::")
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3505:                    continue;
     8861: 3506:                if (tok->next() && tok->next()->str() == "::")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      125: 3507:                    continue;
     8736: 3508:                if (Token::simpleMatch(tok->tokAt(-2), ":: template"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 3509:                    continue;
        -: 3510:            }
        -: 3511:
        -: 3512:            // function declaration inside executable scope? Function declaration is of form: type name "(" args ")"
     8919: 3513:            if (scopeStack.top().isExecutable && Token::Match(tok, "%name% [,)]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 56% (fallthrough)
branch  4 taken 44%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 15% (fallthrough)
branch  9 taken 85%
branch 10 taken 8% (fallthrough)
branch 11 taken 92%
      744: 3514:                bool par = false;
        -: 3515:                const Token *start, *end;
        -: 3516:
        -: 3517:                // search begin of function declaration
     1588: 3518:                for (start = tok; Token::Match(start, "%name%|*|&|,|("); start = start->previous()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 88% (fallthrough)
branch  4 taken 12%
call    5 returned 100%
     1391: 3519:                    if (start->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
      498: 3520:                        if (par)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3521:                            break;
      498: 3522:                        par = true;
        -: 3523:                    }
     1391: 3524:                    if (Token::Match(start, "[(,]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
      555: 3525:                        if (!Token::Match(start, "[(,] %type% %name%|*|&"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
      544: 3526:                            break;
        -: 3527:                    }
      847: 3528:                    if (start->varId() > 0)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        3: 3529:                        break;
        -: 3530:                }
        -: 3531:
        -: 3532:                // search end of function declaration
      744: 3533:                for (end = tok->next(); Token::Match(end, "%name%|*|&|,"); end = end->next()) {}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 19% (fallthrough)
branch  5 taken 81%
call    6 returned 100%
        -: 3534:
        -: 3535:                // there are tokens which can't appear at the begin of a function declaration such as "return"
      744: 3536:                const bool isNotstartKeyword = start->next() && notstart.find(start->next()->str()) != notstart.end();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0%
call   17 returned 100%
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
        -: 3537:
        -: 3538:                // now check if it is a function declaration
      744: 3539:                if (Token::Match(start, "[;{}] %type% %name%|*") && par && Token::simpleMatch(end, ") ;") && !isNotstartKeyword)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
        -: 3540:                    // function declaration => don't set varid
    #####: 3541:                    continue;
        -: 3542:            }
        -: 3543:
     8919: 3544:            if (!scopeStack.top().isEnum) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    17814: 3545:                const std::map<std::string, int>::const_iterator it = variableMap.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     8907: 3546:                if (it != variableMap.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 41% (fallthrough)
branch  4 taken 59%
     3678: 3547:                    tok->varId(it->second);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
     3678: 3548:                    setVarIdStructMembers(&tok, structMembers, variableMap.getVarId());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3549:                }
        -: 3550:            }
    11704: 3551:        } else if (Token::Match(tok, "::|. %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        -: 3552:            // Don't set varid after a :: or . token
      234: 3553:            tok = tok->next();
call    0 returned 100%
    11470: 3554:        } else if (tok->str() == ":" && Token::Match(tok->tokAt(-2), "class %type%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 4% (fallthrough)
branch 11 taken 96%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
       14: 3555:            do {
       22: 3556:                tok = tok->next();
call    0 returned 100%
       22: 3557:            } while (tok && (tok->isName() || tok->str() == ","));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 36% (fallthrough)
branch  6 taken 64%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
branch 11 taken 64% (fallthrough)
branch 12 taken 36%
        8: 3558:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3559:                break;
        8: 3560:            tok = tok->previous();
call    0 returned 100%
        -: 3561:        }
        -: 3562:    }
        -: 3563:
      956: 3564:    mVarId = *variableMap.getVarId();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100%
branch  3 taken 0%
        -: 3565:}
        -: 3566:
        -: 3567:namespace {
function _ZN12_GLOBAL__N_16MemberD2Ev called 247 returned 100% blocks executed 100%
      247: 3568:    struct Member {
call    0 returned 100%
call    1 returned 100%
function _ZN12_GLOBAL__N_16MemberC2ERKNSt7__debug4listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EEERKNS2_IPK5TokenSaISF_EEEPSD_ called 247 returned 100% blocks executed 80%
      247: 3569:        Member(const std::list<std::string> &s, const std::list<const Token *> &ns, Token *t) : usingnamespaces(ns), scope(s), tok(t) {}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        -: 3570:        std::list<const Token *> usingnamespaces;
        -: 3571:        std::list<std::string> scope;
        -: 3572:        Token *tok;
        -: 3573:    };
        -: 3574:}
        -: 3575:
function _ZL12getScopeNameRKNSt7__debug4listI10ScopeInfo2SaIS1_EEE called 164 returned 100% blocks executed 64%
      164: 3576:static std::string getScopeName(const std::list<ScopeInfo2> &scopeInfo)
        -: 3577:{
      164: 3578:    std::string ret;
call    0 returned 100%
      168: 3579:    for (const ScopeInfo2 &si : scopeInfo)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        4: 3580:        ret += (ret.empty() ? "" : " :: ") + (si.name);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
      164: 3581:    return ret;
        -: 3582:}
        -: 3583:
function _ZL15matchMemberNameRKNSt7__debug4listINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EEEPK5TokenPSB_RKNS0_I10ScopeInfo2SaISF_EEE called 51 returned 100% blocks executed 38%
       51: 3584:static Token * matchMemberName(const std::list<std::string> &scope, const Token *nsToken, Token *memberToken, const std::list<ScopeInfo2> &scopeInfo)
        -: 3585:{
      102: 3586:    std::list<ScopeInfo2>::const_iterator scopeIt = scopeInfo.begin();
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 3587:
        -: 3588:    // Current scope..
       51: 3589:    for (std::list<std::string>::const_iterator it = scope.begin(); it != scope.end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
    #####: 3590:        if (scopeIt == scopeInfo.end() || scopeIt->name != *it)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 3591:            return nullptr;
    #####: 3592:        ++scopeIt;
call    0 never executed
        -: 3593:    }
        -: 3594:
        -: 3595:    // using namespace..
       51: 3596:    if (nsToken) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 3597:        while (Token::Match(nsToken, "%name% ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3598:            if (scopeIt != scopeInfo.end() && nsToken->str() == scopeIt->name) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 3599:                nsToken = nsToken->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3600:                ++scopeIt;
call    0 never executed
        -: 3601:            } else {
    #####: 3602:                return nullptr;
        -: 3603:            }
        -: 3604:        }
    #####: 3605:        if (!Token::Match(nsToken, "%name% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3606:            return nullptr;
    #####: 3607:        if (scopeIt == scopeInfo.end() || nsToken->str() != scopeIt->name)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 3608:            return nullptr;
    #####: 3609:        ++scopeIt;
call    0 never executed
        -: 3610:    }
        -: 3611:
        -: 3612:    // Parse member tokens..
       61: 3613:    while (scopeIt != scopeInfo.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 91% (fallthrough)
branch  4 taken 9%
       51: 3614:        if (!Token::Match(memberToken, "%name% ::|<"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3615:            return nullptr;
       51: 3616:        if (memberToken->str() != scopeIt->name)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 90% (fallthrough)
branch  4 taken 10%
       46: 3617:            return nullptr;
        5: 3618:        if (memberToken->next()->str() == "<") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3619:            memberToken = memberToken->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3620:            if (!Token::simpleMatch(memberToken, "> ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3621:                return nullptr;
        -: 3622:        }
        5: 3623:        memberToken = memberToken->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 3624:        ++scopeIt;
call    0 returned 100%
        -: 3625:    }
        -: 3626:
        5: 3627:    return Token::Match(memberToken, "~| %name%") ? memberToken : nullptr;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -: 3628:}
        -: 3629:
function _ZL15matchMemberNameRKN12_GLOBAL__N_16MemberERKNSt7__debug4listI10ScopeInfo2SaIS5_EEE called 51 returned 100% blocks executed 63%
       51: 3630:static Token * matchMemberName(const Member &member, const std::list<ScopeInfo2> &scopeInfo)
        -: 3631:{
       51: 3632:    if (scopeInfo.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3633:        return nullptr;
        -: 3634:
        -: 3635:    // Does this member match without "using namespace"..
       51: 3636:    Token *ret = matchMemberName(member.scope, nullptr, member.tok, scopeInfo);
call    0 returned 100%
       51: 3637:    if (ret)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        5: 3638:        return ret;
        -: 3639:
        -: 3640:    // Try to match member using the "using namespace ..." namespaces..
       46: 3641:    for (const Token *ns : member.usingnamespaces) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
    #####: 3642:        ret = matchMemberName(member.scope, ns, member.tok, scopeInfo);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3643:        if (ret)
branch  0 never executed
branch  1 never executed
    #####: 3644:            return ret;
        -: 3645:    }
        -: 3646:
       46: 3647:    return nullptr;
        -: 3648:}
        -: 3649:
function _ZL18matchMemberVarNameRKN12_GLOBAL__N_16MemberERKNSt7__debug4listI10ScopeInfo2SaIS5_EEE called 21 returned 100% blocks executed 100%
       21: 3650:static Token * matchMemberVarName(const Member &var, const std::list<ScopeInfo2> &scopeInfo)
        -: 3651:{
       21: 3652:    Token *tok = matchMemberName(var, scopeInfo);
call    0 returned 100%
       21: 3653:    return Token::Match(tok, "%name% !!(") ? tok : nullptr;
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        -: 3654:}
        -: 3655:
function _ZL23matchMemberFunctionNameRKN12_GLOBAL__N_16MemberERKNSt7__debug4listI10ScopeInfo2SaIS5_EEE called 30 returned 100% blocks executed 100%
       30: 3656:static Token * matchMemberFunctionName(const Member &func, const std::list<ScopeInfo2> &scopeInfo)
        -: 3657:{
       30: 3658:    Token *tok = matchMemberName(func, scopeInfo);
call    0 returned 100%
       30: 3659:    return Token::Match(tok, "~| %name% (") ? tok : nullptr;
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
        -: 3660:}
        -: 3661:
function _ZN9Tokenizer13setVarIdPass2Ev called 956 returned 100% blocks executed 65%
      956: 3662:void Tokenizer::setVarIdPass2()
        -: 3663:{
     1912: 3664:    std::map<int, std::map<std::string, int> > structMembers;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 3665:
        -: 3666:    // Member functions and variables in this source
     1912: 3667:    std::list<Member> allMemberFunctions;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1912: 3668:    std::list<Member> allMemberVars;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      956: 3669:    if (!isC()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
     1868: 3670:        std::map<const Token *, std::string> endOfScope;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1868: 3671:        std::list<std::string> scope;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     1868: 3672:        std::list<const Token *> usingnamespaces;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    28911: 3673:        for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27977: 3674:            if (!tok->previous() || Token::Match(tok->previous(), "[;{}]")) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 21% (fallthrough)
branch  8 taken 79%
branch  9 taken 23% (fallthrough)
branch 10 taken 77%
     6551: 3675:                if (Token::Match(tok, "using namespace %name% ::|;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3676:                    Token *endtok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3677:                    while (Token::Match(endtok, "%name% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3678:                        endtok = endtok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3679:                    if (Token::Match(endtok, "%name% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3680:                        usingnamespaces.push_back(tok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3681:                    tok = endtok;
    27730: 3682:                    continue;
     6551: 3683:                } else if (Token::Match(tok, "namespace %name% {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 3684:                    scope.push_back(tok->strAt(1));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2: 3685:                    endOfScope[tok->linkAt(2)] = tok->strAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
        -: 3686:                }
        -: 3687:            }
        -: 3688:
    27977: 3689:            if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     3538: 3690:                const std::map<const Token *, std::string>::iterator it = endOfScope.find(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
     1769: 3691:                if (it != endOfScope.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 3692:                    scope.remove(it->second);
call    0 returned 100%
call    1 returned 100%
        -: 3693:            }
        -: 3694:
    27977: 3695:            Token* const tok1 = tok;
    27977: 3696:            if (Token::Match(tok->previous(), "!!:: %name% :: ~| %name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
      246: 3697:                tok = tok->next();
call    0 returned 100%
    55461: 3698:            else if (Token::Match(tok->previous(), "!!:: %name% <") && Token::Match(tok->next()->findClosingBracket(),"> :: ~| %name%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
branch 15 taken 1% (fallthrough)
branch 16 taken 99%
        1: 3699:                tok = tok->next()->findClosingBracket()->next();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        -: 3700:            else
    27730: 3701:                continue;
        -: 3702:
      251: 3703:            while (Token::Match(tok, ":: ~| %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      249: 3704:                tok = tok->next();
call    0 returned 100%
      249: 3705:                if (tok->str() == "~")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3706:                    tok = tok->next();
call    0 never executed
      249: 3707:                else if (Token::Match(tok, "%name% <") && Token::Match(tok->next()->findClosingBracket(),"> :: ~| %name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 2% (fallthrough)
branch 13 taken 98%
branch 14 taken 1% (fallthrough)
branch 15 taken 99%
        1: 3708:                    tok = tok->next()->findClosingBracket()->next();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
      248: 3709:                else if (Token::Match(tok, "%name% ::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 3710:                    tok = tok->next();
call    0 returned 100%
        -: 3711:                else
      247: 3712:                    break;
        -: 3713:            }
      247: 3714:            if (!tok->next())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3715:                syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
      247: 3716:            if (Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 29% (fallthrough)
branch  4 taken 71%
       72: 3717:                allMemberFunctions.emplace_back(scope, usingnamespaces, tok1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3718:            else
      175: 3719:                allMemberVars.emplace_back(scope, usingnamespaces, tok1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3720:        }
        -: 3721:    }
        -: 3722:
     1912: 3723:    std::list<ScopeInfo2> scopeInfo;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -: 3724:
        -: 3725:    // class members..
     1912: 3726:    std::map<std::string, std::map<std::string, int> > varsByClass;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    30017: 3727:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29389: 3728:        while (tok->str() == "}" && !scopeInfo.empty() && tok == scopeInfo.back().bodyEnd)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
call    4 returned 100%
branch  5 taken 12% (fallthrough)
branch  6 taken 88%
call    7 returned 100%
branch  8 taken 72% (fallthrough)
branch  9 taken 28%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
      164: 3729:            scopeInfo.pop_back();
call    0 returned 100%
        -: 3730:
    29061: 3731:        if (!Token::Match(tok, "namespace|class|struct %name% {|:|::"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    57868: 3732:            continue;
        -: 3733:
      254: 3734:        const std::string &scopeName(getScopeName(scopeInfo));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
      254: 3735:        const std::string scopeName2(scopeName.empty() ? std::string() : (scopeName + " :: "));
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 55%
branch  9 taken 45%
call   10 never executed
        -: 3736:
      254: 3737:        std::list<const Token *> classnameTokens;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 55%
branch  3 taken 45%
call    4 never executed
      164: 3738:        classnameTokens.push_back(tok->next());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      164: 3739:        const Token* tokStart = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      164: 3740:        while (Token::Match(tokStart, ":: %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3741:            classnameTokens.push_back(tokStart->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3742:            tokStart = tokStart->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3743:        }
        -: 3744:
      254: 3745:        std::string classname;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 55%
branch  3 taken 45%
call    4 never executed
      328: 3746:        for (const Token *it : classnameTokens)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      164: 3747:            classname += (classname.empty() ? "" : " :: ") + it->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        -: 3748:
      164: 3749:        std::map<std::string, int> &thisClassVars = varsByClass[scopeName2 + classname];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
      212: 3750:        while (Token::Match(tokStart, ":|::|,|%name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 13% (fallthrough)
branch  4 taken 87%
       24: 3751:            if (Token::Match(tokStart, "%name% <")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3752:                tokStart = tokStart->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3753:                if (tokStart)
branch  0 never executed
branch  1 never executed
    #####: 3754:                    tokStart = tokStart->next();
call    0 never executed
    #####: 3755:                continue;
        -: 3756:            }
       24: 3757:            if (Token::Match(tokStart, "%name% ,|{")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 38% (fallthrough)
branch  4 taken 63%
        9: 3758:                const std::map<std::string, int>& baseClassVars = varsByClass[tokStart->str()];
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        9: 3759:                thisClassVars.insert(baseClassVars.begin(), baseClassVars.end());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
        -: 3760:            }
       24: 3761:            tokStart = tokStart->next();
call    0 returned 100%
        -: 3762:        }
      164: 3763:        if (!Token::simpleMatch(tokStart, "{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3764:            continue;
        -: 3765:
        -: 3766:        // What member variables are there in this class?
      328: 3767:        for (const Token *it : classnameTokens)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      164: 3768:            scopeInfo.emplace_back(it->str(), tokStart->link());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -: 3769:
     1217: 3770:        for (Token *tok2 = tokStart->next(); tok2 && tok2 != tokStart->link(); tok2 = tok2->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 87% (fallthrough)
branch  5 taken 13%
branch  6 taken 87% (fallthrough)
branch  7 taken 13%
call    8 returned 100%
        -: 3771:            // skip parentheses..
     1053: 3772:            if (tok2->link()) {
call    0 returned 100%
branch  1 taken 19% (fallthrough)
branch  2 taken 81%
      203: 3773:                if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 32% (fallthrough)
branch  3 taken 68%
       64: 3774:                    if (tok2->strAt(-1) == ")" || tok2->strAt(-2) == ")")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 34% (fallthrough)
branch  5 taken 66%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 27% (fallthrough)
branch 11 taken 73%
branch 12 taken 75% (fallthrough)
branch 13 taken 25%
       48: 3775:                        setVarIdClassFunction(scopeName2 + classname, tok2, tok2->link(), thisClassVars, structMembers, &mVarId);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
       64: 3776:                    tok2 = tok2->link();
call    0 returned 100%
      139: 3777:                } else if (tok2->str() == "(" && tok2->link()->strAt(1) != "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 84% (fallthrough)
branch 12 taken 16%
      117: 3778:                    tok2 = tok2->link();
call    0 returned 100%
        -: 3779:
        -: 3780:                    // Skip initialization list
      145: 3781:                    while (Token::Match(tok2, ") [:,] %name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
       14: 3782:                        tok2 = tok2->linkAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3783:                }
        -: 3784:            }
        -: 3785:
        -: 3786:            // Found a member variable..
      850: 3787:            else if (tok2->varId() > 0)
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
      132: 3788:                thisClassVars[tok2->str()] = tok2->varId();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        -: 3789:        }
        -: 3790:
        -: 3791:        // Are there any member variables in this class?
      164: 3792:        if (thisClassVars.empty())
call    0 returned 100%
branch  1 taken 44% (fallthrough)
branch  2 taken 56%
       72: 3793:            continue;
        -: 3794:
        -: 3795:        // Member variables
      113: 3796:        for (const Member &var : allMemberVars) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 19% (fallthrough)
branch  4 taken 81%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
       21: 3797:            Token *tok2 = matchMemberVarName(var, scopeInfo);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       21: 3798:            if (!tok2)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
       20: 3799:                continue;
        1: 3800:            tok2->varId(thisClassVars[tok2->str()]);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 3801:        }
        -: 3802:
       92: 3803:        if (isC() || tok->str() == "namespace")
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 2% (fallthrough)
branch  8 taken 98%
        2: 3804:            continue;
        -: 3805:
        -: 3806:        // Set variable ids in member functions for this class..
      120: 3807:        for (const Member &func : allMemberFunctions) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 55%
branch 11 taken 45%
call   12 never executed
call   13 never executed
       30: 3808:            Token *tok2 = matchMemberFunctionName(func, scopeInfo);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       30: 3809:            if (!tok2)
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
       26: 3810:                continue;
        -: 3811:
        4: 3812:            if (tok2->str() == "~")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3813:                tok2 = tok2->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3814:            else
        4: 3815:                tok2 = tok2->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3816:
        -: 3817:            // If this is a function implementation.. add it to funclist
        4: 3818:            Token * start = const_cast<Token *>(isFunctionHead(tok2, "{"));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 3819:            if (start) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4: 3820:                setVarIdClassFunction(classname, start, start->link(), thisClassVars, structMembers, &mVarId);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 3821:            }
        -: 3822:
        4: 3823:            if (Token::Match(tok2, ") %name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3824:                tok2 = tok2->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3825:
        -: 3826:            // constructor with initializer list
        4: 3827:            if (!Token::Match(tok2, ") : ::| %name%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        4: 3828:                continue;
        -: 3829:
    #####: 3830:            Token *tok3 = tok2;
    #####: 3831:            while (Token::Match(tok3, "[)}] [,:]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3832:                tok3 = tok3->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3833:                if (Token::Match(tok3, ":: %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3834:                    tok3 = tok3->next();
call    0 never executed
    #####: 3835:                while (Token::Match(tok3, "%name% :: %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3836:                    tok3 = tok3->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3837:                if (!Token::Match(tok3, "%name% (|{|<"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3838:                    break;
        -: 3839:
        -: 3840:                // set varid
    #####: 3841:                const std::map<std::string, int>::const_iterator varpos = thisClassVars.find(tok3->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 3842:                if (varpos != thisClassVars.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3843:                    tok3->varId(varpos->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3844:
        -: 3845:                // goto end of var
    #####: 3846:                if (tok3->strAt(1) == "<") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3847:                    tok3 = tok3->next()->findClosingBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3848:                    if (tok3 && tok3->next() && tok3->next()->link())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 3849:                        tok3 = tok3->next()->link();
call    0 never executed
call    1 never executed
        -: 3850:                } else
    #####: 3851:                    tok3 = tok3->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3852:            }
    #####: 3853:            if (Token::Match(tok3, ")|} {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3854:                setVarIdClassFunction(classname, tok2, tok3->next()->link(), thisClassVars, structMembers, &mVarId);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 3855:            }
        -: 3856:        }
        -: 3857:    }
      956: 3858:}
        -: 3859:
function _ZL12linkBracketsPK9TokenizerRSt5stackIPK5TokenNSt7__debug5dequeIS5_SaIS5_EEEERS2_IPS3_NS7_ISC_SaISC_EEEESC_cc called 84564 returned 100% blocks executed 88%
    84564: 3860:static void linkBrackets(const Tokenizer * const tokenizer, std::stack<const Token*>& type, std::stack<Token*>& links, Token * const token, const char open, const char close)
        -: 3861:{
    84564: 3862:    if (token->str()[0] == open) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
     4640: 3863:        links.push(token);
call    0 returned 100%
     4640: 3864:        type.push(token);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    79924: 3865:    } else if (token->str()[0] == close) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     4640: 3866:        if (links.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 3867:            // Error, { and } don't match.
    #####: 3868:            tokenizer->unmatchedToken(token);
call    0 never executed
        -: 3869:        }
     4640: 3870:        if (type.top()->str()[0] != open) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3871:            tokenizer->unmatchedToken(type.top());
call    0 never executed
call    1 never executed
        -: 3872:        }
     4640: 3873:        type.pop();
call    0 returned 100%
        -: 3874:
     4640: 3875:        Token::createMutualLinks(links.top(), token);
call    0 returned 100%
call    1 returned 100%
     4640: 3876:        links.pop();
call    0 returned 100%
        -: 3877:    }
    84564: 3878:}
        -: 3879:
function _ZN9Tokenizer11createLinksEv called 956 returned 100% blocks executed 56%
      956: 3880:void Tokenizer::createLinks()
        -: 3881:{
     1912: 3882:    std::stack<const Token*> type;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     1912: 3883:    std::stack<Token*> links1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     1912: 3884:    std::stack<Token*> links2;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     1912: 3885:    std::stack<Token*> links3;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
    29144: 3886:    for (Token *token = list.front(); token; token = token->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28188: 3887:        if (token->link()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3888:            token->link(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3889:        }
        -: 3890:
    28188: 3891:        linkBrackets(this, type, links1, token, '{', '}');
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3892:
    28188: 3893:        linkBrackets(this, type, links2, token, '(', ')');
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3894:
    28188: 3895:        linkBrackets(this, type, links3, token, '[', ']');
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3896:    }
        -: 3897:
      956: 3898:    if (!links1.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 3899:        // Error, { and } don't match.
    #####: 3900:        unmatchedToken(links1.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3901:    }
        -: 3902:
      956: 3903:    if (!links2.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 3904:        // Error, ( and ) don't match.
    #####: 3905:        unmatchedToken(links2.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3906:    }
        -: 3907:
      956: 3908:    if (!links3.empty()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 3909:        // Error, [ and ] don't match.
    #####: 3910:        unmatchedToken(links3.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3911:    }
      956: 3912:}
        -: 3913:
function _ZN9Tokenizer12createLinks2Ev called 956 returned 100% blocks executed 73%
      956: 3914:void Tokenizer::createLinks2()
        -: 3915:{
      956: 3916:    if (isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22: 3917:        return;
        -: 3918:
      934: 3919:    const Token * templateToken = nullptr;
      934: 3920:    bool isStruct = false;
        -: 3921:
     1868: 3922:    std::stack<Token*> type;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
    29419: 3923:    for (Token *token = list.front(); token; token = token->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28485: 3924:        if (Token::Match(token, "%name%|> %name% [:<]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
       25: 3925:            isStruct = true;
    28460: 3926:        else if (Token::Match(token, "[;{}]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
     6550: 3927:            isStruct = false;
        -: 3928:
    28485: 3929:        if (token->link()) {
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
     9202: 3930:            if (Token::Match(token, "{|[|("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
     4601: 3931:                type.push(token);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     4601: 3932:            else if (!type.empty() && Token::Match(token, "}|]|)")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
     4613: 3933:                while (type.top()->str() == "<") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
        6: 3934:                    if (templateToken && templateToken->next() == type.top())
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3935:                        templateToken = nullptr;
        6: 3936:                    type.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3937:                }
     4601: 3938:                type.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3939:            } else
    #####: 3940:                token->link(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    19283: 3941:        } else if (!templateToken && !isStruct && Token::Match(token, "%oror%|&&|;")) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 16% (fallthrough)
branch  8 taken 84%
branch  9 taken 16% (fallthrough)
branch 10 taken 84%
     3126: 3942:            if (Token::Match(token, "&& [,>]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3943:                continue;
        -: 3944:            // If there is some such code:  A<B||C>..
        -: 3945:            // Then this is probably a template instantiation if either "B" or "C" has comparisons
     3126: 3946:            if (token->tokType() == Token::eLogicalOp && !type.empty() && type.top()->str() == "<") {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
branch 13 taken 1% (fallthrough)
branch 14 taken 99%
        1: 3947:                const Token *prev = token->previous();
call    0 returned 100%
        1: 3948:                bool foundComparison = false;
        3: 3949:                while (Token::Match(prev, "%name%|%num%|%str%|%cop%|)|]") && prev != type.top()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
        1: 3950:                    if (prev->str() == ")" || prev->str() == "]")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3951:                        prev = prev->link();
call    0 never executed
        1: 3952:                    else if (prev->tokType() == Token::eLogicalOp)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3953:                        break;
        1: 3954:                    else if (prev->isComparisonOp())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3955:                        foundComparison = true;
        1: 3956:                    prev = prev->previous();
call    0 returned 100%
        -: 3957:                }
        1: 3958:                if (prev == type.top() && foundComparison)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 3959:                    continue;
        1: 3960:                const Token *next = token->next();
call    0 returned 100%
        1: 3961:                foundComparison = false;
        3: 3962:                while (Token::Match(next, "%name%|%num%|%str%|%cop%|(|[") && next->str() != ">") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 50% (fallthrough)
branch 10 taken 50%
        1: 3963:                    if (next->str() == "(" || next->str() == "[")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3964:                        next = next->link();
call    0 never executed
        1: 3965:                    else if (next->tokType() == Token::eLogicalOp)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3966:                        break;
        1: 3967:                    else if (next->isComparisonOp())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 3968:                        foundComparison = true;
        1: 3969:                    next = next->next();
call    0 returned 100%
        -: 3970:                }
        1: 3971:                if (next && next->str() == ">" && foundComparison)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 3972:                    continue;
        -: 3973:            }
        -: 3974:
     3136: 3975:            while (!type.empty() && type.top()->str() == "<") {
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
        5: 3976:                const Token* end = type.top()->findClosingBracket();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5: 3977:                if (Token::Match(end, "> %comp%|;|.|=|{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 3978:                    break;
        -: 3979:                // Variable declaration
        5: 3980:                if (Token::Match(end, "> %var% ;") && (type.top()->tokAt(-2) == nullptr || Token::Match(type.top()->tokAt(-2), ";|}|{")))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 taken 0% (fallthrough)
branch 25 taken 100%
    #####: 3981:                    break;
        5: 3982:                type.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 3983:            }
    16411: 3984:        } else if (token->str() == "<" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
      386: 3985:                   ((token->previous() && token->previous()->isName() && !token->previous()->varId()) ||
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 94% (fallthrough)
branch  6 taken 6%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 38% (fallthrough)
branch 10 taken 62%
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
       66: 3986:                    Token::Match(token->next(), ">|>>"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       94: 3987:            type.push(token);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       94: 3988:            if (!templateToken && (token->previous()->str() == "template"))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 9% (fallthrough)
branch  6 taken 91%
branch  7 taken 9% (fallthrough)
branch  8 taken 91%
        8: 3989:                templateToken = token;
    16063: 3990:        } else if (token->str() == ">" || token->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      141: 3991:            if (type.empty() || type.top()->str() != "<") // < and > don't match.
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 40% (fallthrough)
branch  9 taken 60%
branch 10 taken 41% (fallthrough)
branch 11 taken 59%
      116: 3992:                continue;
       83: 3993:            Token * const top1 = type.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       83: 3994:            type.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       83: 3995:            Token * const top2 = type.empty() ? nullptr : type.top();
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       83: 3996:            type.push(top1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       83: 3997:            if (!top2 || top2->str() != "<") {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 95% (fallthrough)
branch  5 taken 5%
branch  6 taken 95% (fallthrough)
branch  7 taken 5%
       79: 3998:                if (token->str() == ">>")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 3999:                    continue;
      237: 4000:                if (token->next() &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       79: 4001:                    !Token::Match(token->next(), "%name%|%comp%|&|&&|*|::|,|(|)|{|}|;|[|:|.|=") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 never executed
branch  5 never executed
       79: 4002:                    !Token::simpleMatch(token->next(), "...") &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4003:                    !Token::Match(token->next(), "&& %name% ="))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4004:                    continue;
        -: 4005:            }
        -: 4006:            // if > is followed by [ .. "new a<b>[" is expected
        -: 4007:            // unless this is from varidiac expansion
       83: 4008:            if (token->strAt(1) == "[" && !Token::simpleMatch(token->tokAt(-1), "... >")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 4009:                Token *prev = type.top()->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4010:                while (prev && Token::Match(prev->previous(), ":: %name%"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4011:                    prev = prev->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4012:                if (prev && prev->str() != "new")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4013:                    prev = prev->previous();
call    0 never executed
    #####: 4014:                if (!prev || prev->str() != "new")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4015:                    continue;
        -: 4016:            }
        -: 4017:
       83: 4018:            if (token->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4019:                type.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4020:                type.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4021:                Token::createMutualLinks(top2, token);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4022:                if (top1 == templateToken || top2 == templateToken)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4023:                    templateToken = nullptr;
        -: 4024:            } else {
       83: 4025:                type.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       83: 4026:                if (Token::Match(token, "> %name%") && Token::Match(top1->tokAt(-2), "%op% %name% <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 49% (fallthrough)
branch  4 taken 51%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 4027:                    continue;
       83: 4028:                Token::createMutualLinks(top1, token);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       83: 4029:                if (top1 == templateToken)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        8: 4030:                    templateToken = nullptr;
        -: 4031:            }
        -: 4032:        }
        -: 4033:    }
        -: 4034:}
        -: 4035:
function _ZN9Tokenizer20sizeofAddParenthesesEv called 956 returned 100% blocks executed 13%
      956: 4036:void Tokenizer::sizeofAddParentheses()
        -: 4037:{
    29203: 4038:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28247: 4039:        if (!Token::Match(tok, "sizeof !!("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    28247: 4040:            continue;
    #####: 4041:        if (tok->next()->isLiteral() || Token::Match(tok->next(), "%name%|*|~|!|&")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4042:            Token *endToken = tok->next();
call    0 never executed
    #####: 4043:            while (Token::simpleMatch(endToken, "* *"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4044:                endToken = endToken->next();
call    0 never executed
    #####: 4045:            while (Token::Match(endToken->next(), "%name%|%num%|%str%|[|(|.|::|++|--|!|~") || (Token::Match(endToken, "%type% * %op%|?|:|const|;|,"))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4046:                if (Token::Match(endToken->next(), "(|["))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4047:                    endToken = endToken->linkAt(1);
call    0 never executed
        -: 4048:                else
    #####: 4049:                    endToken = endToken->next();
call    0 never executed
        -: 4050:            }
        -: 4051:
        -: 4052:            // Add ( after sizeof and ) behind endToken
    #####: 4053:            tok->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 4054:            endToken->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 4055:            Token::createMutualLinks(tok->next(), endToken->next());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 4056:        }
        -: 4057:    }
      956: 4058:}
        -: 4059:
function _ZN9Tokenizer14simplifySizeofEv called 0 returned 0% blocks executed 0%
    #####: 4060:bool Tokenizer::simplifySizeof()
        -: 4061:{
        -: 4062:    // Locate variable declarations and calculate the size
    #####: 4063:    std::map<int, int> sizeOfVar;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4064:    std::map<int, const Token *> declTokOfVar;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4065:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4066:        if (tok->varId() != 0 && sizeOfVar.find(tok->varId()) == sizeOfVar.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####: 4067:            const int varId = tok->varId();
call    0 never executed
    #####: 4068:            if (Token::Match(tok->tokAt(-3), "[;{}(,] %type% * %name% [;,)]") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4069:                Token::Match(tok->tokAt(-4), "[;{}(,] const %type% * %name% [;),]") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4070:                Token::Match(tok->tokAt(-2), "[;{}(,] %type% %name% [;),]") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4071:                Token::Match(tok->tokAt(-3), "[;{}(,] const %type% %name% [;),]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4072:                const int size = sizeOfType(tok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4073:                if (size == 0) {
branch  0 never executed
branch  1 never executed
    #####: 4074:                    continue;
        -: 4075:                }
        -: 4076:
    #####: 4077:                sizeOfVar[varId] = size;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4078:                declTokOfVar[varId] = tok;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4079:            }
        -: 4080:
    #####: 4081:            else if (Token::Match(tok->previous(), "%type% %name% [ %num% ] [[;=]") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4082:                     Token::Match(tok->tokAt(-2), "%type% * %name% [ %num% ] [[;=]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4083:                int size = sizeOfType(tok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4084:                if (size == 0)
branch  0 never executed
branch  1 never executed
    #####: 4085:                    continue;
        -: 4086:
    #####: 4087:                const Token* tok2 = tok->next();
call    0 never executed
    #####: 4088:                do {
    #####: 4089:                    const MathLib::bigint num = MathLib::toLongNumber(tok2->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4090:                    if (num<0)
branch  0 never executed
branch  1 never executed
    #####: 4091:                        break;
    #####: 4092:                    size *= num;
    #####: 4093:                    tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4094:                } while (Token::Match(tok2, "[ %num% ]"));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4095:                if (Token::Match(tok2, "[;=]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4096:                    sizeOfVar[varId] = size;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4097:                    declTokOfVar[varId] = tok;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4098:                }
    #####: 4099:                if (!tok2) {
branch  0 never executed
branch  1 never executed
    #####: 4100:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 4101:                }
    #####: 4102:                tok = tok2;
        -: 4103:            }
        -: 4104:
    #####: 4105:            else if (Token::Match(tok->previous(), "%type% %name% [ %num% ] [,)]") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 4106:                     Token::Match(tok->tokAt(-2), "%type% * %name% [ %num% ] [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4107:                Token tempTok;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4108:                tempTok.str("*");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4109:                sizeOfVar[varId] = sizeOfType(&tempTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4110:                declTokOfVar[varId] = tok;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4111:            }
        -: 4112:        }
        -: 4113:    }
        -: 4114:
    #####: 4115:    bool ret = false;
    #####: 4116:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4117:        if (tok->str() != "sizeof")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4118:            continue;
        -: 4119:
    #####: 4120:        if (Token::simpleMatch(tok->next(), "...")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 4121:            //tok->deleteNext(3);
    #####: 4122:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4123:        }
        -: 4124:
        -: 4125:        // sizeof('x')
    #####: 4126:        if (Token::Match(tok->next(), "( %char% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4127:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4128:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4129:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4130:            std::ostringstream sz;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4131:            sz << ((isC()) ? mSettings->sizeof_int : 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4132:            tok->str(sz.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 4133:            ret = true;
    #####: 4134:            continue;
        -: 4135:        }
        -: 4136:
        -: 4137:        // sizeof ("text")
    #####: 4138:        if (Token::Match(tok->next(), "( %str% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4139:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4140:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4141:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4142:            std::ostringstream ostr;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 4143:            ostr << (Token::getStrLength(tok) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4144:            tok->str(ostr.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 4145:            ret = true;
    #####: 4146:            continue;
        -: 4147:        }
        -: 4148:
        -: 4149:        // sizeof(type *) => sizeof(*)
    #####: 4150:        if (Token::Match(tok->next(), "( %type% * )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4151:            tok->next()->deleteNext();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4152:        }
        -: 4153:
    #####: 4154:        if (Token::simpleMatch(tok->next(), "( * )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4155:            tok->str(MathLib::toString(sizeOfType(tok->tokAt(2))));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####: 4156:            tok->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4157:            ret = true;
        -: 4158:        }
        -: 4159:
        -: 4160:        // sizeof( a )
    #####: 4161:        else if (Token::Match(tok->next(), "( %var% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4162:            const std::map<int, int>::const_iterator sizeOfVarPos = sizeOfVar.find(tok->tokAt(2)->varId());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 4163:            if (sizeOfVarPos != sizeOfVar.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4164:                tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4165:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4166:                tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4167:                tok->str(MathLib::toString(sizeOfVarPos->second));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 4168:                ret = true;
        -: 4169:            } else {
        -: 4170:                // don't try to replace size of variable if variable has
        -: 4171:                // similar name with type (#329)
        -: 4172:            }
        -: 4173:        }
        -: 4174:
    #####: 4175:        else if (Token::Match(tok->next(), "( %type% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4176:            const int size = sizeOfType(tok->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4177:            if (size > 0) {
branch  0 never executed
branch  1 never executed
    #####: 4178:                tok->str(MathLib::toString(size));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 4179:                tok->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4180:                ret = true;
        -: 4181:            }
        -: 4182:        }
        -: 4183:
    #####: 4184:        else if (Token::simpleMatch(tok->next(), "( *") || Token::Match(tok->next(), "( %name% [")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 4185:            int derefs = 0;
        -: 4186:
    #####: 4187:            const Token* nametok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4188:            if (nametok->str() == "*") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4189:                do {
    #####: 4190:                    nametok = nametok->next();
call    0 never executed
    #####: 4191:                    derefs++;
    #####: 4192:                } while (nametok && nametok->str() == "*");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 4193:
    #####: 4194:                if (!Token::Match(nametok, "%name% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4195:                    continue;
        -: 4196:            } else {
    #####: 4197:                const Token* tok2 = nametok->next();
call    0 never executed
    #####: 4198:                do {
    #####: 4199:                    tok2 = tok2->link()->next();
call    0 never executed
call    1 never executed
    #####: 4200:                    derefs++;
    #####: 4201:                } while (tok2 && tok2->str() == "[");
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 4202:
    #####: 4203:                if (!tok2 || tok2->str() != ")")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4204:                    continue;
        -: 4205:            }
        -: 4206:
        -: 4207:            // Some default value
    #####: 4208:            MathLib::biguint size = 0;
        -: 4209:
    #####: 4210:            const int varid = nametok->varId();
call    0 never executed
    #####: 4211:            if (derefs != 0 && varid != 0 && declTokOfVar.find(varid) != declTokOfVar.end()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
        -: 4212:                // Try to locate variable declaration..
    #####: 4213:                const Token *decltok = declTokOfVar[varid];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4214:                if (Token::Match(decltok->previous(), "%type%|* %name% [")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4215:                    size = sizeOfType(decltok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4216:                } else if (Token::Match(decltok->tokAt(-2), "%type% * %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4217:                    size = sizeOfType(decltok->tokAt(-2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4218:                }
        -: 4219:                // Multi-dimensional array..
    #####: 4220:                if (Token::Match(decltok, "%name% [") && Token::simpleMatch(decltok->linkAt(1), "] [")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 4221:                    const Token *tok2 = decltok;
    #####: 4222:                    for (int i = 0; i < derefs; i++)
branch  0 never executed
branch  1 never executed
    #####: 4223:                        tok2 = tok2->linkAt(1); // Skip all dimensions that are dereferenced before the sizeof call
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4224:                    while (Token::Match(tok2, "] [ %num% ]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4225:                        size *= MathLib::toULongNumber(tok2->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4226:                        tok2 = tok2->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4227:                    }
    #####: 4228:                    if (Token::simpleMatch(tok2, "] ["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4229:                        continue;
        -: 4230:                }
    #####: 4231:            } else if (nametok->strAt(1) == "[" && nametok->isStandardType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 4232:                size = sizeOfType(nametok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4233:                if (size == 0)
branch  0 never executed
branch  1 never executed
    #####: 4234:                    continue;
    #####: 4235:                const Token *tok2 = nametok->next();
call    0 never executed
    #####: 4236:                while (Token::Match(tok2, "[ %num% ]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4237:                    size *= MathLib::toULongNumber(tok2->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4238:                    tok2 = tok2->link()->next();
call    0 never executed
call    1 never executed
        -: 4239:                }
    #####: 4240:                if (!tok2 || tok2->str() != ")")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 4241:                    continue;
        -: 4242:            }
        -: 4243:
    #####: 4244:            if (size > 0) {
branch  0 never executed
branch  1 never executed
    #####: 4245:                tok->str(MathLib::toString(size));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 4246:                Token::eraseTokens(tok, tok->next()->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4247:                ret = true;
        -: 4248:            }
        -: 4249:        }
        -: 4250:    }
    #####: 4251:    return ret;
        -: 4252:}
        -: 4253:
function _ZN9Tokenizer18simplifyTokenList1EPKc called 956 returned 100% blocks executed 55%
      956: 4254:bool Tokenizer::simplifyTokenList1(const char FileName[])
        -: 4255:{
      956: 4256:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4257:        return false;
        -: 4258:
        -: 4259:    // if MACRO
    29144: 4260:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28188: 4261:        if (Token::Match(tok, "if|for|while|BOOST_FOREACH %name% (")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4262:            if (Token::simpleMatch(tok, "for each")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4263:                // 'for each ( )' -> 'asm ( )'
    #####: 4264:                tok->str("asm");
call    0 never executed
    #####: 4265:                tok->deleteNext();
call    0 never executed
    #####: 4266:            } else if (tok->strAt(1) == "constexpr") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4267:                tok->deleteNext();
call    0 never executed
    #####: 4268:                tok->isConstexpr(true);
call    0 never executed
        -: 4269:            } else {
    #####: 4270:                syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 4271:            }
        -: 4272:        }
        -: 4273:    }
        -: 4274:
        -: 4275:    // Is there C++ code in C file?
      956: 4276:    validateC();
call    0 returned 100%
        -: 4277:
        -: 4278:    // remove MACRO in variable declaration: MACRO int x;
      956: 4279:    removeMacroInVarDecl();
call    0 returned 100%
        -: 4280:
        -: 4281:    // Combine strings and character literals, e.g. L"string", L'c', "string1" "string2"
      956: 4282:    combineStringAndCharLiterals();
call    0 returned 100%
        -: 4283:
        -: 4284:    // replace inline SQL with "asm()" (Oracle PRO*C). Ticket: #1959
      956: 4285:    simplifySQL();
call    0 returned 100%
        -: 4286:
      956: 4287:    createLinks();
call    0 returned 100%
        -: 4288:
      956: 4289:    simplifyHeaders();
call    0 returned 100%
        -: 4290:
        -: 4291:    // Remove __asm..
      956: 4292:    simplifyAsm();
call    0 returned 100%
        -: 4293:
        -: 4294:    // foo < bar < >> => foo < bar < > >
      956: 4295:    if (isCPP())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      934: 4296:        mTemplateSimplifier->fixAngleBrackets();
call    0 returned 100%
        -: 4297:
        -: 4298:    // Bail out if code is garbage
      956: 4299:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4300:        Timer t("Tokenizer::tokenize::findGarbageCode", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 4301:        findGarbageCode();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4302:    } else {
      956: 4303:        findGarbageCode();
call    0 returned 100%
        -: 4304:    }
        -: 4305:
      956: 4306:    checkConfiguration();
call    0 returned 100%
        -: 4307:
        -: 4308:    // if (x) MACRO() ..
    26786: 4309:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
    25830: 4310:        if (Token::simpleMatch(tok, "if (")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      342: 4311:            tok = tok->next()->link();
call    0 returned 100%
call    1 returned 100%
      703: 4312:            if (Token::Match(tok, ") %name% (") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
      342: 4313:                tok->next()->isUpperCaseName() &&
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
call    2 returned 100%
call    3 returned 100%
branch  4 never executed
branch  5 never executed
    #####: 4314:                Token::Match(tok->linkAt(2), ") {|else")) {
call    0 never executed
call    1 never executed
    #####: 4315:                syntaxError(tok->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 4316:            }
        -: 4317:        }
        -: 4318:    }
        -: 4319:
      956: 4320:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4321:        return false;
        -: 4322:
        -: 4323:    // convert C++17 style nested namespaces to old style namespaces
      956: 4324:    simplifyNestedNamespace();
call    0 returned 100%
        -: 4325:
        -: 4326:    // simplify namespace aliases
      956: 4327:    simplifyNamespaceAliases();
call    0 returned 100%
        -: 4328:
        -: 4329:    // Remove [[attribute]]
      956: 4330:    simplifyCPPAttribute();
call    0 returned 100%
        -: 4331:
        -: 4332:    // remove __attribute__((?))
      956: 4333:    simplifyAttribute();
call    0 returned 100%
        -: 4334:
        -: 4335:    // simplify cppcheck attributes __cppcheck_?__(?)
      956: 4336:    simplifyCppcheckAttribute();
call    0 returned 100%
        -: 4337:
        -: 4338:    // Combine tokens..
      956: 4339:    combineOperators();
call    0 returned 100%
        -: 4340:
        -: 4341:    // Simplify the C alternative tokens (and, or, etc.)
      956: 4342:    simplifyCAlternativeTokens();
call    0 returned 100%
        -: 4343:
        -: 4344:    // replace 'sin(0)' to '0' and other similar math expressions
      956: 4345:    simplifyMathExpressions();
call    0 returned 100%
        -: 4346:
        -: 4347:    // combine "- %num%"
      956: 4348:    concatenateNegativeNumberAndAnyPositive();
call    0 returned 100%
        -: 4349:
        -: 4350:    // remove extern "C" and extern "C" {}
      956: 4351:    if (isCPP())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      934: 4352:        simplifyExternC();
call    0 returned 100%
        -: 4353:
        -: 4354:    // simplify weird but legal code: "[;{}] ( { code; } ) ;"->"[;{}] code;"
      956: 4355:    simplifyRoundCurlyParentheses();
call    0 returned 100%
        -: 4356:
        -: 4357:    // check for simple syntax errors..
    28965: 4358:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28009: 4359:        if (Token::simpleMatch(tok, "> struct {") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4360:            Token::simpleMatch(tok->linkAt(2), "} ;")) {
call    0 never executed
call    1 never executed
    #####: 4361:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 4362:        }
        -: 4363:    }
        -: 4364:
      956: 4365:    if (!simplifyAddBraces())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4366:        return false;
        -: 4367:
      956: 4368:    sizeofAddParentheses();
call    0 returned 100%
        -: 4369:
        -: 4370:    // Simplify: 0[foo] -> *(foo)
    29203: 4371:    for (Token* tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28247: 4372:        if (Token::simpleMatch(tok, "0 [") && tok->linkAt(1)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4373:            tok->str("*");
call    0 never executed
    #####: 4374:            tok->next()->str("(");
call    0 never executed
call    1 never executed
    #####: 4375:            tok->linkAt(1)->str(")");
call    0 never executed
call    1 never executed
        -: 4376:        }
        -: 4377:    }
        -: 4378:
      956: 4379:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4380:        return false;
        -: 4381:
        -: 4382:    // Remove __declspec()
      956: 4383:    simplifyDeclspec();
call    0 returned 100%
      956: 4384:    validate();
call    0 returned 100%
        -: 4385:
        -: 4386:    // Remove "inline", "register", and "restrict"
      956: 4387:    simplifyKeyword();
call    0 returned 100%
        -: 4388:
        -: 4389:    // simplify simple calculations inside <..>
      956: 4390:    if (isCPP()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      934: 4391:        Token *lt = nullptr;
    28610: 4392:        for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27676: 4393:            if (Token::Match(tok, "[;{}]"))
call    0 returned 100%
branch  1 taken 22% (fallthrough)
branch  2 taken 78%
     5993: 4394:                lt = nullptr;
    21683: 4395:            else if (Token::Match(tok, "%type% <"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      157: 4396:                lt = tok->next();
call    0 returned 100%
    21526: 4397:            else if (lt && Token::Match(tok, ">|>> %name%|::|(")) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
call    2 returned 100%
branch  3 taken 7% (fallthrough)
branch  4 taken 93%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       67: 4398:                const Token * const end = tok;
      265: 4399:                for (tok = lt; tok != end; tok = tok->next()) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
      198: 4400:                    if (tok->isNumber())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        3: 4401:                        TemplateSimplifier::simplifyNumericCalculations(tok);
call    0 returned 100%
        -: 4402:                }
       67: 4403:                lt = tok->next();
call    0 returned 100%
        -: 4404:            }
        -: 4405:        }
        -: 4406:    }
        -: 4407:
        -: 4408:    // Convert K&R function declarations to modern C
      956: 4409:    simplifyVarDecl(true);
call    0 returned 100%
      956: 4410:    simplifyFunctionParameters();
call    0 returned 100%
        -: 4411:
        -: 4412:    // simplify case ranges (gcc extension)
      956: 4413:    simplifyCaseRange();
call    0 returned 100%
        -: 4414:
        -: 4415:    // simplify labels and 'case|default'-like syntaxes
      956: 4416:    simplifyLabelsCaseDefault();
call    0 returned 100%
        -: 4417:
        -: 4418:    // simplify '[;{}] * & ( %any% ) =' to '%any% ='
      956: 4419:    simplifyMulAndParens();
call    0 returned 100%
        -: 4420:
      956: 4421:    if (!isC() && !mSettings->library.markupFile(FileName)) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 98% (fallthrough)
branch 13 taken 2%
call   14 returned 100%
branch 15 taken 98% (fallthrough)
branch 16 taken 2%
call   17 returned 100%
branch 18 taken 98% (fallthrough)
branch 19 taken 2%
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
      934: 4422:        findComplicatedSyntaxErrorsInTemplates();
call    0 returned 100%
        -: 4423:    }
        -: 4424:
      956: 4425:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4426:        return false;
        -: 4427:
        -: 4428:    // remove calling conventions __cdecl, __stdcall..
      956: 4429:    simplifyCallingConvention();
call    0 returned 100%
        -: 4430:
        -: 4431:
        -: 4432:    // remove some unhandled macros in global scope
      956: 4433:    removeMacrosInGlobalScope();
call    0 returned 100%
        -: 4434:
        -: 4435:    // remove undefined macro in class definition:
        -: 4436:    // class DLLEXPORT Fred { };
        -: 4437:    // class Fred FINAL : Base { };
      956: 4438:    removeMacroInClassDef();
call    0 returned 100%
        -: 4439:
        -: 4440:    // That call here fixes #7190
      956: 4441:    validate();
call    0 returned 100%
        -: 4442:
        -: 4443:    // remove unnecessary member qualification..
      956: 4444:    removeUnnecessaryQualification();
call    0 returned 100%
        -: 4445:
        -: 4446:    // convert Microsoft memory functions
      956: 4447:    simplifyMicrosoftMemoryFunctions();
call    0 returned 100%
        -: 4448:
        -: 4449:    // convert Microsoft string functions
      956: 4450:    simplifyMicrosoftStringFunctions();
call    0 returned 100%
        -: 4451:
      956: 4452:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4453:        return false;
        -: 4454:
        -: 4455:    // Remove Qt signals and slots
      956: 4456:    simplifyQtSignalsSlots();
call    0 returned 100%
        -: 4457:
        -: 4458:    // remove Borland stuff..
      956: 4459:    simplifyBorland();
call    0 returned 100%
        -: 4460:
        -: 4461:    // syntax error: enum with typedef in it
      956: 4462:    checkForEnumsWithTypedef();
call    0 returned 100%
        -: 4463:
        -: 4464:    // Add parentheses to ternary operator where necessary
      956: 4465:    prepareTernaryOpForAST();
call    0 returned 100%
        -: 4466:
        -: 4467:    // Change initialisation of variable to assignment
      956: 4468:    simplifyInitVar();
call    0 returned 100%
        -: 4469:
        -: 4470:    // Split up variable declarations.
      956: 4471:    simplifyVarDecl(false);
call    0 returned 100%
        -: 4472:
        -: 4473:    // typedef..
      956: 4474:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4475:        Timer t("Tokenizer::tokenize::simplifyTypedef", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 4476:        simplifyTypedef();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4477:    } else {
      956: 4478:        simplifyTypedef();
call    0 returned 100%
        -: 4479:    }
        -: 4480:
        -: 4481:    // using A = B;
      956: 4482:    while (simplifyUsing())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 4483:        ;
        -: 4484:
        -: 4485:    // Add parentheses to ternary operator where necessary
        -: 4486:    // TODO: this is only necessary if one typedef simplification had a comma and was used within ?:
        -: 4487:    // If typedef handling is refactored and moved to symboldatabase someday we can remove this
      956: 4488:    prepareTernaryOpForAST();
call    0 returned 100%
        -: 4489:
    30164: 4490:    for (Token* tok = list.front(); tok;) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
    29208: 4491:        if (Token::Match(tok, "union|struct|class union|struct|class"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4492:            tok->deleteNext();
call    0 never executed
        -: 4493:        else
    29208: 4494:            tok = tok->next();
call    0 returned 100%
        -: 4495:    }
        -: 4496:
        -: 4497:    // class x y {
      956: 4498:    if (isCPP() && mSettings->isEnabled(Settings::INFORMATION)) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 4499:        for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4500:            if (Token::Match(tok, "class %type% %type% [:{]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4501:                unhandled_macro_class_x_y(tok);
call    0 never executed
        -: 4502:            }
        -: 4503:        }
        -: 4504:    }
        -: 4505:
        -: 4506:    // catch bad typedef canonicalization
        -: 4507:    //
        -: 4508:    // to reproduce bad typedef, download upx-ucl from:
        -: 4509:    // http://packages.debian.org/sid/upx-ucl
        -: 4510:    // analyse the file src/stub/src/i386-linux.elf.interp-main.c
      956: 4511:    validate();
call    0 returned 100%
        -: 4512:
        -: 4513:    // The simplify enum have inner loops
      956: 4514:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4515:        return false;
        -: 4516:
        -: 4517:    // Put ^{} statements in asm()
      956: 4518:    simplifyAsm2();
call    0 returned 100%
        -: 4519:
        -: 4520:    // @..
      956: 4521:    simplifyAt();
call    0 returned 100%
        -: 4522:
        -: 4523:    // When the assembly code has been cleaned up, no @ is allowed
    21259: 4524:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
    20303: 4525:        if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
     2515: 4526:            const Token *tok1 = tok;
     2515: 4527:            tok = tok->link();
call    0 returned 100%
     2515: 4528:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4529:                syntaxError(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    17788: 4530:        } else if (tok->str() == "@") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 4531:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 4532:        }
        -: 4533:    }
        -: 4534:
        -: 4535:    // Order keywords "static" and "const"
      956: 4536:    simplifyStaticConst();
call    0 returned 100%
        -: 4537:
        -: 4538:    // convert platform dependent types to standard types
        -: 4539:    // 32 bits: size_t -> unsigned long
        -: 4540:    // 64 bits: size_t -> unsigned long long
      956: 4541:    list.simplifyPlatformTypes();
call    0 returned 100%
        -: 4542:
        -: 4543:    // collapse compound standard types into a single token
        -: 4544:    // unsigned long long int => long (with _isUnsigned=true,_isLong=true)
      956: 4545:    list.simplifyStdType();
call    0 returned 100%
        -: 4546:
      956: 4547:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4548:        return false;
        -: 4549:
        -: 4550:    // simplify bit fields..
      956: 4551:    simplifyBitfields();
call    0 returned 100%
        -: 4552:
      956: 4553:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4554:        return false;
        -: 4555:
        -: 4556:    // struct simplification "struct S {} s; => struct S { } ; S s ;
      956: 4557:    simplifyStructDecl();
call    0 returned 100%
        -: 4558:
      956: 4559:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4560:        return false;
        -: 4561:
        -: 4562:    // x = ({ 123; });  =>   { x = 123; }
      956: 4563:    simplifyAssignmentBlock();
call    0 returned 100%
        -: 4564:
      956: 4565:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4566:        return false;
        -: 4567:
      956: 4568:    simplifyVariableMultipleAssign();
call    0 returned 100%
        -: 4569:
        -: 4570:    // Collapse operator name tokens into single token
        -: 4571:    // operator = => operator=
      956: 4572:    simplifyOperatorName();
call    0 returned 100%
        -: 4573:
        -: 4574:    // Remove redundant parentheses
      956: 4575:    simplifyRedundantParentheses();
call    0 returned 100%
        -: 4576:
      956: 4577:    if (isCPP())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      934: 4578:        simplifyTypeIntrinsics();
call    0 returned 100%
        -: 4579:
      956: 4580:    if (!isC()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
        -: 4581:        // Handle templates..
      934: 4582:        if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4583:            Timer t("Tokenizer::tokenize::simplifyTemplates", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 4584:            simplifyTemplates();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4585:        } else {
      934: 4586:            simplifyTemplates();
call    0 returned 100%
        -: 4587:        }
        -: 4588:
        -: 4589:        // The simplifyTemplates have inner loops
      934: 4590:        if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4591:            return false;
        -: 4592:
        -: 4593:        // sometimes the "simplifyTemplates" fail and then unsimplified
        -: 4594:        // function calls etc remain. These have the "wrong" syntax. So
        -: 4595:        // this function will just fix so that the syntax is corrected.
      934: 4596:        validate(); // #6847 - invalid code
call    0 returned 100%
      934: 4597:        mTemplateSimplifier->cleanupAfterSimplify();
call    0 returned 100%
        -: 4598:    }
        -: 4599:
        -: 4600:    // Simplify pointer to standard types (C only)
      956: 4601:    simplifyPointerToStandardType();
call    0 returned 100%
        -: 4602:
        -: 4603:    // simplify function pointers
      956: 4604:    simplifyFunctionPointers();
call    0 returned 100%
        -: 4605:
        -: 4606:    // Change initialisation of variable to assignment
      956: 4607:    simplifyInitVar();
call    0 returned 100%
        -: 4608:
        -: 4609:    // Split up variable declarations.
      956: 4610:    simplifyVarDecl(false);
call    0 returned 100%
        -: 4611:
      956: 4612:    validate(); // #6772 "segmentation fault (invalid code) in Tokenizer::setVarId"
call    0 returned 100%
        -: 4613:
      956: 4614:    if (mTimerResults) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4615:        Timer t("Tokenizer::tokenize::setVarId", mSettings->showtime, mTimerResults);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 4616:        setVarId();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4617:    } else {
      956: 4618:        setVarId();
call    0 returned 100%
        -: 4619:    }
        -: 4620:
        -: 4621:    // Link < with >
      956: 4622:    createLinks2();
call    0 returned 100%
        -: 4623:
        -: 4624:    // specify array size
      956: 4625:    arraySize();
call    0 returned 100%
        -: 4626:
        -: 4627:    // The simplify enum might have inner loops
      956: 4628:    if (Settings::terminated())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 4629:        return false;
        -: 4630:
        -: 4631:    // Add std:: in front of std classes, when using namespace std; was given
      956: 4632:    simplifyNamespaceStd();
call    0 returned 100%
        -: 4633:
        -: 4634:    // Change initialisation of variable to assignment
      956: 4635:    simplifyInitVar();
call    0 returned 100%
        -: 4636:
      956: 4637:    simplifyDoublePlusAndDoubleMinus();
call    0 returned 100%
        -: 4638:
      956: 4639:    simplifyArrayAccessSyntax();
call    0 returned 100%
        -: 4640:
      956: 4641:    Token::assignProgressValues(list.front());
call    0 returned 100%
call    1 returned 100%
        -: 4642:
      956: 4643:    removeRedundantSemicolons();
call    0 returned 100%
        -: 4644:
      956: 4645:    simplifyParameterVoid();
call    0 returned 100%
        -: 4646:
      956: 4647:    simplifyRedundantConsecutiveBraces();
call    0 returned 100%
        -: 4648:
      956: 4649:    simplifyEmptyNamespaces();
call    0 returned 100%
        -: 4650:
      956: 4651:    elseif();
call    0 returned 100%
        -: 4652:
      956: 4653:    validate();
call    0 returned 100%
        -: 4654:
      956: 4655:    list.front()->assignIndexes();
call    0 returned 100%
call    1 returned 100%
        -: 4656:
      956: 4657:    return true;
        -: 4658:}
        -: 4659:
function _ZN9Tokenizer18simplifyTokenList2Ev called 0 returned 0% blocks executed 0%
    #####: 4660:bool Tokenizer::simplifyTokenList2()
        -: 4661:{
        -: 4662:    // clear the _functionList so it can't contain dead pointers
    #####: 4663:    deleteSymbolDatabase();
call    0 never executed
        -: 4664:
        -: 4665:    // Clear AST,ValueFlow. These will be created again at the end of this function.
    #####: 4666:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4667:        tok->clearAst();
call    0 never executed
    #####: 4668:        tok->clearValueFlow();
call    0 never executed
        -: 4669:    }
        -: 4670:
        -: 4671:    // Convert e.g. atol("0") into 0
    #####: 4672:    simplifyMathFunctions();
call    0 never executed
        -: 4673:
        -: 4674:    // f(x=g())   =>   x=g(); f(x)
    #####: 4675:    simplifyAssignmentInFunctionCall();
call    0 never executed
        -: 4676:
        -: 4677:    // ";a+=b;" => ";a=a+b;"
    #####: 4678:    simplifyCompoundAssignment();
call    0 never executed
        -: 4679:
    #####: 4680:    simplifyCharAt();
call    0 never executed
        -: 4681:
        -: 4682:    // simplify references
    #####: 4683:    simplifyReference();
call    0 never executed
        -: 4684:
    #####: 4685:    simplifyStd();
call    0 never executed
        -: 4686:
    #####: 4687:    if (Settings::terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4688:        return false;
        -: 4689:
    #####: 4690:    simplifySizeof();
call    0 never executed
        -: 4691:
    #####: 4692:    simplifyUndefinedSizeArray();
call    0 never executed
        -: 4693:
    #####: 4694:    simplifyCasts();
call    0 never executed
        -: 4695:
        -: 4696:    // Simplify simple calculations before replace constants, this allows the replacement of constants that are calculated
        -: 4697:    // e.g. const static int value = sizeof(X)/sizeof(Y);
    #####: 4698:    simplifyCalculations();
call    0 never executed
        -: 4699:
    #####: 4700:    if (Settings::terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4701:        return false;
        -: 4702:
        -: 4703:    // Replace "*(ptr + num)" => "ptr[num]"
    #####: 4704:    simplifyOffsetPointerDereference();
call    0 never executed
        -: 4705:
        -: 4706:    // Replace "&str[num]" => "(str + num)"
    #####: 4707:    simplifyOffsetPointerReference();
call    0 never executed
        -: 4708:
    #####: 4709:    removeRedundantAssignment();
call    0 never executed
        -: 4710:
    #####: 4711:    simplifyRealloc();
call    0 never executed
        -: 4712:
        -: 4713:    // Change initialisation of variable to assignment
    #####: 4714:    simplifyInitVar();
call    0 never executed
        -: 4715:
        -: 4716:    // Simplify variable declarations
    #####: 4717:    simplifyVarDecl(false);
call    0 never executed
        -: 4718:
    #####: 4719:    simplifyErrNoInWhile();
call    0 never executed
    #####: 4720:    simplifyIfAndWhileAssign();
call    0 never executed
    #####: 4721:    simplifyRedundantParentheses();
call    0 never executed
    #####: 4722:    simplifyNestedStrcat();
call    0 never executed
    #####: 4723:    simplifyFuncInWhile();
call    0 never executed
        -: 4724:
    #####: 4725:    simplifyIfAndWhileAssign();
call    0 never executed
        -: 4726:
        -: 4727:    // replace strlen(str)
    #####: 4728:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4729:        if (Token::Match(tok, "strlen ( %str% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4730:            tok->str(MathLib::toString(Token::getStrLength(tok->tokAt(2))));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 4731:            tok->deleteNext(3);
call    0 never executed
        -: 4732:        }
        -: 4733:    }
        -: 4734:
    #####: 4735:    bool modified = true;
    #####: 4736:    while (modified) {
branch  0 never executed
branch  1 never executed
    #####: 4737:        if (Settings::terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4738:            return false;
        -: 4739:
    #####: 4740:        modified = false;
    #####: 4741:        modified |= simplifyConditions();
call    0 never executed
    #####: 4742:        modified |= simplifyFunctionReturn();
call    0 never executed
    #####: 4743:        modified |= simplifyKnownVariables();
call    0 never executed
    #####: 4744:        modified |= simplifyStrlen();
call    0 never executed
        -: 4745:
    #####: 4746:        modified |= removeRedundantConditions();
call    0 never executed
    #####: 4747:        modified |= simplifyRedundantParentheses();
call    0 never executed
    #####: 4748:        modified |= simplifyConstTernaryOp();
call    0 never executed
    #####: 4749:        modified |= simplifyCalculations();
call    0 never executed
    #####: 4750:        validate();
call    0 never executed
        -: 4751:    }
        -: 4752:
        -: 4753:    // simplify redundant loops
    #####: 4754:    simplifyWhile0();
call    0 never executed
    #####: 4755:    removeRedundantFor();
call    0 never executed
        -: 4756:
        -: 4757:    // Remove redundant parentheses in return..
    #####: 4758:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4759:        while (Token::simpleMatch(tok, "return (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4760:            Token *tok2 = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 4761:            if (Token::simpleMatch(tok2, ") ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4762:                tok->deleteNext();
call    0 never executed
    #####: 4763:                tok2->deleteThis();
call    0 never executed
        -: 4764:            } else {
    #####: 4765:                break;
        -: 4766:            }
        -: 4767:        }
        -: 4768:    }
        -: 4769:
    #####: 4770:    simplifyReturnStrncat();
call    0 never executed
        -: 4771:
    #####: 4772:    removeRedundantAssignment();
call    0 never executed
        -: 4773:
    #####: 4774:    simplifyComma();
call    0 never executed
        -: 4775:
    #####: 4776:    removeRedundantSemicolons();
call    0 never executed
        -: 4777:
    #####: 4778:    simplifyFlowControl();
call    0 never executed
        -: 4779:
    #####: 4780:    simplifyRedundantConsecutiveBraces();
call    0 never executed
        -: 4781:
    #####: 4782:    simplifyEmptyNamespaces();
call    0 never executed
        -: 4783:
    #####: 4784:    simplifyMathFunctions();
call    0 never executed
        -: 4785:
    #####: 4786:    validate();
call    0 never executed
        -: 4787:
    #####: 4788:    Token::assignProgressValues(list.front());
call    0 never executed
call    1 never executed
        -: 4789:
    #####: 4790:    list.createAst();
call    0 never executed
        -: 4791:    // needed for #7208 (garbage code) and #7724 (ast max depth limit)
    #####: 4792:    list.validateAst();
call    0 never executed
        -: 4793:
        -: 4794:    // Create symbol database and then remove const keywords
    #####: 4795:    createSymbolDatabase();
call    0 never executed
    #####: 4796:    mSymbolDatabase->setValueTypeInTokenList(true);
call    0 never executed
        -: 4797:
    #####: 4798:    ValueFlow::setValues(&list, mSymbolDatabase, mErrorLogger, mSettings);
call    0 never executed
        -: 4799:
    #####: 4800:    if (Settings::terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4801:        return false;
        -: 4802:
    #####: 4803:    printDebugOutput(2);
call    0 never executed
        -: 4804:
    #####: 4805:    return true;
        -: 4806:}
        -: 4807://---------------------------------------------------------------------------
        -: 4808:
function _ZNK9Tokenizer16printDebugOutputEi called 956 returned 100% blocks executed 10%
      956: 4809:void Tokenizer::printDebugOutput(int simplification) const
        -: 4810:{
      956: 4811:    const bool debug = (simplification != 1U && mSettings->debugSimplified) ||
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      956: 4812:                       (simplification != 2U && mSettings->debugnormal);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4813:
      956: 4814:    if (debug && list.front()) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4815:        list.front()->printOut(nullptr, list.getFiles());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 4816:
    #####: 4817:        if (mSettings->xml)
branch  0 never executed
branch  1 never executed
    #####: 4818:            std::cout << "<debug>" << std::endl;
call    0 never executed
call    1 never executed
        -: 4819:
    #####: 4820:        if (mSymbolDatabase) {
branch  0 never executed
branch  1 never executed
    #####: 4821:            if (mSettings->xml)
branch  0 never executed
branch  1 never executed
    #####: 4822:                mSymbolDatabase->printXml(std::cout);
call    0 never executed
    #####: 4823:            else if (mSettings->verbose) {
branch  0 never executed
branch  1 never executed
    #####: 4824:                mSymbolDatabase->printOut("Symbol database");
call    0 never executed
        -: 4825:            }
        -: 4826:        }
        -: 4827:
    #####: 4828:        if (mSettings->verbose)
branch  0 never executed
branch  1 never executed
    #####: 4829:            list.front()->printAst(mSettings->verbose, mSettings->xml, std::cout);
call    0 never executed
call    1 never executed
        -: 4830:
    #####: 4831:        list.front()->printValueFlow(mSettings->xml, std::cout);
call    0 never executed
call    1 never executed
        -: 4832:
    #####: 4833:        if (mSettings->xml)
branch  0 never executed
branch  1 never executed
    #####: 4834:            std::cout << "</debug>" << std::endl;
call    0 never executed
call    1 never executed
        -: 4835:    }
        -: 4836:
      956: 4837:    if (mSymbolDatabase && simplification == 2U && mSettings->debugwarnings) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####: 4838:        printUnknownTypes();
call    0 never executed
        -: 4839:
        -: 4840:        // the typeStartToken() should come before typeEndToken()
    #####: 4841:        for (const Variable *var : mSymbolDatabase->variableList()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 4842:            if (!var)
branch  0 never executed
branch  1 never executed
    #####: 4843:                continue;
        -: 4844:
    #####: 4845:            const Token * typetok = var->typeStartToken();
call    0 never executed
    #####: 4846:            while (typetok && typetok != var->typeEndToken())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4847:                typetok = typetok->next();
call    0 never executed
        -: 4848:
    #####: 4849:            if (typetok != var->typeEndToken()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4850:                reportError(var->typeStartToken(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 4851:                            Severity::debug,
        -: 4852:                            "debug",
    #####: 4853:                            "Variable::typeStartToken() of variable '" + var->name() + "' is not located before Variable::typeEndToken(). The location of the typeStartToken() is '" + var->typeStartToken()->str() + "' at line " + MathLib::toString(var->typeStartToken()->linenr()));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
        -: 4854:            }
        -: 4855:        }
        -: 4856:    }
      956: 4857:}
        -: 4858:
function _ZNK9Tokenizer4dumpERSo called 0 returned 0% blocks executed 0%
    #####: 4859:void Tokenizer::dump(std::ostream &out) const
        -: 4860:{
        -: 4861:    // Create a xml data dump.
        -: 4862:    // The idea is not that this will be readable for humans. It's a
        -: 4863:    // data dump that 3rd party tools could load and get useful info from.
        -: 4864:
        -: 4865:    // tokens..
    #####: 4866:    out << "  <tokenlist>" << std::endl;
call    0 never executed
call    1 never executed
    #####: 4867:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 4868:        out << "    <token id=\"" << tok << "\" file=\"" << ErrorLogger::toxml(list.file(tok)) << "\" linenr=\"" << tok->linenr() << "\" column=\"" << tok->column() << "\"";
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
    #####: 4869:        out << " str=\"" << ErrorLogger::toxml(tok->str()) << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 4870:        out << " scope=\"" << tok->scope() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4871:        if (tok->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4872:            out << " type=\"name\"";
call    0 never executed
    #####: 4873:            if (tok->isUnsigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4874:                out << " isUnsigned=\"true\"";
call    0 never executed
    #####: 4875:            else if (tok->isSigned())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4876:                out << " isSigned=\"true\"";
call    0 never executed
    #####: 4877:        } else if (tok->isNumber()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4878:            out << " type=\"number\"";
call    0 never executed
    #####: 4879:            if (MathLib::isInt(tok->str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4880:                out << " isInt=\"True\"";
call    0 never executed
    #####: 4881:            if (MathLib::isFloat(tok->str()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4882:                out << " isFloat=\"True\"";
call    0 never executed
    #####: 4883:        } else if (tok->tokType() == Token::eString)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4884:            out << " type=\"string\" strlen=\"" << Token::getStrLength(tok) << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4885:        else if (tok->tokType() == Token::eChar)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4886:            out << " type=\"char\"";
call    0 never executed
    #####: 4887:        else if (tok->isBoolean())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4888:            out << " type=\"boolean\"";
call    0 never executed
    #####: 4889:        else if (tok->isOp()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4890:            out << " type=\"op\"";
call    0 never executed
    #####: 4891:            if (tok->isArithmeticalOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4892:                out << " isArithmeticalOp=\"True\"";
call    0 never executed
    #####: 4893:            else if (tok->isAssignmentOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4894:                out << " isAssignmentOp=\"True\"";
call    0 never executed
    #####: 4895:            else if (tok->isComparisonOp())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4896:                out << " isComparisonOp=\"True\"";
call    0 never executed
    #####: 4897:            else if (tok->tokType() == Token::eLogicalOp)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4898:                out << " isLogicalOp=\"True\"";
call    0 never executed
        -: 4899:        }
    #####: 4900:        if (tok->isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4901:            out << " isExpandedMacro=\"True\"";
call    0 never executed
    #####: 4902:        if (tok->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4903:            out << " link=\"" << tok->link() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4904:        if (tok->varId() > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4905:            out << " varId=\"" << MathLib::toString(tok->varId()) << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 4906:        if (tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4907:            out << " variable=\"" << tok->variable() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4908:        if (tok->function())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4909:            out << " function=\"" << tok->function() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4910:        if (!tok->values().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4911:            out << " values=\"" << &tok->values() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4912:        if (tok->type())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4913:            out << " type-scope=\"" << tok->type()->classScope << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4914:        if (tok->astParent())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4915:            out << " astParent=\"" << tok->astParent() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4916:        if (tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4917:            out << " astOperand1=\"" << tok->astOperand1() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4918:        if (tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4919:            out << " astOperand2=\"" << tok->astOperand2() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4920:        if (!tok->originalName().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4921:            out << " originalName=\"" << tok->originalName() << '\"';
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 4922:        if (tok->valueType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4923:            const std::string vt = tok->valueType()->dump();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 4924:            if (!vt.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4925:                out << ' ' << vt;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4926:        }
    #####: 4927:        out << "/>" << std::endl;
call    0 never executed
call    1 never executed
        -: 4928:    }
    #####: 4929:    out << "  </tokenlist>" << std::endl;
call    0 never executed
call    1 never executed
        -: 4930:
    #####: 4931:    mSymbolDatabase->printXml(out);
call    0 never executed
    #####: 4932:    if (list.front())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4933:        list.front()->printValueFlow(true, out);
call    0 never executed
call    1 never executed
    #####: 4934:}
        -: 4935:
function _ZN9Tokenizer15simplifyHeadersEv called 956 returned 100% blocks executed 34%
      956: 4936:void Tokenizer::simplifyHeaders()
        -: 4937:{
        -: 4938:    // TODO : can we remove anything in headers here? Like unused declarations.
        -: 4939:    // Maybe if --dump is used we want to have _everything_.
        -: 4940:
      956: 4941:    if (mSettings->checkHeaders && mSettings->checkUnusedTemplates)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 4942:        // Full analysis. All information in the headers are kept.
    #####: 4943:        return;
        -: 4944:
      956: 4945:    const bool checkHeaders = mSettings->checkHeaders;
      956: 4946:    const bool removeUnusedIncludedFunctions = !mSettings->checkHeaders;
      956: 4947:    const bool removeUnusedIncludedClasses   = !mSettings->checkHeaders;
      956: 4948:    const bool removeUnusedIncludedTemplates = !mSettings->checkUnusedTemplates || !mSettings->checkHeaders;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
      956: 4949:    const bool removeUnusedTemplates = !mSettings->checkUnusedTemplates;
        -: 4950:
        -: 4951:    // We want to remove selected stuff from the headers but not *everything*.
        -: 4952:    // The intention here is to not damage the analysis of the source file.
        -: 4953:    // You should get all warnings in the source file.
        -: 4954:
        -: 4955:    // TODO: Remove unused types/variables/etc in headers..
        -: 4956:
        -: 4957:    // functions and types to keep
     1912: 4958:    std::set<std::string> keep;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
    29144: 4959:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28188: 4960:        if (!tok->isName())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 60% (fallthrough)
branch  4 taken 40%
    16946: 4961:            continue;
        -: 4962:
    11242: 4963:        if (checkHeaders && tok->fileIndex() != 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 4964:            continue;
        -: 4965:
    12405: 4966:        if (Token::Match(tok, "%name% (") && !Token::simpleMatch(tok->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 23% (fallthrough)
branch  4 taken 77%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 46% (fallthrough)
branch 12 taken 54%
branch 13 taken 10% (fallthrough)
branch 14 taken 90%
     1163: 4967:            keep.insert(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
     1163: 4968:            continue;
        -: 4969:        }
        -: 4970:
    10079: 4971:        if (Token::Match(tok, "%name% %name%|::|*|&|<")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 39% (fallthrough)
branch  4 taken 61%
     3892: 4972:            keep.insert(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        -: 4973:        }
        -: 4974:    }
        -: 4975:
     1912: 4976:    const std::set<std::string> functionStart{"static", "const", "unsigned", "signed", "void", "bool", "char", "short", "int", "long", "float", "*"};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
branch 53 taken 92% (fallthrough)
branch 54 taken 8%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 returned 100%
call   64 returned 100%
call   65 returned 100%
call   66 returned 100%
call   67 returned 100%
call   68 returned 100%
branch 69 never executed
branch 70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
call   78 never executed
call   79 never executed
call   80 never executed
call   81 never executed
call   82 never executed
call   83 never executed
call   84 never executed
        -: 4977:
    29144: 4978:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28188: 4979:        const bool isIncluded = (tok->fileIndex() != 0);
call    0 returned 100%
        -: 4980:
        -: 4981:        // Remove executable code
    28188: 4982:        if (isIncluded && !mSettings->checkHeaders && tok->str() == "{") {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        -: 4983:            // TODO: We probably need to keep the executable code if this function is called from the source file.
    #####: 4984:            const Token *prev = tok->previous();
call    0 never executed
    #####: 4985:            while (prev && prev->isName())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4986:                prev = prev->previous();
call    0 never executed
    #####: 4987:            if (Token::simpleMatch(prev, ")")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 4988:                // Replace all tokens from { to } with a ";".
    #####: 4989:                Token::eraseTokens(tok,tok->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4990:                tok->str(";");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4991:                tok->link(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4992:            }
        -: 4993:        }
        -: 4994:
    28188: 4995:        if (Token::Match(tok, "[;{}]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 21% (fallthrough)
branch  4 taken 79%
        -: 4996:            // Remove unused function declarations
     5870: 4997:            if (isIncluded && removeUnusedIncludedFunctions) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -: 4998:                while (1) {
    #####: 4999:                    Token *start = tok->next();
call    0 never executed
    #####: 5000:                    while (start && functionStart.find(start->str()) != functionStart.end())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####: 5001:                        start = start->next();
call    0 never executed
    #####: 5002:                    if (Token::Match(start, "%name% (") && Token::Match(start->linkAt(1), ") const| ;") && keep.find(start->str()) == keep.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
    #####: 5003:                        Token::eraseTokens(tok, start->linkAt(1)->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5004:                    else
    #####: 5005:                        break;
    #####: 5006:                }
        -: 5007:            }
        -: 5008:
     5870: 5009:            if (isIncluded && removeUnusedIncludedClasses) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 5010:                if (Token::Match(tok, "[;{}] class|struct %name% [:{]") && keep.find(tok->strAt(2)) == keep.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
        -: 5011:                    // Remove this class/struct
    #####: 5012:                    const Token *endToken = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5013:                    if (endToken->str() == ":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5014:                        endToken = endToken->next();
call    0 never executed
    #####: 5015:                        while (Token::Match(endToken, "%name%|,"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5016:                            endToken = endToken->next();
call    0 never executed
        -: 5017:                    }
    #####: 5018:                    if (endToken && endToken->str() == "{" && Token::simpleMatch(endToken->link(), "} ;"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 5019:                        Token::eraseTokens(tok, endToken->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5020:                }
        -: 5021:            }
        -: 5022:
     5870: 5023:            if (removeUnusedTemplates || (isIncluded && removeUnusedIncludedTemplates)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
     5870: 5024:                if (Token::Match(tok->next(), "template < %name%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        2: 5025:                    const Token *tok2 = tok->tokAt(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6: 5026:                    while (Token::Match(tok2, "%name% %name% [,=>]") || Token::Match(tok2, "typename ... %name% [,>]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 50% (fallthrough)
branch 11 taken 50%
        2: 5027:                        if (Token::simpleMatch(tok2, "typename ..."))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5028:                            tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5029:                        else
        2: 5030:                            tok2 = tok2->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 5031:                        if (Token::Match(tok2, "= %name% [,>]"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 5032:                            tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 5033:                        if (tok2->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5034:                            tok2 = tok2->next();
call    0 never executed
        -: 5035:                    }
        2: 5036:                    if (Token::Match(tok2, "> class|struct %name% [;:{]") && keep.find(tok2->strAt(2)) == keep.end()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 5037:                        const Token *endToken = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5038:                        if (endToken->str() == ":") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5039:                            endToken = endToken->next();
call    0 never executed
    #####: 5040:                            while (Token::Match(endToken, "%name%|,"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5041:                                endToken = endToken->next();
call    0 never executed
        -: 5042:                        }
    #####: 5043:                        if (endToken && endToken->str() == "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5044:                            endToken = endToken->link()->next();
call    0 never executed
call    1 never executed
    #####: 5045:                        if (endToken && endToken->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5046:                            Token::eraseTokens(tok, endToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
        2: 5047:                    } else if (Token::Match(tok2, "> %type% %name% (") && Token::simpleMatch(tok2->linkAt(3), ") {") && keep.find(tok2->strAt(2)) == keep.end()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 taken 0% (fallthrough)
branch 24 taken 100%
call   25 never executed
branch 26 taken 0% (fallthrough)
branch 27 taken 100%
call   28 never executed
branch 29 taken 0% (fallthrough)
branch 30 taken 100%
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
    #####: 5048:                        const Token *endToken = tok2->linkAt(3)->linkAt(1)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 5049:                        Token::eraseTokens(tok, endToken);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5050:                    }
        -: 5051:                }
        -: 5052:            }
        -: 5053:        }
        -: 5054:    }
        -: 5055:}
        -: 5056:
function _ZN9Tokenizer25removeMacrosInGlobalScopeEv called 956 returned 100% blocks executed 59%
      956: 5057:void Tokenizer::removeMacrosInGlobalScope()
        -: 5058:{
     7949: 5059:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
call    3 returned 100%
     6993: 5060:        if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
     1318: 5061:            tok = tok->link();
call    0 returned 100%
     1323: 5062:            if (Token::Match(tok, ") %type% {") &&
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        5: 5063:                !Token::Match(tok->next(), "const|namespace|class|struct|union|noexcept|override|final|volatile"))
call    0 returned 100%
call    1 returned 100%
    #####: 5064:                tok->deleteNext();
call    0 never executed
        -: 5065:        }
        -: 5066:
     7248: 5067:        if (Token::Match(tok, "%type%") && tok->isUpperCaseName() &&
call    0 returned 100%
branch  1 taken 49% (fallthrough)
branch  2 taken 51%
call    3 returned 100%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
branch  6 taken 98% (fallthrough)
branch  7 taken 2%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      397: 5068:            (!tok->previous() || Token::Match(tok->previous(), "[;{}]") || (tok->previous()->isName() && endsWith(tok->previous()->str(), ':')))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 91% (fallthrough)
branch  8 taken 9%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 4% (fallthrough)
branch 13 taken 96%
       54: 5069:            const Token *tok2 = tok->next();
call    0 returned 100%
       54: 5070:            if (tok2 && tok2->str() == "(")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
branch  6 taken 43% (fallthrough)
branch  7 taken 57%
       23: 5071:                tok2 = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 5072:
        -: 5073:            // Several unknown macros...
       54: 5074:            while (Token::Match(tok2, "%type% (") && tok2->isUpperCaseName())
call    0 returned 100%
branch  1 taken 20% (fallthrough)
branch  2 taken 80%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5075:                tok2 = tok2->linkAt(1)->next();
call    0 never executed
call    1 never executed
        -: 5076:
       54: 5077:            if (Token::Match(tok, "%name% (") && Token::Match(tok2, "%name% *|&|::|<| %name%") && !Token::Match(tok2, "namespace|class|struct|union"))
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 5078:                unknownMacroError(tok);
call    0 never executed
        -: 5079:
       54: 5080:            if (Token::Match(tok, "%type% (") && Token::Match(tok2, "%type% (") && !Token::Match(tok2, "noexcept|throw") && isFunctionHead(tok2->next(), ":;{"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 43% (fallthrough)
branch  4 taken 57%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 taken 0% (fallthrough)
branch 26 taken 100%
call   27 never executed
branch 28 taken 0% (fallthrough)
branch 29 taken 100%
call   30 never executed
branch 31 taken 0% (fallthrough)
branch 32 taken 100%
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
    #####: 5081:                unknownMacroError(tok);
call    0 never executed
        -: 5082:
        -: 5083:            // remove unknown macros before namespace|class|struct|union
       54: 5084:            if (Token::Match(tok2, "namespace|class|struct|union")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 5085:                // is there a "{" for?
    #####: 5086:                const Token *tok3 = tok2;
    #####: 5087:                while (tok3 && !Token::Match(tok3,"[;{}()]"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5088:                    tok3 = tok3->next();
call    0 never executed
    #####: 5089:                if (tok3 && tok3->str() == "{") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5090:                    Token::eraseTokens(tok, tok2);
call    0 never executed
    #####: 5091:                    tok->deleteThis();
call    0 never executed
        -: 5092:                }
    #####: 5093:                continue;
        -: 5094:            }
        -: 5095:
        -: 5096:            // replace unknown macros before foo(
        -: 5097:            /*
        -: 5098:                        if (Token::Match(tok2, "%type% (") && isFunctionHead(tok2->next(), "{")) {
        -: 5099:                            std::string typeName;
        -: 5100:                            for (const Token* tok3 = tok; tok3 != tok2; tok3 = tok3->next())
        -: 5101:                                typeName += tok3->str();
        -: 5102:                            Token::eraseTokens(tok, tok2);
        -: 5103:                            tok->str(typeName);
        -: 5104:                        }
        -: 5105:            */
        -: 5106:            // remove unknown macros before foo::foo(
       54: 5107:            if (Token::Match(tok2, "%type% :: %type%")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5108:                const Token *tok3 = tok2;
    #####: 5109:                while (Token::Match(tok3, "%type% :: %type% ::"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5110:                    tok3 = tok3->tokAt(2);
call    0 never executed
    #####: 5111:                if (Token::Match(tok3, "%type% :: %type% (") && tok3->str() == tok3->strAt(2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5112:                    Token::eraseTokens(tok, tok2);
call    0 never executed
    #####: 5113:                    tok->deleteThis();
call    0 never executed
        -: 5114:                }
    #####: 5115:                continue;
        -: 5116:            }
        -: 5117:        }
        -: 5118:
        -: 5119:        // Skip executable scopes
     6993: 5120:        if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
     1175: 5121:            const Token *prev = tok->previous();
call    0 returned 100%
     1851: 5122:            while (prev && prev->isName())
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
branch  3 taken 24% (fallthrough)
branch  4 taken 76%
branch  5 taken 22% (fallthrough)
branch  6 taken 78%
      338: 5123:                prev = prev->previous();
call    0 returned 100%
     1175: 5124:            if (prev && prev->str() == ")")
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 95% (fallthrough)
branch  5 taken 5%
branch  6 taken 85% (fallthrough)
branch  7 taken 15%
     1001: 5125:                tok = tok->link();
call    0 returned 100%
        -: 5126:        }
        -: 5127:    }
      956: 5128:}
        -: 5129:
        -: 5130://---------------------------------------------------------------------------
        -: 5131:
function _ZN9Tokenizer21removeMacroInClassDefEv called 956 returned 100% blocks executed 39%
      956: 5132:void Tokenizer::removeMacroInClassDef()
        -: 5133:{
    29346: 5134:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28390: 5135:        if (!Token::Match(tok, "class|struct %name% %name% {|:"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    28390: 5136:            continue;
        -: 5137:
    #####: 5138:        const bool nextIsUppercase = tok->next()->isUpperCaseName();
call    0 never executed
call    1 never executed
    #####: 5139:        const bool afterNextIsUppercase = tok->tokAt(2)->isUpperCaseName();
call    0 never executed
call    1 never executed
    #####: 5140:        if (nextIsUppercase && !afterNextIsUppercase)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5141:            tok->deleteNext();
call    0 never executed
    #####: 5142:        else if (!nextIsUppercase && afterNextIsUppercase)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5143:            tok->next()->deleteNext();
call    0 never executed
call    1 never executed
        -: 5144:    }
      956: 5145:}
        -: 5146:
        -: 5147://---------------------------------------------------------------------------
        -: 5148:
function _ZN9Tokenizer20removeMacroInVarDeclEv called 956 returned 100% blocks executed 87%
      956: 5149:void Tokenizer::removeMacroInVarDecl()
        -: 5150:{
    29144: 5151:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28188: 5152:        if (Token::Match(tok, "[;{}] %name% (") && tok->next()->isUpperCaseName()) {
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        -: 5153:            // goto ')' parentheses
       25: 5154:            const Token *tok2 = tok;
       25: 5155:            int parlevel = 0;
      349: 5156:            while (tok2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      187: 5157:                if (tok2->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
       27: 5158:                    ++parlevel;
      160: 5159:                else if (tok2->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
       27: 5160:                    if (--parlevel <= 0)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
       25: 5161:                        break;
        -: 5162:                }
      162: 5163:                tok2 = tok2->next();
call    0 returned 100%
        -: 5164:            }
       25: 5165:            tok2 = tok2 ? tok2->next() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 5166:
        -: 5167:            // check if this is a variable declaration..
       25: 5168:            const Token *tok3 = tok2;
       25: 5169:            while (tok3 && tok3->isUpperCaseName())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 5170:                tok3 = tok3->next();
call    0 never executed
       25: 5171:            if (tok3 && (tok3->isStandardType() || Token::Match(tok3,"const|static|struct|union|class")))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 5172:                Token::eraseTokens(tok,tok2);
call    0 never executed
        -: 5173:        }
        -: 5174:    }
      956: 5175:}
        -: 5176://---------------------------------------------------------------------------
        -: 5177:
function _ZN9Tokenizer25removeRedundantAssignmentEv called 0 returned 0% blocks executed 0%
    #####: 5178:void Tokenizer::removeRedundantAssignment()
        -: 5179:{
    #####: 5180:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5181:        if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5182:            tok = tok->link();
call    0 never executed
        -: 5183:
    #####: 5184:        const Token * const start = const_cast<Token *>(startOfExecutableScope(tok));
call    0 never executed
    #####: 5185:        if (start) {
branch  0 never executed
branch  1 never executed
    #####: 5186:            tok = start->previous();
call    0 never executed
        -: 5187:            // parse in this function..
    #####: 5188:            std::set<int> localvars;
call    0 never executed
call    1 never executed
    #####: 5189:            const Token * const end = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 5190:            for (Token * tok2 = tok->next(); tok2 && tok2 != end; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -: 5191:                // skip local class or struct
    #####: 5192:                if (Token::Match(tok2, "class|struct %type% {|:")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 5193:                    // skip to '{'
    #####: 5194:                    tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5195:                    while (tok2 && tok2->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5196:                        tok2 = tok2->next();
call    0 never executed
        -: 5197:
    #####: 5198:                    if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 5199:                        tok2 = tok2->link(); // skip local class or struct
call    0 never executed
        -: 5200:                    else
    #####: 5201:                        return;
    #####: 5202:                } else if (Token::Match(tok2, "[;{}] %type% * %name% ;") && tok2->next()->str() != "return") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5203:                    tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5204:                    localvars.insert(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 5205:                } else if (Token::Match(tok2, "[;{}] %type% %name% ;") && tok2->next()->isStandardType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 5206:                    tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5207:                    localvars.insert(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 5208:                } else if (tok2->varId() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5209:                           !Token::Match(tok2->previous(), "[;{}] %name% = %char%|%num%|%name% ;")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5210:                    localvars.erase(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5211:                }
        -: 5212:            }
    #####: 5213:            localvars.erase(0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5214:            if (!localvars.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5215:                for (Token *tok2 = tok->next(); tok2 && tok2 != end;) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5216:                    if (Token::Match(tok2, "[;{}] %type% %name% ;") && localvars.find(tok2->tokAt(2)->varId()) != localvars.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
    #####: 5217:                        tok2->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5218:                    } else if ((Token::Match(tok2, "[;{}] %type% * %name% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5219:                                localvars.find(tok2->tokAt(3)->varId()) != localvars.end()) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
    #####: 5220:                               (Token::Match(tok2, "[;{}] %name% = %any% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5221:                                localvars.find(tok2->next()->varId()) != localvars.end())) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    #####: 5222:                        tok2->deleteNext(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5223:                    } else
    #####: 5224:                        tok2 = tok2->next();
call    0 never executed
        -: 5225:                }
        -: 5226:            }
        -: 5227:        }
        -: 5228:    }
        -: 5229:}
        -: 5230:
function _ZN9Tokenizer15simplifyReallocEv called 0 returned 0% blocks executed 0%
    #####: 5231:void Tokenizer::simplifyRealloc()
        -: 5232:{
    #####: 5233:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5234:        if (Token::Match(tok, "(|[") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5235:            (tok->str() == "{" && tok->previous() && tok->previous()->str() == "="))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5236:            tok = tok->link();
call    0 never executed
    #####: 5237:        else if (Token::Match(tok, "[;{}] %name% = realloc (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5238:            tok = tok->tokAt(3);
call    0 never executed
    #####: 5239:            if (Token::simpleMatch(tok->next(), "( 0 ,")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5240:                //no "x = realloc(0,);"
    #####: 5241:                if (!Token::simpleMatch(tok->next()->link(), ") ;") || tok->next()->link()->previous() == tok->tokAt(3))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 5242:                    continue;
        -: 5243:
        -: 5244:                // delete "0 ,"
    #####: 5245:                tok->next()->deleteNext(2);
call    0 never executed
call    1 never executed
        -: 5246:
        -: 5247:                // Change function name "realloc" to "malloc"
    #####: 5248:                tok->str("malloc");
call    0 never executed
    #####: 5249:                tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -: 5250:            } else {
    #####: 5251:                Token *tok2 = tok->next()->link()->tokAt(-2);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5252:                //no "x = realloc(,0);"
    #####: 5253:                if (!Token::simpleMatch(tok2, ", 0 ) ;") || tok2 == tok->tokAt(2))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5254:                    continue;
        -: 5255:
        -: 5256:                //remove ", 0"
    #####: 5257:                tok2 = tok2->previous();
call    0 never executed
    #####: 5258:                tok2->deleteNext(2);
call    0 never executed
        -: 5259:                //change "realloc" to "free"
    #####: 5260:                tok->str("free");
call    0 never executed
        -: 5261:                //insert "0" after "var ="
    #####: 5262:                tok = tok->previous();
call    0 never executed
    #####: 5263:                tok->insertToken("0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5264:                //move "var = 0" between "free(...)" and ";"
    #####: 5265:                tok2 = tok2->next();
call    0 never executed
    #####: 5266:                Token::move(tok->previous(), tok->next(), tok2);
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5267:                //add missing ";" after "free(...)"
    #####: 5268:                tok2->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 5269:                //goto before last ";" and continue
    #####: 5270:                tok = tok->next();
call    0 never executed
        -: 5271:            }
        -: 5272:        }
        -: 5273:    }
    #####: 5274:}
        -: 5275:
function _ZN9Tokenizer23simplifyEmptyNamespacesEv called 956 returned 100% blocks executed 67%
      956: 5276:void Tokenizer::simplifyEmptyNamespaces()
        -: 5277:{
      956: 5278:    if (isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22: 5279:        return;
        -: 5280:
      934: 5281:    bool goback = false;
     6527: 5282:    for (Token *tok = list.front(); tok; tok = tok ? tok->next() : nullptr) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
     5593: 5283:        if (goback) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5284:            tok = tok->previous();
call    0 never executed
    #####: 5285:            goback = false;
        -: 5286:        }
     7847: 5287:        if (Token::Match(tok, "(|[|{")) {
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
     2254: 5288:            tok = tok->link();
call    0 returned 100%
     2254: 5289:            continue;
        -: 5290:        }
     3339: 5291:        if (!Token::Match(tok, "namespace %name% {"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     3337: 5292:            continue;
        2: 5293:        if (tok->strAt(3) == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 5294:            tok->deleteNext(3);             // remove '%name% { }'
call    0 never executed
    #####: 5295:            if (!tok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5296:                // remove 'namespace' or replace it with ';' if isolated
    #####: 5297:                tok->deleteThis();
call    0 never executed
    #####: 5298:                goback = true;
        -: 5299:            } else {                    // '%any% namespace %any%'
    #####: 5300:                tok = tok->previous();  // goto previous token
call    0 never executed
    #####: 5301:                tok->deleteNext();      // remove next token: 'namespace'
call    0 never executed
        -: 5302:            }
        -: 5303:        } else {
        2: 5304:            tok = tok->tokAt(2);
call    0 returned 100%
        -: 5305:        }
        -: 5306:    }
        -: 5307:}
        -: 5308:
function _ZN9Tokenizer19simplifyFlowControlEv called 0 returned 0% blocks executed 0%
    #####: 5309:void Tokenizer::simplifyFlowControl()
        -: 5310:{
    #####: 5311:    for (Token *begin = list.front(); begin; begin = begin->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 5312:
    #####: 5313:        if (Token::Match(begin, "(|[") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5314:            (begin->str() == "{" && begin->previous() && begin->strAt(-1) == "="))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5315:            begin = begin->link();
call    0 never executed
        -: 5316:
        -: 5317:        //function scope
    #####: 5318:        if (!Token::simpleMatch(begin, ") {") && !Token::Match(begin, ") %name% {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5319:            continue;
        -: 5320:
    #####: 5321:        Token* end = begin->linkAt(1+(begin->next()->str() == "{" ? 0 : 1));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 5322:        int indentLevel = 0;
    #####: 5323:        bool stilldead = false;
        -: 5324:
    #####: 5325:        for (Token *tok = begin; tok && tok != end; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 5326:            if (Token::Match(tok, "(|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5327:                tok = tok->link();
call    0 never executed
    #####: 5328:                continue;
        -: 5329:            }
        -: 5330:
    #####: 5331:            if (tok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5332:                if (tok->previous() && tok->previous()->str() == "=") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5333:                    tok = tok->link();
call    0 never executed
    #####: 5334:                    continue;
        -: 5335:                }
    #####: 5336:                ++indentLevel;
    #####: 5337:            } else if (tok->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5338:                if (indentLevel == 0)
branch  0 never executed
branch  1 never executed
    #####: 5339:                    break;
    #####: 5340:                --indentLevel;
    #####: 5341:                if (stilldead) {
branch  0 never executed
branch  1 never executed
    #####: 5342:                    eraseDeadCode(tok, nullptr);
call    0 never executed
    #####: 5343:                    if (indentLevel == 1 || tok->next()->str() != "}" || !Token::Match(tok->next()->link()->previous(), ";|{|}|do {"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 5344:                        stilldead = false;
    #####: 5345:                    continue;
        -: 5346:                }
        -: 5347:            }
        -: 5348:
    #####: 5349:            if (indentLevel == 0)
branch  0 never executed
branch  1 never executed
    #####: 5350:                continue;
        -: 5351:
    #####: 5352:            if (Token::Match(tok,"continue|break ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5353:                tok = tok->next();
call    0 never executed
    #####: 5354:                eraseDeadCode(tok, nullptr);
call    0 never executed
        -: 5355:
    #####: 5356:            } else if (Token::Match(tok,"return|goto") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5357:                       (Token::Match(tok->previous(), "[;{}] %name% (") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5358:                        mSettings->library.isnoreturn(tok)) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5359:                       (isCPP() && tok->str() == "throw")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5360:                if (tok->next()->str() == "}")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5361:                    syntaxError(tok->next()); // invalid code like in #6731
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5362:                //TODO: ensure that we exclude user-defined 'exit|abort|throw', except for 'noreturn'
        -: 5363:                //catch the first ';'
    #####: 5364:                for (Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5365:                    if (Token::Match(tok2, "(|[")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5366:                        tok2 = tok2->link();
call    0 never executed
    #####: 5367:                    } else if (tok2->str() == ";") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5368:                        tok = tok2;
    #####: 5369:                        eraseDeadCode(tok, nullptr);
call    0 never executed
    #####: 5370:                        break;
    #####: 5371:                    } else if (Token::Match(tok2, "[{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5372:                        break;
        -: 5373:                }
        -: 5374:                //if everything is removed, then remove also the code after an inferior scope
        -: 5375:                //only if the actual scope is not special
    #####: 5376:                if (indentLevel > 1 && tok->next()->str() == "}" && Token::Match(tok->next()->link()->previous(), ";|{|}|do {"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 5377:                    stilldead = true;
        -: 5378:            }
        -: 5379:        }
    #####: 5380:        begin = end;
        -: 5381:    }
    #####: 5382:}
        -: 5383:
        -: 5384:
function _ZN9Tokenizer25removeRedundantConditionsEv called 0 returned 0% blocks executed 0%
    #####: 5385:bool Tokenizer::removeRedundantConditions()
        -: 5386:{
        -: 5387:    // Return value for function. Set to true if there are any simplifications
    #####: 5388:    bool ret = false;
        -: 5389:
    #####: 5390:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5391:        if (!Token::Match(tok, "if ( %bool% ) {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5392:            continue;
        -: 5393:
        -: 5394:        // Find matching else
    #####: 5395:        Token *elseTag = tok->linkAt(4)->next();
call    0 never executed
call    1 never executed
        -: 5396:
    #####: 5397:        const bool boolValue = (tok->strAt(2) == "true");
call    0 never executed
call    1 never executed
        -: 5398:
        -: 5399:        // Handle if with else
    #####: 5400:        if (Token::simpleMatch(elseTag, "else {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5401:            // Handle else
    #####: 5402:            if (!boolValue) {
branch  0 never executed
branch  1 never executed
        -: 5403:                // Convert "if( false ) {aaa;} else {bbb;}" => "{bbb;}"
        -: 5404:
        -: 5405:                //remove '(false)'
    #####: 5406:                tok->deleteNext(3);
call    0 never executed
        -: 5407:                //delete dead code inside scope
    #####: 5408:                eraseDeadCode(tok, elseTag);
call    0 never executed
        -: 5409:                //remove 'else'
    #####: 5410:                elseTag->deleteThis();
call    0 never executed
        -: 5411:                //remove 'if'
    #####: 5412:                tok->deleteThis();
call    0 never executed
        -: 5413:            } else {
        -: 5414:                // Convert "if( true ) {aaa;} else {bbb;}" => "{aaa;}"
    #####: 5415:                const Token *end = elseTag->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5416:
        -: 5417:                // Remove "else { bbb; }"
    #####: 5418:                elseTag = elseTag->previous();
call    0 never executed
    #####: 5419:                eraseDeadCode(elseTag, end);
call    0 never executed
        -: 5420:
        -: 5421:                // Remove "if( true )"
    #####: 5422:                tok->deleteNext(3);
call    0 never executed
    #####: 5423:                tok->deleteThis();
call    0 never executed
        -: 5424:            }
        -: 5425:
    #####: 5426:            ret = true;
        -: 5427:        }
        -: 5428:
        -: 5429:        // Handle if without else
        -: 5430:        else {
    #####: 5431:            if (!boolValue) {
branch  0 never executed
branch  1 never executed
        -: 5432:                //remove '(false)'
    #####: 5433:                tok->deleteNext(3);
call    0 never executed
        -: 5434:                //delete dead code inside scope
    #####: 5435:                eraseDeadCode(tok, elseTag);
call    0 never executed
        -: 5436:                //remove 'if'
    #####: 5437:                tok->deleteThis();
call    0 never executed
        -: 5438:            } else {
        -: 5439:                // convert "if( true ) {aaa;}" => "{aaa;}"
    #####: 5440:                tok->deleteNext(3);
call    0 never executed
    #####: 5441:                tok->deleteThis();
call    0 never executed
        -: 5442:            }
        -: 5443:
    #####: 5444:            ret = true;
        -: 5445:        }
        -: 5446:    }
        -: 5447:
    #####: 5448:    return ret;
        -: 5449:}
        -: 5450:
function _ZN9Tokenizer18removeRedundantForEv called 0 returned 0% blocks executed 0%
    #####: 5451:void Tokenizer::removeRedundantFor()
        -: 5452:{
    #####: 5453:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5454:        if (Token::Match(tok, "[;{}] for ( %name% = %num% ; %name% < %num% ; ++| %name% ++| ) {") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5455:            Token::Match(tok, "[;{}] for ( %type% %name% = %num% ; %name% < %num% ; ++| %name% ++| ) {")) {
call    0 never executed
        -: 5456:            // Same variable name..
    #####: 5457:            const Token* varTok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5458:            const bool type = varTok->next()->isName();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5459:            if (type)
branch  0 never executed
branch  1 never executed
    #####: 5460:                varTok = varTok->next();
call    0 never executed
    #####: 5461:            const std::string varname(varTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 5462:            const int varid(varTok->varId());
call    0 never executed
    #####: 5463:            if (varname != varTok->strAt(4))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5464:                continue;
    #####: 5465:            const Token *vartok2 = tok->linkAt(2)->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5466:            if (vartok2->str() == "++")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5467:                vartok2 = vartok2->previous();
call    0 never executed
    #####: 5468:            else if (vartok2->strAt(-1) != "++")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5469:                continue;
    #####: 5470:            if (varname != vartok2->str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5471:                continue;
        -: 5472:
        -: 5473:            // Check that the difference of the numeric values is 1
    #####: 5474:            const MathLib::bigint num1(MathLib::toLongNumber(varTok->strAt(2)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5475:            const MathLib::bigint num2(MathLib::toLongNumber(varTok->strAt(6)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5476:            if (num1 + 1 != num2)
branch  0 never executed
branch  1 never executed
    #####: 5477:                continue;
        -: 5478:
        -: 5479:            // check how loop variable is used in loop..
    #####: 5480:            bool read = false;
    #####: 5481:            bool write = false;
    #####: 5482:            const Token* end = tok->linkAt(2)->next()->link();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5483:            for (const Token *tok2 = tok->linkAt(2); tok2 != end; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 5484:                if (tok2->str() == varname) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5485:                    if (tok2->previous()->isArithmeticalOp() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5486:                        tok2->next() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5487:                        (tok2->next()->isArithmeticalOp() || tok2->next()->str() == ";")) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5488:                        read = true;
        -: 5489:                    } else {
    #####: 5490:                        read = write = true;
    #####: 5491:                        break;
        -: 5492:                    }
        -: 5493:                }
        -: 5494:            }
        -: 5495:
        -: 5496:            // Simplify loop if loop variable isn't written
    #####: 5497:            if (!write) {
branch  0 never executed
branch  1 never executed
    #####: 5498:                Token* bodyBegin = tok->linkAt(2)->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 5499:                // remove "for ("
    #####: 5500:                tok->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5501:
        -: 5502:                // If loop variable is read then keep assignment before
        -: 5503:                // loop body..
    #####: 5504:                if (type) {
branch  0 never executed
branch  1 never executed
    #####: 5505:                    tok->insertToken("{");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5506:                    Token::createMutualLinks(tok->next(), bodyBegin->link());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5507:                    bodyBegin->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5508:                    tok = tok->tokAt(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5509:                } else if (read) {
branch  0 never executed
branch  1 never executed
        -: 5510:                    // goto ";"
    #####: 5511:                    tok = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5512:                } else {
        -: 5513:                    // remove "x = 0 ;"
    #####: 5514:                    tok->deleteNext(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5515:                }
        -: 5516:
        -: 5517:                // remove "x < 1 ; x ++ )"
    #####: 5518:                tok->deleteNext(7);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5519:
    #####: 5520:                if (!type) {
branch  0 never executed
branch  1 never executed
        -: 5521:                    // Add assignment after the loop body so the loop variable
        -: 5522:                    // get the correct end value
    #####: 5523:                    Token *tok2 = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 5524:                    tok2->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5525:                    tok2->insertToken(MathLib::toString(num2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5526:                    tok2->insertToken("=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5527:                    tok2->insertToken(varname);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5528:                    tok2->next()->varId(varid);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 5529:                }
        -: 5530:            }
        -: 5531:        }
        -: 5532:    }
    #####: 5533:}
        -: 5534:
        -: 5535:
function _ZN9Tokenizer25removeRedundantSemicolonsEv called 956 returned 100% blocks executed 95%
      956: 5536:void Tokenizer::removeRedundantSemicolons()
        -: 5537:{
    21237: 5538:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
    22788: 5539:        if (tok->link() && tok->str() == "(") {
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 39% (fallthrough)
branch  6 taken 61%
branch  7 taken 12% (fallthrough)
branch  8 taken 88%
     2507: 5540:            tok = tok->link();
call    0 returned 100%
     2507: 5541:            continue;
        -: 5542:        }
        -: 5543:        for (;;) {
    17776: 5544:            if (Token::simpleMatch(tok, "; ;")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1: 5545:                tok->deleteNext();
call    0 returned 100%
    17774: 5546:            } else if (Token::simpleMatch(tok, "; { ; }")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5547:                tok->deleteNext(3);
call    0 never executed
        -: 5548:            } else {
    17774: 5549:                break;
        -: 5550:            }
        -: 5551:        }
        -: 5552:    }
      956: 5553:}
        -: 5554:
        -: 5555:
function _ZN9Tokenizer17simplifyAddBracesEv called 956 returned 100% blocks executed 88%
      956: 5556:bool Tokenizer::simplifyAddBraces()
        -: 5557:{
    29203: 5558:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28247: 5559:        Token const * tokRet=simplifyAddBracesToCommand(tok);
call    0 returned 100%
    28247: 5560:        if (!tokRet)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5561:            return false;
        -: 5562:    }
      956: 5563:    return true;
        -: 5564:}
        -: 5565:
function _ZN9Tokenizer26simplifyAddBracesToCommandEP5Token called 28371 returned 100% blocks executed 73%
    28371: 5566:Token *Tokenizer::simplifyAddBracesToCommand(Token *tok)
        -: 5567:{
    28371: 5568:    Token * tokEnd=tok;
    28371: 5569:    if (Token::Match(tok,"for|switch|BOOST_FOREACH")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      107: 5570:        tokEnd=simplifyAddBracesPair(tok,true);
call    0 returned 100%
    28264: 5571:    } else if (tok->str()=="while") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       53: 5572:        Token *tokPossibleDo=tok->previous();
call    0 returned 100%
       53: 5573:        if (Token::simpleMatch(tok->previous(), "{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
       10: 5574:            tokPossibleDo = nullptr;
       43: 5575:        else if (Token::simpleMatch(tokPossibleDo,"}"))
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
       18: 5576:            tokPossibleDo = tokPossibleDo->link();
call    0 returned 100%
       53: 5577:        if (!tokPossibleDo || tokPossibleDo->strAt(-1) != "do")
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 58% (fallthrough)
branch  5 taken 42%
branch  6 taken 66% (fallthrough)
branch  7 taken 34%
       35: 5578:            tokEnd=simplifyAddBracesPair(tok,true);
call    0 returned 100%
    28211: 5579:    } else if (tok->str()=="do") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       18: 5580:        tokEnd=simplifyAddBracesPair(tok,false);
call    0 returned 100%
       18: 5581:        if (tokEnd!=tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 5582:            // walk on to next token, i.e. "while"
        -: 5583:            // such that simplifyAddBracesPair does not close other braces
        -: 5584:            // before the "while"
       18: 5585:            if (tokEnd) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18: 5586:                tokEnd=tokEnd->next();
call    0 returned 100%
       18: 5587:                if (!tokEnd || tokEnd->str()!="while") // no while
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5588:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5589:            }
        -: 5590:        }
    28193: 5591:    } else if (tok->str()=="if" && !Token::simpleMatch(tok->tokAt(-2), "operator \"\"")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
      347: 5592:        tokEnd=simplifyAddBracesPair(tok,true);
call    0 returned 100%
      347: 5593:        if (!tokEnd)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5594:            return nullptr;
      347: 5595:        if (tokEnd->strAt(1) == "else") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
       32: 5596:            Token * tokEndNextNext= tokEnd->tokAt(2);
call    0 returned 100%
       32: 5597:            if (!tokEndNextNext || tokEndNextNext->str() == "}")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5598:                syntaxError(tokEndNextNext);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       32: 5599:            if (tokEndNextNext->str() == "if")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
        -: 5600:                // do not change "else if ..." to "else { if ... }"
        5: 5601:                tokEnd=simplifyAddBracesToCommand(tokEndNextNext);
call    0 returned 100%
        -: 5602:            else
       27: 5603:                tokEnd=simplifyAddBracesPair(tokEnd->next(),false);
call    0 returned 100%
call    1 returned 100%
        -: 5604:        }
        -: 5605:    }
        -: 5606:
    28371: 5607:    return tokEnd;
        -: 5608:}
        -: 5609:
function _ZN9Tokenizer21simplifyAddBracesPairEP5Tokenb called 534 returned 100% blocks executed 39%
      534: 5610:Token *Tokenizer::simplifyAddBracesPair(Token *tok, bool commandWithCondition)
        -: 5611:{
      534: 5612:    Token * tokCondition=tok->next();
call    0 returned 100%
      534: 5613:    if (!tokCondition) // Missing condition
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5614:        return tok;
        -: 5615:
      534: 5616:    Token *tokAfterCondition=tokCondition;
      534: 5617:    if (commandWithCondition) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      489: 5618:        if (tokCondition->str()=="(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      489: 5619:            tokAfterCondition=tokCondition->link();
call    0 returned 100%
        -: 5620:        else
    #####: 5621:            syntaxError(tok); // Bad condition
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5622:
      489: 5623:        if (!tokAfterCondition || tokAfterCondition->strAt(1) == "]")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 5624:            syntaxError(tok); // Bad condition
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5625:
      489: 5626:        tokAfterCondition=tokAfterCondition->next();
call    0 returned 100%
      489: 5627:        if (!tokAfterCondition || Token::Match(tokAfterCondition, ")|}|,")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -: 5628:            // No tokens left where to add braces around
    #####: 5629:            return tok;
        -: 5630:        }
        -: 5631:    }
      534: 5632:    Token * tokBracesEnd=nullptr;
      534: 5633:    if (tokAfterCondition->str()=="{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 78% (fallthrough)
branch  3 taken 22%
        -: 5634:        // already surrounded by braces
      415: 5635:        tokBracesEnd=tokAfterCondition->link();
call    0 returned 100%
      119: 5636:    } else if (Token::simpleMatch(tokAfterCondition, "try {") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 5637:               Token::simpleMatch(tokAfterCondition->linkAt(1), "} catch (")) {
call    0 never executed
call    1 never executed
    #####: 5638:        tokAfterCondition->previous()->insertToken("{");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 5639:        Token * tokOpenBrace = tokAfterCondition->previous();
call    0 never executed
    #####: 5640:        Token * tokEnd = tokAfterCondition->linkAt(1)->linkAt(2)->linkAt(1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5641:        if (!tokEnd) {
branch  0 never executed
branch  1 never executed
    #####: 5642:            syntaxError(tokAfterCondition);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5643:        }
    #####: 5644:        tokEnd->insertToken("}");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 5645:        Token * tokCloseBrace = tokEnd->next();
call    0 never executed
        -: 5646:
    #####: 5647:        Token::createMutualLinks(tokOpenBrace, tokCloseBrace);
call    0 never executed
    #####: 5648:        tokBracesEnd = tokCloseBrace;
      119: 5649:    } else if (Token::Match(tokAfterCondition, "%name% : {")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 5650:        tokAfterCondition->previous()->insertToken("{");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 5651:        tokAfterCondition->linkAt(2)->insertToken("}");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 5652:        tokBracesEnd = tokAfterCondition->linkAt(2)->next();
call    0 never executed
call    1 never executed
    #####: 5653:        Token::createMutualLinks(tokAfterCondition->previous(), tokBracesEnd);
call    0 never executed
call    1 never executed
        -: 5654:    } else {
      119: 5655:        Token * tokEnd = simplifyAddBracesToCommand(tokAfterCondition);
call    0 returned 100%
      119: 5656:        if (!tokEnd) // Ticket #4887
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5657:            return tok;
      119: 5658:        if (tokEnd->str()!="}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 5659:            // Token does not end with brace
        -: 5660:            // Look for ; to add own closing brace after it
      585: 5661:            while (tokEnd && !Token::Match(tokEnd, ";|)|}")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 66% (fallthrough)
branch  4 taken 34%
branch  5 taken 66% (fallthrough)
branch  6 taken 34%
      233: 5662:                if (tokEnd->tokType()==Token::eBracket || tokEnd->str() == "(") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 15% (fallthrough)
branch  6 taken 85%
branch  7 taken 15% (fallthrough)
branch  8 taken 85%
       34: 5663:                    tokEnd = tokEnd->link();
call    0 returned 100%
       34: 5664:                    if (!tokEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5665:                        // Inner bracket does not close
    #####: 5666:                        return tok;
        -: 5667:                    }
        -: 5668:                }
      233: 5669:                tokEnd=tokEnd->next();
call    0 returned 100%
        -: 5670:            }
      119: 5671:            if (!tokEnd || tokEnd->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        -: 5672:                // No trailing ;
    #####: 5673:                return tok;
        -: 5674:            }
        -: 5675:        }
        -: 5676:
      119: 5677:        tokAfterCondition->previous()->insertToken("{");
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
      119: 5678:        Token * tokOpenBrace=tokAfterCondition->previous();
call    0 returned 100%
        -: 5679:
      119: 5680:        tokEnd->insertToken("}");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
      119: 5681:        Token * TokCloseBrace=tokEnd->next();
call    0 returned 100%
        -: 5682:
      119: 5683:        Token::createMutualLinks(tokOpenBrace,TokCloseBrace);
call    0 returned 100%
      119: 5684:        tokBracesEnd=TokCloseBrace;
        -: 5685:    }
        -: 5686:
      534: 5687:    return tokBracesEnd;
        -: 5688:}
        -: 5689:
function _ZN9Tokenizer26simplifyCompoundAssignmentEv called 0 returned 0% blocks executed 0%
    #####: 5690:void Tokenizer::simplifyCompoundAssignment()
        -: 5691:{
        -: 5692:    // Simplify compound assignments:
        -: 5693:    // "a+=b" => "a = a + b"
    #####: 5694:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5695:        if (!Token::Match(tok, "[;{}] (| *| (| %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5696:            continue;
    #####: 5697:        if (tok->next()->str() == "return")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5698:            continue;
        -: 5699:        // backup current token..
    #####: 5700:        Token * const tok1 = tok;
        -: 5701:
    #####: 5702:        if (tok->next()->str() == "*")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5703:            tok = tok->next();
call    0 never executed
        -: 5704:
    #####: 5705:        if (tok->next() && tok->next()->str() == "(") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5706:            tok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 5707:        } else {
        -: 5708:            // variable..
    #####: 5709:            tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5710:            while (Token::Match(tok, ". %name%") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5711:                   Token::Match(tok, "[|(")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5712:                if (tok->str() == ".")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5713:                    tok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5714:                else {
        -: 5715:                    // goto "]" or ")"
    #####: 5716:                    tok = tok->link();
call    0 never executed
        -: 5717:
        -: 5718:                    // goto next token..
    #####: 5719:                    tok = tok ? tok->next() : nullptr;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 5720:                }
        -: 5721:            }
        -: 5722:        }
    #####: 5723:        if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 5724:            break;
        -: 5725:
        -: 5726:        // Is current token at a compound assignment: +=|-=|.. ?
    #####: 5727:        const std::string &str = tok->str();
call    0 never executed
    #####: 5728:        std::string op;  // operator used in assignment
call    0 never executed
call    1 never executed
    #####: 5729:        if (tok->isAssignmentOp() && str.size() == 2)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5730:            op = str.substr(0, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 5731:        else if (tok->isAssignmentOp() && str.size() == 3)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5732:            op = str.substr(0, 2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 5733:        else {
    #####: 5734:            tok = tok1;
    #####: 5735:            continue;
        -: 5736:        }
        -: 5737:
        -: 5738:        // Remove the whole statement if it says: "+=0;", "-=0;", "*=1;" or "/=1;"
    #####: 5739:        if (Token::Match(tok, "+=|-= 0 ;") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5740:            Token::simpleMatch(tok, "|= 0 ;") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5741:            Token::Match(tok, "*=|/= 1 ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5742:            tok = tok1;
    #####: 5743:            while (tok->next()->str() != ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5744:                tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5745:        } else {
        -: 5746:            // Enclose the rhs in parentheses..
    #####: 5747:            if (!Token::Match(tok->tokAt(2), "[;)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 5748:                // Only enclose rhs in parentheses if there is some operator
    #####: 5749:                bool someOperator = false;
    #####: 5750:                for (Token *tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5751:                    if (tok2->link() && Token::Match(tok2, "{|[|("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 5752:                        tok2 = tok2->link();
call    0 never executed
        -: 5753:
    #####: 5754:                    if (Token::Match(tok2->next(), "[;)]")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5755:                        if (someOperator) {
branch  0 never executed
branch  1 never executed
    #####: 5756:                            tok->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5757:                            tok2->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 5758:                            Token::createMutualLinks(tok->next(), tok2->next());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5759:                        }
    #####: 5760:                        break;
        -: 5761:                    }
        -: 5762:
    #####: 5763:                    someOperator |= (tok2->isOp() || tok2->str() == "?");
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5764:                }
        -: 5765:            }
        -: 5766:
        -: 5767:            // simplify the compound assignment..
    #####: 5768:            tok->str("=");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5769:            tok->insertToken(op);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5770:
    #####: 5771:            std::stack<Token *> tokend;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 5772:            for (Token *tok2 = tok->previous(); tok2 && tok2 != tok1; tok2 = tok2->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
        -: 5773:                // Don't duplicate ++ and --. Put preincrement in lhs. Put
        -: 5774:                // postincrement in rhs.
    #####: 5775:                if (tok2->tokType() == Token::eIncDecOp) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5776:                    // pre increment/decrement => don't copy
    #####: 5777:                    if (tok2->next()->isName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5778:                        continue;
        -: 5779:                    }
        -: 5780:
        -: 5781:                    // post increment/decrement => move from lhs to rhs
    #####: 5782:                    tok->insertToken(tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5783:                    tok2->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5784:                    continue;
        -: 5785:                }
        -: 5786:
        -: 5787:                // Copy token from lhs to rhs
    #####: 5788:                tok->insertToken(tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5789:                tok->next()->varId(tok2->varId());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5790:                if (Token::Match(tok->next(), "]|)|}"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5791:                    tokend.push(tok->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5792:                else if (Token::Match(tok->next(), "(|[|{")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5793:                    Token::createMutualLinks(tok->next(), tokend.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5794:                    tokend.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5795:                }
        -: 5796:            }
        -: 5797:        }
        -: 5798:    }
    #####: 5799:}
        -: 5800:
function _ZN9Tokenizer18simplifyConditionsEv called 0 returned 0% blocks executed 0%
    #####: 5801:bool Tokenizer::simplifyConditions()
        -: 5802:{
    #####: 5803:    bool ret = false;
        -: 5804:
    #####: 5805:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5806:        if (Token::Match(tok, "! %bool%|%num%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5807:            tok->deleteThis();
call    0 never executed
    #####: 5808:            if (Token::Match(tok, "0|false"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5809:                tok->str("true");
call    0 never executed
        -: 5810:            else
    #####: 5811:                tok->str("false");
call    0 never executed
        -: 5812:
    #####: 5813:            ret = true;
        -: 5814:        }
        -: 5815:
    #####: 5816:        if (Token::simpleMatch(tok, "&& true &&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5817:            tok->deleteNext(2);
call    0 never executed
    #####: 5818:            ret = true;
        -: 5819:        }
        -: 5820:
    #####: 5821:        else if (Token::simpleMatch(tok, "|| false ||")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5822:            tok->deleteNext(2);
call    0 never executed
    #####: 5823:            ret = true;
        -: 5824:        }
        -: 5825:
    #####: 5826:        else if (Token::Match(tok, "(|&& true && true &&|)")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5827:            tok->deleteNext(2);
call    0 never executed
    #####: 5828:            ret = true;
        -: 5829:        }
        -: 5830:
    #####: 5831:        else if (Token::Match(tok, "%oror%|( false %oror% false %oror%|)")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5832:            tok->deleteNext(2);
call    0 never executed
    #####: 5833:            ret = true;
        -: 5834:        }
        -: 5835:
    #####: 5836:        else if (Token::simpleMatch(tok, "( true ||") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5837:                 Token::simpleMatch(tok, "( false &&")) {
call    0 never executed
    #####: 5838:            Token::eraseTokens(tok->next(), tok->link());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5839:            ret = true;
        -: 5840:        }
        -: 5841:
    #####: 5842:        else if (Token::simpleMatch(tok, "|| true )") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5843:                 Token::simpleMatch(tok, "&& false )")) {
call    0 never executed
    #####: 5844:            tok = tok->next();
call    0 never executed
    #####: 5845:            Token::eraseTokens(tok->next()->link(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5846:            ret = true;
        -: 5847:        }
        -: 5848:
    #####: 5849:        else if (Token::simpleMatch(tok, "&& false &&") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 5850:                 Token::simpleMatch(tok, "|| true ||")) {
call    0 never executed
        -: 5851:            //goto '('
    #####: 5852:            Token *tok2 = tok;
    #####: 5853:            while (tok2->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5854:                if (tok2->previous()->str() == ")")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5855:                    tok2 = tok2->previous()->link();
call    0 never executed
call    1 never executed
        -: 5856:                else {
    #####: 5857:                    tok2 = tok2->previous();
call    0 never executed
    #####: 5858:                    if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5859:                        break;
        -: 5860:                }
        -: 5861:            }
    #####: 5862:            if (!tok2)
branch  0 never executed
branch  1 never executed
    #####: 5863:                continue;
        -: 5864:            //move tok to 'true|false' position
    #####: 5865:            tok = tok->next();
call    0 never executed
        -: 5866:            //remove everything before 'true|false'
    #####: 5867:            Token::eraseTokens(tok2, tok);
call    0 never executed
        -: 5868:            //remove everything after 'true|false'
    #####: 5869:            Token::eraseTokens(tok, tok2->link());
call    0 never executed
call    1 never executed
    #####: 5870:            ret = true;
        -: 5871:        }
        -: 5872:
        -: 5873:        // Change numeric constant in condition to "true" or "false"
    #####: 5874:        if (Token::Match(tok, "if|while ( %num% )|%oror%|&&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5875:            tok->tokAt(2)->str((tok->strAt(2) != "0") ? "true" : "false");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    #####: 5876:            ret = true;
        -: 5877:        }
    #####: 5878:        if (Token::Match(tok, "&&|%oror% %num% )|%oror%|&&")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5879:            tok->next()->str((tok->next()->str() != "0") ? "true" : "false");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 5880:            ret = true;
        -: 5881:        }
        -: 5882:
        -: 5883:        // Reduce "(%num% == %num%)" => "(true)"/"(false)"
    #####: 5884:        if (Token::Match(tok, "&&|%oror%|(") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5885:            (Token::Match(tok->next(), "%num% %any% %num%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5886:             Token::Match(tok->next(), "%bool% %any% %bool%")) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5887:            Token::Match(tok->tokAt(4), "&&|%oror%|)|?")) {
call    0 never executed
call    1 never executed
    #####: 5888:            std::string cmp = tok->strAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 5889:            bool result = false;
    #####: 5890:            if (tok->next()->isNumber()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5891:                // Compare numbers
        -: 5892:
    #####: 5893:                if (cmp == "==" || cmp == "!=") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5894:                    const std::string& op1(tok->next()->str());
call    0 never executed
call    1 never executed
    #####: 5895:                    const std::string& op2(tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5896:
    #####: 5897:                    bool eq = false;
    #####: 5898:                    if (MathLib::isInt(op1) && MathLib::isInt(op2))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5899:                        eq = (MathLib::toLongNumber(op1) == MathLib::toLongNumber(op2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5900:                    else {
    #####: 5901:                        eq = (op1 == op2);
call    0 never executed
        -: 5902:
        -: 5903:                        // It is inconclusive whether two unequal float representations are numerically equal
    #####: 5904:                        if (!eq && MathLib::isFloat(op1))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5905:                            cmp.clear();
call    0 never executed
        -: 5906:                    }
        -: 5907:
    #####: 5908:                    if (cmp == "==")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5909:                        result = eq;
        -: 5910:                    else
    #####: 5911:                        result = !eq;
        -: 5912:                } else {
    #####: 5913:                    const double op1 = MathLib::toDoubleNumber(tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5914:                    const double op2 = MathLib::toDoubleNumber(tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5915:                    if (cmp == ">=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5916:                        result = (op1 >= op2);
    #####: 5917:                    else if (cmp == ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5918:                        result = (op1 > op2);
    #####: 5919:                    else if (cmp == "<=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5920:                        result = (op1 <= op2);
    #####: 5921:                    else if (cmp == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5922:                        result = (op1 < op2);
        -: 5923:                    else
    #####: 5924:                        cmp.clear();
call    0 never executed
        -: 5925:                }
        -: 5926:            } else {
        -: 5927:                // Compare boolean
    #####: 5928:                const bool op1 = (tok->next()->str() == std::string("true"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 5929:                const bool op2 = (tok->strAt(3) == std::string("true"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 5930:
    #####: 5931:                if (cmp == "==")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5932:                    result = (op1 == op2);
    #####: 5933:                else if (cmp == "!=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5934:                    result = (op1 != op2);
    #####: 5935:                else if (cmp == ">=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5936:                    result = (op1 >= op2);
    #####: 5937:                else if (cmp == ">")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5938:                    result = (op1 > op2);
    #####: 5939:                else if (cmp == "<=")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5940:                    result = (op1 <= op2);
    #####: 5941:                else if (cmp == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5942:                    result = (op1 < op2);
        -: 5943:                else
    #####: 5944:                    cmp.clear();
call    0 never executed
        -: 5945:            }
        -: 5946:
    #####: 5947:            if (! cmp.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5948:                tok = tok->next();
call    0 never executed
    #####: 5949:                tok->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5950:
    #####: 5951:                tok->str(result ? "true" : "false");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 5952:                ret = true;
        -: 5953:            }
        -: 5954:        }
        -: 5955:    }
        -: 5956:
    #####: 5957:    return ret;
        -: 5958:}
        -: 5959:
function _ZN9Tokenizer22simplifyConstTernaryOpEv called 0 returned 0% blocks executed 0%
    #####: 5960:bool Tokenizer::simplifyConstTernaryOp()
        -: 5961:{
    #####: 5962:    bool ret = false;
    #####: 5963:    const Token *templateParameterEnd = nullptr; // The end of the current template parameter list, if any
    #####: 5964:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5965:        if (tok->str() == "<" && TemplateSimplifier::templateParameters(tok))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5966:            templateParameterEnd = tok->findClosingBracket();
call    0 never executed
    #####: 5967:        if (tok == templateParameterEnd)
branch  0 never executed
branch  1 never executed
    #####: 5968:            templateParameterEnd = nullptr; // End of the current template parameter list
    #####: 5969:        if (tok->str() != "?")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5970:            continue;
        -: 5971:
    #####: 5972:        if (!Token::Match(tok->tokAt(-2), "<|=|,|(|[|{|}|;|case|return %bool%|%num%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 5973:            !Token::Match(tok->tokAt(-4), "<|=|,|(|[|{|}|;|case|return ( %bool%|%num% )"))
call    0 never executed
call    1 never executed
    #####: 5974:            continue;
        -: 5975:
    #####: 5976:        const int offset = (tok->previous()->str() == ")") ? 2 : 1;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 5977:
    #####: 5978:        if (tok->strAt(-2*offset) == "<") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5979:            if (isC() || !TemplateSimplifier::templateParameters(tok->tokAt(-2*offset)))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5980:                continue; // '<' is less than; the condition is not a constant
        -: 5981:        }
        -: 5982:
        -: 5983:        // Find the token ":" then go to the next token
    #####: 5984:        Token *colon = skipTernaryOp(tok);
call    0 never executed
    #####: 5985:        if (!colon || colon->previous()->str() != ":" || !colon->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5986:            continue;
        -: 5987:
        -: 5988:        //handle the GNU extension: "x ? : y" <-> "x ? x : y"
    #####: 5989:        if (colon->previous() == tok->next())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5990:            tok->insertToken(tok->strAt(-offset));
call    0 never executed
call    1 never executed
        -: 5991:
        -: 5992:        // go back before the condition, if possible
    #####: 5993:        tok = tok->tokAt(-2);
call    0 never executed
    #####: 5994:        if (offset == 2) {
branch  0 never executed
branch  1 never executed
        -: 5995:            // go further back before the "("
    #####: 5996:            tok = tok->tokAt(-2);
call    0 never executed
        -: 5997:            //simplify the parentheses
    #####: 5998:            tok->deleteNext();
call    0 never executed
    #####: 5999:            tok->next()->deleteNext();
call    0 never executed
call    1 never executed
        -: 6000:        }
        -: 6001:
    #####: 6002:        if (Token::Match(tok->next(), "false|0")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6003:            // Use code after colon, remove code before it.
    #####: 6004:            Token::eraseTokens(tok, colon);
call    0 never executed
        -: 6005:
    #####: 6006:            tok = tok->next();
call    0 never executed
    #####: 6007:            ret = true;
        -: 6008:        }
        -: 6009:
        -: 6010:        // The condition is true. Delete the operator after the ":"..
        -: 6011:        else {
        -: 6012:            // delete the condition token and the "?"
    #####: 6013:            tok->deleteNext(2);
call    0 never executed
        -: 6014:
    #####: 6015:            int ternaryOplevel = 0;
    #####: 6016:            for (const Token *endTok = colon; endTok; endTok = endTok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6017:                if (Token::Match(endTok, "(|[|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6018:                    endTok = endTok->link();
call    0 never executed
    #####: 6019:                else if (endTok->str() == "<" && (endTok->strAt(1) == ">" || TemplateSimplifier::templateParameters(endTok)))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 6020:                    endTok = endTok->findClosingBracket();
call    0 never executed
    #####: 6021:                else if (endTok->str() == "?")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6022:                    ++ternaryOplevel;
    #####: 6023:                else if (Token::Match(endTok, ")|}|]|;|,|:|>")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6024:                    if (endTok->str() == ":" && ternaryOplevel)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6025:                        --ternaryOplevel;
    #####: 6026:                    else if (endTok->str() == ">" && !templateParameterEnd)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 6027:                        ;
        -: 6028:                    else {
    #####: 6029:                        Token::eraseTokens(colon->tokAt(-2), endTok);
call    0 never executed
call    1 never executed
    #####: 6030:                        ret = true;
    #####: 6031:                        break;
        -: 6032:                    }
        -: 6033:                }
        -: 6034:            }
        -: 6035:        }
        -: 6036:    }
    #####: 6037:    return ret;
        -: 6038:}
        -: 6039:
function _ZN9Tokenizer26simplifyUndefinedSizeArrayEv called 0 returned 0% blocks executed 0%
    #####: 6040:void Tokenizer::simplifyUndefinedSizeArray()
        -: 6041:{
    #####: 6042:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6043:        if (Token::Match(tok, "%type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6044:            Token *tok2 = tok->next();
call    0 never executed
    #####: 6045:            while (tok2 && tok2->str() == "*")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6046:                tok2 = tok2->next();
call    0 never executed
    #####: 6047:            if (!Token::Match(tok2, "%name% [ ] ;|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6048:                continue;
        -: 6049:
    #####: 6050:            tok = tok2->previous();
call    0 never executed
    #####: 6051:            Token *end = tok2->next();
call    0 never executed
    #####: 6052:            int count = 0;
    #####: 6053:            do {
    #####: 6054:                end = end->tokAt(2);
call    0 never executed
    #####: 6055:                ++count;
    #####: 6056:            } while (Token::Match(end, "[ ] [;=[]"));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6057:            if (Token::Match(end, "[;=]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6058:                do {
    #####: 6059:                    tok2->deleteNext(2);
call    0 never executed
    #####: 6060:                    tok->insertToken("*");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6061:                } while (--count);
branch  0 never executed
branch  1 never executed
    #####: 6062:                tok = end;
        -: 6063:            } else
    #####: 6064:                tok = tok->tokAt(3);
call    0 never executed
        -: 6065:        }
        -: 6066:    }
    #####: 6067:}
        -: 6068:
function _ZN9Tokenizer13simplifyCastsEv called 0 returned 0% blocks executed 0%
    #####: 6069:void Tokenizer::simplifyCasts()
        -: 6070:{
    #####: 6071:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 6072:        // Don't remove cast in such cases:
        -: 6073:        // *((char *)a + 1) = 0;
        -: 6074:        // Remove cast when casting a function pointer:
        -: 6075:        // (*(void (*)(char *))fp)(x);
    #####: 6076:        if (!tok->isName() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6077:            Token::simpleMatch(tok->next(), "* (") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6078:            !Token::Match(tok->linkAt(2), ") %name%|&")) {
call    0 never executed
call    1 never executed
    #####: 6079:            tok = tok->linkAt(2);
call    0 never executed
    #####: 6080:            continue;
        -: 6081:        }
        -: 6082:        // #3935 : don't remove cast in such cases:
        -: 6083:        // ((char *)a)[1] = 0;
    #####: 6084:        if (tok->str() == "(" && Token::simpleMatch(tok->link(), ") [")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 6085:            tok = tok->link();
call    0 never executed
    #####: 6086:            continue;
        -: 6087:        }
        -: 6088:        // #4164 : ((unsigned char)1) => (1)
    #####: 6089:        if (Token::Match(tok->next(), "( %type% ) %num%") && tok->next()->link()->previous()->isStandardType()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6090:            const MathLib::bigint value = MathLib::toLongNumber(tok->next()->link()->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 6091:            int bits = mSettings->char_bit * mTypeSize[tok->next()->link()->previous()->str()];
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 6092:            if (!tok->tokAt(2)->isUnsigned() && bits > 0)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6093:                bits--;
    #####: 6094:            if (bits < 31 && value >= 0 && value < (1LL << bits)) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6095:                tok->linkAt(1)->next()->isCast(true);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6096:                Token::eraseTokens(tok, tok->next()->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 6097:            }
    #####: 6098:            continue;
        -: 6099:        }
        -: 6100:
    #####: 6101:        while ((Token::Match(tok->next(), "( %type% *| *| *|&| ) *|&| %name%") && (tok->str() != ")" || tok->tokAt(2)->isStandardType())) ||
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6102:               Token::Match(tok->next(), "( const| %type% * *| *|&| ) *|&| %name%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6103:               Token::Match(tok->next(), "( const| %type% %type% *| *| *|&| ) *|&| %name%") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6104:               (!tok->isName() && (Token::Match(tok->next(), "( %type% * *| *|&| ) (") ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6105:                                   Token::Match(tok->next(), "( const| %type% %type% * *| *|&| ) (")))) {
call    0 never executed
call    1 never executed
    #####: 6106:            if (tok->isName() && tok->str() != "return")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6107:                break;
        -: 6108:
    #####: 6109:            if (isCPP() && tok->strAt(-1) == "operator")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6110:                break;
        -: 6111:
        -: 6112:            // Remove cast..
    #####: 6113:            Token::eraseTokens(tok, tok->next()->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 6114:
        -: 6115:            // Set isCasted flag.
    #####: 6116:            Token *tok2 = tok->next();
call    0 never executed
    #####: 6117:            if (!Token::Match(tok2, "%name% [|."))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6118:                tok2->isCast(true);
call    0 never executed
        -: 6119:            else {
        -: 6120:                // TODO: handle more complex expressions
    #####: 6121:                tok2->next()->isCast(true);
call    0 never executed
call    1 never executed
        -: 6122:            }
        -: 6123:
        -: 6124:            // Remove '* &'
    #####: 6125:            if (Token::simpleMatch(tok, "* &")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6126:                tok->deleteNext();
call    0 never executed
    #####: 6127:                tok->deleteThis();
call    0 never executed
        -: 6128:            }
        -: 6129:
    #####: 6130:            if (tok->str() == ")" && tok->link()->previous()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 6131:                // If there was another cast before this, go back
        -: 6132:                // there to check it also. e.g. "(int)(char)x"
    #####: 6133:                tok = tok->link()->previous();
call    0 never executed
call    1 never executed
        -: 6134:            }
        -: 6135:        }
        -: 6136:
        -: 6137:        // Replace pointer casts of 0.. "(char *)0" => "0"
    #####: 6138:        while (Token::Match(tok->next(), "( %type% %type%| * *| ) 0")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6139:            tok->linkAt(1)->next()->isCast(true);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 6140:            Token::eraseTokens(tok, tok->next()->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 6141:            if (tok->str() == ")" && tok->link()->previous()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 6142:                // If there was another cast before this, go back
        -: 6143:                // there to check it also. e.g. "(char*)(char*)0"
    #####: 6144:                tok = tok->link()->previous();
call    0 never executed
call    1 never executed
        -: 6145:            }
        -: 6146:        }
        -: 6147:
    #####: 6148:        if (Token::Match(tok->next(), "dynamic_cast|reinterpret_cast|const_cast|static_cast <")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6149:            Token *tok2 = tok->linkAt(2);
call    0 never executed
    #####: 6150:            if (!Token::simpleMatch(tok2, "> ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6151:                break;
        -: 6152:
    #####: 6153:            tok2->tokAt(2)->isCast(true);
call    0 never executed
call    1 never executed
    #####: 6154:            Token::eraseTokens(tok, tok2->next());
call    0 never executed
call    1 never executed
        -: 6155:        }
        -: 6156:    }
    #####: 6157:}
        -: 6158:
        -: 6159:
function _ZN9Tokenizer26simplifyFunctionParametersEv called 956 returned 100% blocks executed 33%
      956: 6160:void Tokenizer::simplifyFunctionParameters()
        -: 6161:{
     6517: 6162:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 85% (fallthrough)
branch  2 taken 15%
call    3 returned 100%
     5561: 6163:        if (tok->link() && Token::Match(tok, "{|[|(")) {
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 39% (fallthrough)
branch  7 taken 61%
     2146: 6164:            tok = tok->link();
call    0 returned 100%
        -: 6165:        }
        -: 6166:
        -: 6167:        // Find the function e.g. foo( x ) or foo( x, y )
     3715: 6168:        else if (Token::Match(tok, "%name% ( %name% [,)]") &&
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
      300: 6169:                 !(tok->strAt(-1) == ":" || tok->strAt(-1) == "," || tok->strAt(-1) == "::")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        -: 6170:            // We have found old style function, now we need to change it
        -: 6171:
        -: 6172:            // First step: Get list of argument names in parentheses
      150: 6173:            std::map<std::string, Token *> argumentNames;
call    0 returned 100%
call    1 never executed
      150: 6174:            bool bailOut = false;
      150: 6175:            Token * tokparam = nullptr;
        -: 6176:
        -: 6177:            //take count of the function name..
      150: 6178:            const std::string& funcName(tok->str());
call    0 returned 100%
        -: 6179:
        -: 6180:            //floating token used to check for parameters
      150: 6181:            Token *tok1 = tok;
        -: 6182:
      154: 6183:            while (nullptr != (tok1 = tok1->tokAt(2))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      152: 6184:                if (!Token::Match(tok1, "%name% [,)]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        1: 6185:                    bailOut = true;
        1: 6186:                    break;
        -: 6187:                }
        -: 6188:
        -: 6189:                //same parameters: take note of the parameter
      151: 6190:                if (argumentNames.find(tok1->str()) != argumentNames.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
    #####: 6191:                    tokparam = tok1;
      151: 6192:                else if (tok1->str() != funcName)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
      149: 6193:                    argumentNames[tok1->str()] = tok1;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 6194:                else {
        2: 6195:                    if (tok1->next()->str() == ")") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
        1: 6196:                        if (tok1->previous()->str() == ",") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 6197:                            tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6198:                            tok1->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6199:                        } else {
        1: 6200:                            tok1 = tok1->previous();
call    0 returned 100%
        1: 6201:                            tok1->deleteNext();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 6202:                            bailOut = true;
        1: 6203:                            break;
        -: 6204:                        }
        -: 6205:                    } else {
        1: 6206:                        tok1 = tok1->tokAt(-2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 6207:                        tok1->next()->deleteNext(2);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 6208:                    }
        -: 6209:                }
        -: 6210:
      150: 6211:                if (tok1->next()->str() == ")") {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
      148: 6212:                    tok1 = tok1->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 6213:                    //expect at least a type name after round brace..
      148: 6214:                    if (!tok1 || !tok1->isName())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
      147: 6215:                        bailOut = true;
      148: 6216:                    break;
        -: 6217:                }
        -: 6218:            }
        -: 6219:
        -: 6220:            //goto '('
      150: 6221:            tok = tok->next();
call    0 returned 100%
        -: 6222:
      299: 6223:            if (bailOut) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      149: 6224:                tok = tok->link();
call    0 returned 100%
      149: 6225:                continue;
        -: 6226:            }
        -: 6227:
        1: 6228:            tok1 = tok->link()->next();
call    0 returned 100%
call    1 returned 100%
        -: 6229:
        -: 6230:            // there should be the sequence '; {' after the round parentheses
       16: 6231:            for (const Token* tok2 = tok1; tok2; tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       16: 6232:                if (Token::simpleMatch(tok2, "; {"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 6233:                    break;
       16: 6234:                else if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        1: 6235:                    bailOut = true;
        1: 6236:                    break;
        -: 6237:                }
        -: 6238:            }
        -: 6239:
        2: 6240:            if (bailOut) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6241:                tok = tok->link();
call    0 returned 100%
        1: 6242:                continue;
        -: 6243:            }
        -: 6244:
        -: 6245:            // Last step: check out if the declarations between ')' and '{' match the parameters list
    #####: 6246:            std::map<std::string, Token *> argumentNames2;
call    0 never executed
call    1 returned 100%
branch  2 taken 0%
branch  3 taken 100%
call    4 never executed
        -: 6247:
    #####: 6248:            while (tok1 && tok1->str() != "{") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6249:                if (Token::Match(tok1, "(|)")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6250:                    bailOut = true;
    #####: 6251:                    break;
        -: 6252:                }
    #####: 6253:                if (tok1->str() == ";") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6254:                    if (tokparam) {
branch  0 never executed
branch  1 never executed
    #####: 6255:                        syntaxError(tokparam);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6256:                    }
    #####: 6257:                    Token *tok2 = tok1->previous();
call    0 never executed
    #####: 6258:                    while (tok2->str() == "]")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6259:                        tok2 = tok2->link()->previous();
call    0 never executed
call    1 never executed
        -: 6260:
        -: 6261:                    //it should be a name..
    #####: 6262:                    if (!tok2->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6263:                        bailOut = true;
    #####: 6264:                        break;
        -: 6265:                    }
        -: 6266:
    #####: 6267:                    if (argumentNames2.find(tok2->str()) != argumentNames2.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 6268:                        //same parameter names...
    #####: 6269:                        syntaxError(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6270:                    } else
    #####: 6271:                        argumentNames2[tok2->str()] = tok2;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6272:
    #####: 6273:                    if (argumentNames.find(tok2->str()) == argumentNames.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 6274:                        //non-matching parameter... bailout
    #####: 6275:                        bailOut = true;
    #####: 6276:                        break;
        -: 6277:                    }
        -: 6278:                }
    #####: 6279:                tok1 = tok1->next();
call    0 never executed
        -: 6280:            }
        -: 6281:
    #####: 6282:            if (bailOut || !tok1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6283:                tok = tok->link();
call    0 never executed
    #####: 6284:                continue;
        -: 6285:            }
        -: 6286:
        -: 6287:            //the two containers may not hold the same size...
        -: 6288:            //in that case, the missing parameters are defined as 'int'
    #####: 6289:            if (argumentNames.size() != argumentNames2.size()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6290:                //move back 'tok1' to the last ';'
    #####: 6291:                tok1 = tok1->previous();
call    0 never executed
    #####: 6292:                for (std::map<std::string, Token *>::iterator it = argumentNames.begin(); it != argumentNames.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 6293:                    if (argumentNames2.find(it->first) == argumentNames2.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 6294:                        //add the missing parameter argument declaration
    #####: 6295:                        tok1->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6296:                        tok1->insertToken(it->first);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6297:                        //register the change inside argumentNames2
    #####: 6298:                        argumentNames2[it->first] = tok1->next();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 6299:                        tok1->insertToken("int");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6300:                    }
        -: 6301:                }
        -: 6302:            }
        -: 6303:
    #####: 6304:            while (tok->str() != ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6305:                //initialize start and end tokens to be moved
    #####: 6306:                Token *declStart = argumentNames2[tok->next()->str()];
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6307:                Token *declEnd = declStart;
    #####: 6308:                while (declStart->previous()->str() != ";" && declStart->previous()->str() != ")")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6309:                    declStart = declStart->previous();
call    0 never executed
    #####: 6310:                while (declEnd->next()->str() != ";" && declEnd->next()->str() != "{")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6311:                    declEnd = declEnd->next();
call    0 never executed
        -: 6312:
        -: 6313:                //remove ';' after declaration
    #####: 6314:                declEnd->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6315:
        -: 6316:                //replace the parameter name in the parentheses with all the declaration
    #####: 6317:                Token::replace(tok->next(), declStart, declEnd);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6318:
        -: 6319:                //since there are changes to tokens, put tok where tok1 is
    #####: 6320:                tok = declEnd->next();
call    0 never executed
        -: 6321:            }
        -: 6322:            //goto forward and continue
    #####: 6323:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 6324:        }
        -: 6325:    }
      956: 6326:}
        -: 6327:
function _ZN9Tokenizer29simplifyPointerToStandardTypeEv called 956 returned 100% blocks executed 48%
      956: 6328:void Tokenizer::simplifyPointerToStandardType()
        -: 6329:{
      956: 6330:    if (!isC())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      934: 6331:        return;
        -: 6332:
      598: 6333:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
      576: 6334:        if (!Token::Match(tok, "& %name% [ 0 ] !!["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
      576: 6335:            continue;
        -: 6336:
    #####: 6337:        if (!Token::Match(tok->previous(), "[,(=]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6338:            continue;
        -: 6339:
        -: 6340:        // Remove '[ 0 ]' suffix
    #####: 6341:        Token::eraseTokens(tok->next(), tok->tokAt(5));
call    0 never executed
call    1 never executed
call    2 never executed
        -: 6342:        // Remove '&' prefix
    #####: 6343:        tok = tok->previous();
call    0 never executed
    #####: 6344:        if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 6345:            break;
    #####: 6346:        tok->deleteNext();
call    0 never executed
        -: 6347:    }
        -: 6348:}
        -: 6349:
function _ZN9Tokenizer24simplifyFunctionPointersEv called 956 returned 100% blocks executed 65%
      956: 6350:void Tokenizer::simplifyFunctionPointers()
        -: 6351:{
    26707: 6352:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
        -: 6353:        // #2873 - do not simplify function pointer usage here:
        -: 6354:        // (void)(xy(*p)(0));
    25763: 6355:        if (Token::simpleMatch(tok, ") (")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       12: 6356:            tok = tok->next()->link();
call    0 returned 100%
call    1 returned 100%
       12: 6357:            continue;
        -: 6358:        }
        -: 6359:
        -: 6360:        // check for function pointer cast
    51478: 6361:        if (Token::Match(tok, "( %type% %type%| *| *| ( * ) (") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    25739: 6362:            Token::Match(tok, "static_cast < %type% %type%| *| *| ( * ) (")) {
call    0 returned 100%
    #####: 6363:            Token *tok1 = tok;
        -: 6364:
    #####: 6365:            if (isCPP() && tok1->str() == "static_cast")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6366:                tok1 = tok1->next();
call    0 never executed
        -: 6367:
    #####: 6368:            tok1 = tok1->next();
call    0 never executed
        -: 6369:
    #####: 6370:            if (Token::Match(tok1->next(), "%type%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6371:                tok1 = tok1->next();
call    0 never executed
        -: 6372:
    #####: 6373:            while (tok1->next()->str() == "*")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6374:                tok1 = tok1->next();
call    0 never executed
        -: 6375:
        -: 6376:            // check that the cast ends
    #####: 6377:            if (!Token::Match(tok1->linkAt(4), ") )|>"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6378:                continue;
        -: 6379:
        -: 6380:            // ok simplify this function pointer cast to an ordinary pointer cast
    #####: 6381:            tok1->deleteNext();
call    0 never executed
    #####: 6382:            tok1->next()->deleteNext();
call    0 never executed
call    1 never executed
    #####: 6383:            Token::eraseTokens(tok1->next(), tok1->linkAt(2)->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 6384:            continue;
        -: 6385:        }
        -: 6386:
        -: 6387:        // check for start of statement
    25739: 6388:        else if (tok->previous() && !Token::Match(tok->previous(), "{|}|;|,|(|public:|protected:|private:"))
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 65% (fallthrough)
branch  6 taken 35%
branch  7 taken 62% (fallthrough)
branch  8 taken 38%
    16003: 6389:            continue;
        -: 6390:
     9736: 6391:        if (Token::Match(tok, "delete|else|return|throw|typedef"))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
      285: 6392:            continue;
        -: 6393:
     3222: 6394:        while (Token::Match(tok, "%type%|:: %type%|::"))
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
     3222: 6395:            tok = tok->next();
call    0 returned 100%
        -: 6396:
     9451: 6397:        Token *tok2 = (tok && tok->isName()) ? tok->next() : nullptr;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 65% (fallthrough)
branch  4 taken 35%
call    5 returned 100%
    10313: 6398:        while (Token::Match(tok2, "*|&"))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
      431: 6399:            tok2 = tok2->next();
call    0 returned 100%
     9451: 6400:        if (!tok2 || tok2->str() != "(")
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 65% (fallthrough)
branch  5 taken 35%
branch  6 taken 77% (fallthrough)
branch  7 taken 23%
     7282: 6401:            continue;
     5079: 6402:        while (Token::Match(tok2, "(|:: %type%"))
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
     1455: 6403:            tok2 = tok2->tokAt(2);
call    0 returned 100%
     2169: 6404:        if (!Token::Match(tok2, "(|:: * *| %name%"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     2155: 6405:            continue;
       14: 6406:        tok2 = tok2->tokAt(2);
call    0 returned 100%
       14: 6407:        if (tok2->str() == "*")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        1: 6408:            tok2 = tok2->next();
call    0 returned 100%
       14: 6409:        while (Token::Match(tok2, "%type%|:: %type%|::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6410:            tok2 = tok2->next();
call    0 never executed
        -: 6411:
       39: 6412:        if (!Token::Match(tok2, "%name% ) (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 79% (fallthrough)
branch  4 taken 21%
       36: 6413:            !Token::Match(tok2, "%name% [ ] ) (") &&
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       11: 6414:            !(Token::Match(tok2, "%name% (") && Token::simpleMatch(tok2->linkAt(1), ") ) (")))
call    0 returned 100%
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
       11: 6415:            continue;
        -: 6416:
        3: 6417:        while (tok->str() != "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3: 6418:            tok = tok->next();
call    0 returned 100%
        -: 6419:
        -: 6420:        // check that the declaration ends
        3: 6421:        if (!tok || !tok->link() || !tok->link()->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 6422:            syntaxError(nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6423:        }
        3: 6424:        Token *endTok = tok->link()->next()->link();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 6425:        if (Token::simpleMatch(endTok, ") throw ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6426:            endTok = endTok->linkAt(2);
call    0 never executed
        3: 6427:        if (!Token::Match(endTok, ") const|volatile| const|volatile| ;|,|)|=|[|{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6428:            continue;
        -: 6429:
    #####: 6430:        while (Token::Match(endTok->next(), "const|volatile"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6431:            endTok->deleteNext();
call    0 never executed
        -: 6432:
        -: 6433:        // ok simplify this function pointer to an ordinary pointer
        3: 6434:        Token::eraseTokens(tok->link(), endTok->next());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 6435:        tok->link()->deleteThis();
call    0 returned 100%
call    1 returned 100%
        3: 6436:        while (Token::Match(tok, "( %type% ::"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6437:            tok->deleteNext(2);
call    0 never executed
        3: 6438:        tok->deleteThis();
call    0 returned 100%
        -: 6439:    }
      956: 6440:}
        -: 6441:
        -: 6442:
function _ZN9Tokenizer22simplifyFunctionReturnEv called 0 returned 0% blocks executed 0%
    #####: 6443:bool Tokenizer::simplifyFunctionReturn()
        -: 6444:{
    #####: 6445:    std::map<std::string, const Token*> functions;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 6446:
    #####: 6447:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6448:        if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6449:            tok = tok->link();
call    0 never executed
        -: 6450:
    #####: 6451:        else if (Token::Match(tok, "%name% ( ) { return %bool%|%char%|%num%|%str% ; }") && tok->strAt(-1) != "::") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 6452:            const Token* const any = tok->tokAt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6453:            functions[tok->str()] = any;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6454:            tok = any;
        -: 6455:        }
        -: 6456:    }
        -: 6457:
    #####: 6458:    if (functions.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6459:        return false;
        -: 6460:
    #####: 6461:    bool ret = false;
    #####: 6462:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6463:        if (Token::Match(tok, "(|[|=|return|%op% %name% ( ) ;|]|)|%cop%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6464:            tok = tok->next();
call    0 never executed
    #####: 6465:            auto it = functions.find(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 6466:            if (it != functions.cend()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6467:                tok->str(it->second->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6468:                tok->deleteNext(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6469:                ret = true;
        -: 6470:            }
        -: 6471:        }
        -: 6472:    }
        -: 6473:
    #####: 6474:    return ret;
        -: 6475:}
        -: 6476:
function _ZN9Tokenizer15simplifyVarDeclEb called 2868 returned 100% blocks executed 100%
     2868: 6477:void Tokenizer::simplifyVarDecl(const bool only_k_r_fpar)
        -: 6478:{
     2868: 6479:    simplifyVarDecl(list.front(), nullptr, only_k_r_fpar);
call    0 returned 100%
call    1 returned 100%
     2868: 6480:}
        -: 6481:
function _ZN9Tokenizer15simplifyVarDeclEP5TokenPKS0_b called 2872 returned 100% blocks executed 85%
     2872: 6482:void Tokenizer::simplifyVarDecl(Token * tokBegin, const Token * const tokEnd, const bool only_k_r_fpar)
        -: 6483:{
     2872: 6484:    const bool isCPP11  = mSettings->standards.cpp >= Standards::CPP11;
        -: 6485:
        -: 6486:    // Split up variable declarations..
        -: 6487:    // "int a=4;" => "int a; a=4;"
     2872: 6488:    bool finishedwithkr = true;
    48837: 6489:    for (Token *tok = tokBegin; tok != tokEnd; tok = tok->next()) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
    45965: 6490:        if (Token::simpleMatch(tok, "= {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       32: 6491:            tok = tok->next()->link();
call    0 returned 100%
call    1 returned 100%
        -: 6492:        }
    45965: 6493:        if (!tok) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6494:            syntaxError(tokBegin);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 6495:        }
    45965: 6496:        if (only_k_r_fpar && finishedwithkr) {
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
     8902: 6497:            if (Token::Match(tok, "(|[|{")) {
call    0 returned 100%
branch  1 taken 42% (fallthrough)
branch  2 taken 58%
     2291: 6498:                tok = tok->link();
call    0 returned 100%
     4361: 6499:                if (tok->next() && Token::Match(tok, ") !!{"))
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
call    3 returned 100%
branch  4 taken 16% (fallthrough)
branch  5 taken 84%
branch  6 taken 10% (fallthrough)
branch  7 taken 90%
      221: 6500:                    tok = tok->next();
call    0 returned 100%
        -: 6501:                else
     2070: 6502:                    continue;
        -: 6503:            } else
     3195: 6504:                continue;
    40479: 6505:        } else if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
     5023: 6506:            if (isCPP()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    22190: 6507:                for (Token * tok2 = tok; tok2 && tok2 != tok->link(); tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 78% (fallthrough)
branch  4 taken 22%
branch  5 taken 78% (fallthrough)
branch  6 taken 22%
call    7 returned 100%
    17257: 6508:                    if (Token::Match(tok2, "[(,] [")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 6509:                        // lambda function at tok2->next()
        -: 6510:                        // find start of lambda body
        4: 6511:                        Token * lambdaBody = tok2;
       64: 6512:                        while (lambdaBody && lambdaBody != tok2->link() && lambdaBody->str() != "{")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 88% (fallthrough)
branch  8 taken 12%
branch  9 taken 88% (fallthrough)
branch 10 taken 12%
       30: 6513:                            lambdaBody = lambdaBody->next();
call    0 returned 100%
        4: 6514:                        if (lambdaBody && lambdaBody != tok2->link() && lambdaBody->link())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        4: 6515:                            simplifyVarDecl(lambdaBody, lambdaBody->link()->next(), only_k_r_fpar);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 6516:                    }
        -: 6517:                }
        -: 6518:            }
     5023: 6519:            tok = tok->link();
call    0 returned 100%
        -: 6520:        }
        -: 6521:
    40700: 6522:        if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6523:            syntaxError(nullptr); // #7043 invalid code
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    40700: 6524:        if (tok->previous() && !Token::Match(tok->previous(), "{|}|;|)|public:|protected:|private:"))
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 57% (fallthrough)
branch  6 taken 43%
branch  7 taken 54% (fallthrough)
branch  8 taken 46%
    22118: 6525:            continue;
    18582: 6526:        if (Token::simpleMatch(tok, "template <"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       21: 6527:            continue;
        -: 6528:
    18561: 6529:        Token *type0 = tok;
    18561: 6530:        if (!Token::Match(type0, "::|extern| %type%"))
call    0 returned 100%
branch  1 taken 51% (fallthrough)
branch  2 taken 49%
     9468: 6531:            continue;
     9093: 6532:        if (Token::Match(type0, "else|return|public:|protected:|private:"))
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
      580: 6533:            continue;
     8513: 6534:        if (isCPP11 && type0->str() == "using")
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        1: 6535:            continue;
     8512: 6536:        if (isCPP() && type0->str() == "namespace")
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
        4: 6537:            continue;
        -: 6538:
     8508: 6539:        bool isconst = false;
     8508: 6540:        bool isstatic = false;
     8508: 6541:        Token *tok2 = type0;
     8508: 6542:        int typelen = 1;
        -: 6543:
     8508: 6544:        if (Token::Match(tok2, "::|extern")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        6: 6545:            tok2 = tok2->next();
call    0 returned 100%
        6: 6546:            typelen++;
        -: 6547:        }
        -: 6548:
        -: 6549:        //check if variable is declared 'const' or 'static' or both
     9190: 6550:        while (tok2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     8849: 6551:            if (!Token::Match(tok2, "const|static") && Token::Match(tok2, "%type% const|static")) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        1: 6552:                tok2 = tok2->next();
call    0 returned 100%
        1: 6553:                ++typelen;
        -: 6554:            }
        -: 6555:
     8849: 6556:            if (tok2->str() == "const")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      177: 6557:                isconst = true;
        -: 6558:
     8672: 6559:            else if (tok2->str() == "static")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       34: 6560:                isstatic = true;
        -: 6561:
     8638: 6562:            else if (Token::Match(tok2, "%type% :: %type%")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
      130: 6563:                tok2 = tok2->next();
call    0 returned 100%
      130: 6564:                ++typelen;
        -: 6565:            }
        -: 6566:
        -: 6567:            else
     8508: 6568:                break;
        -: 6569:
      341: 6570:            if (tok2->strAt(1) == "*")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6571:                break;
        -: 6572:
      341: 6573:            if (Token::Match(tok2->next(), "& %name% ,"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6574:                break;
        -: 6575:
      341: 6576:            tok2 = tok2->next();
call    0 returned 100%
      341: 6577:            ++typelen;
        -: 6578:        }
        -: 6579:
        -: 6580:        // strange looking variable declaration => don't split up.
     8508: 6581:        if (Token::Match(tok2, "%type% *|&| %name% , %type% *|&| %name%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6582:            continue;
        -: 6583:
     8508: 6584:        if (Token::Match(tok2, "struct|union|class %type%")) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
      397: 6585:            tok2 = tok2->next();
call    0 returned 100%
      397: 6586:            ++typelen;
        -: 6587:        }
        -: 6588:
        -: 6589:        // check for qualification..
     8508: 6590:        if (Token::Match(tok2,  ":: %type%")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6591:            ++typelen;
    #####: 6592:            tok2 = tok2->next();
call    0 never executed
        -: 6593:        }
        -: 6594:
        -: 6595:        //skip combinations of templates and namespaces
     8582: 6596:        while (!isC() && (Token::Match(tok2, "%type% <") || Token::Match(tok2, "%type% ::"))) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
       37: 6597:            if (tok2->next()->str() == "<" && !TemplateSimplifier::templateParameters(tok2->next())) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 6598:                tok2 = nullptr;
    #####: 6599:                break;
        -: 6600:            }
       37: 6601:            typelen += 2;
       37: 6602:            tok2 = tok2->tokAt(2);
call    0 returned 100%
       37: 6603:            if (tok2 && tok2->previous()->str() == "::")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 6604:                continue;
       37: 6605:            int indentlevel = 0;
       37: 6606:            int parens = 0;
        -: 6607:
       98: 6608:            for (Token *tok3 = tok2; tok3; tok3 = tok3->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       98: 6609:                ++typelen;
        -: 6610:
       98: 6611:                if (!parens && tok3->str() == "<") {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        1: 6612:                    ++indentlevel;
       97: 6613:                } else if (!parens && tok3->str() == ">") {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 40% (fallthrough)
branch  5 taken 60%
branch  6 taken 39% (fallthrough)
branch  7 taken 61%
       38: 6614:                    if (indentlevel == 0) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       37: 6615:                        tok2 = tok3->next();
call    0 returned 100%
       37: 6616:                        break;
        -: 6617:                    }
        1: 6618:                    --indentlevel;
       59: 6619:                } else if (!parens && tok3->str() == ">>") {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 6620:                    if (indentlevel <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 6621:                        tok2 = tok3->next();
call    0 never executed
    #####: 6622:                        break;
        -: 6623:                    }
    #####: 6624:                    indentlevel -= 2;
       59: 6625:                } else if (tok3->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        2: 6626:                    ++parens;
       57: 6627:                } else if (tok3->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        2: 6628:                    if (!parens) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6629:                        tok2 = nullptr;
    #####: 6630:                        break;
        -: 6631:                    }
        2: 6632:                    --parens;
       55: 6633:                } else if (tok3->str() == ";") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 6634:                    break;
        -: 6635:                }
        -: 6636:            }
        -: 6637:
       37: 6638:            if (Token::Match(tok2,  ":: %type%")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 6639:                ++typelen;
    #####: 6640:                tok2 = tok2->next();
call    0 never executed
        -: 6641:            }
        -: 6642:        }
        -: 6643:
        -: 6644:        //pattern: "%type% *| ... *| const| %name% ,|="
    16961: 6645:        if (Token::Match(tok2, "%type%") ||
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
       60: 6646:            (tok2 && tok2->previous() && tok2->previous()->str() == ">")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
     8453: 6647:            Token *varName = tok2;
     8453: 6648:            if (!tok2->previous() || tok2->previous()->str() != ">")
call    0 returned 100%
branch  1 taken 81% (fallthrough)
branch  2 taken 19%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
     8417: 6649:                varName = varName->next();
call    0 returned 100%
        -: 6650:            else
       36: 6651:                --typelen;
        -: 6652:            //skip all the pointer part
     8453: 6653:            bool isPointerOrRef = false;
     8929: 6654:            while (Token::simpleMatch(varName, "*") || Token::Match(varName, "& %name% ,")) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
      238: 6655:                isPointerOrRef = true;
      238: 6656:                varName = varName->next();
call    0 returned 100%
        -: 6657:            }
        -: 6658:
       33: 6659:            while (Token::Match(varName, "%type% %type%")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       33: 6660:                if (varName->str() != "const") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       33: 6661:                    ++typelen;
        -: 6662:                }
       33: 6663:                varName = varName->next();
call    0 returned 100%
        -: 6664:            }
        -: 6665:            //non-VLA case
     8453: 6666:            if (Token::Match(varName, "%name% ,|=")) {
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
      486: 6667:                if (varName->str() != "operator") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
      485: 6668:                    tok2 = varName->next(); // The ',' or '=' token
call    0 returned 100%
        -: 6669:
      485: 6670:                    if (tok2->str() == "=" && (isstatic || (isconst && !isPointerOrRef))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 15% (fallthrough)
branch  7 taken 85%
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
branch 10 taken 16% (fallthrough)
branch 11 taken 84%
        -: 6671:                        //do not split const non-pointer variables..
      566: 6672:                        while (tok2 && tok2->str() != "," && tok2->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 76% (fallthrough)
branch  9 taken 24%
branch 10 taken 76% (fallthrough)
branch 11 taken 24%
      245: 6673:                            if (Token::Match(tok2, "{|(|["))
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
       38: 6674:                                tok2 = tok2->link();
call    0 returned 100%
      245: 6675:                            const Token *tok3 = tok2;
      245: 6676:                            if (!isC() && tok2->str() == "<" && TemplateSimplifier::templateParameters(tok2) > 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 1% (fallthrough)
branch 11 taken 99%
        3: 6677:                                tok2 = tok2->findClosingBracket();
call    0 returned 100%
        -: 6678:                            }
      245: 6679:                            if (!tok2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6680:                                syntaxError(tok3); // #6881 invalid code
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
      245: 6681:                            tok2 = tok2->next();
call    0 returned 100%
        -: 6682:                        }
       76: 6683:                        if (tok2 && tok2->str() == ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       76: 6684:                            tok2 = nullptr;
        -: 6685:                    }
        -: 6686:                } else
        1: 6687:                    tok2 = nullptr;
        -: 6688:            }
        -: 6689:
        -: 6690:            //VLA case
     7967: 6691:            else if (Token::Match(varName, "%name% [")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       94: 6692:                tok2 = varName->next();
call    0 returned 100%
        -: 6693:
      130: 6694:                while (Token::Match(tok2->link(), "] ,|=|["))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
       18: 6695:                    tok2 = tok2->link()->next();
call    0 returned 100%
call    1 returned 100%
       94: 6696:                if (!Token::Match(tok2, "=|,"))
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
       78: 6697:                    tok2 = nullptr;
       94: 6698:                if (tok2 && tok2->str() == "=") {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 17% (fallthrough)
branch  7 taken 83%
       84: 6699:                    while (tok2 && tok2->str() != "," && tok2->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 68% (fallthrough)
branch  9 taken 32%
branch 10 taken 68% (fallthrough)
branch 11 taken 32%
       34: 6700:                        if (Token::Match(tok2, "{|(|["))
call    0 returned 100%
branch  1 taken 47% (fallthrough)
branch  2 taken 53%
       16: 6701:                            tok2 = tok2->link();
call    0 returned 100%
       34: 6702:                        tok2 = tok2->next();
call    0 returned 100%
        -: 6703:                    }
       16: 6704:                    if (tok2 && tok2->str() == ";")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       16: 6705:                        tok2 = nullptr;
        -: 6706:                }
        -: 6707:            }
        -: 6708:
        -: 6709:            // brace initialization
     7873: 6710:            else if (Token::Match(varName, "%name% {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       15: 6711:                tok2 = varName->next();
call    0 returned 100%
       15: 6712:                tok2 = tok2->link();
call    0 returned 100%
       15: 6713:                if (tok2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       15: 6714:                    tok2 = tok2->next();
call    0 returned 100%
       15: 6715:                if (tok2 && tok2->str() != ",")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       15: 6716:                    tok2 = nullptr;
        -: 6717:            }
        -: 6718:
        -: 6719:            // parenthesis, functions can't be declared like:
        -: 6720:            // int f1(a,b), f2(c,d);
        -: 6721:            // so if there is a comma assume this is a variable declaration
     7858: 6722:            else if (Token::Match(varName, "%name% (") && Token::simpleMatch(varName->linkAt(1), ") ,")) {
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 6723:                tok2 = varName->linkAt(1)->next();
call    0 never executed
call    1 never executed
        -: 6724:            }
        -: 6725:
        -: 6726:            else
     7858: 6727:                tok2 = nullptr;
        -: 6728:        } else {
       55: 6729:            tok2 = nullptr;
        -: 6730:        }
        -: 6731:
    16607: 6732:        if (!tok2) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
     8099: 6733:            if (only_k_r_fpar)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        5: 6734:                finishedwithkr = false;
     8099: 6735:            continue;
        -: 6736:        }
        -: 6737:
      409: 6738:        if (tok2->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        8: 6739:            tok2->str(";");
call    0 returned 100%
        -: 6740:            //TODO: should we have to add also template '<>' links?
        8: 6741:            TokenList::insertTokens(tok2, type0, typelen);
call    0 returned 100%
        -: 6742:        }
        -: 6743:
        -: 6744:        else {
      401: 6745:            Token *eq = tok2;
        -: 6746:
     2843: 6747:            while (tok2) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     1620: 6748:                if (Token::Match(tok2, "{|(|["))
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
      144: 6749:                    tok2 = tok2->link();
call    0 returned 100%
        -: 6750:
     1476: 6751:                else if (!isC() && tok2->str() == "<" && tok2->previous()->isName() && !tok2->previous()->varId())
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 returned 100%
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0%
branch 15 taken 1% (fallthrough)
branch 16 taken 99%
        3: 6752:                    tok2 = tok2->findClosingBracket();
call    0 returned 100%
        -: 6753:
     1473: 6754:                else if (std::strchr(";,", tok2->str()[0])) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
        -: 6755:                    // "type var ="   =>   "type var; var ="
      399: 6756:                    const Token *varTok = type0->tokAt(typelen);
call    0 returned 100%
      517: 6757:                    while (Token::Match(varTok, "*|&|const|volatile"))
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
       59: 6758:                        varTok = varTok->next();
call    0 returned 100%
      399: 6759:                    if (!varTok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6760:                        syntaxError(tok2); // invalid code
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
      399: 6761:                    TokenList::insertTokens(eq, varTok, 2);
call    0 returned 100%
      399: 6762:                    eq->str(";");
call    0 returned 100%
        -: 6763:
        -: 6764:                    // "= x, "   =>   "= x; type "
      399: 6765:                    if (tok2->str() == ",") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 6766:                        tok2->str(";");
call    0 returned 100%
        2: 6767:                        TokenList::insertTokens(tok2, type0, typelen);
call    0 returned 100%
        -: 6768:                    }
      399: 6769:                    break;
        -: 6770:                }
     1221: 6771:                if (tok2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1221: 6772:                    tok2 = tok2->next();
call    0 returned 100%
        -: 6773:            }
        -: 6774:        }
      409: 6775:        finishedwithkr = (only_k_r_fpar && tok2 && tok2->strAt(1) == "{");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 6776:    }
     2872: 6777:}
        -: 6778:
function _ZN9Tokenizer19simplifyStaticConstEv called 956 returned 100% blocks executed 76%
      956: 6779:void Tokenizer::simplifyStaticConst()
        -: 6780:{
        -: 6781:    // This function will simplify the token list so that the qualifiers "extern", "static"
        -: 6782:    // and "const" appear in the same order as in the array below.
     1912: 6783:    const std::string qualifiers[] = {"extern", "static", "const"};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 75% (fallthrough)
branch 16 taken 25%
call   17 returned 100%
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
        -: 6784:
        -: 6785:    // Move 'const' before all other qualifiers and types and then
        -: 6786:    // move 'static' before all other qualifiers and types, ...
    30169: 6787:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29213: 6788:        bool continue2 = false;
   116852: 6789:        for (int i = 0; i < sizeof(qualifiers)/sizeof(qualifiers[0]); i++) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 6790:
        -: 6791:            // Keep searching for a qualifier
    87639: 6792:            if (!tok->next() || tok->next()->str() != qualifiers[i])
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 99% (fallthrough)
branch  9 taken 1%
    87452: 6793:                continue;
        -: 6794:
        -: 6795:            // Look backwards to find the beginning of the declaration
      187: 6796:            Token* leftTok = tok;
      187: 6797:            bool behindOther = false;
      207: 6798:            for (; leftTok; leftTok = leftTok->previous()) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
      764: 6799:                for (int j = 0; j <= i; j++) {
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
      569: 6800:                    if (leftTok->str() == qualifiers[j]) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1: 6801:                        behindOther = true;
        1: 6802:                        break;
        -: 6803:                    }
        -: 6804:                }
      196: 6805:                if (behindOther)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1: 6806:                    break;
      392: 6807:                if (!Token::Match(leftTok, "%type%|struct|::") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 95% (fallthrough)
branch  8 taken 5%
       24: 6808:                    (isCPP() && Token::Match(leftTok, "private:|protected:|public:|operator|template"))) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
      185: 6809:                    break;
        -: 6810:                }
        -: 6811:            }
        -: 6812:
        -: 6813:            // The token preceding the declaration should indicate the start of a declaration
      187: 6814:            if (leftTok == tok)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      182: 6815:                continue;
        -: 6816:
        5: 6817:            if (leftTok && !behindOther && !Token::Match(leftTok, ";|{|}|(|,|private:|protected:|public:")) {
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 6818:                continue2 = true;
    #####: 6819:                break;
        -: 6820:            }
        -: 6821:
        -: 6822:            // Move the qualifier to the left-most position in the declaration
        5: 6823:            tok->deleteNext();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 6824:            if (!leftTok) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1: 6825:                list.front()->insertToken(qualifiers[i], emptyString, false);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 6826:                list.front()->swapWithNext();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 6827:                tok = list.front();
call    0 returned 100%
        4: 6828:            } else if (leftTok->next()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4: 6829:                leftTok->next()->insertToken(qualifiers[i], emptyString, true);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4: 6830:                tok = leftTok->next();
call    0 returned 100%
        -: 6831:            } else {
    #####: 6832:                leftTok->insertToken(qualifiers[i]);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6833:                tok = leftTok;
        -: 6834:            }
        -: 6835:        }
    29213: 6836:        if (continue2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6837:            continue;
        -: 6838:    }
      956: 6839:}
        -: 6840:
function _ZN9Tokenizer24simplifyIfAndWhileAssignEv called 0 returned 0% blocks executed 0%
    #####: 6841:void Tokenizer::simplifyIfAndWhileAssign()
        -: 6842:{
    #####: 6843:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6844:        if (!Token::Match(tok->next(), "if|while ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6845:            continue;
        -: 6846:
    #####: 6847:        const Token* tokAt3 = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6848:        if (!Token::Match(tokAt3, "!| (| %name% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6849:            !Token::Match(tokAt3, "!| (| %name% . %name% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6850:            !Token::Match(tokAt3, "0 == (| %name% =") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6851:            !Token::Match(tokAt3, "0 == (| %name% . %name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6852:            continue;
        -: 6853:
        -: 6854:        // simplifying a "while(cond) { }" condition ?
    #####: 6855:        const bool iswhile(tok->next()->str() == "while");
call    0 never executed
call    1 never executed
call    2 never executed
        -: 6856:
        -: 6857:        // simplifying a "do { } while(cond);" condition ?
    #####: 6858:        const bool isDoWhile = iswhile && Token::simpleMatch(tok, "}") && Token::simpleMatch(tok->link()->previous(), "do");
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 6859:        Token* openBraceTok = tok->link();
call    0 never executed
        -: 6860:
        -: 6861:        // delete the "if|while"
    #####: 6862:        tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6863:
        -: 6864:        // Remember if there is a "!" or not. And delete it if there are.
    #####: 6865:        const bool isNot(Token::Match(tok->tokAt(2), "!|0"));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6866:        if (isNot)
branch  0 never executed
branch  1 never executed
    #####: 6867:            tok->next()->deleteNext((tok->strAt(2) == "0") ? 2 : 1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 6868:
        -: 6869:        // Delete parentheses.. and remember how many there are with
        -: 6870:        // their links.
    #####: 6871:        std::stack<Token *> braces;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 6872:        while (tok->next()->str() == "(") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6873:            braces.push(tok->next()->link());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6874:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6875:        }
        -: 6876:
        -: 6877:        // Skip the "%name% = ..."
        -: 6878:        Token *tok2;
    #####: 6879:        for (tok2 = tok->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 6880:            if (tok2->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6881:                tok2 = tok2->link();
call    0 never executed
    #####: 6882:            else if (tok2->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6883:                break;
        -: 6884:        }
        -: 6885:
        -: 6886:        // Insert "; if|while ( .."
    #####: 6887:        tok2 = tok2->previous();
call    0 never executed
    #####: 6888:        if (tok->strAt(2) == ".") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6889:            tok2->insertToken(tok->strAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6890:            tok2->next()->varId(tok->tokAt(3)->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 6891:            tok2->insertToken(".");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6892:        }
    #####: 6893:        tok2->insertToken(tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6894:        tok2->next()->varId(tok->next()->varId());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 6895:
    #####: 6896:        while (! braces.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6897:            tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6898:            Token::createMutualLinks(tok2->next(), braces.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 6899:            braces.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6900:        }
        -: 6901:
    #####: 6902:        if (isNot)
branch  0 never executed
branch  1 never executed
    #####: 6903:            tok2->next()->insertToken("!");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 6904:        tok2->insertToken(iswhile ? "while" : "if");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 6905:        if (isDoWhile) {
branch  0 never executed
branch  1 never executed
    #####: 6906:            tok2->insertToken("}");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 6907:            Token::createMutualLinks(openBraceTok, tok2->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6908:        }
        -: 6909:
    #####: 6910:        tok2->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 6911:
        -: 6912:        // delete the extra "}"
    #####: 6913:        if (isDoWhile)
branch  0 never executed
branch  1 never executed
    #####: 6914:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6915:
        -: 6916:        // If it's a while loop, insert the assignment in the loop
    #####: 6917:        if (iswhile && !isDoWhile) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6918:            int indentlevel = 0;
    #####: 6919:            Token *tok3 = tok2;
        -: 6920:
    #####: 6921:            for (; tok3; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 6922:                if (tok3->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6923:                    ++indentlevel;
    #####: 6924:                else if (tok3->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6925:                    if (indentlevel <= 1)
branch  0 never executed
branch  1 never executed
    #####: 6926:                        break;
    #####: 6927:                    --indentlevel;
        -: 6928:                }
        -: 6929:            }
        -: 6930:
    #####: 6931:            if (tok3 && indentlevel == 1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6932:                tok3 = tok3->previous();
call    0 never executed
    #####: 6933:                std::stack<Token *> braces2;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -: 6934:
    #####: 6935:                for (tok2 = tok2->next(); tok2 && tok2 != tok; tok2 = tok2->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 6936:                    tok3->insertToken(tok2->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6937:                    Token *newTok = tok3->next();
call    0 never executed
        -: 6938:
    #####: 6939:                    newTok->varId(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6940:                    newTok->fileIndex(tok2->fileIndex());
call    0 never executed
call    1 never executed
    #####: 6941:                    newTok->linenr(tok2->linenr());
call    0 never executed
call    1 never executed
        -: 6942:
        -: 6943:                    // link() new tokens manually
    #####: 6944:                    if (tok2->link()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6945:                        if (Token::Match(newTok, "}|)|]|>")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 6946:                            braces2.push(newTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6947:                        } else {
    #####: 6948:                            Token::createMutualLinks(newTok, braces2.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6949:                            braces2.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6950:                        }
        -: 6951:                    }
        -: 6952:                }
        -: 6953:            }
        -: 6954:        }
        -: 6955:    }
    #####: 6956:}
        -: 6957:
function _ZN9Tokenizer30simplifyVariableMultipleAssignEv called 956 returned 100% blocks executed 55%
      956: 6958:void Tokenizer::simplifyVariableMultipleAssign()
        -: 6959:{
    30099: 6960:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29143: 6961:        if (Token::Match(tok, "%name% = %name% = %num%|%name% ;")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 6962:            // skip intermediate assignments
        2: 6963:            Token *tok2 = tok->previous();
call    0 returned 100%
        4: 6964:            while (tok2 &&
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        4: 6965:                   tok2->str() == "=" &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        1: 6966:                   Token::Match(tok2->previous(), "%name%")) {
call    0 returned 100%
call    1 returned 100%
        1: 6967:                tok2 = tok2->tokAt(-2);
call    0 returned 100%
        -: 6968:            }
        -: 6969:
        2: 6970:            if (!tok2 || tok2->str() != ";") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        2: 6971:                continue;
        -: 6972:            }
        -: 6973:
    #####: 6974:            Token *stopAt = tok->tokAt(2);
call    0 never executed
    #####: 6975:            const Token *valueTok = stopAt->tokAt(2);
call    0 never executed
    #####: 6976:            const std::string& value(valueTok->str());
call    0 never executed
    #####: 6977:            tok2 = tok2->next();
call    0 never executed
        -: 6978:
    #####: 6979:            while (tok2 != stopAt) {
branch  0 never executed
branch  1 never executed
    #####: 6980:                tok2->next()->insertToken(";");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 6981:                tok2->next()->insertToken(value);
call    0 never executed
call    1 never executed
    #####: 6982:                tok2 = tok2->tokAt(4);
call    0 never executed
        -: 6983:            }
        -: 6984:        }
        -: 6985:    }
      956: 6986:}
        -: 6987:
        -: 6988:// Binary operators simplification map
       19: 6989:static const std::map<std::string, std::string> cAlternativeTokens = {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
call   28 returned 100%
branch 29 taken 100% (fallthrough)
branch 30 taken 0% (throw)
call   31 returned 100%
branch 32 taken 90% (fallthrough)
branch 33 taken 10%
call   34 returned 100%
call   35 never executed
branch 36 never executed
branch 37 never executed
        2: 6990:    std::make_pair("and", "&&")
call    0 returned 100%
call    1 never executed
        2: 6991:    , std::make_pair("and_eq", "&=")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6992:    , std::make_pair("bitand", "&")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6993:    , std::make_pair("bitor", "|")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6994:    , std::make_pair("not_eq", "!=")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6995:    , std::make_pair("or", "||")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6996:    , std::make_pair("or_eq", "|=")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6997:    , std::make_pair("xor", "^")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 6998:    , std::make_pair("xor_eq", "^=")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9: 6999:};
call    0 returned 100%
call    1 never executed
        -: 7000:
        -: 7001:// Simplify the C alternative tokens:
        -: 7002://  and      =>     &&
        -: 7003://  and_eq   =>     &=
        -: 7004://  bitand   =>     &
        -: 7005://  bitor    =>     |
        -: 7006://  compl    =>     ~
        -: 7007://  not      =>     !
        -: 7008://  not_eq   =>     !=
        -: 7009://  or       =>     ||
        -: 7010://  or_eq    =>     |=
        -: 7011://  xor      =>     ^
        -: 7012://  xor_eq   =>     ^=
function _ZN9Tokenizer26simplifyCAlternativeTokensEv called 956 returned 100% blocks executed 55%
      956: 7013:bool Tokenizer::simplifyCAlternativeTokens()
        -: 7014:{
        -: 7015:    /* executable scope level */
      956: 7016:    int executableScopeLevel = 0;
        -: 7017:
      956: 7018:    bool ret = false;
    29003: 7019:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29731: 7020:        if (tok->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     1684: 7021:            if (executableScopeLevel > 0 || Token::simpleMatch(tok->previous(), ") {"))
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 84% (fallthrough)
branch  7 taken 16%
branch  8 taken 89% (fallthrough)
branch  9 taken 11%
     1500: 7022:                ++executableScopeLevel;
    18527: 7023:            continue;
        -: 7024:        }
        -: 7025:
    28047: 7026:        if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     1684: 7027:            if (executableScopeLevel > 0)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     1500: 7028:                --executableScopeLevel;
     1684: 7029:            continue;
        -: 7030:        }
        -: 7031:
    24679: 7032:        if (!tok->isName())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 55% (fallthrough)
branch  4 taken 45%
    13475: 7033:            continue;
        -: 7034:
    22408: 7035:        const std::map<std::string, std::string>::const_iterator cOpIt = cAlternativeTokens.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
    11204: 7036:        if (cOpIt != cAlternativeTokens.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 7037:            if (!Token::Match(tok->previous(), "%name%|%num%|%char%|)|]|> %name% %name%|%num%|%char%|%op%|("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7038:                continue;
    #####: 7039:            if (Token::Match(tok->next(), "%assign%|%or%|%oror%|&&|*|/|%|^"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7040:                continue;
    #####: 7041:            tok->str(cOpIt->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7042:            ret = true;
    11204: 7043:        } else if (Token::Match(tok, "not|compl")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -: 7044:            // Don't simplify 'not p;' (in case 'not' is a type)
    #####: 7045:            if (!Token::Match(tok->next(), "%name%|(") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7046:                Token::Match(tok->previous(), "[;{}]") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7047:                (executableScopeLevel == 0U && tok->strAt(-1) == "("))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7048:                continue;
    #####: 7049:            tok->str((tok->str() == "not") ? "!" : "~");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 7050:            ret = true;
call    0 returned 100%
branch  1 taken 100%
branch  2 taken 0%
        -: 7051:        }
        -: 7052:    }
      956: 7053:    return ret;
        -: 7054:}
        -: 7055:
        -: 7056:// int i(0); => int i; i = 0;
        -: 7057:// int i(0), j; => int i; i = 0; int j;
function _ZN9Tokenizer15simplifyInitVarEv called 2868 returned 100% blocks executed 47%
     2868: 7058:void Tokenizer::simplifyInitVar()
        -: 7059:{
     2868: 7060:    if (isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       66: 7061:        return;
        -: 7062:
    87149: 7063:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    84347: 7064:        if (!tok->isName() || (tok->previous() && !Token::Match(tok->previous(), "[;{}]")))
call    0 returned 100%
branch  1 taken 39% (fallthrough)
branch  2 taken 61%
call    3 returned 100%
branch  4 taken 92% (fallthrough)
branch  5 taken 8%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 66% (fallthrough)
branch  9 taken 34%
branch 10 taken 85% (fallthrough)
branch 11 taken 15%
    71380: 7065:            continue;
        -: 7066:
    12967: 7067:        if (tok->str() == "return")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
      702: 7068:            continue;
        -: 7069:
    12265: 7070:        if (Token::Match(tok, "class|struct|union| %type% *| %name% ( &| %any% ) ;")) {
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
      431: 7071:            tok = initVar(tok);
call    0 returned 100%
    11834: 7072:        } else if (Token::Match(tok, "%type% *| %name% ( %type% (")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 7073:            const Token* tok2 = tok->tokAt(2);
call    0 never executed
    #####: 7074:            if (!tok2->link())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7075:                tok2 = tok2->next();
call    0 never executed
    #####: 7076:            if (!tok2->link() || (tok2->link()->strAt(1) == ";" && !Token::simpleMatch(tok2->linkAt(2), ") (")))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 7077:                tok = initVar(tok);
call    0 never executed
    11834: 7078:        } else if (Token::Match(tok, "class|struct|union| %type% *| %name% ( &| %any% ) ,")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 7079:            Token *tok1 = tok->tokAt(5);
call    0 never executed
    #####: 7080:            while (tok1->str() != ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7081:                tok1 = tok1->next();
call    0 never executed
    #####: 7082:            tok1->str(";");
call    0 never executed
        -: 7083:
    #####: 7084:            const int numTokens = (Token::Match(tok, "class|struct|union")) ? 2U : 1U;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7085:            TokenList::insertTokens(tok1, tok, numTokens);
call    0 never executed
    #####: 7086:            tok = initVar(tok);
call    0 never executed
        -: 7087:        }
        -: 7088:    }
        -: 7089:}
        -: 7090:
function _ZN9Tokenizer7initVarEP5Token called 431 returned 100% blocks executed 74%
      431: 7091:Token * Tokenizer::initVar(Token * tok)
        -: 7092:{
        -: 7093:    // call constructor of class => no simplification
      431: 7094:    if (Token::Match(tok, "class|struct|union")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 7095:        if (tok->strAt(2) != "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7096:            return tok;
        -: 7097:
    #####: 7098:        tok = tok->next();
call    0 never executed
      431: 7099:    } else if (!tok->isStandardType() && tok->next()->str() != "*")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 7100:        return tok;
        -: 7101:
        -: 7102:    // goto variable name..
      431: 7103:    tok = tok->next();
call    0 returned 100%
      431: 7104:    if (tok->str() == "*")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 7105:        tok = tok->next();
call    0 returned 100%
        -: 7106:
        -: 7107:    // sizeof is not a variable name..
      431: 7108:    if (tok->str() == "sizeof")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 7109:        return tok;
        -: 7110:
        -: 7111:    // check initializer..
      431: 7112:    if (tok->tokAt(2)->isStandardType() || tok->strAt(2) == "void")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
      420: 7113:        return tok;
       11: 7114:    else if (!tok->tokAt(2)->isNumber() && !Token::Match(tok->tokAt(2), "%type% (") && tok->strAt(2) != "&" && tok->tokAt(2)->varId() == 0)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 82% (fallthrough)
branch  3 taken 18%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
call   12 returned 100%
call   13 returned 100%
branch 14 taken 89% (fallthrough)
branch 15 taken 11%
branch 16 taken 73% (fallthrough)
branch 17 taken 27%
        8: 7115:        return tok;
        -: 7116:
        -: 7117:    // insert '; var ='
        3: 7118:    tok->insertToken(";");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        3: 7119:    tok->next()->insertToken(tok->str());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 7120:    tok->tokAt(2)->varId(tok->varId());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        3: 7121:    tok = tok->tokAt(2);
call    0 returned 100%
        3: 7122:    tok->insertToken("=");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -: 7123:
        -: 7124:    // goto '('..
        3: 7125:    tok = tok->tokAt(2);
call    0 returned 100%
        -: 7126:
        -: 7127:    // delete ')'
        3: 7128:    tok->link()->deleteThis();
call    0 returned 100%
call    1 returned 100%
        -: 7129:
        -: 7130:    // delete this
        3: 7131:    tok->deleteThis();
call    0 returned 100%
        -: 7132:
        3: 7133:    return tok;
        -: 7134:}
        -: 7135:
        -: 7136:
function _ZN9Tokenizer22simplifyKnownVariablesEv called 0 returned 0% blocks executed 0%
    #####: 7137:bool Tokenizer::simplifyKnownVariables()
        -: 7138:{
        -: 7139:    // return value for function. Set to true if any simplifications are made
    #####: 7140:    bool ret = false;
        -: 7141:
        -: 7142:    // constants..
        -: 7143:    {
    #####: 7144:        std::unordered_map<int, std::string> constantValues;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7145:        std::map<int, Token*> constantVars;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7146:        std::unordered_map<int, std::list<Token*>> constantValueUsages;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7147:        bool goback = false;
    #####: 7148:        for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 7149:            if (goback) {
branch  0 never executed
branch  1 never executed
    #####: 7150:                tok = tok->previous();
call    0 never executed
    #####: 7151:                goback = false;
        -: 7152:            }
        -: 7153:            // Reference to variable
    #####: 7154:            if (Token::Match(tok, "%type%|* & %name% = %name% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7155:                Token *start = tok->previous();
call    0 never executed
    #####: 7156:                while (Token::Match(start,"%type%|*|&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7157:                    start = start->previous();
call    0 never executed
    #####: 7158:                if (!Token::Match(start,"[;{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7159:                    continue;
    #####: 7160:                const Token *reftok = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7161:                const Token *vartok = reftok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7162:                int level = 0;
    #####: 7163:                for (Token *tok2 = tok->tokAt(6); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 7164:                    if (tok2->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7165:                        ++level;
    #####: 7166:                    } else if (tok2->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7167:                        if (level <= 0)
branch  0 never executed
branch  1 never executed
    #####: 7168:                            break;
    #####: 7169:                        --level;
    #####: 7170:                    } else if (tok2->varId() == reftok->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7171:                        tok2->str(vartok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7172:                        tok2->varId(vartok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 7173:                    }
        -: 7174:                }
    #####: 7175:                Token::eraseTokens(start, tok->tokAt(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7176:                tok = start;
        -: 7177:            }
        -: 7178:
    #####: 7179:            if (tok->isName() && (Token::Match(tok, "static| const| static| %type% const| %name% = %any% ;") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 7180:                                  Token::Match(tok, "static| const| static| %type% const| %name% ( %any% ) ;"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7181:                bool isconst = false;
    #####: 7182:                for (const Token *tok2 = tok; (tok2->str() != "=") && (tok2->str() != "("); tok2 = tok2->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 7183:                    if (tok2->str() == "const") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7184:                        isconst = true;
    #####: 7185:                        break;
        -: 7186:                    }
        -: 7187:                }
    #####: 7188:                if (!isconst)
branch  0 never executed
branch  1 never executed
    #####: 7189:                    continue;
        -: 7190:
    #####: 7191:                Token *tok1 = tok;
        -: 7192:
        -: 7193:                // start of statement
    #####: 7194:                if (tok != list.front() && !Token::Match(tok->previous(),";|{|}|private:|protected:|public:"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 7195:                    continue;
        -: 7196:                // skip "const" and "static"
    #####: 7197:                while (Token::Match(tok, "const|static"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7198:                    tok = tok->next();
call    0 never executed
        -: 7199:                // pod type
    #####: 7200:                if (!tok->isStandardType())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7201:                    continue;
        -: 7202:
    #####: 7203:                Token * const vartok = (tok->next() && tok->next()->str() == "const") ? tok->tokAt(2) : tok->next();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 7204:                const Token * const valuetok = vartok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7205:                if (Token::Match(valuetok, "%bool%|%char%|%num%|%str% )| ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 7206:                    // record a constant value for this variable
    #####: 7207:                    constantValues[vartok->varId()] = valuetok->str();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7208:                    constantVars[vartok->varId()] = tok1;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 7209:                }
    #####: 7210:            } else if (tok->varId()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7211:                // find the entry for the known variable, if any.  Exclude the location where the variable is assigned with next == "="
    #####: 7212:                if (constantValues.find(tok->varId()) != constantValues.end() && tok->next()->str() != "=") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 7213:                    constantValueUsages[tok->varId()].push_back(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 7214:                }
        -: 7215:            }
        -: 7216:        }
        -: 7217:
    #####: 7218:        for (auto constantVar = constantVars.rbegin(); constantVar != constantVars.rend(); constantVar++) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####: 7219:            bool referenceFound = false;
    #####: 7220:            std::list<Token*> usageList = constantValueUsages[constantVar->first];
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 7221:            for (Token* usage : usageList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 7222:                // check if any usages of each known variable are a reference
    #####: 7223:                if (Token::Match(usage->tokAt(-2), "(|[|,|{|return|%op% & %varid%", constantVar->first)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 7224:                    referenceFound = true;
    #####: 7225:                    break;
        -: 7226:                }
        -: 7227:            }
        -: 7228:
    #####: 7229:            if (!referenceFound) {
branch  0 never executed
branch  1 never executed
        -: 7230:                // replace all usages of non-referenced known variables with their value
    #####: 7231:                for (Token* usage : usageList) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 7232:                    usage->str(constantValues[constantVar->first]);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 7233:                }
        -: 7234:
    #####: 7235:                Token* startTok = constantVar->second;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7236:                // remove variable assignment statement
    #####: 7237:                while (startTok->next()->str() != ";")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7238:                    startTok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7239:                startTok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7240:
        -: 7241:                // #8579 if we can we want another token to delete startTok. if we can't it doesn't matter
    #####: 7242:                if (startTok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7243:                    startTok->previous()->deleteNext();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7244:                } else if (startTok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7245:                    startTok->next()->deletePrevious();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 7246:                } else {
    #####: 7247:                    startTok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7248:                }
    #####: 7249:                startTok = nullptr;
        -: 7250:
    #####: 7251:                constantVar->second = nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7252:                ret = true;
        -: 7253:            }
        -: 7254:        }
        -: 7255:    }
        -: 7256:
        -: 7257:    // variable id for local, float/double, array variables
    #####: 7258:    std::set<int> localvars;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7259:    std::set<int> floatvars;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7260:    std::set<int> arrays;
call    0 never executed
call    1 never executed
call    2 never executed
        -: 7261:
        -: 7262:    // auto variables..
    #####: 7263:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 7264:        // Search for a block of code
    #####: 7265:        Token * const start = const_cast<Token *>(startOfExecutableScope(tok));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7266:        if (!start)
branch  0 never executed
branch  1 never executed
    #####: 7267:            continue;
        -: 7268:
    #####: 7269:        for (const Token *tok2 = start->previous(); tok2 && !Token::Match(tok2, "[;{}]"); tok2 = tok2->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 7270:            if (tok2->varId() != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7271:                localvars.insert(tok2->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 7272:        }
        -: 7273:
    #####: 7274:        tok = start;
        -: 7275:        // parse the block of code..
    #####: 7276:        int indentlevel = 0;
    #####: 7277:        Token *tok2 = tok;
    #####: 7278:        for (; tok2; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 7279:            if (Token::Match(tok2, "[;{}] %type% %name%|*")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7280:                bool isfloat = false;
    #####: 7281:                bool ispointer = false;
    #####: 7282:                const Token *vartok = tok2->next();
call    0 never executed
    #####: 7283:                while (Token::Match(vartok, "%name%|* %name%|*")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7284:                    if (Token::Match(vartok, "float|double"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7285:                        isfloat = true;
    #####: 7286:                    if (vartok->str() == "*")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7287:                        ispointer = true;
    #####: 7288:                    vartok = vartok->next();
call    0 never executed
        -: 7289:                }
    #####: 7290:                if (Token::Match(vartok, "%var% ;|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7291:                    localvars.insert(vartok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 7292:                if (isfloat && !ispointer && Token::Match(vartok, "%var% ;"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 7293:                    floatvars.insert(vartok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 7294:                if (Token::Match(vartok, "%var% ["))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7295:                    arrays.insert(vartok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 7296:            }
        -: 7297:
    #####: 7298:            if (tok2->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7299:                ++indentlevel;
        -: 7300:
    #####: 7301:            else if (tok2->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7302:                --indentlevel;
    #####: 7303:                if (indentlevel <= 0)
branch  0 never executed
branch  1 never executed
    #####: 7304:                    break;
        -: 7305:            }
        -: 7306:
    #####: 7307:            else if (Token::simpleMatch(tok2, "for ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7308:                tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
        -: 7309:
    #####: 7310:            else if (tok2->previous()->str() != "*" && !Token::Match(tok2->tokAt(-2), "* --|++") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 7311:                     (Token::Match(tok2, "%name% = %bool%|%char%|%num%|%str%|%name% ;") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7312:                      Token::Match(tok2, "%name% [ %num%| ] = %str% ;") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7313:                      Token::Match(tok2, "%name% = & %name% ;") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7314:                      (Token::Match(tok2, "%name% = & %name% [ 0 ] ;") && arrays.find(tok2->tokAt(3)->varId()) != arrays.end()))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####: 7315:                const int varid = tok2->varId();
call    0 never executed
    #####: 7316:                if (varid == 0)
branch  0 never executed
branch  1 never executed
    #####: 7317:                    continue;
        -: 7318:
    #####: 7319:                if (Token::Match(tok2->previous(), "[;{}]") && localvars.find(varid) == localvars.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####: 7320:                    continue;
        -: 7321:
        -: 7322:                // initialization of static variable => the value is not *known*
        -: 7323:                {
    #####: 7324:                    bool isstatic = false;
    #####: 7325:                    const Token *decl = tok2->previous();
call    0 never executed
    #####: 7326:                    while (decl && (decl->isName() || decl->str() == "*")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 7327:                        if (decl->str() == "static") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7328:                            isstatic = true;
    #####: 7329:                            break;
        -: 7330:                        }
    #####: 7331:                        decl = decl->previous();
call    0 never executed
        -: 7332:                    }
    #####: 7333:                    if (isstatic)
branch  0 never executed
branch  1 never executed
    #####: 7334:                        continue;
        -: 7335:                }
        -: 7336:
        -: 7337:                // skip loop variable
    #####: 7338:                if (Token::Match(tok2->tokAt(-2), "(|:: %type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7339:                    const Token *tok3 = tok2->previous();
call    0 never executed
    #####: 7340:                    do {
    #####: 7341:                        tok3 = tok3->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7342:                    } while (Token::Match(tok3->previous(), ":: %type%"));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7343:                    if (Token::Match(tok3->tokAt(-2), "for ( %type%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7344:                        continue;
        -: 7345:                }
        -: 7346:
        -: 7347:                // struct name..
    #####: 7348:                if (Token::Match(tok2, "%varid% = &| %varid%", tok2->varId()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7349:                    continue;
        -: 7350:
    #####: 7351:                const std::string structname = Token::Match(tok2->tokAt(-3), "[;{}] %name% .") ?
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7352:                                               std::string(tok2->strAt(-2) + " .") :
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7353:                                               std::string();
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
        -: 7354:
    #####: 7355:                const Token * const valueToken = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7356:
    #####: 7357:                std::string value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 7358:                nonneg int valueVarId = 0;
        -: 7359:
    #####: 7360:                Token *tok3 = nullptr;
    #####: 7361:                bool valueIsPointer = false;
        -: 7362:
        -: 7363:                // there could be a hang here if tok2 is moved back by the function calls below for some reason
    #####: 7364:                if (Settings::terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7365:                    return false;
        -: 7366:
    #####: 7367:                if (!simplifyKnownVariablesGetData(varid, &tok2, &tok3, value, valueVarId, valueIsPointer, floatvars.find(tok2->varId()) != floatvars.end()))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 7368:                    continue;
        -: 7369:
    #####: 7370:                if (valueVarId > 0 && arrays.find(valueVarId) != arrays.end())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####: 7371:                    continue;
        -: 7372:
    #####: 7373:                ret |= simplifyKnownVariablesSimplify(&tok2, tok3, varid, structname, value, valueVarId, valueIsPointer, valueToken, indentlevel);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 7374:            }
        -: 7375:
    #####: 7376:            else if (Token::Match(tok2, "strcpy|sprintf ( %name% , %str% ) ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7377:                const int varid(tok2->tokAt(2)->varId());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 7378:                if (varid == 0)
branch  0 never executed
branch  1 never executed
    #####: 7379:                    continue;
        -: 7380:
    #####: 7381:                const Token * const valueToken = tok2->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7382:                std::string value(valueToken->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 7383:                if (tok2->str() == "sprintf") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7384:                    std::string::size_type n = 0;
    #####: 7385:                    while ((n = value.find("%%", n)) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7386:                        // Replace "%%" with "%" - erase the first '%' and continue past the second '%'
    #####: 7387:                        value.erase(n, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7388:                        ++n;
        -: 7389:                    }
        -: 7390:                }
    #####: 7391:                const int valueVarId(0);
    #####: 7392:                const bool valueIsPointer(false);
    #####: 7393:                Token *tok3 = tok2->tokAt(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7394:                ret |= simplifyKnownVariablesSimplify(&tok2, tok3, varid, emptyString, value, valueVarId, valueIsPointer, valueToken, indentlevel);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7395:
        -: 7396:                // there could be a hang here if tok2 was moved back by the function call above for some reason
    #####: 7397:                if (Settings::terminated())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7398:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7399:            }
        -: 7400:        }
        -: 7401:
    #####: 7402:        if (tok2)
branch  0 never executed
branch  1 never executed
    #####: 7403:            tok = tok2->previous();
call    0 never executed
        -: 7404:    }
        -: 7405:
    #####: 7406:    return ret;
        -: 7407:}
        -: 7408:
function _ZN9Tokenizer29simplifyKnownVariablesGetDataEiPP5TokenS2_RNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiRbb called 0 returned 0% blocks executed 0%
    #####: 7409:bool Tokenizer::simplifyKnownVariablesGetData(nonneg int varid, Token **_tok2, Token **_tok3, std::string &value, nonneg int &valueVarId, bool &valueIsPointer, bool floatvar)
        -: 7410:{
    #####: 7411:    Token *tok2 = *_tok2;
    #####: 7412:    Token *tok3 = nullptr;
        -: 7413:
    #####: 7414:    if (Token::simpleMatch(tok2->tokAt(-2), "for (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 7415:        // only specific for loops is handled
    #####: 7416:        if (!Token::Match(tok2, "%varid% = %num% ; %varid% <|<= %num% ; ++| %varid% ++| ) {", varid))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7417:            return false;
        -: 7418:
        -: 7419:        // is there a "break" in the for loop?
    #####: 7420:        bool hasbreak = false;
    #####: 7421:        const Token* end4 = tok2->linkAt(-1)->linkAt(1);
call    0 never executed
call    1 never executed
    #####: 7422:        for (const Token *tok4 = tok2->previous()->link(); tok4 != end4; tok4 = tok4->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 7423:            if (tok4->str() == "break") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7424:                hasbreak = true;
    #####: 7425:                break;
        -: 7426:            }
        -: 7427:        }
    #####: 7428:        if (hasbreak)
branch  0 never executed
branch  1 never executed
    #####: 7429:            return false;
        -: 7430:
        -: 7431:        // no break => the value of the counter value is known after the for loop..
    #####: 7432:        const Token* compareTok = tok2->tokAt(5);
call    0 never executed
    #####: 7433:        if (compareTok->str() == "<") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7434:            value = compareTok->next()->str();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7435:            valueVarId = compareTok->next()->varId();
call    0 never executed
call    1 never executed
        -: 7436:        } else
    #####: 7437:            value = MathLib::toString(MathLib::toLongNumber(compareTok->next()->str()) + 1);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -: 7438:
        -: 7439:        // Skip for-body..
    #####: 7440:        tok3 = tok2->previous()->link()->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -: 7441:    } else {
    #####: 7442:        value = tok2->strAt(2);
call    0 never executed
call    1 never executed
    #####: 7443:        valueVarId = tok2->tokAt(2)->varId();
call    0 never executed
call    1 never executed
    #####: 7444:        if (tok2->strAt(1) == "[") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7445:            value = tok2->next()->link()->strAt(2);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 7446:            valueVarId = 0;
    #####: 7447:        } else if (value == "&") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7448:            value = tok2->strAt(3);
call    0 never executed
call    1 never executed
    #####: 7449:            valueVarId = tok2->tokAt(3)->varId();
call    0 never executed
call    1 never executed
        -: 7450:
        -: 7451:            // *ptr = &var; *ptr = 5;
        -: 7452:            // equals
        -: 7453:            // var = 5; not *var = 5;
    #####: 7454:            if (tok2->strAt(4) == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7455:                valueIsPointer = true;
        -: 7456:        }
        -: 7457:
        -: 7458:        // Add a '.0' to a decimal value and therefore convert it to an floating point number.
    #####: 7459:        else if (MathLib::isDec(tok2->strAt(2)) && floatvar) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7460:            value += ".0";
call    0 never executed
        -: 7461:        }
        -: 7462:
        -: 7463:        // float variable: convert true/false to 1.0 / 0.0
    #####: 7464:        else if (tok2->tokAt(2)->isBoolean() && floatvar) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7465:            value = (value == "true") ? "1.0" : "0.0";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 7466:        }
        -: 7467:
    #####: 7468:        if (Token::simpleMatch(tok2->next(), "= &"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7469:            tok2 = tok2->tokAt(3);
call    0 never executed
        -: 7470:
    #####: 7471:        tok3 = tok2->next();
call    0 never executed
        -: 7472:    }
    #####: 7473:    *_tok2 = tok2;
    #####: 7474:    *_tok3 = tok3;
    #####: 7475:    return true;
        -: 7476:}
        -: 7477:
function _ZNK9Tokenizer30simplifyKnownVariablesSimplifyEPP5TokenS1_iRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS8_ibPKS0_i called 0 returned 0% blocks executed 0%
    #####: 7478:bool Tokenizer::simplifyKnownVariablesSimplify(Token **tok2, Token *tok3, nonneg int varid, const std::string &structname, std::string &value, nonneg int valueVarId, bool valueIsPointer, const Token * const valueToken, int indentlevel) const
        -: 7479:{
    #####: 7480:    const bool pointeralias(valueToken->isName() || Token::Match(valueToken, "& %name% ["));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7481:    const bool varIsGlobal = (indentlevel == 0);
    #####: 7482:    const bool printDebug = mSettings->debugwarnings;
        -: 7483:
    #####: 7484:    if (mErrorLogger && !list.getFiles().empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7485:        mErrorLogger->reportProgress(list.getFiles()[0], "Tokenize (simplifyKnownVariables)", tok3->progressValue());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 7486:
    #####: 7487:    if (isMaxTime())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7488:        return false;
        -: 7489:
    #####: 7490:    bool ret = false;
        -: 7491:
    #####: 7492:    Token* bailOutFromLoop = nullptr;
    #####: 7493:    int indentlevel3 = indentlevel;
    #####: 7494:    bool ret3 = false;
    #####: 7495:    for (; tok3; tok3 = tok3->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 7496:        if (tok3->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7497:            ++indentlevel3;
    #####: 7498:        } else if (tok3->str() == "}") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7499:            --indentlevel3;
    #####: 7500:            if (indentlevel3 < indentlevel) {
branch  0 never executed
branch  1 never executed
    #####: 7501:                if (Token::Match((*tok2)->tokAt(-7), "%type% * %name% ; %name% = & %name% ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7502:                    (*tok2)->strAt(-5) == (*tok2)->strAt(-3)) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7503:                    (*tok2) = (*tok2)->tokAt(-4);
call    0 never executed
    #####: 7504:                    Token::eraseTokens((*tok2), (*tok2)->tokAt(6));
call    0 never executed
call    1 never executed
        -: 7505:                }
    #####: 7506:                break;
        -: 7507:            }
        -: 7508:        }
        -: 7509:
        -: 7510:        // Stop if there is a pointer alias and a shadow variable is
        -: 7511:        // declared in an inner scope (#3058)
    #####: 7512:        if (valueIsPointer && tok3->varId() > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 7513:            tok3->previous() && (tok3->previous()->isName() || tok3->previous()->str() == "*") &&
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 7514:            valueToken->str() == "&" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7515:            valueToken->next() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7516:            valueToken->next()->isName() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7517:            tok3->str() == valueToken->next()->str() &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7518:            tok3->varId() > valueToken->next()->varId()) {
call    0 never executed
call    1 never executed
call    2 never executed
        -: 7519:            // more checking if this is a variable declaration
    #####: 7520:            bool decl = true;
    #####: 7521:            for (const Token *tok4 = tok3->previous(); tok4; tok4 = tok4->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 7522:                if (Token::Match(tok4, "[;{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7523:                    break;
        -: 7524:
    #####: 7525:                else if (tok4->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7526:                    if (tok4->varId() > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7527:                        decl = false;
    #####: 7528:                        break;
        -: 7529:                    }
        -: 7530:                }
        -: 7531:
    #####: 7532:                else if (!Token::Match(tok4, "[&*]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7533:                    decl = false;
    #####: 7534:                    break;
        -: 7535:                }
        -: 7536:            }
    #####: 7537:            if (decl)
branch  0 never executed
branch  1 never executed
    #####: 7538:                break;
        -: 7539:        }
        -: 7540:
        -: 7541:        // Stop if label is found
    #####: 7542:        if (Token::Match(tok3, "; %type% : ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7543:            break;
        -: 7544:
        -: 7545:        // Stop if break/continue is found ..
    #####: 7546:        if (Token::Match(tok3, "break|continue"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7547:            break;
    #####: 7548:        if ((indentlevel3 > 1 || !Token::simpleMatch(Token::findsimplematch(tok3,";"), "; }")) && tok3->str() == "return")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 7549:            ret3 = true;
    #####: 7550:        if (ret3 && tok3->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7551:            break;
        -: 7552:
    #####: 7553:        if (pointeralias && Token::Match(tok3, ("!!= " + value).c_str()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
    #####: 7554:            break;
        -: 7555:
        -: 7556:        // Stop if a loop is found
    #####: 7557:        if (pointeralias && Token::Match(tok3, "do|for|while"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 7558:            break;
        -: 7559:
        -: 7560:        // Stop if unknown function call is seen and the variable is global: it might be
        -: 7561:        // changed by the function call
    #####: 7562:        if (varIsGlobal && tok3->str() == ")" && tok3->link() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 7563:            Token::Match(tok3->link()->tokAt(-2), "[;{}] %name% (") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 7564:            !Token::Match(tok3->link()->previous(), "if|for|while|switch|BOOST_FOREACH"))
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 7565:            break;
        -: 7566:
        -: 7567:        // Stop if something like 'while (--var)' is found
    #####: 7568:        if (Token::Match(tok3, "for|while|do")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7569:            const Token *endpar = tok3->next()->link();
call    0 never executed
call    1 never executed
    #####: 7570:            if (Token::simpleMatch(endpar, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7571:                endpar = endpar->next()->link();
call    0 never executed
call    1 never executed
    #####: 7572:            bool bailout = false;
    #####: 7573:            for (const Token *tok4 = tok3; tok4 && tok4 != endpar; tok4 = tok4->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 7574:                if (Token::Match(tok4, "++|-- %varid%", varid) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 7575:                    Token::Match(tok4, "%varid% ++|--|=", varid)) {
call    0 never executed
    #####: 7576:                    bailout = true;
    #####: 7577:                    break;
        -: 7578:                }
        -: 7579:            }
    #####: 7580:            if (bailout)
branch  0 never executed
branch  1 never executed
    #####: 7581:                break;
        -: 7582:        }
        -: 7583:
    #####: 7584:        if (bailOutFromLoop) {
branch  0 never executed
branch  1 never executed
        -: 7585:            // This could be a loop, skip it, but only if it doesn't contain
        -: 7586:            // the variable we are checking for. If it contains the variable
        -: 7587:            // we will bail out.
    #####: 7588:            if (tok3->varId() == varid) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7589:                // Continue
        -: 7590:                //tok2 = bailOutFromLoop;
    #####: 7591:                break;
    #####: 7592:            } else if (tok3 == bailOutFromLoop) {
branch  0 never executed
branch  1 never executed
        -: 7593:                // We have skipped the loop
    #####: 7594:                bailOutFromLoop = nullptr;
    #####: 7595:                continue;
        -: 7596:            }
        -: 7597:
    #####: 7598:            continue;
    #####: 7599:        } else if (tok3->str() == "{" && tok3->previous()->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 7600:            // There is a possible loop after the assignment. Try to skip it.
    #####: 7601:            if (tok3->previous()->link() &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7602:                tok3->previous()->link()->strAt(-1) != "if")
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 7603:                bailOutFromLoop = tok3->link();
call    0 never executed
    #####: 7604:            continue;
        -: 7605:        }
        -: 7606:
        -: 7607:        // Variable used in realloc (see Ticket #1649)
    #####: 7608:        if (Token::Match(tok3, "%name% = realloc ( %name% ,") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7609:            tok3->varId() == varid &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7610:            tok3->tokAt(4)->varId() == varid) {
call    0 never executed
call    1 never executed
    #####: 7611:            tok3->tokAt(4)->str(value);
call    0 never executed
call    1 never executed
    #####: 7612:            ret = true;
        -: 7613:        }
        -: 7614:
        -: 7615:        // condition "(|&&|%OROR% %varid% )|&&|%OROR%|;
    #####: 7616:        if (!Token::Match(tok3->previous(), "( %name% )") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7617:            Token::Match(tok3->previous(), "&&|(|%oror% %varid% &&|%oror%|)|;", varid)) {
call    0 never executed
call    1 never executed
    #####: 7618:            tok3->str(value);
call    0 never executed
    #####: 7619:            tok3->varId(valueVarId);
call    0 never executed
    #####: 7620:            ret = true;
        -: 7621:        }
        -: 7622:
        -: 7623:        // parameter in function call..
    #####: 7624:        if (tok3->varId() == varid && Token::Match(tok3->previous(), "[(,] %name% [,)]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 7625:            // If the parameter is passed by value then simplify it
    #####: 7626:            if (isFunctionParameterPassedByValue(tok3)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7627:                tok3->str(value);
call    0 never executed
    #####: 7628:                tok3->varId(valueVarId);
call    0 never executed
    #####: 7629:                ret = true;
        -: 7630:            }
        -: 7631:        }
        -: 7632:
        -: 7633:        // Variable is used somehow in a non-defined pattern => bail out
    #####: 7634:        if (tok3->varId() == varid) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7635:            // This is a really generic bailout so let's try to avoid this.
        -: 7636:            // There might be lots of false negatives.
    #####: 7637:            if (printDebug) {
branch  0 never executed
branch  1 never executed
        -: 7638:                // FIXME: Fix all the debug warnings for values and then
        -: 7639:                // remove this bailout
    #####: 7640:                if (pointeralias)
branch  0 never executed
branch  1 never executed
    #####: 7641:                    break;
        -: 7642:
        -: 7643:                // suppress debug-warning when calling member function
    #####: 7644:                if (Token::Match(tok3->next(), ". %name% ("))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7645:                    break;
        -: 7646:
        -: 7647:                // suppress debug-warning when assignment
    #####: 7648:                if (tok3->strAt(1) == "=")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7649:                    break;
        -: 7650:
        -: 7651:                // taking address of variable..
    #####: 7652:                if (Token::Match(tok3->tokAt(-2), "return|= & %name% ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7653:                    break;
        -: 7654:
        -: 7655:                // parameter in function call..
    #####: 7656:                if (Token::Match(tok3->tokAt(-2), "%name% ( %name% ,|)") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7657:                    Token::Match(tok3->previous(), ", %name% ,|)"))
call    0 never executed
call    1 never executed
    #####: 7658:                    break;
        -: 7659:
        -: 7660:                // conditional increment
    #####: 7661:                if (Token::Match(tok3->tokAt(-3), ") { ++|--") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7662:                    Token::Match(tok3->tokAt(-2), ") { %name% ++|--"))
call    0 never executed
call    1 never executed
    #####: 7663:                    break;
        -: 7664:
    #####: 7665:                reportError(tok3, Severity::debug, "debug",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 7666:                            "simplifyKnownVariables: bailing out (variable="+tok3->str()+", value="+value+")");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -: 7667:            }
        -: 7668:
    #####: 7669:            break;
        -: 7670:        }
        -: 7671:
        -: 7672:        // Using the variable in condition..
    #####: 7673:        if (Token::Match(tok3->previous(), ("if ( " + structname + " %varid% %cop%|)").c_str(), varid) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
call   27 never executed
    #####: 7674:            Token::Match(tok3, ("( " + structname + " %varid% %comp%").c_str(), varid) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####: 7675:            Token::Match(tok3, ("%comp%|!|= " + structname + " %varid% %cop%|)|;").c_str(), varid) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####: 7676:            Token::Match(tok3->previous(), "strlen|free ( %varid% )", varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7677:            if (value[0] == '\"' && tok3->previous()->str() != "strlen") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 7678:                // bail out if value is a string unless if it's just given
        -: 7679:                // as parameter to strlen
    #####: 7680:                break;
        -: 7681:            }
    #####: 7682:            if (!structname.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7683:                tok3->deleteNext(2);
call    0 never executed
        -: 7684:            }
    #####: 7685:            if (Token::Match(valueToken, "& %name% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7686:                tok3->insertToken("&");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 7687:                tok3 = tok3->next();
call    0 never executed
        -: 7688:            }
    #####: 7689:            tok3 = tok3->next();
call    0 never executed
    #####: 7690:            tok3->str(value);
call    0 never executed
    #####: 7691:            tok3->varId(valueVarId);
call    0 never executed
    #####: 7692:            ret = true;
        -: 7693:        }
        -: 7694:
        -: 7695:        // pointer alias used in condition..
    #####: 7696:        if (Token::Match(valueToken,"& %name% ;") && Token::Match(tok3, ("( * " + structname + " %varid% %cop%").c_str(), varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
    #####: 7697:            tok3->deleteNext();
call    0 never executed
    #####: 7698:            if (!structname.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7699:                tok3->deleteNext(2);
call    0 never executed
    #####: 7700:            tok3 = tok3->next();
call    0 never executed
    #####: 7701:            tok3->str(value);
call    0 never executed
    #####: 7702:            tok3->varId(valueVarId);
call    0 never executed
    #####: 7703:            ret = true;
        -: 7704:        }
        -: 7705:
        -: 7706:        // Delete pointer alias
    #####: 7707:        if (isCPP() && pointeralias && (tok3->str() == "delete") && tok3->next() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 7708:            (Token::Match(tok3->next(), "%varid% ;", varid) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7709:             Token::Match(tok3->next(), "[ ] %varid%", varid))) {
call    0 never executed
call    1 never executed
    #####: 7710:            tok3 = (tok3->next()->str() == "[") ? tok3->tokAt(3) : tok3->next();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 7711:            tok3->str(value);
call    0 never executed
    #####: 7712:            tok3->varId(valueVarId);
call    0 never executed
    #####: 7713:            ret = true;
        -: 7714:        }
        -: 7715:
        -: 7716:        // Variable is used in function call..
    #####: 7717:        if (Token::Match(tok3, ("%name% ( " + structname + " %varid% ,").c_str(), varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 7718:            static const char * const functionName[] = {
        -: 7719:                // always simplify
        -: 7720:                "strcmp", "strdup",
        -: 7721:                // don't simplify buffer value
        -: 7722:                "memcmp","memcpy","memmove","memset","strcpy","strncmp","strncpy"
        -: 7723:            };
    #####: 7724:            for (int i = 0; i < (sizeof(functionName) / sizeof(*functionName)); ++i) {
branch  0 never executed
branch  1 never executed
    #####: 7725:                if (valueVarId == 0U && i >= 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7726:                    break;
    #####: 7727:                if (tok3->str() == functionName[i]) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7728:                    Token *par1 = tok3->tokAt(2);
call    0 never executed
    #####: 7729:                    if (!structname.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7730:                        par1->deleteNext();
call    0 never executed
    #####: 7731:                        par1->deleteThis();
call    0 never executed
        -: 7732:                    }
    #####: 7733:                    par1->str(value);
call    0 never executed
    #####: 7734:                    par1->varId(valueVarId);
call    0 never executed
    #####: 7735:                    break;
        -: 7736:                }
        -: 7737:            }
        -: 7738:        }
        -: 7739:
        -: 7740:        // Variable is used as 2nd parameter in function call..
    #####: 7741:        if (Token::Match(tok3, ("%name% ( %any% , " + structname + " %varid% ,|)").c_str(), varid)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 7742:            static const char * const functionName[] = {
        -: 7743:                // always simplify
        -: 7744:                "strcmp","strcpy","strncmp","strncpy",
        -: 7745:                // don't simplify buffer value
        -: 7746:                "memcmp","memcpy","memmove"
        -: 7747:            };
    #####: 7748:            for (int i = 0; i < (sizeof(functionName) / sizeof(*functionName)); ++i) {
branch  0 never executed
branch  1 never executed
    #####: 7749:                if (valueVarId == 0U && i >= 4)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7750:                    break;
    #####: 7751:                if (tok3->str() == functionName[i]) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7752:                    Token *par = tok3->tokAt(4);
call    0 never executed
    #####: 7753:                    if (!structname.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7754:                        par->deleteNext();
call    0 never executed
    #####: 7755:                        par->deleteThis();
call    0 never executed
        -: 7756:                    }
    #####: 7757:                    par->str(value);
call    0 never executed
    #####: 7758:                    par->varId(valueVarId);
call    0 never executed
    #####: 7759:                    break;
        -: 7760:                }
        -: 7761:            }
        -: 7762:        }
        -: 7763:
        -: 7764:        // array usage
    #####: 7765:        if (value[0] != '\"' && Token::Match(tok3, ("[(,] " + structname + " %varid% [|%cop%").c_str(), varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
call   30 never executed
call   31 never executed
    #####: 7766:            if (!structname.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7767:                tok3->deleteNext(2);
call    0 never executed
        -: 7768:            }
    #####: 7769:            tok3 = tok3->next();
call    0 never executed
    #####: 7770:            tok3->str(value);
call    0 never executed
    #####: 7771:            tok3->varId(valueVarId);
call    0 never executed
    #####: 7772:            ret = true;
        -: 7773:        }
        -: 7774:
        -: 7775:        // The >> operator is sometimes used to assign a variable in C++
    #####: 7776:        if (isCPP() && Token::Match(tok3, (">> " + structname + " %varid%").c_str(), varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
        -: 7777:            // bailout for such code:   ; std :: cin >> i ;
    #####: 7778:            const Token *prev = tok3->previous();
call    0 never executed
    #####: 7779:            while (prev && prev->str() != "return" && Token::Match(prev, "%name%|::|*"))
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 7780:                prev = prev->previous();
call    0 never executed
    #####: 7781:            if (Token::Match(prev, ";|{|}|>>"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7782:                break;
        -: 7783:        }
        -: 7784:
        -: 7785:        // Variable is used in calculation..
    #####: 7786:        if (((tok3->previous()->varId() > 0) && Token::Match(tok3, ("& " + structname + " %varid%").c_str(), varid)) ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
call   30 never executed
    #####: 7787:            (Token::Match(tok3, ("[=+-*/%^|[] " + structname + " %varid% [=?+-*/%^|;])]").c_str(), varid) && !Token::Match(tok3, ("= " + structname + " %name% =").c_str())) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
call   44 never executed
branch 45 never executed
branch 46 never executed
call   47 never executed
    #####: 7788:            Token::Match(tok3, ("[(=+-*/%^|[] " + structname + " %varid% <<|>>").c_str(), varid) ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
    #####: 7789:            Token::Match(tok3, ("<<|>> " + structname + " %varid% %cop%|;|]|)").c_str(), varid) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####: 7790:            Token::Match(tok3->previous(), ("[=+-*/%^|[] ( " + structname + " %varid% !!=").c_str(), varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
    #####: 7791:            if (value[0] == '\"')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7792:                break;
    #####: 7793:            if (!structname.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7794:                tok3->deleteNext(2);
call    0 never executed
    #####: 7795:                ret = true;
        -: 7796:            }
    #####: 7797:            tok3 = tok3->next();
call    0 never executed
    #####: 7798:            if (tok3->str() != value)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7799:                ret = true;
    #####: 7800:            tok3->str(value);
call    0 never executed
    #####: 7801:            tok3->varId(valueVarId);
call    0 never executed
    #####: 7802:            if (tok3->previous()->str() == "*" && (valueIsPointer || Token::Match(valueToken, "& %name% ;"))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 7803:                tok3 = tok3->previous();
call    0 never executed
    #####: 7804:                tok3->deleteThis();
call    0 never executed
    #####: 7805:                ret = true;
    #####: 7806:            } else if (Token::Match(valueToken, "& %name% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7807:                tok3->insertToken("&", emptyString, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 7808:        }
        -: 7809:
    #####: 7810:        if (Token::simpleMatch(tok3, "= {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7811:            const Token* const end4 = tok3->linkAt(1);
call    0 never executed
    #####: 7812:            for (const Token *tok4 = tok3; tok4 != end4; tok4 = tok4->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 7813:                if (Token::Match(tok4, "{|, %varid% ,|}", varid)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7814:                    tok4->next()->str(value);
call    0 never executed
call    1 never executed
    #####: 7815:                    tok4->next()->varId(valueVarId);
call    0 never executed
call    1 never executed
    #####: 7816:                    ret = true;
        -: 7817:                }
        -: 7818:            }
        -: 7819:        }
        -: 7820:
        -: 7821:        // Using the variable in for-condition..
    #####: 7822:        if (Token::simpleMatch(tok3, "for (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7823:            for (Token *tok4 = tok3->tokAt(2); tok4; tok4 = tok4->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 7824:                if (Token::Match(tok4, "(|)"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7825:                    break;
        -: 7826:
        -: 7827:                // Replace variable used in condition..
    #####: 7828:                if (Token::Match(tok4, "; %name% <|<=|!= %name% ; ++| %name% ++| )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7829:                    const Token *inctok = tok4->tokAt(5);
call    0 never executed
    #####: 7830:                    if (inctok->str() == "++")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7831:                        inctok = inctok->next();
call    0 never executed
    #####: 7832:                    if (inctok->varId() == varid)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7833:                        break;
        -: 7834:
    #####: 7835:                    if (tok4->next()->varId() == varid) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7836:                        tok4->next()->str(value);
call    0 never executed
call    1 never executed
    #####: 7837:                        tok4->next()->varId(valueVarId);
call    0 never executed
call    1 never executed
    #####: 7838:                        ret = true;
        -: 7839:                    }
    #####: 7840:                    if (tok4->tokAt(3)->varId() == varid) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7841:                        tok4->tokAt(3)->str(value);
call    0 never executed
call    1 never executed
    #####: 7842:                        tok4->tokAt(3)->varId(valueVarId);
call    0 never executed
call    1 never executed
    #####: 7843:                        ret = true;
        -: 7844:                    }
        -: 7845:                }
        -: 7846:            }
        -: 7847:        }
        -: 7848:
    #####: 7849:        if (indentlevel == indentlevel3 && Token::Match(tok3->next(), "%varid% ++|--", varid) && MathLib::isInt(value)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 7850:            const std::string op(tok3->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####: 7851:            if (Token::Match(tok3, "[{};] %any% %any% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7852:                tok3->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7853:            } else {
    #####: 7854:                tok3 = tok3->next();
call    0 never executed
    #####: 7855:                tok3->str(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7856:                tok3->varId(valueVarId);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7857:                tok3->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 7858:            }
    #####: 7859:            value = MathLib::incdec(value, op);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####: 7860:            if (!Token::simpleMatch((*tok2)->tokAt(-2), "for (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 7861:                (*tok2)->tokAt(2)->str(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 7862:                (*tok2)->tokAt(2)->varId(valueVarId);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 7863:            }
    #####: 7864:            ret = true;
        -: 7865:        }
        -: 7866:
    #####: 7867:        if (indentlevel == indentlevel3 && Token::Match(tok3->next(), "++|-- %varid%", varid) && MathLib::isInt(value) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 7868:            !Token::Match(tok3->tokAt(3), "[.[]")) {
call    0 never executed
call    1 never executed
    #####: 7869:            value = MathLib::incdec(value, tok3->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 7870:            (*tok2)->tokAt(2)->str(value);
call    0 never executed
call    1 never executed
    #####: 7871:            (*tok2)->tokAt(2)->varId(valueVarId);
call    0 never executed
call    1 never executed
    #####: 7872:            if (Token::Match(tok3, "[;{}] %any% %any% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 7873:                tok3->deleteNext(3);
call    0 never executed
        -: 7874:            } else {
    #####: 7875:                tok3->deleteNext();
call    0 never executed
    #####: 7876:                tok3->next()->str(value);
call    0 never executed
call    1 never executed
    #####: 7877:                tok3->next()->varId(valueVarId);
call    0 never executed
call    1 never executed
        -: 7878:            }
    #####: 7879:            tok3 = tok3->next();
call    0 never executed
    #####: 7880:            ret = true;
        -: 7881:        }
        -: 7882:
        -: 7883:        // return variable..
    #####: 7884:        if (Token::Match(tok3, "return %varid% %any%", varid) &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 7885:            valueToken->str() != "&" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 7886:            (tok3->tokAt(2)->isExtendedOp() || tok3->strAt(2) == ";") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 7887:            value[0] != '\"') {
call    0 never executed
    #####: 7888:            tok3->next()->str(value);
call    0 never executed
call    1 never executed
    #####: 7889:            tok3->next()->varId(valueVarId);
call    0 never executed
call    1 never executed
        -: 7890:        }
        -: 7891:
    #####: 7892:        else if (pointeralias && Token::Match(tok3, "return * %varid% ;", varid) && value[0] != '\"') {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 7893:            tok3->deleteNext();
call    0 never executed
    #####: 7894:            tok3->next()->str(value);
call    0 never executed
call    1 never executed
    #####: 7895:            tok3->next()->varId(valueVarId);
call    0 never executed
call    1 never executed
        -: 7896:        }
        -: 7897:    }
    #####: 7898:    return ret;
        -: 7899:}
        -: 7900:
        -: 7901:
function _ZN9Tokenizer6elseifEv called 956 returned 100% blocks executed 78%
      956: 7902:void Tokenizer::elseif()
        -: 7903:{
    29888: 7904:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28932: 7905:        if (!Token::simpleMatch(tok, "else if"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    28928: 7906:            continue;
        -: 7907:
       26: 7908:        for (Token *tok2 = tok; tok2; tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       26: 7909:            if (Token::Match(tok2, "(|{|["))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
       13: 7910:                tok2 = tok2->link();
call    0 returned 100%
        -: 7911:
       26: 7912:            if (Token::Match(tok2, "}|;")) {
call    0 returned 100%
branch  1 taken 31% (fallthrough)
branch  2 taken 69%
        8: 7913:                if (tok2->next() && tok2->next()->str() != "else") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
branch  9 taken 50%
        4: 7914:                    tok->insertToken("{");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
call   11 never executed
        4: 7915:                    tok2->insertToken("}");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        4: 7916:                    Token::createMutualLinks(tok->next(), tok2->next());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        4: 7917:                    break;
        -: 7918:                }
        -: 7919:            }
        -: 7920:        }
        -: 7921:    }
      956: 7922:}
        -: 7923:
        -: 7924:
function _ZN9Tokenizer28simplifyRedundantParenthesesEv called 956 returned 100% blocks executed 80%
      956: 7925:bool Tokenizer::simplifyRedundantParentheses()
        -: 7926:{
      956: 7927:    bool ret = false;
    30008: 7928:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29052: 7929:        if (tok->str() != "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
    26270: 7930:            continue;
        -: 7931:
     2784: 7932:        if (isCPP() && Token::simpleMatch(tok->previous(), "} (") &&
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        2: 7933:            Token::Match(tok->previous()->link()->previous(), "%name%|> {"))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        2: 7934:            continue;
        -: 7935:
     2780: 7936:        if (Token::simpleMatch(tok, "( {"))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        7: 7937:            continue;
        -: 7938:
     2794: 7939:        if (Token::Match(tok->link(), ") %num%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       21: 7940:            tok = tok->link();
call    0 returned 100%
       21: 7941:            continue;
        -: 7942:        }
        -: 7943:
        -: 7944:        // !!operator = ( x ) ;
     8259: 7945:        if (tok->strAt(-2) != "operator" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     5536: 7946:            tok->previous() && tok->previous()->str() == "=" &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
     2848: 7947:            tok->next() && tok->next()->str() != "{" &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 9% (fallthrough)
branch  9 taken 91%
       32: 7948:            Token::simpleMatch(tok->link(), ") ;")) {
call    0 returned 100%
call    1 returned 100%
        3: 7949:            tok->link()->deleteThis();
call    0 returned 100%
call    1 returned 100%
        3: 7950:            tok->deleteThis();
call    0 returned 100%
        3: 7951:            continue;
        -: 7952:        }
        -: 7953:
     2813: 7954:        while (Token::simpleMatch(tok, "( (") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     2808: 7955:               tok->link() && tok->link()->previous() == tok->next()->link()) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 9% (fallthrough)
branch  8 taken 91%
branch  9 taken 1% (fallthrough)
branch 10 taken 99%
        -: 7956:            // We have "(( *something* ))", remove the inner
        -: 7957:            // parentheses
        5: 7958:            tok->deleteNext();
call    0 returned 100%
        5: 7959:            tok->link()->tokAt(-2)->deleteNext();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        5: 7960:            ret = true;
        -: 7961:        }
        -: 7962:
     2749: 7963:        if (isCPP() && Token::Match(tok->tokAt(-2), "[;{}=(] new (") && Token::Match(tok->link(), ") [;,{}[]")) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
        -: 7964:            // Remove the parentheses in "new (type)" constructs
    #####: 7965:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 7966:            tok->deleteThis();
call    0 never executed
    #####: 7967:            ret = true;
        -: 7968:        }
        -: 7969:
     2749: 7970:        if (Token::Match(tok->previous(), "! ( %name% )")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 7971:            // Remove the parentheses
        9: 7972:            tok->deleteThis();
call    0 returned 100%
        9: 7973:            tok->deleteNext();
call    0 returned 100%
        9: 7974:            ret = true;
        -: 7975:        }
        -: 7976:
     2749: 7977:        if (Token::Match(tok->previous(), "[(,;{}] ( %name% ) .")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 7978:            // Remove the parentheses
    #####: 7979:            tok->deleteThis();
call    0 never executed
    #####: 7980:            tok->deleteNext();
call    0 never executed
    #####: 7981:            ret = true;
        -: 7982:        }
        -: 7983:
     2753: 7984:        if (Token::Match(tok->previous(), "[(,;{}] ( %name% (") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        4: 7985:            tok->link()->previous() == tok->linkAt(2)) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 7986:            // We have "( func ( *something* ))", remove the outer
        -: 7987:            // parentheses
    #####: 7988:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 7989:            tok->deleteThis();
call    0 never executed
    #####: 7990:            ret = true;
        -: 7991:        }
        -: 7992:
     2749: 7993:        if (Token::Match(tok->previous(), "[,;{}] ( delete [| ]| %name% ) ;")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 7994:            // We have "( delete [| ]| var )", remove the outer
        -: 7995:            // parentheses
    #####: 7996:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 7997:            tok->deleteThis();
call    0 never executed
    #####: 7998:            ret = true;
        -: 7999:        }
        -: 8000:
     8247: 8001:        if (!Token::simpleMatch(tok->tokAt(-2), "operator delete") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2764: 8002:            Token::Match(tok->previous(), "delete|; (") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     2779: 8003:            (tok->previous()->str() != "delete" || tok->next()->varId() > 0) &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
       15: 8004:            Token::Match(tok->link(), ") ;|,")) {
call    0 returned 100%
call    1 returned 100%
    #####: 8005:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 8006:            tok->deleteThis();
call    0 never executed
    #####: 8007:            ret = true;
        -: 8008:        }
        -: 8009:
     5520: 8010:        if (Token::Match(tok->previous(), "[(!*;{}] ( %name% )") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2771: 8011:            (tok->next()->varId() != 0 || Token::Match(tok->tokAt(3), "[+-/=]")) && !tok->next()->isStandardType()) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 8012:            // We have "( var )", remove the parentheses
    #####: 8013:            tok->deleteThis();
call    0 never executed
    #####: 8014:            tok->deleteNext();
call    0 never executed
    #####: 8015:            ret = true;
        -: 8016:        }
        -: 8017:
     2751: 8018:        while (Token::Match(tok->previous(), "[;{}[(,!*] ( %name% .")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        3: 8019:            Token *tok2 = tok->tokAt(2);
call    0 returned 100%
        9: 8020:            while (Token::Match(tok2, ". %name%")) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        3: 8021:                tok2 = tok2->tokAt(2);
call    0 returned 100%
        -: 8022:            }
        3: 8023:            if (tok2 != tok->link())
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        2: 8024:                break;
        -: 8025:            // We have "( var . var . ... . var )", remove the parentheses
        1: 8026:            tok = tok->previous();
call    0 returned 100%
        1: 8027:            tok->deleteNext();
call    0 returned 100%
        1: 8028:            tok2->deleteThis();
call    0 returned 100%
        1: 8029:            ret = true;
        -: 8030:        }
        -: 8031:
     2749: 8032:        if (Token::simpleMatch(tok->previous(), "? (") && Token::simpleMatch(tok->link(), ") :")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
        2: 8033:            const Token *tok2 = tok->next();
call    0 returned 100%
       10: 8034:            while (tok2 && (Token::Match(tok2,"%bool%|%num%|%name%") || tok2->isArithmeticalOp()))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
branch  8 taken 67% (fallthrough)
branch  9 taken 33%
        4: 8035:                tok2 = tok2->next();
call    0 returned 100%
        3: 8036:            if (tok2 && tok2->str() == ")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
branch  7 taken 50%
        1: 8037:                tok->link()->deleteThis();
call    0 returned 100%
call    1 returned 100%
        1: 8038:                tok->deleteThis();
call    0 returned 100%
        1: 8039:                ret = true;
        1: 8040:                continue;
        -: 8041:            }
        -: 8042:        }
        -: 8043:
     2804: 8044:        while (Token::Match(tok->previous(), "[{([,] ( !!{") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       57: 8045:               Token::Match(tok->link(), ") [;,])]") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     2750: 8046:               !Token::simpleMatch(tok->tokAt(-2), "operator ,") && // Ticket #5709
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        1: 8047:               !Token::findsimplematch(tok, ",", tok->link())) {
call    0 returned 100%
call    1 returned 100%
        -: 8048:            // We have "( ... )", remove the parentheses
    #####: 8049:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 8050:            tok->deleteThis();
call    0 never executed
    #####: 8051:            ret = true;
        -: 8052:        }
        -: 8053:
     2752: 8054:        if (Token::simpleMatch(tok->previous(), ", (") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
        4: 8055:            Token::simpleMatch(tok->link(), ") =")) {
call    0 returned 100%
call    1 returned 100%
    #####: 8056:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 8057:            tok->deleteThis();
call    0 never executed
    #####: 8058:            ret = true;
        -: 8059:        }
        -: 8060:
        -: 8061:        // Simplify "!!operator !!%name%|)|>|>> ( %num%|%bool% ) %op%|;|,|)"
     5538: 8062:        if (Token::Match(tok, "( %bool%|%num% ) %cop%|;|,|)") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       84: 8063:            tok->strAt(-2) != "operator" &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       84: 8064:            tok->previous() &&
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
     2791: 8065:            !Token::Match(tok->previous(), "%name%|)") &&
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        2: 8066:            (!(isCPP() && Token::Match(tok->previous(),">|>>")))) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 8067:            tok->link()->deleteThis();
call    0 never executed
call    1 never executed
    #####: 8068:            tok->deleteThis();
call    0 never executed
    #####: 8069:            ret = true;
        -: 8070:        }
        -: 8071:
     2748: 8072:        if (Token::Match(tok->previous(), "*|& ( %name% )")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -: 8073:            // We may have a variable declaration looking like "type_name *(var_name)"
        1: 8074:            Token *tok2 = tok->tokAt(-2);
call    0 returned 100%
        1: 8075:            while (Token::Match(tok2, "%type%|static|const|extern") && tok2->str() != "operator") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 8076:                tok2 = tok2->previous();
call    0 never executed
        -: 8077:            }
        1: 8078:            if (tok2 && !Token::Match(tok2, "[;,{]")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
        -: 8079:                // Not a variable declaration
        -: 8080:            } else {
    #####: 8081:                tok->deleteThis();
call    0 never executed
    #####: 8082:                tok->deleteNext();
call    0 never executed
        -: 8083:            }
        -: 8084:        }
        -: 8085:    }
      956: 8086:    return ret;
        -: 8087:}
        -: 8088:
function _ZN9Tokenizer22simplifyTypeIntrinsicsEv called 934 returned 100% blocks executed 44%
      934: 8089:void Tokenizer::simplifyTypeIntrinsics()
        -: 8090:{
        -: 8091:    static const std::unordered_map<std::string, std::string> intrinsics = {
        -: 8092:        { "__has_nothrow_assign", "has_nothrow_assign" },
        -: 8093:        { "__has_nothrow_constructor", "has_nothrow_constructor" },
        -: 8094:        { "__has_nothrow_copy", "has_nothrow_copy" },
        -: 8095:        { "__has_trivial_assign", "has_trivial_assign" },
        -: 8096:        { "__has_trivial_constructor", "has_trivial_constructor" },
        -: 8097:        { "__has_trivial_copy", "has_trivial_copy" },
        -: 8098:        { "__has_trivial_destructor", "has_trivial_destructor" },
        -: 8099:        { "__has_virtual_destructor", "has_virtual_destructor" },
        -: 8100:        { "__is_abstract", "is_abstract" },
        -: 8101:        { "__is_aggregate", "is_aggregate" },
        -: 8102:        { "__is_assignable", "is_assignable" },
        -: 8103:        { "__is_base_of", "is_base_of" },
        -: 8104:        { "__is_class", "is_class" },
        -: 8105:        { "__is_constructible", "is_constructible" },
        -: 8106:        { "__is_convertible_to", "is_convertible_to" },
        -: 8107:        { "__is_destructible", "is_destructible" },
        -: 8108:        { "__is_empty", "is_empty" },
        -: 8109:        { "__is_enum", "is_enum" },
        -: 8110:        { "__is_final", "is_final" },
        -: 8111:        { "__is_nothrow_assignable", "is_nothrow_assignable" },
        -: 8112:        { "__is_nothrow_constructible", "is_nothrow_constructible" },
        -: 8113:        { "__is_nothrow_destructible", "is_nothrow_destructible" },
        -: 8114:        { "__is_pod", "is_pod" },
        -: 8115:        { "__is_polymorphic", "is_polymorphic" },
        -: 8116:        { "__is_trivially_assignable", "is_trivially_assignable" },
        -: 8117:        { "__is_trivially_constructible", "is_trivially_constructible" },
        -: 8118:        { "__is_union", "is_union" },
      934: 8119:    };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
branch 15 taken 100% (fallthrough)
branch 16 taken 0% (throw)
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
branch 21 taken 100% (fallthrough)
branch 22 taken 0% (throw)
call   23 returned 100%
branch 24 taken 100% (fallthrough)
branch 25 taken 0% (throw)
call   26 returned 100%
branch 27 taken 100% (fallthrough)
branch 28 taken 0% (throw)
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
branch 33 taken 100% (fallthrough)
branch 34 taken 0% (throw)
call   35 returned 100%
branch 36 taken 100% (fallthrough)
branch 37 taken 0% (throw)
call   38 returned 100%
branch 39 taken 100% (fallthrough)
branch 40 taken 0% (throw)
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 100% (fallthrough)
branch 46 taken 0% (throw)
call   47 returned 100%
branch 48 taken 100% (fallthrough)
branch 49 taken 0% (throw)
call   50 returned 100%
branch 51 taken 100% (fallthrough)
branch 52 taken 0% (throw)
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
branch 57 taken 100% (fallthrough)
branch 58 taken 0% (throw)
call   59 returned 100%
branch 60 taken 100% (fallthrough)
branch 61 taken 0% (throw)
call   62 returned 100%
branch 63 taken 100% (fallthrough)
branch 64 taken 0% (throw)
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
branch 69 taken 100% (fallthrough)
branch 70 taken 0% (throw)
call   71 returned 100%
branch 72 taken 100% (fallthrough)
branch 73 taken 0% (throw)
call   74 returned 100%
branch 75 taken 100% (fallthrough)
branch 76 taken 0% (throw)
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
branch 81 taken 100% (fallthrough)
branch 82 taken 0% (throw)
call   83 returned 100%
branch 84 taken 100% (fallthrough)
branch 85 taken 0% (throw)
call   86 returned 100%
call   87 returned 100%
branch 88 taken 100% (fallthrough)
branch 89 taken 0% (throw)
call   90 returned 100%
call   91 returned 100%
call   92 returned 100%
branch 93 taken 96% (fallthrough)
branch 94 taken 4%
call   95 returned 100%
call   96 never executed
branch 97 never executed
branch 98 never executed
call   99 never executed
branch 100 never executed
branch 101 never executed
call   102 never executed
call   103 never executed
    29453: 8120:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28519: 8121:        if (!Token::Match(tok, "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 91% (fallthrough)
branch  4 taken 9%
    54553: 8122:            continue;
     2485: 8123:        auto p = intrinsics.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
     2485: 8124:        if (p == intrinsics.end())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
     2485: 8125:            continue;
    #####: 8126:        Token * end = tok->next()->link();
call    0 never executed
call    1 never executed
    #####: 8127:        Token * prev = tok->previous();
call    0 never executed
    #####: 8128:        tok->str(p->second);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8129:        prev->insertToken("::");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8130:        prev->insertToken("std");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8131:        tok->next()->str("<");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8132:        end->str(">");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8133:        end->insertToken("}");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8134:        end->insertToken("{");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8135:        Token::createMutualLinks(end->tokAt(1), end->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 returned 100%
branch 10 taken 0%
branch 11 taken 100%
        -: 8136:    }
      934: 8137:}
        -: 8138:
function _ZN9Tokenizer14simplifyCharAtEv called 0 returned 0% blocks executed 0%
    #####: 8139:void Tokenizer::simplifyCharAt()
        -: 8140:{
        -: 8141:    // Replace "string"[0] with 's'
    #####: 8142:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8143:        if (Token::Match(tok, "%str% [ %num% ]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8144:            const MathLib::bigint index = MathLib::toLongNumber(tok->strAt(2));
call    0 never executed
call    1 never executed
        -: 8145:            // Check within range
    #####: 8146:            if (index >= 0 && index <= Token::getStrLength(tok)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 8147:                tok->str("'" + Token::getCharAt(tok, index) + "'");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 8148:                tok->deleteNext(3);
call    0 never executed
        -: 8149:            }
        -: 8150:        }
        -: 8151:    }
    #####: 8152:}
        -: 8153:
function _ZN9Tokenizer17simplifyReferenceEv called 0 returned 0% blocks executed 0%
    #####: 8154:void Tokenizer::simplifyReference()
        -: 8155:{
    #####: 8156:    if (isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8157:        return;
        -: 8158:
    #####: 8159:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 8160:        // starting executable scope..
    #####: 8161:        Token *start = const_cast<Token *>(startOfExecutableScope(tok));
call    0 never executed
    #####: 8162:        if (start) {
branch  0 never executed
branch  1 never executed
    #####: 8163:            tok = start;
        -: 8164:            // replace references in this scope..
    #####: 8165:            Token * const end = tok->link();
call    0 never executed
    #####: 8166:            for (Token *tok2 = tok; tok2 && tok2 != end; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 8167:                // found a reference..
    #####: 8168:                if (Token::Match(tok2, "[;{}] %type% & %name% (|= %name% )| ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8169:                    const int refId = tok2->tokAt(3)->varId();
call    0 never executed
call    1 never executed
    #####: 8170:                    if (!refId)
branch  0 never executed
branch  1 never executed
    #####: 8171:                        continue;
        -: 8172:
        -: 8173:                    // replace reference in the code..
    #####: 8174:                    for (Token *tok3 = tok2->tokAt(7); tok3 && tok3 != end; tok3 = tok3->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####: 8175:                        if (tok3->varId() == refId) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8176:                            tok3->str(tok2->strAt(5));
call    0 never executed
call    1 never executed
    #####: 8177:                            tok3->varId(tok2->tokAt(5)->varId());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 8178:                        }
        -: 8179:                    }
        -: 8180:
    #####: 8181:                    tok2->deleteNext(6+(tok2->strAt(6)==")" ? 1 : 0));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 8182:                }
        -: 8183:            }
    #####: 8184:            tok = end;
        -: 8185:        }
        -: 8186:    }
        -: 8187:}
        -: 8188:
function _ZN9Tokenizer20simplifyCalculationsEv called 0 returned 0% blocks executed 0%
    #####: 8189:bool Tokenizer::simplifyCalculations()
        -: 8190:{
    #####: 8191:    return mTemplateSimplifier->simplifyCalculations(nullptr, nullptr, false);
call    0 never executed
        -: 8192:}
        -: 8193:
function _ZN9Tokenizer32simplifyOffsetPointerDereferenceEv called 0 returned 0% blocks executed 0%
    #####: 8194:void Tokenizer::simplifyOffsetPointerDereference()
        -: 8195:{
        -: 8196:    // Replace "*(str + num)" => "str[num]" and
        -: 8197:    // Replace "*(str - num)" => "str[-num]"
    #####: 8198:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8199:        if (!tok->isName() && !tok->isLiteral()
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8200:            && !Token::Match(tok, "]|)|++|--")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8201:            && Token::Match(tok->next(), "* ( %name% +|- %num%|%name% )")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 8202:
        -: 8203:            // remove '* ('
    #####: 8204:            tok->deleteNext(2);
call    0 never executed
        -: 8205:
        -: 8206:            // '+'->'['
    #####: 8207:            tok = tok->tokAt(2);
call    0 never executed
    #####: 8208:            Token* const openBraceTok = tok;
    #####: 8209:            const bool isNegativeIndex = (tok->str() == "-");
call    0 never executed
call    1 never executed
    #####: 8210:            tok->str("[");
call    0 never executed
        -: 8211:
        -: 8212:            // Insert a "-" in front of the number or variable
    #####: 8213:            if (isNegativeIndex) {
branch  0 never executed
branch  1 never executed
    #####: 8214:                if (tok->next()->isName()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8215:                    tok->insertToken("-");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 8216:                    tok = tok->next();
call    0 never executed
        -: 8217:                } else
    #####: 8218:                    tok->next()->str(std::string("-") + tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 8219:            }
        -: 8220:
    #####: 8221:            tok = tok->tokAt(2);
call    0 never executed
    #####: 8222:            tok->str("]");
call    0 never executed
    #####: 8223:            Token::createMutualLinks(openBraceTok, tok);
call    0 never executed
        -: 8224:        }
        -: 8225:    }
    #####: 8226:}
        -: 8227:
function _ZN9Tokenizer30simplifyOffsetPointerReferenceEv called 0 returned 0% blocks executed 0%
    #####: 8228:void Tokenizer::simplifyOffsetPointerReference()
        -: 8229:{
    #####: 8230:    std::set<int> pod;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 8231:    for (const Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8232:        if (tok->isStandardType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8233:            tok = tok->next();
call    0 never executed
    #####: 8234:            while (tok && (tok->str() == "*" || tok->isName())) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 8235:                if (tok->varId() > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8236:                    pod.insert(tok->varId());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 8237:                    break;
        -: 8238:                }
    #####: 8239:                tok = tok->next();
call    0 never executed
        -: 8240:            }
    #####: 8241:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 8242:                break;
        -: 8243:        }
        -: 8244:    }
        -: 8245:
    #####: 8246:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8247:        if (!Token::Match(tok, "%num%|%name%|]|)") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 8248:            (Token::Match(tok->next(), "& %name% [ %num%|%name% ] !!["))) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8249:            tok = tok->next();
call    0 never executed
        -: 8250:
    #####: 8251:            if (tok->next()->varId()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8252:                if (pod.find(tok->next()->varId()) == pod.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
    #####: 8253:                    tok = tok->tokAt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8254:                    if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 8255:                        syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8256:                    continue;
        -: 8257:                }
        -: 8258:            }
        -: 8259:
        -: 8260:            // '&' => '('
    #####: 8261:            tok->str("(");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8262:
    #####: 8263:            tok = tok->next();
call    0 never executed
        -: 8264:            // '[' => '+'
    #####: 8265:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8266:            tok->insertToken("+");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 8267:
    #####: 8268:            tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8269:            //remove ']'
    #####: 8270:            tok->str(")");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8271:            Token::createMutualLinks(tok->tokAt(-4), tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 8272:        }
        -: 8273:    }
    #####: 8274:}
        -: 8275:
function _ZN9Tokenizer20simplifyNestedStrcatEv called 0 returned 0% blocks executed 0%
    #####: 8276:void Tokenizer::simplifyNestedStrcat()
        -: 8277:{
    #####: 8278:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8279:        if (! Token::Match(tok, "[;{}] strcat ( strcat (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8280:            continue;
        -: 8281:        }
        -: 8282:
        -: 8283:        // find inner strcat call
    #####: 8284:        Token *tok2 = tok->tokAt(3);
call    0 never executed
    #####: 8285:        while (Token::simpleMatch(tok2, "strcat ( strcat"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8286:            tok2 = tok2->tokAt(2);
call    0 never executed
        -: 8287:
    #####: 8288:        if (tok2->strAt(3) != ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8289:            continue;
        -: 8290:
        -: 8291:        // If we have this code:
        -: 8292:        //   strcat(strcat(dst, foo), bar);
        -: 8293:        // We move this part of code before all strcat() calls: strcat(dst, foo)
        -: 8294:        // And place "dst" token where the code was.
    #####: 8295:        Token *prevTok = tok2->previous();
call    0 never executed
        -: 8296:
        -: 8297:        // Move tokens to new place
    #####: 8298:        Token::move(tok2, tok2->next()->link(), tok);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 8299:        tok = tok2->next()->link();
call    0 never executed
call    1 never executed
        -: 8300:
        -: 8301:        // Insert the "dst" token
    #####: 8302:        prevTok->insertToken(tok2->strAt(2));
call    0 never executed
call    1 never executed
    #####: 8303:        prevTok->next()->varId(tok2->tokAt(2)->varId());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 8304:
        -: 8305:        // Insert semicolon after the moved strcat()
    #####: 8306:        tok->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 8307:    }
    #####: 8308:}
        -: 8309:
        -: 8310:// Check if this statement is a duplicate definition.  A duplicate
        -: 8311:// definition will hide the enumerator within it's scope so just
        -: 8312:// skip the entire scope of the duplicate.
function _ZN9Tokenizer19duplicateDefinitionEPP5Token called 0 returned 0% blocks executed 0%
    #####: 8313:bool Tokenizer::duplicateDefinition(Token ** tokPtr)
        -: 8314:{
        -: 8315:    // check for an end of definition
    #####: 8316:    const Token * tok = *tokPtr;
    #####: 8317:    if (tok && Token::Match(tok->next(), ";|,|[|=|)|>")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8318:        const Token * end = tok->next();
call    0 never executed
        -: 8319:
    #####: 8320:        if (end->str() == "[") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8321:            end = end->link()->next();
call    0 never executed
call    1 never executed
    #####: 8322:        } else if (end->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8323:            // check for function argument
    #####: 8324:            if (Token::Match(tok->previous(), "(|,"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8325:                return false;
        -: 8326:
        -: 8327:            // find end of definition
    #####: 8328:            int level = 0;
    #####: 8329:            while (end->next() && (!Token::Match(end->next(), ";|)|>") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 8330:                                   (end->next()->str() == ")" && level == 0))) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8331:                if (end->next()->str() == "(")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8332:                    ++level;
    #####: 8333:                else if (end->next()->str() == ")")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8334:                    --level;
        -: 8335:
    #####: 8336:                end = end->next();
call    0 never executed
        -: 8337:            }
    #####: 8338:        } else if (end->str() == ")") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8339:            // check for function argument
    #####: 8340:            if (tok->previous()->str() == ",")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8341:                return false;
        -: 8342:        }
        -: 8343:
    #####: 8344:        if (end) {
branch  0 never executed
branch  1 never executed
    #####: 8345:            if (Token::simpleMatch(end, ") {")) { // function parameter ?
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8346:                // make sure it's not a conditional
    #####: 8347:                if (Token::Match(end->link()->previous(), "if|for|while|switch|BOOST_FOREACH") || Token::Match(end->link()->tokAt(-2), ":|,"))
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 8348:                    return false;
        -: 8349:
        -: 8350:                // look backwards
    #####: 8351:                if (tok->previous()->str() == "enum" ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 8352:                    (Token::Match(tok->previous(), "%type%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8353:                     tok->previous()->str() != "return") ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 8354:                    Token::Match(tok->tokAt(-2), "%type% &|*")) {
call    0 never executed
call    1 never executed
        -: 8355:                    // duplicate definition so skip entire function
    #####: 8356:                    *tokPtr = end->next()->link();
call    0 never executed
call    1 never executed
    #####: 8357:                    return true;
        -: 8358:                }
    #####: 8359:            } else if (end->str() == ">") { // template parameter ?
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8360:                // look backwards
    #####: 8361:                if (tok->previous()->str() == "enum" ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 8362:                    (Token::Match(tok->previous(), "%type%") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8363:                     tok->previous()->str() != "return")) {
call    0 never executed
call    1 never executed
call    2 never executed
        -: 8364:                    // duplicate definition so skip entire template
    #####: 8365:                    while (end && end->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8366:                        end = end->next();
call    0 never executed
    #####: 8367:                    if (end) {
branch  0 never executed
branch  1 never executed
    #####: 8368:                        *tokPtr = end->link();
call    0 never executed
    #####: 8369:                        return true;
        -: 8370:                    }
        -: 8371:                }
        -: 8372:            } else {
    #####: 8373:                if (Token::Match(tok->previous(), "enum|,"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8374:                    return true;
    #####: 8375:                else if (Token::Match(tok->previous(), "%type%")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8376:                    // look backwards
    #####: 8377:                    const Token *back = tok;
    #####: 8378:                    while (back && back->isName())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 8379:                        back = back->previous();
call    0 never executed
    #####: 8380:                    if (!back || (Token::Match(back, "[(,;{}]") && !Token::Match(back->next(),"return|throw")))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####: 8381:                        return true;
        -: 8382:                }
        -: 8383:            }
        -: 8384:        }
        -: 8385:    }
    #####: 8386:    return false;
        -: 8387:}
        -: 8388:
        8: 8389:static const std::set<std::string> stdFunctionsPresentInC = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
branch 33 taken 88% (fallthrough)
branch 34 taken 13%
call   35 returned 100%
call   36 returned 100%
call   37 returned 100%
call   38 returned 100%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 never executed
branch 44 never executed
branch 45 never executed
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
        -: 8390:    "strcat",
        -: 8391:    "strcpy",
        -: 8392:    "strncat",
        -: 8393:    "strncpy",
        -: 8394:    "free",
        -: 8395:    "malloc",
        -: 8396:    "strdup"
        7: 8397:};
call    0 returned 100%
call    1 never executed
        -: 8398:
function _ZN9Tokenizer11simplifyStdEv called 0 returned 0% blocks executed 0%
    #####: 8399:void Tokenizer::simplifyStd()
        -: 8400:{
    #####: 8401:    if (isC())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8402:        return;
        -: 8403:
    #####: 8404:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8405:        if (tok->str() != "std")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8406:            continue;
        -: 8407:
    #####: 8408:        if (Token::Match(tok->previous(), "[(,{};] std :: %name% (") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 8409:            stdFunctionsPresentInC.find(tok->strAt(2)) != stdFunctionsPresentInC.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
    #####: 8410:            tok->deleteNext();
call    0 never executed
    #####: 8411:            tok->deleteThis();
call    0 never executed
        -: 8412:        }
        -: 8413:    }
        -: 8414:}
        -: 8415:
        -: 8416://---------------------------------------------------------------------------
        -: 8417:// Helper functions for handling the tokens list
        -: 8418://---------------------------------------------------------------------------
        -: 8419:
        -: 8420://---------------------------------------------------------------------------
        -: 8421:
function _ZNK9Tokenizer15IsScopeNoReturnEPK5TokenPb called 0 returned 0% blocks executed 0%
    #####: 8422:bool Tokenizer::IsScopeNoReturn(const Token *endScopeToken, bool *unknown) const
        -: 8423:{
    #####: 8424:    std::string unknownFunc;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 8425:    const bool ret = mSettings->library.isScopeNoReturn(endScopeToken,&unknownFunc);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8426:    if (unknown)
branch  0 never executed
branch  1 never executed
    #####: 8427:        *unknown = !unknownFunc.empty();
call    0 never executed
    #####: 8428:    if (!unknownFunc.empty() && mSettings->checkLibrary && mSettings->isEnabled(Settings::INFORMATION)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 8429:        // Is function global?
    #####: 8430:        bool globalFunction = true;
    #####: 8431:        if (Token::simpleMatch(endScopeToken->tokAt(-2), ") ; }")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8432:            const Token * const ftok = endScopeToken->linkAt(-2)->previous();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8433:            if (ftok &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8434:                ftok->isName() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8435:                ftok->function() &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8436:                ftok->function()->nestedIn &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8437:                ftok->function()->nestedIn->type != Scope::eGlobal) {
call    0 never executed
    #####: 8438:                globalFunction = false;
        -: 8439:            }
        -: 8440:        }
        -: 8441:
        -: 8442:        // don't warn for nonglobal functions (class methods, functions hidden in namespaces) since they can't be configured yet
        -: 8443:        // FIXME: when methods and namespaces can be configured properly, remove the "globalFunction" check
    #####: 8444:        if (globalFunction) {
branch  0 never executed
branch  1 never executed
    #####: 8445:            reportError(endScopeToken->previous(),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 8446:                        Severity::information,
        -: 8447:                        "checkLibraryNoReturn",
    #####: 8448:                        "--check-library: Function " + unknownFunc + "() should have <noreturn> configuration");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -: 8449:        }
        -: 8450:    }
    #####: 8451:    return ret;
        -: 8452:}
        -: 8453:
        -: 8454://---------------------------------------------------------------------------
        -: 8455:
function _ZNK9Tokenizer32isFunctionParameterPassedByValueEPK5Token called 0 returned 0% blocks executed 0%
    #####: 8456:bool Tokenizer::isFunctionParameterPassedByValue(const Token *fpar) const
        -: 8457:{
        -: 8458:    // TODO: If symbol database is available, use it.
        -: 8459:    const Token *ftok;
        -: 8460:
        -: 8461:    // Look at function call, what parameter number is it?
    #####: 8462:    int parameter = 1;
    #####: 8463:    for (ftok = fpar->previous(); ftok; ftok = ftok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8464:        if (ftok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8465:            break;
    #####: 8466:        else if (ftok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8467:            ftok = ftok->link();
call    0 never executed
    #####: 8468:        else if (ftok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8469:            ++parameter;
    #####: 8470:        else if (Token::Match(ftok, "[;{}]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8471:            break;
        -: 8472:    }
        -: 8473:
        -: 8474:    // Is this a function call?
    #####: 8475:    if (ftok && Token::Match(ftok->tokAt(-2), "[;{}=] %name% (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8476:        const std::string& functionName(ftok->previous()->str());
call    0 never executed
call    1 never executed
        -: 8477:
    #####: 8478:        if (functionName == "return")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8479:            return true;
        -: 8480:
        -: 8481:        // Locate function declaration..
    #####: 8482:        for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8483:            if (tok->str() == "{")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8484:                tok = tok->link();
call    0 never executed
    #####: 8485:            else if (Token::Match(tok, "%type% (") && tok->str() == functionName) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 8486:                // Goto parameter
    #####: 8487:                tok = tok->tokAt(2);
call    0 never executed
    #####: 8488:                int par = 1;
    #####: 8489:                while (tok && par < parameter) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8490:                    if (tok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8491:                        break;
    #####: 8492:                    if (tok->str() == ",")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8493:                        ++par;
    #####: 8494:                    tok = tok->next();
call    0 never executed
        -: 8495:                }
    #####: 8496:                if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 8497:                    return false;
        -: 8498:
        -: 8499:                // If parameter was found, determine if it's passed by value
    #####: 8500:                if (par == parameter) {
branch  0 never executed
branch  1 never executed
    #####: 8501:                    bool knowntype = false;
    #####: 8502:                    while (tok && tok->isName()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 8503:                        knowntype |= tok->isStandardType();
call    0 never executed
    #####: 8504:                        knowntype |= (tok->str() == "struct");
call    0 never executed
call    1 never executed
    #####: 8505:                        tok = tok->next();
call    0 never executed
        -: 8506:                    }
    #####: 8507:                    if (!tok || !knowntype)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8508:                        return false;
    #####: 8509:                    if (tok->str() != "," && tok->str() != ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 8510:                        return false;
    #####: 8511:                    return true;
        -: 8512:                }
        -: 8513:            }
        -: 8514:        }
        -: 8515:    }
    #####: 8516:    return false;
        -: 8517:}
        -: 8518:
        -: 8519://---------------------------------------------------------------------------
        -: 8520:
function _ZN9Tokenizer13eraseDeadCodeEP5TokenPKS0_ called 0 returned 0% blocks executed 0%
    #####: 8521:void Tokenizer::eraseDeadCode(Token *begin, const Token *end)
        -: 8522:{
    #####: 8523:    if (!begin)
branch  0 never executed
branch  1 never executed
    #####: 8524:        return;
    #####: 8525:    const bool isgoto = Token::Match(begin->tokAt(-2), "goto %name% ;");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8526:    int indentlevel = 1;
    #####: 8527:    int indentcase = 0;
    #####: 8528:    int indentswitch = 0;
    #####: 8529:    int indentlabel = 0;
    #####: 8530:    int roundbraces = 0;
    #####: 8531:    int indentcheck = 0;
    #####: 8532:    std::vector<int> switchindents;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 8533:    bool checklabel = false;
    #####: 8534:    Token *tok = begin;
    #####: 8535:    Token *tokcheck = nullptr;
    #####: 8536:    while (tok->next() && tok->next() != end) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8537:        if (tok->next()->str() == "(") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8538:            ++roundbraces;
    #####: 8539:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8540:            continue;
    #####: 8541:        } else if (tok->next()->str() == ")") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8542:            if (!roundbraces)
branch  0 never executed
branch  1 never executed
    #####: 8543:                break;  //too many ending round parentheses
    #####: 8544:            --roundbraces;
    #####: 8545:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8546:            continue;
        -: 8547:        }
        -: 8548:
    #####: 8549:        if (roundbraces) {
branch  0 never executed
branch  1 never executed
    #####: 8550:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8551:            continue;
        -: 8552:        }
        -: 8553:
    #####: 8554:        if (Token::Match(tok, "[{};] switch (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8555:            if (!checklabel) {
branch  0 never executed
branch  1 never executed
    #####: 8556:                if (!indentlabel) {
branch  0 never executed
branch  1 never executed
        -: 8557:                    //remove 'switch ( ... )'
    #####: 8558:                    Token::eraseTokens(tok, tok->linkAt(2)->next());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 8559:                } else {
    #####: 8560:                    tok = tok->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8561:                }
    #####: 8562:                if (tok->next()->str() == "{") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8563:                    ++indentswitch;
    #####: 8564:                    indentcase = indentlevel + 1;
    #####: 8565:                    switchindents.push_back(indentcase);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8566:                }
        -: 8567:            } else {
    #####: 8568:                tok = tok->linkAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8569:                if (Token::simpleMatch(tok, ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8570:                    ++indentswitch;
    #####: 8571:                    indentcase = indentlevel + 1;
    #####: 8572:                    switchindents.push_back(indentcase);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8573:                }
        -: 8574:            }
    #####: 8575:        } else if (tok->next()->str() == "{") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8576:            ++indentlevel;
    #####: 8577:            if (!checklabel) {
branch  0 never executed
branch  1 never executed
    #####: 8578:                checklabel = true;
    #####: 8579:                tokcheck = tok;
    #####: 8580:                indentcheck = indentlevel;
    #####: 8581:                indentlabel = 0;
        -: 8582:            }
    #####: 8583:            tok = tok->next();
call    0 never executed
    #####: 8584:        } else if (tok->next()->str() == "}") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8585:            --indentlevel;
    #####: 8586:            if (!indentlevel)
branch  0 never executed
branch  1 never executed
    #####: 8587:                break;
        -: 8588:
    #####: 8589:            if (!checklabel) {
branch  0 never executed
branch  1 never executed
    #####: 8590:                tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8591:            } else {
    #####: 8592:                if (indentswitch && indentlevel == indentcase)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8593:                    --indentlevel;
    #####: 8594:                if (indentlevel < indentcheck) {
branch  0 never executed
branch  1 never executed
    #####: 8595:                    const Token *end2 = tok->next();
call    0 never executed
    #####: 8596:                    tok = end2->link()->previous();  //return to initial '{'
call    0 never executed
call    1 never executed
    #####: 8597:                    if (indentswitch && Token::simpleMatch(tok, ") {") && Token::Match(tok->link()->tokAt(-2), "[{};] switch ("))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####: 8598:                        tok = tok->link()->tokAt(-2);       //remove also 'switch ( ... )'
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8599:                    Token::eraseTokens(tok, end2->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8600:                    checklabel = false;
    #####: 8601:                    tokcheck = nullptr;
    #####: 8602:                    indentcheck = 0;
        -: 8603:                } else {
    #####: 8604:                    tok = tok->next();
call    0 never executed
        -: 8605:                }
        -: 8606:            }
    #####: 8607:            if (indentswitch && indentlevel <= indentcase) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8608:                --indentswitch;
    #####: 8609:                switchindents.pop_back();
call    0 never executed
    #####: 8610:                if (!indentswitch)
branch  0 never executed
branch  1 never executed
    #####: 8611:                    indentcase = 0;
        -: 8612:                else
    #####: 8613:                    indentcase = switchindents[indentswitch-1];
call    0 never executed
        -: 8614:            }
    #####: 8615:        } else if (Token::Match(tok, "[{};:] case")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8616:            const Token *tok2 = Token::findsimplematch(tok->next(), ": ;", end);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8617:            if (!tok2) {
branch  0 never executed
branch  1 never executed
    #####: 8618:                tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8619:                continue;
        -: 8620:            }
    #####: 8621:            if (indentlevel == 1)
branch  0 never executed
branch  1 never executed
    #####: 8622:                break;      //it seems like the function was called inside a case-default block.
    #####: 8623:            if (indentlevel == indentcase)
branch  0 never executed
branch  1 never executed
    #####: 8624:                ++indentlevel;
    #####: 8625:            tok2 = tok2->next();
call    0 never executed
    #####: 8626:            if (!checklabel || !indentswitch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8627:                Token::eraseTokens(tok, tok2->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8628:            } else {
    #####: 8629:                tok = const_cast<Token *>(tok2);
        -: 8630:            }
    #####: 8631:        }  else if (Token::Match(tok, "[{};] default : ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8632:            if (indentlevel == 1)
branch  0 never executed
branch  1 never executed
    #####: 8633:                break;      //it seems like the function was called inside a case-default block.
    #####: 8634:            if (indentlevel == indentcase)
branch  0 never executed
branch  1 never executed
    #####: 8635:                ++indentlevel;
    #####: 8636:            if (!checklabel || !indentswitch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8637:                tok->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8638:            } else {
    #####: 8639:                tok = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8640:            }
    #####: 8641:        } else if (Token::Match(tok, "[{};] %name% : ;") && tok->next()->str() != "default") {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 8642:            if (checklabel) {
branch  0 never executed
branch  1 never executed
    #####: 8643:                indentlabel = indentlevel;
    #####: 8644:                tok = tokcheck->next();
call    0 never executed
    #####: 8645:                checklabel = false;
    #####: 8646:                indentlevel = indentcheck;
        -: 8647:            } else {
    #####: 8648:                if (indentswitch) {
branch  0 never executed
branch  1 never executed
        -: 8649:                    //Before stopping the function, since the 'switch()'
        -: 8650:                    //instruction is removed, there's no sense to keep the
        -: 8651:                    //case instructions. Remove them, if there are any.
    #####: 8652:                    Token *tok2 = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8653:                    int indentlevel2 = indentlevel;
    #####: 8654:                    while (tok2->next() && tok2->next() != end) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8655:                        if (Token::Match(tok2->next(), "{|[|(")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8656:                            tok2 = tok2->next()->link();
call    0 never executed
call    1 never executed
    #####: 8657:                        } else if (Token::Match(tok2, "[{};:] case")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8658:                            const Token *tok3 = Token::findsimplematch(tok2->next(), ": ;", end);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8659:                            if (!tok3) {
branch  0 never executed
branch  1 never executed
    #####: 8660:                                tok2 = tok2->next();
call    0 never executed
    #####: 8661:                                continue;
        -: 8662:                            }
    #####: 8663:                            Token::eraseTokens(tok2, tok3->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8664:                        } else if (Token::Match(tok2, "[{};] default : ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8665:                            tok2->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8666:                        } else if (tok2->next()->str() == "}") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 8667:                            --indentlevel2;
    #####: 8668:                            if (indentlevel2 <= indentcase)
branch  0 never executed
branch  1 never executed
    #####: 8669:                                break;
    #####: 8670:                            tok2 = tok2->next();
call    0 never executed
        -: 8671:                        } else {
    #####: 8672:                            tok2 = tok2->next();
call    0 never executed
        -: 8673:                        }
        -: 8674:                    }
        -: 8675:                }
    #####: 8676:                break;  //stop removing tokens, we arrived to the label.
        -: 8677:            }
    #####: 8678:        } else if (isgoto && Token::Match(tok, "[{};] do|while|for|BOOST_FOREACH")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 8679:            //it's possible that code inside loop is not dead,
        -: 8680:            //because of the possible presence of the label pointed by 'goto'
    #####: 8681:            const Token *start = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8682:            if (start && start->str() == "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8683:                start = start->link()->next();
call    0 never executed
call    1 never executed
    #####: 8684:            if (start && start->str() == "{") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8685:                std::string labelpattern = "[{};] " + begin->previous()->str() + " : ;";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####: 8686:                bool simplify = true;
    #####: 8687:                for (Token *tok2 = start->next(); tok2 != start->link(); tok2 = tok2->next()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####: 8688:                    if (Token::Match(tok2, labelpattern.c_str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8689:                        simplify = false;
    #####: 8690:                        break;
        -: 8691:                    }
        -: 8692:                }
        -: 8693:                //bailout for now
    #####: 8694:                if (!simplify)
branch  0 never executed
branch  1 never executed
    #####: 8695:                    break;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8696:            }
    #####: 8697:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8698:        } else {
        -: 8699:            // no need to keep the other strings, remove them.
    #####: 8700:            if (tok->strAt(1) == "while") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8701:                if (tok->str() == "}" && tok->link()->strAt(-1) == "do")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 8702:                    tok->link()->previous()->deleteThis();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 8703:            }
    #####: 8704:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8705:        }
        -: 8706:    }
        -: 8707:}
        -: 8708:
        -: 8709://---------------------------------------------------------------------------
        -: 8710:
function _ZNK9Tokenizer11syntaxErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8711:void Tokenizer::syntaxError(const Token *tok, const std::string &code) const
        -: 8712:{
    #####: 8713:    printDebugOutput(0);
call    0 never executed
    #####: 8714:    throw InternalError(tok, code.empty() ? "syntax error" : "syntax error: " + code, InternalError::SYNTAX);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
        -: 8715:}
        -: 8716:
function _ZNK9Tokenizer14unmatchedTokenEPK5Token called 0 returned 0% blocks executed 0%
    #####: 8717:void Tokenizer::unmatchedToken(const Token *tok) const
        -: 8718:{
    #####: 8719:    printDebugOutput(0);
call    0 never executed
        -: 8720:    throw InternalError(tok,
    #####: 8721:                        "Unmatched '" + tok->str() + "'. Configuration: '" + mConfiguration + "'.",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    #####: 8722:                        InternalError::SYNTAX);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -: 8723:}
        -: 8724:
function _ZNK9Tokenizer12syntaxErrorCEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8725:void Tokenizer::syntaxErrorC(const Token *tok, const std::string &what) const
        -: 8726:{
    #####: 8727:    printDebugOutput(0);
call    0 never executed
    #####: 8728:    throw InternalError(tok, "Code '"+what+"' is invalid C code. Use --std or --language to configure the language.", InternalError::SYNTAX);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        -: 8729:}
        -: 8730:
function _ZNK9Tokenizer17unknownMacroErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 8731:void Tokenizer::unknownMacroError(const Token *tok1) const
        -: 8732:{
    #####: 8733:    printDebugOutput(0);
call    0 never executed
    #####: 8734:    throw InternalError(tok1, "There is an unknown macro here somewhere. Configuration is required. If " + tok1->str() + " is a macro then please configure it.", InternalError::UNKNOWN_MACRO);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -: 8735:}
        -: 8736:
function _ZNK9Tokenizer25unhandled_macro_class_x_yEPK5Token called 0 returned 0% blocks executed 0%
    #####: 8737:void Tokenizer::unhandled_macro_class_x_y(const Token *tok) const
        -: 8738:{
    #####: 8739:    reportError(tok,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 8740:                Severity::information,
        -: 8741:                "class_X_Y",
    #####: 8742:                "The code '" +
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 8743:                tok->str() + " " +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8744:                tok->strAt(1) + " " +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8745:                tok->strAt(2) + " " +
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 8746:                tok->strAt(3) + "' is not handled. You can use -I or --include to add handling of this code.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 8747:}
        -: 8748:
function _ZNK9Tokenizer23macroWithSemicolonErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8749:void Tokenizer::macroWithSemicolonError(const Token *tok, const std::string &macroName) const
        -: 8750:{
    #####: 8751:    reportError(tok,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 8752:                Severity::information,
        -: 8753:                "macroWithSemicolon",
    #####: 8754:                "Ensure that '" + macroName + "' is defined either using -I, --include or -D.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####: 8755:}
        -: 8756:
function _ZNK9Tokenizer13cppcheckErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####: 8757:void Tokenizer::cppcheckError(const Token *tok) const
        -: 8758:{
    #####: 8759:    printDebugOutput(0);
call    0 never executed
    #####: 8760:    throw InternalError(tok, "Analysis failed. If the code is valid then please report this failure.", InternalError::INTERNAL);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 8761:}
        -: 8762:/**
        -: 8763: * Helper function to check whether number is equal to integer constant X
        -: 8764: * or floating point pattern X.0
        -: 8765: * @param s the string to check
        -: 8766: * @param intConstant the integer constant to check against
        -: 8767: * @param floatConstant the string with stringified float constant to check against
        -: 8768: * @return true in case s is equal to X or X.0 and false otherwise.
        -: 8769: */
function _ZL13isNumberOneOfRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKxPKc called 0 returned 0% blocks executed 0%
    #####: 8770:static bool isNumberOneOf(const std::string &s, const MathLib::bigint& intConstant, const char* floatConstant)
        -: 8771:{
    #####: 8772:    if (MathLib::isInt(s)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8773:        if (MathLib::toLongNumber(s) == intConstant)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8774:            return true;
    #####: 8775:    } else if (MathLib::isFloat(s)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8776:        if (MathLib::toString(MathLib::toDoubleNumber(s)) == floatConstant)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 8777:            return true;
        -: 8778:    }
    #####: 8779:    return false;
        -: 8780:}
        -: 8781:
        -: 8782:// ------------------------------------------------------------------------
        -: 8783:// Helper function to check whether number is zero (0 or 0.0 or 0E+0) or not?
        -: 8784:// @param s the string to check
        -: 8785:// @return true in case s is zero and false otherwise.
        -: 8786:// ------------------------------------------------------------------------
function _ZN9Tokenizer12isZeroNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8787:bool Tokenizer::isZeroNumber(const std::string &s)
        -: 8788:{
    #####: 8789:    return isNumberOneOf(s, 0L, "0.0");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8790:}
        -: 8791:
        -: 8792:// ------------------------------------------------------------------------
        -: 8793:// Helper function to check whether number is one (1 or 0.1E+1 or 1E+0) or not?
        -: 8794:// @param s the string to check
        -: 8795:// @return true in case s is one and false otherwise.
        -: 8796:// ------------------------------------------------------------------------
function _ZN9Tokenizer11isOneNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8797:bool Tokenizer::isOneNumber(const std::string &s)
        -: 8798:{
    #####: 8799:    if (!MathLib::isPositive(s))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8800:        return false;
    #####: 8801:    return isNumberOneOf(s, 1L, "1.0");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8802:}
        -: 8803:
        -: 8804:// ------------------------------------------------------------------------
        -: 8805:// Helper function to check whether number is two (2 or 0.2E+1 or 2E+0) or not?
        -: 8806:// @param s the string to check
        -: 8807:// @return true in case s is two and false otherwise.
        -: 8808:// ------------------------------------------------------------------------
function _ZN9Tokenizer11isTwoNumberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 8809:bool Tokenizer::isTwoNumber(const std::string &s)
        -: 8810:{
    #####: 8811:    if (!MathLib::isPositive(s))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8812:        return false;
    #####: 8813:    return isNumberOneOf(s, 2L, "2.0");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8814:}
        -: 8815:
        -: 8816:// ------------------------------------------------------
        -: 8817:// Simplify math functions.
        -: 8818:// It simplifies the following functions: atol(), fmin(),
        -: 8819:// fminl(), fminf(), fmax(), fmaxl(), fmaxf(), pow(),
        -: 8820:// powf(), powl(), cbrt(), cbrtl(), cbtrf(), sqrt(),
        -: 8821:// sqrtf(), sqrtl(), exp(), expf(), expl(), exp2(),
        -: 8822:// exp2f(), exp2l(), log2(), log2f(), log2l(), log1p(),
        -: 8823:// log1pf(), log1pl(), log10(), log10l(), log10f(),
        -: 8824:// log(), logf(), logl(), logb(), logbf(), logbl(), acosh()
        -: 8825:// acoshf(), acoshl(), acos(), acosf(), acosl(), cosh()
        -: 8826:// coshf(), coshf(), cos(), cosf(), cosl(), erfc(),
        -: 8827:// erfcf(), erfcl(), ilogb(), ilogbf(), ilogbf(), erf(),
        -: 8828:// erfl(), erff(), asin(), asinf(), asinf(), asinh(),
        -: 8829:// asinhf(), asinhl(), tan(), tanf(), tanl(), tanh(),
        -: 8830:// tanhf(), tanhl(), atan(), atanf(), atanl(), atanh(),
        -: 8831:// atanhf(), atanhl(), expm1(), expm1l(), expm1f(), sin(),
        -: 8832:// sinf(), sinl(), sinh(), sinhf(), sinhl()
        -: 8833:// in the tokenlist.
        -: 8834://
        -: 8835:// Reference:
        -: 8836:// - http://www.cplusplus.com/reference/cmath/
        -: 8837:// ------------------------------------------------------
function _ZN9Tokenizer21simplifyMathFunctionsEv called 0 returned 0% blocks executed 0%
    #####: 8838:void Tokenizer::simplifyMathFunctions()
        -: 8839:{
    #####: 8840:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 8841:        if (tok->isName() && !tok->varId() && tok->strAt(1) == "(") { // precondition for function
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 8842:            bool simplifcationMade = false;
    #####: 8843:            if (Token::Match(tok, "atol ( %str% )")) { //@todo Add support for atoll()
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8844:                if (Token::simpleMatch(tok->tokAt(-2), "std ::")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 8845:                    tok = tok->tokAt(-2);// set token index two steps back
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8846:                    tok->deleteNext(2);  // delete "std ::"
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8847:                }
    #####: 8848:                const std::string& strNumber = tok->tokAt(2)->strValue(); // get number
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####: 8849:                const bool isNotAnInteger = (!MathLib::isInt(strNumber));// check: is not an integer
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8850:                if (strNumber.empty() || isNotAnInteger) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 8851:                    // Ignore strings which we can't convert
    #####: 8852:                    continue;
        -: 8853:                }
        -: 8854:                // Convert string into a number and insert into token list
    #####: 8855:                tok->str(MathLib::toString(MathLib::toLongNumber(strNumber)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 8856:                // remove ( %num% )
    #####: 8857:                tok->deleteNext(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8858:                simplifcationMade = true;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8859:            } else if (Token::Match(tok, "sqrt|sqrtf|sqrtl|cbrt|cbrtf|cbrtl ( %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8860:                // Simplify: sqrt(0) = 0 and cbrt(0) == 0
        -: 8861:                //           sqrt(1) = 1 and cbrt(1) == 1
        -: 8862:                // get number string
    #####: 8863:                const std::string& parameter(tok->strAt(2));
call    0 never executed
        -: 8864:                // is parameter 0 ?
    #####: 8865:                if (isZeroNumber(parameter)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8866:                    tok->deleteNext(3);  // delete tokens
call    0 never executed
    #####: 8867:                    tok->str("0"); // insert result into token list
call    0 never executed
    #####: 8868:                    simplifcationMade = true;
    #####: 8869:                } else if (isOneNumber(parameter)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8870:                    tok->deleteNext(3);  // delete tokens
call    0 never executed
    #####: 8871:                    tok->str("1"); // insert result into token list
call    0 never executed
    #####: 8872:                    simplifcationMade = true;
        -: 8873:                }
    #####: 8874:            } else if (Token::Match(tok, "exp|expf|expl|exp2|exp2f|exp2l|cos|cosf|cosl|cosh|coshf|coshl|erfc|erfcf|erfcl ( %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8875:                // Simplify: exp[f|l](0)  = 1 and exp2[f|l](0) = 1
        -: 8876:                //           cosh[f|l](0) = 1 and cos[f|l](0)  = 1
        -: 8877:                //           erfc[f|l](0) = 1
        -: 8878:                // get number string
    #####: 8879:                const std::string& parameter(tok->strAt(2));
call    0 never executed
        -: 8880:                // is parameter 0 ?
    #####: 8881:                if (isZeroNumber(parameter)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8882:                    tok->deleteNext(3);  // delete tokens
call    0 never executed
    #####: 8883:                    tok->str("1"); // insert result into token list
call    0 never executed
    #####: 8884:                    simplifcationMade = true;
        -: 8885:                }
    #####: 8886:            } else if (Token::Match(tok, "log1p|log1pf|log1pl|sin|sinf|sinl|sinh|sinhf|sinhl|erf|erff|erfl|asin|asinf|asinl|asinh|asinhf|asinhl|tan|tanf|tanl|tanh|tanhf|tanhl|atan|atanf|atanl|atanh|atanhf|atanhl|expm1|expm1f|expm1l ( %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8887:                // Simplify: log1p[f|l](0) = 0 and sin[f|l](0)  = 0
        -: 8888:                //           sinh[f|l](0)  = 0 and erf[f|l](0)  = 0
        -: 8889:                //           asin[f|l](0)  = 0 and sinh[f|l](0) = 0
        -: 8890:                //           tan[f|l](0)   = 0 and tanh[f|l](0) = 0
        -: 8891:                //           atan[f|l](0)  = 0 and atanh[f|l](0)= 0
        -: 8892:                //           expm1[f|l](0) = 0
        -: 8893:                // get number string
    #####: 8894:                const std::string& parameter(tok->strAt(2));
call    0 never executed
        -: 8895:                // is parameter 0 ?
    #####: 8896:                if (isZeroNumber(parameter)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8897:                    tok->deleteNext(3);  // delete tokens
call    0 never executed
    #####: 8898:                    tok->str("0"); // insert result into token list
call    0 never executed
    #####: 8899:                    simplifcationMade = true;
        -: 8900:                }
    #####: 8901:            } else if (Token::Match(tok, "log2|log2f|log2l|log|logf|logl|log10|log10f|log10l|logb|logbf|logbl|acosh|acoshf|acoshl|acos|acosf|acosl|ilogb|ilogbf|ilogbl ( %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8902:                // Simplify: log2[f|l](1)  = 0 , log10[f|l](1)  = 0
        -: 8903:                //           log[f|l](1)   = 0 , logb10[f|l](1) = 0
        -: 8904:                //           acosh[f|l](1) = 0 , acos[f|l](1)   = 0
        -: 8905:                //           ilogb[f|l](1) = 0
        -: 8906:                // get number string
    #####: 8907:                const std::string& parameter(tok->strAt(2));
call    0 never executed
        -: 8908:                // is parameter 1 ?
    #####: 8909:                if (isOneNumber(parameter)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8910:                    tok->deleteNext(3);  // delete tokens
call    0 never executed
    #####: 8911:                    tok->str("0"); // insert result into token list
call    0 never executed
    #####: 8912:                    simplifcationMade = true;
        -: 8913:                }
    #####: 8914:            } else if (Token::Match(tok, "fmin|fminl|fminf ( %num% , %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8915:                // @todo if one of the parameters is NaN the other is returned
        -: 8916:                // e.g. printf ("fmin (NaN, -1.0) = %f\n", fmin(NaN,-1.0));
        -: 8917:                // e.g. printf ("fmin (-1.0, NaN) = %f\n", fmin(-1.0,NaN));
    #####: 8918:                const std::string& strLeftNumber(tok->strAt(2));
call    0 never executed
    #####: 8919:                const std::string& strRightNumber(tok->strAt(4));
call    0 never executed
    #####: 8920:                const bool isLessEqual =  MathLib::isLessEqual(strLeftNumber, strRightNumber);
call    0 never executed
        -: 8921:                // case: left <= right ==> insert left
    #####: 8922:                if (isLessEqual) {
branch  0 never executed
branch  1 never executed
    #####: 8923:                    tok->str(strLeftNumber); // insert e.g. -1.0
call    0 never executed
    #####: 8924:                    tok->deleteNext(5);      // delete e.g. fmin ( -1.0, 1.0 )
call    0 never executed
    #####: 8925:                    simplifcationMade = true;
        -: 8926:                } else { // case left > right ==> insert right
    #####: 8927:                    tok->str(strRightNumber); // insert e.g. 0.0
call    0 never executed
    #####: 8928:                    tok->deleteNext(5);       // delete e.g. fmin ( 1.0, 0.0 )
call    0 never executed
    #####: 8929:                    simplifcationMade = true;
        -: 8930:                }
    #####: 8931:            } else if (Token::Match(tok, "fmax|fmaxl|fmaxf ( %num% , %num% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 8932:                // @todo if one of the parameters is NaN the other is returned
        -: 8933:                // e.g. printf ("fmax (NaN, -1.0) = %f\n", fmax(NaN,-1.0));
        -: 8934:                // e.g. printf ("fmax (-1.0, NaN) = %f\n", fmax(-1.0,NaN));
    #####: 8935:                const std::string& strLeftNumber(tok->strAt(2));
call    0 never executed
    #####: 8936:                const std::string& strRightNumber(tok->strAt(4));
call    0 never executed
    #####: 8937:                const bool isLessEqual =  MathLib::isLessEqual(strLeftNumber, strRightNumber);
call    0 never executed
        -: 8938:                // case: left <= right ==> insert right
    #####: 8939:                if (isLessEqual) {
branch  0 never executed
branch  1 never executed
    #####: 8940:                    tok->str(strRightNumber);// insert e.g. 1.0
call    0 never executed
    #####: 8941:                    tok->deleteNext(5);      // delete e.g. fmax ( -1.0, 1.0 )
call    0 never executed
    #####: 8942:                    simplifcationMade = true;
        -: 8943:                } else { // case left > right ==> insert left
    #####: 8944:                    tok->str(strLeftNumber);  // insert e.g. 1.0
call    0 never executed
    #####: 8945:                    tok->deleteNext(5);       // delete e.g. fmax ( 1.0, 0.0 )
call    0 never executed
    #####: 8946:                    simplifcationMade = true;
        -: 8947:                }
    #####: 8948:            } else if (Token::Match(tok, "pow|powf|powl (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8949:                if (Token::Match(tok->tokAt(2), "%num% , %num% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8950:                    // In case of pow ( 0 , anyNumber > 0): It can be simplified to 0
        -: 8951:                    // In case of pow ( 0 , 0 ): It simplified to 1
        -: 8952:                    // In case of pow ( 1 , anyNumber ): It simplified to 1
    #####: 8953:                    const std::string& leftNumber(tok->strAt(2)); // get the left parameter
call    0 never executed
    #####: 8954:                    const std::string& rightNumber(tok->strAt(4)); // get the right parameter
call    0 never executed
    #####: 8955:                    const bool isLeftNumberZero = isZeroNumber(leftNumber);
call    0 never executed
    #####: 8956:                    const bool isLeftNumberOne = isOneNumber(leftNumber);
call    0 never executed
    #####: 8957:                    const bool isRightNumberZero = isZeroNumber(rightNumber);
call    0 never executed
    #####: 8958:                    if (isLeftNumberZero && !isRightNumberZero && MathLib::isPositive(rightNumber)) { // case: 0^(y) = 0 and y > 0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 8959:                        tok->deleteNext(5); // delete tokens
call    0 never executed
    #####: 8960:                        tok->str("0");  // insert simplified result
call    0 never executed
    #####: 8961:                        simplifcationMade = true;
    #####: 8962:                    } else if (isLeftNumberZero && isRightNumberZero) { // case: 0^0 = 1
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 8963:                        tok->deleteNext(5); // delete tokens
call    0 never executed
    #####: 8964:                        tok->str("1");  // insert simplified result
call    0 never executed
    #####: 8965:                        simplifcationMade = true;
    #####: 8966:                    } else if (isLeftNumberOne) { // case 1^(y) = 1
branch  0 never executed
branch  1 never executed
    #####: 8967:                        tok->deleteNext(5); // delete tokens
call    0 never executed
    #####: 8968:                        tok->str("1");  // insert simplified result
call    0 never executed
    #####: 8969:                        simplifcationMade = true;
        -: 8970:                    }
        -: 8971:                }
    #####: 8972:                if (Token::Match(tok->tokAt(2), "%any% , %num% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 8973:                    // In case of pow( x , 1 ): It can be simplified to x.
    #####: 8974:                    const std::string& leftParameter(tok->strAt(2)); // get the left parameter
call    0 never executed
    #####: 8975:                    const std::string& rightNumber(tok->strAt(4)); // get right number
call    0 never executed
    #####: 8976:                    if (isOneNumber(rightNumber)) { // case: x^(1) = x
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8977:                        tok->str(leftParameter);  // insert simplified result
call    0 never executed
    #####: 8978:                        tok->deleteNext(5); // delete tokens
call    0 never executed
    #####: 8979:                        simplifcationMade = true;
    #####: 8980:                    } else if (isZeroNumber(rightNumber)) { // case: x^(0) = 1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 8981:                        tok->deleteNext(5); // delete tokens
call    0 never executed
    #####: 8982:                        tok->str("1");  // insert simplified result
call    0 never executed
    #####: 8983:                        simplifcationMade = true;
        -: 8984:                    }
        -: 8985:                }
        -: 8986:            }
        -: 8987:            // Jump back to begin of statement if a simplification was performed
    #####: 8988:            if (simplifcationMade) {
branch  0 never executed
branch  1 never executed
    #####: 8989:                while (tok->previous() && tok->str() != ";") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 8990:                    tok = tok->previous();
call    0 never executed
        -: 8991:                }
        -: 8992:            }
        -: 8993:        }
        -: 8994:    }
    #####: 8995:}
        -: 8996:
function _ZN9Tokenizer13simplifyCommaEv called 0 returned 0% blocks executed 0%
    #####: 8997:void Tokenizer::simplifyComma()
        -: 8998:{
    #####: 8999:    bool inReturn = false;
        -: 9000:
    #####: 9001:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 9002:
        -: 9003:        // skip enums
    #####: 9004:        if (Token::Match(tok, "enum class|struct| %name%| :|{")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9005:            skipEnumBody(&tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9006:        }
    #####: 9007:        if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 9008:            syntaxError(nullptr); // invalid code like in #4195
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9009:
    #####: 9010:        if (Token::Match(tok, "(|[") || Token::Match(tok->previous(), "%name%|= {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 9011:            tok = tok->link();
call    0 never executed
    #####: 9012:            continue;
        -: 9013:        }
        -: 9014:
    #####: 9015:        if (Token::simpleMatch(tok, "= (") && Token::simpleMatch(tok->linkAt(1), ") {")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 9016:            tok = tok->linkAt(1)->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9017:            continue;
        -: 9018:        }
        -: 9019:
        -: 9020:        // Skip unhandled template specifiers..
    #####: 9021:        if (tok->link() && tok->str() == "<")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9022:            tok = tok->link();
call    0 never executed
        -: 9023:
    #####: 9024:        if (tok->str() == "return" && Token::Match(tok->previous(), "[;{}]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9025:            inReturn = true;
        -: 9026:
    #####: 9027:        if (inReturn && Token::Match(tok, "[;{}?:]"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9028:            inReturn = false;
        -: 9029:
    #####: 9030:        if (!tok->next() || tok->str() != ",")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9031:            continue;
        -: 9032:
        -: 9033:        // We must not accept just any keyword, e.g. accepting int
        -: 9034:        // would cause function parameters to corrupt.
    #####: 9035:        if (isCPP() && tok->strAt(1) == "delete") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 9036:            // Handle "delete a, delete b;"
    #####: 9037:            tok->str(";");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9038:        }
        -: 9039:
    #####: 9040:        if (isCPP() && Token::Match(tok->tokAt(-2), "delete %name% , %name% ;") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####: 9041:            tok->next()->varId() != 0) {
call    0 never executed
call    1 never executed
        -: 9042:            // Handle "delete a, b;" - convert to delete a; b;
    #####: 9043:            tok->str(";");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9044:        } else if (!inReturn && tok->tokAt(-2)) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9045:            bool replace = false;
    #####: 9046:            for (Token *tok2 = tok->previous(); tok2; tok2 = tok2->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9047:                if (tok2->str() == "=") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 9048:                    // Handle "a = 0, b = 0;"
    #####: 9049:                    replace = true;
    #####: 9050:                } else if (isCPP() && (Token::Match(tok2, "delete %name%") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9051:                                       Token::Match(tok2, "delete [ ] %name%"))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9052:                    // Handle "delete a, a = 0;"
    #####: 9053:                    replace = true;
    #####: 9054:                } else if (Token::Match(tok2, "[?:;,{}()]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9055:                    if (replace && Token::Match(tok2, "[;{}]"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9056:                        tok->str(";");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9057:                    break;
        -: 9058:                }
        -: 9059:            }
        -: 9060:        }
        -: 9061:
        -: 9062:        // find token where return ends and also count commas
    #####: 9063:        if (inReturn) {
branch  0 never executed
branch  1 never executed
    #####: 9064:            Token *startFrom = nullptr;    // "[;{}]" token before "return"
    #####: 9065:            Token *endAt = nullptr;        // first ";" token after "[;{}] return"
        -: 9066:
        -: 9067:            // find "; return" pattern before comma
    #####: 9068:            for (Token *tok2 = tok->previous(); tok2; tok2 = tok2->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9069:                if (tok2->str() == "return") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9070:                    startFrom = tok2->previous();
call    0 never executed
    #####: 9071:                    break;
        -: 9072:                }
        -: 9073:            }
    #####: 9074:            if (!startFrom)
branch  0 never executed
branch  1 never executed
        -: 9075:                // to be very sure...
    #####: 9076:                return;
    #####: 9077:            int commaCounter = 0;
    #####: 9078:            for (Token *tok2 = startFrom->next(); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9079:                if (tok2->str() == ";") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9080:                    endAt = tok2;
    #####: 9081:                    break;
        -: 9082:
    #####: 9083:                } else if (Token::Match(tok2, "(|[") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9084:                           (tok2->str() == "{" && tok2->previous() && tok2->previous()->str() == "=")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 9085:                    tok2 = tok2->link();
call    0 never executed
        -: 9086:
    #####: 9087:                } else if (tok2->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9088:                    ++commaCounter;
        -: 9089:                }
        -: 9090:            }
        -: 9091:
    #####: 9092:            if (!endAt)
branch  0 never executed
branch  1 never executed
        -: 9093:                //probably a syntax error
    #####: 9094:                return;
        -: 9095:
    #####: 9096:            if (commaCounter) {
branch  0 never executed
branch  1 never executed
        -: 9097:                // change tokens:
        -: 9098:                // "; return a ( ) , b ( ) , c ;"
        -: 9099:                // to
        -: 9100:                // "; a ( ) ; b ( ) ; return c ;"
        -: 9101:
        -: 9102:                // remove "return"
    #####: 9103:                startFrom->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9104:                for (Token *tok2 = startFrom->next(); tok2 != endAt; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9105:                    if (Token::Match(tok2, "(|[") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9106:                        (tok2->str() == "{" && tok2->previous() && tok2->previous()->str() == "=")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 9107:                        tok2 = tok2->link();
call    0 never executed
        -: 9108:
    #####: 9109:                    } else if (tok2->str() == ",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9110:                        tok2->str(";");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9111:                        --commaCounter;
    #####: 9112:                        if (commaCounter == 0) {
branch  0 never executed
branch  1 never executed
    #####: 9113:                            tok2->insertToken("return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9114:                        }
        -: 9115:                    }
        -: 9116:                }
    #####: 9117:                tok = endAt;
        -: 9118:            }
        -: 9119:        }
        -: 9120:    }
        -: 9121:}
        -: 9122:
function _ZNK9Tokenizer18checkConfigurationEv called 956 returned 100% blocks executed 10%
      956: 9123:void Tokenizer::checkConfiguration() const
        -: 9124:{
      956: 9125:    if (!mSettings->checkConfiguration)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      956: 9126:        return;
    #####: 9127:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9128:        if (!Token::Match(tok, "%name% ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9129:            continue;
    #####: 9130:        if (tok->isControlFlowKeyword())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9131:            continue;
    #####: 9132:        for (const Token *tok2 = tok->tokAt(2); tok2 && tok2->str() != ")"; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 9133:            if (tok2->str() == ";") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9134:                macroWithSemicolonError(tok, tok->str());
call    0 never executed
call    1 never executed
    #####: 9135:                break;
        -: 9136:            }
    #####: 9137:            if (Token::Match(tok2, "(|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9138:                tok2 = tok2->link();
call    0 never executed
        -: 9139:        }
        -: 9140:    }
        -: 9141:}
        -: 9142:
function _ZNK9Tokenizer9validateCEv called 956 returned 100% blocks executed 24%
      956: 9143:void Tokenizer::validateC() const
        -: 9144:{
      956: 9145:    if (isCPP())
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
      934: 9146:        return;
      585: 9147:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
        -: 9148:        // That might trigger false positives, but it's much faster to have this truncated pattern
      563: 9149:        if (Token::Match(tok, "const_cast|dynamic_cast|reinterpret_cast|static_cast <"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9150:            syntaxErrorC(tok, "C++ cast <...");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9151:        // Template function..
      563: 9152:        if (Token::Match(tok, "%name% < %name% > (")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9153:            const Token *tok2 = tok->tokAt(5);
call    0 never executed
    #####: 9154:            while (tok2 && !Token::Match(tok2, "[()]"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9155:                tok2 = tok2->next();
call    0 never executed
    #####: 9156:            if (Token::simpleMatch(tok2, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9157:                syntaxErrorC(tok, tok->str() + '<' + tok->strAt(2) + ">() {}");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -: 9158:        }
      563: 9159:        if (tok->previous() && !Token::Match(tok->previous(), "[;{}]"))
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 85% (fallthrough)
branch  6 taken 15%
branch  7 taken 81% (fallthrough)
branch  8 taken 19%
      458: 9160:            continue;
      105: 9161:        if (Token::Match(tok, "using namespace %name% ;"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9162:            syntaxErrorC(tok, "using namespace " + tok->strAt(2));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
      105: 9163:        if (Token::Match(tok, "template < class|typename %name% [,>]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9164:            syntaxErrorC(tok, "template<...");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
      105: 9165:        if (Token::Match(tok, "%name% :: %name%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9166:            syntaxErrorC(tok, tok->str() + tok->strAt(1) + tok->strAt(2));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
      105: 9167:        if (Token::Match(tok, "class|namespace %name% [:{]"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9168:            syntaxErrorC(tok, tok->str() + tok->strAt(1) + tok->strAt(2));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 9169:    }
        -: 9170:}
        -: 9171:
function _ZNK9Tokenizer8validateEv called 6648 returned 100% blocks executed 71%
     6648: 9172:void Tokenizer::validate() const
        -: 9173:{
    13296: 9174:    std::stack<const Token *> linkTokens;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     6648: 9175:    const Token *lastTok = nullptr;
   206815: 9176:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
   200167: 9177:        lastTok = tok;
   200167: 9178:        if (Token::Match(tok, "[{([]") || (tok->str() == "<" && tok->link())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 84% (fallthrough)
branch  4 taken 16%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
call    9 returned 100%
branch 10 taken 7% (fallthrough)
branch 11 taken 93%
branch 12 taken 16% (fallthrough)
branch 13 taken 84%
    32853: 9179:            if (tok->link() == nullptr)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9180:                cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9181:
    32853: 9182:            linkTokens.push(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9183:        }
        -: 9184:
   167314: 9185:        else if (Token::Match(tok, "[})]]") || (Token::Match(tok, ">|>>") && tok->link())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
call   10 returned 100%
branch 11 taken 8% (fallthrough)
branch 12 taken 92%
branch 13 taken 20% (fallthrough)
branch 14 taken 80%
    32853: 9186:            if (tok->link() == nullptr)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9187:                cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9188:
    32853: 9189:            if (linkTokens.empty() == true)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9190:                cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9191:
    32853: 9192:            if (tok->link() != linkTokens.top())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9193:                cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9194:
    32853: 9195:            if (tok != tok->link()->link())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9196:                cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9197:
    32853: 9198:            linkTokens.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9199:        }
        -: 9200:
   134461: 9201:        else if (tok->link() != nullptr)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9202:            cppcheckError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9203:    }
        -: 9204:
     6648: 9205:    if (!linkTokens.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9206:        cppcheckError(linkTokens.top());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 9207:
        -: 9208:    // Validate that the Tokenizer::list.back() is updated correctly during simplifications
     6648: 9209:    if (lastTok != list.back())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9210:        cppcheckError(lastTok);
call    0 never executed
branch  1 never executed
branch  2 never executed
     6648: 9211:}
        -: 9212:
function _ZL22findUnmatchedTernaryOpPK5TokenS1_i called 2373 returned 100% blocks executed 88%
     2373: 9213:static const Token *findUnmatchedTernaryOp(const Token * const begin, const Token * const end, int depth = 0)
        -: 9214:{
     4746: 9215:    std::stack<const Token *> ternaryOp;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
    13259: 9216:    for (const Token *tok = begin; tok != end && tok->str() != ";"; tok = tok->next()) {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 93% (fallthrough)
branch  5 taken 7%
branch  6 taken 82% (fallthrough)
branch  7 taken 18%
call    8 returned 100%
    10886: 9217:        if (tok->str() == "?")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       39: 9218:            ternaryOp.push(tok);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    10847: 9219:        else if (!ternaryOp.empty() && tok->str() == ":")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 40% (fallthrough)
branch  6 taken 60%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       39: 9220:            ternaryOp.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    10808: 9221:        else if (depth < 100 && Token::Match(tok,"(|[")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 13% (fallthrough)
branch  6 taken 87%
branch  7 taken 13% (fallthrough)
branch  8 taken 87%
     1417: 9222:            const Token *inner = findUnmatchedTernaryOp(tok->next(), tok->link(), depth+1);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
     1417: 9223:            if (inner)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9224:                return inner;
     1417: 9225:            tok = tok->link();
call    0 returned 100%
        -: 9226:        }
        -: 9227:    }
     2373: 9228:    return ternaryOp.empty() ? nullptr : ternaryOp.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 9229:}
        -: 9230:
function _ZNK9Tokenizer15findGarbageCodeEv called 956 returned 100% blocks executed 37%
      956: 9231:void Tokenizer::findGarbageCode() const
        -: 9232:{
        -: 9233:    // initialization: = {
    29132: 9234:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9235:        if (!Token::simpleMatch(tok, "= {"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    28159: 9236:            continue;
       17: 9237:        if (Token::simpleMatch(tok->linkAt(1), "} ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 9238:            syntaxError(tok->linkAt(1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -: 9239:    }
        -: 9240:
        -: 9241:    // Inside [] there can't be ; or various keywords
    29132: 9242:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9243:        if (tok->str() != "[")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    28051: 9244:            continue;
      261: 9245:        for (const Token *inner = tok->next(); inner != tok->link(); inner = inner->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 52% (fallthrough)
branch  3 taken 48%
call    4 returned 100%
      136: 9246:            if (Token::Match(inner, "(|["))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 9247:                inner = inner->link();
call    0 returned 100%
      134: 9248:            else if (Token::Match(inner, ";|goto|return|typedef"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9249:                syntaxError(inner);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9250:        }
        -: 9251:    }
        -: 9252:
        -: 9253:    // UNKNOWN_MACRO(return)
    29132: 9254:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9255:        if (Token::Match(tok, "throw|return )") && Token::Match(tok->linkAt(1)->previous(), "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 9256:            unknownMacroError(tok->linkAt(1)->previous());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 9257:    }
        -: 9258:
        -: 9259:    // UNKNOWN_MACRO(return)
    29132: 9260:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9261:        if (Token::Match(tok, "%name% throw|return") && std::isupper(tok->str()[0]))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 9262:            unknownMacroError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9263:    }
        -: 9264:
        -: 9265:    // Assign/increment/decrement literal
    29132: 9266:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9267:        if (Token::Match(tok, "!!) %num%|%str%|%char% %assign%|++|--"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9268:            syntaxError(tok, tok->next()->str() + " " + tok->strAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
        -: 9269:    }
        -: 9270:
    29132: 9271:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9272:        if (Token::Match(tok, "if|while|for|switch")) { // if|while|for|switch (EXPR) { ... }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
      500: 9273:            if (tok->previous() && !Token::Match(tok->previous(), "%name%|:|;|{|}|(|)|,")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 9274:                if (!Token::simpleMatch(tok->tokAt(-2), "operator \"\" if"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 9275:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9276:            }
      500: 9277:            if (Token::Match(tok->previous(), "[(,]"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9278:                continue;
      500: 9279:            if (!Token::Match(tok->next(), "( !!)"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9280:                syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
      500: 9281:            if (tok->str() != "for") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
      465: 9282:                if (isGarbageExpr(tok->next(), tok->linkAt(1), mSettings->standards.cpp>=Standards::cppstd_t::CPP17))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 9283:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9284:            }
        -: 9285:        }
        -: 9286:    }
        -: 9287:
        -: 9288:    // keyword keyword
        -: 9289:    const std::set<std::string> nonConsecutiveKeywords{"break",
        -: 9290:        "continue",
        -: 9291:        "for",
        -: 9292:        "goto",
        -: 9293:        "if",
        -: 9294:        "return",
        -: 9295:        "switch",
        -: 9296:        "throw",
        -: 9297:        "typedef",
     1912: 9298:        "while"};
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
branch 45 taken 91% (fallthrough)
branch 46 taken 9%
call   47 returned 100%
call   48 returned 100%
call   49 returned 100%
call   50 returned 100%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
branch 59 never executed
branch 60 never executed
call   61 never executed
call   62 never executed
call   63 never executed
call   64 never executed
call   65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
    29132: 9299:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9300:        if (!tok->isName() || nonConsecutiveKeywords.count(tok->str()) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 40% (fallthrough)
branch  4 taken 60%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 93% (fallthrough)
branch 10 taken 7%
branch 11 taken 97% (fallthrough)
branch 12 taken 3%
    27361: 9301:            continue;
      815: 9302:        if (Token::Match(tok, "%name% %name%") && nonConsecutiveKeywords.count(tok->next()->str()) == 1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 17% (fallthrough)
branch  4 taken 83%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 9303:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
      815: 9304:        const Token *prev = tok;
     2457: 9305:        while (prev && prev->isName())
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50% (fallthrough)
branch  8 taken 50%
      821: 9306:            prev = prev->previous();
call    0 returned 100%
      815: 9307:        if (Token::Match(prev, "%op%|%num%|%str%|%char%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9308:            if (!Token::simpleMatch(tok->tokAt(-2), "operator \"\" if"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 9309:                syntaxError(tok, prev == tok->previous() ? (prev->str() + " " + tok->str()) : (prev->str() + " .. " + tok->str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
        -: 9310:        }
        -: 9311:    }
        -: 9312:
        -: 9313:    // case keyword must be inside switch
    18895: 9314:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
call    3 returned 100%
    17939: 9315:        if (Token::simpleMatch(tok, "switch (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      140: 9316:            if (Token::simpleMatch(tok->linkAt(1), ") {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
       70: 9317:                tok = tok->linkAt(1)->linkAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       70: 9318:                continue;
        -: 9319:            }
    #####: 9320:            const Token *switchToken = tok;
    #####: 9321:            tok = tok->linkAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9322:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 9323:                syntaxError(switchToken);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9324:            // Look for the end of the switch statement, i.e. the first semi-colon or '}'
    #####: 9325:            for (; tok ; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 9326:                if (tok->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9327:                    tok = tok->link();
call    0 never executed
        -: 9328:                }
    #####: 9329:                if (Token::Match(tok, ";|}")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 9330:                    // We're at the end of the switch block
    #####: 9331:                    if (tok->str() == "}" && tok->strAt(-1) == ":") // Invalid case
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9332:                        syntaxError(switchToken);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9333:                    break;
        -: 9334:                }
        -: 9335:            }
    #####: 9336:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####: 9337:                break;
    17869: 9338:        } else if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
     2425: 9339:            tok = tok->link();
call    0 returned 100%
    15444: 9340:        } else if (tok->str() == "case") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9341:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9342:        }
        -: 9343:    }
        -: 9344:
    29132: 9345:    for (const Token *tok = tokens(); tok ; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9346:        if (!Token::simpleMatch(tok, "for (")) // find for loops
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    28141: 9347:            continue;
        -: 9348:        // count number of semicolons
       35: 9349:        int semicolons = 0;
       35: 9350:        const Token* const startTok = tok;
       35: 9351:        tok = tok->next()->link()->previous(); // find ")" of the for-loop
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 9352:        // walk backwards until we find the beginning (startTok) of the for() again
      801: 9353:        for (; tok != startTok; tok = tok->previous()) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
call    2 returned 100%
      383: 9354:            if (tok->str() == ";") { // do the counting
call    0 returned 100%
call    1 returned 100%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
       60: 9355:                semicolons++;
      323: 9356:            } else if (tok->str() == ")") { // skip pairs of ( )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       10: 9357:                tok = tok->link();
call    0 returned 100%
        -: 9358:            }
        -: 9359:        }
        -: 9360:        // if we have an invalid number of semicolons inside for( ), assume syntax error
       35: 9361:        if ((semicolons == 1) || (semicolons > 2)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9362:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9363:        }
        -: 9364:    }
        -: 9365:
        -: 9366:    // Operators without operands..
      956: 9367:    const Token *templateEndToken = nullptr;
    29132: 9368:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9369:        if (!templateEndToken) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    27920: 9370:            if (tok->str() == "<" && isCPP())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 99% (fallthrough)
branch  6 taken 1%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
      164: 9371:                templateEndToken = tok->findClosingBracket();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9372:        } else {
      256: 9373:            if (templateEndToken == tok)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
       87: 9374:                templateEndToken = nullptr;
      256: 9375:            if (Token::Match(tok, "> %cop%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
       21: 9376:                continue;
        -: 9377:        }
    28155: 9378:        if (Token::Match(tok, "%or%|%oror%|==|!=|+|-|/|!|>=|<=|~|^|++|--|::|sizeof|throw|decltype|typeof {|if|else|try|catch|while|do|for|return|switch|break|namespace"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9379:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9380:        if (Token::Match(tok, "( %any% )") && tok->next()->isKeyword() && !Token::simpleMatch(tok->next(), "void"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 9381:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9382:        if (Token::Match(tok, "%num%|%bool%|%char%|%str% %num%|%bool%|%char%|%str%") && !Token::Match(tok, "%str% %str%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 9383:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9384:        if (Token::Match(tok, "%assign% typename|class %assign%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9385:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9386:        if (Token::Match(tok, "%cop%|=|,|[ %or%|%oror%|/|%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9387:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9388:        if (Token::Match(tok, ";|(|[ %comp%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9389:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9390:        if (Token::Match(tok, "%cop%|= ]") && !(isCPP() && Token::Match(tok->previous(), "[|, &|= ]")))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 9391:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28155: 9392:        if (Token::Match(tok, "[+-] [;,)]}]") && !(isCPP() && Token::Match(tok->previous(), "operator [+-] ;")))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
    #####: 9393:            syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    28491: 9394:        if (Token::simpleMatch(tok, ",") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
      336: 9395:            !Token::Match(tok->tokAt(-2), "[ = , &|%name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
      336: 9396:            if (Token::Match(tok->previous(), "(|[|{|<|%assign%|%or%|%oror%|==|!=|+|-|/|!|>=|<=|~|^|::|sizeof|throw|decltype|typeof"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9397:                syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
      336: 9398:            if (Token::Match(tok->next(), ")|]|>|%assign%|%or%|%oror%|==|!=|/|>=|<=|&&"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9399:                syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9400:        }
    56469: 9401:        if (Token::simpleMatch(tok, ".") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
      318: 9402:            !Token::simpleMatch(tok->previous(), ".") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      318: 9403:            !Token::simpleMatch(tok->next(), ".") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
    28472: 9404:            !Token::Match(tok->previous(), "{|, . %name% [=.]") &&
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      158: 9405:            !Token::Match(tok->previous(), ", . %name%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      158: 9406:            if (!Token::Match(tok->previous(), "%name%|)|]|>|}"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9407:                syntaxError(tok, tok->strAt(-1) + " " + tok->str() + " " + tok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
      158: 9408:            if (!Token::Match(tok->next(), "%name%|*|~"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9409:                syntaxError(tok, tok->strAt(-1) + " " + tok->str() + " " + tok->strAt(1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
        -: 9410:        }
        -: 9411:    }
        -: 9412:
        -: 9413:    // ternary operator without :
      956: 9414:    if (const Token *ternaryOp = findUnmatchedTernaryOp(tokens(), nullptr))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9415:        syntaxError(ternaryOp);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9416:
        -: 9417:    // Code must not start with an arithmetical operand
      956: 9418:    if (Token::Match(list.front(), "%cop%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9419:        syntaxError(list.front());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9420:
        -: 9421:    // Code must end with } ; ) NAME
      956: 9422:    if (!Token::Match(list.back(), "%name%|;|}|)"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9423:        syntaxError(list.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
      956: 9424:    if (list.back()->str() == ")" && !Token::Match(list.back()->link()->previous(), "%name% ("))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
    #####: 9425:        syntaxError(list.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
      956: 9426:    for (const Token *end = list.back(); end && end->isName(); end = end->previous()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
    #####: 9427:        if (Token::Match(end, "void|char|short|int|long|float|double|const|volatile|static|inline|struct|class|enum|union|template|sizeof|case|break|continue|typedef"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9428:            syntaxError(list.back());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9429:    }
      956: 9430:    if ((list.back()->str()==")" || list.back()->str()=="}") && list.back()->previous() && list.back()->previous()->isControlFlowKeyword())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 96% (fallthrough)
branch  9 taken 4%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
branch 17 taken 100% (fallthrough)
branch 18 taken 0% (throw)
branch 19 taken 0% (fallthrough)
branch 20 taken 100%
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
    #####: 9431:        syntaxError(list.back()->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 9432:
        -: 9433:    // Garbage templates..
      956: 9434:    if (isCPP()) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    28499: 9435:        for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27565: 9436:            if (!Token::simpleMatch(tok, "template <"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
    27552: 9437:                continue;
       13: 9438:            if (tok->previous() && !Token::Match(tok->previous(), "[:;{})>]")) {
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
    #####: 9439:                if (tok->previous()->isUpperCaseName())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9440:                    unknownMacroError(tok->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 9441:                else
    #####: 9442:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9443:            }
       13: 9444:            const Token * const tok1 = tok;
       13: 9445:            tok = tok->next()->findClosingBracket();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       13: 9446:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9447:                syntaxError(tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
       26: 9448:            if (!Token::Match(tok, ">|>> ::|...| %name%") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
       13: 9449:                !Token::Match(tok, ">|>> [ [ %name%") &&
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9450:                !Token::Match(tok, "> >|*"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9451:                syntaxError(tok->next() ? tok->next() : tok1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -: 9452:        }
        -: 9453:    }
        -: 9454:
        -: 9455:    // Objective C/C++
    29132: 9456:    for (const Token *tok = tokens(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28176: 9457:        if (Token::Match(tok, "[;{}] [ %name% %name% ] ;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9458:            syntaxError(tok->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9459:    }
      956: 9460:}
        -: 9461:
        -: 9462:
function _ZN9Tokenizer13isGarbageExprEPK5TokenS2_b called 465 returned 100% blocks executed 70%
      465: 9463:bool Tokenizer::isGarbageExpr(const Token *start, const Token *end, bool allowSemicolon)
        -: 9464:{
     2847: 9465:    for (const Token *tok = start; tok != end; tok = tok->next()) {
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
call    2 returned 100%
     2382: 9466:        if (tok->isControlFlowKeyword())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9467:            return true;
     2382: 9468:        if (!allowSemicolon && tok->str() == ";")
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 9469:            return true;
     2382: 9470:        if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        2: 9471:            tok = tok->link();
call    0 returned 100%
        -: 9472:    }
      465: 9473:    return false;
        -: 9474:}
        -: 9475:
function _ZN9Tokenizer14simplifyStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 67 returned 100% blocks executed 12%
       67: 9476:std::string Tokenizer::simplifyString(const std::string &source)
        -: 9477:{
       67: 9478:    std::string str = source;
call    0 returned 100%
        -: 9479:
      431: 9480:    for (std::string::size_type i = 0; i + 1U < str.size(); ++i) {
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
      364: 9481:        if (str[i] != '\\')
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      728: 9482:            continue;
        -: 9483:
    #####: 9484:        int c = 'a';   // char
    #####: 9485:        int sz = 0;    // size of stringdata
    #####: 9486:        if (str[i+1] == 'x') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9487:            sz = 2;
    #####: 9488:            while (sz < 4 && std::isxdigit((unsigned char)str[i+sz]))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9489:                sz++;
    #####: 9490:            if (sz > 2) {
branch  0 never executed
branch  1 never executed
    #####: 9491:                std::istringstream istr(str.substr(i+2, sz-2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####: 9492:                istr >> std::hex >> c;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 9493:            }
    #####: 9494:        } else if (MathLib::isOctalDigit(str[i+1])) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 9495:            sz = 2;
    #####: 9496:            while (sz < 4 && MathLib::isOctalDigit(str[i+sz]))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9497:                sz++;
    #####: 9498:            std::istringstream istr(str.substr(i+1, sz-1));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 9499:            istr >> std::oct >> c;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9500:            str = str.substr(0,i) + (char)c + str.substr(i+sz);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####: 9501:            continue;
        -: 9502:        }
        -: 9503:
    #####: 9504:        if (sz <= 2)
branch  0 never executed
branch  1 never executed
    #####: 9505:            i++;
    #####: 9506:        else if (i+sz < str.size())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9507:            str.replace(i, sz, std::string(1U, (char)c));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9508:        else
    #####: 9509:            str.replace(i, str.size() - i - 1U, "a");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 9510:    }
        -: 9511:
       67: 9512:    return str;
call    0 never executed
        -: 9513:}
        -: 9514:
function _ZN9Tokenizer14simplifyWhile0Ev called 0 returned 0% blocks executed 0%
    #####: 9515:void Tokenizer::simplifyWhile0()
        -: 9516:{
    #####: 9517:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 9518:        // while (0)
    #####: 9519:        const bool while0(Token::Match(tok->previous(), "[{};] while ( 0|false )"));
call    0 never executed
call    1 never executed
        -: 9520:
        -: 9521:        // for (0) - not banal, ticket #3140
    #####: 9522:        const bool for0((Token::Match(tok->previous(), "[{};] for ( %name% = %num% ; %name% < %num% ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9523:                         tok->strAt(2) == tok->strAt(6) && tok->strAt(4) == tok->strAt(8)) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9524:                        (Token::Match(tok->previous(), "[{};] for ( %type% %name% = %num% ; %name% < %num% ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9525:                         tok->strAt(3) == tok->strAt(7) && tok->strAt(5) == tok->strAt(9)));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -: 9526:
    #####: 9527:        if (!while0 && !for0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9528:            continue;
        -: 9529:
    #####: 9530:        if (while0 && tok->previous()->str() == "}") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 9531:            // find "do"
    #####: 9532:            Token *tok2 = tok->previous()->link();
call    0 never executed
call    1 never executed
    #####: 9533:            tok2 = tok2->previous();
call    0 never executed
    #####: 9534:            if (tok2 && tok2->str() == "do") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 9535:                const bool flowmatch = Token::findmatch(tok2, "continue|break", tok) != nullptr;
call    0 never executed
        -: 9536:                // delete "do ({)"
    #####: 9537:                tok2->deleteThis();
call    0 never executed
    #####: 9538:                if (!flowmatch)
branch  0 never executed
branch  1 never executed
    #####: 9539:                    tok2->deleteThis();
call    0 never executed
        -: 9540:
        -: 9541:                // delete "(}) while ( 0 ) (;)"
    #####: 9542:                tok = tok->previous();
call    0 never executed
    #####: 9543:                tok->deleteNext(4);  // while ( 0 )
call    0 never executed
    #####: 9544:                if (tok->next() && tok->next()->str() == ";")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 9545:                    tok->deleteNext(); // ;
call    0 never executed
    #####: 9546:                if (!flowmatch)
branch  0 never executed
branch  1 never executed
    #####: 9547:                    tok->deleteThis(); // }
call    0 never executed
        -: 9548:
    #####: 9549:                continue;
        -: 9550:            }
        -: 9551:        }
        -: 9552:
        -: 9553:        // remove "while (0) { .. }"
    #####: 9554:        if (Token::simpleMatch(tok->next()->link(), ") {")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9555:            Token *end = tok->next()->link(), *old_prev = tok->previous();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 9556:            end = end->next()->link();
call    0 never executed
call    1 never executed
    #####: 9557:            if (Token::Match(tok, "for ( %name% ="))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9558:                old_prev = end->link();
call    0 never executed
    #####: 9559:            eraseDeadCode(old_prev, end->next());
call    0 never executed
call    1 never executed
    #####: 9560:            if (old_prev && old_prev->next())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9561:                tok = old_prev->next();
call    0 never executed
        -: 9562:            else
    #####: 9563:                break;
        -: 9564:        }
        -: 9565:    }
    #####: 9566:}
        -: 9567:
function _ZN9Tokenizer20simplifyErrNoInWhileEv called 0 returned 0% blocks executed 0%
    #####: 9568:void Tokenizer::simplifyErrNoInWhile()
        -: 9569:{
    #####: 9570:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9571:        if (tok->str() != "errno")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9572:            continue;
        -: 9573:
    #####: 9574:        Token *endpar = nullptr;
    #####: 9575:        if (Token::Match(tok->previous(), "&& errno == EINTR ) { ;| }"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9576:            endpar = tok->tokAt(3);
call    0 never executed
    #####: 9577:        else if (Token::Match(tok->tokAt(-2), "&& ( errno == EINTR ) ) { ;| }"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9578:            endpar = tok->tokAt(4);
call    0 never executed
        -: 9579:        else
    #####: 9580:            continue;
        -: 9581:
    #####: 9582:        if (Token::simpleMatch(endpar->link()->previous(), "while (")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9583:            Token *tok1 = tok->previous();
call    0 never executed
    #####: 9584:            if (tok1->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9585:                tok1 = tok1->previous();
call    0 never executed
        -: 9586:
        -: 9587:            // erase "&& errno == EINTR"
    #####: 9588:            tok1 = tok1->previous();
call    0 never executed
    #####: 9589:            Token::eraseTokens(tok1, endpar);
call    0 never executed
        -: 9590:
        -: 9591:            // tok is invalid.. move to endpar
    #####: 9592:            tok = endpar;
        -: 9593:        }
        -: 9594:    }
    #####: 9595:}
        -: 9596:
        -: 9597:
function _ZN9Tokenizer19simplifyFuncInWhileEv called 0 returned 0% blocks executed 0%
    #####: 9598:void Tokenizer::simplifyFuncInWhile()
        -: 9599:{
    #####: 9600:    int count = 0;
    #####: 9601:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 9602:        if (!Token::Match(tok, "while ( %name% ( %name% ) ) {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9603:            continue;
        -: 9604:
    #####: 9605:        Token *func = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9606:        const Token * const var = tok->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9607:        Token * const end = tok->next()->link()->next()->link();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 9608:
    #####: 9609:        const int varid = ++mVarId; // Create new variable
    #####: 9610:        const std::string varname("cppcheck:r" + MathLib::toString(++count));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####: 9611:        tok->str("int");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9612:        tok->next()->insertToken(varname);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9613:        tok->tokAt(2)->varId(varid);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9614:        tok->insertToken("while");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9615:        tok->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9616:        tok->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9617:        tok->insertToken(var->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9618:        tok->next()->varId(var->varId());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9619:        tok->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9620:        tok->insertToken(func->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9621:        tok->insertToken("=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9622:        tok->insertToken(varname);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9623:        tok->next()->varId(varid);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9624:        Token::createMutualLinks(tok->tokAt(4), tok->tokAt(6));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9625:        end->previous()->insertToken(varname);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9626:        end->previous()->varId(varid);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9627:        end->previous()->insertToken("=");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####: 9628:        Token::move(func, func->tokAt(3), end->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9629:        end->previous()->insertToken(";");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9630:
    #####: 9631:        tok = end;
        -: 9632:    }
    #####: 9633:}
call    0 never executed
        -: 9634:
function _ZN9Tokenizer18simplifyStructDeclEv called 956 returned 100% blocks executed 41%
      956: 9635:void Tokenizer::simplifyStructDecl()
        -: 9636:{
      956: 9637:    const bool cpp = isCPP();
call    0 returned 100%
        -: 9638:
        -: 9639:    // A counter that is used when giving unique names for anonymous structs.
      956: 9640:    int count = 0;
        -: 9641:
        -: 9642:    // Skip simplification of unions in class definition
     1912: 9643:    std::stack<bool> skip; // true = in function, false = not in function
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
      956: 9644:    skip.push(false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9645:
        -: 9646:    // Add names for anonymous structs
    30093: 9647:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29137: 9648:        if (!tok->isName())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 60% (fallthrough)
branch  4 taken 40%
    17601: 9649:            continue;
        -: 9650:        // check for anonymous struct/union
    11536: 9651:        if (Token::Match(tok, "struct|union {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        2: 9652:            if (Token::Match(tok->next()->link(), "} const| *|&| const| %type% ,|;|[|(|{|=")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        2: 9653:                tok->insertToken("Anonymous" + MathLib::toString(count++));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        -: 9654:            }
        -: 9655:        }
        -: 9656:        // check for derived anonymous class/struct
    11534: 9657:        else if (cpp && Token::Match(tok, "class|struct :")) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 9658:            const Token *tok1 = Token::findsimplematch(tok, "{");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9659:            if (tok1 && Token::Match(tok1->link(), "} const| *|&| const| %type% ,|;|[|(|{")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 9660:                tok->insertToken("Anonymous" + MathLib::toString(count++));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 9661:            }
        -: 9662:        }
        -: 9663:        // check for anonymous enum
    23076: 9664:        else if ((Token::simpleMatch(tok, "enum {") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
       16: 9665:                  !Token::Match(tok->tokAt(-3), "using %name% =") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    23076: 9666:                  Token::Match(tok->next()->link(), "} %type%| ,|;|[|(|{")) ||
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    11526: 9667:                 (Token::Match(tok, "enum : %type% {") && Token::Match(tok->linkAt(3), "} %type%| ,|;|[|(|{"))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        8: 9668:            tok->insertToken("Anonymous" + MathLib::toString(count++));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        -: 9669:        }
        -: 9670:    }
        -: 9671:
    29731: 9672:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
        -: 9673:
        -: 9674:        // check for start of scope and determine if it is in a function
    28775: 9675:        if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     1629: 9676:            skip.push(Token::Match(tok->previous(), "const|)"));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
        -: 9677:
        -: 9678:        // end of scope
    27146: 9679:        else if (tok->str() == "}" && !skip.empty())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
     1801: 9680:            skip.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9681:
        -: 9682:        // check for named struct/union
    25345: 9683:        else if (Token::Match(tok, "class|struct|union|enum %type% :|{")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
      172: 9684:            Token *start = tok;
      176: 9685:            while (Token::Match(start->previous(), "%type%"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        2: 9686:                start = start->previous();
call    0 returned 100%
      172: 9687:            const Token * const type = tok->next();
call    0 returned 100%
      172: 9688:            Token *next = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9689:
      220: 9690:            while (next && next->str() != "{")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
branch  6 taken 12% (fallthrough)
branch  7 taken 88%
       24: 9691:                next = next->next();
call    0 returned 100%
      172: 9692:            if (!next)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9693:                continue;
      172: 9694:            skip.push(false);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      172: 9695:            tok = next->link();
call    0 returned 100%
      172: 9696:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9697:                break; // see #4869 segmentation fault in Tokenizer::simplifyStructDecl (invalid code)
      172: 9698:            Token *restart = next;
        -: 9699:
        -: 9700:            // check for named type
      172: 9701:            if (Token::Match(tok->next(), "const| *|&| const| %type% ,|;|[|=|(|{")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
        2: 9702:                tok->insertToken(";");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        2: 9703:                tok = tok->next();
call    0 returned 100%
        2: 9704:                while (!Token::Match(start, "struct|class|union|enum")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9705:                    tok->insertToken(start->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9706:                    tok = tok->next();
call    0 never executed
    #####: 9707:                    start->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9708:                }
        2: 9709:                if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9710:                    break; // see #4869 segmentation fault in Tokenizer::simplifyStructDecl (invalid code)
        2: 9711:                tok->insertToken(type->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 9712:                if (start->str() != "class") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 9713:                    tok->insertToken(start->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        2: 9714:                    tok = tok->next();
call    0 returned 100%
        -: 9715:                }
        -: 9716:
        2: 9717:                tok = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 9718:
        -: 9719:                // check for initialization
        2: 9720:                if (tok && (tok->next()->str() == "(" || tok->next()->str() == "{")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 9721:                    tok->insertToken("=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9722:                    tok = tok->next();
call    0 never executed
        -: 9723:
    #####: 9724:                    if (start->str() == "enum") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9725:                        if (tok->next()->str() == "{") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9726:                            tok->next()->str("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9727:                            tok->linkAt(1)->str(")");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 9728:                        }
        -: 9729:                    }
        -: 9730:                }
        -: 9731:            }
        -: 9732:
      172: 9733:            tok = restart;
        -: 9734:        }
        -: 9735:
        -: 9736:        // check for anonymous struct/union
    25173: 9737:        else if (Token::Match(tok, "struct|union {")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 9738:            const bool inFunction = skip.top();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9739:            skip.push(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9740:            Token *tok1 = tok;
        -: 9741:
    #####: 9742:            Token *restart = tok->next();
call    0 never executed
    #####: 9743:            tok = tok->next()->link();
call    0 never executed
call    1 never executed
        -: 9744:
        -: 9745:            // unnamed anonymous struct/union so possibly remove it
    #####: 9746:            if (tok && tok->next() && tok->next()->str() == ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 9747:                if (inFunction && tok1->str() == "union") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 9748:                    // Try to create references in the union..
    #####: 9749:                    Token *tok2 = tok1->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9750:                    while (tok2) {
branch  0 never executed
branch  1 never executed
    #####: 9751:                        if (Token::Match(tok2, "%type% %name% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9752:                            tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9753:                        else
    #####: 9754:                            break;
        -: 9755:                    }
    #####: 9756:                    if (!Token::simpleMatch(tok2, "} ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9757:                        continue;
    #####: 9758:                    Token *vartok = nullptr;
    #####: 9759:                    tok2 = tok1->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9760:                    while (Token::Match(tok2, "%type% %name% ;")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9761:                        if (!vartok) {
branch  0 never executed
branch  1 never executed
    #####: 9762:                            vartok = tok2->next();
call    0 never executed
    #####: 9763:                            tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9764:                        } else {
    #####: 9765:                            tok2->insertToken("&");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9766:                            tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9767:                            tok2->insertToken(vartok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9768:                            tok2->next()->varId(vartok->varId());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9769:                            tok2->insertToken("=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 9770:                            tok2 = tok2->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9771:                        }
        -: 9772:                    }
        -: 9773:                }
        -: 9774:
        -: 9775:                // don't remove unnamed anonymous unions from a class, struct or union
    #####: 9776:                if (!(!inFunction && tok1->str() == "union") && !Token::Match(tok1->tokAt(-3), "using %name% =")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####: 9777:                    skip.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9778:                    tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9779:                    if (tok1->next() == tok) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9780:                        tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9781:                        tok = tok1;
        -: 9782:                    } else
    #####: 9783:                        tok1->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9784:                    restart = tok1->previous();
call    0 never executed
    #####: 9785:                    tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9786:                    if (tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9787:                        tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 9788:                }
        -: 9789:            }
        -: 9790:
    #####: 9791:            if (!restart) {
branch  0 never executed
branch  1 never executed
    #####: 9792:                simplifyStructDecl();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9793:                return;
    #####: 9794:            } else if (!restart->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9795:                return;
        -: 9796:
    #####: 9797:            tok = restart;
        -: 9798:        }
        -: 9799:    }
        -: 9800:}
        -: 9801:
function _ZN9Tokenizer25simplifyCallingConventionEv called 956 returned 100% blocks executed 80%
      956: 9802:void Tokenizer::simplifyCallingConvention()
        -: 9803:{
      956: 9804:    const bool windows = mSettings->isWindowsPlatform();
call    0 returned 100%
        -: 9805:
    29346: 9806:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28390: 9807:        while (Token::Match(tok, "__cdecl|__stdcall|__fastcall|__thiscall|__clrcall|__syscall|__pascal|__fortran|__far|__near") || (windows && Token::Match(tok, "WINAPI|APIENTRY|CALLBACK"))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 3% (fallthrough)
branch  4 taken 97%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####: 9808:            tok->deleteThis();
call    0 never executed
        -: 9809:        }
        -: 9810:    }
      956: 9811:}
        -: 9812:
function _ZN9Tokenizer16simplifyDeclspecEv called 956 returned 100% blocks executed 15%
      956: 9813:void Tokenizer::simplifyDeclspec()
        -: 9814:{
    29203: 9815:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28247: 9816:        while (Token::Match(tok, "__declspec|_declspec (") && tok->next()->link() && tok->next()->link()->next()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####: 9817:            if (Token::Match(tok->tokAt(2), "noreturn|nothrow")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9818:                Token *tok1 = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 9819:                while (tok1 && !Token::Match(tok1, "%name%")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9820:                    tok1 = tok1->next();
call    0 never executed
        -: 9821:                }
    #####: 9822:                if (tok1) {
branch  0 never executed
branch  1 never executed
    #####: 9823:                    if (tok->strAt(2) == "noreturn")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9824:                        tok1->isAttributeNoreturn(true);
call    0 never executed
        -: 9825:                    else
    #####: 9826:                        tok1->isAttributeNothrow(true);
call    0 never executed
        -: 9827:                }
    #####: 9828:            } else if (tok->strAt(2) == "property")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9829:                tok->next()->link()->insertToken("__property");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
        -: 9830:
    #####: 9831:            Token::eraseTokens(tok, tok->next()->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 9832:            tok->deleteThis();
call    0 never executed
        -: 9833:        }
        -: 9834:    }
      956: 9835:}
        -: 9836:
function _ZN9Tokenizer17simplifyAttributeEv called 956 returned 100% blocks executed 34%
      956: 9837:void Tokenizer::simplifyAttribute()
        -: 9838:{
    29024: 9839:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28068: 9840:        if (Token::Match(tok, "%type% (") && !mSettings->library.isNotLibraryFunction(tok)) {
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
call    3 returned 100%
branch  4 taken 36% (fallthrough)
branch  5 taken 64%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
      926: 9841:            if (mSettings->library.isFunctionConst(tok->str(), true))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       22: 9842:                tok->isAttributePure(true);
call    0 returned 100%
      926: 9843:            if (mSettings->library.isFunctionConst(tok->str(), false))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9844:                tok->isAttributeConst(true);
call    0 never executed
        -: 9845:        }
    28104: 9846:        while (Token::Match(tok, "__attribute__|__attribute (") && tok->next()->link() && tok->next()->link()->next()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 1% (fallthrough)
branch 13 taken 99%
       18: 9847:            if (Token::Match(tok->tokAt(2), "( constructor|__constructor__")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 9848:                // prototype for constructor is: void func(void);
    #####: 9849:                if (!tok->next()->link()->next())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9850:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9851:
    #####: 9852:                if (tok->next()->link()->next()->str() == "void") { // __attribute__((constructor)) void func() {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9853:                    if (!tok->next()->link()->next()->next())
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9854:                        syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -: 9855:
    #####: 9856:                    tok->next()->link()->next()->next()->isAttributeConstructor(true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 9857:                } else if (tok->next()->link()->next()->str() == ";" && tok->linkAt(-1) && tok->previous()->link()->previous()) // void func() __attribute__((constructor));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 9858:                    tok->previous()->link()->previous()->isAttributeConstructor(true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 9859:                else // void __attribute__((constructor)) func() {}
    #####: 9860:                    tok->next()->link()->next()->isAttributeConstructor(true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 9861:            }
        -: 9862:
       18: 9863:            else if (Token::Match(tok->tokAt(2), "( destructor|__destructor__")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 9864:                // prototype for destructor is: void func(void);
    #####: 9865:                if (!tok->next()->link()->next())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 9866:                    syntaxError(tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -: 9867:
    #####: 9868:                if (tok->next()->link()->next()->str() == "void") // __attribute__((destructor)) void func() {}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 9869:                    tok->next()->link()->next()->next()->isAttributeDestructor(true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
    #####: 9870:                else if (tok->next()->link()->next()->str() == ";" && tok->linkAt(-1) && tok->previous()->link()->previous()) // void func() __attribute__((destructor));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####: 9871:                    tok->previous()->link()->previous()->isAttributeDestructor(true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 9872:                else // void __attribute__((destructor)) func() {}
    #####: 9873:                    tok->next()->link()->next()->isAttributeDestructor(true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 9874:            }
        -: 9875:
       18: 9876:            else if (Token::Match(tok->tokAt(2), "( unused|__unused__|used|__used__ )")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9877:                Token *vartok = nullptr;
        -: 9878:
        -: 9879:                // check if after variable name
    #####: 9880:                if (Token::Match(tok->next()->link()->next(), ";|=")) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9881:                    if (Token::Match(tok->previous(), "%type%"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9882:                        vartok = tok->previous();
call    0 never executed
        -: 9883:                }
        -: 9884:
        -: 9885:                // check if before variable name
    #####: 9886:                else if (Token::Match(tok->next()->link()->next(), "%type%"))
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 9887:                    vartok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 9888:
    #####: 9889:                if (vartok) {
branch  0 never executed
branch  1 never executed
    #####: 9890:                    const std::string &attribute(tok->strAt(3));
call    0 never executed
    #####: 9891:                    if (attribute.find("unused") != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9892:                        vartok->isAttributeUnused(true);
call    0 never executed
        -: 9893:                    else
    #####: 9894:                        vartok->isAttributeUsed(true);
call    0 never executed
        -: 9895:                }
        -: 9896:            }
        -: 9897:
       18: 9898:            else if (Token::Match(tok->tokAt(2), "( pure|__pure__|const|__const__|noreturn|__noreturn__|nothrow|__nothrow__|warn_unused_result )")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       18: 9899:                Token *functok = nullptr;
        -: 9900:
        -: 9901:                // type func(...) __attribute__((attribute));
       18: 9902:                if (tok->previous() && tok->previous()->link() && Token::Match(tok->previous()->link()->previous(), "%name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 94% (fallthrough)
branch  6 taken 6%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 94% (fallthrough)
branch 14 taken 6%
       17: 9903:                    functok = tok->previous()->link()->previous();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -: 9904:
        -: 9905:                // type __attribute__((attribute)) func() { }
        -: 9906:                else {
        1: 9907:                    Token *tok2 = tok->next()->link();
call    0 returned 100%
call    1 returned 100%
        1: 9908:                    while (Token::Match(tok2, ") __attribute__|__attribute ("))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9909:                        tok2 = tok2->linkAt(2);
call    0 never executed
        1: 9910:                    if (Token::Match(tok2, ") %name% ("))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 9911:                        functok = tok2->next();
call    0 returned 100%
        -: 9912:                }
        -: 9913:
       18: 9914:                if (functok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18: 9915:                    const std::string &attribute(tok->strAt(3));
call    0 returned 100%
       18: 9916:                    if (attribute.find("pure") != std::string::npos)
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
       16: 9917:                        functok->isAttributePure(true);
call    0 returned 100%
        2: 9918:                    else if (attribute.find("const") != std::string::npos)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 9919:                        functok->isAttributeConst(true);
call    0 returned 100%
    #####: 9920:                    else if (attribute.find("noreturn") != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9921:                        functok->isAttributeNoreturn(true);
call    0 never executed
    #####: 9922:                    else if (attribute.find("nothrow") != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9923:                        functok->isAttributeNothrow(true);
call    0 never executed
    #####: 9924:                    else if (attribute.find("warn_unused_result") != std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9925:                        functok->isAttributeNodiscard(true);
call    0 never executed
        -: 9926:                }
        -: 9927:            }
        -: 9928:
    #####: 9929:            else if (Token::simpleMatch(tok->previous(), "} __attribute__ ( ( packed )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9930:                tok->previous()->isAttributePacked(true);
call    0 never executed
call    1 never executed
        -: 9931:            }
        -: 9932:
       18: 9933:            Token::eraseTokens(tok, tok->next()->link()->next());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       18: 9934:            tok->deleteThis();
call    0 returned 100%
        -: 9935:        }
        -: 9936:    }
      956: 9937:}
        -: 9938:
function _ZN9Tokenizer25simplifyCppcheckAttributeEv called 956 returned 100% blocks executed 24%
      956: 9939:void Tokenizer::simplifyCppcheckAttribute()
        -: 9940:{
    29024: 9941:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28068: 9942:        if (tok->str() != "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
    25275: 9943:            continue;
     2793: 9944:        if (!tok->previous())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 9945:            continue;
     2793: 9946:        const std::string &attr = tok->previous()->str();
call    0 returned 100%
call    1 returned 100%
     2793: 9947:        if (attr.compare(0, 11, "__cppcheck_") != 0) // TODO: starts_with("__cppcheck_")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     2793: 9948:            continue;
    #####: 9949:        if (attr.compare(attr.size()-2, 2, "__") != 0) // TODO: ends_with("__")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9950:            continue;
        -: 9951:
    #####: 9952:        Token *vartok = tok->link();
call    0 never executed
    #####: 9953:        while (Token::Match(vartok->next(), "%name%|*|&|::")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9954:            vartok = vartok->next();
call    0 never executed
    #####: 9955:            if (Token::Match(vartok, "%name% (") && vartok->str().compare(0,11,"__cppcheck_") == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 9956:                vartok = vartok->linkAt(1);
call    0 never executed
        -: 9957:        }
        -: 9958:
    #####: 9959:        if (vartok->isName()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9960:            if (Token::Match(tok->previous(), "__cppcheck_low__ ( %num% )"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9961:                vartok->setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::LOW, MathLib::toLongNumber(tok->next()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 9962:            else if (Token::Match(tok->previous(), "__cppcheck_high__ ( %num% )"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9963:                vartok->setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::HIGH, MathLib::toLongNumber(tok->next()->str()));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 9964:        }
        -: 9965:
        -: 9966:        // Delete cppcheck attribute..
    #####: 9967:        if (tok->tokAt(-2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9968:            tok = tok->tokAt(-2);
call    0 never executed
    #####: 9969:            Token::eraseTokens(tok, tok->linkAt(2)->next());
call    0 never executed
call    1 never executed
call    2 never executed
        -: 9970:        } else {
    #####: 9971:            tok = tok->previous();
call    0 never executed
    #####: 9972:            Token::eraseTokens(tok, tok->linkAt(1)->next());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 9973:            tok->str(";");
call    0 never executed
        -: 9974:        }
        -: 9975:    }
      956: 9976:}
        -: 9977:
function _ZN9Tokenizer20simplifyCPPAttributeEv called 956 returned 100% blocks executed 15%
      956: 9978:void Tokenizer::simplifyCPPAttribute()
        -: 9979:{
      956: 9980:    if (mSettings->standards.cpp < Standards::CPP11 || isC())
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
call    2 returned 100%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
branch  5 taken 4% (fallthrough)
branch  6 taken 96%
       39: 9981:        return;
        -: 9982:
    28121: 9983:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27204: 9984:        if (!tok->link() || !Token::Match(tok, "[ [ %name%"))
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
    27204: 9985:            continue;
    #####: 9986:        if (Token::Match(tok->tokAt(2), "noreturn|nodiscard")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9987:            const Token * head = tok->link()->next();
call    0 never executed
call    1 never executed
    #####: 9988:            while (Token::Match(head, "%name%|::|*|&"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 9989:                head = head->next();
call    0 never executed
    #####: 9990:            if (head && head->str() == "(" && isFunctionHead(head, "{|;")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####: 9991:                if (tok->strAt(2) == "noreturn")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9992:                    head->previous()->isAttributeNoreturn(true);
call    0 never executed
call    1 never executed
        -: 9993:                else
    #####: 9994:                    head->previous()->isAttributeNodiscard(true);
call    0 never executed
call    1 never executed
        -: 9995:            }
    #####: 9996:        } else if (Token::Match(tok->previous(), ") [ [ expects|ensures|assert default|audit|axiom| : %name% <|<=|>|>= %num% ] ]")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9997:            const Token *vartok = tok->tokAt(4);
call    0 never executed
    #####: 9998:            if (vartok->str() == ":")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 9999:                vartok = vartok->next();
call    0 never executed
    #####:10000:            Token *argtok = tok->tokAt(-2);
call    0 never executed
    #####:10001:            while (argtok && argtok->str() != "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10002:                if (argtok->str() == vartok->str())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10003:                    break;
    #####:10004:                if (argtok->str() == ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10005:                    argtok = argtok->link();
call    0 never executed
    #####:10006:                argtok = argtok->previous();
call    0 never executed
        -:10007:            }
    #####:10008:            if (argtok && argtok->str() == vartok->str()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:10009:                if (vartok->next()->str() == ">=")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10010:                    argtok->setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::LOW, MathLib::toLongNumber(vartok->strAt(2)));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10011:                else if (vartok->next()->str() == ">")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10012:                    argtok->setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::LOW, MathLib::toLongNumber(vartok->strAt(2))+1);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10013:                else if (vartok->next()->str() == "<=")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10014:                    argtok->setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::HIGH, MathLib::toLongNumber(vartok->strAt(2)));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10015:                else if (vartok->next()->str() == "<")
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10016:                    argtok->setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type::HIGH, MathLib::toLongNumber(vartok->strAt(2))-1);
call    0 never executed
call    1 never executed
call    2 never executed
        -:10017:            }
        -:10018:        }
    #####:10019:        Token::eraseTokens(tok, tok->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10020:        tok->deleteThis();
call    0 never executed
        -:10021:    }
        -:10022:}
        -:10023:
        9:10024:static const std::set<std::string> keywords = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 89% (fallthrough)
branch 38 taken 11%
call   39 returned 100%
call   40 returned 100%
call   41 returned 100%
call   42 returned 100%
call   43 returned 100%
call   44 returned 100%
call   45 returned 100%
call   46 returned 100%
call   47 returned 100%
call   48 never executed
branch 49 never executed
branch 50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
        -:10025:    "inline"
        -:10026:    , "_inline"
        -:10027:    , "__inline"
        -:10028:    , "__forceinline"
        -:10029:    , "register"
        -:10030:    , "__restrict"
        -:10031:    , "__restrict__"
        -:10032:    , "__thread"
        8:10033:};
call    0 returned 100%
call    1 never executed
        -:10034:// Remove "inline", "register", "restrict", "override", "static" and "constexpr"
        -:10035:// "restrict" keyword
        -:10036://   - New to 1999 ANSI/ISO C standard
        -:10037://   - Not in C++ standard yet
function _ZN9Tokenizer15simplifyKeywordEv called 956 returned 100% blocks executed 52%
      956:10038:void Tokenizer::simplifyKeyword()
        -:10039:{
        -:10040:    // FIXME: There is a risk that "keywords" are removed by mistake. This
        -:10041:    // code should be fixed so it doesn't remove variables etc. Nonstandard
        -:10042:    // keywords should be defined with a library instead. For instance the
        -:10043:    // linux kernel code at least uses "_inline" as struct member name at some
        -:10044:    // places.
        -:10045:
      956:10046:    const bool c99 = isC() && mSettings->standards.c >= Standards::C99;
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      956:10047:    const bool cpp11 = isCPP() && mSettings->standards.cpp >= Standards::CPP11;
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
        -:10048:
    29201:10049:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28245:10050:        if (keywords.find(tok->str()) != keywords.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
call   10 never executed
call   11 never executed
        -:10051:            // Don't remove struct members
        2:10052:            if (!Token::simpleMatch(tok->previous(), "."))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:10053:                tok->deleteThis(); // Simplify..
call    0 returned 100%
        -:10054:        }
        -:10055:
    28245:10056:        if (isC() || mSettings->standards.cpp == Standards::CPP03) {
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 3% (fallthrough)
branch  6 taken 97%
      978:10057:            if (tok->str() == "auto")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10058:                tok->deleteThis();
call    0 never executed
        -:10059:        }
        -:10060:
        -:10061:        // simplify static keyword:
        -:10062:        // void foo( int [ static 5 ] ); ==> void foo( int [ 5 ] );
    28245:10063:        if (Token::Match(tok, "[ static %num%"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10064:            tok->deleteNext();
call    0 never executed
        -:10065:
    28245:10066:        if (c99) {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      569:10067:            while (tok->str() == "restrict")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10068:                tok->deleteThis();
call    0 never executed
        -:10069:
      569:10070:            if (mSettings->standards.c >= Standards::C11) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      569:10071:                while (tok->str() == "_Atomic")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10072:                    tok->deleteThis();
call    0 never executed
        -:10073:            }
        -:10074:        }
        -:10075:
    27676:10076:        else if (cpp11) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    27267:10077:            if (tok->str() == "constexpr") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10078:                tok->originalName(tok->str());
call    0 never executed
call    1 never executed
    #####:10079:                tok->str("const");
call    0 never executed
        -:10080:            }
        -:10081:
        -:10082:            // final:
        -:10083:            // 1) struct name final { };   <- struct is final
    27267:10084:            if (Token::Match(tok->previous(), "struct|class|union %type% final [:{]")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10085:                tok->deleteNext();
call    0 never executed
        -:10086:            }
        -:10087:
        -:10088:            // noexcept -> noexcept(true)
        -:10089:            // 2) void f() noexcept; -> void f() noexcept(true);
    27267:10090:            else if (Token::Match(tok, ") noexcept :|{|;|const|override|final")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:10091:                // Insertion is done in inverse order
        -:10092:                // The brackets are linked together accordingly afterwards
    #####:10093:                Token * tokNoExcept = tok->next();
call    0 never executed
    #####:10094:                tokNoExcept->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:10095:                Token * braceEnd = tokNoExcept->next();
call    0 never executed
    #####:10096:                tokNoExcept->insertToken("true");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:10097:                tokNoExcept->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10098:                Token * braceStart = tokNoExcept->next();
call    0 never executed
    #####:10099:                tok = tok->tokAt(3);
call    0 never executed
    #####:10100:                Token::createMutualLinks(braceStart, braceEnd);
call    0 never executed
        -:10101:            }
        -:10102:
        -:10103:            // 3) thread_local -> static
        -:10104:            //    on single thread thread_local has the effect of static
    27267:10105:            else if (tok->str() == "thread_local") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10106:                tok->originalName(tok->str());
call    0 never executed
call    1 never executed
    #####:10107:                tok->str("static");
call    0 never executed
        -:10108:            }
        -:10109:        }
        -:10110:    }
      956:10111:}
        -:10112:
function _ZN9Tokenizer32simplifyAssignmentInFunctionCallEv called 0 returned 0% blocks executed 0%
    #####:10113:void Tokenizer::simplifyAssignmentInFunctionCall()
        -:10114:{
    #####:10115:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:10116:        if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10117:            tok = tok->link();
call    0 never executed
        -:10118:
        -:10119:        // Find 'foo(var='. Exclude 'assert(var=' to allow tests to check that assert(...) does not contain side-effects
    #####:10120:        else if (Token::Match(tok, "[;{}] %name% ( %name% =") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10121:                 Token::simpleMatch(tok->linkAt(2), ") ;") &&
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10122:                 !Token::Match(tok->next(), "assert|while")) {
call    0 never executed
call    1 never executed
    #####:10123:            const std::string& funcname(tok->next()->str());
call    0 never executed
call    1 never executed
    #####:10124:            Token* const vartok = tok->tokAt(3);
call    0 never executed
        -:10125:
        -:10126:            // Goto ',' or ')'..
    #####:10127:            for (Token *tok2 = vartok->tokAt(2); tok2; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:10128:                if (tok2->link() && Token::Match(tok2, "(|[|{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10129:                    tok2 = tok2->link();
call    0 never executed
    #####:10130:                else if (tok2->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10131:                    break;
    #####:10132:                else if (Token::Match(tok2, ")|,")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10133:                    tok2 = tok2->previous();
call    0 never executed
        -:10134:
    #####:10135:                    tok2->insertToken(vartok->str());
call    0 never executed
call    1 never executed
    #####:10136:                    tok2->next()->varId(vartok->varId());
call    0 never executed
call    1 never executed
call    2 never executed
        -:10137:
    #####:10138:                    tok2->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:10139:                    Token::createMutualLinks(tok2->next(), tok->linkAt(2));
call    0 never executed
call    1 never executed
call    2 never executed
        -:10140:
    #####:10141:                    tok2->insertToken(funcname);
call    0 never executed
    #####:10142:                    tok2->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:10143:
    #####:10144:                    Token::eraseTokens(tok, vartok);
call    0 never executed
    #####:10145:                    break;
        -:10146:                }
        -:10147:            }
        -:10148:        }
        -:10149:    }
    #####:10150:}
        -:10151:
function _ZN9Tokenizer23simplifyAssignmentBlockEv called 956 returned 100% blocks executed 58%
      956:10152:void Tokenizer::simplifyAssignmentBlock()
        -:10153:{
    30099:10154:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29143:10155:        if (Token::Match(tok, "[;{}] %name% = ( {")) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        1:10156:            const std::string &varname = tok->next()->str();
call    0 returned 100%
call    1 returned 100%
        -:10157:
        -:10158:            // goto the "} )"
        1:10159:            int indentlevel = 0;
        1:10160:            Token *tok2 = tok;
       19:10161:            while (nullptr != (tok2 = tok2->next())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       10:10162:                if (Token::Match(tok2, "(|{"))
call    0 returned 100%
branch  1 taken 30% (fallthrough)
branch  2 taken 70%
        3:10163:                    ++indentlevel;
        7:10164:                else if (Token::Match(tok2, ")|}")) {
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
        2:10165:                    if (indentlevel <= 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:10166:                        break;
        1:10167:                    --indentlevel;
        5:10168:                } else if (indentlevel == 2 && tok2->str() == varname && Token::Match(tok2->previous(), "%type%|*"))
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:10169:                    // declaring variable in inner scope with same name as lhs variable
    #####:10170:                    break;
        -:10171:            }
        1:10172:            if (indentlevel == 2 && Token::simpleMatch(tok2, "} )")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        1:10173:                tok2 = tok2->tokAt(-3);
call    0 returned 100%
        1:10174:                if (Token::Match(tok2, "[;{}] %num%|%name% ;")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10175:                    tok2->insertToken("=");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10176:                    tok2->insertToken(tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10177:                    tok2->next()->varId(tok->next()->varId());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:10178:                    tok->deleteNext(3);
call    0 never executed
    #####:10179:                    tok2->tokAt(5)->deleteNext();
call    0 never executed
call    1 never executed
        -:10180:                }
        -:10181:            }
        -:10182:        }
        -:10183:    }
      956:10184:}
        -:10185:
        -:10186:// Remove __asm..
function _ZN9Tokenizer11simplifyAsmEv called 956 returned 100% blocks executed 33%
      956:10187:void Tokenizer::simplifyAsm()
        -:10188:{
     1912:10189:    std::string instruction;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
    29111:10190:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28155:10191:        if (Token::Match(tok, "__asm|_asm|asm {") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:10192:            tok->next()->link()->next()) {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10193:            instruction = tok->tokAt(2)->stringifyList(tok->next()->link());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:10194:            Token::eraseTokens(tok, tok->next()->link()->next());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10195:        }
        -:10196:
    28155:10197:        else if (Token::Match(tok, "asm|__asm|__asm__ volatile|__volatile|__volatile__| (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        -:10198:            // Goto "("
        7:10199:            Token *partok = tok->next();
call    0 returned 100%
        7:10200:            if (partok->str() != "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10201:                partok = partok->next();
call    0 never executed
        7:10202:            instruction = partok->next()->stringifyList(partok->link());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
        7:10203:            Token::eraseTokens(tok, partok->link()->next());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:10204:        }
        -:10205:
    56296:10206:        else if (Token::Match(tok, "_asm|__asm")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10207:            Token *endasm = tok->next();
call    0 never executed
    #####:10208:            const Token *firstSemiColon = nullptr;
    #####:10209:            int comment = 0;
    #####:10210:            while (Token::Match(endasm, "%num%|%name%|,|:|;") || (endasm && endasm->linenr() == comment)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:10211:                if (Token::Match(endasm, "_asm|__asm|__endasm"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10212:                    break;
    #####:10213:                if (endasm->str() == ";") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10214:                    comment = endasm->linenr();
call    0 never executed
    #####:10215:                    if (!firstSemiColon)
branch  0 never executed
branch  1 never executed
    #####:10216:                        firstSemiColon = endasm;
        -:10217:                }
    #####:10218:                endasm = endasm->next();
call    0 never executed
        -:10219:            }
    #####:10220:            if (Token::simpleMatch(endasm, "__endasm")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10221:                instruction = tok->next()->stringifyList(endasm);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:10222:                Token::eraseTokens(tok, endasm->next());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10223:                if (!Token::simpleMatch(tok->next(), ";"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10224:                    tok->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10225:            } else if (firstSemiColon) {
branch  0 never executed
branch  1 never executed
    #####:10226:                instruction = tok->next()->stringifyList(firstSemiColon);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:10227:                Token::eraseTokens(tok, firstSemiColon);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10228:            } else if (!endasm) {
branch  0 never executed
branch  1 never executed
    #####:10229:                instruction = tok->next()->stringifyList(endasm);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:10230:                Token::eraseTokens(tok, endasm);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10231:                tok->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:10232:            } else
    #####:10233:                continue;
        -:10234:        }
        -:10235:
        -:10236:        else
    28148:10237:            continue;
        -:10238:
        -:10239:        // insert "asm ( "instruction" )"
        7:10240:        tok->str("asm");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:10241:        if (tok->strAt(1) != ";" && tok->strAt(1) != "{")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:10242:            tok->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        7:10243:        tok->insertToken(")");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        7:10244:        tok->insertToken("\"" + instruction + "\"");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 returned 100%
call   11 never executed
call   12 never executed
        7:10245:        tok->insertToken("(");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
        -:10246:
        7:10247:        tok = tok->next();
call    0 returned 100%
        7:10248:        Token::createMutualLinks(tok, tok->tokAt(2));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:10249:
        -:10250:        //move the new tokens in the same line as ";" if available
        7:10251:        tok = tok->tokAt(2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:10252:        if (tok->next() && tok->next()->str() == ";" &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        7:10253:            tok->next()->linenr() != tok->linenr()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
    #####:10254:            const int endposition = tok->next()->linenr();
call    0 never executed
call    1 never executed
    #####:10255:            tok = tok->tokAt(-3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10256:            for (int i = 0; i < 4; ++i) {
branch  0 never executed
branch  1 never executed
    #####:10257:                tok = tok->next();
call    0 never executed
    #####:10258:                tok->linenr(endposition);
call    0 never executed
        -:10259:            }
        -:10260:        }
        -:10261:    }
      956:10262:}
        -:10263:
function _ZN9Tokenizer12simplifyAsm2Ev called 956 returned 100% blocks executed 12%
      956:10264:void Tokenizer::simplifyAsm2()
        -:10265:{
        -:10266:    // Block declarations: ^{}
        -:10267:    // A C extension used to create lambda like closures.
        -:10268:
        -:10269:    // Put ^{} statements in asm()
    30164:10270:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29208:10271:        if (tok->str() != "^")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    29206:10272:            continue;
        -:10273:
        2:10274:        if (Token::simpleMatch(tok, "^ {") || (Token::simpleMatch(tok->linkAt(1), ") {") && tok->strAt(-1) != "operator")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
    #####:10275:            Token * start = tok;
    #####:10276:            while (start && !Token::Match(start, "[,(;{}=]")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:10277:                if (start->link() && Token::Match(start, ")|]|>"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10278:                    start = start->link();
call    0 never executed
    #####:10279:                start = start->previous();
call    0 never executed
        -:10280:            }
        -:10281:
    #####:10282:            const Token *last = tok->next()->link();
call    0 never executed
call    1 never executed
    #####:10283:            if (Token::simpleMatch(last, ") {"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10284:                last = last->linkAt(1);
call    0 never executed
    #####:10285:            last = last->next();
call    0 never executed
    #####:10286:            while (last && !Token::Match(last, "%cop%|,|;|{|}|)")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:10287:                if (Token::Match(last, "(|["))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10288:                    last = last->link();
call    0 never executed
    #####:10289:                last = last->next();
call    0 never executed
        -:10290:            }
        -:10291:
    #####:10292:            if (start && last) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:10293:                std::string asmcode;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10294:                while (start->next() != last) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10295:                    asmcode += start->next()->str();
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10296:                    start->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10297:                }
    #####:10298:                if (last->str() == "}")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10299:                    start->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10300:                start->insertToken(")");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10301:                start->insertToken("\"" + asmcode + "\"");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:10302:                start->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10303:                start->insertToken("asm");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:10304:                start->tokAt(2)->link(start->tokAt(4));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:10305:                start->tokAt(4)->link(start->tokAt(2));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:10306:                tok = start->tokAt(4);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10307:            }
        -:10308:        }
        -:10309:    }
      956:10310:}
        -:10311:
function _ZN9Tokenizer10simplifyAtEv called 956 returned 100% blocks executed 28%
      956:10312:void Tokenizer::simplifyAt()
        -:10313:{
     1912:10314:    std::set<std::string> var;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:10315:
    30164:10316:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29208:10317:        if (Token::Match(tok, "%name% @ %num% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10318:            var.insert(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:10319:            tok->isAtAddress(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10320:            Token::eraseTokens(tok,tok->tokAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10321:        }
    29208:10322:        if (Token::Match(tok, "%name% @ %num% : %num% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10323:            var.insert(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:10324:            tok->isAtAddress(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10325:            Token::eraseTokens(tok,tok->tokAt(5));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10326:        }
    29208:10327:        if (Token::Match(tok, "%name% @ %name% : %num% ;") && var.find(tok->strAt(2)) != var.end()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
    #####:10328:            var.insert(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:10329:            tok->isAtAddress(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10330:            Token::eraseTokens(tok,tok->tokAt(5));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10331:        }
        -:10332:
        -:10333:        // array declaration
    29208:10334:        if (Token::Match(tok, "] @ %num% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10335:            tok->isAtAddress(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10336:            Token::eraseTokens(tok,tok->tokAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10337:        }
        -:10338:
        -:10339:        // keywords in compiler from cosmic software for STM8
        -:10340:        // TODO: Should use platform configuration.
    29208:10341:        if (Token::Match(tok, "@ builtin|eeprom|far|inline|interrupt|near|noprd|nostack|nosvf|packed|stack|svlreg|tiny|vector")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10342:            tok->str(tok->next()->str() + "@");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:10343:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10344:        }
        -:10345:    }
      956:10346:}
        -:10347:
        -:10348:// Simplify bitfields
function _ZN9Tokenizer17simplifyBitfieldsEv called 956 returned 100% blocks executed 32%
      956:10349:void Tokenizer::simplifyBitfields()
        -:10350:{
      956:10351:    bool goback = false;
    30083:10352:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29127:10353:        if (goback) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10354:            goback = false;
    #####:10355:            tok = tok->previous();
call    0 never executed
        -:10356:        }
    29127:10357:        Token *last = nullptr;
        -:10358:
    29127:10359:        if (!Token::Match(tok, ";|{|}|public:|protected:|private:"))
call    0 returned 100%
branch  1 taken 77% (fallthrough)
branch  2 taken 23%
    22448:10360:            continue;
        -:10361:
     6679:10362:        bool isEnum = false;
     6679:10363:        if (tok->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
     1801:10364:            const Token *type = tok->link()->previous();
call    0 returned 100%
call    1 returned 100%
     2613:10365:            while (type && type->isName()) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
call    2 returned 100%
branch  3 taken 20% (fallthrough)
branch  4 taken 80%
branch  5 taken 19% (fallthrough)
branch  6 taken 81%
      416:10366:                if (type->str() == "enum") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
       10:10367:                    isEnum = true;
       10:10368:                    break;
        -:10369:                }
      406:10370:                type = type->previous();
call    0 returned 100%
        -:10371:            }
        -:10372:        }
        -:10373:
    13375:10374:        if (Token::Match(tok->next(), "const| %type% %name% :") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     6679:10375:            !Token::Match(tok->next(), "case|public|protected|private|class|struct") &&
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
branch  4 never executed
branch  5 never executed
    #####:10376:            !Token::simpleMatch(tok->tokAt(2), "default :")) {
call    0 never executed
call    1 never executed
    #####:10377:            Token *tok1 = (tok->next()->str() == "const") ? tok->tokAt(3) : tok->tokAt(2);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:10378:            if (Token::Match(tok1, "%name% : %num% ;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10379:                tok1->setBits(MathLib::toLongNumber(tok1->strAt(2)));
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10380:            if (tok1 && tok1->tokAt(2) &&
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:10381:                (Token::Match(tok1->tokAt(2), "%bool%|%num%") ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10382:                 !Token::Match(tok1->tokAt(2), "public|protected|private| %type% ::|<|,|{|;"))) {
call    0 never executed
call    1 never executed
    #####:10383:                while (tok1->next() && !Token::Match(tok1->next(), "[;,)]{}]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:10384:                    if (Token::Match(tok1->next(), "[([]"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10385:                        Token::eraseTokens(tok1, tok1->next()->link());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10386:                    tok1->deleteNext();
call    0 never executed
        -:10387:                }
        -:10388:
    #####:10389:                last = tok1->next();
call    0 never executed
        -:10390:            }
     6679:10391:        } else if (isEnum && Token::Match(tok, "} %name%| : %num% ;")) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:10392:            if (tok->next()->str() == ":") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10393:                tok->deleteNext(2);
call    0 never executed
    #####:10394:                tok->insertToken("Anonymous");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:10395:            } else {
    #####:10396:                tok->next()->deleteNext(2);
call    0 never executed
call    1 never executed
        -:10397:            }
     6679:10398:        } else if (Token::Match(tok->next(), "const| %type% : %num%|%bool% ;") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:10399:                   tok->next()->str() != "default") {
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10400:            const int offset = (tok->next()->str() == "const") ? 1 : 0;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10401:            if (!Token::Match(tok->tokAt(3 + offset), "[{};()]")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10402:                tok->deleteNext(4 + offset);
call    0 never executed
    #####:10403:                goback = true;
        -:10404:            }
        -:10405:        }
        -:10406:
     6679:10407:        if (last && last->str() == ",") {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:10408:            Token * tok1 = last;
    #####:10409:            tok1->str(";");
call    0 never executed
        -:10410:
    #####:10411:            const Token *const tok2 = tok->next();
call    0 never executed
    #####:10412:            tok1->insertToken(tok2->str());
call    0 never executed
call    1 never executed
    #####:10413:            tok1 = tok1->next();
call    0 never executed
    #####:10414:            tok1->isSigned(tok2->isSigned());
call    0 never executed
call    1 never executed
    #####:10415:            tok1->isUnsigned(tok2->isUnsigned());
call    0 never executed
call    1 never executed
    #####:10416:            tok1->isLong(tok2->isLong());
call    0 never executed
call    1 never executed
        -:10417:        }
        -:10418:    }
      956:10419:}
        -:10420:
        -:10421:
        -:10422:// Types and objects in std namespace that are neither functions nor templates
       73:10423:static const std::set<std::string> stdTypes = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
call   101 returned 100%
branch 102 taken 100% (fallthrough)
branch 103 taken 0% (throw)
call   104 returned 100%
call   105 returned 100%
branch 106 taken 100% (fallthrough)
branch 107 taken 0% (throw)
call   108 returned 100%
call   109 returned 100%
branch 110 taken 100% (fallthrough)
branch 111 taken 0% (throw)
call   112 returned 100%
call   113 returned 100%
branch 114 taken 100% (fallthrough)
branch 115 taken 0% (throw)
call   116 returned 100%
call   117 returned 100%
branch 118 taken 100% (fallthrough)
branch 119 taken 0% (throw)
call   120 returned 100%
call   121 returned 100%
branch 122 taken 100% (fallthrough)
branch 123 taken 0% (throw)
call   124 returned 100%
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0% (throw)
call   136 returned 100%
call   137 returned 100%
branch 138 taken 100% (fallthrough)
branch 139 taken 0% (throw)
call   140 returned 100%
call   141 returned 100%
branch 142 taken 100% (fallthrough)
branch 143 taken 0% (throw)
call   144 returned 100%
call   145 returned 100%
branch 146 taken 100% (fallthrough)
branch 147 taken 0% (throw)
call   148 returned 100%
call   149 returned 100%
branch 150 taken 100% (fallthrough)
branch 151 taken 0% (throw)
call   152 returned 100%
call   153 returned 100%
branch 154 taken 100% (fallthrough)
branch 155 taken 0% (throw)
call   156 returned 100%
call   157 returned 100%
branch 158 taken 100% (fallthrough)
branch 159 taken 0% (throw)
call   160 returned 100%
call   161 returned 100%
branch 162 taken 100% (fallthrough)
branch 163 taken 0% (throw)
call   164 returned 100%
call   165 returned 100%
branch 166 taken 100% (fallthrough)
branch 167 taken 0% (throw)
call   168 returned 100%
call   169 returned 100%
branch 170 taken 100% (fallthrough)
branch 171 taken 0% (throw)
call   172 returned 100%
call   173 returned 100%
branch 174 taken 100% (fallthrough)
branch 175 taken 0% (throw)
call   176 returned 100%
call   177 returned 100%
branch 178 taken 100% (fallthrough)
branch 179 taken 0% (throw)
call   180 returned 100%
call   181 returned 100%
branch 182 taken 100% (fallthrough)
branch 183 taken 0% (throw)
call   184 returned 100%
call   185 returned 100%
branch 186 taken 100% (fallthrough)
branch 187 taken 0% (throw)
call   188 returned 100%
call   189 returned 100%
branch 190 taken 100% (fallthrough)
branch 191 taken 0% (throw)
call   192 returned 100%
call   193 returned 100%
branch 194 taken 100% (fallthrough)
branch 195 taken 0% (throw)
call   196 returned 100%
call   197 returned 100%
branch 198 taken 100% (fallthrough)
branch 199 taken 0% (throw)
call   200 returned 100%
call   201 returned 100%
branch 202 taken 100% (fallthrough)
branch 203 taken 0% (throw)
call   204 returned 100%
call   205 returned 100%
branch 206 taken 100% (fallthrough)
branch 207 taken 0% (throw)
call   208 returned 100%
call   209 returned 100%
branch 210 taken 100% (fallthrough)
branch 211 taken 0% (throw)
call   212 returned 100%
call   213 returned 100%
branch 214 taken 100% (fallthrough)
branch 215 taken 0% (throw)
call   216 returned 100%
call   217 returned 100%
branch 218 taken 100% (fallthrough)
branch 219 taken 0% (throw)
call   220 returned 100%
call   221 returned 100%
branch 222 taken 100% (fallthrough)
branch 223 taken 0% (throw)
call   224 returned 100%
call   225 returned 100%
branch 226 taken 100% (fallthrough)
branch 227 taken 0% (throw)
call   228 returned 100%
call   229 returned 100%
branch 230 taken 100% (fallthrough)
branch 231 taken 0% (throw)
call   232 returned 100%
call   233 returned 100%
branch 234 taken 100% (fallthrough)
branch 235 taken 0% (throw)
call   236 returned 100%
call   237 returned 100%
branch 238 taken 100% (fallthrough)
branch 239 taken 0% (throw)
call   240 returned 100%
call   241 returned 100%
branch 242 taken 100% (fallthrough)
branch 243 taken 0% (throw)
call   244 returned 100%
call   245 returned 100%
branch 246 taken 100% (fallthrough)
branch 247 taken 0% (throw)
call   248 returned 100%
call   249 returned 100%
branch 250 taken 100% (fallthrough)
branch 251 taken 0% (throw)
call   252 returned 100%
call   253 returned 100%
branch 254 taken 100% (fallthrough)
branch 255 taken 0% (throw)
call   256 returned 100%
call   257 returned 100%
branch 258 taken 100% (fallthrough)
branch 259 taken 0% (throw)
call   260 returned 100%
call   261 returned 100%
branch 262 taken 100% (fallthrough)
branch 263 taken 0% (throw)
call   264 returned 100%
call   265 returned 100%
branch 266 taken 100% (fallthrough)
branch 267 taken 0% (throw)
call   268 returned 100%
call   269 returned 100%
branch 270 taken 100% (fallthrough)
branch 271 taken 0% (throw)
call   272 returned 100%
call   273 returned 100%
branch 274 taken 100% (fallthrough)
branch 275 taken 0% (throw)
call   276 returned 100%
call   277 returned 100%
branch 278 taken 100% (fallthrough)
branch 279 taken 0% (throw)
call   280 returned 100%
call   281 returned 100%
branch 282 taken 100% (fallthrough)
branch 283 taken 0% (throw)
call   284 returned 100%
call   285 returned 100%
branch 286 taken 100% (fallthrough)
branch 287 taken 0% (throw)
call   288 returned 100%
call   289 returned 100%
branch 290 taken 100% (fallthrough)
branch 291 taken 0% (throw)
call   292 returned 100%
branch 293 taken 99% (fallthrough)
branch 294 taken 1%
call   295 returned 100%
call   296 returned 100%
call   297 returned 100%
call   298 returned 100%
call   299 returned 100%
call   300 returned 100%
call   301 returned 100%
call   302 returned 100%
call   303 returned 100%
call   304 returned 100%
call   305 returned 100%
call   306 returned 100%
call   307 returned 100%
call   308 returned 100%
call   309 returned 100%
call   310 returned 100%
call   311 returned 100%
call   312 returned 100%
call   313 returned 100%
call   314 returned 100%
call   315 returned 100%
call   316 returned 100%
call   317 returned 100%
call   318 returned 100%
call   319 returned 100%
call   320 returned 100%
call   321 returned 100%
call   322 returned 100%
call   323 returned 100%
call   324 returned 100%
call   325 returned 100%
call   326 returned 100%
call   327 returned 100%
call   328 returned 100%
call   329 returned 100%
call   330 returned 100%
call   331 returned 100%
call   332 returned 100%
call   333 returned 100%
call   334 returned 100%
call   335 returned 100%
call   336 returned 100%
call   337 returned 100%
call   338 returned 100%
call   339 returned 100%
call   340 returned 100%
call   341 returned 100%
call   342 returned 100%
call   343 returned 100%
call   344 returned 100%
call   345 returned 100%
call   346 returned 100%
call   347 returned 100%
call   348 returned 100%
call   349 returned 100%
call   350 returned 100%
call   351 returned 100%
call   352 returned 100%
call   353 returned 100%
call   354 returned 100%
call   355 returned 100%
call   356 returned 100%
call   357 returned 100%
call   358 returned 100%
call   359 returned 100%
call   360 returned 100%
call   361 returned 100%
call   362 returned 100%
call   363 returned 100%
call   364 returned 100%
call   365 returned 100%
call   366 returned 100%
call   367 returned 100%
call   368 never executed
branch 369 never executed
branch 370 never executed
call   371 never executed
call   372 never executed
call   373 never executed
call   374 never executed
call   375 never executed
call   376 never executed
call   377 never executed
call   378 never executed
call   379 never executed
call   380 never executed
call   381 never executed
call   382 never executed
call   383 never executed
call   384 never executed
call   385 never executed
call   386 never executed
call   387 never executed
call   388 never executed
call   389 never executed
call   390 never executed
call   391 never executed
call   392 never executed
call   393 never executed
call   394 never executed
call   395 never executed
call   396 never executed
call   397 never executed
call   398 never executed
call   399 never executed
call   400 never executed
call   401 never executed
call   402 never executed
call   403 never executed
call   404 never executed
call   405 never executed
call   406 never executed
call   407 never executed
call   408 never executed
call   409 never executed
call   410 never executed
call   411 never executed
call   412 never executed
call   413 never executed
call   414 never executed
call   415 never executed
call   416 never executed
call   417 never executed
call   418 never executed
call   419 never executed
call   420 never executed
call   421 never executed
call   422 never executed
call   423 never executed
call   424 never executed
call   425 never executed
call   426 never executed
call   427 never executed
call   428 never executed
call   429 never executed
call   430 never executed
call   431 never executed
call   432 never executed
call   433 never executed
call   434 never executed
call   435 never executed
call   436 never executed
call   437 never executed
call   438 never executed
call   439 never executed
call   440 never executed
call   441 never executed
call   442 never executed
call   443 never executed
        -:10424:    "string", "wstring", "u16string", "u32string",
        -:10425:    "iostream", "ostream", "ofstream", "ostringstream",
        -:10426:    "istream", "ifstream", "istringstream", "fstream", "stringstream",
        -:10427:    "wstringstream", "wistringstream", "wostringstream", "wstringbuf",
        -:10428:    "stringbuf", "streambuf", "ios", "filebuf", "ios_base",
        -:10429:    "exception", "bad_exception", "bad_alloc",
        -:10430:    "logic_error", "domain_error", "invalid_argument_", "length_error",
        -:10431:    "out_of_range", "runtime_error", "range_error", "overflow_error", "underflow_error",
        -:10432:    "locale",
        -:10433:    "cout", "cerr", "clog", "cin",
        -:10434:    "wcerr", "wcin", "wclog", "wcout",
        -:10435:    "endl", "ends", "flush",
        -:10436:    "boolalpha", "noboolalpha", "showbase", "noshowbase",
        -:10437:    "showpoint", "noshowpoint", "showpos", "noshowpos",
        -:10438:    "skipws", "noskipws", "unitbuf", "nounitbuf", "uppercase", "nouppercase",
        -:10439:    "dec", "hex", "oct",
        -:10440:    "fixed", "scientific",
        -:10441:    "internal", "left", "right",
        -:10442:    "fpos", "streamoff", "streampos", "streamsize"
       72:10443:};
call    0 returned 100%
call    1 never executed
        -:10444:
       23:10445:static const std::set<std::string> stdTemplates = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
branch 93 taken 96% (fallthrough)
branch 94 taken 4%
call   95 returned 100%
call   96 returned 100%
call   97 returned 100%
call   98 returned 100%
call   99 returned 100%
call   100 returned 100%
call   101 returned 100%
call   102 returned 100%
call   103 returned 100%
call   104 returned 100%
call   105 returned 100%
call   106 returned 100%
call   107 returned 100%
call   108 returned 100%
call   109 returned 100%
call   110 returned 100%
call   111 returned 100%
call   112 returned 100%
call   113 returned 100%
call   114 returned 100%
call   115 returned 100%
call   116 returned 100%
call   117 returned 100%
call   118 never executed
branch 119 never executed
branch 120 never executed
call   121 never executed
call   122 never executed
call   123 never executed
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
        -:10446:    "array", "basic_string", "bitset", "deque", "list", "map", "multimap",
        -:10447:    "priority_queue", "queue", "set", "multiset", "stack", "vector", "pair",
        -:10448:    "iterator", "iterator_traits",
        -:10449:    "unordered_map", "unordered_multimap", "unordered_set", "unordered_multiset",
        -:10450:    "tuple", "function"
       22:10451:};
call    0 returned 100%
call    1 never executed
       76:10452:static const std::set<std::string> stdFunctions = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
call   49 returned 100%
branch 50 taken 100% (fallthrough)
branch 51 taken 0% (throw)
call   52 returned 100%
call   53 returned 100%
branch 54 taken 100% (fallthrough)
branch 55 taken 0% (throw)
call   56 returned 100%
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
call   61 returned 100%
branch 62 taken 100% (fallthrough)
branch 63 taken 0% (throw)
call   64 returned 100%
call   65 returned 100%
branch 66 taken 100% (fallthrough)
branch 67 taken 0% (throw)
call   68 returned 100%
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
call   73 returned 100%
branch 74 taken 100% (fallthrough)
branch 75 taken 0% (throw)
call   76 returned 100%
call   77 returned 100%
branch 78 taken 100% (fallthrough)
branch 79 taken 0% (throw)
call   80 returned 100%
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
call   85 returned 100%
branch 86 taken 100% (fallthrough)
branch 87 taken 0% (throw)
call   88 returned 100%
call   89 returned 100%
branch 90 taken 100% (fallthrough)
branch 91 taken 0% (throw)
call   92 returned 100%
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
call   101 returned 100%
branch 102 taken 100% (fallthrough)
branch 103 taken 0% (throw)
call   104 returned 100%
call   105 returned 100%
branch 106 taken 100% (fallthrough)
branch 107 taken 0% (throw)
call   108 returned 100%
call   109 returned 100%
branch 110 taken 100% (fallthrough)
branch 111 taken 0% (throw)
call   112 returned 100%
call   113 returned 100%
branch 114 taken 100% (fallthrough)
branch 115 taken 0% (throw)
call   116 returned 100%
call   117 returned 100%
branch 118 taken 100% (fallthrough)
branch 119 taken 0% (throw)
call   120 returned 100%
call   121 returned 100%
branch 122 taken 100% (fallthrough)
branch 123 taken 0% (throw)
call   124 returned 100%
call   125 returned 100%
branch 126 taken 100% (fallthrough)
branch 127 taken 0% (throw)
call   128 returned 100%
call   129 returned 100%
branch 130 taken 100% (fallthrough)
branch 131 taken 0% (throw)
call   132 returned 100%
call   133 returned 100%
branch 134 taken 100% (fallthrough)
branch 135 taken 0% (throw)
call   136 returned 100%
call   137 returned 100%
branch 138 taken 100% (fallthrough)
branch 139 taken 0% (throw)
call   140 returned 100%
call   141 returned 100%
branch 142 taken 100% (fallthrough)
branch 143 taken 0% (throw)
call   144 returned 100%
call   145 returned 100%
branch 146 taken 100% (fallthrough)
branch 147 taken 0% (throw)
call   148 returned 100%
call   149 returned 100%
branch 150 taken 100% (fallthrough)
branch 151 taken 0% (throw)
call   152 returned 100%
call   153 returned 100%
branch 154 taken 100% (fallthrough)
branch 155 taken 0% (throw)
call   156 returned 100%
call   157 returned 100%
branch 158 taken 100% (fallthrough)
branch 159 taken 0% (throw)
call   160 returned 100%
call   161 returned 100%
branch 162 taken 100% (fallthrough)
branch 163 taken 0% (throw)
call   164 returned 100%
call   165 returned 100%
branch 166 taken 100% (fallthrough)
branch 167 taken 0% (throw)
call   168 returned 100%
call   169 returned 100%
branch 170 taken 100% (fallthrough)
branch 171 taken 0% (throw)
call   172 returned 100%
call   173 returned 100%
branch 174 taken 100% (fallthrough)
branch 175 taken 0% (throw)
call   176 returned 100%
call   177 returned 100%
branch 178 taken 100% (fallthrough)
branch 179 taken 0% (throw)
call   180 returned 100%
call   181 returned 100%
branch 182 taken 100% (fallthrough)
branch 183 taken 0% (throw)
call   184 returned 100%
call   185 returned 100%
branch 186 taken 100% (fallthrough)
branch 187 taken 0% (throw)
call   188 returned 100%
call   189 returned 100%
branch 190 taken 100% (fallthrough)
branch 191 taken 0% (throw)
call   192 returned 100%
call   193 returned 100%
branch 194 taken 100% (fallthrough)
branch 195 taken 0% (throw)
call   196 returned 100%
call   197 returned 100%
branch 198 taken 100% (fallthrough)
branch 199 taken 0% (throw)
call   200 returned 100%
call   201 returned 100%
branch 202 taken 100% (fallthrough)
branch 203 taken 0% (throw)
call   204 returned 100%
call   205 returned 100%
branch 206 taken 100% (fallthrough)
branch 207 taken 0% (throw)
call   208 returned 100%
call   209 returned 100%
branch 210 taken 100% (fallthrough)
branch 211 taken 0% (throw)
call   212 returned 100%
call   213 returned 100%
branch 214 taken 100% (fallthrough)
branch 215 taken 0% (throw)
call   216 returned 100%
call   217 returned 100%
branch 218 taken 100% (fallthrough)
branch 219 taken 0% (throw)
call   220 returned 100%
call   221 returned 100%
branch 222 taken 100% (fallthrough)
branch 223 taken 0% (throw)
call   224 returned 100%
call   225 returned 100%
branch 226 taken 100% (fallthrough)
branch 227 taken 0% (throw)
call   228 returned 100%
call   229 returned 100%
branch 230 taken 100% (fallthrough)
branch 231 taken 0% (throw)
call   232 returned 100%
call   233 returned 100%
branch 234 taken 100% (fallthrough)
branch 235 taken 0% (throw)
call   236 returned 100%
call   237 returned 100%
branch 238 taken 100% (fallthrough)
branch 239 taken 0% (throw)
call   240 returned 100%
call   241 returned 100%
branch 242 taken 100% (fallthrough)
branch 243 taken 0% (throw)
call   244 returned 100%
call   245 returned 100%
branch 246 taken 100% (fallthrough)
branch 247 taken 0% (throw)
call   248 returned 100%
call   249 returned 100%
branch 250 taken 100% (fallthrough)
branch 251 taken 0% (throw)
call   252 returned 100%
call   253 returned 100%
branch 254 taken 100% (fallthrough)
branch 255 taken 0% (throw)
call   256 returned 100%
call   257 returned 100%
branch 258 taken 100% (fallthrough)
branch 259 taken 0% (throw)
call   260 returned 100%
call   261 returned 100%
branch 262 taken 100% (fallthrough)
branch 263 taken 0% (throw)
call   264 returned 100%
call   265 returned 100%
branch 266 taken 100% (fallthrough)
branch 267 taken 0% (throw)
call   268 returned 100%
call   269 returned 100%
branch 270 taken 100% (fallthrough)
branch 271 taken 0% (throw)
call   272 returned 100%
call   273 returned 100%
branch 274 taken 100% (fallthrough)
branch 275 taken 0% (throw)
call   276 returned 100%
call   277 returned 100%
branch 278 taken 100% (fallthrough)
branch 279 taken 0% (throw)
call   280 returned 100%
call   281 returned 100%
branch 282 taken 100% (fallthrough)
branch 283 taken 0% (throw)
call   284 returned 100%
call   285 returned 100%
branch 286 taken 100% (fallthrough)
branch 287 taken 0% (throw)
call   288 returned 100%
call   289 returned 100%
branch 290 taken 100% (fallthrough)
branch 291 taken 0% (throw)
call   292 returned 100%
call   293 returned 100%
branch 294 taken 100% (fallthrough)
branch 295 taken 0% (throw)
call   296 returned 100%
call   297 returned 100%
branch 298 taken 100% (fallthrough)
branch 299 taken 0% (throw)
call   300 returned 100%
call   301 returned 100%
branch 302 taken 100% (fallthrough)
branch 303 taken 0% (throw)
call   304 returned 100%
branch 305 taken 99% (fallthrough)
branch 306 taken 1%
call   307 returned 100%
call   308 returned 100%
call   309 returned 100%
call   310 returned 100%
call   311 returned 100%
call   312 returned 100%
call   313 returned 100%
call   314 returned 100%
call   315 returned 100%
call   316 returned 100%
call   317 returned 100%
call   318 returned 100%
call   319 returned 100%
call   320 returned 100%
call   321 returned 100%
call   322 returned 100%
call   323 returned 100%
call   324 returned 100%
call   325 returned 100%
call   326 returned 100%
call   327 returned 100%
call   328 returned 100%
call   329 returned 100%
call   330 returned 100%
call   331 returned 100%
call   332 returned 100%
call   333 returned 100%
call   334 returned 100%
call   335 returned 100%
call   336 returned 100%
call   337 returned 100%
call   338 returned 100%
call   339 returned 100%
call   340 returned 100%
call   341 returned 100%
call   342 returned 100%
call   343 returned 100%
call   344 returned 100%
call   345 returned 100%
call   346 returned 100%
call   347 returned 100%
call   348 returned 100%
call   349 returned 100%
call   350 returned 100%
call   351 returned 100%
call   352 returned 100%
call   353 returned 100%
call   354 returned 100%
call   355 returned 100%
call   356 returned 100%
call   357 returned 100%
call   358 returned 100%
call   359 returned 100%
call   360 returned 100%
call   361 returned 100%
call   362 returned 100%
call   363 returned 100%
call   364 returned 100%
call   365 returned 100%
call   366 returned 100%
call   367 returned 100%
call   368 returned 100%
call   369 returned 100%
call   370 returned 100%
call   371 returned 100%
call   372 returned 100%
call   373 returned 100%
call   374 returned 100%
call   375 returned 100%
call   376 returned 100%
call   377 returned 100%
call   378 returned 100%
call   379 returned 100%
call   380 returned 100%
call   381 returned 100%
call   382 returned 100%
call   383 never executed
branch 384 never executed
branch 385 never executed
call   386 never executed
call   387 never executed
call   388 never executed
call   389 never executed
call   390 never executed
call   391 never executed
call   392 never executed
call   393 never executed
call   394 never executed
call   395 never executed
call   396 never executed
call   397 never executed
call   398 never executed
call   399 never executed
call   400 never executed
call   401 never executed
call   402 never executed
call   403 never executed
call   404 never executed
call   405 never executed
call   406 never executed
call   407 never executed
call   408 never executed
call   409 never executed
call   410 never executed
call   411 never executed
call   412 never executed
call   413 never executed
call   414 never executed
call   415 never executed
call   416 never executed
call   417 never executed
call   418 never executed
call   419 never executed
call   420 never executed
call   421 never executed
call   422 never executed
call   423 never executed
call   424 never executed
call   425 never executed
call   426 never executed
call   427 never executed
call   428 never executed
call   429 never executed
call   430 never executed
call   431 never executed
call   432 never executed
call   433 never executed
call   434 never executed
call   435 never executed
call   436 never executed
call   437 never executed
call   438 never executed
call   439 never executed
call   440 never executed
call   441 never executed
call   442 never executed
call   443 never executed
call   444 never executed
call   445 never executed
call   446 never executed
call   447 never executed
call   448 never executed
call   449 never executed
call   450 never executed
call   451 never executed
call   452 never executed
call   453 never executed
call   454 never executed
call   455 never executed
call   456 never executed
call   457 never executed
call   458 never executed
call   459 never executed
call   460 never executed
call   461 never executed
        -:10453:    "getline",
        -:10454:    "for_each", "find", "find_if", "find_end", "find_first_of",
        -:10455:    "adjacent_find", "count", "count_if", "mismatch", "equal", "search", "search_n",
        -:10456:    "copy", "copy_backward", "swap", "swap_ranges", "iter_swap", "transform", "replace",
        -:10457:    "replace_if", "replace_copy", "replace_copy_if", "fill", "fill_n", "generate", "generate_n", "remove",
        -:10458:    "remove_if", "remove_copy", "remove_copy_if",
        -:10459:    "unique", "unique_copy", "reverse", "reverse_copy",
        -:10460:    "rotate", "rotate_copy", "random_shuffle", "partition", "stable_partition",
        -:10461:    "sort", "stable_sort", "partial_sort", "partial_sort_copy", "nth_element",
        -:10462:    "lower_bound", "upper_bound", "equal_range", "binary_search", "merge", "inplace_merge", "includes",
        -:10463:    "set_union", "set_intersection", "set_difference",
        -:10464:    "set_symmetric_difference", "push_heap", "pop_heap", "make_heap", "sort_heap",
        -:10465:    "min", "max", "min_element", "max_element", "lexicographical_compare", "next_permutation", "prev_permutation",
        -:10466:    "advance", "back_inserter", "distance", "front_inserter", "inserter",
        -:10467:    "make_pair", "make_shared", "make_tuple"
       75:10468:};
call    0 returned 100%
call    1 never executed
        -:10469:
        -:10470:
        -:10471:// Add std:: in front of std classes, when using namespace std; was given
function _ZN9Tokenizer20simplifyNamespaceStdEv called 956 returned 100% blocks executed 9%
      956:10472:void Tokenizer::simplifyNamespaceStd()
        -:10473:{
      956:10474:    if (!isCPP())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22:10475:        return;
        -:10476:
      934:10477:    const bool isCPP11  = mSettings->standards.cpp == Standards::CPP11;
        -:10478:
     1868:10479:    std::set<std::string> userFunctions;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:10480:
      934:10481:    for (const Token* tok = Token::findsimplematch(list.front(), "using namespace std ;"); tok; tok = tok->next()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
    #####:10482:        bool insert = false;
    #####:10483:        if (Token::Match(tok, "enum class|struct| %name%| :|{")) { // Don't replace within enum definitions
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10484:            skipEnumBody(&tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10485:        }
    #####:10486:        if (!Token::Match(tok->previous(), ".|::")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10487:            if (Token::Match(tok, "%name% (")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10488:                if (isFunctionHead(tok->next(), "{"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:10489:                    userFunctions.insert(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:10490:                else if (isFunctionHead(tok->next(), ";")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
    #####:10491:                    const Token *start = tok;
    #####:10492:                    while (Token::Match(start->previous(), "%type%|*|&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10493:                        start = start->previous();
call    0 never executed
    #####:10494:                    if (start != tok && start->isName() && (!start->previous() || Token::Match(start->previous(), "[;{}]")))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
    #####:10495:                        userFunctions.insert(tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:10496:                }
    #####:10497:                if (userFunctions.find(tok->str()) == userFunctions.end() && stdFunctions.find(tok->str()) != stdFunctions.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
branch 36 never executed
branch 37 never executed
call   38 never executed
branch 39 never executed
branch 40 never executed
call   41 never executed
    #####:10498:                    insert = true;
    #####:10499:            } else if (Token::Match(tok, "%name% <") && stdTemplates.find(tok->str()) != stdTemplates.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
    #####:10500:                insert = true;
    #####:10501:            else if (tok->isName() && !tok->varId() && !Token::Match(tok->next(), "(|<") && stdTypes.find(tok->str()) != stdTypes.end())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
    #####:10502:                insert = true;
        -:10503:        }
        -:10504:
    #####:10505:        if (insert) {
branch  0 never executed
branch  1 never executed
    #####:10506:            tok->previous()->insertToken("std");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:10507:            tok->previous()->linenr(tok->linenr()); // For stylistic reasons we put the std:: in the same line as the following token
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10508:            tok->previous()->fileIndex(tok->fileIndex());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:10509:            tok->previous()->insertToken("::");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:10510:        } else if (isCPP11 && Token::Match(tok, "!!:: tr1 ::"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:10511:            tok->next()->str("std");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:10512:    }
        -:10513:
    29421:10514:    for (Token* tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28487:10515:        if (isCPP11 && Token::simpleMatch(tok, "std :: tr1 ::"))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:10516:            Token::eraseTokens(tok, tok->tokAt(3));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10517:
    28487:10518:        else if (Token::simpleMatch(tok, "using namespace std ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10519:            Token::eraseTokens(tok, tok->tokAt(4));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10520:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10521:        }
        -:10522:    }
        -:10523:}
        -:10524:
        -:10525:
function _ZN9Tokenizer32simplifyMicrosoftMemoryFunctionsEv called 956 returned 100% blocks executed 31%
      956:10526:void Tokenizer::simplifyMicrosoftMemoryFunctions()
        -:10527:{
        -:10528:    // skip if not Windows
      956:10529:    if (!mSettings->isWindowsPlatform())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
      928:10530:        return;
        -:10531:
      899:10532:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
      871:10533:        if (tok->strAt(1) != "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
      764:10534:            continue;
        -:10535:
      107:10536:        if (Token::Match(tok, "CopyMemory|RtlCopyMemory|RtlCopyBytes")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10537:            tok->str("memcpy");
call    0 never executed
      107:10538:        } else if (Token::Match(tok, "MoveMemory|RtlMoveMemory")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10539:            tok->str("memmove");
call    0 never executed
      107:10540:        } else if (Token::Match(tok, "FillMemory|RtlFillMemory|RtlFillBytes")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:10541:            // FillMemory(dst, len, val) -> memset(dst, val, len)
    #####:10542:            tok->str("memset");
call    0 never executed
        -:10543:
    #####:10544:            Token *tok1 = tok->tokAt(2);
call    0 never executed
    #####:10545:            if (tok1)
branch  0 never executed
branch  1 never executed
    #####:10546:                tok1 = tok1->nextArgument(); // Second argument
call    0 never executed
    #####:10547:            if (tok1) {
branch  0 never executed
branch  1 never executed
    #####:10548:                Token *tok2 = tok1->nextArgument(); // Third argument
call    0 never executed
        -:10549:
    #####:10550:                if (tok2)
branch  0 never executed
branch  1 never executed
    #####:10551:                    Token::move(tok1->previous(), tok2->tokAt(-2), tok->next()->link()->previous()); // Swap third with second argument
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
        -:10552:            }
      107:10553:        } else if (Token::Match(tok, "ZeroMemory|RtlZeroMemory|RtlZeroBytes|RtlSecureZeroMemory")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:10554:            // ZeroMemory(dst, len) -> memset(dst, 0, len)
    #####:10555:            tok->str("memset");
call    0 never executed
        -:10556:
    #####:10557:            Token *tok1 = tok->tokAt(2);
call    0 never executed
    #####:10558:            if (tok1)
branch  0 never executed
branch  1 never executed
    #####:10559:                tok1 = tok1->nextArgument(); // Second argument
call    0 never executed
        -:10560:
    #####:10561:            if (tok1) {
branch  0 never executed
branch  1 never executed
    #####:10562:                tok1 = tok1->previous();
call    0 never executed
    #####:10563:                tok1->insertToken("0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:10564:                tok1 = tok1->next();
call    0 never executed
    #####:10565:                tok1->insertToken(",");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:10566:            }
      107:10567:        } else if (Token::simpleMatch(tok, "RtlCompareMemory")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:10568:            // RtlCompareMemory(src1, src2, len) -> memcmp(src1, src2, len)
    #####:10569:            tok->str("memcmp");
call    0 never executed
        -:10570:            // For the record, when memcmp returns 0, both strings are equal.
        -:10571:            // When RtlCompareMemory returns len, both strings are equal.
        -:10572:            // It might be needed to improve this replacement by something
        -:10573:            // like ((len - memcmp(src1, src2, len)) % (len + 1)) to
        -:10574:            // respect execution path (if required)
        -:10575:        }
        -:10576:    }
        -:10577:}
        -:10578:
        -:10579:namespace {
function _ZN12_GLOBAL__N_17tripletC2ERKS0_ called 32 returned 100% blocks executed 80%
function _ZN12_GLOBAL__N_17tripletC2EOS0_ called 64 returned 100% blocks executed 100%
function _ZN12_GLOBAL__N_17tripletD2Ev called 128 returned 100% blocks executed 100%
      224:10580:    struct triplet {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
function _ZN12_GLOBAL__N_17tripletC2EPKcS2_ called 32 returned 100% blocks executed 53%
       32:10581:        triplet(const char* m, const char* u) :  mbcs(m), unicode(u) {}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:10582:        std::string mbcs, unicode;
        -:10583:    };
        -:10584:
       65:10585:    const std::map<std::string, triplet> apis = {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
branch 13 taken 100% (fallthrough)
branch 14 taken 0% (throw)
call   15 returned 100%
branch 16 taken 100% (fallthrough)
branch 17 taken 0% (throw)
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0% (throw)
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
branch 25 taken 100% (fallthrough)
branch 26 taken 0% (throw)
call   27 returned 100%
branch 28 taken 100% (fallthrough)
branch 29 taken 0% (throw)
call   30 returned 100%
branch 31 taken 100% (fallthrough)
branch 32 taken 0% (throw)
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
branch 37 taken 100% (fallthrough)
branch 38 taken 0% (throw)
call   39 returned 100%
branch 40 taken 100% (fallthrough)
branch 41 taken 0% (throw)
call   42 returned 100%
branch 43 taken 100% (fallthrough)
branch 44 taken 0% (throw)
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 100% (fallthrough)
branch 50 taken 0% (throw)
call   51 returned 100%
branch 52 taken 100% (fallthrough)
branch 53 taken 0% (throw)
call   54 returned 100%
branch 55 taken 100% (fallthrough)
branch 56 taken 0% (throw)
call   57 returned 100%
branch 58 taken 100% (fallthrough)
branch 59 taken 0% (throw)
call   60 returned 100%
branch 61 taken 100% (fallthrough)
branch 62 taken 0% (throw)
call   63 returned 100%
branch 64 taken 100% (fallthrough)
branch 65 taken 0% (throw)
call   66 returned 100%
branch 67 taken 100% (fallthrough)
branch 68 taken 0% (throw)
call   69 returned 100%
branch 70 taken 100% (fallthrough)
branch 71 taken 0% (throw)
call   72 returned 100%
branch 73 taken 100% (fallthrough)
branch 74 taken 0% (throw)
call   75 returned 100%
branch 76 taken 100% (fallthrough)
branch 77 taken 0% (throw)
call   78 returned 100%
branch 79 taken 100% (fallthrough)
branch 80 taken 0% (throw)
call   81 returned 100%
branch 82 taken 100% (fallthrough)
branch 83 taken 0% (throw)
call   84 returned 100%
branch 85 taken 100% (fallthrough)
branch 86 taken 0% (throw)
call   87 returned 100%
branch 88 taken 100% (fallthrough)
branch 89 taken 0% (throw)
call   90 returned 100%
branch 91 taken 100% (fallthrough)
branch 92 taken 0% (throw)
call   93 returned 100%
branch 94 taken 100% (fallthrough)
branch 95 taken 0% (throw)
call   96 returned 100%
call   97 returned 100%
branch 98 taken 100% (fallthrough)
branch 99 taken 0% (throw)
call   100 returned 100%
branch 101 taken 97% (fallthrough)
branch 102 taken 3%
call   103 returned 100%
call   104 never executed
branch 105 never executed
branch 106 never executed
        2:10586:        std::make_pair("_topen", triplet("open", "_wopen")),
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        2:10587:        std::make_pair("_tsopen_s", triplet("_sopen_s", "_wsopen_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10588:        std::make_pair("_tfopen", triplet("fopen", "_wfopen")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10589:        std::make_pair("_tfopen_s", triplet("fopen_s", "_wfopen_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10590:        std::make_pair("_tfreopen", triplet("freopen", "_wfreopen")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10591:        std::make_pair("_tfreopen_s", triplet("freopen_s", "_wfreopen_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10592:        std::make_pair("_tcscat", triplet("strcat", "wcscat")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10593:        std::make_pair("_tcschr", triplet("strchr", "wcschr")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10594:        std::make_pair("_tcscmp", triplet("strcmp", "wcscmp")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10595:        std::make_pair("_tcsdup", triplet("strdup", "wcsdup")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10596:        std::make_pair("_tcscpy", triplet("strcpy", "wcscpy")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10597:        std::make_pair("_tcslen", triplet("strlen", "wcslen")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10598:        std::make_pair("_tcsncat", triplet("strncat", "wcsncat")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10599:        std::make_pair("_tcsncpy", triplet("strncpy", "wcsncpy")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10600:        std::make_pair("_tcsnlen", triplet("strnlen", "wcsnlen")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10601:        std::make_pair("_tcsrchr", triplet("strrchr", "wcsrchr")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10602:        std::make_pair("_tcsstr", triplet("strstr", "wcsstr")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10603:        std::make_pair("_tcstok", triplet("strtok", "wcstok")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10604:        std::make_pair("_ftprintf", triplet("fprintf", "fwprintf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10605:        std::make_pair("_tprintf", triplet("printf", "wprintf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10606:        std::make_pair("_stprintf", triplet("sprintf", "swprintf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10607:        std::make_pair("_sntprintf", triplet("_snprintf", "_snwprintf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10608:        std::make_pair("_ftscanf", triplet("fscanf", "fwscanf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10609:        std::make_pair("_tscanf", triplet("scanf", "wscanf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10610:        std::make_pair("_stscanf", triplet("sscanf", "swscanf")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10611:        std::make_pair("_ftprintf_s", triplet("fprintf_s", "fwprintf_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10612:        std::make_pair("_tprintf_s", triplet("printf_s", "wprintf_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10613:        std::make_pair("_stprintf_s", triplet("sprintf_s", "swprintf_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10614:        std::make_pair("_sntprintf_s", triplet("_snprintf_s", "_snwprintf_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10615:        std::make_pair("_ftscanf_s", triplet("fscanf_s", "fwscanf_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10616:        std::make_pair("_tscanf_s", triplet("scanf_s", "wscanf_s")),
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
        2:10617:        std::make_pair("_stscanf_s", triplet("sscanf_s", "swscanf_s"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
call    8 never executed
call    9 never executed
       32:10618:    };
call    0 returned 100%
call    1 never executed
        -:10619:}
        -:10620:
function _ZN9Tokenizer32simplifyMicrosoftStringFunctionsEv called 956 returned 100% blocks executed 35%
      956:10621:void Tokenizer::simplifyMicrosoftStringFunctions()
        -:10622:{
        -:10623:    // skip if not Windows
      956:10624:    if (!mSettings->isWindowsPlatform())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
      928:10625:        return;
        -:10626:
       28:10627:    const bool ansi = mSettings->platformType == Settings::Win32A;
      899:10628:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
      871:10629:        if (tok->strAt(1) != "(")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 88% (fallthrough)
branch  5 taken 12%
      764:10630:            continue;
        -:10631:
      214:10632:        const std::map<std::string, triplet>::const_iterator match = apis.find(tok->str());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
      107:10633:        if (match!=apis.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10634:            tok->str(ansi ? match->second.mbcs : match->second.unicode);
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:10635:            tok->originalName(match->first);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
      107:10636:        } else if (Token::Match(tok, "_T|_TEXT|TEXT ( %char%|%str% )")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10637:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10638:            tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10639:            tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10640:            if (!ansi) {
branch  0 never executed
branch  1 never executed
    #####:10641:                tok->isLong(true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10642:                if (tok->str()[0] != 'L')
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10643:                    tok->str("L" + tok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:10644:            }
    #####:10645:            while (Token::Match(tok->next(), "_T|_TEXT|TEXT ( %char%|%str% )")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:10646:                tok->next()->deleteNext();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10647:                tok->next()->deleteThis();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10648:                tok->next()->deleteNext();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10649:                tok->concatStr(tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:10650:                tok->deleteNext();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10651:            }
        -:10652:        }
        -:10653:    }
        -:10654:}
        -:10655:
        -:10656:// Remove Borland code
function _ZN9Tokenizer15simplifyBorlandEv called 956 returned 100% blocks executed 24%
      956:10657:void Tokenizer::simplifyBorland()
        -:10658:{
        -:10659:    // skip if not Windows
      956:10660:    if (!mSettings->isWindowsPlatform())
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
      928:10661:        return;
       28:10662:    if (isC())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10663:        return;
      899:10664:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
      871:10665:        if (Token::Match(tok, "( __closure * %name% )")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10666:            tok->deleteNext();
call    0 never executed
        -:10667:        }
        -:10668:    }
        -:10669:
        -:10670:    // I think that these classes are always declared at the outer scope
        -:10671:    // I save some time by ignoring inner classes.
      176:10672:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
call    3 returned 100%
      148:10673:        if (tok->str() == "{" && !Token::Match(tok->tokAt(-2), "namespace %type%")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 19% (fallthrough)
branch  9 taken 81%
       28:10674:            tok = tok->link();
call    0 returned 100%
       28:10675:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10676:                break;
      120:10677:        } else if (Token::Match(tok, "class %name% :|{")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10678:            while (tok && tok->str() != "{" && tok->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:10679:                tok = tok->next();
call    0 never executed
    #####:10680:            if (!tok)
branch  0 never executed
branch  1 never executed
    #####:10681:                break;
    #####:10682:            if (tok->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10683:                continue;
        -:10684:
    #####:10685:            const Token* end = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:10686:            for (Token *tok2 = tok->next(); tok2 != end; tok2 = tok2->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:10687:                if (tok2->str() == "__property" &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10688:                    Token::Match(tok2->previous(), ";|{|}|protected:|public:|__published:")) {
call    0 never executed
call    1 never executed
    #####:10689:                    while (tok2->next() && !Token::Match(tok2->next(), "{|;"))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:10690:                        tok2->deleteNext();
call    0 never executed
    #####:10691:                    tok2->deleteThis();
call    0 never executed
    #####:10692:                    if (tok2->str() == "{") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10693:                        Token::eraseTokens(tok2, tok2->link());
call    0 never executed
call    1 never executed
    #####:10694:                        tok2->deleteNext();
call    0 never executed
    #####:10695:                        tok2->deleteThis();
call    0 never executed
        -:10696:
        -:10697:                        // insert "; __property ;"
    #####:10698:                        tok2->previous()->insertToken(";");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:10699:                        tok2->previous()->insertToken("__property");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:10700:                        tok2->previous()->insertToken(";");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:10701:                    }
        -:10702:                }
        -:10703:            }
        -:10704:        }
        -:10705:    }
        -:10706:}
        -:10707:
        -:10708:// Remove Qt signals and slots
function _ZN9Tokenizer22simplifyQtSignalsSlotsEv called 956 returned 100% blocks executed 67%
      956:10709:void Tokenizer::simplifyQtSignalsSlots()
        -:10710:{
      956:10711:    if (isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22:10712:        return;
    28717:10713:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
        -:10714:        // check for emit which can be outside of class
    27783:10715:        if (Token::Match(tok, "emit|Q_EMIT %name% (") &&
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####:10716:            Token::simpleMatch(tok->linkAt(2), ") ;")) {
call    0 never executed
call    1 never executed
    #####:10717:            tok->deleteThis();
call    0 never executed
    27783:10718:        } else if (!Token::Match(tok, "class %name% :"))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    27775:10719:            continue;
        -:10720:
        8:10721:        if (tok->previous() && tok->previous()->str() == "enum") {
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 13%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:10722:            tok = tok->tokAt(2);
call    0 never executed
    #####:10723:            continue;
        -:10724:        }
        -:10725:
        -:10726:        // count { and } for tok2
        8:10727:        int indentlevel = 0;
      123:10728:        for (Token *tok2 = tok; tok2; tok2 = tok2->next()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
      119:10729:            if (tok2->str() == "{") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
       12:10730:                ++indentlevel;
       12:10731:                if (indentlevel == 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        8:10732:                    tok = tok2;
        -:10733:                else
        4:10734:                    tok2 = tok2->link();
call    0 returned 100%
      107:10735:            } else if (tok2->str() == "}") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        8:10736:                if (indentlevel<2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        4:10737:                    break;
        -:10738:                else
        4:10739:                    --indentlevel;
        -:10740:            }
      115:10741:            if (tok2->strAt(1) == "Q_OBJECT")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10742:                tok2->deleteNext();
call    0 never executed
        -:10743:
      115:10744:            if (Token::Match(tok2->next(), "public|protected|private slots|Q_SLOTS :")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10745:                tok2 = tok2->next();
call    0 never executed
    #####:10746:                tok2->str(tok2->str() + ":");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####:10747:                tok2->deleteNext(2);
call    0 never executed
    #####:10748:                tok2 = tok2->previous();
call    0 never executed
      115:10749:            } else if (Token::Match(tok2->next(), "signals|Q_SIGNALS :")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10750:                tok2 = tok2->next();
call    0 never executed
    #####:10751:                tok2->str("protected:");
call    0 never executed
    #####:10752:                tok2->deleteNext();
call    0 never executed
      115:10753:            } else if (Token::Match(tok2->next(), "emit|Q_EMIT %name% (") &&
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:10754:                       Token::simpleMatch(tok2->linkAt(3), ") ;")) {
call    0 never executed
call    1 never executed
    #####:10755:                tok2->deleteNext();
call    0 never executed
        -:10756:            }
        -:10757:        }
        -:10758:    }
        -:10759:}
        -:10760:
function _ZN9Tokenizer20createSymbolDatabaseEv called 956 returned 100% blocks executed 88%
      956:10761:void Tokenizer::createSymbolDatabase()
        -:10762:{
      956:10763:    if (!mSymbolDatabase)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      956:10764:        mSymbolDatabase = new SymbolDatabase(this, mSettings, mErrorLogger);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
      956:10765:    mSymbolDatabase->validate();
call    0 returned 100%
      956:10766:}
        -:10767:
function _ZN9Tokenizer20deleteSymbolDatabaseEv called 0 returned 0% blocks executed 0%
    #####:10768:void Tokenizer::deleteSymbolDatabase()
        -:10769:{
    #####:10770:    delete mSymbolDatabase;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:10771:    mSymbolDatabase = nullptr;
    #####:10772:}
        -:10773:
function _ZL11operatorEndPK5Token called 3 returned 100% blocks executed 42%
        3:10774:static bool operatorEnd(const Token * tok)
        -:10775:{
        3:10776:    if (tok && tok->str() == ")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        3:10777:        tok = tok->next();
call    0 returned 100%
        3:10778:        while (tok && !Token::Match(tok, "[=;{),]")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
        3:10779:            if (Token::Match(tok, "const|volatile")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10780:                tok = tok->next();
call    0 never executed
        3:10781:            } else if (tok->str() == "noexcept") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10782:                tok = tok->next();
call    0 never executed
    #####:10783:                if (tok && tok->str() == "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10784:                    tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:10785:                }
        3:10786:            } else if (tok->str() == "throw" && tok->next() && tok->next()->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
    #####:10787:                tok = tok->next()->link()->next();
call    0 never executed
call    1 never executed
call    2 never executed
        -:10788:            }
        -:10789:            // unknown macros ") MACRO {" and ") MACRO(...) {"
        3:10790:            else if (tok->isUpperCaseName()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:10791:                tok = tok->next();
call    0 never executed
    #####:10792:                if (tok && tok->str() == "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10793:                    tok = tok->link()->next();
call    0 never executed
call    1 never executed
        -:10794:                }
        -:10795:            } else
        3:10796:                return false;
        -:10797:        }
        -:10798:
    #####:10799:        return true;
        -:10800:    }
        -:10801:
    #####:10802:    return false;
        -:10803:}
        -:10804:
function _ZN9Tokenizer20simplifyOperatorNameEv called 956 returned 100% blocks executed 51%
      956:10805:void Tokenizer::simplifyOperatorName()
        -:10806:{
      956:10807:    if (isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22:10808:        return;
        -:10809:
    29491:10810:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    28557:10811:        if (Token::Match(tok, "using|:: operator %op% ;")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10812:            tok->next()->str("operator" + tok->strAt(2));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####:10813:            tok->next()->deleteNext();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    28550:10814:            continue;
        -:10815:        }
        -:10816:
    28557:10817:        if (tok->str() != "operator")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    28550:10818:            continue;
        -:10819:        // operator op
       14:10820:        std::string op;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
        7:10821:        Token *par = tok->next();
call    0 returned 100%
        7:10822:        bool done = false;
       35:10823:        while (!done && par) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       14:10824:            done = true;
       14:10825:            if (par->isName()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10826:                op += par->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10827:                par = par->next();
call    0 never executed
        -:10828:                // merge namespaces eg. 'operator std :: string () const {'
    #####:10829:                if (Token::Match(par, ":: %name%|%op%|.")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10830:                    op += par->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10831:                    par = par->next();
call    0 never executed
        -:10832:                }
    #####:10833:                done = false;
       14:10834:            } else if (Token::Match(par, ".|%op%|,")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 29% (fallthrough)
branch  4 taken 71%
        -:10835:                // check for operator in template
        4:10836:                if (!(Token::Match(par, "<|>") && !op.empty())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
        4:10837:                    op += par->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        4:10838:                    par = par->next();
call    0 returned 100%
        4:10839:                    done = false;
        -:10840:                }
       10:10841:            } else if (Token::simpleMatch(par, "[ ]")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10842:                op += "[]";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10843:                par = par->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10844:                done = false;
       10:10845:            } else if (Token::Match(par, "( *| )")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 30% (fallthrough)
branch  4 taken 70%
        -:10846:                // break out and simplify..
        3:10847:                if (operatorEnd(par->next()))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10848:                    break;
        -:10849:
        3:10850:                while (par->str() != ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3:10851:                    op += par->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        3:10852:                    par = par->next();
call    0 returned 100%
        -:10853:                }
        3:10854:                op += ")";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3:10855:                par = par->next();
call    0 returned 100%
        3:10856:                done = false;
        7:10857:            } else if (Token::Match(par, "\"\" %name% (")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:10858:                op += "\"\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10859:                op += par->strAt(1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10860:                par = par->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10861:                done = true;
        -:10862:            }
        -:10863:        }
        -:10864:
        7:10865:        if (par && (Token::Match(par, "<|>") || isFunctionHead(par, "{|;"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
call    7 returned 100%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0% (throw)
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
call   18 returned 100%
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0%
branch 24 never executed
branch 25 never executed
call   26 never executed
branch 27 never executed
branch 28 never executed
call   29 never executed
        7:10866:            tok->str("operator" + op);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        7:10867:            Token::eraseTokens(tok, par);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:10868:        }
        -:10869:
        7:10870:        if (!op.empty())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        7:10871:            tok->isOperatorKeyword(true);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:10872:    }
        -:10873:
      934:10874:    if (mSettings->debugwarnings) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10875:        const Token *tok = list.front();
call    0 never executed
        -:10876:
    #####:10877:        while ((tok = Token::findsimplematch(tok, "operator")) != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10878:            reportError(tok, Severity::debug, "debug",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:10879:                        "simplifyOperatorName: found unsimplified operator name");
    #####:10880:            tok = tok->next();
call    0 never executed
        -:10881:        }
        -:10882:    }
        -:10883:}
        -:10884:
        -:10885:// remove unnecessary member qualification..
function _ZN9Tokenizer30removeUnnecessaryQualificationEv called 956 returned 100% blocks executed 48%
      956:10886:void Tokenizer::removeUnnecessaryQualification()
        -:10887:{
      956:10888:    if (isC())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       44:10889:        return;
        -:10890:
     1868:10891:    std::vector<Space> classInfo;
call    0 returned 100%
call    1 never executed
    28411:10892:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100%
branch  6 taken 0%
    27797:10893:        if (Token::Match(tok, "class|struct|namespace %type% :|{") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
branch  5 taken 24% (fallthrough)
branch  6 taken 76%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
      199:10894:            (!tok->previous() || tok->previous()->str() != "enum")) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
      320:10895:            Space info;
call    0 returned 100%
call    1 never executed
      160:10896:            info.isNamespace = tok->str() == "namespace";
call    0 returned 100%
call    1 returned 100%
      160:10897:            tok = tok->next();
call    0 returned 100%
      160:10898:            info.className = tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
      160:10899:            tok = tok->next();
call    0 returned 100%
      208:10900:            while (tok && tok->str() != "{")
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
branch  6 taken 13% (fallthrough)
branch  7 taken 87%
       24:10901:                tok = tok->next();
call    0 returned 100%
      160:10902:            if (!tok)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10903:                return;
      160:10904:            info.bodyEnd = tok->link();
call    0 returned 100%
      160:10905:            classInfo.push_back(info);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100%
branch  5 taken 0%
    27317:10906:        } else if (!classInfo.empty()) {
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
     1970:10907:            if (tok == classInfo.back().bodyEnd)
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
      160:10908:                classInfo.pop_back();
call    0 returned 100%
     3669:10909:            else if (tok->str() == classInfo.back().className &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
     1906:10910:                     !classInfo.back().isNamespace && tok->previous()->str() != ":" &&
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
       96:10911:                     (Token::Match(tok, "%type% :: ~| %type% (") ||
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
       48:10912:                      Token::Match(tok, "%type% :: operator"))) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
    #####:10913:                const Token *tok1 = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10914:                if (tok->strAt(2) == "operator") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:10915:                    // check for operator ()
    #####:10916:                    if (tok1->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10917:                        tok1 = tok1->next();
call    0 never executed
        -:10918:
    #####:10919:                    while (tok1 && tok1->str() != "(") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10920:                        if (tok1->str() == ";")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10921:                            break;
    #####:10922:                        tok1 = tok1->next();
call    0 never executed
        -:10923:                    }
    #####:10924:                    if (!tok1 || tok1->str() != "(")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:10925:                        continue;
    #####:10926:                } else if (tok->strAt(2) == "~")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:10927:                    tok1 = tok1->next();
call    0 never executed
        -:10928:
    #####:10929:                if (!tok1 || !Token::Match(tok1->link(), ") const| {|;|:")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:10930:                    continue;
        -:10931:                }
        -:10932:
        -:10933:                const bool isConstructorOrDestructor =
    #####:10934:                    Token::Match(tok, "%type% :: ~| %type%") && (tok->strAt(2) == tok->str() || (tok->strAt(2) == "~" && tok->strAt(3) == tok->str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
    #####:10935:                if (!isConstructorOrDestructor) {
branch  0 never executed
branch  1 never executed
    #####:10936:                    bool isPrependedByType = Token::Match(tok->previous(), "%type%");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10937:                    if (!isPrependedByType) {
branch  0 never executed
branch  1 never executed
    #####:10938:                        const Token* tok2 = tok->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10939:                        isPrependedByType = Token::Match(tok2, "%type% *|&");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10940:                    }
    #####:10941:                    if (!isPrependedByType) {
branch  0 never executed
branch  1 never executed
    #####:10942:                        const Token* tok3 = tok->tokAt(-3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:10943:                        isPrependedByType = Token::Match(tok3, "%type% * *|&");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:10944:                    }
    #####:10945:                    if (!isPrependedByType) {
branch  0 never executed
branch  1 never executed
        -:10946:                        // It's not a constructor declaration and it's not a function declaration so
        -:10947:                        // this is a function call which can have all the qualifiers just fine - skip.
    #####:10948:                        continue;
        -:10949:                    }
        -:10950:                }
        -:10951:            }
        -:10952:        }
        -:10953:    }
        -:10954:}
        -:10955:
function _ZN9Tokenizer21simplifyReturnStrncatEv called 0 returned 0% blocks executed 0%
    #####:10956:void Tokenizer::simplifyReturnStrncat()
        -:10957:{
    #####:10958:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:10959:        if (Token::simpleMatch(tok, "return strncat (") &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:10960:            Token::simpleMatch(tok->linkAt(2), ") ;") &&
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:10961:            tok->strAt(3) != ")" && tok->strAt(3) != ",") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:10962:
        -:10963:            //first argument
    #####:10964:            Token *tok2 = tok->tokAt(3);
call    0 never executed
        -:10965:
        -:10966:            //check if there are at least three arguments
    #####:10967:            for (int i = 0; i < 2; ++i) {
branch  0 never executed
branch  1 never executed
    #####:10968:                tok2 = tok2->nextArgument();
call    0 never executed
    #####:10969:                if (!tok2) {
branch  0 never executed
branch  1 never executed
    #####:10970:                    tok = tok->linkAt(2)->next();
call    0 never executed
call    1 never executed
    #####:10971:                    break;
        -:10972:                }
        -:10973:            }
    #####:10974:            if (!tok2)
branch  0 never executed
branch  1 never executed
    #####:10975:                continue;
        -:10976:
    #####:10977:            tok2 = tok2->nextArgument();
call    0 never executed
        -:10978:            //we want only three arguments
    #####:10979:            if (tok2) {
branch  0 never executed
branch  1 never executed
    #####:10980:                tok = tok->linkAt(2)->next();
call    0 never executed
call    1 never executed
    #####:10981:                continue;
        -:10982:            }
        -:10983:
        -:10984:            // Remove 'return'
    #####:10985:            tok->deleteThis();
call    0 never executed
        -:10986:
        -:10987:            // Add 'return arg1 ;' after 'strncat(arg1, arg2, arg3);'
    #####:10988:            tok = tok->next();
call    0 never executed
        -:10989:
    #####:10990:            tok2 = tok->link()->next();
call    0 never executed
call    1 never executed
    #####:10991:            tok2->insertToken(";");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:10992:
        -:10993:            //the last token of the first argument before ','
    #####:10994:            const Token * const end = tok->next()->nextArgument()->tokAt(-2);
call    0 never executed
call    1 never executed
call    2 never executed
        -:10995:
        -:10996:            //all the first argument is copied
    #####:10997:            TokenList::copyTokens(tok2, tok->next(), end);
call    0 never executed
call    1 never executed
    #####:10998:            tok2->insertToken("return");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:10999:        }
        -:11000:    }
    #####:11001:}
        -:11002:
function _ZNK9Tokenizer17printUnknownTypesEv called 0 returned 0% blocks executed 0%
    #####:11003:void Tokenizer::printUnknownTypes() const
        -:11004:{
    #####:11005:    if (!mSymbolDatabase)
branch  0 never executed
branch  1 never executed
    #####:11006:        return;
        -:11007:
    #####:11008:    std::multimap<std::string, const Token *> unknowns;
call    0 never executed
call    1 never executed
call    2 never executed
        -:11009:
    #####:11010:    for (int i = 1; i <= mVarId; ++i) {
branch  0 never executed
branch  1 never executed
    #####:11011:        const Variable *var = mSymbolDatabase->getVariableFromVarId(i);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11012:        if (!var)
branch  0 never executed
branch  1 never executed
    #####:11013:            continue;
        -:11014:        // is unknown type?
    #####:11015:        if (var->type() || var->typeStartToken()->isStandardType())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:11016:            continue;
        -:11017:
    #####:11018:        std::string name;
call    0 never executed
call    1 never executed
call    2 never executed
        -:11019:        const Token * nameTok;
        -:11020:
        -:11021:        // single token type?
    #####:11022:        if (var->typeStartToken() == var->typeEndToken()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11023:            nameTok = var->typeStartToken();
call    0 never executed
    #####:11024:            name = nameTok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11025:        }
        -:11026:
        -:11027:        // complicated type
        -:11028:        else {
    #####:11029:            const Token *tok = var->typeStartToken();
call    0 never executed
    #####:11030:            int level = 0;
        -:11031:
    #####:11032:            nameTok =  tok;
        -:11033:
    #####:11034:            while (tok) {
branch  0 never executed
branch  1 never executed
        -:11035:                // skip pointer and reference part of type
    #####:11036:                if (level == 0 && Token::Match(tok, "*|&"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:11037:                    break;
        -:11038:
    #####:11039:                name += tok->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11040:
    #####:11041:                if (Token::Match(tok, "struct|union|enum"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:11042:                    name += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11043:
        -:11044:                // pointers and references are OK in template
    #####:11045:                else if (tok->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11046:                    ++level;
    #####:11047:                else if (tok->str() == ">")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11048:                    --level;
        -:11049:
    #####:11050:                if (tok == var->typeEndToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11051:                    break;
        -:11052:
    #####:11053:                tok = tok->next();
call    0 never executed
        -:11054:            }
        -:11055:        }
        -:11056:
    #####:11057:        unknowns.insert(std::pair<std::string, const Token *>(name, nameTok));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:11058:    }
        -:11059:
    #####:11060:    if (!unknowns.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11061:        std::string last;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:11062:        int count = 0;
        -:11063:
    #####:11064:        for (std::multimap<std::string, const Token *>::const_iterator it = unknowns.begin(); it != unknowns.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:11065:            // skip types is std namespace because they are not interesting
    #####:11066:            if (it->first.find("std::") != 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11067:                if (it->first != last) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11068:                    last = it->first;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11069:                    count = 1;
    #####:11070:                    reportError(it->second, Severity::debug, "debug", "Unknown type \'" + it->first + "\'.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -:11071:                } else {
    #####:11072:                    if (count < 3) // limit same type to 3
branch  0 never executed
branch  1 never executed
    #####:11073:                        reportError(it->second, Severity::debug, "debug", "Unknown type \'" + it->first + "\'.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    #####:11074:                    count++;
        -:11075:                }
        -:11076:            }
        -:11077:        }
        -:11078:    }
        -:11079:}
        -:11080:
function _ZN9Tokenizer23simplifyMathExpressionsEv called 956 returned 100% blocks executed 5%
      956:11081:void Tokenizer::simplifyMathExpressions()
        -:11082:{
    29003:11083:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
        -:11084:
        -:11085:        //simplify Pythagorean trigonometric identity: pow(sin(x),2)+pow(cos(x),2) = 1
        -:11086:        //                                             pow(cos(x),2)+pow(sin(x),2) = 1
        -:11087:        // @todo: sin(x) * sin(x) + cos(x) * cos(x) = 1
        -:11088:        //        cos(x) * cos(x) + sin(x) * sin(x) = 1
        -:11089:        //simplify Hyperbolic identity: pow(sinh(x),2)-pow(cosh(x),2) = -1
        -:11090:        //                              pow(cosh(x),2)-pow(sinh(x),2) = -1
        -:11091:        // @todo: sinh(x) * sinh(x) - cosh(x) * cosh(x) = -1
        -:11092:        //        cosh(x) * cosh(x) - sinh(x) * sinh(x) = -1
    28047:11093:        if (Token::Match(tok, "pow|powf|powl (")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:11094:            if (Token::Match(tok->tokAt(2), "sin|sinf|sinl (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11095:                Token * const tok2 = tok->linkAt(3);
call    0 never executed
    #####:11096:                if (!Token::Match(tok2, ") , %num% ) + pow|powf|powl ( cos|cosf|cosl ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11097:                    continue;
    #####:11098:                const std::string& leftExponent = tok2->strAt(2);
call    0 never executed
    #####:11099:                if (!isTwoNumber(leftExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11100:                    continue; // left exponent is not 2
    #####:11101:                const Token * const tok3 = tok2->tokAt(8);
call    0 never executed
    #####:11102:                Token * const tok4 = tok3->link();
call    0 never executed
    #####:11103:                if (!Token::Match(tok4, ") , %num% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11104:                    continue;
    #####:11105:                const std::string& rightExponent = tok4->strAt(2);
call    0 never executed
    #####:11106:                if (!isTwoNumber(rightExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11107:                    continue; // right exponent is not 2
    #####:11108:                if (tok->tokAt(3)->stringifyList(tok2->next()) == tok3->stringifyList(tok4->next())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####:11109:                    Token::eraseTokens(tok, tok4->tokAt(4));
call    0 never executed
call    1 never executed
    #####:11110:                    tok->str("1");
call    0 never executed
        -:11111:                }
    #####:11112:            } else if (Token::Match(tok->tokAt(2), "cos|cosf|cosl (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11113:                Token * const tok2 = tok->linkAt(3);
call    0 never executed
    #####:11114:                if (!Token::Match(tok2, ") , %num% ) + pow|powf|powl ( sin|sinf|sinl ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11115:                    continue;
    #####:11116:                const std::string& leftExponent = tok2->strAt(2);
call    0 never executed
    #####:11117:                if (!isTwoNumber(leftExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11118:                    continue; // left exponent is not 2
    #####:11119:                const Token * const tok3 = tok2->tokAt(8);
call    0 never executed
    #####:11120:                Token * const tok4 = tok3->link();
call    0 never executed
    #####:11121:                if (!Token::Match(tok4, ") , %num% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11122:                    continue;
    #####:11123:                const std::string& rightExponent = tok4->strAt(2);
call    0 never executed
    #####:11124:                if (!isTwoNumber(rightExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11125:                    continue; // right exponent is not 2
    #####:11126:                if (tok->tokAt(3)->stringifyList(tok2->next()) == tok3->stringifyList(tok4->next())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####:11127:                    Token::eraseTokens(tok, tok4->tokAt(4));
call    0 never executed
call    1 never executed
    #####:11128:                    tok->str("1");
call    0 never executed
        -:11129:                }
    #####:11130:            } else if (Token::Match(tok->tokAt(2), "sinh|sinhf|sinhl (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11131:                Token * const tok2 = tok->linkAt(3);
call    0 never executed
    #####:11132:                if (!Token::Match(tok2, ") , %num% ) - pow|powf|powl ( cosh|coshf|coshl ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11133:                    continue;
    #####:11134:                const std::string& leftExponent = tok2->strAt(2);
call    0 never executed
    #####:11135:                if (!isTwoNumber(leftExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11136:                    continue; // left exponent is not 2
    #####:11137:                const Token * const tok3 = tok2->tokAt(8);
call    0 never executed
    #####:11138:                Token * const tok4 = tok3->link();
call    0 never executed
    #####:11139:                if (!Token::Match(tok4, ") , %num% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11140:                    continue;
    #####:11141:                const std::string& rightExponent = tok4->strAt(2);
call    0 never executed
    #####:11142:                if (!isTwoNumber(rightExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11143:                    continue; // right exponent is not 2
    #####:11144:                if (tok->tokAt(3)->stringifyList(tok2->next()) == tok3->stringifyList(tok4->next())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
call   15 never executed
    #####:11145:                    Token::eraseTokens(tok, tok4->tokAt(4));
call    0 never executed
call    1 never executed
    #####:11146:                    tok->str("-1");
call    0 never executed
        -:11147:                }
    #####:11148:            } else if (Token::Match(tok->tokAt(2), "cosh|coshf|coshl (")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11149:                Token * const tok2 = tok->linkAt(3);
call    0 never executed
    #####:11150:                if (!Token::Match(tok2, ") , %num% ) - pow|powf|powl ( sinh|sinhf|sinhl ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11151:                    continue;
    #####:11152:                const std::string& leftExponent = tok2->strAt(2);
call    0 never executed
    #####:11153:                if (!isTwoNumber(leftExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11154:                    continue; // left exponent is not 2
    #####:11155:                const Token * const tok3 = tok2->tokAt(8);
call    0 never executed
    #####:11156:                Token * const tok4 = tok3->link();
call    0 never executed
    #####:11157:                if (!Token::Match(tok4, ") , %num% )"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11158:                    continue;
    #####:11159:                const std::string& rightExponent = tok4->strAt(2);
call    0 never executed
    #####:11160:                if (!isTwoNumber(rightExponent))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11161:                    continue; // right exponent is not 2
    #####:11162:                if (tok->tokAt(3)->stringifyList(tok2->next()) == tok3->stringifyList(tok4->next())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
    #####:11163:                    Token::eraseTokens(tok, tok4->tokAt(4));
call    0 never executed
call    1 never executed
    #####:11164:                    tok->str("-1");
call    0 never executed
        -:11165:                }
        -:11166:            }
        -:11167:        }
        -:11168:    }
      956:11169:}
        -:11170:
function _ZN9Tokenizer14simplifyStrlenEv called 0 returned 0% blocks executed 0%
    #####:11171:bool Tokenizer::simplifyStrlen()
        -:11172:{
        -:11173:    // replace strlen(str)
    #####:11174:    bool modified=false;
    #####:11175:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:11176:        if (Token::Match(tok, "strlen ( %str% )")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11177:            tok->str(MathLib::toString(Token::getStrLength(tok->tokAt(2))));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:11178:            tok->deleteNext(3);
call    0 never executed
    #####:11179:            modified=true;
        -:11180:        }
        -:11181:    }
    #####:11182:    return modified;
        -:11183:}
        -:11184:
function _ZN9Tokenizer22prepareTernaryOpForASTEv called 1912 returned 100% blocks executed 52%
     1912:11185:void Tokenizer::prepareTernaryOpForAST()
        -:11186:{
        -:11187:    // http://en.cppreference.com/w/cpp/language/operator_precedence says about ternary operator:
        -:11188:    //       "The expression in the middle of the conditional operator (between ? and :) is parsed as if parenthesized: its precedence relative to ?: is ignored."
        -:11189:    // The AST parser relies on this function to add such parentheses where necessary.
    59510:11190:    for (Token* tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    57598:11191:        if (tok->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       88:11192:            bool parenthesesNeeded = false;
       88:11193:            int depth = 0;
       88:11194:            Token* tok2 = tok->next();
call    0 returned 100%
      344:11195:            for (; tok2; tok2 = tok2->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      216:11196:                if (tok2->link() && Token::Match(tok2, "[|(|<"))
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 10% (fallthrough)
branch  7 taken 90%
       22:11197:                    tok2 = tok2->link();
call    0 returned 100%
      194:11198:                else if (tok2->str() == ":") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 45% (fallthrough)
branch  3 taken 55%
       88:11199:                    if (depth == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       88:11200:                        break;
    #####:11201:                    depth--;
      106:11202:                } else if (tok2->str() == ";" || (tok2->link() && tok2->str() != "{" && tok2->str() != "}"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####:11203:                    break;
      106:11204:                else if (tok2->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:11205:                    parenthesesNeeded = true;
      106:11206:                else if (tok2->str() == "<")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:11207:                    parenthesesNeeded = true;
      106:11208:                else if (tok2->str() == "?") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:11209:                    depth++;
    #####:11210:                    parenthesesNeeded = true;
        -:11211:                }
        -:11212:            }
       88:11213:            if (parenthesesNeeded && tok2 && tok2->str() == ":") {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:11214:                tok->insertToken("(");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:11215:                tok2->insertToken(")", emptyString, true);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:11216:                Token::createMutualLinks(tok->next(), tok2->previous());
call    0 never executed
call    1 never executed
call    2 never executed
        -:11217:            }
        -:11218:        }
        -:11219:    }
     1912:11220:}
        -:11221:
function _ZNK9Tokenizer11reportErrorEPK5TokenN8Severity12SeverityTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_b called 0 returned 0% blocks executed 0%
    #####:11222:void Tokenizer::reportError(const Token* tok, const Severity::SeverityType severity, const std::string& id, const std::string& msg, bool inconclusive) const
        -:11223:{
    #####:11224:    const std::list<const Token*> callstack(1, tok);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:11225:    reportError(callstack, severity, id, msg, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11226:}
call    0 never executed
        -:11227:
function _ZNK9Tokenizer11reportErrorERKNSt7__debug4listIPK5TokenSaIS4_EEEN8Severity12SeverityTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESI_b called 0 returned 0% blocks executed 0%
    #####:11228:void Tokenizer::reportError(const std::list<const Token*>& callstack, Severity::SeverityType severity, const std::string& id, const std::string& msg, bool inconclusive) const
        -:11229:{
    #####:11230:    const ErrorLogger::ErrorMessage errmsg(callstack, &list, severity, id, msg, inconclusive);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:11231:    if (mErrorLogger)
branch  0 never executed
branch  1 never executed
    #####:11232:        mErrorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11233:    else
    #####:11234:        Check::reportError(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11235:}
        -:11236:
function _ZN9Tokenizer11setPodTypesEv called 956 returned 100% blocks executed 97%
      956:11237:void Tokenizer::setPodTypes()
        -:11238:{
      956:11239:    if (!mSettings)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11240:        return;
    30017:11241:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    29061:11242:        if (!tok->isName())
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
    17535:11243:            continue;
        -:11244:
        -:11245:        // pod type
    11526:11246:        const struct Library::PodType *podType = mSettings->library.podtype(tok->str());
call    0 returned 100%
call    1 returned 100%
    11526:11247:        if (podType) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       42:11248:            const Token *prev = tok->previous();
call    0 returned 100%
       46:11249:            while (prev && prev->isName())
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
branch  5 taken 5% (fallthrough)
branch  6 taken 95%
        2:11250:                prev = prev->previous();
call    0 returned 100%
       42:11251:            if (prev && !Token::Match(prev, ";|{|}|,|("))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 18% (fallthrough)
branch  4 taken 83%
branch  5 taken 17% (fallthrough)
branch  6 taken 83%
        7:11252:                continue;
       35:11253:            tok->isStandardType(true);
call    0 returned 100%
        -:11254:        }
        -:11255:    }
        -:11256:}
        -:11257:
function _ZN9Tokenizer15findSQLBlockEndEPK5Token called 0 returned 0% blocks executed 0%
    #####:11258:const Token *Tokenizer::findSQLBlockEnd(const Token *tokSQLStart)
        -:11259:{
    #####:11260:    const Token *tokLastEnd = nullptr;
    #####:11261:    for (const Token *tok = tokSQLStart->tokAt(2); tok != nullptr; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:11262:        if (tokLastEnd == nullptr && tok->str() == ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:11263:            tokLastEnd = tok;
    #####:11264:        else if (tok->str() == "__CPPCHECK_EMBEDDED_SQL_EXEC__") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11265:            if (Token::simpleMatch(tok->tokAt(-2), "END - __CPPCHECK_EMBEDDED_SQL_EXEC__ ;"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11266:                return tok->next();
call    0 never executed
    #####:11267:            return tokLastEnd;
    #####:11268:        } else if (Token::Match(tok, "{|}|==|&&|!|^|<<|>>|++|+=|-=|/=|*=|>>=|<<=|~"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11269:            break; // We are obviously outside the SQL block
        -:11270:    }
        -:11271:
    #####:11272:    return tokLastEnd;
        -:11273:}
        -:11274:
function _ZN9Tokenizer23simplifyNestedNamespaceEv called 956 returned 100% blocks executed 14%
      956:11275:void Tokenizer::simplifyNestedNamespace()
        -:11276:{
      956:11277:    if (!isCPP())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22:11278:        return;
        -:11279:
    28547:11280:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27613:11281:        if (Token::Match(tok, "namespace %name% ::") && tok->strAt(-1) != "using") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:11282:            Token * tok2 = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11283:
        -:11284:            // validate syntax
    #####:11285:            while (Token::Match(tok2, ":: %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:11286:                tok2 = tok2->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11287:
    #####:11288:            if (!tok2 || tok2->str() != "{")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:11289:                return; // syntax error
        -:11290:
    #####:11291:            std::stack<Token *> links;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:11292:            tok2 = tok->tokAt(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11293:
    #####:11294:            while (tok2->str() == "::") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11295:                links.push(tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11296:                tok2->str("{");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11297:                tok2->insertToken("namespace");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:11298:                tok2 = tok2->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11299:            }
        -:11300:
    #####:11301:            tok = tok2;
        -:11302:
    #####:11303:            if (!links.empty() && tok2->str() == "{") {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:11304:                tok2 = tok2->link();
call    0 never executed
    #####:11305:                while (!links.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11306:                    tok2->insertToken("}");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:11307:                    tok2 = tok2->next();
call    0 never executed
    #####:11308:                    Token::createMutualLinks(links.top(), tok2);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:11309:                    links.pop();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11310:                }
        -:11311:            }
        -:11312:        }
        -:11313:    }
        -:11314:}
        -:11315:
function _ZL10sameTokensPK5TokenS1_S1_ called 0 returned 0% blocks executed 0%
    #####:11316:static bool sameTokens(const Token *first, const Token *last, const Token *other)
        -:11317:{
    #####:11318:    while (other && first->str() == other->str()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:11319:        if (first == last)
branch  0 never executed
branch  1 never executed
    #####:11320:            return true;
    #####:11321:        first = first->next();
call    0 never executed
    #####:11322:        other = other->next();
call    0 never executed
        -:11323:    }
        -:11324:
    #####:11325:    return false;
        -:11326:}
        -:11327:
function _ZL11deleteAliasP5Token called 0 returned 0% blocks executed 0%
    #####:11328:static Token * deleteAlias(Token * tok)
        -:11329:{
    #####:11330:    Token::eraseTokens(tok, Token::findsimplematch(tok, ";"));
call    0 never executed
call    1 never executed
        -:11331:
        -:11332:    // delete first token
    #####:11333:    tok->deleteThis();
call    0 never executed
        -:11334:
        -:11335:    // delete ';' if not last token
    #####:11336:    tok->deleteThis();
call    0 never executed
        -:11337:
    #####:11338:    return tok;
        -:11339:}
        -:11340:
function _ZN9Tokenizer24simplifyNamespaceAliasesEv called 956 returned 100% blocks executed 17%
      956:11341:void Tokenizer::simplifyNamespaceAliases()
        -:11342:{
      956:11343:    if (!isCPP())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       22:11344:        return;
        -:11345:
      934:11346:    int scope = 0;
        -:11347:
    28547:11348:    for (Token *tok = list.front(); tok; tok = tok->next()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
call    3 returned 100%
    27613:11349:        if (tok->str() == "{")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     1655:11350:            scope++;
    25958:11351:        else if (tok->str() == "}")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     1655:11352:            scope--;
    24303:11353:        else if (Token::Match(tok, "namespace %name% =")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:11354:            const std::string name(tok->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    #####:11355:            Token * tokNameStart = tok->tokAt(3);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11356:            Token * tokNameEnd = tokNameStart;
        -:11357:
    #####:11358:            while (tokNameEnd && tokNameEnd->next() && tokNameEnd->next()->str() != ";")
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:11359:                tokNameEnd = tokNameEnd->next();
call    0 never executed
        -:11360:
    #####:11361:            if (!tokNameEnd)
branch  0 never executed
branch  1 never executed
    #####:11362:                return; // syntax error
        -:11363:
    #####:11364:            int endScope = scope;
    #####:11365:            Token * tokLast = tokNameEnd->next();
call    0 never executed
    #####:11366:            Token * tokNext = tokLast->next();
call    0 never executed
    #####:11367:            Token * tok2 = tokNext;
        -:11368:
    #####:11369:            while (tok2 && endScope >= scope) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:11370:                if (Token::simpleMatch(tok2, "{"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:11371:                    endScope++;
    #####:11372:                else if (Token::simpleMatch(tok2, "}"))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:11373:                    endScope--;
    #####:11374:                else if (tok2->str() == name) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11375:                    if (Token::Match(tok2->previous(), "namespace %name% =")) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:11376:                        // check for possible duplicate aliases
    #####:11377:                        if (sameTokens(tokNameStart, tokNameEnd, tok2->tokAt(2))) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:11378:                            // delete duplicate
    #####:11379:                            tok2 = deleteAlias(tok2->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11380:                            continue;
        -:11381:                        } else {
        -:11382:                            // conflicting declaration (syntax error)
    #####:11383:                            if (endScope == scope) {
branch  0 never executed
branch  1 never executed
        -:11384:                                // delete conflicting declaration
    #####:11385:                                tok2 = deleteAlias(tok2->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11386:                            }
        -:11387:
        -:11388:                            // new declaration
        -:11389:                            else {
        -:11390:                                // TODO: use the new alias in this scope
    #####:11391:                                tok2 = deleteAlias(tok2->previous());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:11392:                            }
    #####:11393:                            continue;
        -:11394:                        }
        -:11395:                    }
        -:11396:
    #####:11397:                    tok2->str(tokNameStart->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11398:                    Token * tok3 = tokNameStart;
    #####:11399:                    while (tok3 != tokNameEnd) {
branch  0 never executed
branch  1 never executed
    #####:11400:                        tok2->insertToken(tok3->next()->str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:11401:                        tok2 = tok2->next();
call    0 never executed
    #####:11402:                        tok3 = tok3->next();
call    0 never executed
        -:11403:                    }
        -:11404:                }
    #####:11405:                tok2 = tok2->next();
call    0 never executed
        -:11406:            }
        -:11407:
    #####:11408:            if (tok->previous() && tokNext) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:11409:                Token::eraseTokens(tok->previous(), tokNext);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11410:                tok = tokNext->previous();
call    0 never executed
    #####:11411:            } else if (tok->previous()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11412:                Token::eraseTokens(tok->previous(), tokLast);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:11413:                tok = tokLast;
    #####:11414:            } else if (tokNext) {
branch  0 never executed
branch  1 never executed
    #####:11415:                Token::eraseTokens(tok, tokNext);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11416:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:11417:            } else {
    #####:11418:                Token::eraseTokens(tok, tokLast);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:11419:                tok->deleteThis();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:11420:            }
        -:11421:        }
        -:11422:    }
        -:11423:}
        -:11424:
        -:11425:
function _ZN9Tokenizer11VariableMapC2Ev called 956 returned 100% blocks executed 80%
      956:11426:Tokenizer::VariableMap::VariableMap() : mVarId(0) {}
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        -:11427:
function _ZN9Tokenizer11VariableMap10enterScopeEv called 2062 returned 100% blocks executed 71%
     2062:11428:void Tokenizer::VariableMap::enterScope()
        -:11429:{
     2062:11430:    mScopeInfo.push(std::list<std::pair<std::string, int>>());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
     2062:11431:}
        -:11432:
function _ZN9Tokenizer11VariableMap10leaveScopeEv called 2062 returned 100% blocks executed 79%
     2062:11433:bool Tokenizer::VariableMap::leaveScope()
        -:11434:{
     2062:11435:    if (mScopeInfo.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:11436:        return false;
        -:11437:
     3584:11438:    for (const std::pair<std::string, int> &outerVariable : mScopeInfo.top()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 42% (fallthrough)
branch  7 taken 58%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
call   12 never executed
call   13 never executed
     1522:11439:        if (outerVariable.second != 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        7:11440:            mVariableId[outerVariable.first] = outerVariable.second;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:11441:        else
     1515:11442:            mVariableId.erase(outerVariable.first);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:11443:    }
     2062:11444:    mScopeInfo.pop();
call    0 returned 100%
     2062:11445:    return true;
        -:11446:}
        -:11447:
function _ZN9Tokenizer11VariableMap11addVariableERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1543 returned 100% blocks executed 76%
     1543:11448:void Tokenizer::VariableMap::addVariable(const std::string &varname)
        -:11449:{
     1543:11450:    if (mScopeInfo.empty()) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       21:11451:        mVariableId[varname] = ++mVarId;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1557:11452:        return;
        -:11453:    }
     1529:11454:    std::map<std::string, int>::iterator it = mVariableId.find(varname);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 never executed
     1522:11455:    if (it == mVariableId.end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
     1515:11456:        mScopeInfo.top().push_back(std::pair<std::string, int>(varname, 0));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
     1515:11457:        mVariableId[varname] = ++mVarId;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     1515:11458:        return;
        -:11459:    }
        7:11460:    mScopeInfo.top().push_back(std::pair<std::string, int>(varname, it->second));
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
call   11 never executed
        7:11461:    it->second = ++mVarId;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1%
branch  3 taken 99%
        -:11462:}
        -:11463:
function _ZNK9Tokenizer11VariableMap11hasVariableERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 80%
        6:11464:bool Tokenizer::VariableMap::hasVariable(const std::string &varname) const
        -:11465:{
        6:11466:    return mVariableId.find(varname) != mVariableId.end();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
function _GLOBAL__sub_I__ZNK9Tokenizer14isFunctionHeadEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 49%
        3:11467:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
