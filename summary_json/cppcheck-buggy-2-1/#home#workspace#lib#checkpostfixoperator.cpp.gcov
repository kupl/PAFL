        -:    0:Source:/home/workspace/lib/checkpostfixoperator.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkpostfixoperator.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkpostfixoperator.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2018 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:// You should use ++ and -- as prefix whenever possible as these are more
        -:   21:// efficient than postfix operators
        -:   22://---------------------------------------------------------------------------
        -:   23:
        -:   24:#include "checkpostfixoperator.h"
        -:   25:
        -:   26:#include "errorlogger.h"
        -:   27:#include "settings.h"
        -:   28:#include "symboldatabase.h"
        -:   29:#include "token.h"
        -:   30:
        -:   31:#include <cstddef>
        -:   32:
        -:   33://---------------------------------------------------------------------------
        -:   34:
        -:   35:
        -:   36:// Register this check class (by creating a static instance of it)
        -:   37:namespace {
        1:   38:    CheckPostfixOperator instance;
call    0 returned 100%
call    1 returned 100%
        -:   39:}
        -:   40:
        -:   41:
        -:   42:// CWE ids used
        1:   43:static const struct CWE CWE398(398U);   // Indicator of Poor Code Quality
call    0 returned 100%
        -:   44:
        -:   45:
function _ZN20CheckPostfixOperator15postfixOperatorEv called 0 returned 0% blocks executed 0%
    #####:   46:void CheckPostfixOperator::postfixOperator()
        -:   47:{
    #####:   48:    if (!mSettings->isEnabled(Settings::PERFORMANCE))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:        return;
        -:   50:
    #####:   51:    const SymbolDatabase *symbolDatabase = mTokenizer->getSymbolDatabase();
call    0 never executed
        -:   52:
    #####:   53:    for (const Scope * scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:   54:        for (const Token* tok = scope->bodyStart->next(); tok != scope->bodyEnd; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   55:            const Variable *var = tok->variable();
call    0 never executed
    #####:   56:            if (!var || !Token::Match(tok, "%var% ++|--"))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   57:                continue;
        -:   58:
    #####:   59:            const Token* parent = tok->next()->astParent();
call    0 never executed
call    1 never executed
    #####:   60:            if (!parent || parent->str() == ";" || (parent->str() == "," && (!parent->astParent() || parent->astParent()->str() != "("))) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    #####:   61:                if (var->isPointer() || var->isArray())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   62:                    continue;
        -:   63:
    #####:   64:                if (Token::Match(var->nameToken()->previous(), "iterator|const_iterator|reverse_iterator|const_reverse_iterator")) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:   65:                    // the variable is an iterator
    #####:   66:                    postfixOperatorError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:                } else if (var->type()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   68:                    // the variable is an instance of class
    #####:   69:                    postfixOperatorError(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   70:                }
        -:   71:            }
        -:   72:        }
        -:   73:    }
        -:   74:}
        -:   75://---------------------------------------------------------------------------
        -:   76:
        -:   77:
function _ZN20CheckPostfixOperator20postfixOperatorErrorEPK5Token called 0 returned 0% blocks executed 0%
    #####:   78:void CheckPostfixOperator::postfixOperatorError(const Token *tok)
        -:   79:{
    #####:   80:    reportError(tok, Severity::performance, "postfixOperator",
call    0 never executed
        -:   81:                "Prefer prefix ++/-- operators for non-primitive types.\n"
        -:   82:                "Prefix ++/-- operators should be preferred for non-primitive types. "
        -:   83:                "Pre-increment/decrement can be more efficient than "
        -:   84:                "post-increment/decrement. Post-increment/decrement usually "
        -:   85:                "involves keeping a copy of the previous value around and "
        -:   86:                "adds a little extra code.", CWE398, false);
function _GLOBAL__sub_I__ZN20CheckPostfixOperator15postfixOperatorEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:   87:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
