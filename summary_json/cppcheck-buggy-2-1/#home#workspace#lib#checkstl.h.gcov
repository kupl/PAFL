        -:    0:Source:/home/workspace/lib/checkstl.h
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkstl.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkstl.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#ifndef checkstlH
        -:   22:#define checkstlH
        -:   23://---------------------------------------------------------------------------
        -:   24:
        -:   25:#include "check.h"
        -:   26:#include "config.h"
        -:   27:#include "library.h"
        -:   28:#include "tokenize.h"
        -:   29:
        -:   30:#include <map>
        -:   31:#include <string>
        -:   32:
        -:   33:class ErrorLogger;
        -:   34:class Scope;
        -:   35:class Settings;
        -:   36:class Token;
        -:   37:class Variable;
        -:   38:
        -:   39:
        -:   40:/// @addtogroup Checks
        -:   41:/// @{
        -:   42:
        -:   43:
        -:   44:/** @brief %Check STL usage (invalidation of iterators, mismatching containers, etc) */
function _ZN8CheckStlD0Ev called 0 returned 0% blocks executed 0%
function _ZN8CheckStlD2Ev called 0 returned 0% blocks executed 0%
    #####:   45:class CPPCHECKLIB CheckStl : public Check {
call    0 never executed
call    1 never executed
call    2 never executed
        -:   46:public:
        -:   47:    /** This constructor is used when registering the CheckClass */
function _ZN8CheckStlC2Ev called 1 returned 100% blocks executed 71%
        1:   48:    CheckStl() : Check(myName()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        1:   49:    }
        -:   50:
        -:   51:    /** This constructor is used when running checks. */
function _ZN8CheckStlC2EPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   52:    CheckStl(const Tokenizer* tokenizer, const Settings* settings, ErrorLogger* errorLogger)
    #####:   53:        : Check(myName(), tokenizer, settings, errorLogger) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:   54:    }
        -:   55:
        -:   56:    /** run checks, the token list is not simplified */
function _ZN8CheckStl9runChecksEPK9TokenizerPK8SettingsP11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   57:    void runChecks(const Tokenizer *tokenizer, const Settings *settings, ErrorLogger *errorLogger) OVERRIDE {
    #####:   58:        if (!tokenizer->isCPP()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   59:            return;
        -:   60:        }
        -:   61:
    #####:   62:        CheckStl checkStl(tokenizer, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   63:        checkStl.erase();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:        checkStl.if_find();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:        checkStl.checkFindInsert();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   66:        checkStl.iterators();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   67:        checkStl.mismatchingContainers();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   68:        checkStl.missingComparison();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:        checkStl.outOfBounds();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   70:        checkStl.outOfBoundsIndexExpression();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:        checkStl.redundantCondition();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   72:        checkStl.string_c_str();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:        checkStl.uselessCalls();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:        checkStl.useStlAlgorithm();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   75:
    #####:   76:        checkStl.stlOutOfBounds();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   77:        checkStl.negativeIndex();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   78:
    #####:   79:        checkStl.invalidContainer();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:        checkStl.mismatchingContainers();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   81:
    #####:   82:        checkStl.stlBoundaries();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:        checkStl.checkDereferenceInvalidIterator();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   84:
        -:   85:        // Style check
    #####:   86:        checkStl.size();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   87:    }
        -:   88:
        -:   89:    /** Accessing container out of bounds using ValueFlow */
        -:   90:    void outOfBounds();
        -:   91:
        -:   92:    /** Accessing container out of bounds, following index expression */
        -:   93:    void outOfBoundsIndexExpression();
        -:   94:
        -:   95:    /**
        -:   96:     * Finds errors like this:
        -:   97:     * for (unsigned ii = 0; ii <= foo.size(); ++ii)
        -:   98:     */
        -:   99:    void stlOutOfBounds();
        -:  100:
        -:  101:    /**
        -:  102:     * negative index for array like containers
        -:  103:     */
        -:  104:    void negativeIndex();
        -:  105:
        -:  106:    /**
        -:  107:     * Finds errors like this:
        -:  108:     * for (it = foo.begin(); it != bar.end(); ++it)
        -:  109:     */
        -:  110:    void iterators();
        -:  111:
        -:  112:    void invalidContainer();
        -:  113:
        -:  114:    /**
        -:  115:     * Mismatching containers:
        -:  116:     * std::find(foo.begin(), bar.end(), x)
        -:  117:     */
        -:  118:    void mismatchingContainers();
        -:  119:
        -:  120:    /**
        -:  121:     * Dangerous usage of erase. The iterator is invalidated by erase so
        -:  122:     * it is bad to dereference it after the erase.
        -:  123:     */
        -:  124:    void erase();
        -:  125:    void eraseCheckLoopVar(const Scope& scope, const Variable* var);
        -:  126:
        -:  127:    /**
        -:  128:     * bad condition.. "it < alist.end()"
        -:  129:     */
        -:  130:    void stlBoundaries();
        -:  131:
        -:  132:    /** if (a.find(x)) - possibly incorrect condition */
        -:  133:    void if_find();
        -:  134:
        -:  135:    void checkFindInsert();
        -:  136:
        -:  137:    /**
        -:  138:     * Suggest using empty() instead of checking size() against zero for containers.
        -:  139:     * Item 4 from Scott Meyers book "Effective STL".
        -:  140:     */
        -:  141:    void size();
        -:  142:
        -:  143:    /**
        -:  144:     * Check for redundant condition 'if (ints.find(1) != ints.end()) ints.remove(123);'
        -:  145:     * */
        -:  146:    void redundantCondition();
        -:  147:
        -:  148:    /**
        -:  149:     * @brief Missing inner comparison, when incrementing iterator inside loop
        -:  150:     * Dangers:
        -:  151:     *  - may increment iterator beyond end
        -:  152:     *  - may unintentionally skip elements in list/set etc
        -:  153:     */
        -:  154:    void missingComparison();
        -:  155:
        -:  156:    /** Check for common mistakes when using the function string::c_str() */
        -:  157:    void string_c_str();
        -:  158:
        -:  159:    /** @brief %Check calls that using them is useless */
        -:  160:    void uselessCalls();
        -:  161:
        -:  162:    /** @brief %Check for dereferencing an iterator that is invalid */
        -:  163:    void checkDereferenceInvalidIterator();
        -:  164:
        -:  165:    /**
        -:  166:     * Dereferencing an erased iterator
        -:  167:     * @param erased token where the erase occurs
        -:  168:     * @param deref token where the dereference occurs
        -:  169:     * @param itername iterator name
        -:  170:     * @param inconclusive inconclusive flag
        -:  171:     */
        -:  172:    void dereferenceErasedError(const Token* erased, const Token* deref, const std::string& itername, bool inconclusive);
        -:  173:
        -:  174:    /** @brief Reading from empty stl container (using valueflow) */
        -:  175:    void readingEmptyStlContainer2();
        -:  176:
        -:  177:    /** @brief Look for loops that can replaced with std algorithms */
        -:  178:    void useStlAlgorithm();
        -:  179:
        -:  180:private:
        -:  181:    bool isContainerSize(const Token *containerToken, const Token *expr) const;
        -:  182:    bool isContainerSizeGE(const Token * containerToken, const Token *expr) const;
        -:  183:
        -:  184:    void missingComparisonError(const Token* incrementToken1, const Token* incrementToken2);
        -:  185:    void string_c_strThrowError(const Token* tok);
        -:  186:    void string_c_strError(const Token* tok);
        -:  187:    void string_c_strReturn(const Token* tok);
        -:  188:    void string_c_strParam(const Token* tok, nonneg int number);
        -:  189:
        -:  190:    void outOfBoundsError(const Token *tok, const std::string &containerName, const ValueFlow::Value *containerSize, const std::string &index, const ValueFlow::Value *indexValue);
        -:  191:    void outOfBoundsIndexExpressionError(const Token *tok, const Token *index);
        -:  192:    void stlOutOfBoundsError(const Token* tok, const std::string& num, const std::string& var, bool at);
        -:  193:    void negativeIndexError(const Token* tok, const ValueFlow::Value& index);
        -:  194:    void invalidIteratorError(const Token* tok, const std::string& iteratorName);
        -:  195:    void iteratorsError(const Token* tok, const std::string& containerName1, const std::string& containerName2);
        -:  196:    void iteratorsError(const Token* tok, const Token* containerTok, const std::string& containerName1, const std::string& containerName2);
        -:  197:    void iteratorsError(const Token* tok, const Token* containerTok, const std::string& containerName);
        -:  198:    void iteratorsCmpError(const Token* cmpOperatorTok, const Token* containerTok1, const Token* containerTok2, const std::string& containerName1, const std::string& containerName2);
        -:  199:    void iteratorsCmpError(const Token* cmpOperatorTok, const Token* containerTok1, const Token* containerTok2, const std::string& containerName);
        -:  200:    void mismatchingContainersError(const Token* tok);
        -:  201:    void mismatchingContainerExpressionError(const Token *tok1, const Token *tok2);
        -:  202:    void sameIteratorExpressionError(const Token *tok);
        -:  203:    void stlBoundariesError(const Token* tok);
        -:  204:    void if_findError(const Token* tok, bool str);
        -:  205:    void checkFindInsertError(const Token *tok);
        -:  206:    void sizeError(const Token* tok);
        -:  207:    void redundantIfRemoveError(const Token* tok);
        -:  208:    void invalidContainerError(const Token *tok, const Token * contTok, const ValueFlow::Value *val, ErrorPath errorPath);
        -:  209:    void invalidContainerReferenceError(const Token* tok, const Token* contTok, ErrorPath errorPath);
        -:  210:
        -:  211:    void uselessCallsReturnValueError(const Token* tok, const std::string& varname, const std::string& function);
        -:  212:    void uselessCallsSwapError(const Token* tok, const std::string& varname);
        -:  213:    void uselessCallsSubstrError(const Token* tok, bool empty);
        -:  214:    void uselessCallsEmptyError(const Token* tok);
        -:  215:    void uselessCallsRemoveError(const Token* tok, const std::string& function);
        -:  216:
        -:  217:    void dereferenceInvalidIteratorError(const Token* deref, const std::string& iterName);
        -:  218:
        -:  219:    void readingEmptyStlContainerError(const Token* tok, const ValueFlow::Value *value=nullptr);
        -:  220:
        -:  221:    void useStlAlgorithmError(const Token *tok, const std::string &algoName);
        -:  222:
        -:  223:    bool compareIteratorAgainstDifferentContainer(const Token* operatorTok, const Token* containerTok, const nonneg int iteratorId, const std::map<int, const Token*>& iteratorScopeBeginInfo);
        -:  224:
function _ZNK8CheckStl16getErrorMessagesEP11ErrorLoggerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  225:    void getErrorMessages(ErrorLogger* errorLogger, const Settings* settings) const OVERRIDE {
    #####:  226:        ErrorPath errorPath;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  227:        CheckStl c(nullptr, settings, errorLogger);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  228:        c.outOfBoundsError(nullptr, "container", nullptr, "x", nullptr);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  229:        c.invalidIteratorError(nullptr, "iterator");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  230:        c.iteratorsError(nullptr, "container1", "container2");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  231:        c.iteratorsError(nullptr, nullptr, "container0", "container1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  232:        c.iteratorsError(nullptr, nullptr, "container");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  233:        c.iteratorsCmpError(nullptr, nullptr, nullptr, "container1", "container2");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  234:        c.iteratorsCmpError(nullptr, nullptr, nullptr, "container");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  235:        c.invalidContainerError(nullptr, nullptr, nullptr, errorPath);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  236:        c.mismatchingContainersError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  237:        c.mismatchingContainerExpressionError(nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  238:        c.sameIteratorExpressionError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  239:        c.dereferenceErasedError(nullptr, nullptr, "iter", false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  240:        c.stlOutOfBoundsError(nullptr, "i", "foo", false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  241:        c.negativeIndexError(nullptr, ValueFlow::Value(-1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  242:        c.stlBoundariesError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  243:        c.if_findError(nullptr, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  244:        c.if_findError(nullptr, true);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  245:        c.checkFindInsertError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  246:        c.string_c_strError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  247:        c.string_c_strReturn(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  248:        c.string_c_strParam(nullptr, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  249:        c.string_c_strThrowError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  250:        c.sizeError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  251:        c.missingComparisonError(nullptr, nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  252:        c.redundantIfRemoveError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  253:        c.uselessCallsReturnValueError(nullptr, "str", "find");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    #####:  254:        c.uselessCallsSwapError(nullptr, "str");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  255:        c.uselessCallsSubstrError(nullptr, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  256:        c.uselessCallsEmptyError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  257:        c.uselessCallsRemoveError(nullptr, "remove");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  258:        c.dereferenceInvalidIteratorError(nullptr, "i");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  259:        c.readingEmptyStlContainerError(nullptr);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  260:        c.useStlAlgorithmError(nullptr, "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  261:    }
        -:  262:
function _ZN8CheckStl6myNameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  263:    static std::string myName() {
    #####:  264:        return "STL usage";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  265:    }
        -:  266:
function _ZNK8CheckStl9classInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  267:    std::string classInfo() const OVERRIDE {
        -:  268:        return "Check for invalid usage of STL:\n"
        -:  269:               "- out of bounds errors\n"
        -:  270:               "- misuse of iterators when iterating through a container\n"
        -:  271:               "- mismatching containers in calls\n"
        -:  272:               "- same iterators in calls\n"
        -:  273:               "- dereferencing an erased iterator\n"
        -:  274:               "- for vectors: using iterator/pointer after push_back has been used\n"
        -:  275:               "- optimisation: use empty() instead of size() to guarantee fast code\n"
        -:  276:               "- suspicious condition when using find\n"
        -:  277:               "- unnecessary searching in associative containers\n"
        -:  278:               "- redundant condition\n"
        -:  279:               "- common mistakes when using string::c_str()\n"
        -:  280:               "- useless calls of string and STL functions\n"
        -:  281:               "- dereferencing an invalid iterator\n"
        -:  282:               "- reading from empty STL container\n"
    #####:  283:               "- consider using an STL algorithm instead of raw loop\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  284:    }
        -:  285:};
        -:  286:/// @}
        -:  287://---------------------------------------------------------------------------
        -:  288:#endif // checkstlH
