        -:    0:Source:/home/workspace/lib/token.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/token.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/token.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "token.h"
        -:   20:
        -:   21:#include "astutils.h"
        -:   22:#include "errorlogger.h"
        -:   23:#include "library.h"
        -:   24:#include "settings.h"
        -:   25:#include "symboldatabase.h"
        -:   26:#include "utils.h"
        -:   27:
        -:   28:#include <cassert>
        -:   29:#include <cctype>
        -:   30:#include <cstring>
        -:   31:#include <iostream>
        -:   32:#include <map>
        -:   33:#include <set>
        -:   34:#include <stack>
        -:   35:#include <utility>
        -:   36:
        1:   37:const std::list<ValueFlow::Value> TokenImpl::mEmptyValueList;
call    0 returned 100%
call    1 returned 100%
        -:   38:
function _ZN5TokenC2EP15TokensFrontBack called 30033 returned 100% blocks executed 83%
    30033:   39:Token::Token(TokensFrontBack *tokensFrontBack) :
        -:   40:    mTokensFrontBack(tokensFrontBack),
        -:   41:    mNext(nullptr),
        -:   42:    mPrevious(nullptr),
        -:   43:    mLink(nullptr),
        -:   44:    mTokType(eNone),
    30033:   45:    mFlags(0)
call    0 returned 100%
call    1 never executed
        -:   46:{
    30033:   47:    mImpl = new TokenImpl();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
    30033:   48:}
        -:   49:
function _ZN5TokenD2Ev called 30033 returned 100% blocks executed 100%
    60066:   50:Token::~Token()
call    0 returned 100%
        -:   51:{
    30033:   52:    delete mImpl;
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
call    3 returned 100%
    30033:   53:}
        -:   54:
       12:   55:static const std::set<std::string> controlFlowKeywords = {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 92% (fallthrough)
branch 50 taken 8%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
call   77 never executed
        -:   56:    "goto",
        -:   57:    "do",
        -:   58:    "if",
        -:   59:    "else",
        -:   60:    "for",
        -:   61:    "while",
        -:   62:    "switch",
        -:   63:    "case",
        -:   64:    "break",
        -:   65:    "continue",
        -:   66:    "return"
       11:   67:};
call    0 returned 100%
call    1 never executed
        -:   68:
function _ZN5Token20update_property_infoEv called 43216 returned 100% blocks executed 97%
    43216:   69:void Token::update_property_info()
        -:   70:{
    43216:   71:    setFlag(fIsControlFlowKeyword, controlFlowKeywords.find(mStr) != controlFlowKeywords.end());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 never executed
        -:   72:
    43216:   73:    if (!mStr.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    43216:   74:        if (mStr == "true" || mStr == "false")
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       46:   75:            tokType(eBoolean);
call    0 returned 100%
    43170:   76:        else if (isStringLiteral(mStr))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      141:   77:            tokType(eString);
call    0 returned 100%
    43029:   78:        else if (isCharLiteral(mStr))
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        8:   79:            tokType(eChar);
call    0 returned 100%
    43021:   80:        else if (std::isalpha((unsigned char)mStr[0]) || mStr[0] == '_' || mStr[0] == '$') { // Name
call    0 returned 100%
branch  1 taken 45% (fallthrough)
branch  2 taken 55%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
branch  9 taken 56% (fallthrough)
branch 10 taken 44%
    23923:   81:            if (mImpl->mVarId)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   82:                tokType(eVariable);
call    0 never executed
    23923:   83:            else if (mTokType != eVariable && mTokType != eFunction && mTokType != eType && mTokType != eKeyword)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 89% (fallthrough)
branch  5 taken 11%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
    21245:   84:                tokType(eName);
call    0 returned 100%
    19098:   85:        } else if (std::isdigit((unsigned char)mStr[0]) || (mStr.length() > 1 && mStr[0] == '-' && std::isdigit((unsigned char)mStr[1])))
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
call    3 returned 100%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
call    6 returned 100%
branch  7 taken 11% (fallthrough)
branch  8 taken 89%
call    9 returned 100%
branch 10 taken 24% (fallthrough)
branch 11 taken 76%
branch 12 taken 7% (fallthrough)
branch 13 taken 93%
     1302:   86:            tokType(eNumber);
call    0 returned 100%
    35636:   87:        else if (mStr == "=" || mStr == "<<=" || mStr == ">>=" ||
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
branch  9 taken 6% (fallthrough)
branch 10 taken 94%
branch 11 taken 10% (fallthrough)
branch 12 taken 90%
    17065:   88:                 (mStr.size() == 2U && mStr[1] == '=' && std::strchr("+-*/%&^|", mStr[0])))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
call    4 returned 100%
branch  5 taken 14% (fallthrough)
branch  6 taken 86%
     1725:   89:            tokType(eAssignmentOp);
call    0 returned 100%
    16071:   90:        else if (mStr.size() == 1 && mStr.find_first_of(",[]()?:") != std::string::npos)
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
call    3 returned 100%
branch  4 taken 43% (fallthrough)
branch  5 taken 57%
branch  6 taken 41% (fallthrough)
branch  7 taken 59%
     6585:   91:            tokType(eExtendedOp);
call    0 returned 100%
     9486:   92:        else if (mStr=="<<" || mStr==">>" || (mStr.size()==1 && mStr.find_first_of("+-*/%") != std::string::npos))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
call    3 returned 100%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
call    6 returned 100%
branch  7 taken 91% (fallthrough)
branch  8 taken 9%
call    9 returned 100%
branch 10 taken 8% (fallthrough)
branch 11 taken 92%
branch 12 taken 8% (fallthrough)
branch 13 taken 92%
      714:   93:            tokType(eArithmeticalOp);
call    0 returned 100%
     8772:   94:        else if (mStr.size() == 1 && mStr.find_first_of("&|^~") != std::string::npos)
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
branch  6 taken 3% (fallthrough)
branch  7 taken 97%
      253:   95:            tokType(eBitOp);
call    0 returned 100%
    17189:   96:        else if (mStr.size() <= 2 &&
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 99% (fallthrough)
branch  4 taken 1%
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
    16943:   97:                 (mStr == "&&" ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    16828:   98:                  mStr == "||" ||
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     8395:   99:                  mStr == "!"))
call    0 returned 100%
      160:  100:            tokType(eLogicalOp);
call    0 returned 100%
    17140:  101:        else if (mStr.size() <= 2 && !mLink &&
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
branch  3 taken 98% (fallthrough)
branch  4 taken 2%
branch  5 taken 98% (fallthrough)
branch  6 taken 2%
branch  7 taken 7% (fallthrough)
branch  8 taken 93%
    16233:  102:                 (mStr == "==" ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    16021:  103:                  mStr == "!=" ||
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    15765:  104:                  mStr == "<"  ||
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
    15563:  105:                  mStr == "<=" ||
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
    15388:  106:                  mStr == ">"  ||
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     7618:  107:                  mStr == ">="))
call    0 returned 100%
      597:  108:            tokType(eComparisonOp);
call    0 returned 100%
     8386:  109:        else if (mStr.size() == 2 &&
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
branch  3 taken 74% (fallthrough)
branch  4 taken 26%
branch  5 taken 2% (fallthrough)
branch  6 taken 98%
      828:  110:                 (mStr == "++" ||
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
      351:  111:                  mStr == "--"))
call    0 returned 100%
      147:  112:            tokType(eIncDecOp);
call    0 returned 100%
     7615:  113:        else if (mStr.size() == 1 && (mStr.find_first_of("{}") != std::string::npos || (mLink && mStr.find_first_of("<>") != std::string::npos)))
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
call    8 returned 100%
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 50% (fallthrough)
branch 12 taken 50%
     3794:  114:            tokType(eBracket);
call    0 returned 100%
     3821:  115:        else if (mStr == "...")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        8:  116:            tokType(eEllipsis);
call    0 returned 100%
        -:  117:        else
     3813:  118:            tokType(eOther);
call    0 returned 100%
        -:  119:    } else {
    #####:  120:        tokType(eNone);
call    0 never executed
        -:  121:    }
        -:  122:
    43216:  123:    update_property_char_string_literal();
call    0 returned 100%
    43216:  124:    update_property_isStandardType();
call    0 returned 100%
    43216:  125:}
        -:  126:
       12:  127:static const std::set<std::string> stdTypes = { "bool"
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
call   12 returned 100%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
branch 22 taken 100% (fallthrough)
branch 23 taken 0% (throw)
call   24 returned 100%
call   25 returned 100%
branch 26 taken 100% (fallthrough)
branch 27 taken 0% (throw)
call   28 returned 100%
call   29 returned 100%
branch 30 taken 100% (fallthrough)
branch 31 taken 0% (throw)
call   32 returned 100%
call   33 returned 100%
branch 34 taken 100% (fallthrough)
branch 35 taken 0% (throw)
call   36 returned 100%
call   37 returned 100%
branch 38 taken 100% (fallthrough)
branch 39 taken 0% (throw)
call   40 returned 100%
call   41 returned 100%
branch 42 taken 100% (fallthrough)
branch 43 taken 0% (throw)
call   44 returned 100%
call   45 returned 100%
branch 46 taken 100% (fallthrough)
branch 47 taken 0% (throw)
call   48 returned 100%
branch 49 taken 92% (fallthrough)
branch 50 taken 8%
call   51 returned 100%
call   52 returned 100%
call   53 returned 100%
call   54 returned 100%
call   55 returned 100%
call   56 returned 100%
call   57 returned 100%
call   58 returned 100%
call   59 returned 100%
call   60 returned 100%
call   61 returned 100%
call   62 returned 100%
call   63 never executed
branch 64 never executed
branch 65 never executed
call   66 never executed
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
call   74 never executed
call   75 never executed
call   76 never executed
        -:  128:                                                , "_Bool"
        -:  129:                                                , "char"
        -:  130:                                                , "double"
        -:  131:                                                , "float"
        -:  132:                                                , "int"
        -:  133:                                                , "long"
        -:  134:                                                , "short"
        -:  135:                                                , "size_t"
        -:  136:                                                , "void"
        -:  137:                                                , "wchar_t"
       11:  138:                                              };
call    0 returned 100%
call    1 never executed
        -:  139:
function _ZN5Token30update_property_isStandardTypeEv called 43216 returned 100% blocks executed 88%
    43216:  140:void Token::update_property_isStandardType()
        -:  141:{
    43216:  142:    isStandardType(false);
call    0 returned 100%
        -:  143:
    43216:  144:    if (mStr.size() < 3)
call    0 returned 100%
branch  1 taken 68% (fallthrough)
branch  2 taken 32%
    29456:  145:        return;
        -:  146:
    13760:  147:    if (stdTypes.find(mStr)!=stdTypes.end()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 40% (fallthrough)
branch  8 taken 60%
call    9 never executed
     5516:  148:        isStandardType(true);
call    0 returned 100%
     5516:  149:        tokType(eType);
call    0 returned 100%
        -:  150:    }
        -:  151:}
        -:  152:
function _ZN5Token35update_property_char_string_literalEv called 43216 returned 100% blocks executed 62%
    43216:  153:void Token::update_property_char_string_literal()
        -:  154:{
    43216:  155:    if (mTokType != Token::eString && mTokType != Token::eChar)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    43067:  156:        return;
        -:  157:
      447:  158:    isLong(((mTokType == Token::eString) && isPrefixStringCharLiteral(mStr, '"', "L")) ||
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 5% (fallthrough)
branch 12 taken 95%
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
branch 16 taken 95% (fallthrough)
branch 17 taken 5%
call   18 returned 100%
branch 19 taken 95% (fallthrough)
branch 20 taken 5%
call   21 returned 100%
branch 22 never executed
branch 23 never executed
call   24 never executed
branch 25 never executed
branch 26 never executed
call   27 never executed
      306:  159:           ((mTokType == Token::eChar) && isPrefixStringCharLiteral(mStr, '\'', "L")));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
branch  9 taken 5% (fallthrough)
branch 10 taken 95%
call   11 returned 100%
branch 12 taken 5% (fallthrough)
branch 13 taken 95%
call   14 returned 100%
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
        -:  160:}
        -:  161:
function _ZNK5Token15isUpperCaseNameEv called 4481 returned 100% blocks executed 100%
     4481:  162:bool Token::isUpperCaseName() const
        -:  163:{
     4481:  164:    if (!isName())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       58:  165:        return false;
     4925:  166:    for (char i : mStr) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 95% (fallthrough)
branch  4 taken 5%
call    5 returned 100%
call    6 returned 100%
     4697:  167:        if (std::islower(i))
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4195:  168:            return false;
        -:  169:    }
      228:  170:    return true;
        -:  171:}
        -:  172:
function _ZN5Token9concatStrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  173:void Token::concatStr(std::string const& b)
        -:  174:{
    #####:  175:    mStr.erase(mStr.length() - 1);
call    0 never executed
call    1 never executed
    #####:  176:    mStr.append(getStringLiteral(b) + "\"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  177:
    #####:  178:    update_property_info();
call    0 never executed
    #####:  179:}
        -:  180:
function _ZNK5Token8strValueB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  181:std::string Token::strValue() const
        -:  182:{
    #####:  183:    assert(mTokType == eString);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  184:    std::string ret(getStringLiteral(mStr));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  185:    std::string::size_type pos = 0U;
    #####:  186:    while ((pos = ret.find('\\', pos)) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  187:        ret.erase(pos,1U);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  188:        if (ret[pos] >= 'a') {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  189:            if (ret[pos] == 'n')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  190:                ret[pos] = '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  191:            else if (ret[pos] == 'r')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  192:                ret[pos] = '\r';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  193:            else if (ret[pos] == 't')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  194:                ret[pos] = '\t';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  195:        }
    #####:  196:        if (ret[pos] == '0')
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  197:            return ret.substr(0,pos);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  198:        pos++;
        -:  199:    }
    #####:  200:    return ret;
call    0 never executed
        -:  201:}
        -:  202:
function _ZN5Token10deleteNextEi called 645 returned 100% blocks executed 100%
     1294:  203:void Token::deleteNext(nonneg int count)
        -:  204:{
     1943:  205:    while (mNext && count > 0) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
      649:  206:        Token *n = mNext;
        -:  207:
        -:  208:        // #8154 we are about to be unknown -> destroy the link to us
      649:  209:        if (n->mLink && n->mLink->mLink == n)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 79% (fallthrough)
branch  3 taken 21%
       72:  210:            n->mLink->link(nullptr);
call    0 returned 100%
        -:  211:
      649:  212:        mNext = n->next();
call    0 returned 100%
      649:  213:        delete n;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
      649:  214:        --count;
        -:  215:    }
        -:  216:
      645:  217:    if (mNext)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      637:  218:        mNext->previous(this);
call    0 returned 100%
        8:  219:    else if (mTokensFrontBack)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  220:        mTokensFrontBack->back = this;
      645:  221:}
        -:  222:
function _ZN5Token14deletePreviousEi called 4 returned 100% blocks executed 73%
        8:  223:void Token::deletePrevious(nonneg int count)
        -:  224:{
       12:  225:    while (mPrevious && count > 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        4:  226:        Token *p = mPrevious;
        -:  227:
        -:  228:        // #8154 we are about to be unknown -> destroy the link to us
        4:  229:        if (p->mLink && p->mLink->mLink == p)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  230:            p->mLink->link(nullptr);
call    0 never executed
        -:  231:
        4:  232:        mPrevious = p->previous();
call    0 returned 100%
        4:  233:        delete p;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        4:  234:        --count;
        -:  235:    }
        -:  236:
        4:  237:    if (mPrevious)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  238:        mPrevious->next(this);
call    0 returned 100%
    #####:  239:    else if (mTokensFrontBack)
branch  0 never executed
branch  1 never executed
    #####:  240:        mTokensFrontBack->front = this;
        4:  241:}
        -:  242:
function _ZN5Token12swapWithNextEv called 1 returned 100% blocks executed 72%
        1:  243:void Token::swapWithNext()
        -:  244:{
        1:  245:    if (mNext) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  246:        std::swap(mStr, mNext->mStr);
call    0 returned 100%
        1:  247:        std::swap(mTokType, mNext->mTokType);
call    0 returned 100%
        1:  248:        std::swap(mFlags, mNext->mFlags);
call    0 returned 100%
        1:  249:        std::swap(mImpl, mNext->mImpl);
call    0 returned 100%
        1:  250:        for (auto templateSimplifierPointer : mImpl->mTemplateSimplifierPointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
    #####:  251:            templateSimplifierPointer->token(this);
call    0 never executed
        -:  252:        }
        -:  253:
        1:  254:        for (auto templateSimplifierPointer : mNext->mImpl->mTemplateSimplifierPointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
    #####:  255:            templateSimplifierPointer->token(mNext);
call    0 never executed
        -:  256:        }
        1:  257:        if (mNext->mLink)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  258:            mNext->mLink->mLink = this;
        1:  259:        if (this->mLink)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  260:            this->mLink->mLink = mNext;
        1:  261:        std::swap(mLink, mNext->mLink);
call    0 returned 100%
        -:  262:    }
        1:  263:}
        -:  264:
function _ZN5Token8takeDataEPS_ called 150 returned 100% blocks executed 82%
      150:  265:void Token::takeData(Token *fromToken)
        -:  266:{
      150:  267:    mStr = fromToken->mStr;
call    0 returned 100%
      150:  268:    tokType(fromToken->mTokType);
call    0 returned 100%
      150:  269:    mFlags = fromToken->mFlags;
      150:  270:    delete mImpl;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
      150:  271:    mImpl = fromToken->mImpl;
      150:  272:    fromToken->mImpl = nullptr;
      150:  273:    for (auto templateSimplifierPointer : mImpl->mTemplateSimplifierPointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 returned 100%
call    8 returned 100%
    #####:  274:        templateSimplifierPointer->token(this);
call    0 never executed
        -:  275:    }
      150:  276:    mLink = fromToken->mLink;
      150:  277:    if (mLink)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       12:  278:        mLink->link(this);
call    0 returned 100%
      150:  279:}
        -:  280:
function _ZN5Token10deleteThisEv called 150 returned 100% blocks executed 92%
      150:  281:void Token::deleteThis()
        -:  282:{
      150:  283:    if (mNext) { // Copy next to this and delete next
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      148:  284:        takeData(mNext);
call    0 returned 100%
      148:  285:        mNext->link(nullptr); // mark as unlinked
call    0 returned 100%
      148:  286:        deleteNext();
call    0 returned 100%
        2:  287:    } else if (mPrevious && mPrevious->mPrevious) { // Copy previous to this and delete previous
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  288:        takeData(mPrevious);
call    0 returned 100%
        -:  289:
        2:  290:        Token* toDelete = mPrevious;
        2:  291:        mPrevious = mPrevious->mPrevious;
        2:  292:        mPrevious->mNext = this;
        -:  293:
        2:  294:        delete toDelete;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
        -:  295:    } else {
        -:  296:        // We are the last token in the list, we can't delete
        -:  297:        // ourselves, so just make us empty
    #####:  298:        str("");
call    0 never executed
        -:  299:    }
      150:  300:}
        -:  301:
function _ZN5Token7replaceEPS_S0_S0_ called 0 returned 0% blocks executed 0%
    #####:  302:void Token::replace(Token *replaceThis, Token *start, Token *end)
        -:  303:{
        -:  304:    // Fix the whole in the old location of start and end
    #####:  305:    if (start->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  306:        start->previous()->next(end->next());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  307:
    #####:  308:    if (end->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  309:        end->next()->previous(start->previous());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  310:
        -:  311:    // Move start and end to their new location
    #####:  312:    if (replaceThis->previous())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  313:        replaceThis->previous()->next(start);
call    0 never executed
call    1 never executed
        -:  314:
    #####:  315:    if (replaceThis->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  316:        replaceThis->next()->previous(end);
call    0 never executed
call    1 never executed
        -:  317:
    #####:  318:    start->previous(replaceThis->previous());
call    0 never executed
call    1 never executed
    #####:  319:    end->next(replaceThis->next());
call    0 never executed
call    1 never executed
        -:  320:
    #####:  321:    if (end->mTokensFrontBack && end->mTokensFrontBack->back == end) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  322:        while (end->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  323:            end = end->next();
call    0 never executed
    #####:  324:        end->mTokensFrontBack->back = end;
        -:  325:    }
        -:  326:
        -:  327:    // Update mProgressValue, fileIndex and linenr
    #####:  328:    for (Token *tok = start; tok != end->next(); tok = tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  329:        tok->mImpl->mProgressValue = replaceThis->mImpl->mProgressValue;
        -:  330:
        -:  331:    // Delete old token, which is replaced
    #####:  332:    delete replaceThis;
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:  333:}
        -:  334:
function _ZNK5Token5tokAtEi called 161785 returned 100% blocks executed 100%
   161785:  335:const Token *Token::tokAt(int index) const
        -:  336:{
   161785:  337:    const Token *tok = this;
   260893:  338:    while (index > 0 && tok) {
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
    49554:  339:        tok = tok->next();
call    0 returned 100%
    49554:  340:        --index;
        -:  341:    }
   546767:  342:    while (index < 0 && tok) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
   192491:  343:        tok = tok->previous();
call    0 returned 100%
   192491:  344:        ++index;
        -:  345:    }
   161785:  346:    return tok;
        -:  347:}
        -:  348:
function _ZNK5Token6linkAtEi called 19991 returned 100% blocks executed 26%
    19991:  349:const Token *Token::linkAt(int index) const
        -:  350:{
    19991:  351:    const Token *tok = this->tokAt(index);
call    0 returned 100%
    19991:  352:    if (!tok) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  353:        throw InternalError(this, "Internal error. Token::linkAt called with index outside the tokens range.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  354:    }
    19991:  355:    return tok->link();
call    0 returned 100%
        -:  356:}
        -:  357:
function _ZNK5Token5strAtB5cxx11Ei called 77434 returned 100% blocks executed 100%
    77434:  358:const std::string &Token::strAt(int index) const
        -:  359:{
    77434:  360:    const Token *tok = this->tokAt(index);
call    0 returned 100%
    77434:  361:    return tok ? tok->mStr : emptyString;
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:  362:}
        -:  363:
function _ZL19multiComparePercentPK5TokenRPKci called 2175502 returned 100% blocks executed 69%
  2175502:  364:static int multiComparePercent(const Token *tok, const char*& haystack, nonneg int varid)
        -:  365:{
  2175502:  366:    ++haystack;
        -:  367:    // Compare only the first character of the string for optimization reasons
  2175502:  368:    switch (haystack[0]) {
branch  0 taken 0%
branch  1 taken 10%
branch  2 taken 16%
branch  3 taken 4%
branch  4 taken 48%
branch  5 taken 7%
branch  6 taken 3%
branch  7 taken 1%
branch  8 taken 10%
branch  9 taken 0%
    #####:  369:    case '\0':
        -:  370:    case ' ':
        -:  371:    case '|':
        -:  372:        //simple '%' character
    #####:  373:        haystack += 1;
    #####:  374:        if (tok->isArithmeticalOp() && tok->str() == "%")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  375:            return 1;
    #####:  376:        break;
   224646:  377:    case 'v':
   224646:  378:        if (haystack[3] == '%') { // %var%
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
   216732:  379:            haystack += 4;
   216732:  380:            if (tok->varId() != 0)
call    0 returned 100%
branch  1 taken 23% (fallthrough)
branch  2 taken 77%
    49562:  381:                return 1;
        -:  382:        } else { // %varid%
     7914:  383:            if (varid == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  384:                throw InternalError(tok, "Internal error. Token::Match called with varid 0. Please report this to Cppcheck developers");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  385:            }
        -:  386:
     7914:  387:            haystack += 6;
        -:  388:
     7914:  389:            if (tok->varId() == varid)
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
     2559:  390:                return 1;
        -:  391:        }
   172525:  392:        break;
   358113:  393:    case 't':
        -:  394:        // Type (%type%)
        -:  395:    {
   358113:  396:        haystack += 5;
   358113:  397:        if (tok->isName() && tok->varId() == 0 && !tok->isKeyword())
call    0 returned 100%
branch  1 taken 63% (fallthrough)
branch  2 taken 37%
call    3 returned 100%
branch  4 taken 94% (fallthrough)
branch  5 taken 6%
call    6 returned 100%
branch  7 taken 99% (fallthrough)
branch  8 taken 1%
branch  9 taken 59% (fallthrough)
branch 10 taken 41%
   210552:  398:            return 1;
        -:  399:    }
   147561:  400:    break;
    76489:  401:    case 'a':
        -:  402:        // Accept any token (%any%) or assign (%assign%)
        -:  403:    {
    76489:  404:        if (haystack[3] == '%') { // %any%
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
    12702:  405:            haystack += 4;
    12702:  406:            return 1;
        -:  407:        } else { // %assign%
    63787:  408:            haystack += 7;
    63787:  409:            if (tok->isAssignmentOp())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
     3093:  410:                return 1;
        -:  411:        }
        -:  412:    }
    60694:  413:    break;
  1042863:  414:    case 'n':
        -:  415:        // Number (%num%) or name (%name%)
        -:  416:    {
  1042863:  417:        if (haystack[4] == '%') { // %name%
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
   961245:  418:            haystack += 5;
   961245:  419:            if (tok->isName())
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
   477196:  420:                return 1;
        -:  421:        } else {
    81618:  422:            haystack += 4;
    81618:  423:            if (tok->isNumber())
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
     6969:  424:                return 1;
        -:  425:        }
        -:  426:    }
   558698:  427:    break;
   157556:  428:    case 'c': {
   157556:  429:        haystack += 1;
        -:  430:        // Character (%char%)
   157556:  431:        if (haystack[0] == 'h') {
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
    53497:  432:            haystack += 4;
    53497:  433:            if (tok->tokType() == Token::eChar)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       16:  434:                return 1;
        -:  435:        }
        -:  436:        // Const operator (%cop%)
   104059:  437:        else if (haystack[1] == 'p') {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
    62326:  438:            haystack += 3;
    62326:  439:            if (tok->isConstOp())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
     3405:  440:                return 1;
        -:  441:        }
        -:  442:        // Comparison operator (%comp%)
        -:  443:        else {
    41733:  444:            haystack += 4;
    41733:  445:            if (tok->isComparisonOp())
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
     1968:  446:                return 1;
        -:  447:        }
        -:  448:    }
   152167:  449:    break;
    64003:  450:    case 's':
        -:  451:        // String (%str%)
        -:  452:    {
    64003:  453:        haystack += 4;
    64003:  454:        if (tok->tokType() == Token::eString)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
      138:  455:            return 1;
        -:  456:    }
    63865:  457:    break;
    32304:  458:    case 'b':
        -:  459:        // Bool (%bool%)
        -:  460:    {
    32304:  461:        haystack += 5;
    32304:  462:        if (tok->isBoolean())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       30:  463:            return 1;
        -:  464:    }
    32274:  465:    break;
   219528:  466:    case 'o': {
   219528:  467:        ++haystack;
   219528:  468:        if (haystack[1] == '%') {
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -:  469:            // Op (%op%)
    89929:  470:            if (haystack[0] == 'p') {
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
    28857:  471:                haystack += 2;
    28857:  472:                if (tok->isOp())
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
     3797:  473:                    return 1;
        -:  474:            }
        -:  475:            // Or (%or%)
        -:  476:            else {
    61072:  477:                haystack += 2;
    61072:  478:                if (tok->tokType() == Token::eBitOp && tok->str() == "|")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 5% (fallthrough)
branch  6 taken 95%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
       27:  479:                    return 1;
        -:  480:            }
        -:  481:        }
        -:  482:
        -:  483:        // Oror (%oror%)
        -:  484:        else {
   129599:  485:            haystack += 4;
   129599:  486:            if (tok->tokType() == Token::eLogicalOp && tok->str() == "||")
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 31% (fallthrough)
branch  6 taken 69%
branch  7 taken 1% (fallthrough)
branch  8 taken 99%
      504:  487:                return 1;
        -:  488:        }
        -:  489:    }
   215200:  490:    break;
    #####:  491:    default:
        -:  492:        //unknown %cmd%, abort
    #####:  493:        throw InternalError(tok, "Unexpected command");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  494:    }
        -:  495:
  1402984:  496:    if (*haystack == '|')
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
   549672:  497:        haystack += 1;
        -:  498:    else
   853312:  499:        return -1;
        -:  500:
   549672:  501:    return 0xFFFF;
        -:  502:}
        -:  503:
function _ZN5Token12multiCompareEPKS_PKci called 6137073 returned 100% blocks executed 100%
  6137073:  504:int Token::multiCompare(const Token *tok, const char *haystack, nonneg int varid)
        -:  505:{
  6137073:  506:    const char *needle = tok->str().c_str();
call    0 returned 100%
call    1 returned 100%
  6137073:  507:    const char *needlePointer = needle;
        -:  508:    for (;;) {
 13033473:  509:        if (needlePointer == needle && haystack[0] == '%' && haystack[1] != '|' && haystack[1] != '\0' && haystack[1] != ' ') {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
  2175502:  510:            const int ret = multiComparePercent(tok, haystack, varid);
call    0 returned 100%
  2175502:  511:            if (ret < 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
  1625830:  512:                return ret;
 10857971:  513:        } else if (*haystack == '|') {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   161988:  514:            if (*needlePointer == 0) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  515:                // If needle is at the end, we have a match.
   159413:  516:                return 1;
        -:  517:            }
        -:  518:
     2575:  519:            needlePointer = needle;
     2575:  520:            ++haystack;
 10695983:  521:        } else if (*needlePointer == *haystack) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
   730331:  522:            if (*needlePointer == '\0')
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
    88315:  523:                return 1;
   642016:  524:            ++needlePointer;
   642016:  525:            ++haystack;
  9965652:  526:        } else if (*haystack == ' ' || *haystack == '\0') {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   342049:  527:            if (needlePointer == needle)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   227927:  528:                return 0;
   114122:  529:            break;
        -:  530:        }
        -:  531:        // If haystack and needle don't share the same character,
        -:  532:        // find next '|' character.
        -:  533:        else {
  9623603:  534:            needlePointer = needle;
        -:  535:
 29865939:  536:            do {
 39489542:  537:                ++haystack;
 39489542:  538:            } while (*haystack != ' ' && *haystack != '|' && *haystack);
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 85% (fallthrough)
branch  3 taken 15%
branch  4 taken 96% (fallthrough)
branch  5 taken 4%
        -:  539:
  9623603:  540:            if (*haystack == ' ' || *haystack == '\0') {
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
  3921466:  541:                return -1;
        -:  542:            }
        -:  543:
  5702137:  544:            ++haystack;
        -:  545:        }
  6896400:  546:    }
        -:  547:
   114122:  548:    if (*needlePointer == '\0')
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   111474:  549:        return 1;
        -:  550:
     2648:  551:    return -1;
        -:  552:}
        -:  553:
function _ZN5Token11simpleMatchEPKS_PKc called 1165816 returned 100% blocks executed 100%
  1165816:  554:bool Token::simpleMatch(const Token *tok, const char pattern[])
        -:  555:{
  1165816:  556:    if (!tok)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
    34835:  557:        return false; // shortcut
  1130981:  558:    const char *current  = pattern;
  1130981:  559:    const char *next = std::strchr(pattern, ' ');
  1130981:  560:    if (!next)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
   209144:  561:        next = pattern + std::strlen(pattern);
        -:  562:
  1270953:  563:    while (*current) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
  1177428:  564:        const std::size_t length = next - current;
        -:  565:
  1177428:  566:        if (!tok || length != tok->mStr.length() || std::strncmp(current, tok->mStr.c_str(), length))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
call    2 returned 100%
branch  3 taken 39% (fallthrough)
branch  4 taken 61%
call    5 returned 100%
branch  6 taken 85% (fallthrough)
branch  7 taken 15%
branch  8 taken 94% (fallthrough)
branch  9 taken 6%
  1107442:  567:            return false;
        -:  568:
    69986:  569:        current = next;
    69986:  570:        if (*next) {
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
    46447:  571:            next = std::strchr(++current, ' ');
    46447:  572:            if (!next)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
    35808:  573:                next = current + std::strlen(current);
        -:  574:        }
    69986:  575:        tok = tok->next();
call    0 returned 100%
        -:  576:    }
        -:  577:
    23539:  578:    return true;
        -:  579:}
        -:  580:
function _ZN5Token15firstWordEqualsEPKcS1_ called 104078 returned 100% blocks executed 100%
   109960:  581:bool Token::firstWordEquals(const char *str, const char *word)
        -:  582:{
        -:  583:    for (;;) {
   115842:  584:        if (*str != *word) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
   101972:  585:            return (*str == ' ' && *word == 0);
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
     7988:  586:        } else if (*str == 0)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
     2106:  587:            break;
        -:  588:
     5882:  589:        ++str;
     5882:  590:        ++word;
        -:  591:    }
        -:  592:
     2106:  593:    return true;
        -:  594:}
        -:  595:
function _ZN5Token14chrInFirstWordEPKcc called 1098980 returned 100% blocks executed 100%
  5156627:  596:const char *Token::chrInFirstWord(const char *str, char c)
        -:  597:{
        -:  598:    for (;;) {
  9214274:  599:        if (*str == ' ' || *str == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
    66672:  600:            return nullptr;
        -:  601:
  5089955:  602:        if (*str == c)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
  1032308:  603:            return str;
        -:  604:
  4057647:  605:        ++str;
        -:  606:    }
        -:  607:}
        -:  608:
function _ZN5Token5MatchEPKS_PKci called 6160000 returned 100% blocks executed 99%
  6160000:  609:bool Token::Match(const Token *tok, const char pattern[], nonneg int varid)
        -:  610:{
  6160000:  611:    const char *p = pattern;
  9473678:  612:    while (*p) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
        -:  613:        // Skip spaces in pattern..
  9683245:  614:        while (*p == ' ')
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
  1174415:  615:            ++p;
        -:  616:
        -:  617:        // No token => Success!
  7334415:  618:        if (*p == '\0')
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  619:            break;
        -:  620:
  7334415:  621:        if (!tok) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  622:            // If we have no tokens, pattern "!!else" should return true
    63622:  623:            if (p[0] == '!' && p[1] == '!' && p[2] != '\0') {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
    27014:  624:                while (*p && *p != ' ')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 82% (fallthrough)
branch  3 taken 18%
    12174:  625:                    ++p;
     2666:  626:                continue;
        -:  627:            } else
    58290:  628:                return false;
        -:  629:        }
        -:  630:
        -:  631:        // [.. => search for a one-character token..
  7273459:  632:        if (p[0] == '[' && chrInFirstWord(p, ']')) {
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
call    2 returned 100%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
branch  5 taken 14% (fallthrough)
branch  6 taken 86%
  1032308:  633:            if (tok->str().length() != 1)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
   300326:  634:                return false;
        -:  635:
   731982:  636:            const char *temp = p+1;
   731982:  637:            bool chrFound = false;
   731982:  638:            int count = 0;
  5283898:  639:            while (*temp && *temp != ' ') {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
  2470755:  640:                if (*temp == ']') {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
   614524:  641:                    ++count;
        -:  642:                }
        -:  643:
  1856231:  644:                else if (*temp == tok->str()[0]) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
   194797:  645:                    chrFound = true;
   194797:  646:                    break;
        -:  647:                }
        -:  648:
  2275958:  649:                ++temp;
        -:  650:            }
        -:  651:
   731982:  652:            if (count > 1 && tok->str()[0] == ']')
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
      863:  653:                chrFound = true;
        -:  654:
   731982:  655:            if (!chrFound)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
   536322:  656:                return false;
        -:  657:
   195660:  658:            p = temp;
  1510080:  659:            while (*p && *p != ' ')
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
   657210:  660:                ++p;
        -:  661:        }
        -:  662:
        -:  663:        // Parse "not" options. Token can be anything except the given one
  6340017:  664:        else if (p[0] == '!' && p[1] == '!' && p[2] != '\0') {
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
   104078:  665:            p += 2;
   104078:  666:            if (firstWordEquals(p, tok->str().c_str()))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 5% (fallthrough)
branch  4 taken 95%
     5212:  667:                return false;
   442442:  668:            while (*p && *p != ' ')
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 65% (fallthrough)
branch  3 taken 35%
   171788:  669:                ++p;
        -:  670:        }
        -:  671:
        -:  672:        // Parse multi options, such as void|int|char (accept token which is one of these 3)
        -:  673:        else {
  6137073:  674:            const int res = multiCompare(tok, p, varid);
call    0 returned 100%
  6365000:  675:            if (res == 0) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  676:                // Empty alternative matches, use the same token on next round
  2885867:  677:                while (*p && *p != ' ')
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 85% (fallthrough)
branch  3 taken 15%
  1328970:  678:                    ++p;
   227927:  679:                continue;
  5909146:  680:            } else if (res == -1) {
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -:  681:                // No match
  4777426:  682:                return false;
        -:  683:            }
        -:  684:        }
        -:  685:
 18742594:  686:        while (*p && *p != ' ')
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
  8658174:  687:            ++p;
        -:  688:
  1426246:  689:        tok = tok->next();
call    0 returned 100%
        -:  690:    }
        -:  691:
        -:  692:    // The end of the pattern has been reached and nothing wrong has been found
   482424:  693:    return true;
        -:  694:}
        -:  695:
function _ZN5Token12getStrLengthEPKS_ called 3 returned 100% blocks executed 73%
        3:  696:nonneg int Token::getStrLength(const Token *tok)
        -:  697:{
        3:  698:    assert(tok != nullptr);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        3:  699:    assert(tok->mTokType == eString);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  700:
        3:  701:    int len = 0;
        6:  702:    const std::string str(getStringLiteral(tok->str()));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
        3:  703:    std::string::const_iterator it = str.begin();
call    0 returned 100%
        3:  704:    const std::string::const_iterator end = str.end();
call    0 returned 100%
        -:  705:
        7:  706:    while (it != end) {
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        2:  707:        if (*it == '\\') {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  708:            ++it;
call    0 never executed
        -:  709:
        -:  710:            // string ends at '\0'
    #####:  711:            if (*it == '0')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  712:                return len;
        -:  713:        }
        -:  714:
        2:  715:        if (*it == '\0')
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  716:            return len;
        -:  717:
        2:  718:        ++it;
call    0 returned 100%
        2:  719:        ++len;
        -:  720:    }
        -:  721:
        3:  722:    return len;
        -:  723:}
        -:  724:
function _ZN5Token10getStrSizeEPKS_ called 0 returned 0% blocks executed 0%
    #####:  725:nonneg int Token::getStrSize(const Token *tok)
        -:  726:{
    #####:  727:    assert(tok != nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  728:    assert(tok->tokType() == eString);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  729:    const std::string str(getStringLiteral(tok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    #####:  730:    int sizeofstring = 1;
    #####:  731:    for (int i = 0; i < (int)str.size(); i++) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  732:        if (str[i] == '\\')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  733:            ++i;
    #####:  734:        ++sizeofstring;
        -:  735:    }
    #####:  736:    return sizeofstring;
        -:  737:}
        -:  738:
function _ZN5Token9getCharAtB5cxx11EPKS_x called 0 returned 0% blocks executed 0%
    #####:  739:std::string Token::getCharAt(const Token *tok, MathLib::bigint index)
        -:  740:{
    #####:  741:    assert(tok != nullptr);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  742:    std::string str(getStringLiteral(tok->str()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  743:    std::string::const_iterator it = str.begin();
call    0 never executed
call    1 never executed
    #####:  744:    const std::string::const_iterator end = str.end();
call    0 never executed
call    1 never executed
        -:  745:
    #####:  746:    while (it != end) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  747:        if (index == 0) {
branch  0 never executed
branch  1 never executed
    #####:  748:            if (*it == '\0')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  749:                return "\\0";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  750:
    #####:  751:            std::string ret(1, *it);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  752:            if (*it == '\\') {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  753:                ++it;
call    0 never executed
    #####:  754:                ret += *it;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:            }
    #####:  756:            return ret;
call    0 never executed
        -:  757:        }
        -:  758:
    #####:  759:        if (*it == '\\')
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  760:            ++it;
call    0 never executed
    #####:  761:        ++it;
call    0 never executed
    #####:  762:        --index;
        -:  763:    }
    #####:  764:    assert(index == 0);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  765:
    #####:  766:    return "\\0";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  767:}
        -:  768:
function _ZN5Token4moveEPS_S0_S0_ called 0 returned 0% blocks executed 0%
    #####:  769:void Token::move(Token *srcStart, Token *srcEnd, Token *newLocation)
        -:  770:{
        -:  771:    /**[newLocation] -> b -> c -> [srcStart] -> [srcEnd] -> f */
        -:  772:
        -:  773:    // Fix the gap, which tokens to be moved will leave
    #####:  774:    srcStart->previous()->next(srcEnd->next());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  775:    srcEnd->next()->previous(srcStart->previous());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  776:
        -:  777:    // Fix the tokens to be moved
    #####:  778:    srcEnd->next(newLocation->next());
call    0 never executed
call    1 never executed
    #####:  779:    srcStart->previous(newLocation);
call    0 never executed
        -:  780:
        -:  781:    // Fix the tokens at newLocation
    #####:  782:    newLocation->next()->previous(srcEnd);
call    0 never executed
call    1 never executed
    #####:  783:    newLocation->next(srcStart);
call    0 never executed
        -:  784:
        -:  785:    // Update _progressValue
    #####:  786:    for (Token *tok = srcStart; tok != srcEnd->next(); tok = tok->next())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  787:        tok->mImpl->mProgressValue = newLocation->mImpl->mProgressValue;
    #####:  788:}
        -:  789:
function _ZNK5Token12nextArgumentEv called 8423 returned 100% blocks executed 95%
     8423:  790:Token* Token::nextArgument() const
        -:  791:{
    27446:  792:    for (const Token* tok = this; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
    27446:  793:        if (tok->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     1042:  794:            return tok->next();
call    0 returned 100%
    26404:  795:        else if (tok->link() && Token::Match(tok, "(|{|[|<"))
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
call    3 returned 100%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
     1245:  796:            tok = tok->link();
call    0 returned 100%
    25159:  797:        else if (Token::Match(tok, ")|;"))
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
     7381:  798:            return nullptr;
        -:  799:    }
    #####:  800:    return nullptr;
        -:  801:}
        -:  802:
function _ZNK5Token30nextArgumentBeforeCreateLinks2Ev called 6 returned 100% blocks executed 70%
        6:  803:Token* Token::nextArgumentBeforeCreateLinks2() const
        -:  804:{
       19:  805:    for (const Token* tok = this; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       19:  806:        if (tok->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  807:            return tok->next();
call    0 never executed
       19:  808:        else if (tok->link() && Token::Match(tok, "(|{|["))
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  809:            tok = tok->link();
call    0 never executed
       19:  810:        else if (tok->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  811:            const Token* temp = tok->findClosingBracket();
call    0 never executed
    #####:  812:            if (temp)
branch  0 never executed
branch  1 never executed
    #####:  813:                tok = temp;
       19:  814:        } else if (Token::Match(tok, ")|;"))
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
        6:  815:            return nullptr;
        -:  816:    }
    #####:  817:    return nullptr;
        -:  818:}
        -:  819:
function _ZNK5Token20nextTemplateArgumentEv called 32 returned 100% blocks executed 70%
       32:  820:Token* Token::nextTemplateArgument() const
        -:  821:{
       90:  822:    for (const Token* tok = this; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       90:  823:        if (tok->str() == ",")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
       32:  824:            return tok->next();
call    0 returned 100%
       58:  825:        else if (tok->link() && Token::Match(tok, "(|{|[|<"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:  826:            tok = tok->link();
call    0 never executed
       58:  827:        else if (Token::Match(tok, ">|;"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  828:            return nullptr;
        -:  829:    }
    #####:  830:    return nullptr;
        -:  831:}
        -:  832:
function _ZL10isOperatorPK5Token called 8 returned 100% blocks executed 100%
        8:  833:static bool isOperator(const Token *tok)
        -:  834:{
        8:  835:    if (tok->link())
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        6:  836:        tok = tok->link();
call    0 returned 100%
        -:  837:    // TODO handle multi token operators
        8:  838:    return tok->strAt(-1) == "operator";
call    0 returned 100%
call    1 returned 100%
        -:  839:}
        -:  840:
function _ZNK5Token18findClosingBracketEv called 676 returned 100% blocks executed 69%
      676:  841:const Token * Token::findClosingBracket() const
        -:  842:{
      676:  843:    if (mStr != "<")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  844:        return nullptr;
        -:  845:
      676:  846:    const Token *closing = nullptr;
      676:  847:    const bool templateParameter(strAt(-1) == "template");
call    0 returned 100%
call    1 returned 100%
     1352:  848:    std::set<std::string> templateParameters;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:  849:
      676:  850:    unsigned int depth = 0;
     2557:  851:    for (closing = this; closing != nullptr; closing = closing->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     2557:  852:        if (Token::Match(closing, "{|[|(")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
        7:  853:            closing = closing->link();
call    0 returned 100%
        7:  854:            if (!closing)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  855:                return nullptr; // #6803
     2550:  856:        } else if (Token::Match(closing, "}|]|)|;"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 6% (fallthrough)
branch  4 taken 94%
      150:  857:            return nullptr;
        -:  858:        // we can make some guesses for template parameters
     6172:  859:        else if (closing->str() == "<" && closing->previous() &&
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 1% (fallthrough)
branch  6 taken 99%
branch  7 taken 28% (fallthrough)
branch  8 taken 72%
     5944:  860:                 (closing->previous()->isName() || isOperator(closing->previous())) &&
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 22% (fallthrough)
branch 13 taken 78%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
     2850:  861:                 (templateParameter ? templateParameters.find(closing->strAt(-1)) == templateParameters.end() : true))
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
call    8 returned 100%
branch  9 taken 6% (fallthrough)
branch 10 taken 94%
call   11 returned 100%
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
      678:  862:            ++depth;
     1722:  863:        else if (closing->str() == ">") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 31% (fallthrough)
branch  3 taken 69%
      536:  864:            if (--depth == 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
      526:  865:                return closing;
     1186:  866:        } else if (closing->str() == ">>") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  867:            if (depth <= 2)
branch  0 never executed
branch  1 never executed
    #####:  868:                return closing;
    #####:  869:            depth -= 2;
        -:  870:        }
        -:  871:        // save named template parameter
     1454:  872:        else if (templateParameter && depth == 1 && closing->str() == "," &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
     1186:  873:                 closing->previous()->isName() && !Match(closing->previous(), "class|typename|."))
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:  874:            templateParameters.insert(closing->strAt(-1));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:  875:    }
        -:  876:
    #####:  877:    return closing;
        -:  878:}
        -:  879:
function _ZN5Token18findClosingBracketEv called 454 returned 100% blocks executed 100%
      454:  880:Token * Token::findClosingBracket()
        -:  881:{
        -:  882:    // return value of const function
      454:  883:    return const_cast<Token*>(const_cast<const Token*>(this)->findClosingBracket());
call    0 returned 100%
        -:  884:}
        -:  885:
function _ZNK5Token18findOpeningBracketEv called 2 returned 100% blocks executed 76%
        2:  886:const Token * Token::findOpeningBracket() const
        -:  887:{
        2:  888:    if (mStr != ">")
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  889:        return nullptr;
        -:  890:
        2:  891:    const Token *opening = nullptr;
        -:  892:
        2:  893:    unsigned int depth = 0;
       16:  894:    for (opening = this; opening != nullptr; opening = opening->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       16:  895:        if (Token::Match(opening, "}|]|)")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  896:            opening = opening->link();
call    0 never executed
    #####:  897:            if (!opening)
branch  0 never executed
branch  1 never executed
    #####:  898:                return nullptr;
       16:  899:        } else if (Token::Match(opening, "{|{|(|;"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  900:            return nullptr;
       16:  901:        else if (opening->str() == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        4:  902:            ++depth;
       12:  903:        else if (opening->str() == "<") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        4:  904:            if (--depth == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  905:                return opening;
        -:  906:        }
        -:  907:    }
        -:  908:
    #####:  909:    return opening;
        -:  910:}
        -:  911:
function _ZN5Token18findOpeningBracketEv called 2 returned 100% blocks executed 100%
        2:  912:Token * Token::findOpeningBracket()
        -:  913:{
        -:  914:    // return value of const function
        2:  915:    return const_cast<Token*>(const_cast<const Token*>(this)->findOpeningBracket());
call    0 returned 100%
        -:  916:}
        -:  917:
        -:  918://---------------------------------------------------------------------------
        -:  919:
function _ZN5Token15findsimplematchEPKS_PKc called 1661 returned 100% blocks executed 100%
     1661:  920:const Token *Token::findsimplematch(const Token * const startTok, const char pattern[])
        -:  921:{
    32837:  922:    for (const Token* tok = startTok; tok; tok = tok->next()) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
    31902:  923:        if (Token::simpleMatch(tok, pattern))
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
      726:  924:            return tok;
        -:  925:    }
      935:  926:    return nullptr;
        -:  927:}
        -:  928:
function _ZN5Token15findsimplematchEPKS_PKcS1_ called 43 returned 100% blocks executed 100%
       43:  929:const Token *Token::findsimplematch(const Token * const startTok, const char pattern[], const Token * const end)
        -:  930:{
      647:  931:    for (const Token* tok = startTok; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
call    4 returned 100%
      629:  932:        if (Token::simpleMatch(tok, pattern))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
       25:  933:            return tok;
        -:  934:    }
       18:  935:    return nullptr;
        -:  936:}
        -:  937:
function _ZN5Token9findmatchEPKS_PKci called 1308 returned 100% blocks executed 88%
     1308:  938:const Token *Token::findmatch(const Token * const startTok, const char pattern[], const nonneg int varId)
        -:  939:{
     1506:  940:    for (const Token* tok = startTok; tok; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     1506:  941:        if (Token::Match(tok, pattern, varId))
call    0 returned 100%
branch  1 taken 87% (fallthrough)
branch  2 taken 13%
     1308:  942:            return tok;
        -:  943:    }
    #####:  944:    return nullptr;
        -:  945:}
        -:  946:
function _ZN5Token9findmatchEPKS_PKcS1_i called 3152 returned 100% blocks executed 100%
     3152:  947:const Token *Token::findmatch(const Token * const startTok, const char pattern[], const Token * const end, const nonneg int varId)
        -:  948:{
    12237:  949:    for (const Token* tok = startTok; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
call    4 returned 100%
    10299:  950:        if (Token::Match(tok, pattern, varId))
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
     1214:  951:            return tok;
        -:  952:    }
     1938:  953:    return nullptr;
        -:  954:}
        -:  955:
function _ZN5Token8functionEPK8Function called 32590 returned 100% blocks executed 100%
    32590:  956:void Token::function(const Function *f)
        -:  957:{
    32590:  958:    mImpl->mFunction = f;
    32590:  959:    if (f) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     3658:  960:        if (f->isLambda())
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
       12:  961:            tokType(eLambda);
call    0 returned 100%
        -:  962:        else
     3646:  963:            tokType(eFunction);
call    0 returned 100%
    28932:  964:    } else if (mTokType == eFunction)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     1439:  965:        tokType(eName);
call    0 returned 100%
    32590:  966:}
        -:  967:
function _ZN5Token11insertTokenERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_b called 28891 returned 100% blocks executed 58%
    28891:  968:void Token::insertToken(const std::string &tokenStr, const std::string &originalNameStr, bool prepend)
        -:  969:{
        -:  970:    Token *newToken;
    28891:  971:    if (mStr.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  972:        newToken = this;
        -:  973:    else
    28891:  974:        newToken = new Token(mTokensFrontBack);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
call    5 never executed
    28891:  975:    newToken->str(tokenStr);
call    0 returned 100%
    28891:  976:    if (!originalNameStr.empty())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  977:        newToken->originalName(originalNameStr);
call    0 never executed
        -:  978:
    28891:  979:    if (newToken != this) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    28891:  980:        newToken->mImpl->mLineNumber = mImpl->mLineNumber;
    28891:  981:        newToken->mImpl->mFileIndex = mImpl->mFileIndex;
    28891:  982:        newToken->mImpl->mProgressValue = mImpl->mProgressValue;
        -:  983:
    28891:  984:        if (prepend) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       29:  985:            if (this->previous()) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
       25:  986:                newToken->previous(this->previous());
call    0 returned 100%
call    1 returned 100%
       25:  987:                newToken->previous()->next(newToken);
call    0 returned 100%
call    1 returned 100%
        4:  988:            } else if (mTokensFrontBack) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  989:                mTokensFrontBack->front = newToken;
        -:  990:            }
       29:  991:            this->previous(newToken);
call    0 returned 100%
       29:  992:            newToken->next(this);
call    0 returned 100%
        -:  993:        } else {
    28862:  994:            if (this->next()) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
     1300:  995:                newToken->next(this->next());
call    0 returned 100%
call    1 returned 100%
     1300:  996:                newToken->next()->previous(newToken);
call    0 returned 100%
call    1 returned 100%
    27562:  997:            } else if (mTokensFrontBack) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    27562:  998:                mTokensFrontBack->back = newToken;
        -:  999:            }
    28862: 1000:            this->next(newToken);
call    0 returned 100%
    28862: 1001:            newToken->previous(this);
call    0 returned 100%
        -: 1002:        }
        -: 1003:
    28891: 1004:        if (mImpl->mScopeInfo) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1005:            // If the brace is immediately closed there is no point opening a new scope for it
      112: 1006:            if (tokenStr == "{") {
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
       22: 1007:                std::string nextScopeNameAddition;
call    0 returned 100%
call    1 never executed
call    2 never executed
        -: 1008:                // This might be the opening of a member function
       11: 1009:                Token *tok1 = newToken;
       11: 1010:                while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1011:                    tok1 = tok1->previous();
call    0 never executed
       11: 1012:                if (tok1 && tok1->previous() && tok1->strAt(-1) == ")") {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 64% (fallthrough)
branch  8 taken 36%
branch  9 taken 64% (fallthrough)
branch 10 taken 36%
        7: 1013:                    tok1 = tok1->linkAt(-1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7: 1014:                    if (Token::Match(tok1->previous(), "throw|noexcept")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1015:                        tok1 = tok1->previous();
call    0 never executed
    #####: 1016:                        while (Token::Match(tok1->previous(), "const|volatile|final|override|&|&&|noexcept"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1017:                            tok1 = tok1->previous();
call    0 never executed
    #####: 1018:                        if (tok1->strAt(-1) != ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1019:                            return;
        7: 1020:                    } else if (Token::Match(newToken->tokAt(-2), ":|, %name%")) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1021:                        tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1022:                        if (tok1->strAt(-1) != ")")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1023:                            return;
        -: 1024:                    }
        7: 1025:                    if (tok1->strAt(-1) == ">")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1026:                        tok1 = tok1->previous()->findOpeningBracket();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        7: 1027:                    if (tok1 && Token::Match(tok1->tokAt(-3), "%name% :: %name%")) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1028:                        tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1029:                        std::string scope = tok1->strAt(-1);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 1030:                        while (Token::Match(tok1->tokAt(-2), ":: %name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1031:                            scope = tok1->strAt(-3) + " :: " + scope;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1032:                            tok1 = tok1->tokAt(-2);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1033:                        }
        -: 1034:
    #####: 1035:                        if (!nextScopeNameAddition.empty() && !scope.empty()) nextScopeNameAddition += " :: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1036:                        nextScopeNameAddition += scope;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1037:                    }
        -: 1038:                }
        -: 1039:
        -: 1040:                // Or it might be a namespace/class/struct
       11: 1041:                if (Token::Match(newToken->previous(), "%name%|>")) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 36% (fallthrough)
branch  5 taken 64%
        4: 1042:                    Token* nameTok = newToken->previous();
call    0 returned 100%
      222: 1043:                    while (nameTok && !Token::Match(nameTok, "namespace|class|struct|union %name% {|::|:|<")) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 96% (fallthrough)
branch  8 taken 4%
      109: 1044:                        nameTok = nameTok->previous();
call    0 returned 100%
        -: 1045:                    }
        4: 1046:                    if (nameTok) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1047:                        for (nameTok = nameTok->next(); nameTok && !Token::Match(nameTok, "{|:|<"); nameTok = nameTok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1048:                            nextScopeNameAddition.append(nameTok->str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1049:                            nextScopeNameAddition.append(" ");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1050:                        }
    #####: 1051:                        if (nextScopeNameAddition.length() > 0) nextScopeNameAddition = nextScopeNameAddition.substr(0, nextScopeNameAddition.length() - 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -: 1052:                    }
        -: 1053:                }
        -: 1054:
        -: 1055:                // New scope is opening, record it here
       22: 1056:                std::shared_ptr<ScopeInfo2> newScopeInfo = std::make_shared<ScopeInfo2>(mImpl->mScopeInfo->name, nullptr, mImpl->mScopeInfo->usingNamespaces);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100%
branch  8 taken 0%
call    9 never executed
        -: 1057:
       11: 1058:                if (!newScopeInfo->name.empty() && !nextScopeNameAddition.empty()) newScopeInfo->name.append(" :: ");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
       11: 1059:                newScopeInfo->name.append(nextScopeNameAddition);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
       11: 1060:                nextScopeNameAddition = "";
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1061:
       11: 1062:                newToken->scopeInfo(newScopeInfo);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
      101: 1063:            } else if (tokenStr == "}") {
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
       11: 1064:                Token* matchingTok = newToken->previous();
call    0 returned 100%
       11: 1065:                int depth = 0;
      205: 1066:                while (matchingTok && (depth != 0 || !Token::simpleMatch(matchingTok, "{"))) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
call    4 returned 100%
branch  5 taken 87% (fallthrough)
branch  6 taken 13%
branch  7 taken 90% (fallthrough)
branch  8 taken 10%
       97: 1067:                    if (Token::simpleMatch(matchingTok, "}")) depth++;
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
       97: 1068:                    if (Token::simpleMatch(matchingTok, "{")) depth--;
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
       97: 1069:                    matchingTok = matchingTok->previous();
call    0 returned 100%
        -: 1070:                }
       11: 1071:                if (matchingTok && matchingTok->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       11: 1072:                    newToken->mImpl->mScopeInfo = matchingTok->previous()->scopeInfo();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -: 1073:                }
        -: 1074:            } else {
       90: 1075:                if (prepend && newToken->previous()) {
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
call    2 returned 100%
branch  3 taken 84% (fallthrough)
branch  4 taken 16%
branch  5 taken 23% (fallthrough)
branch  6 taken 77%
       21: 1076:                    newToken->mImpl->mScopeInfo = newToken->previous()->scopeInfo();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -: 1077:                } else {
       69: 1078:                    newToken->mImpl->mScopeInfo = mImpl->mScopeInfo;
call    0 returned 100%
        -: 1079:                }
       90: 1080:                if (tokenStr == ";") {
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
        -: 1081:                    const Token* statementStart;
        9: 1082:                    for (statementStart = newToken; statementStart->previous() && !Token::Match(statementStart->previous(), ";|{"); statementStart = statementStart->previous());
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 87% (fallthrough)
branch  6 taken 13%
branch  7 taken 79% (fallthrough)
branch  8 taken 21%
call    9 returned 100%
        9: 1083:                    if (Token::Match(statementStart, "using namespace %name% ::|;")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1084:                        const Token * tok1 = statementStart->tokAt(2);
call    0 never executed
    #####: 1085:                        std::string nameSpace;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1086:                        while (tok1 && tok1->str() != ";") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1087:                            if (!nameSpace.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1088:                                nameSpace += " ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1089:                            nameSpace += tok1->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1090:                            tok1 = tok1->next();
call    0 never executed
        -: 1091:                        }
    #####: 1092:                        mImpl->mScopeInfo->usingNamespaces.insert(nameSpace);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 1093:                    }
        -: 1094:                }
        -: 1095:            }
        -: 1096:        }
        -: 1097:    }
        -: 1098:}
        -: 1099:
function _ZN5Token11eraseTokensEPS_PKS_ called 41 returned 100% blocks executed 92%
       41: 1100:void Token::eraseTokens(Token *begin, const Token *end)
        -: 1101:{
       41: 1102:    if (!begin || begin == end)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1103:        return;
        -: 1104:
      177: 1105:    while (begin->next() && begin->next() != end) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 81% (fallthrough)
branch  5 taken 19%
branch  6 taken 81% (fallthrough)
branch  7 taken 19%
      177: 1106:        begin->deleteNext();
call    0 returned 100%
        -: 1107:    }
        -: 1108:}
        -: 1109:
function _ZN5Token17createMutualLinksEPS_S0_ called 4874 returned 100% blocks executed 67%
     4874: 1110:void Token::createMutualLinks(Token *begin, Token *end)
        -: 1111:{
     4874: 1112:    assert(begin != nullptr);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4874: 1113:    assert(end != nullptr);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4874: 1114:    assert(begin != end);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
     4874: 1115:    begin->link(end);
call    0 returned 100%
     4874: 1116:    end->link(begin);
call    0 returned 100%
     4874: 1117:}
        -: 1118:
function _ZNK5Token8printOutEPKc called 0 returned 0% blocks executed 0%
    #####: 1119:void Token::printOut(const char *title) const
        -: 1120:{
    #####: 1121:    if (title && title[0])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1122:        std::cout << "\n### " << title << " ###\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1123:    std::cout << stringifyList(true, true, true, true, true, nullptr, nullptr) << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1124:}
        -: 1125:
function _ZNK5Token8printOutEPKcRKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS9_EEE called 0 returned 0% blocks executed 0%
    #####: 1126:void Token::printOut(const char *title, const std::vector<std::string> &fileNames) const
        -: 1127:{
    #####: 1128:    if (title && title[0])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1129:        std::cout << "\n### " << title << " ###\n";
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1130:    std::cout << stringifyList(true, true, true, true, true, &fileNames, nullptr) << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    #####: 1131:}
        -: 1132:
function _ZNK5Token9stringifyERSobbb called 211 returned 100% blocks executed 46%
      211: 1133:void Token::stringify(std::ostream& os, bool varid, bool attributes, bool macro) const
        -: 1134:{
      211: 1135:    if (attributes) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      211: 1136:        if (isUnsigned())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1137:            os << "unsigned ";
call    0 never executed
      211: 1138:        else if (isSigned())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1139:            os << "signed ";
call    0 never executed
      211: 1140:        if (isComplex())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1141:            os << "_Complex ";
call    0 never executed
      211: 1142:        if (isLong()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1143:            if (!(mTokType == eString || mTokType == eChar))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1144:                os << "long ";
call    0 never executed
        -: 1145:        }
        -: 1146:    }
      211: 1147:    if (macro && isExpandedMacro())
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1148:        os << "$";
call    0 never executed
      211: 1149:    if (isName() && mStr.find(' ') != std::string::npos) {
call    0 returned 100%
branch  1 taken 38% (fallthrough)
branch  2 taken 62%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1150:        for (char i : mStr) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 1151:            if (i != ' ')
branch  0 never executed
branch  1 never executed
    #####: 1152:                os << i;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1153:        }
      211: 1154:    } else if (mStr[0] != '\"' || mStr.find('\0') == std::string::npos)
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
      211: 1155:        os << mStr;
call    0 returned 100%
        -: 1156:    else {
    #####: 1157:        for (char i : mStr) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
    #####: 1158:            if (i == '\0')
branch  0 never executed
branch  1 never executed
    #####: 1159:                os << "\\0";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1160:            else
    #####: 1161:                os << i;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1162:        }
        -: 1163:    }
      211: 1164:    if (varid && mImpl->mVarId != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 1165:        os << '@' << mImpl->mVarId;
call    0 never executed
call    1 never executed
      211: 1166:}
call    0 never executed
        -: 1167:
function _ZNK5Token13stringifyListEbbbbbPKNSt7__debug6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EEEPKS_ called 64 returned 100% blocks executed 30%
       64: 1168:std::string Token::stringifyList(bool varid, bool attributes, bool linenumbers, bool linebreaks, bool files, const std::vector<std::string>* fileNames, const Token* end) const
        -: 1169:{
       64: 1170:    if (this == end)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        4: 1171:        return "";
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -: 1172:
      120: 1173:    std::ostringstream ret;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -: 1174:
       60: 1175:    unsigned int lineNumber = mImpl->mLineNumber - (linenumbers ? 1U : 0U);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60: 1176:    unsigned int fileIndex = files ? ~0U : mImpl->mFileIndex;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      120: 1177:    std::map<int, unsigned int> lineNumbers;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
      271: 1178:    for (const Token *tok = this; tok != end; tok = tok->next()) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
call    2 returned 100%
      211: 1179:        bool fileChange = false;
      211: 1180:        if (tok->mImpl->mFileIndex != fileIndex) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1181:            if (fileIndex != ~0U) {
branch  0 never executed
branch  1 never executed
    #####: 1182:                lineNumbers[fileIndex] = tok->mImpl->mFileIndex;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:            }
        -: 1184:
    #####: 1185:            fileIndex = tok->mImpl->mFileIndex;
    #####: 1186:            if (files) {
branch  0 never executed
branch  1 never executed
    #####: 1187:                ret << "\n\n##file ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1188:                if (fileNames && fileNames->size() > tok->mImpl->mFileIndex)
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1189:                    ret << fileNames->at(tok->mImpl->mFileIndex);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1190:                else
    #####: 1191:                    ret << fileIndex;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1192:                ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1193:            }
        -: 1194:
    #####: 1195:            lineNumber = lineNumbers[fileIndex];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1196:            fileChange = true;
        -: 1197:        }
        -: 1198:
      211: 1199:        if (linebreaks && (lineNumber != tok->linenr() || fileChange)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####: 1200:            if (lineNumber+4 < tok->linenr() && fileIndex == tok->mImpl->mFileIndex) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1201:                ret << '\n' << lineNumber+1 << ":\n|\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1202:                ret << tok->linenr()-1 << ":\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1203:                ret << tok->linenr() << ": ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1204:            } else if (this == tok && linenumbers) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1205:                ret << tok->linenr() << ": ";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1206:            } else {
    #####: 1207:                while (lineNumber < tok->linenr()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1208:                    ++lineNumber;
    #####: 1209:                    ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1210:                    if (linenumbers) {
branch  0 never executed
branch  1 never executed
    #####: 1211:                        ret << lineNumber << ':';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1212:                        if (lineNumber == tok->linenr())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1213:                            ret << ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1214:                    }
        -: 1215:                }
        -: 1216:            }
    #####: 1217:            lineNumber = tok->linenr();
call    0 never executed
        -: 1218:        }
        -: 1219:
      211: 1220:        tok->stringify(ret, varid, attributes, attributes); // print token
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
      211: 1221:        if (tok->next() != end && (!linebreaks || (tok->next()->linenr() <= tok->linenr() && tok->next()->fileIndex() == tok->fileIndex())))
call    0 returned 100%
branch  1 taken 72% (fallthrough)
branch  2 taken 28%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 72% (fallthrough)
branch 16 taken 28%
      151: 1222:            ret << ' ';
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1223:    }
       60: 1224:    if (linebreaks && (files || linenumbers))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1225:        ret << '\n';
call    0 never executed
branch  1 never executed
branch  2 never executed
       60: 1226:    return ret.str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1227:}
        -: 1228:
function _ZNK5Token13stringifyListB5cxx11EPKS_b called 64 returned 100% blocks executed 100%
       64: 1229:std::string Token::stringifyList(const Token* end, bool attributes) const
        -: 1230:{
       64: 1231:    return stringifyList(false, attributes, false, false, false, nullptr, end);
call    0 returned 100%
        -: 1232:}
        -: 1233:
function _ZNK5Token13stringifyListB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####: 1234:std::string Token::stringifyList(bool varid) const
        -: 1235:{
    #####: 1236:    return stringifyList(varid, false, true, true, true, nullptr, nullptr);
call    0 never executed
        -: 1237:}
        -: 1238:
function _ZN5Token11astOperand1EPS_ called 6531 returned 100% blocks executed 27%
     6531: 1239:void Token::astOperand1(Token *tok)
        -: 1240:{
     6531: 1241:    if (mImpl->mAstOperand1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1242:        mImpl->mAstOperand1->mImpl->mAstParent = nullptr;
        -: 1243:    // goto parent operator
     6531: 1244:    if (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    13062: 1245:        std::set<Token*> visitedParents;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     6531: 1246:        while (tok->mImpl->mAstParent) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1247:            if (!visitedParents.insert(tok->mImpl->mAstParent).second) // #6838/#6726/#8352 avoid hang on garbage code
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1248:                throw InternalError(this, "Internal error. Token::astOperand1() cyclic dependency.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####: 1249:            tok = tok->mImpl->mAstParent;
        -: 1250:        }
     6531: 1251:        tok->mImpl->mAstParent = this;
        -: 1252:    }
     6531: 1253:    mImpl->mAstOperand1 = tok;
     6531: 1254:}
        -: 1255:
function _ZN5Token11astOperand2EPS_ called 4709 returned 100% blocks executed 40%
     4709: 1256:void Token::astOperand2(Token *tok)
        -: 1257:{
     4709: 1258:    if (mImpl->mAstOperand2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1259:        mImpl->mAstOperand2->mImpl->mAstParent = nullptr;
        -: 1260:    // goto parent operator
     4709: 1261:    if (tok) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     9418: 1262:        std::set<Token*> visitedParents;
call    0 returned 100%
call    1 returned 100%
call    2 never executed
     4721: 1263:        while (tok->mImpl->mAstParent) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1264:            //std::cout << tok << " -> " << tok->mAstParent ;
        6: 1265:            if (!visitedParents.insert(tok->mImpl->mAstParent).second) // #6838/#6726 avoid hang on garbage code
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 1266:                throw InternalError(this, "Internal error. Token::astOperand2() cyclic dependency.");
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        6: 1267:            tok = tok->mImpl->mAstParent;
        -: 1268:        }
     4709: 1269:        tok->mImpl->mAstParent = this;
        -: 1270:    }
     4709: 1271:    mImpl->mAstOperand2 = tok;
     4709: 1272:}
        -: 1273:
function _ZL19goToLeftParenthesisPK5TokenS1_ called 5205 returned 100% blocks executed 100%
     5205: 1274:static const Token* goToLeftParenthesis(const Token* start, const Token* end)
        -: 1275:{
        -: 1276:    // move start to lpar in such expression: '(*it).x'
     5205: 1277:    int par = 0;
    16662: 1278:    for (const Token *tok = start; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
call    4 returned 100%
    11457: 1279:        if (tok->str() == "(")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      754: 1280:            ++par;
    10703: 1281:        else if (tok->str() == ")") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
      452: 1282:            if (par == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
      114: 1283:                start = tok->link();
call    0 returned 100%
        -: 1284:            else
      338: 1285:                --par;
        -: 1286:        }
        -: 1287:    }
     5205: 1288:    return start;
        -: 1289:}
        -: 1290:
function _ZL20goToRightParenthesisPK5TokenS1_ called 5205 returned 100% blocks executed 100%
     5205: 1291:static const Token* goToRightParenthesis(const Token* start, const Token* end)
        -: 1292:{
        -: 1293:    // move end to rpar in such expression: '2>(x+1)'
     5205: 1294:    int par = 0;
    16776: 1295:    for (const Token *tok = end; tok && tok != start; tok = tok->previous()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
call    4 returned 100%
    11571: 1296:        if (tok->str() == ")")
call    0 returned 100%
call    1 returned 100%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
      745: 1297:            ++par;
    10826: 1298:        else if (tok->str() == "(") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
      761: 1299:            if (par == 0)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
      123: 1300:                end = tok->link();
call    0 returned 100%
        -: 1301:            else
      638: 1302:                --par;
        -: 1303:        }
        -: 1304:    }
     5205: 1305:    return end;
        -: 1306:}
        -: 1307:
function _ZNK5Token28findExpressionStartEndTokensEv called 5205 returned 100% blocks executed 95%
     5205: 1308:std::pair<const Token *, const Token *> Token::findExpressionStartEndTokens() const
        -: 1309:{
     5205: 1310:    const Token * const top = this;
        -: 1311:
        -: 1312:    // find start node in AST tree
     5205: 1313:    const Token *start = top;
    22329: 1314:    while (start->astOperand1() &&
call    0 returned 100%
branch  1 taken 49% (fallthrough)
branch  2 taken 51%
branch  3 taken 13% (fallthrough)
branch  4 taken 87%
branch  5 taken 45% (fallthrough)
branch  6 taken 55%
     5173: 1315:           (start->astOperand2() || !start->isUnaryPreOp() || Token::simpleMatch(start, "( )") || start->str() == "{"))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
branch  4 taken 87% (fallthrough)
branch  5 taken 13%
call    6 returned 100%
branch  7 taken 73% (fallthrough)
branch  8 taken 27%
call    9 returned 100%
call   10 returned 100%
branch 11 taken 1% (fallthrough)
branch 12 taken 99%
     4185: 1316:        start = start->astOperand1();
call    0 returned 100%
        -: 1317:
        -: 1318:    // find end node in AST tree
     5205: 1319:    const Token *end = top;
    13255: 1320:    while (end->astOperand1() && (end->astOperand2() || end->isUnaryPreOp())) {
call    0 returned 100%
branch  1 taken 48% (fallthrough)
branch  2 taken 52%
call    3 returned 100%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 47% (fallthrough)
branch 12 taken 53%
        -: 1321:        // lambda..
     4364: 1322:        if (end->str() == "[") {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
       46: 1323:            const Token *lambdaEnd = findLambdaEndToken(end);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       46: 1324:            if (lambdaEnd) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1325:                end = lambdaEnd;
    #####: 1326:                break;
        -: 1327:            }
        -: 1328:        }
     5051: 1329:        if (Token::Match(end,"(|[") &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 8% (fallthrough)
branch  4 taken 92%
branch  5 taken 14% (fallthrough)
branch  6 taken 86%
branch  7 taken 8% (fallthrough)
branch  8 taken 92%
      397: 1330:            !(Token::Match(end, "( %type%") && !end->astOperand2())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 82% (fallthrough)
branch  5 taken 18%
      339: 1331:            end = end->link();
call    0 returned 100%
      339: 1332:            break;
        -: 1333:        }
     4025: 1334:        end = end->astOperand2() ? end->astOperand2() : end->astOperand1();
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
call    3 returned 100%
call    4 returned 100%
        -: 1335:    }
        -: 1336:
        -: 1337:    // skip parentheses
     5205: 1338:    start = goToLeftParenthesis(start, end);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     5205: 1339:    end = goToRightParenthesis(start, end);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     5205: 1340:    if (Token::simpleMatch(end, "{"))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1341:        end = end->link();
call    0 never executed
     5205: 1342:    return std::pair<const Token *, const Token *>(start,end);
call    0 returned 100%
        -: 1343:}
        -: 1344:
function _ZNK5Token13isCalculationEv called 41 returned 100% blocks executed 85%
       41: 1345:bool Token::isCalculation() const
        -: 1346:{
       41: 1347:    if (!Token::Match(this, "%cop%|++|--"))
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
       14: 1348:        return false;
        -: 1349:
       27: 1350:    if (Token::Match(this, "*|&")) {
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
        -: 1351:        // dereference or address-of?
        4: 1352:        if (!this->astOperand2())
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        1: 1353:            return false;
        -: 1354:
        3: 1355:        if (this->astOperand2()->str() == "[")
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1356:            return false;
        -: 1357:
        -: 1358:        // type specification?
        6: 1359:        std::stack<const Token *> operands;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        3: 1360:        operands.push(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       15: 1361:        while (!operands.empty()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        9: 1362:            const Token *op = operands.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9: 1363:            operands.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9: 1364:            if (op->isNumber() || op->varId() > 0)
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        3: 1365:                return true;
        6: 1366:            if (op->astOperand1())
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
        5: 1367:                operands.push(op->astOperand1());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        6: 1368:            if (op->astOperand2())
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
        5: 1369:                operands.push(op->astOperand2());
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        1: 1370:            else if (Token::Match(op, "*|&"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1371:                return false;
        -: 1372:        }
        -: 1373:
        -: 1374:        // type specification => return false
    #####: 1375:        return false;
        -: 1376:    }
        -: 1377:
       23: 1378:    return true;
        -: 1379:}
        -: 1380:
function _ZNK5Token12isUnaryPreOpEv called 1198 returned 100% blocks executed 86%
     1198: 1381:bool Token::isUnaryPreOp() const
        -: 1382:{
     1198: 1383:    if (!astOperand1() || astOperand2())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####: 1384:        return false;
     1198: 1385:    if (!Token::Match(this, "++|--"))
call    0 returned 100%
branch  1 taken 84% (fallthrough)
branch  2 taken 16%
     1005: 1386:        return true;
      193: 1387:    const Token *tokbefore = mPrevious;
      193: 1388:    const Token *tokafter = mNext;
      217: 1389:    for (int distance = 1; distance < 10 && tokbefore; distance++) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      217: 1390:        if (tokbefore == mImpl->mAstOperand1)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
      139: 1391:            return false;
       78: 1392:        if (tokafter == mImpl->mAstOperand1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
       54: 1393:            return true;
       24: 1394:        tokbefore = tokbefore->mPrevious;
       24: 1395:        tokafter  = tokafter->mPrevious;
        -: 1396:    }
    #####: 1397:    return false; // <- guess
        -: 1398:}
        -: 1399:
function _ZL20stringFromTokenRangePK5TokenS1_ called 4672 returned 100% blocks executed 77%
     4672: 1400:static std::string stringFromTokenRange(const Token* start, const Token* end)
        -: 1401:{
     9344: 1402:    std::ostringstream ret;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     4672: 1403:    if (end)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4672: 1404:        end = end->next();
call    0 returned 100%
    19884: 1405:    for (const Token *tok = start; tok && tok != end; tok = tok->next()) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 77% (fallthrough)
branch  3 taken 23%
call    4 returned 100%
    15212: 1406:        if (tok->isUnsigned())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1407:            ret << "unsigned ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    15212: 1408:        if (tok->isLong() && !tok->isLiteral())
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1409:            ret << "long ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    15212: 1410:        if (tok->originalName().empty() || tok->isUnsigned() || tok->isLong()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
branch 14 taken 99% (fallthrough)
branch 15 taken 1%
    15154: 1411:            ret << tok->str();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 1412:        } else
       58: 1413:            ret << tok->originalName();
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
    15212: 1414:        if (Token::Match(tok, "%name%|%num% %name%|%num%"))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####: 1415:            ret << ' ';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1416:    }
     9344: 1417:    return ret.str();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1418:}
        -: 1419:
function _ZNK5Token16expressionStringB5cxx11Ev called 4672 returned 100% blocks executed 100%
     4672: 1420:std::string Token::expressionString() const
        -: 1421:{
     4672: 1422:    const auto tokens = findExpressionStartEndTokens();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
     4672: 1423:    return stringFromTokenRange(tokens.first, tokens.second);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1424:}
        -: 1425:
function _ZL12astStringXmlPK5TokeniRSo called 0 returned 0% blocks executed 0%
    #####: 1426:static void astStringXml(const Token *tok, nonneg int indent, std::ostream &out)
        -: 1427:{
    #####: 1428:    const std::string strindent(indent, ' ');
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -: 1429:
    #####: 1430:    out << strindent << "<token str=\"" << tok->str() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1431:    if (tok->varId() > 0U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1432:        out << " varId=\"" << MathLib::toString(tok->varId()) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
    #####: 1433:    if (tok->variable())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1434:        out << " variable=\"" << tok->variable() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1435:    if (tok->function())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1436:        out << " function=\"" << tok->function() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1437:    if (!tok->values().empty())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1438:        out << " values=\"" << &tok->values() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 1439:
    #####: 1440:    if (!tok->astOperand1() && !tok->astOperand2()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1441:        out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1442:    }
        -: 1443:
        -: 1444:    else {
    #####: 1445:        out << '>' << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1446:        if (tok->astOperand1())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1447:            astStringXml(tok->astOperand1(), indent+2U, out);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1448:        if (tok->astOperand2())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1449:            astStringXml(tok->astOperand2(), indent+2U, out);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1450:        out << strindent << "</token>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1451:    }
    #####: 1452:}
call    0 never executed
        -: 1453:
function _ZNK5Token8printAstEbbRSo called 0 returned 0% blocks executed 0%
    #####: 1454:void Token::printAst(bool verbose, bool xml, std::ostream &out) const
        -: 1455:{
    #####: 1456:    std::set<const Token *> printed;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1457:    for (const Token *tok = this; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1458:        if (!tok->mImpl->mAstParent && tok->mImpl->mAstOperand1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1459:            if (printed.empty() && !xml)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1460:                out << "\n\n##AST" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1461:            else if (printed.find(tok) != printed.end())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####: 1462:                continue;
    #####: 1463:            printed.insert(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -: 1464:
    #####: 1465:            if (xml) {
branch  0 never executed
branch  1 never executed
    #####: 1466:                out << "<ast scope=\"" << tok->scope() << "\" fileIndex=\"" << tok->fileIndex() << "\" linenr=\"" << tok->linenr()
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1467:                    << "\" column=\"" << tok->column() << "\">" << std::endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    #####: 1468:                astStringXml(tok, 2U, out);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1469:                out << "</ast>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1470:            } else if (verbose)
branch  0 never executed
branch  1 never executed
    #####: 1471:                out << tok->astStringVerbose() << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
        -: 1472:            else
    #####: 1473:                out << tok->astString(" ") << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####: 1474:            if (tok->str() == "(")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1475:                tok = tok->link();
call    0 never executed
        -: 1476:        }
        -: 1477:    }
    #####: 1478:}
        -: 1479:
function _ZL6indentRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii called 0 returned 0% blocks executed 0%
    #####: 1480:static void indent(std::string &str, const nonneg int indent1, const nonneg int indent2)
        -: 1481:{
    #####: 1482:    for (int i = 0; i < indent1; ++i)
branch  0 never executed
branch  1 never executed
    #####: 1483:        str += ' ';
call    0 never executed
    #####: 1484:    for (int i = indent1; i < indent2; i += 2)
branch  0 never executed
branch  1 never executed
    #####: 1485:        str += "| ";
call    0 never executed
    #####: 1486:}
        -: 1487:
function _ZNK5Token25astStringVerboseRecursiveERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii called 0 returned 0% blocks executed 0%
    #####: 1488:void Token::astStringVerboseRecursive(std::string& ret, const nonneg int indent1, const nonneg int indent2) const
        -: 1489:{
    #####: 1490:    if (isExpandedMacro())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1491:        ret += '$';
call    0 never executed
    #####: 1492:    ret += mStr;
call    0 never executed
    #####: 1493:    if (mImpl->mValueType)
branch  0 never executed
branch  1 never executed
    #####: 1494:        ret += " \'" + mImpl->mValueType->str() + '\'';
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####: 1495:    ret += '\n';
call    0 never executed
        -: 1496:
    #####: 1497:    if (mImpl->mAstOperand1) {
branch  0 never executed
branch  1 never executed
    #####: 1498:        int i1 = indent1, i2 = indent2 + 2;
    #####: 1499:        if (indent1 == indent2 && !mImpl->mAstOperand2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1500:            i1 += 2;
    #####: 1501:        indent(ret, indent1, indent2);
call    0 never executed
    #####: 1502:        ret += mImpl->mAstOperand2 ? "|-" : "`-";
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1503:        mImpl->mAstOperand1->astStringVerboseRecursive(ret, i1, i2);
call    0 never executed
        -: 1504:    }
    #####: 1505:    if (mImpl->mAstOperand2) {
branch  0 never executed
branch  1 never executed
    #####: 1506:        int i1 = indent1, i2 = indent2 + 2;
    #####: 1507:        if (indent1 == indent2)
branch  0 never executed
branch  1 never executed
    #####: 1508:            i1 += 2;
    #####: 1509:        indent(ret, indent1, indent2);
call    0 never executed
    #####: 1510:        ret += "`-";
call    0 never executed
    #####: 1511:        mImpl->mAstOperand2->astStringVerboseRecursive(ret, i1, i2);
call    0 never executed
        -: 1512:    }
    #####: 1513:}
        -: 1514:
function _ZNK5Token16astStringVerboseB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1515:std::string Token::astStringVerbose() const
        -: 1516:{
    #####: 1517:    std::string ret;
call    0 never executed
    #####: 1518:    astStringVerboseRecursive(ret);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1519:    return ret;
call    0 never executed
        -: 1520:}
        -: 1521:
        -: 1522:
function _ZNK5Token14printValueFlowEbRSo called 0 returned 0% blocks executed 0%
    #####: 1523:void Token::printValueFlow(bool xml, std::ostream &out) const
        -: 1524:{
    #####: 1525:    int line = 0;
    #####: 1526:    if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1527:        out << "  <valueflow>" << std::endl;
call    0 never executed
call    1 never executed
        -: 1528:    else
    #####: 1529:        out << "\n\n##Value flow" << std::endl;
call    0 never executed
call    1 never executed
    #####: 1530:    for (const Token *tok = this; tok; tok = tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1531:        if (!tok->mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1532:            continue;
    #####: 1533:        if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1534:            out << "    <values id=\"" << tok->mImpl->mValues << "\">" << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1535:        else if (line != tok->linenr())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1536:            out << "Line " << tok->linenr() << std::endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1537:        line = tok->linenr();
call    0 never executed
    #####: 1538:        if (!xml) {
branch  0 never executed
branch  1 never executed
    #####: 1539:            out << "  " << tok->str() << (tok->mImpl->mValues->front().isKnown() ? " always " : " possible ");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    #####: 1540:            if (tok->mImpl->mValues->size() > 1U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1541:                out << '{';
call    0 never executed
        -: 1542:        }
    #####: 1543:        for (const ValueFlow::Value &value : *tok->mImpl->mValues) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####: 1544:            if (xml) {
branch  0 never executed
branch  1 never executed
    #####: 1545:                out << "      <value ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1546:                switch (value.valueType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1547:                case ValueFlow::Value::INT:
    #####: 1548:                    if (tok->valueType() && tok->valueType()->sign == ValueType::UNSIGNED)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1549:                        out << "intvalue=\"" << (MathLib::biguint)value.intvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1550:                    else
    #####: 1551:                        out << "intvalue=\"" << value.intvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1552:                    break;
    #####: 1553:                case ValueFlow::Value::TOK:
    #####: 1554:                    out << "tokvalue=\"" << value.tokvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1555:                    break;
    #####: 1556:                case ValueFlow::Value::FLOAT:
    #####: 1557:                    out << "floatvalue=\"" << value.floatValue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1558:                    break;
    #####: 1559:                case ValueFlow::Value::MOVED:
    #####: 1560:                    out << "movedvalue=\"" << ValueFlow::Value::toString(value.moveKind) << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1561:                    break;
    #####: 1562:                case ValueFlow::Value::UNINIT:
    #####: 1563:                    out << "uninit=\"1\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1564:                    break;
    #####: 1565:                case ValueFlow::Value::BUFFER_SIZE:
    #####: 1566:                    out << "buffer-size=\"" << value.intvalue << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1567:                    break;
    #####: 1568:                case ValueFlow::Value::CONTAINER_SIZE:
    #####: 1569:                    out << "container-size=\"" << value.intvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1570:                    break;
    #####: 1571:                case ValueFlow::Value::LIFETIME:
    #####: 1572:                    out << "lifetime=\"" << value.tokvalue << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1573:                    break;
        -: 1574:                }
    #####: 1575:                if (value.condition)
branch  0 never executed
branch  1 never executed
    #####: 1576:                    out << " condition-line=\"" << value.condition->linenr() << '\"';
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1577:                if (value.isKnown())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1578:                    out << " known=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1579:                else if (value.isPossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1580:                    out << " possible=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1581:                else if (value.isImpossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1582:                    out << " impossible=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1583:                else if (value.isInconclusive())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1584:                    out << " inconclusive=\"true\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1585:                out << "/>" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1586:            }
        -: 1587:
        -: 1588:            else {
    #####: 1589:                if (&value != &tok->mImpl->mValues->front())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1590:                    out << ",";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1591:                if (value.isImpossible())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1592:                    out << "!";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1593:                if (value.bound == ValueFlow::Value::Bound::Lower)
branch  0 never executed
branch  1 never executed
    #####: 1594:                    out << ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1595:                if (value.bound == ValueFlow::Value::Bound::Upper)
branch  0 never executed
branch  1 never executed
    #####: 1596:                    out << "<";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1597:                switch (value.valueType) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1598:                case ValueFlow::Value::INT:
    #####: 1599:                    if (tok->valueType() && tok->valueType()->sign == ValueType::UNSIGNED)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1600:                        out << (MathLib::biguint)value.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1601:                    else
    #####: 1602:                        out << value.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1603:                    break;
    #####: 1604:                case ValueFlow::Value::TOK:
    #####: 1605:                    out << value.tokvalue->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1606:                    break;
    #####: 1607:                case ValueFlow::Value::FLOAT:
    #####: 1608:                    out << value.floatValue;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1609:                    break;
    #####: 1610:                case ValueFlow::Value::MOVED:
    #####: 1611:                    out << ValueFlow::Value::toString(value.moveKind);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1612:                    break;
    #####: 1613:                case ValueFlow::Value::UNINIT:
    #####: 1614:                    out << "Uninit";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1615:                    break;
    #####: 1616:                case ValueFlow::Value::BUFFER_SIZE:
        -: 1617:                case ValueFlow::Value::CONTAINER_SIZE:
    #####: 1618:                    out << "size=" << value.intvalue;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1619:                    break;
    #####: 1620:                case ValueFlow::Value::LIFETIME:
    #####: 1621:                    out << "lifetime=" << value.tokvalue->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1622:                    break;
        -: 1623:                }
    #####: 1624:                if (value.indirect > 0)
branch  0 never executed
branch  1 never executed
    #####: 1625:                    for (int i=0; i<value.indirect; i++)
branch  0 never executed
branch  1 never executed
    #####: 1626:                        out << "*";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1627:            }
        -: 1628:        }
    #####: 1629:        if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1630:            out << "    </values>" << std::endl;
call    0 never executed
call    1 never executed
    #####: 1631:        else if (tok->mImpl->mValues->size() > 1U)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1632:            out << '}' << std::endl;
call    0 never executed
call    1 never executed
        -: 1633:        else
    #####: 1634:            out << std::endl;
call    0 never executed
        -: 1635:    }
    #####: 1636:    if (xml)
branch  0 never executed
branch  1 never executed
    #####: 1637:        out << "  </valueflow>" << std::endl;
call    0 never executed
call    1 never executed
    #####: 1638:}
        -: 1639:
function _ZNK5Token10getValueLEExPK8Settings called 21 returned 100% blocks executed 75%
       21: 1640:const ValueFlow::Value * Token::getValueLE(const MathLib::bigint val, const Settings *settings) const
        -: 1641:{
       21: 1642:    if (!mImpl->mValues)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        2: 1643:        return nullptr;
       19: 1644:    const ValueFlow::Value *ret = nullptr;
       38: 1645:    std::list<ValueFlow::Value>::const_iterator it;
call    0 returned 100%
call    1 returned 100%
       30: 1646:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 70% (fallthrough)
branch  9 taken 30%
call   10 returned 100%
       21: 1647:        if (it->isImpossible())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1648:            continue;
       21: 1649:        if (it->isIntValue() && it->intvalue <= val) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
branch  5 taken 48% (fallthrough)
branch  6 taken 52%
branch  7 taken 48% (fallthrough)
branch  8 taken 52%
       10: 1650:            if (!ret || ret->isInconclusive() || (ret->condition && !it->isInconclusive()))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
       10: 1651:                ret = &(*it);
call    0 returned 100%
       10: 1652:            if (!ret->isInconclusive() && !ret->condition)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
       10: 1653:                break;
        -: 1654:        }
        -: 1655:    }
       19: 1656:    if (settings && ret) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
       10: 1657:        if (ret->isInconclusive() && !settings->inconclusive)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1658:            return nullptr;
       10: 1659:        if (ret->condition && !settings->isEnabled(Settings::WARNING))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
    #####: 1660:            return nullptr;
        -: 1661:    }
       19: 1662:    return ret;
        -: 1663:}
        -: 1664:
function _ZNK5Token10getValueGEExPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1665:const ValueFlow::Value * Token::getValueGE(const MathLib::bigint val, const Settings *settings) const
        -: 1666:{
    #####: 1667:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1668:        return nullptr;
    #####: 1669:    const ValueFlow::Value *ret = nullptr;
    #####: 1670:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
    #####: 1671:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1672:        if (it->isImpossible())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1673:            continue;
    #####: 1674:        if (it->isIntValue() && it->intvalue >= val) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1675:            if (!ret || ret->isInconclusive() || (ret->condition && !it->isInconclusive()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1676:                ret = &(*it);
call    0 never executed
    #####: 1677:            if (!ret->isInconclusive() && !ret->condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1678:                break;
        -: 1679:        }
        -: 1680:    }
    #####: 1681:    if (settings && ret) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1682:        if (ret->isInconclusive() && !settings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1683:            return nullptr;
    #####: 1684:        if (ret->condition && !settings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1685:            return nullptr;
        -: 1686:    }
    #####: 1687:    return ret;
        -: 1688:}
        -: 1689:
function _ZNK5Token15getInvalidValueEPKS_iPK8Settings called 0 returned 0% blocks executed 0%
    #####: 1690:const ValueFlow::Value * Token::getInvalidValue(const Token *ftok, nonneg int argnr, const Settings *settings) const
        -: 1691:{
    #####: 1692:    if (!mImpl->mValues || !settings)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1693:        return nullptr;
    #####: 1694:    const ValueFlow::Value *ret = nullptr;
    #####: 1695:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1696:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1697:        if (it->isImpossible())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1698:            continue;
    #####: 1699:        if ((it->isIntValue() && !settings->library.isIntArgValid(ftok, argnr, it->intvalue)) ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1700:            (it->isFloatValue() && !settings->library.isFloatArgValid(ftok, argnr, it->floatValue))) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1701:            if (!ret || ret->isInconclusive() || (ret->condition && !it->isInconclusive()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1702:                ret = &(*it);
call    0 never executed
    #####: 1703:            if (!ret->isInconclusive() && !ret->condition)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1704:                break;
        -: 1705:        }
        -: 1706:    }
    #####: 1707:    if (ret) {
branch  0 never executed
branch  1 never executed
    #####: 1708:        if (ret->isInconclusive() && !settings->inconclusive)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1709:            return nullptr;
    #####: 1710:        if (ret->condition && !settings->isEnabled(Settings::WARNING))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1711:            return nullptr;
        -: 1712:    }
    #####: 1713:    return ret;
        -: 1714:}
        -: 1715:
function _ZNK5Token23getValueTokenMinStrSizeEv called 0 returned 0% blocks executed 0%
    #####: 1716:const Token *Token::getValueTokenMinStrSize() const
        -: 1717:{
    #####: 1718:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1719:        return nullptr;
    #####: 1720:    const Token *ret = nullptr;
    #####: 1721:    int minsize = INT_MAX;
    #####: 1722:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1723:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1724:        if (it->isTokValue() && it->tokvalue && it->tokvalue->tokType() == Token::eString) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1725:            const int size = getStrSize(it->tokvalue);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1726:            if (!ret || size < minsize) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1727:                minsize = size;
    #####: 1728:                ret = it->tokvalue;
call    0 never executed
        -: 1729:            }
        -: 1730:        }
        -: 1731:    }
    #####: 1732:    return ret;
        -: 1733:}
        -: 1734:
function _ZNK5Token25getValueTokenMaxStrLengthEv called 0 returned 0% blocks executed 0%
    #####: 1735:const Token *Token::getValueTokenMaxStrLength() const
        -: 1736:{
    #####: 1737:    if (!mImpl->mValues)
branch  0 never executed
branch  1 never executed
    #####: 1738:        return nullptr;
    #####: 1739:    const Token *ret = nullptr;
    #####: 1740:    int maxlength = 0;
    #####: 1741:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1742:    for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    #####: 1743:        if (it->isTokValue() && it->tokvalue && it->tokvalue->tokType() == Token::eString) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####: 1744:            const int length = getStrLength(it->tokvalue);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1745:            if (!ret || length > maxlength) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1746:                maxlength = length;
    #####: 1747:                ret = it->tokvalue;
call    0 never executed
        -: 1748:            }
        -: 1749:        }
        -: 1750:    }
    #####: 1751:    return ret;
        -: 1752:}
        -: 1753:
function _ZL16getfunctionscopePK5Scope called 0 returned 0% blocks executed 0%
    #####: 1754:static const Scope *getfunctionscope(const Scope *s)
        -: 1755:{
    #####: 1756:    while (s && s->type != Scope::eFunction)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1757:        s = s->nestedIn;
    #####: 1758:    return s;
        -: 1759:}
        -: 1760:
function _ZNK5Token24getValueTokenDeadPointerEv called 0 returned 0% blocks executed 0%
    #####: 1761:const Token *Token::getValueTokenDeadPointer() const
        -: 1762:{
    #####: 1763:    const Scope * const functionscope = getfunctionscope(this->scope());
call    0 never executed
call    1 never executed
        -: 1764:
    #####: 1765:    std::list<ValueFlow::Value>::const_iterator it;
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1766:    for (it = values().begin(); it != values().end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -: 1767:        // Is this a pointer alias?
    #####: 1768:        if (!it->isTokValue() || (it->tokvalue && it->tokvalue->str() != "&"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####: 1769:            continue;
        -: 1770:        // Get variable
    #####: 1771:        const Token *vartok = it->tokvalue->astOperand1();
call    0 never executed
call    1 never executed
    #####: 1772:        if (!vartok || !vartok->isName() || !vartok->variable())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1773:            continue;
    #####: 1774:        const Variable * const var = vartok->variable();
call    0 never executed
    #####: 1775:        if (var->isStatic() || var->isReference())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1776:            continue;
    #####: 1777:        if (!var->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1778:            return nullptr; // #6804
    #####: 1779:        if (var->scope()->type == Scope::eUnion && var->scope()->nestedIn == this->scope())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1780:            continue;
        -: 1781:        // variable must be in same function (not in subfunction)
    #####: 1782:        if (functionscope != getfunctionscope(var->scope()))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1783:            continue;
        -: 1784:        // Is variable defined in this scope or upper scope?
    #####: 1785:        const Scope *s = this->scope();
call    0 never executed
    #####: 1786:        while ((s != nullptr) && (s != var->scope()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1787:            s = s->nestedIn;
    #####: 1788:        if (!s)
branch  0 never executed
branch  1 never executed
    #####: 1789:            return it->tokvalue;
call    0 never executed
        -: 1790:    }
    #####: 1791:    return nullptr;
        -: 1792:}
        -: 1793:
function _ZL19removeContradictionRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 2623 returned 100% blocks executed 64%
     2623: 1794:static bool removeContradiction(std::list<ValueFlow::Value>& values)
        -: 1795:{
     2623: 1796:    bool result = false;
     5374: 1797:    for (ValueFlow::Value& x : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 51% (fallthrough)
branch  4 taken 49%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
     2751: 1798:        if (x.isNonValue())
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
      338: 1799:            continue;
     5036: 1800:        for (ValueFlow::Value& y : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 52% (fallthrough)
branch  4 taken 48%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 100%
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100%
branch 12 taken 0%
call   13 never executed
call   14 never executed
     2623: 1801:            if (y.isNonValue())
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
       54: 1802:                continue;
     2569: 1803:            if (x == y)
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
     2415: 1804:                continue;
      154: 1805:            if (x.valueType != y.valueType)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        4: 1806:                continue;
      150: 1807:            if (x.isImpossible() == y.isImpossible())
call    0 returned 100%
call    1 returned 100%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
       86: 1808:                continue;
       64: 1809:            if (!x.equalValue(y))
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
       62: 1810:                continue;
        4: 1811:            if (x.bound == y.bound ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        2: 1812:                (x.bound != ValueFlow::Value::Bound::Point && y.bound != ValueFlow::Value::Bound::Point)) {
branch  0 never executed
branch  1 never executed
    #####: 1813:                const bool removex = !x.isImpossible() || y.isKnown();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1814:                const bool removey = !y.isImpossible() || x.isKnown();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1815:                if (removex)
branch  0 never executed
branch  1 never executed
    #####: 1816:                    values.remove(x);
call    0 never executed
    #####: 1817:                if (removey)
branch  0 never executed
branch  1 never executed
    #####: 1818:                    values.remove(y);
call    0 never executed
    #####: 1819:                return true;
        2: 1820:            } else if (x.bound == ValueFlow::Value::Bound::Point) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1821:                y.decreaseRange();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1822:                result = true;
        -: 1823:            }
        -: 1824:        }
        -: 1825:    }
     2623: 1826:    return result;
        -: 1827:}
        -: 1828:
function _ZL14removeOverlapsRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 2 returned 100% blocks executed 92%
        2: 1829:static void removeOverlaps(std::list<ValueFlow::Value>& values)
        -: 1830:{
        8: 1831:    for (ValueFlow::Value& x : values) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
        6: 1832:        if (x.isNonValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1833:            continue;
function _ZZL14removeOverlapsRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEEENKUlRS2_E_clES6_ called 21 returned 100% blocks executed 81%
       27: 1834:        values.remove_if([&](ValueFlow::Value& y) {
call    0 returned 100%
       21: 1835:            if (y.isNonValue())
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1836:                return false;
       57: 1837:            if (&x == &y)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        6: 1838:                return false;
       15: 1839:            if (x.valueType != y.valueType)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1840:                return false;
       15: 1841:            if (x.valueKind != y.valueKind)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       10: 1842:                return false;
        -: 1843:            // TODO: Remove points coverd in a lower or upper bound
        -: 1844:            // TODO: Remove lower or upper bound already covered by a lower and upper bound
        5: 1845:            if (!x.equalValue(y))
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
        4: 1846:                return false;
        1: 1847:            if (x.bound != y.bound)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1848:                return false;
        1: 1849:            return true;
        -: 1850:        });
        -: 1851:    }
        2: 1852:}
        -: 1853:
        -: 1854:// Removing contradictions is an NP-hard problem. Instead we run multiple
        -: 1855:// passes to try to catch most contradictions
function _ZL20removeContradictionsRNSt7__debug4listIN9ValueFlow5ValueESaIS2_EEE called 2621 returned 100% blocks executed 100%
     2621: 1856:static void removeContradictions(std::list<ValueFlow::Value>& values)
        -: 1857:{
     2623: 1858:    for (int i = 0; i < 4; i++) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2623: 1859:        if (!removeContradiction(values))
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
     2621: 1860:            return;
        2: 1861:        removeOverlaps(values);
call    0 returned 100%
        -: 1862:    }
        -: 1863:}
        -: 1864:
function _ZN5Token8addValueERKN9ValueFlow5ValueE called 3010 returned 100% blocks executed 71%
     3010: 1865:bool Token::addValue(const ValueFlow::Value &value)
        -: 1866:{
     3010: 1867:    if (value.isKnown() && mImpl->mValues) {
call    0 returned 100%
branch  1 taken 68% (fallthrough)
branch  2 taken 32%
branch  3 taken 13% (fallthrough)
branch  4 taken 87%
branch  5 taken 9% (fallthrough)
branch  6 taken 91%
        -: 1868:        // Clear all other values of the same type since value is known
function _ZZN5Token8addValueERKN9ValueFlow5ValueEENKUlS3_E_clES3_ called 290 returned 100% blocks executed 100%
      565: 1869:        mImpl->mValues->remove_if([&](const ValueFlow::Value & x) {
call    0 returned 100%
      290: 1870:            return x.valueType == value.valueType;
      290: 1871:        });
        -: 1872:    }
        -: 1873:
     3010: 1874:    if (mImpl->mValues) {
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -: 1875:        // Don't handle more than 10 values for performance reasons
        -: 1876:        // TODO: add setting?
      769: 1877:        if (mImpl->mValues->size() >= 10U)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
      389: 1878:            return false;
        -: 1879:
        -: 1880:        // if value already exists, don't add it again
     1149: 1881:        std::list<ValueFlow::Value>::iterator it;
call    0 returned 100%
call    1 never executed
call    2 never executed
      975: 1882:        for (it = mImpl->mValues->begin(); it != mImpl->mValues->end(); ++it) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 61% (fallthrough)
branch  7 taken 39%
call    8 returned 100%
        -: 1883:            // different types => continue
      595: 1884:            if (it->valueType != value.valueType)
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
       84: 1885:                continue;
        -: 1886:
      511: 1887:            if (it->isImpossible() != value.isImpossible())
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 10% (fallthrough)
branch  4 taken 90%
       49: 1888:                continue;
        -: 1889:
        -: 1890:            // different value => continue
      462: 1891:            bool differentValue = true;
      462: 1892:            switch (it->valueType) {
call    0 returned 100%
branch  1 taken 81%
branch  2 taken 15%
branch  3 taken 0%
branch  4 taken 4%
branch  5 taken 1%
branch  6 taken 0%
      372: 1893:            case ValueFlow::Value::ValueType::INT:
        -: 1894:            case ValueFlow::Value::ValueType::CONTAINER_SIZE:
        -: 1895:            case ValueFlow::Value::ValueType::BUFFER_SIZE:
      372: 1896:                differentValue = (it->intvalue != value.intvalue);
call    0 returned 100%
      372: 1897:                break;
       69: 1898:            case ValueFlow::Value::ValueType::TOK:
        -: 1899:            case ValueFlow::Value::ValueType::LIFETIME:
       69: 1900:                differentValue = (it->tokvalue != value.tokvalue);
call    0 returned 100%
       69: 1901:                break;
    #####: 1902:            case ValueFlow::Value::ValueType::FLOAT:
        -: 1903:                // TODO: Write some better comparison
    #####: 1904:                differentValue = (it->floatValue > value.floatValue || it->floatValue < value.floatValue);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1905:                break;
       18: 1906:            case ValueFlow::Value::ValueType::MOVED:
       18: 1907:                differentValue = (it->moveKind != value.moveKind);
call    0 returned 100%
       18: 1908:                break;
        3: 1909:            case ValueFlow::Value::ValueType::UNINIT:
        3: 1910:                differentValue = false;
        3: 1911:                break;
        -: 1912:            }
      462: 1913:            if (differentValue)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       73: 1914:                continue;
        -: 1915:
      389: 1916:            if ((value.isTokValue() || value.isLifetimeValue()) && (it->tokvalue != value.tokvalue) && (it->tokvalue->str() != value.tokvalue->str()))
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
call    3 returned 100%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
call    6 returned 100%
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
    #####: 1917:                continue;
        -: 1918:
        -: 1919:            // same value, but old value is inconclusive so replace it
      389: 1920:            if (it->isInconclusive() && !value.isInconclusive() && !value.isImpossible()) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
call    4 returned 100%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
    #####: 1921:                *it = value;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1922:                if (it->varId == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1923:                    it->varId = mImpl->mVarId;
call    0 never executed
    #####: 1924:                break;
        -: 1925:            }
        -: 1926:
        -: 1927:            // Same value already exists, don't  add new value
      389: 1928:            return false;
        -: 1929:        }
        -: 1930:
        -: 1931:        // Add value
      380: 1932:        if (it == mImpl->mValues->end()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
      760: 1933:            ValueFlow::Value v(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
branch  5 taken 49%
branch  6 taken 51%
call    7 never executed
      380: 1934:            if (v.varId == 0)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      327: 1935:                v.varId = mImpl->mVarId;
      380: 1936:            if (v.isKnown() && v.isIntValue())
call    0 returned 100%
branch  1 taken 72% (fallthrough)
branch  2 taken 28%
call    3 returned 100%
branch  4 taken 67% (fallthrough)
branch  5 taken 33%
branch  6 taken 48% (fallthrough)
branch  7 taken 52%
      184: 1937:                mImpl->mValues->push_front(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1938:            else
      196: 1939:                mImpl->mValues->push_back(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1940:        }
        -: 1941:    } else {
     4482: 1942:        ValueFlow::Value v(value);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
     2241: 1943:        if (v.varId == 0)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     2025: 1944:            v.varId = mImpl->mVarId;
     2241: 1945:        mImpl->mValues = new std::list<ValueFlow::Value>(1, v);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
call    9 never executed
        -: 1946:    }
        -: 1947:
     2621: 1948:    removeContradictions(*mImpl->mValues);
call    0 returned 100%
        -: 1949:
     2621: 1950:    return true;
        -: 1951:}
        -: 1952:
function _ZN5Token20assignProgressValuesEPS_ called 2098 returned 100% blocks executed 100%
     2098: 1953:void Token::assignProgressValues(Token *tok)
        -: 1954:{
     2098: 1955:    int total_count = 0;
    59796: 1956:    for (Token *tok2 = tok; tok2; tok2 = tok2->next())
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
    57698: 1957:        ++total_count;
     2098: 1958:    int count = 0;
    59796: 1959:    for (Token *tok2 = tok; tok2; tok2 = tok2->next())
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
call    2 returned 100%
    57698: 1960:        tok2->mImpl->mProgressValue = count++ * 100 / total_count;
     2098: 1961:}
        -: 1962:
function _ZN5Token13assignIndexesEv called 956 returned 100% blocks executed 86%
      956: 1963:void Token::assignIndexes()
        -: 1964:{
      956: 1965:    int index = (mPrevious ? mPrevious->mImpl->mIndex : 0) + 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    29888: 1966:    for (Token *tok = this; tok; tok = tok->next())
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
call    2 returned 100%
    28932: 1967:        tok->mImpl->mIndex = index++;
      956: 1968:}
        -: 1969:
function _ZN5Token12setValueTypeEP9ValueType called 102884 returned 100% blocks executed 100%
   102884: 1970:void Token::setValueType(ValueType *vt)
        -: 1971:{
   102884: 1972:    if (vt != mImpl->mValueType) {
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
    32164: 1973:        delete mImpl->mValueType;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
call    2 returned 100%
call    3 returned 100%
    32164: 1974:        mImpl->mValueType = vt;
        -: 1975:    }
   102884: 1976:}
        -: 1977:
function _ZN5Token4typeEPK4Type called 30207 returned 100% blocks executed 100%
    30207: 1978:void Token::type(const ::Type *t)
        -: 1979:{
    30207: 1980:    mImpl->mType = t;
    30207: 1981:    if (t) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      421: 1982:        tokType(eType);
call    0 returned 100%
      421: 1983:        isEnumType(mImpl->mType->isEnumType());
call    0 returned 100%
call    1 returned 100%
    29786: 1984:    } else if (mTokType == eType)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
     2931: 1985:        tokType(eName);
call    0 returned 100%
    30207: 1986:}
        -: 1987:
function _ZN5Token6typeOfEPKS_ called 451 returned 100% blocks executed 85%
      451: 1988:const ::Type *Token::typeOf(const Token *tok)
        -: 1989:{
      451: 1990:    if (Token::simpleMatch(tok, "return")) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
       21: 1991:        const Scope *scope = tok->scope();
call    0 returned 100%
       21: 1992:        if (!scope)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1993:            return nullptr;
       21: 1994:        const Function *function = scope->function;
       21: 1995:        if (!function)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1996:            return nullptr;
       21: 1997:        return function->retType;
      430: 1998:    } else if (Token::Match(tok, "%type%")) {
call    0 returned 100%
branch  1 taken 21% (fallthrough)
branch  2 taken 79%
       92: 1999:        return tok->type();
call    0 returned 100%
      338: 2000:    } else if (Token::Match(tok, "%var%")) {
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
      112: 2001:        const Variable *var = tok->variable();
call    0 returned 100%
      112: 2002:        if (!var)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        3: 2003:            return nullptr;
      109: 2004:        return var->type();
call    0 returned 100%
      226: 2005:    } else if (Token::Match(tok, "%name%")) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 2006:        const Function *function = tok->function();
call    0 never executed
    #####: 2007:        if (!function)
branch  0 never executed
branch  1 never executed
    #####: 2008:            return nullptr;
    #####: 2009:        return function->retType;
      226: 2010:    } else if (Token::simpleMatch(tok, "=")) {
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
       93: 2011:        return Token::typeOf(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
      133: 2012:    } else if (Token::simpleMatch(tok, ".")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        2: 2013:        return Token::typeOf(tok->astOperand2());
call    0 returned 100%
call    1 returned 100%
      131: 2014:    } else if (Token::simpleMatch(tok, "[")) {
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        2: 2015:        return Token::typeOf(tok->astOperand1());
call    0 returned 100%
call    1 returned 100%
        -: 2016:    }
      129: 2017:    return nullptr;
        -: 2018:}
        -: 2019:
function _ZN5Token8typeDeclEPKS_ called 0 returned 0% blocks executed 0%
    #####: 2020:std::pair<const Token*, const Token*> Token::typeDecl(const Token * tok)
        -: 2021:{
    #####: 2022:    if (Token::simpleMatch(tok, "return")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2023:        const Scope *scope = tok->scope();
call    0 never executed
    #####: 2024:        if (!scope)
branch  0 never executed
branch  1 never executed
    #####: 2025:            return {};
call    0 never executed
    #####: 2026:        const Function *function = scope->function;
    #####: 2027:        if (!function)
branch  0 never executed
branch  1 never executed
    #####: 2028:            return {};
call    0 never executed
    #####: 2029:        return {function->retDef, function->returnDefEnd()};
call    0 never executed
call    1 never executed
    #####: 2030:    } else if (Token::Match(tok, "%type%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2031:        return {tok, tok->next()};
call    0 never executed
call    1 never executed
    #####: 2032:    } else if (Token::Match(tok, "%var%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2033:        const Variable *var = tok->variable();
call    0 never executed
    #####: 2034:        if (!var)
branch  0 never executed
branch  1 never executed
    #####: 2035:            return {};
call    0 never executed
    #####: 2036:        if (!var->typeStartToken() || !var->typeEndToken())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####: 2037:            return {};
call    0 never executed
    #####: 2038:        return {var->typeStartToken(), var->typeEndToken()->next()};
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 2039:    } else if (Token::Match(tok, "%name%")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2040:        const Function *function = tok->function();
call    0 never executed
    #####: 2041:        if (!function)
branch  0 never executed
branch  1 never executed
    #####: 2042:            return {};
call    0 never executed
    #####: 2043:        return {function->retDef, function->returnDefEnd()};
call    0 never executed
call    1 never executed
    #####: 2044:    } else if (Token::simpleMatch(tok, "=")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2045:        return Token::typeDecl(tok->astOperand1());
call    0 never executed
call    1 never executed
    #####: 2046:    } else if (Token::simpleMatch(tok, ".")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2047:        return Token::typeDecl(tok->astOperand2());
call    0 never executed
call    1 never executed
        -: 2048:    } else {
    #####: 2049:        const ::Type * t = typeOf(tok);
call    0 never executed
    #####: 2050:        if (!t || !t->classDef)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2051:            return {};
call    0 never executed
    #####: 2052:        return {t->classDef->next(), t->classDef->tokAt(2)};
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2053:    }
        -: 2054:}
function _ZN5Token7typeStrB5cxx11EPKS_ called 0 returned 0% blocks executed 0%
    #####: 2055:std::string Token::typeStr(const Token* tok)
        -: 2056:{
    #####: 2057:    if (tok->valueType()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2058:        const ValueType * vt = tok->valueType();
call    0 never executed
    #####: 2059:        std::string ret = vt->str();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2060:        if (!ret.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2061:            return ret;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 2062:    }
    #####: 2063:    std::pair<const Token*, const Token*> r = Token::typeDecl(tok);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2064:    if (!r.first || !r.second)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2065:        return "";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####: 2066:    return r.first->stringifyList(r.second, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2067:}
        -: 2068:
function _ZN5Token9scopeInfoESt10shared_ptrI10ScopeInfo2E called 58818 returned 100% blocks executed 100%
    58818: 2069:void Token::scopeInfo(std::shared_ptr<ScopeInfo2> newScopeInfo)
        -: 2070:{
    58818: 2071:    mImpl->mScopeInfo = newScopeInfo;
call    0 returned 100%
    58818: 2072:}
function _ZNK5Token9scopeInfoEv called 58770 returned 100% blocks executed 100%
    58770: 2073:std::shared_ptr<ScopeInfo2> Token::scopeInfo() const
        -: 2074:{
    58770: 2075:    return mImpl->mScopeInfo;
call    0 returned 100%
        -: 2076:}
        -: 2077:
function _ZN9TokenImplD2Ev called 30033 returned 100% blocks executed 84%
    60066: 2078:TokenImpl::~TokenImpl()
call    0 returned 100%
call    1 returned 100%
        -: 2079:{
    30033: 2080:    delete mOriginalName;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
call    3 returned 100%
    30033: 2081:    delete mValueType;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
call    3 never executed
    30033: 2082:    delete mValues;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
call    2 returned 100%
call    3 returned 100%
        -: 2083:
    30048: 2084:    for (auto templateSimplifierPointer : mTemplateSimplifierPointers) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 1% (fallthrough)
branch  4 taken 99%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
       15: 2085:        templateSimplifierPointer->token(nullptr);
call    0 returned 100%
        -: 2086:    }
        -: 2087:
    30033: 2088:    while (mCppcheckAttributes) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2089:        struct CppcheckAttributes *c = mCppcheckAttributes;
    #####: 2090:        mCppcheckAttributes = mCppcheckAttributes->next;
    #####: 2091:        delete c;
call    0 never executed
        -: 2092:    }
    30033: 2093:}
        -: 2094:
function _ZN9TokenImpl20setCppcheckAttributeENS_18CppcheckAttributes4TypeEx called 0 returned 0% blocks executed 0%
    #####: 2095:void TokenImpl::setCppcheckAttribute(TokenImpl::CppcheckAttributes::Type type, MathLib::bigint value)
        -: 2096:{
    #####: 2097:    struct CppcheckAttributes *attr = mCppcheckAttributes;
    #####: 2098:    while (attr && attr->type != type)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2099:        attr = attr->next;
    #####: 2100:    if (attr)
branch  0 never executed
branch  1 never executed
    #####: 2101:        attr->value = value;
        -: 2102:    else {
    #####: 2103:        attr = new CppcheckAttributes;
call    0 never executed
    #####: 2104:        attr->type = type;
    #####: 2105:        attr->value = value;
    #####: 2106:        attr->next = mCppcheckAttributes;
    #####: 2107:        mCppcheckAttributes = attr;
        -: 2108:    }
    #####: 2109:}
        -: 2110:
function _ZNK9TokenImpl20getCppcheckAttributeENS_18CppcheckAttributes4TypeEPx called 1374 returned 100% blocks executed 63%
     1374: 2111:bool TokenImpl::getCppcheckAttribute(TokenImpl::CppcheckAttributes::Type type, MathLib::bigint *value) const
        -: 2112:{
     1374: 2113:    struct CppcheckAttributes *attr = mCppcheckAttributes;
     1374: 2114:    while (attr && attr->type != type)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####: 2115:        attr = attr->next;
     1374: 2116:    if (attr)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2117:        *value = attr->value;
     1374: 2118:    return attr != nullptr;
function _GLOBAL__sub_I__ZN9TokenImpl15mEmptyValueListE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 52%
        3: 2119:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
