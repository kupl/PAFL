        -:    0:Source:/home/workspace/lib/settings.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/settings.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/settings.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "settings.h"
        -:   20:
        -:   21:#include "valueflow.h"
        -:   22:
        -:   23:bool Settings::mTerminated;
        -:   24:
        -:   25:const char Settings::SafeChecks::XmlRootName[] = "safe-checks";
        -:   26:const char Settings::SafeChecks::XmlClasses[] = "class-public";
        -:   27:const char Settings::SafeChecks::XmlExternalFunctions[] = "external-functions";
        -:   28:const char Settings::SafeChecks::XmlInternalFunctions[] = "internal-functions";
        -:   29:const char Settings::SafeChecks::XmlExternalVariables[] = "external-variables";
        -:   30:
function _ZN8SettingsC2Ev called 78 returned 100% blocks executed 58%
       78:   31:Settings::Settings()
        -:   32:    : mEnabled(0),
        -:   33:      checkConfiguration(false),
        -:   34:      checkLibrary(false),
        -:   35:      checkHeaders(true),
        -:   36:      checkUnusedTemplates(false),
        -:   37:      debugSimplified(false),
        -:   38:      debugnormal(false),
        -:   39:      debugwarnings(false),
        -:   40:      debugtemplate(false),
        -:   41:      dump(false),
        -:   42:      enforcedLang(None),
        -:   43:      exceptionHandling(false),
        -:   44:      exitCode(0),
        -:   45:      experimental(false),
        -:   46:      force(false),
        -:   47:      inconclusive(false),
        -:   48:      verification(false),
        -:   49:      debugVerification(false),
        -:   50:      inlineSuppressions(false),
        -:   51:      jobs(1),
        -:   52:      jointSuppressionReport(false),
        -:   53:      loadAverage(0),
        -:   54:      maxConfigs(12),
        -:   55:      maxCtuDepth(2),
        -:   56:      preprocessOnly(false),
        -:   57:      quiet(false),
        -:   58:      relativePaths(false),
        -:   59:      reportProgress(false),
        -:   60:      showtime(SHOWTIME_MODES::SHOWTIME_NONE),
        -:   61:      verbose(false),
        -:   62:      xml(false),
       78:   63:      xml_version(2)
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
call    8 returned 100%
call    9 returned 100%
call   10 returned 100%
call   11 returned 100%
branch 12 taken 100% (fallthrough)
branch 13 taken 0% (throw)
call   14 returned 100%
call   15 returned 100%
call   16 returned 100%
call   17 returned 100%
call   18 returned 100%
call   19 returned 100%
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 returned 100%
call   25 returned 100%
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
        -:   64:{
       78:   65:}
        -:   66:
function _ZN8Settings10addEnabledERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3755 returned 100% blocks executed 24%
     3755:   67:std::string Settings::addEnabled(const std::string &str)
        -:   68:{
        -:   69:    // Enable parameters may be comma separated...
     3755:   70:    if (str.find(',') != std::string::npos) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   71:        std::string::size_type prevPos = 0;
    #####:   72:        std::string::size_type pos = 0;
    #####:   73:        while ((pos = str.find(',', pos)) != std::string::npos) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   74:            if (pos == prevPos)
branch  0 never executed
branch  1 never executed
    #####:   75:                return std::string("cppcheck: --enable parameter is empty");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:   76:            const std::string errmsg(addEnabled(str.substr(prevPos, pos - prevPos)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   77:            if (!errmsg.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   78:                return errmsg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:            ++pos;
    #####:   80:            prevPos = pos;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   81:        }
    #####:   82:        if (prevPos >= str.length())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:            return std::string("cppcheck: --enable parameter is empty");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:   84:        return addEnabled(str.substr(prevPos));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:   85:    }
        -:   86:
     3755:   87:    if (str == "all") {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   88:        mEnabled |= WARNING | STYLE | PERFORMANCE | PORTABILITY | INFORMATION | UNUSED_FUNCTION | MISSING_INCLUDE;
     3755:   89:    } else if (str == "warning") {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
      945:   90:        mEnabled |= WARNING;
     2810:   91:    } else if (str == "style") {
call    0 returned 100%
branch  1 taken 34% (fallthrough)
branch  2 taken 66%
      944:   92:        mEnabled |= STYLE;
     1866:   93:    } else if (str == "performance") {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
      927:   94:        mEnabled |= PERFORMANCE;
      939:   95:    } else if (str == "portability") {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
      938:   96:        mEnabled |= PORTABILITY;
        1:   97:    } else if (str == "information") {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   98:        mEnabled |= INFORMATION | MISSING_INCLUDE;
    #####:   99:    } else if (str == "unusedFunction") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  100:        mEnabled |= UNUSED_FUNCTION;
    #####:  101:    } else if (str == "missingInclude") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  102:        mEnabled |= MISSING_INCLUDE;
        -:  103:    }
        -:  104:#ifdef CHECK_INTERNAL
        -:  105:    else if (str == "internal") {
        -:  106:        mEnabled |= INTERNAL;
        -:  107:    }
        -:  108:#endif
        -:  109:    else {
    #####:  110:        if (str.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  111:            return std::string("cppcheck: --enable parameter is empty");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  112:        else
    #####:  113:            return std::string("cppcheck: there is no --enable parameter with the name '" + str + "'");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  114:    }
        -:  115:
     3755:  116:    return std::string();
call    0 returned 100%
        -:  117:}
        -:  118:
function _ZNK8Settings9isEnabledEN8Severity12SeverityTypeE called 0 returned 0% blocks executed 0%
    #####:  119:bool Settings::isEnabled(Severity::SeverityType severity) const
        -:  120:{
    #####:  121:    switch (severity) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:  122:    case Severity::none:
    #####:  123:        return true;
    #####:  124:    case Severity::error:
    #####:  125:        return true;
    #####:  126:    case Severity::warning:
    #####:  127:        return isEnabled(WARNING);
call    0 never executed
    #####:  128:    case Severity::style:
    #####:  129:        return isEnabled(STYLE);
call    0 never executed
    #####:  130:    case Severity::performance:
    #####:  131:        return isEnabled(PERFORMANCE);
call    0 never executed
    #####:  132:    case Severity::portability:
    #####:  133:        return isEnabled(PORTABILITY);
call    0 never executed
    #####:  134:    case Severity::information:
    #####:  135:        return isEnabled(INFORMATION);
call    0 never executed
    #####:  136:    case Severity::debug:
    #####:  137:        return false;
    #####:  138:    default:
    #####:  139:        return false;
        -:  140:    }
        -:  141:}
        -:  142:
function _ZNK8Settings9isEnabledEPKN9ValueFlow5ValueEb called 22 returned 100% blocks executed 50%
       22:  143:bool Settings::isEnabled(const ValueFlow::Value *value, bool inconclusiveCheck) const
        -:  144:{
       22:  145:    if (!isEnabled(Settings::WARNING) && (value->condition || value->defaultArg))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  146:        return false;
       22:  147:    if (!inconclusive && (inconclusiveCheck || value->isInconclusive()))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 taken 0% (fallthrough)
branch  8 taken 100%
    #####:  148:        return false;
       22:  149:    return true;
function _GLOBAL__sub_I__ZN8Settings11mTerminatedE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  150:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
