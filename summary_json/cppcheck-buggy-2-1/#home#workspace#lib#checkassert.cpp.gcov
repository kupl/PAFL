        -:    0:Source:/home/workspace/lib/checkassert.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkassert.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkassert.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19://---------------------------------------------------------------------------
        -:   20:// You should not write statements with side effects in assert()
        -:   21://---------------------------------------------------------------------------
        -:   22:
        -:   23:#include "checkassert.h"
        -:   24:
        -:   25:#include "errorlogger.h"
        -:   26:#include "settings.h"
        -:   27:#include "symboldatabase.h"
        -:   28:#include "token.h"
        -:   29:#include "tokenize.h"
        -:   30:#include "tokenlist.h"
        -:   31:
        -:   32://---------------------------------------------------------------------------
        -:   33:
        -:   34:// CWE ids used
        1:   35:static const struct CWE CWE398(398U);   // Indicator of Poor Code Quality
call    0 returned 100%
        -:   36:
        -:   37:// Register this check class (by creating a static instance of it)
        -:   38:namespace {
        1:   39:    CheckAssert instance;
call    0 returned 100%
call    1 returned 100%
        -:   40:}
        -:   41:
function _ZN11CheckAssert21assertWithSideEffectsEv called 0 returned 0% blocks executed 0%
    #####:   42:void CheckAssert::assertWithSideEffects()
        -:   43:{
    #####:   44:    if (!mSettings->isEnabled(Settings::WARNING))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   45:        return;
        -:   46:
    #####:   47:    for (const Token* tok = mTokenizer->list.front(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   48:        if (!Token::simpleMatch(tok, "assert ("))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   49:            continue;
        -:   50:
    #####:   51:        const Token *endTok = tok->next()->link();
call    0 never executed
call    1 never executed
    #####:   52:        for (const Token* tmp = tok->next(); tmp != endTok; tmp = tmp->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:   53:            checkVariableAssignment(tmp, tok->scope());
call    0 never executed
call    1 never executed
        -:   54:
    #####:   55:            if (tmp->tokType() != Token::eFunction)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:                continue;
        -:   57:
    #####:   58:            const Function* f = tmp->function();
call    0 never executed
    #####:   59:            if (f->nestedIn->isClassOrStruct() && !f->isStatic() && !f->isConst()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:   60:                sideEffectInAssertError(tmp, f->name()); // Non-const member function called
call    0 never executed
call    1 never executed
    #####:   61:                continue;
        -:   62:            }
    #####:   63:            const Scope* scope = f->functionScope;
    #####:   64:            if (!scope) continue;
branch  0 never executed
branch  1 never executed
        -:   65:
    #####:   66:            for (const Token *tok2 = scope->bodyStart; tok2 != scope->bodyEnd; tok2 = tok2->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   67:                if (!tok2->isAssignmentOp() && tok2->tokType() != Token::eIncDecOp)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   68:                    continue;
        -:   69:
    #####:   70:                const Variable* var = tok2->previous()->variable();
call    0 never executed
call    1 never executed
    #####:   71:                if (!var || var->isLocal() || (var->isArgument() && !var->isReference() && !var->isPointer()))
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:   72:                    continue; // See ticket #4937. Assigning function arguments not passed by reference is ok.
    #####:   73:                if (var->isArgument() && var->isPointer() && tok2->strAt(-2) != "*")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    #####:   74:                    continue; // Pointers need to be dereferenced, otherwise there is no error
        -:   75:
    #####:   76:                bool noReturnInScope = true;
    #####:   77:                for (const Token *rt = scope->bodyStart; rt != scope->bodyEnd; rt = rt->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:   78:                    if (rt->str() != "return") continue; // find all return statements
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:                    if (inSameScope(rt, tok2)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:                        noReturnInScope = false;
    #####:   81:                        break;
        -:   82:                    }
        -:   83:                }
    #####:   84:                if (noReturnInScope) continue;
branch  0 never executed
branch  1 never executed
        -:   85:
    #####:   86:                sideEffectInAssertError(tmp, f->name());
call    0 never executed
call    1 never executed
    #####:   87:                break;
        -:   88:            }
        -:   89:        }
    #####:   90:        tok = endTok;
        -:   91:    }
        -:   92:}
        -:   93://---------------------------------------------------------------------------
        -:   94:
        -:   95:
function _ZN11CheckAssert23sideEffectInAssertErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   96:void CheckAssert::sideEffectInAssertError(const Token *tok, const std::string& functionName)
        -:   97:{
    #####:   98:    reportError(tok, Severity::warning,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   99:                "assertWithSideEffect",
    #####:  100:                "$symbol:" + functionName + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  101:                "Assert statement calls a function which may have desired side effects: '$symbol'.\n"
        -:  102:                "Non-pure function: '$symbol' is called inside assert statement. "
        -:  103:                "Assert statements are removed from release builds so the code inside "
        -:  104:                "assert statement is not executed. If the code is needed also in release "
        -:  105:                "builds, this is a bug.", CWE398, false);
    #####:  106:}
        -:  107:
function _ZN11CheckAssert23assignmentInAssertErrorEPK5TokenRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  108:void CheckAssert::assignmentInAssertError(const Token *tok, const std::string& varname)
        -:  109:{
    #####:  110:    reportError(tok, Severity::warning,
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  111:                "assignmentInAssert",
    #####:  112:                "$symbol:" + varname + "\n"
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  113:                "Assert statement modifies '$symbol'.\n"
        -:  114:                "Variable '$symbol' is modified inside assert statement. "
        -:  115:                "Assert statements are removed from release builds so the code inside "
        -:  116:                "assert statement is not executed. If the code is needed also in release "
        -:  117:                "builds, this is a bug.", CWE398, false);
    #####:  118:}
        -:  119:
        -:  120:// checks if side effects happen on the variable prior to tmp
function _ZN11CheckAssert23checkVariableAssignmentEPK5TokenPK5Scope called 0 returned 0% blocks executed 0%
    #####:  121:void CheckAssert::checkVariableAssignment(const Token* assignTok, const Scope *assertionScope)
        -:  122:{
    #####:  123:    const Variable* prevVar = assignTok->previous()->variable();
call    0 never executed
call    1 never executed
    #####:  124:    if (!prevVar)
branch  0 never executed
branch  1 never executed
    #####:  125:        return;
        -:  126:
        -:  127:    // Variable declared in inner scope in assert => don't warn
    #####:  128:    if (assertionScope != prevVar->scope()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:        const Scope *s = prevVar->scope();
call    0 never executed
    #####:  130:        while (s && s != assertionScope)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  131:            s = s->nestedIn;
    #####:  132:        if (s == assertionScope)
branch  0 never executed
branch  1 never executed
    #####:  133:            return;
        -:  134:    }
        -:  135:
        -:  136:    // assignment
    #####:  137:    if (assignTok->isAssignmentOp() || assignTok->tokType() == Token::eIncDecOp) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  138:        if (prevVar->isConst())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  139:            return;
        -:  140:
    #####:  141:        assignmentInAssertError(assignTok, prevVar->name());
call    0 never executed
call    1 never executed
        -:  142:    }
        -:  143:    // TODO: function calls on prevVar
        -:  144:}
        -:  145:
function _ZN11CheckAssert11inSameScopeEPK5TokenS2_ called 0 returned 0% blocks executed 0%
    #####:  146:bool CheckAssert::inSameScope(const Token* returnTok, const Token* assignTok)
        -:  147:{
        -:  148:    // TODO: even if a return is in the same scope, the assignment might not affect it.
    #####:  149:    return returnTok->scope() == assignTok->scope();
call    0 never executed
call    1 never executed
function _GLOBAL__sub_I__ZN11CheckAssert21assertWithSideEffectsEv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  150:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
