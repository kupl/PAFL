        -:    0:Source:/home/workspace/lib/checkunusedfunctions.cpp
        -:    0:Graph:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkunusedfunctions.gcno
        -:    0:Data:/home/workspace/build/lib/CMakeFiles/lib_objs.dir/checkunusedfunctions.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:
        -:   20://---------------------------------------------------------------------------
        -:   21:#include "checkunusedfunctions.h"
        -:   22:
        -:   23:#include "astutils.h"
        -:   24:#include "errorlogger.h"
        -:   25:#include "library.h"
        -:   26:#include "settings.h"
        -:   27:#include "symboldatabase.h"
        -:   28:#include "token.h"
        -:   29:#include "tokenize.h"
        -:   30:#include "tokenlist.h"
        -:   31:
        -:   32:#include <tinyxml2.h>
        -:   33:#include <algorithm>
        -:   34:#include <cstdlib>
        -:   35:#include <cstring>
        -:   36:#include <istream>
        -:   37:#include <utility>
        -:   38://---------------------------------------------------------------------------
        -:   39:
        -:   40:
        -:   41:
        -:   42:// Register this check class
        1:   43:CheckUnusedFunctions CheckUnusedFunctions::instance;
call    0 returned 100%
call    1 returned 100%
        -:   44:
        1:   45:static const struct CWE CWE561(561U);   // Dead Code
call    0 returned 100%
        -:   46:
        -:   47:
        -:   48://---------------------------------------------------------------------------
        -:   49:// FUNCTION USAGE - Check for unused functions etc
        -:   50://---------------------------------------------------------------------------
        -:   51:
function _ZN20CheckUnusedFunctions11parseTokensERK9TokenizerPKcPK8Settings called 0 returned 0% blocks executed 0%
    #####:   52:void CheckUnusedFunctions::parseTokens(const Tokenizer &tokenizer, const char FileName[], const Settings *settings)
        -:   53:{
    #####:   54:    const bool doMarkup = settings->library.markupFile(FileName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   55:    const SymbolDatabase* symbolDatabase = tokenizer.getSymbolDatabase();
call    0 never executed
        -:   56:
        -:   57:    // Function declarations..
    #####:   58:    for (const Scope* scope : symbolDatabase->functionScopes) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:   59:        const Function* func = scope->function;
    #####:   60:        if (!func || !func->token || scope->bodyStart->fileIndex() != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   61:            continue;
        -:   62:
        -:   63:        // Don't warn about functions that are marked by __attribute__((constructor)) or __attribute__((destructor))
    #####:   64:        if (func->isAttributeConstructor() || func->isAttributeDestructor() || func->type != Function::eFunction || func->isOperator())
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
    #####:   65:            continue;
        -:   66:
        -:   67:        // Don't care about templates
    #####:   68:        if (tokenizer.isCPP()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   69:            const Token *retDef = func->retDef;
    #####:   70:            while (retDef && retDef->isName())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   71:                retDef = retDef->previous();
call    0 never executed
    #####:   72:            if (retDef && retDef->str() == ">")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   73:                continue;
        -:   74:        }
        -:   75:
    #####:   76:        mFunctionDecl.emplace_back(func);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   77:
    #####:   78:        FunctionUsage &usage = mFunctions[func->name()];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   79:
    #####:   80:        if (!usage.lineNumber)
branch  0 never executed
branch  1 never executed
    #####:   81:            usage.lineNumber = func->token->linenr();
call    0 never executed
        -:   82:
        -:   83:        // No filename set yet..
    #####:   84:        if (usage.filename.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:            usage.filename = tokenizer.list.getSourceFilePath();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   86:        }
        -:   87:        // Multiple files => filename = "+"
    #####:   88:        else if (usage.filename != tokenizer.list.getSourceFilePath()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   89:            //func.filename = "+";
    #####:   90:            usage.usedOtherFile |= usage.usedSameFile;
        -:   91:        }
        -:   92:    }
        -:   93:
        -:   94:    // Function usage..
    #####:   95:    const Token *lambdaEndToken = nullptr;
    #####:   96:    for (const Token *tok = tokenizer.tokens(); tok; tok = tok->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:   97:
    #####:   98:        if (tok == lambdaEndToken)
branch  0 never executed
branch  1 never executed
    #####:   99:            lambdaEndToken = nullptr;
    #####:  100:        else if (!lambdaEndToken && tok->str() == "[")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  101:            lambdaEndToken = findLambdaEndToken(tok);
call    0 never executed
        -:  102:
        -:  103:        // parsing of library code to find called functions
    #####:  104:        if (settings->library.isexecutableblock(FileName, tok->str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  105:            const Token * markupVarToken = tok->tokAt(settings->library.blockstartoffset(FileName));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  106:            // not found
    #####:  107:            if (!markupVarToken)
branch  0 never executed
branch  1 never executed
    #####:  108:                continue;
    #####:  109:            int scope = 0;
    #####:  110:            bool start = true;
        -:  111:            // find all function calls in library code (starts with '(', not if or while etc)
    #####:  112:            while ((scope || start) && markupVarToken) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  113:                if (markupVarToken->str() == settings->library.blockstart(FileName)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  114:                    scope++;
    #####:  115:                    if (start) {
branch  0 never executed
branch  1 never executed
    #####:  116:                        start = false;
        -:  117:                    }
    #####:  118:                } else if (markupVarToken->str() == settings->library.blockend(FileName))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  119:                    scope--;
    #####:  120:                else if (!settings->library.iskeyword(FileName, markupVarToken->str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  121:                    mFunctionCalls.insert(markupVarToken->str());
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  122:                    if (mFunctions.find(markupVarToken->str()) != mFunctions.end())
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    #####:  123:                        mFunctions[markupVarToken->str()].usedOtherFile = true;
call    0 never executed
call    1 never executed
    #####:  124:                    else if (markupVarToken->next()->str() == "(") {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  125:                        FunctionUsage &func = mFunctions[markupVarToken->str()];
call    0 never executed
call    1 never executed
    #####:  126:                        func.filename = tokenizer.list.getSourceFilePath();
call    0 never executed
call    1 never executed
    #####:  127:                        if (func.filename.empty() || func.filename == "+")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  128:                            func.usedOtherFile = true;
        -:  129:                        else
    #####:  130:                            func.usedSameFile = true;
        -:  131:                    }
        -:  132:                }
    #####:  133:                markupVarToken = markupVarToken->next();
call    0 never executed
        -:  134:            }
        -:  135:        }
        -:  136:
    #####:  137:        if (!doMarkup // only check source files
branch  0 never executed
branch  1 never executed
    #####:  138:            && settings->library.isexporter(tok->str()) && tok->next() != nullptr) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  139:            const Token * propToken = tok->next();
call    0 never executed
    #####:  140:            while (propToken && propToken->str() != ")") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  141:                if (settings->library.isexportedprefix(tok->str(), propToken->str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  142:                    const Token* nextPropToken = propToken->next();
call    0 never executed
    #####:  143:                    const std::string& value = nextPropToken->str();
call    0 never executed
    #####:  144:                    if (mFunctions.find(value) != mFunctions.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    #####:  145:                        mFunctions[value].usedOtherFile = true;
call    0 never executed
        -:  146:                    }
    #####:  147:                    mFunctionCalls.insert(value);
call    0 never executed
call    1 never executed
        -:  148:                }
    #####:  149:                if (settings->library.isexportedsuffix(tok->str(), propToken->str())) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  150:                    const Token* prevPropToken = propToken->previous();
call    0 never executed
    #####:  151:                    const std::string& value = prevPropToken->str();
call    0 never executed
    #####:  152:                    if (value != ")" && mFunctions.find(value) != mFunctions.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
    #####:  153:                        mFunctions[value].usedOtherFile = true;
call    0 never executed
        -:  154:                    }
    #####:  155:                    mFunctionCalls.insert(value);
call    0 never executed
call    1 never executed
        -:  156:                }
    #####:  157:                propToken = propToken->next();
call    0 never executed
        -:  158:            }
        -:  159:        }
        -:  160:
    #####:  161:        if (doMarkup && settings->library.isimporter(FileName, tok->str()) && tok->next()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
branch 26 never executed
branch 27 never executed
call   28 never executed
call   29 never executed
    #####:  162:            const Token * propToken = tok->next();
call    0 never executed
    #####:  163:            if (propToken->next()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  164:                propToken = propToken->next();
call    0 never executed
    #####:  165:                while (propToken && propToken->str() != ")") {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  166:                    const std::string& value = propToken->str();
call    0 never executed
    #####:  167:                    if (!value.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  168:                        mFunctions[value].usedOtherFile = true;
call    0 never executed
    #####:  169:                        mFunctionCalls.insert(value);
call    0 never executed
call    1 never executed
    #####:  170:                        break;
        -:  171:                    }
    #####:  172:                    propToken = propToken->next();
call    0 never executed
        -:  173:                }
        -:  174:            }
        -:  175:        }
        -:  176:
    #####:  177:        if (settings->library.isreflection(tok->str())) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  178:            const int argIndex = settings->library.reflectionArgument(tok->str());
call    0 never executed
call    1 never executed
    #####:  179:            if (argIndex >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  180:                const Token * funcToken = tok->next();
call    0 never executed
    #####:  181:                int index = 0;
    #####:  182:                std::string value;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  183:                while (funcToken) {
branch  0 never executed
branch  1 never executed
    #####:  184:                    if (funcToken->str()==",") {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  185:                        if (++index == argIndex)
branch  0 never executed
branch  1 never executed
    #####:  186:                            break;
    #####:  187:                        value.clear();
call    0 never executed
        -:  188:                    } else
    #####:  189:                        value += funcToken->str();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  190:                    funcToken = funcToken->next();
call    0 never executed
        -:  191:                }
    #####:  192:                if (index == argIndex) {
branch  0 never executed
branch  1 never executed
    #####:  193:                    value = value.substr(1, value.length() - 2);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  194:                    mFunctions[value].usedOtherFile = true;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  195:                    mFunctionCalls.insert(value);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  196:                }
        -:  197:            }
        -:  198:        }
        -:  199:
    #####:  200:        const Token *funcname = nullptr;
        -:  201:
    #####:  202:        if ((lambdaEndToken || tok->scope()->isExecutable()) && Token::Match(tok, "%name% (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  203:            funcname = tok;
    #####:  204:        } else if ((lambdaEndToken || tok->scope()->isExecutable()) && Token::Match(tok, "%name% <") && Token::simpleMatch(tok->linkAt(1), "> (")) {
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
    #####:  205:            funcname = tok;
    #####:  206:        } else if (Token::Match(tok, "[;{}.,()[=+-/|!?:]")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:            funcname = tok->next();
call    0 never executed
    #####:  208:            if (funcname && funcname->str() == "&")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  209:                funcname = funcname->next();
call    0 never executed
    #####:  210:            if (funcname && funcname->str() == "::")
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  211:                funcname = funcname->next();
call    0 never executed
    #####:  212:            while (Token::Match(funcname, "%name% :: %name%"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  213:                funcname = funcname->tokAt(2);
call    0 never executed
        -:  214:
    #####:  215:            if (!Token::Match(funcname, "%name% [(),;]:}>]"))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  216:                continue;
        -:  217:        }
        -:  218:
    #####:  219:        if (!funcname)
branch  0 never executed
branch  1 never executed
    #####:  220:            continue;
        -:  221:
        -:  222:        // funcname ( => Assert that the end parentheses isn't followed by {
    #####:  223:        if (Token::Match(funcname, "%name% (|<")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  224:            const Token *ftok = funcname->next();
call    0 never executed
    #####:  225:            if (ftok->str() == "<")
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  226:                ftok = ftok->link();
call    0 never executed
    #####:  227:            if (Token::Match(ftok->linkAt(1), ") const|throw|{"))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  228:                funcname = nullptr;
        -:  229:        }
        -:  230:
    #####:  231:        if (funcname) {
branch  0 never executed
branch  1 never executed
    #####:  232:            FunctionUsage &func = mFunctions[ funcname->str()];
call    0 never executed
call    1 never executed
    #####:  233:            const std::string& called_from_file = tokenizer.list.getSourceFilePath();
call    0 never executed
        -:  234:
    #####:  235:            if (func.filename.empty() || func.filename == "+" || func.filename != called_from_file)
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  236:                func.usedOtherFile = true;
        -:  237:            else
    #####:  238:                func.usedSameFile = true;
        -:  239:
    #####:  240:            mFunctionCalls.insert(funcname->str());
call    0 never executed
call    1 never executed
call    2 never executed
        -:  241:        }
        -:  242:    }
    #####:  243:}
        -:  244:
        -:  245:
function _ZL18isOperatorFunctionRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  246:static bool isOperatorFunction(const std::string & funcName)
        -:  247:{
        -:  248:    /* Operator functions are invalid function names for C, so no need to check
        -:  249:     * this in here. As result the returned error function might be incorrect.
        -:  250:     *
        -:  251:     * List of valid operators can be found at:
        -:  252:     * http://en.cppreference.com/w/cpp/language/operators
        -:  253:     *
        -:  254:     * Conversion functions must be a member function (at least for gcc), so no
        -:  255:     * need to cover them for unused functions.
        -:  256:     *
        -:  257:     * To speed up the comparison, not the whole list of operators is used.
        -:  258:     * Instead only the character after the operator prefix is checked to be a
        -:  259:     * none alpa numeric value, but the '_', to cover function names like
        -:  260:     * "operator_unused". In addition the following valid operators are checked:
        -:  261:     * - new
        -:  262:     * - new[]
        -:  263:     * - delete
        -:  264:     * - delete[]
        -:  265:     */
    #####:  266:    const std::string operatorPrefix = "operator";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  267:    if (funcName.compare(0, operatorPrefix.length(), operatorPrefix) != 0) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  268:        return false;
        -:  269:    }
        -:  270:
        -:  271:    // Taking care of funcName == "operator", which is no valid operator
    #####:  272:    if (funcName.length() == operatorPrefix.length()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  273:        return false;
        -:  274:    }
        -:  275:
    #####:  276:    const char firstOperatorChar = funcName[operatorPrefix.length()];
call    0 never executed
call    1 never executed
    #####:  277:    if (firstOperatorChar == '_') {
branch  0 never executed
branch  1 never executed
    #####:  278:        return false;
        -:  279:    }
        -:  280:
    #####:  281:    if (!std::isalnum(firstOperatorChar)) {
branch  0 never executed
branch  1 never executed
    #####:  282:        return true;
        -:  283:    }
        -:  284:
        -:  285:    const std::vector<std::string> additionalOperators = {
        -:  286:        "new", "new[]", "delete", "delete[]"
    #####:  287:    };
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
branch 21 never executed
branch 22 never executed
call   23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
        -:  288:
        -:  289:
    #####:  290:    return std::find(additionalOperators.begin(), additionalOperators.end(), funcName.substr(operatorPrefix.length())) != additionalOperators.end();;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
        -:  291:}
        -:  292:
        -:  293:
        -:  294:
function _ZN20CheckUnusedFunctions5checkEP11ErrorLoggerRK8Settings called 0 returned 0% blocks executed 0%
    #####:  295:bool CheckUnusedFunctions::check(ErrorLogger * const errorLogger, const Settings& settings)
        -:  296:{
    #####:  297:    bool errors = false;
    #####:  298:    for (std::map<std::string, FunctionUsage>::const_iterator it = mFunctions.begin(); it != mFunctions.end(); ++it) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  299:        const FunctionUsage &func = it->second;
call    0 never executed
    #####:  300:        if (func.usedOtherFile || func.filename.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  301:            continue;
    #####:  302:        if (it->first == "main" ||
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  303:            (settings.isWindowsPlatform() && (it->first == "WinMain" || it->first == "_tmain")) ||
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  304:            it->first == "if")
call    0 never executed
call    1 never executed
    #####:  305:            continue;
    #####:  306:        if (!func.usedSameFile) {
branch  0 never executed
branch  1 never executed
    #####:  307:            if (isOperatorFunction(it->first))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  308:                continue;
    #####:  309:            std::string filename;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  310:            if (func.filename != "+")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  311:                filename = func.filename;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  312:            unusedFunctionError(errorLogger, filename, func.lineNumber, it->first);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  313:            errors = true;
    #####:  314:        } else if (! func.usedOtherFile) {
        -:  315:            /** @todo add error message "function is only used in <file> it can be static" */
        -:  316:            /*
        -:  317:            std::ostringstream errmsg;
        -:  318:            errmsg << "The function '" << it->first << "' is only used in the file it was declared in so it should have local linkage.";
        -:  319:            mErrorLogger->reportErr( errmsg.str() );
        -:  320:            errors = true;
        -:  321:            */
        -:  322:        }
        -:  323:    }
    #####:  324:    return errors;
        -:  325:}
        -:  326:
function _ZN20CheckUnusedFunctions19unusedFunctionErrorEP11ErrorLoggerRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjS9_ called 0 returned 0% blocks executed 0%
    #####:  327:void CheckUnusedFunctions::unusedFunctionError(ErrorLogger * const errorLogger,
        -:  328:        const std::string &filename, unsigned int lineNumber,
        -:  329:        const std::string &funcname)
        -:  330:{
    #####:  331:    std::list<ErrorLogger::ErrorMessage::FileLocation> locationList;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  332:    if (!filename.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  333:        ErrorLogger::ErrorMessage::FileLocation fileLoc;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  334:        fileLoc.setfile(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  335:        fileLoc.line = lineNumber;
    #####:  336:        locationList.push_back(fileLoc);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  337:    }
        -:  338:
    #####:  339:    const ErrorLogger::ErrorMessage errmsg(locationList, emptyString, Severity::style, "$symbol:" + funcname + "\nThe function '$symbol' is never used.", "unusedFunction", CWE561, false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  340:    if (errorLogger)
branch  0 never executed
branch  1 never executed
    #####:  341:        errorLogger->reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  342:    else
    #####:  343:        reportError(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  344:}
        -:  345:
function _ZNK20CheckUnusedFunctions11getFileInfoEPK9TokenizerPK8Settings called 0 returned 0% blocks executed 0%
    #####:  346:Check::FileInfo *CheckUnusedFunctions::getFileInfo(const Tokenizer *tokenizer, const Settings *settings) const
        -:  347:{
    #####:  348:    if (!settings->isEnabled(Settings::UNUSED_FUNCTION))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  349:        return nullptr;
    #####:  350:    if (settings->jobs == 1 && settings->buildDir.empty())
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  351:        instance.parseTokens(*tokenizer, tokenizer->list.getFiles().front().c_str(), settings);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  352:    return nullptr;
        -:  353:}
        -:  354:
function _ZN20CheckUnusedFunctions19analyseWholeProgramEPKN3CTU8FileInfoERKNSt7__debug4listIPN5Check8FileInfoESaIS8_EEERK8SettingsR11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:  355:bool CheckUnusedFunctions::analyseWholeProgram(const CTU::FileInfo *ctu, const std::list<Check::FileInfo*> &fileInfo, const Settings& settings, ErrorLogger &errorLogger)
        -:  356:{
        -:  357:    (void)ctu;
        -:  358:    (void)fileInfo;
    #####:  359:    return check(&errorLogger, settings);
call    0 never executed
        -:  360:}
        -:  361:
function _ZN20CheckUnusedFunctions12FunctionDeclC2EPK8Function called 0 returned 0% blocks executed 0%
    #####:  362:CheckUnusedFunctions::FunctionDecl::FunctionDecl(const Function *f)
    #####:  363:    : functionName(f->name()), lineNumber(f->token->linenr())
call    0 never executed
call    1 never executed
call    2 never executed
        -:  364:{
    #####:  365:}
        -:  366:
function _ZNK20CheckUnusedFunctions12analyzerInfoB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  367:std::string CheckUnusedFunctions::analyzerInfo() const
        -:  368:{
    #####:  369:    std::ostringstream ret;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  370:    for (const FunctionDecl &functionDecl : mFunctionDecl) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  371:        ret << "    <functiondecl"
    #####:  372:            << " functionName=\"" << ErrorLogger::toxml(functionDecl.functionName) << '\"'
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  373:            << " lineNumber=\"" << functionDecl.lineNumber << "\"/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
        -:  374:    }
    #####:  375:    for (const std::string &fc : mFunctionCalls) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  376:        ret << "    <functioncall functionName=\"" << ErrorLogger::toxml(fc) << "\"/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
        -:  377:    }
    #####:  378:    return ret.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  379:}
        -:  380:
        -:  381:namespace {
function _ZN12_GLOBAL__N_18LocationaSEOS0_ called 0 returned 0% blocks executed 0%
function _ZN12_GLOBAL__N_18LocationD2Ev called 0 returned 0% blocks executed 0%
    #####:  382:    struct Location {
call    0 never executed
call    1 never executed
function _ZN12_GLOBAL__N_18LocationC2Ev called 0 returned 0% blocks executed 0%
    #####:  383:        Location() : lineNumber(0) {}
call    0 never executed
function _ZN12_GLOBAL__N_18LocationC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####:  384:        Location(const std::string &f, const int l) : fileName(f), lineNumber(l) {}
call    0 never executed
        -:  385:        std::string fileName;
        -:  386:        int lineNumber;
        -:  387:    };
        -:  388:}
        -:  389:
function _ZN20CheckUnusedFunctions19analyseWholeProgramEP11ErrorLoggerRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  390:void CheckUnusedFunctions::analyseWholeProgram(ErrorLogger * const errorLogger, const std::string &buildDir)
        -:  391:{
    #####:  392:    std::map<std::string, Location> decls;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  393:    std::set<std::string> calls;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  394:
    #####:  395:    const std::string filesTxt(buildDir + "/files.txt");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  396:    std::ifstream fin(filesTxt.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  397:    std::string filesTxtLine;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  398:    while (std::getline(fin, filesTxtLine)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  399:        const std::string::size_type firstColon = filesTxtLine.find(':');
call    0 never executed
    #####:  400:        if (firstColon == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  401:            continue;
    #####:  402:        const std::string::size_type secondColon = filesTxtLine.find(':', firstColon+1);
call    0 never executed
    #####:  403:        if (secondColon == std::string::npos)
branch  0 never executed
branch  1 never executed
    #####:  404:            continue;
    #####:  405:        const std::string xmlfile = buildDir + '/' + filesTxtLine.substr(0,firstColon);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  406:        const std::string sourcefile = filesTxtLine.substr(secondColon+1);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
        -:  407:
    #####:  408:        tinyxml2::XMLDocument doc;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  409:        const tinyxml2::XMLError error = doc.LoadFile(xmlfile.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  410:        if (error != tinyxml2::XML_SUCCESS)
branch  0 never executed
branch  1 never executed
    #####:  411:            continue;
        -:  412:
    #####:  413:        const tinyxml2::XMLElement * const rootNode = doc.FirstChildElement();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  414:        if (rootNode == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  415:            continue;
        -:  416:
    #####:  417:        for (const tinyxml2::XMLElement *e = rootNode->FirstChildElement(); e; e = e->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####:  418:            if (std::strcmp(e->Name(), "FileInfo") != 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  419:                continue;
    #####:  420:            const char *checkattr = e->Attribute("check");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  421:            if (checkattr == nullptr || std::strcmp(checkattr,"CheckUnusedFunctions") != 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  422:                continue;
    #####:  423:            for (const tinyxml2::XMLElement *e2 = e->FirstChildElement(); e2; e2 = e2->NextSiblingElement()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####:  424:                const char* functionName = e2->Attribute("functionName");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  425:                if (functionName == nullptr)
branch  0 never executed
branch  1 never executed
    #####:  426:                    continue;
    #####:  427:                if (std::strcmp(e2->Name(),"functioncall") == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  428:                    calls.insert(functionName);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  429:                    continue;
    #####:  430:                } else if (std::strcmp(e2->Name(),"functiondecl") == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  431:                    const char* lineNumber = e2->Attribute("lineNumber");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  432:                    if (lineNumber)
branch  0 never executed
branch  1 never executed
    #####:  433:                        decls[functionName] = Location(sourcefile, std::atoi(lineNumber));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
        -:  434:                }
        -:  435:            }
        -:  436:        }
        -:  437:    }
        -:  438:
    #####:  439:    for (std::map<std::string, Location>::const_iterator decl = decls.begin(); decl != decls.end(); ++decl) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  440:        const std::string &functionName = decl->first;
call    0 never executed
        -:  441:
    #####:  442:        if (functionName == "main" || functionName == "WinMain" || functionName == "_tmain" ||
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
    #####:  443:            functionName == "if")
call    0 never executed
    #####:  444:            continue;
        -:  445:
    #####:  446:        if (calls.find(functionName) == calls.end() && !isOperatorFunction(functionName)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
    #####:  447:            const Location &loc = decl->second;
call    0 never executed
    #####:  448:            unusedFunctionError(errorLogger, loc.fileName, loc.lineNumber, functionName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  449:        }
        -:  450:    }
function _GLOBAL__sub_I__ZN20CheckUnusedFunctions8instanceE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  451:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
