        -:    0:Source:/home/workspace/cli/threadexecutor.cpp
        -:    0:Graph:/home/workspace/build/cli/CMakeFiles/cli_objs.dir/threadexecutor.gcno
        -:    0:Data:/home/workspace/build/cli/CMakeFiles/cli_objs.dir/threadexecutor.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "threadexecutor.h"
        -:   20:
        -:   21:#include "config.h"
        -:   22:#include "cppcheck.h"
        -:   23:#include "cppcheckexecutor.h"
        -:   24:#include "importproject.h"
        -:   25:#include "settings.h"
        -:   26:#include "suppressions.h"
        -:   27:
        -:   28:#include <algorithm>
        -:   29:#include <cerrno>
        -:   30:#include <cstdlib>
        -:   31:#include <cstring>
        -:   32:#include <iostream>
        -:   33:#include <utility>
        -:   34:
        -:   35:#ifdef __SVR4  // Solaris
        -:   36:#include <sys/loadavg.h>
        -:   37:#endif
        -:   38:#ifdef THREADING_MODEL_FORK
        -:   39:#include <sys/select.h>
        -:   40:#include <sys/wait.h>
        -:   41:#include <fcntl.h>
        -:   42:#include <unistd.h>
        -:   43:#endif
        -:   44:#ifdef THREADING_MODEL_WIN
        -:   45:#include <process.h>
        -:   46:#include <windows.h>
        -:   47:#endif
        -:   48:
        -:   49:// required for FD_ZERO
        -:   50:using std::memset;
        -:   51:
function _ZN14ThreadExecutorC2ERKNSt7__debug3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSt4lessIS7_ESaISt4pairIKS7_mEEEER8SettingsR11ErrorLogger called 0 returned 0% blocks executed 0%
    #####:   52:ThreadExecutor::ThreadExecutor(const std::map<std::string, std::size_t> &files, Settings &settings, ErrorLogger &errorLogger)
    #####:   53:    : mFiles(files), mSettings(settings), mErrorLogger(errorLogger), mFileCount(0)
call    0 never executed
call    1 never executed
call    2 never executed
        -:   54:      // Not initialized mFileSync, mErrorSync, mReportSync
        -:   55:{
        -:   56:#if defined(THREADING_MODEL_FORK)
    #####:   57:    mWpipe = 0;
        -:   58:#elif defined(THREADING_MODEL_WIN)
        -:   59:    mProcessedFiles = 0;
        -:   60:    mTotalFiles = 0;
        -:   61:    mProcessedSize = 0;
        -:   62:    mTotalFileSize = 0;
        -:   63:#endif
    #####:   64:}
        -:   65:
function _ZN14ThreadExecutorD0Ev called 0 returned 0% blocks executed 0%
function _ZN14ThreadExecutorD2Ev called 0 returned 0% blocks executed 0%
    #####:   66:ThreadExecutor::~ThreadExecutor()
call    0 never executed
call    1 never executed
call    2 never executed
        -:   67:{
        -:   68:    //dtor
    #####:   69:}
call    0 never executed
call    1 never executed
        -:   70:
        -:   71:
        -:   72:///////////////////////////////////////////////////////////////////////////////
        -:   73:////// This code is for platforms that support fork() only ////////////////////
        -:   74:///////////////////////////////////////////////////////////////////////////////
        -:   75:
        -:   76:#if defined(THREADING_MODEL_FORK)
        -:   77:
function _ZN14ThreadExecutor14addFileContentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:   78:void ThreadExecutor::addFileContent(const std::string &path, const std::string &content)
        -:   79:{
    #####:   80:    mFileContents[ path ] = content;
call    0 never executed
call    1 never executed
    #####:   81:}
        -:   82:
function _ZN14ThreadExecutor10handleReadEiRj called 0 returned 0% blocks executed 0%
    #####:   83:int ThreadExecutor::handleRead(int rpipe, unsigned int &result)
        -:   84:{
    #####:   85:    char type = 0;
    #####:   86:    if (read(rpipe, &type, 1) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   87:        if (errno == EAGAIN)
branch  0 never executed
branch  1 never executed
    #####:   88:            return 0;
        -:   89:
    #####:   90:        return -1;
        -:   91:    }
        -:   92:
    #####:   93:    if (type != REPORT_OUT && type != REPORT_ERROR && type != REPORT_INFO && type != CHILD_END) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   94:        std::cerr << "#### ThreadExecutor::handleRead error, type was:" << type << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   95:        std::exit(0);
call    0 never executed
        -:   96:    }
        -:   97:
    #####:   98:    unsigned int len = 0;
    #####:   99:    if (read(rpipe, &len, sizeof(len)) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  100:        std::cerr << "#### ThreadExecutor::handleRead error, type was:" << type << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  101:        std::exit(0);
call    0 never executed
        -:  102:    }
        -:  103:
        -:  104:    // Don't rely on incoming data being null-terminated.
        -:  105:    // Allocate +1 element and null-terminate the buffer.
    #####:  106:    char *buf = new char[len + 1];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  107:    const ssize_t readIntoBuf = read(rpipe, buf, len);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  108:    if (readIntoBuf <= 0) {
branch  0 never executed
branch  1 never executed
    #####:  109:        std::cerr << "#### ThreadExecutor::handleRead error, type was:" << type << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  110:        std::exit(0);
call    0 never executed
        -:  111:    }
    #####:  112:    buf[readIntoBuf] = 0;
        -:  113:
    #####:  114:    if (type == REPORT_OUT) {
branch  0 never executed
branch  1 never executed
    #####:  115:        mErrorLogger.reportOut(buf);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  116:    } else if (type == REPORT_ERROR || type == REPORT_INFO) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  117:        ErrorLogger::ErrorMessage msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  118:        msg.deserialize(buf);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        -:  119:
    #####:  120:        if (!mSettings.nomsg.isSuppressed(msg.toSuppressionsErrorMessage())) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
        -:  121:            // Alert only about unique errors
    #####:  122:            std::string errmsg = msg.toString(mSettings.verbose);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  123:            if (std::find(mErrorList.begin(), mErrorList.end(), errmsg) == mErrorList.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  124:                mErrorList.push_back(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  125:                if (type == REPORT_ERROR)
branch  0 never executed
branch  1 never executed
    #####:  126:                    mErrorLogger.reportErr(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  127:                else
    #####:  128:                    mErrorLogger.reportInfo(msg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  129:            }
    #####:  130:        }
    #####:  131:    } else if (type == CHILD_END) {
branch  0 never executed
branch  1 never executed
    #####:  132:        std::istringstream iss(buf);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  133:        unsigned int fileResult = 0;
    #####:  134:        iss >> fileResult;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  135:        result += fileResult;
    #####:  136:        delete [] buf;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  137:        return -1;
        -:  138:    }
        -:  139:
    #####:  140:    delete [] buf;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  141:    return 1;
        -:  142:}
        -:  143:
function _ZN14ThreadExecutor16checkLoadAverageEm called 0 returned 0% blocks executed 0%
    #####:  144:bool ThreadExecutor::checkLoadAverage(size_t nchildren)
        -:  145:{
        -:  146:#if defined(__CYGWIN__) || defined(__QNX__)  // getloadavg() is unsupported on Cygwin, Qnx.
        -:  147:    return true;
        -:  148:#else
    #####:  149:    if (!nchildren || !mSettings.loadAverage) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  150:        return true;
        -:  151:    }
        -:  152:
    #####:  153:    double sample(0);
    #####:  154:    if (getloadavg(&sample, 1) != 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  155:        // disable load average checking on getloadavg error
    #####:  156:        return true;
    #####:  157:    } else if (sample < mSettings.loadAverage) {
branch  0 never executed
branch  1 never executed
    #####:  158:        return true;
        -:  159:    }
    #####:  160:    return false;
        -:  161:#endif
        -:  162:}
        -:  163:
function _ZN14ThreadExecutor5checkEv called 0 returned 0% blocks executed 0%
    #####:  164:unsigned int ThreadExecutor::check()
        -:  165:{
    #####:  166:    mFileCount = 0;
    #####:  167:    unsigned int result = 0;
        -:  168:
    #####:  169:    std::size_t totalfilesize = 0;
    #####:  170:    for (std::map<std::string, std::size_t>::const_iterator i = mFiles.begin(); i != mFiles.end(); ++i) {
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  171:        totalfilesize += i->second;
call    0 never executed
        -:  172:    }
        -:  173:
    #####:  174:    std::list<int> rpipes;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  175:    std::map<pid_t, std::string> childFile;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  176:    std::map<int, std::string> pipeFile;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  177:    std::size_t processedsize = 0;
    #####:  178:    std::map<std::string, std::size_t>::const_iterator iFile = mFiles.begin();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  179:    std::list<ImportProject::FileSettings>::const_iterator iFileSettings = mSettings.project.fileSettings.begin();
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  180:    for (;;) {
        -:  181:        // Start a new child
    #####:  182:        size_t nchildren = rpipes.size();
call    0 never executed
    #####:  183:        if ((iFile != mFiles.end() || iFileSettings != mSettings.project.fileSettings.end()) && nchildren < mSettings.jobs && checkLoadAverage(nchildren)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
        -:  184:            int pipes[2];
    #####:  185:            if (pipe(pipes) == -1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  186:                std::cerr << "#### ThreadExecutor::check, pipe() failed: "<< std::strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  187:                std::exit(EXIT_FAILURE);
call    0 never executed
        -:  188:            }
        -:  189:
    #####:  190:            int flags = 0;
    #####:  191:            if ((flags = fcntl(pipes[0], F_GETFL, 0)) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  192:                std::cerr << "#### ThreadExecutor::check, fcntl(F_GETFL) failed: "<< std::strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  193:                std::exit(EXIT_FAILURE);
call    0 never executed
        -:  194:            }
        -:  195:
    #####:  196:            if (fcntl(pipes[0], F_SETFL, flags | O_NONBLOCK) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  197:                std::cerr << "#### ThreadExecutor::check, fcntl(F_SETFL) failed: "<< std::strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  198:                std::exit(EXIT_FAILURE);
call    0 never executed
        -:  199:            }
        -:  200:
    #####:  201:            pid_t pid = fork();
call    0 never executed
    #####:  202:            if (pid < 0) {
branch  0 never executed
branch  1 never executed
        -:  203:                // Error
    #####:  204:                std::cerr << "#### ThreadExecutor::check, Failed to create child process: "<< std::strerror(errno) << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    #####:  205:                std::exit(EXIT_FAILURE);
call    0 never executed
    #####:  206:            } else if (pid == 0) {
branch  0 never executed
branch  1 never executed
    #####:  207:                close(pipes[0]);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  208:                mWpipe = pipes[1];
        -:  209:
    #####:  210:                CppCheck fileChecker(*this, false);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  211:                fileChecker.settings() = mSettings;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  212:                unsigned int resultOfCheck = 0;
        -:  213:
    #####:  214:                if (iFileSettings != mSettings.project.fileSettings.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  215:                    resultOfCheck = fileChecker.check(*iFileSettings);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  216:                } else if (!mFileContents.empty() && mFileContents.find(iFile->first) != mFileContents.end()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
        -:  217:                    // File content was given as a string
    #####:  218:                    resultOfCheck = fileChecker.check(iFile->first, mFileContents[ iFile->first ]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  219:                } else {
        -:  220:                    // Read file from a file
    #####:  221:                    resultOfCheck = fileChecker.check(iFile->first);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  222:                }
        -:  223:
    #####:  224:                std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  225:                oss << resultOfCheck;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  226:                writeToPipe(CHILD_END, oss.str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  227:                std::exit(0);
call    0 never executed
        -:  228:            }
        -:  229:
    #####:  230:            close(pipes[1]);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  231:            rpipes.push_back(pipes[0]);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  232:            if (iFileSettings != mSettings.project.fileSettings.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  233:                childFile[pid] = iFileSettings->filename + ' ' + iFileSettings->cfg;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  234:                pipeFile[pipes[0]] = iFileSettings->filename + ' ' + iFileSettings->cfg;
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    #####:  235:                ++iFileSettings;
call    0 never executed
        -:  236:            } else {
    #####:  237:                childFile[pid] = iFile->first;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  238:                pipeFile[pipes[0]] = iFile->first;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  239:                ++iFile;
call    0 never executed
        -:  240:            }
    #####:  241:        } else if (!rpipes.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  242:            fd_set rfds;
    #####:  243:            FD_ZERO(&rfds);
call    0 never executed
    #####:  244:            for (std::list<int>::const_iterator rp = rpipes.begin(); rp != rpipes.end(); ++rp)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    #####:  245:                FD_SET(*rp, &rfds);
call    0 never executed
call    1 never executed
        -:  246:            struct timeval tv; // for every second polling of load average condition
    #####:  247:            tv.tv_sec = 1;
    #####:  248:            tv.tv_usec = 0;
    #####:  249:            int r = select(*std::max_element(rpipes.begin(), rpipes.end()) + 1, &rfds, nullptr, nullptr, &tv);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
        -:  250:
    #####:  251:            if (r > 0) {
branch  0 never executed
branch  1 never executed
    #####:  252:                std::list<int>::iterator rp = rpipes.begin();
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  253:                while (rp != rpipes.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  254:                    if (FD_ISSET(*rp, &rfds)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  255:                        int readRes = handleRead(*rp, result);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  256:                        if (readRes == -1) {
branch  0 never executed
branch  1 never executed
    #####:  257:                            std::size_t size = 0;
    #####:  258:                            std::map<int, std::string>::iterator p = pipeFile.find(*rp);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  259:                            if (p != pipeFile.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  260:                                std::string name = p->second;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  261:                                pipeFile.erase(p);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  262:                                std::map<std::string, std::size_t>::const_iterator fs = mFiles.find(name);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  263:                                if (fs != mFiles.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  264:                                    size = fs->second;
call    0 never executed
        -:  265:                                }
        -:  266:                            }
        -:  267:
    #####:  268:                            mFileCount++;
    #####:  269:                            processedsize += size;
    #####:  270:                            if (!mSettings.quiet)
branch  0 never executed
branch  1 never executed
    #####:  271:                                CppCheckExecutor::reportStatus(mFileCount, mFiles.size() + mSettings.project.fileSettings.size(), processedsize, totalfilesize);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  272:
    #####:  273:                            close(*rp);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  274:                            rp = rpipes.erase(rp);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  275:                        } else
    #####:  276:                            ++rp;
call    0 never executed
        -:  277:                    } else
    #####:  278:                        ++rp;
call    0 never executed
        -:  279:                }
        -:  280:            }
        -:  281:
    #####:  282:            int stat = 0;
    #####:  283:            pid_t child = waitpid(0, &stat, WNOHANG);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  284:            if (child > 0) {
branch  0 never executed
branch  1 never executed
    #####:  285:                std::string childname;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  286:                std::map<pid_t, std::string>::iterator c = childFile.find(child);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  287:                if (c != childFile.end()) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  288:                    childname = c->second;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  289:                    childFile.erase(c);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  290:                }
        -:  291:
    #####:  292:                if (WIFSIGNALED(stat)) {
branch  0 never executed
branch  1 never executed
    #####:  293:                    std::ostringstream oss;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  294:                    oss << "Internal error: Child process crashed with signal " << WTERMSIG(stat);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  295:
    #####:  296:                    std::list<ErrorLogger::ErrorMessage::FileLocation> locations;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  297:                    locations.emplace_back(childname, 0, 0);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  298:                    const ErrorLogger::ErrorMessage errmsg(locations,
        -:  299:                                                           emptyString,
        -:  300:                                                           Severity::error,
    #####:  301:                                                           oss.str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
        -:  302:                                                           "cppcheckError",
    #####:  303:                                                           false);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  304:
    #####:  305:                    if (!mSettings.nomsg.isSuppressed(errmsg.toSuppressionsErrorMessage()))
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  306:                        mErrorLogger.reportErr(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  307:                }
        -:  308:            }
        -:  309:        } else {
        -:  310:            // All done
    #####:  311:            break;
        -:  312:        }
    #####:  313:    }
        -:  314:
        -:  315:
    #####:  316:    return result;
        -:  317:}
        -:  318:
function _ZN14ThreadExecutor11writeToPipeENS_10PipeSignalERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  319:void ThreadExecutor::writeToPipe(PipeSignal type, const std::string &data)
        -:  320:{
    #####:  321:    unsigned int len = static_cast<unsigned int>(data.length() + 1);
call    0 never executed
    #####:  322:    char *out = new char[ len + 1 + sizeof(len)];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  323:    out[0] = static_cast<char>(type);
    #####:  324:    std::memcpy(&(out[1]), &len, sizeof(len));
    #####:  325:    std::memcpy(&(out[1+sizeof(len)]), data.c_str(), len);
call    0 never executed
    #####:  326:    if (write(mWpipe, out, len + 1 + sizeof(len)) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  327:        delete [] out;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  328:        out = nullptr;
    #####:  329:        std::cerr << "#### ThreadExecutor::writeToPipe, Failed to write to pipe" << std::endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  330:        std::exit(0);
call    0 never executed
        -:  331:    }
        -:  332:
    #####:  333:    delete [] out;
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  334:}
        -:  335:
function _ZN14ThreadExecutor9reportOutERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  336:void ThreadExecutor::reportOut(const std::string &outmsg)
        -:  337:{
    #####:  338:    writeToPipe(REPORT_OUT, outmsg);
call    0 never executed
    #####:  339:}
        -:  340:
function _ZN14ThreadExecutor9reportErrERKN11ErrorLogger12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  341:void ThreadExecutor::reportErr(const ErrorLogger::ErrorMessage &msg)
        -:  342:{
    #####:  343:    writeToPipe(REPORT_ERROR, msg.serialize());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  344:}
        -:  345:
function _ZN14ThreadExecutor10reportInfoERKN11ErrorLogger12ErrorMessageE called 0 returned 0% blocks executed 0%
    #####:  346:void ThreadExecutor::reportInfo(const ErrorLogger::ErrorMessage &msg)
        -:  347:{
    #####:  348:    writeToPipe(REPORT_INFO, msg.serialize());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
function _GLOBAL__sub_I__ZN14ThreadExecutorC2ERKNSt7__debug3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSt4lessIS7_ESaISt4pairIKS7_mEEEER8SettingsR11ErrorLogger called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  349:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        -:  350:
        -:  351:#elif defined(THREADING_MODEL_WIN)
        -:  352:
        -:  353:void ThreadExecutor::addFileContent(const std::string &path, const std::string &content)
        -:  354:{
        -:  355:    mFileContents[path] = content;
        -:  356:}
        -:  357:
        -:  358:unsigned int ThreadExecutor::check()
        -:  359:{
        -:  360:    HANDLE *threadHandles = new HANDLE[mSettings.jobs];
        -:  361:
        -:  362:    mItNextFile = mFiles.begin();
        -:  363:    mItNextFileSettings = mSettings.project.fileSettings.begin();
        -:  364:
        -:  365:    mProcessedFiles = 0;
        -:  366:    mProcessedSize = 0;
        -:  367:    mTotalFiles = mFiles.size() + mSettings.project.fileSettings.size();
        -:  368:    mTotalFileSize = 0;
        -:  369:    for (std::map<std::string, std::size_t>::const_iterator i = mFiles.begin(); i != mFiles.end(); ++i) {
        -:  370:        mTotalFileSize += i->second;
        -:  371:    }
        -:  372:
        -:  373:    InitializeCriticalSection(&mFileSync);
        -:  374:    InitializeCriticalSection(&mErrorSync);
        -:  375:    InitializeCriticalSection(&mReportSync);
        -:  376:
        -:  377:    for (unsigned int i = 0; i < mSettings.jobs; ++i) {
        -:  378:        threadHandles[i] = (HANDLE)_beginthreadex(nullptr, 0, threadProc, this, 0, nullptr);
        -:  379:        if (!threadHandles[i]) {
        -:  380:            std::cerr << "#### ThreadExecutor::check error, errno :" << errno << std::endl;
        -:  381:            exit(EXIT_FAILURE);
        -:  382:        }
        -:  383:    }
        -:  384:
        -:  385:    const DWORD waitResult = WaitForMultipleObjects(mSettings.jobs, threadHandles, TRUE, INFINITE);
        -:  386:    if (waitResult != WAIT_OBJECT_0) {
        -:  387:        if (waitResult == WAIT_FAILED) {
        -:  388:            std::cerr << "#### ThreadExecutor::check wait failed, result: " << waitResult << " error: " << GetLastError() << std::endl;
        -:  389:            exit(EXIT_FAILURE);
        -:  390:        } else {
        -:  391:            std::cerr << "#### ThreadExecutor::check wait failed, result: " << waitResult << std::endl;
        -:  392:            exit(EXIT_FAILURE);
        -:  393:        }
        -:  394:    }
        -:  395:
        -:  396:    unsigned int result = 0;
        -:  397:    for (unsigned int i = 0; i < mSettings.jobs; ++i) {
        -:  398:        DWORD exitCode;
        -:  399:
        -:  400:        if (!GetExitCodeThread(threadHandles[i], &exitCode)) {
        -:  401:            std::cerr << "#### ThreadExecutor::check get exit code failed, error:" << GetLastError() << std::endl;
        -:  402:            exit(EXIT_FAILURE);
        -:  403:        }
        -:  404:
        -:  405:        result += exitCode;
        -:  406:
        -:  407:        if (!CloseHandle(threadHandles[i])) {
        -:  408:            std::cerr << "#### ThreadExecutor::check close handle failed, error:" << GetLastError() << std::endl;
        -:  409:            exit(EXIT_FAILURE);
        -:  410:        }
        -:  411:    }
        -:  412:
        -:  413:    DeleteCriticalSection(&mFileSync);
        -:  414:    DeleteCriticalSection(&mErrorSync);
        -:  415:    DeleteCriticalSection(&mReportSync);
        -:  416:
        -:  417:    delete[] threadHandles;
        -:  418:
        -:  419:    return result;
        -:  420:}
        -:  421:
        -:  422:unsigned int __stdcall ThreadExecutor::threadProc(void *args)
        -:  423:{
        -:  424:    unsigned int result = 0;
        -:  425:
        -:  426:    ThreadExecutor *threadExecutor = static_cast<ThreadExecutor*>(args);
        -:  427:    std::map<std::string, std::size_t>::const_iterator &itFile = threadExecutor->mItNextFile;
        -:  428:    std::list<ImportProject::FileSettings>::const_iterator &itFileSettings = threadExecutor->mItNextFileSettings;
        -:  429:
        -:  430:    // guard static members of CppCheck against concurrent access
        -:  431:    EnterCriticalSection(&threadExecutor->mFileSync);
        -:  432:
        -:  433:    CppCheck fileChecker(*threadExecutor, false);
        -:  434:    fileChecker.settings() = threadExecutor->mSettings;
        -:  435:
        -:  436:    for (;;) {
        -:  437:        if (itFile == threadExecutor->mFiles.end() && itFileSettings == threadExecutor->mSettings.project.fileSettings.end()) {
        -:  438:            LeaveCriticalSection(&threadExecutor->mFileSync);
        -:  439:            break;
        -:  440:        }
        -:  441:
        -:  442:        std::size_t fileSize = 0;
        -:  443:        if (itFile != threadExecutor->mFiles.end()) {
        -:  444:            const std::string &file = itFile->first;
        -:  445:            fileSize = itFile->second;
        -:  446:            ++itFile;
        -:  447:
        -:  448:            LeaveCriticalSection(&threadExecutor->mFileSync);
        -:  449:
        -:  450:            const std::map<std::string, std::string>::const_iterator fileContent = threadExecutor->mFileContents.find(file);
        -:  451:            if (fileContent != threadExecutor->mFileContents.end()) {
        -:  452:                // File content was given as a string
        -:  453:                result += fileChecker.check(file, fileContent->second);
        -:  454:            } else {
        -:  455:                // Read file from a file
        -:  456:                result += fileChecker.check(file);
        -:  457:            }
        -:  458:        } else { // file settings..
        -:  459:            const ImportProject::FileSettings &fs = *itFileSettings;
        -:  460:            ++itFileSettings;
        -:  461:            LeaveCriticalSection(&threadExecutor->mFileSync);
        -:  462:            result += fileChecker.check(fs);
        -:  463:        }
        -:  464:
        -:  465:        EnterCriticalSection(&threadExecutor->mFileSync);
        -:  466:
        -:  467:        threadExecutor->mProcessedSize += fileSize;
        -:  468:        threadExecutor->mProcessedFiles++;
        -:  469:        if (!threadExecutor->mSettings.quiet) {
        -:  470:            EnterCriticalSection(&threadExecutor->mReportSync);
        -:  471:            CppCheckExecutor::reportStatus(threadExecutor->mProcessedFiles, threadExecutor->mTotalFiles, threadExecutor->mProcessedSize, threadExecutor->mTotalFileSize);
        -:  472:            LeaveCriticalSection(&threadExecutor->mReportSync);
        -:  473:        }
        -:  474:    }
        -:  475:    return result;
        -:  476:}
        -:  477:
        -:  478:void ThreadExecutor::reportOut(const std::string &outmsg)
        -:  479:{
        -:  480:    EnterCriticalSection(&mReportSync);
        -:  481:
        -:  482:    mErrorLogger.reportOut(outmsg);
        -:  483:
        -:  484:    LeaveCriticalSection(&mReportSync);
        -:  485:}
        -:  486:void ThreadExecutor::reportErr(const ErrorLogger::ErrorMessage &msg)
        -:  487:{
        -:  488:    report(msg, MessageType::REPORT_ERROR);
        -:  489:}
        -:  490:
        -:  491:void ThreadExecutor::reportInfo(const ErrorLogger::ErrorMessage &msg)
        -:  492:{
        -:  493:    report(msg, MessageType::REPORT_INFO);
        -:  494:}
        -:  495:
        -:  496:void ThreadExecutor::report(const ErrorLogger::ErrorMessage &msg, MessageType msgType)
        -:  497:{
        -:  498:    if (mSettings.nomsg.isSuppressed(msg.toSuppressionsErrorMessage()))
        -:  499:        return;
        -:  500:
        -:  501:    // Alert only about unique errors
        -:  502:    bool reportError = false;
        -:  503:    const std::string errmsg = msg.toString(mSettings.verbose);
        -:  504:
        -:  505:    EnterCriticalSection(&mErrorSync);
        -:  506:    if (std::find(mErrorList.begin(), mErrorList.end(), errmsg) == mErrorList.end()) {
        -:  507:        mErrorList.push_back(errmsg);
        -:  508:        reportError = true;
        -:  509:    }
        -:  510:    LeaveCriticalSection(&mErrorSync);
        -:  511:
        -:  512:    if (reportError) {
        -:  513:        EnterCriticalSection(&mReportSync);
        -:  514:
        -:  515:        switch (msgType) {
        -:  516:        case MessageType::REPORT_ERROR:
        -:  517:            mErrorLogger.reportErr(msg);
        -:  518:            break;
        -:  519:        case MessageType::REPORT_INFO:
        -:  520:            mErrorLogger.reportInfo(msg);
        -:  521:            break;
        -:  522:        }
        -:  523:
        -:  524:        LeaveCriticalSection(&mReportSync);
        -:  525:    }
        -:  526:}
        -:  527:
        -:  528:#else
        -:  529:
        -:  530:void ThreadExecutor::addFileContent(const std::string &/*path*/, const std::string &/*content*/)
        -:  531:{
        -:  532:
        -:  533:}
        -:  534:
        -:  535:unsigned int ThreadExecutor::check()
        -:  536:{
        -:  537:    return 0;
        -:  538:}
        -:  539:
        -:  540:void ThreadExecutor::reportOut(const std::string &/*outmsg*/)
        -:  541:{
        -:  542:
        -:  543:}
        -:  544:void ThreadExecutor::reportErr(const ErrorLogger::ErrorMessage &/*msg*/)
        -:  545:{
        -:  546:
        -:  547:}
        -:  548:
        -:  549:void ThreadExecutor::reportInfo(const ErrorLogger::ErrorMessage &/*msg*/)
        -:  550:{
        -:  551:
        -:  552:}
        -:  553:
        -:  554:#endif
