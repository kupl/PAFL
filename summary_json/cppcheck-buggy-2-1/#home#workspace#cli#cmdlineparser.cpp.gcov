        -:    0:Source:/home/workspace/cli/cmdlineparser.cpp
        -:    0:Graph:/home/workspace/build/cli/CMakeFiles/cli_objs.dir/cmdlineparser.gcno
        -:    0:Data:/home/workspace/build/cli/CMakeFiles/cli_objs.dir/cmdlineparser.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Cppcheck - A tool for static C/C++ code analysis
        -:    3: * Copyright (C) 2007-2019 Cppcheck team.
        -:    4: *
        -:    5: * This program is free software: you can redistribute it and/or modify
        -:    6: * it under the terms of the GNU General Public License as published by
        -:    7: * the Free Software Foundation, either version 3 of the License, or
        -:    8: * (at your option) any later version.
        -:    9: *
        -:   10: * This program is distributed in the hope that it will be useful,
        -:   11: * but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13: * GNU General Public License for more details.
        -:   14: *
        -:   15: * You should have received a copy of the GNU General Public License
        -:   16: * along with this program.  If not, see <http://www.gnu.org/licenses/>.
        -:   17: */
        -:   18:
        -:   19:#include "cmdlineparser.h"
        -:   20:
        -:   21:#include "check.h"
        -:   22:#include "cppcheckexecutor.h"
        -:   23:#include "filelister.h"
        -:   24:#include "importproject.h"
        -:   25:#include "path.h"
        -:   26:#include "platform.h"
        -:   27:#include "settings.h"
        -:   28:#include "standards.h"
        -:   29:#include "suppressions.h"
        -:   30:#include "threadexecutor.h" // Threading model
        -:   31:#include "timer.h"
        -:   32:#include "utils.h"
        -:   33:
        -:   34:#include <algorithm>
        -:   35:#include <cstdio>
        -:   36:#include <cstdlib> // EXIT_FAILURE
        -:   37:#include <cstring>
        -:   38:#include <iostream>
        -:   39:#include <list>
        -:   40:#include <set>
        -:   41:
        -:   42:#ifdef HAVE_RULES
        -:   43:// xml is used for rules
        -:   44:#include <tinyxml2.h>
        -:   45:#endif
        -:   46:
function _ZL14addFilesToListRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNSt7__debug6vectorIS4_SaIS4_EEE called 0 returned 0% blocks executed 0%
    #####:   47:static void addFilesToList(const std::string& FileList, std::vector<std::string>& PathNames)
        -:   48:{
        -:   49:    // To keep things initially simple, if the file can't be opened, just be silent and move on.
        -:   50:    std::istream *Files;
    #####:   51:    std::ifstream Infile;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   52:    if (FileList == "-") { // read from stdin
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   53:        Files = &std::cin;
        -:   54:    } else {
    #####:   55:        Infile.open(FileList);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:        Files = &Infile;
        -:   57:    }
    #####:   58:    if (Files && *Files) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
    #####:   59:        std::string FileName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   60:        while (std::getline(*Files, FileName)) { // next line
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   61:            if (!FileName.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   62:                PathNames.push_back(FileName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   63:            }
        -:   64:        }
        -:   65:    }
    #####:   66:}
        -:   67:
function _ZL21addIncludePathsToListRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPNSt7__debug4listIS4_SaIS4_EEE called 0 returned 0% blocks executed 0%
    #####:   68:static bool addIncludePathsToList(const std::string& FileList, std::list<std::string>* PathNames)
        -:   69:{
    #####:   70:    std::ifstream Files(FileList);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   71:    if (Files) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   72:        std::string PathName;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   73:        while (std::getline(Files, PathName)) { // next line
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   74:            if (!PathName.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:                PathName = Path::removeQuotationMarks(PathName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:   76:                PathName = Path::fromNativeSeparators(PathName);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:   77:
        -:   78:                // If path doesn't end with / or \, add it
    #####:   79:                if (!endsWith(PathName, '/'))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:                    PathName += '/';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   81:
    #####:   82:                PathNames->push_back(PathName);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   83:            }
        -:   84:        }
    #####:   85:        return true;
        -:   86:    }
    #####:   87:    return false;
        -:   88:}
        -:   89:
function _ZL13addPathsToSetRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPNSt7__debug3setIS4_St4lessIS4_ESaIS4_EEE called 0 returned 0% blocks executed 0%
    #####:   90:static bool addPathsToSet(const std::string& FileName, std::set<std::string>* set)
        -:   91:{
    #####:   92:    std::list<std::string> templist;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   93:    if (!addIncludePathsToList(FileName, &templist))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:   94:        return false;
    #####:   95:    set->insert(templist.begin(), templist.end());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:   96:    return true;
        -:   97:}
        -:   98:
function _ZN13CmdLineParserC2EP8Settings called 1 returned 100% blocks executed 100%
        1:   99:CmdLineParser::CmdLineParser(Settings *settings)
        -:  100:    : mSettings(settings)
        -:  101:    , mShowHelp(false)
        -:  102:    , mShowVersion(false)
        -:  103:    , mShowErrorMessages(false)
        1:  104:    , mExitAfterPrint(false)
call    0 returned 100%
call    1 returned 100%
        -:  105:{
        1:  106:}
        -:  107:
function _ZN13CmdLineParser12printMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  108:void CmdLineParser::printMessage(const std::string &message)
        -:  109:{
    #####:  110:    std::cout << message << std::endl;
call    0 never executed
call    1 never executed
    #####:  111:}
        -:  112:
function _ZN13CmdLineParser12printMessageEPKc called 0 returned 0% blocks executed 0%
    #####:  113:void CmdLineParser::printMessage(const char* message)
        -:  114:{
    #####:  115:    std::cout << message << std::endl;
call    0 never executed
call    1 never executed
    #####:  116:}
        -:  117:
function _ZN13CmdLineParser13parseFromArgsEiPKPKc called 0 returned 0% blocks executed 0%
    #####:  118:bool CmdLineParser::parseFromArgs(int argc, const char* const argv[])
        -:  119:{
    #####:  120:    bool def = false;
    #####:  121:    bool maxconfigs = false;
        -:  122:
    #####:  123:    mSettings->exename = argv[0];
call    0 never executed
        -:  124:
    #####:  125:    for (int i = 1; i < argc; i++) {
branch  0 never executed
branch  1 never executed
    #####:  126:        if (argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
    #####:  127:            if (std::strcmp(argv[i], "--version") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  128:                mShowVersion = true;
    #####:  129:                mExitAfterPrint = true;
    #####:  130:                return true;
        -:  131:            }
        -:  132:
    #####:  133:            else if (std::strncmp(argv[i], "--addon=", 8) == 0)
branch  0 never executed
branch  1 never executed
    #####:  134:                mSettings->addons.emplace_back(argv[i]+8);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  135:
    #####:  136:            else if (std::strncmp(argv[i], "--cppcheck-build-dir=", 21) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  137:                mSettings->buildDir = Path::fromNativeSeparators(argv[i] + 21);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    #####:  138:                if (endsWith(mSettings->buildDir, '/'))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  139:                    mSettings->buildDir.erase(mSettings->buildDir.size() - 1U);
call    0 never executed
call    1 never executed
        -:  140:            }
        -:  141:
        -:  142:            // Flag used for various purposes during debugging
    #####:  143:            else if (std::strcmp(argv[i], "--debug-simplified") == 0)
branch  0 never executed
branch  1 never executed
    #####:  144:                mSettings->debugSimplified = true;
        -:  145:
        -:  146:            // Show --debug output after the first simplifications
    #####:  147:            else if (std::strcmp(argv[i], "--debug") == 0 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  148:                     std::strcmp(argv[i], "--debug-normal") == 0)
    #####:  149:                mSettings->debugnormal = true;
        -:  150:
        -:  151:            // Show debug warnings
    #####:  152:            else if (std::strcmp(argv[i], "--debug-warnings") == 0)
branch  0 never executed
branch  1 never executed
    #####:  153:                mSettings->debugwarnings = true;
        -:  154:
        -:  155:            // Show template information
    #####:  156:            else if (std::strcmp(argv[i], "--debug-template") == 0)
branch  0 never executed
branch  1 never executed
    #####:  157:                mSettings->debugtemplate = true;
        -:  158:
        -:  159:            // dump cppcheck data
    #####:  160:            else if (std::strcmp(argv[i], "--dump") == 0)
branch  0 never executed
branch  1 never executed
    #####:  161:                mSettings->dump = true;
        -:  162:
        -:  163:            // max ctu depth
    #####:  164:            else if (std::strncmp(argv[i], "--max-ctu-depth=", 16) == 0)
branch  0 never executed
branch  1 never executed
    #####:  165:                mSettings->maxCtuDepth = std::atoi(argv[i] + 16);
        -:  166:
    #####:  167:            else if (std::strcmp(argv[i], "--experimental-fast") == 0)
branch  0 never executed
branch  1 never executed
        -:  168:                // TODO: Reomve this flag!
        -:  169:                ;
        -:  170:
        -:  171:            // (Experimental) exception handling inside cppcheck client
    #####:  172:            else if (std::strcmp(argv[i], "--exception-handling") == 0)
branch  0 never executed
branch  1 never executed
    #####:  173:                mSettings->exceptionHandling = true;
    #####:  174:            else if (std::strncmp(argv[i], "--exception-handling=", 21) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  175:                mSettings->exceptionHandling = true;
    #####:  176:                const std::string exceptionOutfilename = &(argv[i][21]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  177:                CppCheckExecutor::setExceptionOutput((exceptionOutfilename=="stderr") ? stderr : stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  178:            }
        -:  179:
        -:  180:            // Inconclusive checking
    #####:  181:            else if (std::strcmp(argv[i], "--inconclusive") == 0)
branch  0 never executed
branch  1 never executed
    #####:  182:                mSettings->inconclusive = true;
        -:  183:
        -:  184:            // Experimental: Safe checking
    #####:  185:            else if (std::strcmp(argv[i], "--safe-classes") == 0)
branch  0 never executed
branch  1 never executed
    #####:  186:                mSettings->safeChecks.classes = true;
        -:  187:
        -:  188:            // Experimental: Safe checking
    #####:  189:            else if (std::strcmp(argv[i], "--safe-functions") == 0)
branch  0 never executed
branch  1 never executed
    #####:  190:                mSettings->safeChecks.externalFunctions = mSettings->safeChecks.internalFunctions = true;
        -:  191:
        -:  192:            // Experimental: Verify
    #####:  193:            else if (std::strcmp(argv[i], "--verify") == 0)
branch  0 never executed
branch  1 never executed
    #####:  194:                mSettings->verification = true;
    #####:  195:            else if (std::strcmp(argv[i], "--debug-verify") == 0)
branch  0 never executed
branch  1 never executed
    #####:  196:                mSettings->debugVerification = true;
        -:  197:
        -:  198:            // Enforce language (--language=, -x)
    #####:  199:            else if (std::strncmp(argv[i], "--language=", 11) == 0 || std::strcmp(argv[i], "-x") == 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  200:                std::string str;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  201:                if (argv[i][2]) {
branch  0 never executed
branch  1 never executed
    #####:  202:                    str = argv[i]+11;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  203:                } else {
    #####:  204:                    i++;
    #####:  205:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  206:                        printMessage("cppcheck: No language given to '-x' option.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  207:                        return false;
        -:  208:                    }
    #####:  209:                    str = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  210:                }
        -:  211:
    #####:  212:                if (str == "c")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  213:                    mSettings->enforcedLang = Settings::C;
    #####:  214:                else if (str == "c++")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  215:                    mSettings->enforcedLang = Settings::CPP;
        -:  216:                else {
    #####:  217:                    printMessage("cppcheck: Unknown language '" + str + "' enforced.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  218:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  219:                }
        -:  220:            }
        -:  221:
        -:  222:            // Filter errors
    #####:  223:            else if (std::strncmp(argv[i], "--exitcode-suppressions=", 24) == 0) {
branch  0 never executed
branch  1 never executed
        -:  224:                // exitcode-suppressions=filename.txt
    #####:  225:                std::string filename = 24 + argv[i];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  226:
    #####:  227:                std::ifstream f(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  228:                if (!f.is_open()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  229:                    printMessage("cppcheck: Couldn't open the file: \"" + filename + "\".");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  230:                    return false;
        -:  231:                }
    #####:  232:                const std::string errmsg(mSettings->nofail.parseFile(f));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  233:                if (!errmsg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  234:                    printMessage(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  235:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  236:                }
        -:  237:            }
        -:  238:
        -:  239:            // Filter errors
    #####:  240:            else if (std::strncmp(argv[i], "--suppressions-list=", 20) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  241:                std::string filename = argv[i]+20;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  242:                std::ifstream f(filename);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  243:                if (!f.is_open()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  244:                    std::string message("cppcheck: Couldn't open the file: \"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  245:                    message += filename;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  246:                    message += "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  247:                    if (std::count(filename.begin(), filename.end(), ',') > 0 ||
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    #####:  248:                        std::count(filename.begin(), filename.end(), '.') > 1) {
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  249:                        // If user tried to pass multiple files (we can only guess that)
        -:  250:                        // e.g. like this: --suppressions-list=a.txt,b.txt
        -:  251:                        // print more detailed error message to tell user how he can solve the problem
    #####:  252:                        message += "\nIf you want to pass two files, you can do it e.g. like this:";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  253:                        message += "\n    cppcheck --suppressions-list=a.txt --suppressions-list=b.txt file.cpp";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  254:                    }
        -:  255:
    #####:  256:                    printMessage(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  257:                    return false;
        -:  258:                }
    #####:  259:                const std::string errmsg(mSettings->nomsg.parseFile(f));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  260:                if (!errmsg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  261:                    printMessage(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  262:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:                }
        -:  264:            }
        -:  265:
    #####:  266:            else if (std::strncmp(argv[i], "--suppress-xml=", 15) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  267:                const char * filename = argv[i] + 15;
    #####:  268:                const std::string errmsg(mSettings->nomsg.parseXmlFile(filename));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
    #####:  269:                if (!errmsg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  270:                    printMessage(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  271:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  272:                }
        -:  273:            }
        -:  274:
    #####:  275:            else if (std::strncmp(argv[i], "--suppress=", 11) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  276:                const std::string suppression = argv[i]+11;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  277:                const std::string errmsg(mSettings->nomsg.addSuppressionLine(suppression));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  278:                if (!errmsg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  279:                    printMessage(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  280:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  281:                }
        -:  282:            }
        -:  283:
        -:  284:            // Enables inline suppressions.
    #####:  285:            else if (std::strcmp(argv[i], "--inline-suppr") == 0)
branch  0 never executed
branch  1 never executed
    #####:  286:                mSettings->inlineSuppressions = true;
        -:  287:
        -:  288:            // Verbose error messages (configuration info)
    #####:  289:            else if (std::strcmp(argv[i], "-v") == 0 || std::strcmp(argv[i], "--verbose") == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  290:                mSettings->verbose = true;
        -:  291:
        -:  292:            // Force checking of files that have "too many" configurations
    #####:  293:            else if (std::strcmp(argv[i], "-f") == 0 || std::strcmp(argv[i], "--force") == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  294:                mSettings->force = true;
        -:  295:
        -:  296:            // Output relative paths
    #####:  297:            else if (std::strcmp(argv[i], "-rp") == 0 || std::strcmp(argv[i], "--relative-paths") == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  298:                mSettings->relativePaths = true;
    #####:  299:            else if (std::strncmp(argv[i], "-rp=", 4) == 0 || std::strncmp(argv[i], "--relative-paths=", 17) == 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  300:                mSettings->relativePaths = true;
    #####:  301:                if (argv[i][argv[i][3]=='='?4:17] != 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  302:                    std::string paths = argv[i]+(argv[i][3]=='='?4:17);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  303:                    for (;;) {
    #####:  304:                        const std::string::size_type pos = paths.find(';');
call    0 never executed
    #####:  305:                        if (pos == std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####:  306:                            mSettings->basePaths.push_back(Path::fromNativeSeparators(paths));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  307:                            break;
        -:  308:                        }
    #####:  309:                        mSettings->basePaths.push_back(Path::fromNativeSeparators(paths.substr(0, pos)));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  310:                        paths.erase(0, pos + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  311:                    }
        -:  312:                } else {
    #####:  313:                    printMessage("cppcheck: No paths specified for the '" + std::string(argv[i]) + "' option.");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    #####:  314:                    return false;
    #####:  315:                }
        -:  316:            }
        -:  317:
        -:  318:            // Write results in file
    #####:  319:            else if (std::strncmp(argv[i], "--output-file=", 14) == 0)
branch  0 never executed
branch  1 never executed
    #####:  320:                mSettings->outputFile = Path::simplifyPath(Path::fromNativeSeparators(argv[i] + 14));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
        -:  321:
        -:  322:            // Write results in results.plist
    #####:  323:            else if (std::strncmp(argv[i], "--plist-output=", 15) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  324:                mSettings->plistOutput = Path::simplifyPath(Path::fromNativeSeparators(argv[i] + 15));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
    #####:  325:                if (mSettings->plistOutput.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  326:                    mSettings->plistOutput = "./";
call    0 never executed
    #####:  327:                else if (!endsWith(mSettings->plistOutput,'/'))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  328:                    mSettings->plistOutput += '/';
call    0 never executed
        -:  329:            }
        -:  330:
        -:  331:            // Write results in results.xml
    #####:  332:            else if (std::strcmp(argv[i], "--xml") == 0)
branch  0 never executed
branch  1 never executed
    #####:  333:                mSettings->xml = true;
        -:  334:
        -:  335:            // Define the XML file version (and enable XML output)
    #####:  336:            else if (std::strncmp(argv[i], "--xml-version=", 14) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  337:                const std::string numberString(argv[i]+14);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  338:
    #####:  339:                std::istringstream iss(numberString);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  340:                if (!(iss >> mSettings->xml_version)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  341:                    printMessage("cppcheck: argument to '--xml-version' is not a number.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  342:                    return false;
        -:  343:                }
        -:  344:
    #####:  345:                if (mSettings->xml_version != 2) {
branch  0 never executed
branch  1 never executed
        -:  346:                    // We only have xml version 2
    #####:  347:                    printMessage("cppcheck: '--xml-version' can only be 2.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  348:                    return false;
        -:  349:                }
        -:  350:
        -:  351:                // Enable also XML if version is set
    #####:  352:                mSettings->xml = true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  353:            }
        -:  354:
        -:  355:            // Only print something when there are errors
    #####:  356:            else if (std::strcmp(argv[i], "-q") == 0 || std::strcmp(argv[i], "--quiet") == 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  357:                mSettings->quiet = true;
        -:  358:
        -:  359:            // Check configuration
    #####:  360:            else if (std::strcmp(argv[i], "--check-config") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  361:                mSettings->checkConfiguration = true;
        -:  362:            }
        -:  363:
        -:  364:            // Check library definitions
    #####:  365:            else if (std::strcmp(argv[i], "--check-library") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  366:                mSettings->checkLibrary = true;
        -:  367:            }
        -:  368:
    #####:  369:            else if (std::strncmp(argv[i], "--enable=", 9) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  370:                const std::string errmsg = mSettings->addEnabled(argv[i] + 9);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  371:                if (!errmsg.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  372:                    printMessage(errmsg);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  373:                    return false;
        -:  374:                }
        -:  375:                // when "style" is enabled, also enable "warning", "performance" and "portability"
    #####:  376:                if (mSettings->isEnabled(Settings::STYLE)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  377:                    mSettings->addEnabled("warning");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  378:                    mSettings->addEnabled("performance");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  379:                    mSettings->addEnabled("portability");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
call   13 never executed
call   14 never executed
        -:  380:                }
        -:  381:            }
        -:  382:
        -:  383:            // --error-exitcode=1
    #####:  384:            else if (std::strncmp(argv[i], "--error-exitcode=", 17) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  385:                const std::string temp = argv[i]+17;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  386:                std::istringstream iss(temp);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  387:                if (!(iss >> mSettings->exitCode)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  388:                    mSettings->exitCode = 0;
    #####:  389:                    printMessage("cppcheck: Argument must be an integer. Try something like '--error-exitcode=1'.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  390:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  391:                }
        -:  392:            }
        -:  393:
        -:  394:            // User define
    #####:  395:            else if (std::strncmp(argv[i], "-D", 2) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  396:                std::string define;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  397:
        -:  398:                // "-D define"
    #####:  399:                if (std::strcmp(argv[i], "-D") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  400:                    ++i;
    #####:  401:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  402:                        printMessage("cppcheck: argument to '-D' is missing.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  403:                        return false;
        -:  404:                    }
        -:  405:
    #####:  406:                    define = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  407:                }
        -:  408:                // "-Ddefine"
        -:  409:                else {
    #####:  410:                    define = 2 + argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  411:                }
        -:  412:
        -:  413:                // No "=", append a "=1"
    #####:  414:                if (define.find('=') == std::string::npos)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  415:                    define += "=1";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  416:
    #####:  417:                if (!mSettings->userDefines.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  418:                    mSettings->userDefines += ";";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  419:                mSettings->userDefines += define;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  420:
    #####:  421:                def = true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  422:            }
        -:  423:            // User undef
    #####:  424:            else if (std::strncmp(argv[i], "-U", 2) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  425:                std::string undef;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  426:
        -:  427:                // "-U undef"
    #####:  428:                if (std::strcmp(argv[i], "-U") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  429:                    ++i;
    #####:  430:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  431:                        printMessage("cppcheck: argument to '-U' is missing.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  432:                        return false;
        -:  433:                    }
        -:  434:
    #####:  435:                    undef = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  436:                }
        -:  437:                // "-Uundef"
        -:  438:                else {
    #####:  439:                    undef = 2 + argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  440:                }
        -:  441:
    #####:  442:                mSettings->userUndefs.insert(undef);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  443:            }
        -:  444:
        -:  445:            // -E
    #####:  446:            else if (std::strcmp(argv[i], "-E") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  447:                mSettings->preprocessOnly = true;
    #####:  448:                mSettings->quiet = true;
        -:  449:            }
        -:  450:
        -:  451:            // Include paths
    #####:  452:            else if (std::strncmp(argv[i], "-I", 2) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  453:                std::string path;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  454:
        -:  455:                // "-I path/"
    #####:  456:                if (std::strcmp(argv[i], "-I") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  457:                    ++i;
    #####:  458:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  459:                        printMessage("cppcheck: argument to '-I' is missing.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  460:                        return false;
        -:  461:                    }
    #####:  462:                    path = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  463:                }
        -:  464:
        -:  465:                // "-Ipath/"
        -:  466:                else {
    #####:  467:                    path = 2 + argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  468:                }
    #####:  469:                path = Path::removeQuotationMarks(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  470:                path = Path::fromNativeSeparators(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  471:
        -:  472:                // If path doesn't end with / or \, add it
    #####:  473:                if (!endsWith(path,'/'))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  474:                    path += '/';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  475:
    #####:  476:                mSettings->includePaths.push_back(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  477:            } else if (std::strncmp(argv[i], "--include=", 10) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  478:                std::string path = argv[i] + 10;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  479:
    #####:  480:                path = Path::fromNativeSeparators(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  481:
    #####:  482:                mSettings->userIncludes.push_back(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  483:            } else if (std::strncmp(argv[i], "--includes-file=", 16) == 0) {
branch  0 never executed
branch  1 never executed
        -:  484:                // open this file and read every input file (1 file name per line)
    #####:  485:                const std::string includesFile(16 + argv[i]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  486:                if (!addIncludePathsToList(includesFile, &mSettings->includePaths)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  487:                    printMessage("Cppcheck: unable to open includes file at '" + includesFile + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  488:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  489:                }
    #####:  490:            } else if (std::strncmp(argv[i], "--config-exclude=",17) ==0) {
branch  0 never executed
branch  1 never executed
    #####:  491:                std::string path = argv[i] + 17;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  492:                path = Path::fromNativeSeparators(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  493:                mSettings->configExcludePaths.insert(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  494:            } else if (std::strncmp(argv[i], "--config-excludes-file=", 23) == 0) {
branch  0 never executed
branch  1 never executed
        -:  495:                // open this file and read every input file (1 file name per line)
    #####:  496:                const std::string cfgExcludesFile(23 + argv[i]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  497:                if (!addPathsToSet(cfgExcludesFile, &mSettings->configExcludePaths)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  498:                    printMessage("Cppcheck: unable to open config excludes file at '" + cfgExcludesFile + "'");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  499:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  500:                }
        -:  501:            }
        -:  502:
        -:  503:            // file list specified
    #####:  504:            else if (std::strncmp(argv[i], "--file-list=", 12) == 0) {
branch  0 never executed
branch  1 never executed
        -:  505:                // open this file and read every input file (1 file name per line)
    #####:  506:                addFilesToList(12 + argv[i], mPathNames);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  507:            }
        -:  508:
        -:  509:            // Ignored paths
    #####:  510:            else if (std::strncmp(argv[i], "-i", 2) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  511:                std::string path;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  512:
        -:  513:                // "-i path/"
    #####:  514:                if (std::strcmp(argv[i], "-i") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  515:                    ++i;
    #####:  516:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  517:                        printMessage("cppcheck: argument to '-i' is missing.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  518:                        return false;
        -:  519:                    }
    #####:  520:                    path = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  521:                }
        -:  522:
        -:  523:                // "-ipath/"
        -:  524:                else {
    #####:  525:                    path = 2 + argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  526:                }
        -:  527:
    #####:  528:                if (!path.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  529:                    path = Path::removeQuotationMarks(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  530:                    path = Path::fromNativeSeparators(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  531:                    path = Path::simplifyPath(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
        -:  532:
    #####:  533:                    if (FileLister::isDirectory(path)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  534:                        // If directory name doesn't end with / or \, add it
    #####:  535:                        if (!endsWith(path, '/'))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  536:                            path += '/';
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  537:                    }
    #####:  538:                    mIgnoredPaths.push_back(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  539:                }
        -:  540:            }
        -:  541:
        -:  542:            // --library
    #####:  543:            else if (std::strncmp(argv[i], "--library=", 10) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  544:                std::string lib(argv[i] + 10);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  545:                mSettings->libraries.push_back(lib);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  546:            }
        -:  547:
        -:  548:            // --project
    #####:  549:            else if (std::strncmp(argv[i], "--project=", 10) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  550:                const std::string projectFile = argv[i]+10;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  551:                ImportProject::Type projType = mSettings->project.import(projectFile, mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  552:                if (projType == ImportProject::Type::CPPCHECK_GUI) {
branch  0 never executed
branch  1 never executed
    #####:  553:                    mPathNames = mSettings->project.guiProject.pathNames;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  554:                    for (const std::string &lib : mSettings->project.guiProject.libraries)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    #####:  555:                        mSettings->libraries.push_back(lib);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  556:
    #####:  557:                    for (const std::string &ignorePath : mSettings->project.guiProject.excludedPaths)
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  558:                        mIgnoredPaths.emplace_back(ignorePath);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  559:
    #####:  560:                    const std::string platform(mSettings->project.guiProject.platform);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
        -:  561:
    #####:  562:                    if (platform == "win32A")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  563:                        mSettings->platform(Settings::Win32A);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  564:                    else if (platform == "win32W")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  565:                        mSettings->platform(Settings::Win32W);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  566:                    else if (platform == "win64")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  567:                        mSettings->platform(Settings::Win64);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  568:                    else if (platform == "unix32")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  569:                        mSettings->platform(Settings::Unix32);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  570:                    else if (platform == "unix64")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  571:                        mSettings->platform(Settings::Unix64);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  572:                    else if (platform == "native")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  573:                        mSettings->platform(Settings::Native);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  574:                    else if (platform == "unspecified" || platform == "Unspecified" || platform == "")
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -:  575:                        ;
    #####:  576:                    else if (!mSettings->loadPlatformFile(argv[0], platform)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  577:                        std::string message("cppcheck: error: unrecognized platform: \"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
    #####:  578:                        message += platform;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  579:                        message += "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  580:                        printMessage(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  581:                        return false;
        -:  582:                    }
        -:  583:
    #####:  584:                    if (!mSettings->project.guiProject.projectFile.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  585:                        projType = mSettings->project.import(mSettings->project.guiProject.projectFile, mSettings);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  586:                }
    #####:  587:                if (projType == ImportProject::Type::VS_SLN || projType == ImportProject::Type::VS_VCXPROJ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  588:                    if (mSettings->project.guiProject.analyzeAllVsConfigs == "false")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  589:                        mSettings->project.selectOneVsConfig(mSettings->platformType);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  590:                    if (!CppCheckExecutor::tryLoadLibrary(mSettings->library, argv[0], "windows.cfg")) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  591:                        // This shouldn't happen normally.
    #####:  592:                        printMessage("cppcheck: Failed to load 'windows.cfg'. Your Cppcheck installation is broken. Please re-install.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  593:                        return false;
        -:  594:                    }
        -:  595:                }
    #####:  596:                if (projType == ImportProject::Type::MISSING) {
branch  0 never executed
branch  1 never executed
    #####:  597:                    printMessage("cppcheck: Failed to open project '" + projectFile + "'.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  598:                    return false;
        -:  599:                }
    #####:  600:                if (projType == ImportProject::Type::UNKNOWN) {
branch  0 never executed
branch  1 never executed
    #####:  601:                    printMessage("cppcheck: Failed to load project '" + projectFile + "'. The format is unknown.");
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  602:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  603:                }
        -:  604:            }
        -:  605:
        -:  606:            // Report progress
    #####:  607:            else if (std::strcmp(argv[i], "--report-progress") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  608:                mSettings->reportProgress = true;
        -:  609:            }
        -:  610:
        -:  611:            // --std
    #####:  612:            else if (std::strcmp(argv[i], "--std=posix") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  613:                printMessage("cppcheck: Option --std=posix is deprecated and will be removed in 1.95.");
call    0 never executed
    #####:  614:            } else if (std::strcmp(argv[i], "--std=c89") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  615:                mSettings->standards.c = Standards::C89;
    #####:  616:            } else if (std::strcmp(argv[i], "--std=c99") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  617:                mSettings->standards.c = Standards::C99;
    #####:  618:            } else if (std::strcmp(argv[i], "--std=c11") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  619:                mSettings->standards.c = Standards::C11;
    #####:  620:            } else if (std::strcmp(argv[i], "--std=c++03") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  621:                mSettings->standards.cpp = Standards::CPP03;
    #####:  622:            } else if (std::strcmp(argv[i], "--std=c++11") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  623:                mSettings->standards.cpp = Standards::CPP11;
    #####:  624:            } else if (std::strcmp(argv[i], "--std=c++14") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  625:                mSettings->standards.cpp = Standards::CPP14;
    #####:  626:            } else if (std::strcmp(argv[i], "--std=c++17") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  627:                mSettings->standards.cpp = Standards::CPP17;
    #####:  628:            } else if (std::strcmp(argv[i], "--std=c++20") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  629:                mSettings->standards.cpp = Standards::CPP20;
        -:  630:            }
        -:  631:
        -:  632:            // Output formatter
    #####:  633:            else if (std::strcmp(argv[i], "--template") == 0 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  634:                     std::strncmp(argv[i], "--template=", 11) == 0) {
        -:  635:                // "--template format"
    #####:  636:                if (argv[i][10] == '=')
branch  0 never executed
branch  1 never executed
    #####:  637:                    mSettings->templateFormat = argv[i] + 11;
call    0 never executed
    #####:  638:                else if ((i+1) < argc && argv[i+1][0] != '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  639:                    ++i;
    #####:  640:                    mSettings->templateFormat = argv[i];
call    0 never executed
        -:  641:                } else {
    #####:  642:                    printMessage("cppcheck: argument to '--template' is missing.");
call    0 never executed
    #####:  643:                    return false;
        -:  644:                }
        -:  645:
    #####:  646:                if (mSettings->templateFormat == "gcc") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  647:                    mSettings->templateFormat = "{file}:{line}:{column}: warning: {message} [{id}]\\n{code}";
call    0 never executed
    #####:  648:                    mSettings->templateLocation = "{file}:{line}:{column}: note: {info}\\n{code}";
call    0 never executed
    #####:  649:                } else if (mSettings->templateFormat == "daca2") {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  650:                    mSettings->templateFormat = "{file}:{line}:{column}: {severity}: {message} [{id}]";
call    0 never executed
    #####:  651:                    mSettings->templateLocation = "{file}:{line}:{column}: note: {info}";
call    0 never executed
    #####:  652:                } else if (mSettings->templateFormat == "vs")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  653:                    mSettings->templateFormat = "{file}({line}): {severity}: {message}";
call    0 never executed
    #####:  654:                else if (mSettings->templateFormat == "edit")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  655:                    mSettings->templateFormat = "{file} +{line}: {severity}: {message}";
call    0 never executed
    #####:  656:                else if (mSettings->templateFormat == "cppcheck1")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  657:                    mSettings->templateFormat = "{callstack}: ({severity}{inconclusive:, inconclusive}) {message}";
call    0 never executed
        -:  658:            }
        -:  659:
    #####:  660:            else if (std::strcmp(argv[i], "--template-location") == 0 ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  661:                     std::strncmp(argv[i], "--template-location=", 20) == 0) {
        -:  662:                // "--template-location format"
    #####:  663:                if (argv[i][19] == '=')
branch  0 never executed
branch  1 never executed
    #####:  664:                    mSettings->templateLocation = argv[i] + 20;
call    0 never executed
    #####:  665:                else if ((i+1) < argc && argv[i+1][0] != '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  666:                    ++i;
    #####:  667:                    mSettings->templateLocation = argv[i];
call    0 never executed
        -:  668:                } else {
    #####:  669:                    printMessage("cppcheck: argument to '--template' is missing.");
call    0 never executed
    #####:  670:                    return false;
        -:  671:                }
        -:  672:            }
        -:  673:
        -:  674:            // Checking threads
    #####:  675:            else if (std::strncmp(argv[i], "-j", 2) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  676:                std::string numberString;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  677:
        -:  678:                // "-j 3"
    #####:  679:                if (std::strcmp(argv[i], "-j") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  680:                    ++i;
    #####:  681:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  682:                        printMessage("cppcheck: argument to '-j' is missing.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  683:                        return false;
        -:  684:                    }
        -:  685:
    #####:  686:                    numberString = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  687:                }
        -:  688:
        -:  689:                // "-j3"
        -:  690:                else
    #####:  691:                    numberString = argv[i]+2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  692:
    #####:  693:                std::istringstream iss(numberString);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  694:                if (!(iss >> mSettings->jobs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  695:                    printMessage("cppcheck: argument to '-j' is not a number.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  696:                    return false;
        -:  697:                }
        -:  698:
    #####:  699:                if (mSettings->jobs > 10000) {
branch  0 never executed
branch  1 never executed
        -:  700:                    // This limit is here just to catch typos. If someone has
        -:  701:                    // need for more jobs, this value should be increased.
    #####:  702:                    printMessage("cppcheck: argument for '-j' is allowed to be 10000 at max.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  703:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  704:                }
    #####:  705:            } else if (std::strncmp(argv[i], "-l", 2) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  706:                std::string numberString;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  707:
        -:  708:                // "-l 3"
    #####:  709:                if (std::strcmp(argv[i], "-l") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  710:                    ++i;
    #####:  711:                    if (i >= argc || argv[i][0] == '-') {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  712:                        printMessage("cppcheck: argument to '-l' is missing.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  713:                        return false;
        -:  714:                    }
        -:  715:
    #####:  716:                    numberString = argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  717:                }
        -:  718:
        -:  719:                // "-l3"
        -:  720:                else
    #####:  721:                    numberString = argv[i]+2;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  722:
    #####:  723:                std::istringstream iss(numberString);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:  724:                if (!(iss >> mSettings->loadAverage)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  725:                    printMessage("cppcheck: argument to '-l' is not a number.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  726:                    return false;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  727:                }
        -:  728:            }
        -:  729:
        -:  730:            // print all possible error messages..
    #####:  731:            else if (std::strcmp(argv[i], "--errorlist") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  732:                mShowErrorMessages = true;
    #####:  733:                mSettings->xml = true;
    #####:  734:                mExitAfterPrint = true;
        -:  735:            }
        -:  736:
        -:  737:            // documentation..
    #####:  738:            else if (std::strcmp(argv[i], "--doc") == 0) {
branch  0 never executed
branch  1 never executed
    #####:  739:                std::ostringstream doc;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
        -:  740:                // Get documentation..
    #####:  741:                for (const Check * it : Check::instances()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    #####:  742:                    const std::string& name(it->name());
call    0 never executed
    #####:  743:                    const std::string info(it->classInfo());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:  744:                    if (!name.empty() && !info.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  745:                        doc << "## " << name << " ##\n"
    #####:  746:                            << info << "\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
        -:  747:                }
        -:  748:
    #####:  749:                std::cout << doc.str();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    #####:  750:                mExitAfterPrint = true;
    #####:  751:                return true;
        -:  752:            }
        -:  753:
        -:  754:            // show timing information..
    #####:  755:            else if (std::strncmp(argv[i], "--showtime=", 11) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  756:                const std::string showtimeMode = argv[i] + 11;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  757:                if (showtimeMode == "file")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  758:                    mSettings->showtime = SHOWTIME_MODES::SHOWTIME_FILE;
    #####:  759:                else if (showtimeMode == "summary")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  760:                    mSettings->showtime = SHOWTIME_MODES::SHOWTIME_SUMMARY;
    #####:  761:                else if (showtimeMode == "top5")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  762:                    mSettings->showtime = SHOWTIME_MODES::SHOWTIME_TOP5;
    #####:  763:                else if (showtimeMode.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  764:                    mSettings->showtime = SHOWTIME_MODES::SHOWTIME_NONE;
        -:  765:                else {
    #####:  766:                    std::string message("cppcheck: error: unrecognized showtime mode: \"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  767:                    message += showtimeMode;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  768:                    message += "\". Supported modes: file, summary, top5.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  769:                    printMessage(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  770:                    return false;
        -:  771:                }
        -:  772:            }
        -:  773:
        -:  774:#ifdef HAVE_RULES
        -:  775:            // Rule given at command line
        -:  776:            else if (std::strncmp(argv[i], "--rule=", 7) == 0) {
        -:  777:                Settings::Rule rule;
        -:  778:                rule.pattern = 7 + argv[i];
        -:  779:                mSettings->rules.push_back(rule);
        -:  780:            }
        -:  781:
        -:  782:            // Rule file
        -:  783:            else if (std::strncmp(argv[i], "--rule-file=", 12) == 0) {
        -:  784:                tinyxml2::XMLDocument doc;
        -:  785:                if (doc.LoadFile(12+argv[i]) == tinyxml2::XML_SUCCESS) {
        -:  786:                    tinyxml2::XMLElement *node = doc.FirstChildElement();
        -:  787:                    for (; node && strcmp(node->Value(), "rule") == 0; node = node->NextSiblingElement()) {
        -:  788:                        Settings::Rule rule;
        -:  789:
        -:  790:                        tinyxml2::XMLElement *tokenlist = node->FirstChildElement("tokenlist");
        -:  791:                        if (tokenlist)
        -:  792:                            rule.tokenlist = tokenlist->GetText();
        -:  793:
        -:  794:                        tinyxml2::XMLElement *pattern = node->FirstChildElement("pattern");
        -:  795:                        if (pattern) {
        -:  796:                            rule.pattern = pattern->GetText();
        -:  797:                        }
        -:  798:
        -:  799:                        tinyxml2::XMLElement *message = node->FirstChildElement("message");
        -:  800:                        if (message) {
        -:  801:                            tinyxml2::XMLElement *severity = message->FirstChildElement("severity");
        -:  802:                            if (severity)
        -:  803:                                rule.severity = Severity::fromString(severity->GetText());
        -:  804:
        -:  805:                            tinyxml2::XMLElement *id = message->FirstChildElement("id");
        -:  806:                            if (id)
        -:  807:                                rule.id = id->GetText();
        -:  808:
        -:  809:                            tinyxml2::XMLElement *summary = message->FirstChildElement("summary");
        -:  810:                            if (summary)
        -:  811:                                rule.summary = summary->GetText() ? summary->GetText() : "";
        -:  812:                        }
        -:  813:
        -:  814:                        if (!rule.pattern.empty())
        -:  815:                            mSettings->rules.push_back(rule);
        -:  816:                    }
        -:  817:                } else {
        -:  818:                    printMessage("cppcheck: error: unable to load rule-file: " + std::string(12+argv[i]));
        -:  819:                    return false;
        -:  820:                }
        -:  821:            }
        -:  822:#endif
        -:  823:
        -:  824:            // Specify platform
    #####:  825:            else if (std::strncmp(argv[i], "--platform=", 11) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  826:                const std::string platform(11+argv[i]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -:  827:
    #####:  828:                if (platform == "win32A")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:                    mSettings->platform(Settings::Win32A);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  830:                else if (platform == "win32W")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:                    mSettings->platform(Settings::Win32W);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  832:                else if (platform == "win64")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:                    mSettings->platform(Settings::Win64);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  834:                else if (platform == "unix32")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  835:                    mSettings->platform(Settings::Unix32);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:                else if (platform == "unix64")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  837:                    mSettings->platform(Settings::Unix64);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  838:                else if (platform == "native")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:                    mSettings->platform(Settings::Native);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  840:                else if (platform == "unspecified")
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  841:                    mSettings->platform(Settings::Unspecified);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:                else if (!mSettings->loadPlatformFile(argv[0], platform)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  843:                    std::string message("cppcheck: error: unrecognized platform: \"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
    #####:  844:                    message += platform;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:                    message += "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  846:                    printMessage(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:                    return false;
        -:  848:                }
        -:  849:            }
        -:  850:
        -:  851:            // Set maximum number of #ifdef configurations to check
    #####:  852:            else if (std::strncmp(argv[i], "--max-configs=", 14) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  853:                mSettings->force = false;
        -:  854:
    #####:  855:                std::istringstream iss(14+argv[i]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    #####:  856:                if (!(iss >> mSettings->maxConfigs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:  857:                    printMessage("cppcheck: argument to '--max-configs=' is not a number.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  858:                    return false;
        -:  859:                }
        -:  860:
    #####:  861:                if (mSettings->maxConfigs < 1) {
branch  0 never executed
branch  1 never executed
    #####:  862:                    printMessage("cppcheck: argument to '--max-configs=' must be greater than 0.");
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  863:                    return false;
        -:  864:                }
        -:  865:
    #####:  866:                maxconfigs = true;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  867:            }
        -:  868:
        -:  869:            // Print help
    #####:  870:            else if (std::strcmp(argv[i], "-h") == 0 || std::strcmp(argv[i], "--help") == 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  871:                mPathNames.clear();
call    0 never executed
    #####:  872:                mShowHelp = true;
    #####:  873:                mExitAfterPrint = true;
    #####:  874:                break;
        -:  875:            }
        -:  876:
        -:  877:            else {
    #####:  878:                std::string message("cppcheck: error: unrecognized command line option: \"");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    #####:  879:                message += argv[i];
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  880:                message += "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  881:                printMessage(message);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  882:                return false;
        -:  883:            }
        -:  884:        }
        -:  885:
        -:  886:        else {
    #####:  887:            std::string path = Path::removeQuotationMarks(argv[i]);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  888:            path = Path::fromNativeSeparators(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    #####:  889:            mPathNames.push_back(path);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  890:        }
        -:  891:    }
        -:  892:
        -:  893:    // Default template format..
    #####:  894:    if (mSettings->templateFormat.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  895:        mSettings->templateFormat = "{file}:{line}:{column}: {severity}:{inconclusive:inconclusive:} {message} [{id}]\\n{code}";
call    0 never executed
    #####:  896:        if (mSettings->templateLocation.empty())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  897:            mSettings->templateLocation = "{file}:{line}:{column}: note: {info}\\n{code}";
call    0 never executed
        -:  898:    }
        -:  899:
    #####:  900:    mSettings->project.ignorePaths(mIgnoredPaths);
call    0 never executed
        -:  901:
    #####:  902:    if (mSettings->force)
branch  0 never executed
branch  1 never executed
    #####:  903:        mSettings->maxConfigs = ~0U;
        -:  904:
    #####:  905:    else if ((def || mSettings->preprocessOnly) && !maxconfigs)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  906:        mSettings->maxConfigs = 1U;
        -:  907:
    #####:  908:    if (mSettings->isEnabled(Settings::UNUSED_FUNCTION) && mSettings->jobs > 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  909:        printMessage("cppcheck: unusedFunction check can't be used with '-j' option. Disabling unusedFunction check.");
call    0 never executed
        -:  910:    }
        -:  911:
    #####:  912:    if (argc <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  913:        mShowHelp = true;
    #####:  914:        mExitAfterPrint = true;
        -:  915:    }
        -:  916:
    #####:  917:    if (mShowHelp) {
branch  0 never executed
branch  1 never executed
    #####:  918:        printHelp();
call    0 never executed
    #####:  919:        return true;
        -:  920:    }
        -:  921:
        -:  922:    // Print error only if we have "real" command and expect files
    #####:  923:    if (!mExitAfterPrint && mPathNames.empty() && mSettings->project.fileSettings.empty()) {
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  924:        printMessage("cppcheck: No C or C++ source files found.");
call    0 never executed
    #####:  925:        return false;
        -:  926:    }
        -:  927:
        -:  928:    // Use paths _pathnames if no base paths for relative path output are given
    #####:  929:    if (mSettings->basePaths.empty() && mSettings->relativePaths)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####:  930:        mSettings->basePaths = mPathNames;
call    0 never executed
        -:  931:
    #####:  932:    return true;
        -:  933:}
        -:  934:
function _ZN13CmdLineParser9printHelpEv called 0 returned 0% blocks executed 0%
    #####:  935:void CmdLineParser::printHelp()
        -:  936:{
        -:  937:    std::cout << "Cppcheck - A tool for static C/C++ code analysis\n"
        -:  938:              "\n"
        -:  939:              "Syntax:\n"
        -:  940:              "    cppcheck [OPTIONS] [files or paths]\n"
        -:  941:              "\n"
        -:  942:              "If a directory is given instead of a filename, *.cpp, *.cxx, *.cc, *.c++, *.c,\n"
        -:  943:              "*.tpp, and *.txx files are checked recursively from the given directory.\n\n"
        -:  944:              "Options:\n"
        -:  945:              "    --addon=<addon>\n"
        -:  946:              "                         Execute addon. i.e. cert.\n"
        -:  947:              "    --cppcheck-build-dir=<dir>\n"
        -:  948:              "                         Analysis output directory. Useful for various data.\n"
        -:  949:              "                         Some possible usages are; whole program analysis,\n"
        -:  950:              "                         incremental analysis, distributed analysis.\n"
        -:  951:              "    --check-config       Check cppcheck configuration. The normal code\n"
        -:  952:              "                         analysis is disabled by this flag.\n"
        -:  953:              "    --check-library      Show information messages when library files have\n"
        -:  954:              "                         incomplete info.\n"
        -:  955:              "    --config-exclude=<dir>\n"
        -:  956:              "                         Path (prefix) to be excluded from configuration\n"
        -:  957:              "                         checking. Preprocessor configurations defined in\n"
        -:  958:              "                         headers (but not sources) matching the prefix will not\n"
        -:  959:              "                         be considered for evaluation.\n"
        -:  960:              "    --config-excludes-file=<file>\n"
        -:  961:              "                         A file that contains a list of config-excludes\n"
        -:  962:              "    --doc                Print a list of all available checks.\n"
        -:  963:              "    --dump               Dump xml data for each translation unit. The dump\n"
        -:  964:              "                         files have the extension .dump and contain ast,\n"
        -:  965:              "                         tokenlist, symboldatabase, valueflow.\n"
        -:  966:              "    -D<ID>               Define preprocessor symbol. Unless --max-configs or\n"
        -:  967:              "                         --force is used, Cppcheck will only check the given\n"
        -:  968:              "                         configuration when -D is used.\n"
        -:  969:              "                         Example: '-DDEBUG=1 -D__cplusplus'.\n"
        -:  970:              "    -U<ID>               Undefine preprocessor symbol. Use -U to explicitly\n"
        -:  971:              "                         hide certain #ifdef <ID> code paths from checking.\n"
        -:  972:              "                         Example: '-UDEBUG'\n"
        -:  973:              "    -E                   Print preprocessor output on stdout and don't do any\n"
        -:  974:              "                         further processing.\n"
        -:  975:              "    --enable=<id>        Enable additional checks. The available ids are:\n"
        -:  976:              "                          * all\n"
        -:  977:              "                                  Enable all checks. It is recommended to only\n"
        -:  978:              "                                  use --enable=all when the whole program is\n"
        -:  979:              "                                  scanned, because this enables unusedFunction.\n"
        -:  980:              "                          * warning\n"
        -:  981:              "                                  Enable warning messages\n"
        -:  982:              "                          * style\n"
        -:  983:              "                                  Enable all coding style checks. All messages\n"
        -:  984:              "                                  with the severities 'style', 'performance' and\n"
        -:  985:              "                                  'portability' are enabled.\n"
        -:  986:              "                          * performance\n"
        -:  987:              "                                  Enable performance messages\n"
        -:  988:              "                          * portability\n"
        -:  989:              "                                  Enable portability messages\n"
        -:  990:              "                          * information\n"
        -:  991:              "                                  Enable information messages\n"
        -:  992:              "                          * unusedFunction\n"
        -:  993:              "                                  Check for unused functions. It is recommend\n"
        -:  994:              "                                  to only enable this when the whole program is\n"
        -:  995:              "                                  scanned.\n"
        -:  996:              "                          * missingInclude\n"
        -:  997:              "                                  Warn if there are missing includes. For\n"
        -:  998:              "                                  detailed information, use '--check-config'.\n"
        -:  999:              "                         Several ids can be given if you separate them with\n"
        -: 1000:              "                         commas. See also --std\n"
        -: 1001:              "    --error-exitcode=<n> If errors are found, integer [n] is returned instead of\n"
    #####: 1002:              "                         the default '0'. '" << EXIT_FAILURE << "' is returned\n"
call    0 never executed
call    1 never executed
        -: 1003:              "                         if arguments are not valid or if no input files are\n"
        -: 1004:              "                         provided. Note that your operating system can modify\n"
        -: 1005:              "                         this value, e.g. '256' can become '0'.\n"
        -: 1006:              "    --errorlist          Print a list of all the error messages in XML format.\n"
        -: 1007:              "    --exitcode-suppressions=<file>\n"
        -: 1008:              "                         Used when certain messages should be displayed but\n"
        -: 1009:              "                         should not cause a non-zero exitcode.\n"
        -: 1010:              "    --file-list=<file>   Specify the files to check in a text file. Add one\n"
        -: 1011:              "                         filename per line. When file is '-,' the file list will\n"
        -: 1012:              "                         be read from standard input.\n"
        -: 1013:              "    -f, --force          Force checking of all configurations in files. If used\n"
        -: 1014:              "                         together with '--max-configs=', the last option is the\n"
        -: 1015:              "                         one that is effective.\n"
        -: 1016:              "    -h, --help           Print this help.\n"
        -: 1017:              "    -I <dir>             Give path to search for include files. Give several -I\n"
        -: 1018:              "                         parameters to give several paths. First given path is\n"
        -: 1019:              "                         searched for contained header files first. If paths are\n"
        -: 1020:              "                         relative to source files, this is not needed.\n"
        -: 1021:              "    --includes-file=<file>\n"
        -: 1022:              "                         Specify directory paths to search for included header\n"
        -: 1023:              "                         files in a text file. Add one include path per line.\n"
        -: 1024:              "                         First given path is searched for contained header\n"
        -: 1025:              "                         files first. If paths are relative to source files,\n"
        -: 1026:              "                         this is not needed.\n"
        -: 1027:              "    --include=<file>\n"
        -: 1028:              "                         Force inclusion of a file before the checked file. Can\n"
        -: 1029:              "                         be used for example when checking the Linux kernel,\n"
        -: 1030:              "                         where autoconf.h needs to be included for every file\n"
        -: 1031:              "                         compiled. Works the same way as the GCC -include\n"
        -: 1032:              "                         option.\n"
        -: 1033:              "    -i <dir or file>     Give a source file or source file directory to exclude\n"
        -: 1034:              "                         from the check. This applies only to source files so\n"
        -: 1035:              "                         header files included by source files are not matched.\n"
        -: 1036:              "                         Directory name is matched to all parts of the path.\n"
        -: 1037:              "    --inconclusive       Allow that Cppcheck reports even though the analysis is\n"
        -: 1038:              "                         inconclusive.\n"
        -: 1039:              "                         There are false positives with this option. Each result\n"
        -: 1040:              "                         must be carefully investigated before you know if it is\n"
        -: 1041:              "                         good or bad.\n"
        -: 1042:              "    --inline-suppr       Enable inline suppressions. Use them by placing one or\n"
        -: 1043:              "                         more comments, like: '// cppcheck-suppress warningId'\n"
        -: 1044:              "                         on the lines before the warning to suppress.\n"
        -: 1045:              "    -j <jobs>            Start <jobs> threads to do the checking simultaneously.\n"
        -: 1046:#ifdef THREADING_MODEL_FORK
        -: 1047:              "    -l <load>            Specifies that no new threads should be started if\n"
        -: 1048:              "                         there are other threads running and the load average is\n"
        -: 1049:              "                         at least <load>.\n"
        -: 1050:#endif
        -: 1051:              "    --language=<language>, -x <language>\n"
        -: 1052:              "                         Forces cppcheck to check all files as the given\n"
        -: 1053:              "                         language. Valid values are: c, c++\n"
        -: 1054:              "    --library=<cfg>      Load file <cfg> that contains information about types\n"
        -: 1055:              "                         and functions. With such information Cppcheck\n"
        -: 1056:              "                         understands your code better and therefore you\n"
        -: 1057:              "                         get better results. The std.cfg file that is\n"
        -: 1058:              "                         distributed with Cppcheck is loaded automatically.\n"
        -: 1059:              "                         For more information about library files, read the\n"
        -: 1060:              "                         manual.\n"
        -: 1061:              "    --max-ctu-depth=N    Max depth in whole program analysis. The default value\n"
        -: 1062:              "                         is 2. A larger value will mean more errors can be found\n"
        -: 1063:              "                         but also means the analysis will be slower.\n"
        -: 1064:              "    --output-file=<file> Write results to file, rather than standard error.\n"
        -: 1065:              "    --project=<file>     Run Cppcheck on project. The <file> can be a Visual\n"
        -: 1066:              "                         Studio Solution (*.sln), Visual Studio Project\n"
        -: 1067:              "                         (*.vcxproj), compile database (compile_commands.json),\n"
        -: 1068:              "                         or Borland C++ Builder 6 (*.bpr). The files to analyse,\n"
        -: 1069:              "                         include paths, defines, platform and undefines in\n"
        -: 1070:              "                         the specified file will be used.\n"
        -: 1071:              "    --max-configs=<limit>\n"
        -: 1072:              "                         Maximum number of configurations to check in a file\n"
        -: 1073:              "                         before skipping it. Default is '12'. If used together\n"
        -: 1074:              "                         with '--force', the last option is the one that is\n"
        -: 1075:              "                         effective.\n"
        -: 1076:              "    --platform=<type>, --platform=<file>\n"
        -: 1077:              "                         Specifies platform specific types and sizes. The\n"
        -: 1078:              "                         available builtin platforms are:\n"
        -: 1079:              "                          * unix32\n"
        -: 1080:              "                                 32 bit unix variant\n"
        -: 1081:              "                          * unix64\n"
        -: 1082:              "                                 64 bit unix variant\n"
        -: 1083:              "                          * win32A\n"
        -: 1084:              "                                 32 bit Windows ASCII character encoding\n"
        -: 1085:              "                          * win32W\n"
        -: 1086:              "                                 32 bit Windows UNICODE character encoding\n"
        -: 1087:              "                          * win64\n"
        -: 1088:              "                                 64 bit Windows\n"
        -: 1089:              "                          * avr8\n"
        -: 1090:              "                                 8 bit AVR microcontrollers\n"
        -: 1091:              "                          * native\n"
        -: 1092:              "                                 Type sizes of host system are assumed, but no\n"
        -: 1093:              "                                 further assumptions.\n"
        -: 1094:              "                          * unspecified\n"
        -: 1095:              "                                 Unknown type sizes\n"
        -: 1096:              "    --plist-output=<path>\n"
        -: 1097:              "                         Generate Clang-plist output files in folder.\n"
        -: 1098:              "    -q, --quiet          Do not show progress reports.\n"
        -: 1099:              "    -rp, --relative-paths\n"
        -: 1100:              "    -rp=<paths>, --relative-paths=<paths>\n"
        -: 1101:              "                         Use relative paths in output. When given, <paths> are\n"
        -: 1102:              "                         used as base. You can separate multiple paths by ';'.\n"
        -: 1103:              "                         Otherwise path where source files are searched is used.\n"
        -: 1104:              "                         We use string comparison to create relative paths, so\n"
        -: 1105:              "                         using e.g. ~ for home folder does not work. It is\n"
        -: 1106:              "                         currently only possible to apply the base paths to\n"
        -: 1107:              "                         files that are on a lower level in the directory tree.\n"
        -: 1108:              "    --report-progress    Report progress messages while checking a file.\n"
        -: 1109:#ifdef HAVE_RULES
        -: 1110:              "    --rule=<rule>        Match regular expression.\n"
        -: 1111:              "    --rule-file=<file>   Use given rule file. For more information, see: \n"
        -: 1112:              "                         http://sourceforge.net/projects/cppcheck/files/Articles/\n"
        -: 1113:#endif
        -: 1114:              "    --std=<id>           Set standard.\n"
        -: 1115:              "                         The available options are:\n"
        -: 1116:              "                          * c89\n"
        -: 1117:              "                                 C code is C89 compatible\n"
        -: 1118:              "                          * c99\n"
        -: 1119:              "                                 C code is C99 compatible\n"
        -: 1120:              "                          * c11\n"
        -: 1121:              "                                 C code is C11 compatible (default)\n"
        -: 1122:              "                          * c++03\n"
        -: 1123:              "                                 C++ code is C++03 compatible\n"
        -: 1124:              "                          * c++11\n"
        -: 1125:              "                                 C++ code is C++11 compatible\n"
        -: 1126:              "                          * c++14\n"
        -: 1127:              "                                 C++ code is C++14 compatible\n"
        -: 1128:              "                          * c++17\n"
        -: 1129:              "                                 C++ code is C++17 compatible\n"
        -: 1130:              "                          * c++20\n"
        -: 1131:              "                                 C++ code is C++20 compatible (default)\n"
        -: 1132:              "    --suppress=<spec>    Suppress warnings that match <spec>. The format of\n"
        -: 1133:              "                         <spec> is:\n"
        -: 1134:              "                         [error id]:[filename]:[line]\n"
        -: 1135:              "                         The [filename] and [line] are optional. If [error id]\n"
        -: 1136:              "                         is a wildcard '*', all error ids match.\n"
        -: 1137:              "    --suppressions-list=<file>\n"
        -: 1138:              "                         Suppress warnings listed in the file. Each suppression\n"
        -: 1139:              "                         is in the same format as <spec> above.\n"
        -: 1140:              "    --template='<text>'  Format the error messages. Available fields:\n"
        -: 1141:              "                           {file}              file name\n"
        -: 1142:              "                           {line}              line number\n"
        -: 1143:              "                           {column}            column number\n"
        -: 1144:              "                           {callstack}         show a callstack. Example:\n"
        -: 1145:              "                                                 [file.c:1] -> [file.c:100]\n"
        -: 1146:              "                           {inconclusive:text} if warning is inconclusive, text\n"
        -: 1147:              "                                               is written\n"
        -: 1148:              "                           {severity}          severity\n"
        -: 1149:              "                           {message}           warning message\n"
        -: 1150:              "                           {id}                warning id\n"
        -: 1151:              "                           {cwe}               CWE id (Common Weakness Enumeration)\n"
        -: 1152:              "                           {code}              show the real code\n"
        -: 1153:              "                           \\t                 insert tab\n"
        -: 1154:              "                           \\n                 insert newline\n"
        -: 1155:              "                           \\r                 insert carriage return\n"
        -: 1156:              "                         Example formats:\n"
        -: 1157:              "                         '{file}:{line},{severity},{id},{message}' or\n"
        -: 1158:              "                         '{file}({line}):({severity}) {message}' or\n"
        -: 1159:              "                         '{callstack} {message}'\n"
        -: 1160:              "                         Pre-defined templates: gcc, vs, edit, cppcheck1\n"
        -: 1161:              "                         The default format is 'gcc'.\n"
        -: 1162:              "    --template-location='<text>'\n"
        -: 1163:              "                         Format error message location. If this is not provided\n"
        -: 1164:              "                         then no extra location info is shown.\n"
        -: 1165:              "                         Available fields:\n"
        -: 1166:              "                           {file}      file name\n"
        -: 1167:              "                           {line}      line number\n"
        -: 1168:              "                           {column}    column number\n"
        -: 1169:              "                           {info}      location info\n"
        -: 1170:              "                           {code}      show the real code\n"
        -: 1171:              "                           \\t         insert tab\n"
        -: 1172:              "                           \\n         insert newline\n"
        -: 1173:              "                           \\r         insert carriage return\n"
        -: 1174:              "                         Example format (gcc-like):\n"
        -: 1175:              "                         '{file}:{line}:{column}: note: {info}\\n{code}'\n"
        -: 1176:              "    -v, --verbose        Output more detailed error information.\n"
        -: 1177:              "    --version            Print out version number.\n"
        -: 1178:              "    --xml                Write results in xml format to error stream (stderr).\n"
        -: 1179:              "    --xml-version=<version>\n"
        -: 1180:              "                         Select the XML file version. Currently only versions 2 is available."
        -: 1181:              "\n"
        -: 1182:              "Example usage:\n"
        -: 1183:              "  # Recursively check the current folder. Print the progress on the screen and\n"
        -: 1184:              "  # write errors to a file:\n"
        -: 1185:              "  cppcheck . 2> err.txt\n"
        -: 1186:              "\n"
        -: 1187:              "  # Recursively check ../myproject/ and don't print progress:\n"
        -: 1188:              "  cppcheck --quiet ../myproject/\n"
        -: 1189:              "\n"
        -: 1190:              "  # Check test.cpp, enable all checks:\n"
        -: 1191:              "  cppcheck --enable=all --inconclusive --std=posix test.cpp\n"
        -: 1192:              "\n"
        -: 1193:              "  # Check f.cpp and search include files from inc1/ and inc2/:\n"
        -: 1194:              "  cppcheck -I inc1/ -I inc2/ f.cpp\n"
        -: 1195:              "\n"
        -: 1196:              "For more information:\n"
        -: 1197:              "    http://cppcheck.net/manual.pdf\n"
        -: 1198:              "\n"
        -: 1199:              "Many thanks to the 3rd party libraries we use:\n"
        -: 1200:              " * tinyxml2 -- loading project/library/ctu files.\n"
        -: 1201:              " * picojson -- loading compile database.\n"
        -: 1202:              " * pcre -- rules.\n"
    #####: 1203:              " * qt -- used in GUI\n";
call    0 never executed
function _GLOBAL__sub_I__ZN13CmdLineParserC2EP8Settings called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3: 1204:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
